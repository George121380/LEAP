From agent.py
Reset goals: The sub-goals are: 
['1. Find and cook the pasta and chicken.', '2. Put the cooked chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_kitchen_counter_132(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_chicken_2050_around_kitchen_counter_132(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_dry_pasta_2073_around_kitchen_counter_132(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_items_on_stove(x: item):
    # Check if an item is on the stove
    symbol has_item=on(x, stove)
    return has_item

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind pot: item where:
            is_pot(pot) and not is_items_on_stove(pot)
        # Select the pot that is not already on the stove

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and not is_items_on_stove(dry_pasta)
        # Select dry pasta that is not already on the stove

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken item

        bind oil: item where:
            is_oil(oil)
        # Select an oil item

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and not is_items_on_stove(fryingpan)
        # Select the frying pan that is not already on the stove

        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve has_water(pot)
        # Fill the pot with water

        achieve inside(oil, fryingpan)
        # Put oil inside the frying pan

        achieve on(dry_pasta, pot)
        # Add dry pasta to the pot

        achieve cut(chicken)
        # Cut the chicken

        achieve inside(cut(chicken), fryingpan)
        # Place the chopped chicken inside the frying pan

        achieve is_on(stove)
        # Turn on the stove

        achieve inside(dry_pasta, fryingpan)
        # Combine the cooked pasta with the chicken in the frying pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: stove; available variables: [Variable<x: item>].
##############################
