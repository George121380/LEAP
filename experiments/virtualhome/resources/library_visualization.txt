Clean the bathroom:
behavior fill_sink_with_water(sink:item):
    body:
        if can_fill_sink_1(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            achieve has_water(sink)
            achieve_once is_off(faucet)


Listen to music:
behavior turn_on_dvd_player(remote_control:item, dvd_player:item):
    body:
        achieve is_on(remote_control)
        achieve is_on(dvd_player)


behavior observe_cd_player(cd_player: item):
    # Behavior to observe and locate the CD player
    body:
        if not visited(cd_player):
            observe(cd_player, "Locate the CD player")
            # Observe the CD player to gather information about its location


behavior plug_and_turn_on_cd_player(cd_player:item, powersocket:item):
    body:
        achieve plugged(cd_player) # Plug in the CD player
        achieve is_on(cd_player) # Turn on the CD player


Wash dishes with dishwasher:
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher


behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Ensure the dishwasher is closed
        achieve is_on(dishwasher)  # Turn on the dishwasher


behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher


Change TV channel:
behavior press_remote_control(remote_control:item):
    body:
        if has_switch_remote_1(remote_control):
            achieve_once inhand(remote_control)
            achieve is_on(remote_control)


Make coffee:
behavior place_coffee_maker_on_counter(coffee_maker:item, kitchen_counter:item):
    body:
        achieve on(coffee_maker, kitchen_counter)


behavior add_water_to_coffee_maker(coffee_maker:item, faucet:item):
    body:
        achieve has_water(coffee_maker)


behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)


Cook some food:
behavior identify_chicken(chicken:item):
    body:
        observe(chicken, "Check if it is chicken")


behavior put_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot


behavior boil_vegetables(pot:item, stove:item):
    body:
        if not is_pot_on_stove_1(pot, stove):
            achieve on(pot, stove)
        # Ensure the pot is placed correctly on the stove
        achieve is_on(stove)
        # Turn on the stove for boiling


Prepare breakfast:
behavior slice_bread(bread: item, knife: item, cutting_board: item):
    body:
        assert cuttable(bread) # Confirm the bread can be cut
        achieve on(bread, cutting_board) # Ensure the bread is placed on the cutting board
        achieve_once inhand(knife) # Temporarily hold the knife to slice
        achieve cut(bread) # Slice the bread


Pet cat:
behavior approach_and_touch(cat:item):
    body:
        achieve close_char(char, cat)
        touch(cat)


Wash clothes:
behavior observe_basket_for_clothes(basket:item):
    body:
        # Observe the basket for clothes
        observe(basket, "Check if there are clothes in the basket")


Iron clothes:
behavior find_basket_for_clothes(basket:item):
    body:
        achieve close_char(char,basket)


Prepare dinner:
behavior season_chicken_and_onion(chicken:item, onion:item, tray:item):
    body:
        achieve on(chicken, tray) # Place the chicken on the tray
        achieve on(onion, tray) # Place the onion on the tray


behavior add_rice_and_water_to_pot(rice:item, pot:item):
    body:
        achieve inside(rice, pot)
        achieve has_water(pot)


behavior clean_rice_in_sink(rice:item, sink:item):
    body:
        achieve_once inside(rice, sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        achieve_once is_on(faucet)
        wash(rice)
        achieve_once is_off(faucet)


behavior add_rice_and_water_to_pot(rice:item, pot:item):
    body:
        achieve inside(rice, pot)
        achieve has_water(pot)


behavior cook_rice_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)


Prepare a reading space:
behavior place_on_table(book:item, table:item):
    body:
        achieve on(book, table) # Place the book on the table


behavior find_and_place_book(book:item, coffee_table:item):
    body:
        achieve close_char(char, book)
        place_on_table(book, coffee_table)


behavior find_and_place_book(book:item, coffee_table:item):
    body:
        assert is_book(book)
        assert is_coffee_table(coffee_table)
        achieve on(book, coffee_table)


behavior find_and_place_spectacles_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve visited(spectacles)
        achieve_once inhand(spectacles)
        achieve on(spectacles, coffee_table)


Wash windows:
behavior check_bathroom_for_windows(bathroom:item):
    body:
        observe(bathroom, "Determine if there are any windows")
        # Observe the specified bathroom to check for the presence of windows


Vacuum the floor:
behavior clean_floor_with_vacuum(floor:item):
    body:
        bind vacuum: item where:
            is_vacuum_cleaner(vacuum)
        achieve_once inhand(vacuum)
        achieve is_on(vacuum)
        achieve close_char(char, floor)
        achieve clean(floor)


Put groceries in Fridge:
behavior clean_fish(fish:item):
    body:
        achieve clean(fish)
        # Ensure the fish is cleaned


behavior place_items_on_table(in_dining_room: item, table: item):
    body:
        foreach item: item:
            if(is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item)) and inside(item, in_dining_room):
                achieve on(item, table)


behavior place_items_on_table(in_dining_room: item, table: item):
    body:
        achieve on(in_dining_room, table)


behavior throw_items_in_trash(trash: item, trashcan: item):
    body:
        achieve inside(trash, trashcan)
        # The item should be inside the trashcan


behavior put_item_back_in_fridge(item1:item, item2:item, fridge:item):
    body:
        achieve inside(item1, fridge)
        achieve inside(item2, fridge)


behavior close_fridge(fridge:item):
    body:
        achieve closed(fridge)


behavior find_dining_table(dining_room:item):
    body:
        if is_dining_table_present_1(dining_room):
            # If a dining table is present in the dining room, approach it
            bind table: item where:
                is_table(table) and inside(table, dining_room)
            achieve close_char(char, table)
        else:
            # If no known dining table is present, start observing unvisited tables
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Confirm if its a dining table inside the dining room")


Write an email:
behavior sit_on_chair_and_touch_mouse(chair:item, mouse:item):
    body:
        achieve on_char(char, chair)  # Sit on the chair
        achieve close_char(char, mouse)  # Be close to the mouse
        touch(mouse)  # Touch the mouse


Drink:
behavior fill_a_cup_with_water(cup:item, faucet:item):
    body:
        assert grabbable(cup)
        # Ensure the cup is an item that can be grabbed

        achieve_once inhand(cup)
        # Temporarily hold the cup in hand

        achieve close_char(char, faucet)
        # Ensure the character is close to the faucet

        achieve_once is_on(faucet)
        # Temporarily turn on the faucet

        is_sink(cup)
        # Fill the cup with water

        achieve_once is_off(faucet)
        # Temporarily turn off the faucet to stop the water flow


behavior pour_milk_into_cup(milk:item, cup:item):
    body:
        achieve inside(milk, cup)
        # Pour the milk into the cup


behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once close_char(char, sink)
        # Approach the sink
        achieve_once inhand(pot)
        # Temporarily hold the pot
        achieve has_water(pot)
        # Ensure the pot is filled with water


