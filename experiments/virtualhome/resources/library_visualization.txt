Clean the bathroom:
behavior clean_sink(sink:item):
    body:
        achieve clean(sink)
        # Ensure that the sink is clean


Listen to music:
behavior locate_remote_control(remote:item):
    body:
        achieve close_char(char, remote)
        # Character should be close to the remote control


behavior locate_remote_control(remote:item):
    body:
        observe(remote, "Check where the remote control is located")


behavior turn_on_dvd_player_with_remote(remote_control:item, dvd_player:item):
    body:
        # Achieve the state where the DVD player is on
        achieve is_on(dvd_player)


behavior locate_remote(remote:item):
    body:
        if exists r: item : is_remote_control_1(r):
            # If we have already found the remote control in known information
            bind r: item where:
                is_remote_control_1(r)
            achieve close_char(char, r)

        else:
            # Check all unvisited items that might be a remote control
            foreach r: item:
                if is_remote_control_1(r) and not visited(r):
                    observe(r, "Check if it is the remote control for the DVD player") 


Wash dishes with dishwasher:
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher


behavior start_dishwasher(dishwasher:item):
    body:
        achieve is_on(dishwasher) # Turn on the dishwasher


Change TV channel:
behavior locate_tv_remote(remote:item):
    body:
        observe(remote, "Check the location of the remote control")
        # Use observation to locate the remote control for the TV


behavior use_remote_to_turn_on_tv(remote_control:item, television:item):
    body:
        assert is_remote_control_1(remote_control)
        assert is_television(television)
        achieve has_switch(remote_control)
        # Ensure the remote control has a switch to turn on the TV
        achieve inhand(remote_control)
        # Temporarily achieve holding the remote control to use it

        observe(television, "Check if the TV is OFF or ON")
        # Observe the television to determine its current state

        achieve is_on(television)
        # Achieve the state of the TV being on


