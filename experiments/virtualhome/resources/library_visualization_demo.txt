Wash clothes:
behavior load_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)
        # Place the clothes inside the washing machine


behavior start_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine)
        # Close the washing machine door
        achieve is_on(washing_machine)
        # Turn on the washing machine


behavior wash_clothes_in_machine(clothes: item, washing_machine: item):
    body:
        achieve inside(clothes, washing_machine)


behavior start_washing_machine(washing_machine: item):
    body:
        achieve closed(washing_machine)
        achieve is_on(washing_machine)


behavior transfer_clothes(clothes:item, wm:item):
    body:
        achieve inside(clothes, wm)


behavior start_washing_machine(wm:item):
    body:
        achieve closed(wm)
        achieve is_on(wm)


behavior load_clothes_into_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)


behavior start_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine) # Close the washing machine door
        achieve is_on(washing_machine) # Turn on the washing machine


Cook some food:
behavior gather_vegetable(vegetable:item):
    body:
        achieve_once inhand(vegetable)


behavior clean_vegetables(food_vegetable:item):
    body:
        bind sink: item where:
            is_sink(sink)
        achieve_once inside(food_vegetable, sink)
        if exists faucet: item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            wash(food_vegetable)
            achieve_once is_off(faucet)
        else:
            wash(food_vegetable)


behavior put_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)


behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve inside(pot, stove)
        achieve is_on(stove)


behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)


behavior gather_items(veggie:item, pot:item):
    body:
        achieve_once inhand(veggie)
        achieve_once inhand(pot)


behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve inside(vegetables, pot)


behavior boil_vegetables(vegetables: item, stove: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        achieve close_char(char, stove)
        achieve is_on(stove)


behavior put_food_in_pot(food:item, pot:item): 
    body: 
        achieve inside(food, pot)


behavior boil_vegetables_on_stove(stove:item, pot:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on


Listen to music:
behavior turn_on_cd_player(cd_player:item):
    body:
        assert has_switch(cd_player)
        achieve is_on(cd_player)


Prepare a reading space:
behavior find_book():
    body:
        foreach book: item:
            if is_book(book) and not visited(book):
                observe(book, "Check if this is the book")


behavior find_book():
    body:
        foreach book: item:
            if is_book(book) and not visited(book):
                observe(book, "Check if this is the book")


behavior find_book():
    body:
        foreach book: item:
            if is_book(book) and not visited(book):
                observe(book, "Check if this is the book")


behavior put_book_on_table(book: item, table: item):
    body:
        achieve on(book, table)


Change TV channel:
behavior turn_tv_on_or_off(tv:item, remote:item):
    body:
        if is_off(tv):
            touch(remote)
            achieve is_on(tv)
        else:
            touch(remote)
            achieve is_off(tv)


behavior change_channel(tv:item, remote:item):
    body:
        touch(remote)
        observe(tv, "Check current channel")


behavior turn_tv_on_or_off(tv:item, remote:item):
    body:
        if is_off(tv):
            touch(remote)
            achieve is_on(tv)
        else:
            touch(remote)
            achieve is_off(tv)


behavior change_channel(tv:item, remote:item):
    body:
        touch(remote)
        observe(tv, "Check current channel")


behavior turn_tv_on_or_off(tv:item, remote:item):
    body:
        if is_off(tv):
            touch(remote)
            achieve is_on(tv)
        else:
            touch(remote)
            achieve is_off(tv)


behavior change_channel(tv:item, remote:item):
    body:
        touch(remote)
        observe(tv, "Check current channel")


behavior turn_tv_on_or_off(tv:item, remote:item):
    body:
        if is_off(tv):
            touch(remote)
            achieve is_on(tv)
        else:
            touch(remote)
            achieve is_off(tv)


behavior change_channel(tv:item, remote:item):
    body:
        touch(remote)
        observe(tv, "Check current channel")


behavior turn_tv_on_or_off(tv:item, remote:item):
    body:
        if is_off(tv):
            touch(remote)
            achieve is_on(tv)
        else:
            touch(remote)
            achieve is_off(tv)


behavior change_channel(tv:item, remote:item):
    body:
        touch(remote)
        observe(tv, "Check current channel")


behavior turn_tv_on_or_off(tv:item, remote:item):
    body:
        if is_off(tv):
            touch(remote)
            achieve is_on(tv)
        else:
            touch(remote)
            achieve is_off(tv)


behavior change_channel(tv:item, remote:item):
    body:
        touch(remote)
        observe(tv, "Check current channel")


Turn on light:
behavior locate_light_switch_in_bathroom(bathroom:item):
    body:
        if exists switch:item : close(switch, bathroom) and is_light(switch):
            # Check if there is a light switch within the bathroom
            bind switch: item where:
                close(switch, bathroom) and is_light(switch)
            achieve visited(switch)

        else:
            # If no light switch is known, observe the bathroom to locate the switch
            observe(bathroom,"Find the light switch in the bathroom")


behavior turn_on_light_switch(light_switch:item):
    body:
        achieve is_on(light_switch)


behavior turn_on_light_switch(light_switch:item):
    body:
        achieve is_on(light_switch)


behavior turn_on_light_switch(switch:item):
    body:
        achieve is_on(switch) # Ensure the light switch is turned on


Drink:
behavior fill_cup_with_water(char: character, cup: item, faucet: item):
    body:
        achieve_once close_char(char, faucet)
        assert close(cup, faucet)
        assert grabbable(cup)
        move(cup)


behavior move_cup_to_faucet(cup:item, faucet:item):
    body:
        achieve close(cup, faucet)


behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        if has_faucet(faucet):
            bind f: item where:
                is_faucet(f)
            achieve close(cup, f)
            achieve_once is_on(f)
            achieve recipient(cup)
            achieve_once is_off(f)


Prepare dinner:
behavior find_rice():
    body:
        foreach item: item:
            if is_food_rice(item) and not visited(item):
                observe(item, "Check if this is rice")


behavior find_cooking_equipment():
    body:
        foreach item: item:
            if (is_pot(item) or is_stove(item)) and not visited(item):
                observe(item, "Check if this is the needed cooking equipment")


behavior find_rice():
    body:
        foreach item: item:
            if is_food_rice(item) and not visited(item):
                observe(item, "Check if this is rice")


behavior find_cooking_equipment():
    body:
        foreach item: item:
            if (is_pot(item) or is_stove(item)) and not visited(item):
                observe(item, "Check if this is the needed cooking equipment")


behavior find_rice():
    body:
        foreach item: item:
            if is_food_rice(item) and not visited(item):
                observe(item, "Check if this is rice")


behavior find_cooking_equipment():
    body:
        foreach item: item:
            if (is_pot(item) or is_stove(item)) and not visited(item):
                observe(item, "Check if this is the needed cooking equipment")


behavior clean_rice(rice: item, sink: item):
    body:
        achieve_once inside(rice, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
        wash(rice)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)


behavior observe_items_near_sink(sink:item):
    body:
        foreach o: item:
            if is_food_rice(o) and close(o, sink):
                observe(o, "Check if this is rice")


behavior wash_food_in_sink(food:item, sink:item):
    body:
        achieve_once inside(food, sink)
        if exists faucet: item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
        wash(food)
        if exists faucet: item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)


behavior cook_rice_with_stove(rice:item, pot:item, stove:item):
    body:
        achieve inside(rice, pot)
        achieve close(pot, stove)
        achieve is_on(stove)


Make coffee:
behavior gather_materials(counter:item):
    body:
        foreach item:item:
            # Ensure all required materials are on the kitchen counter
            if is_food_food(item) or is_coffee_filter(item) or is_water(item):
                achieve on(item, counter)


