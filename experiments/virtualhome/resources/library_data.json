{
    "behavior_data": {
        "Cook some food": [
            {
                "usage_description": "",
                "cdl": "behavior transfer_to_bowl_and_cool(vegetables:item, bowl:item, stove:item):\n    body:\n        achieve inside(vegetables, bowl)\n        achieve is_off(stove)\n        # Ensure stove is turned off to prevent further boiling\n",
                "source_sub_task": "3. Transfer the vegetables to a bowl and cool them.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior achieve_close_char_to_item(vegetable:item):\n    body:\n        achieve close_char(char, vegetable)\n",
                "source_sub_task": "1. Wash all the vegetables.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior wash_in_sink(vegetable:item, sink:item):\n    body:\n        achieve inside(vegetable, sink)\n        if exists faucet: item: is_faucet(faucet) and close(faucet, sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_on(faucet)\n        wash(vegetable)\n        if exists faucet: item: is_faucet(faucet) and close(faucet, sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_off(faucet)\n",
                "source_sub_task": "1. Wash all the vegetables.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior put_vegetables_in_pot_and_boiler(pot:item, vegetables:item, stove:item):\n    body:\n        achieve inside(vegetables, pot)\n        achieve on(pot, stove)\n        achieve is_on(stove)\n",
                "source_sub_task": "2. Put the washed vegetables in a pot and boil them on the stove.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior put_pot_in_fridge(pot:item, fridge:item):\n    body:\n        achieve inside(pot, fridge) # Place the pot inside the fridge\n",
                "source_sub_task": "3. Store the whole pot in the fridge.",
                "functions": [
                    "def is_in_fridge_1(pot:item):\n    # Function to check if the pot is in the fridge\n    symbol inside_fridge=exists fridge: item : is_fridge(fridge) and inside(pot, fridge)\n    return inside_fridge\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior close_fridge(fridge:item):\n    body:\n        achieve closed(fridge) # Ensure the fridge is closed\n",
                "source_sub_task": "3. Store the whole pot in the fridge.",
                "functions": [
                    "def is_in_fridge_1(pot:item):\n    # Function to check if the pot is in the fridge\n    symbol inside_fridge=exists fridge: item : is_fridge(fridge) and inside(pot, fridge)\n    return inside_fridge\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior wash_vegetables(vegetables: item):\n    body:\n        bind sink: item where:\n            is_sink(sink)\n        achieve inside(vegetables, sink)\n\n        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_on(faucet)\n            wash(vegetables)\n            achieve_once is_off(faucet)\n        else:\n            wash(vegetables)\n",
                "source_sub_task": "1. Wash all the vegetables.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior put_vegetables_in_pot_and_boil(vegetables:item, pot:item, stove:item):\n    body:\n        achieve inside(vegetables, pot)\n        achieve inside(pot, stove)\n        achieve is_on(stove)\n",
                "source_sub_task": "2. Put the vegetables in a pot and boil them on the stove.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior close_the_fridge(fridge:item):\n    body:\n        achieve closed(fridge)\n",
                "source_sub_task": "2. Put the vegetables in a pot and boil them on the stove.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior store_pot_in_fridge(pot:item, fridge:item):\n    body:\n        achieve inside(pot, fridge)\n        # Place the pot inside the fridge\n",
                "source_sub_task": "3. Store the whole pot in the fridge.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior ensure_fridge_is_closed(fridge:item):\n    body:\n        achieve closed(fridge)\n        # Ensure the fridge door is closed\n",
                "source_sub_task": "3. Store the whole pot in the fridge.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior boil_vegetables_on_stove(vegetables:item, pot:item, stove:item):\n    body:\n        put_vegetables_in_pot_and_boil(vegetables, pot, stove)\n        # After ensuring the vegetables are in the pot, proceed to boil them on the stove\n",
                "source_sub_task": "3. Boil the vegetables on the stove.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior boil_vegetables_on_stove(vegetables:item, pot:item, stove:item):\n    body:\n        achieve inside(vegetables, pot) # Place the washed vegetables inside the pot\n        achieve on(pot, stove) # Place the pot with vegetables on the stove\n        achieve is_on(stove) # Turn on the stove to start boiling\n        ",
                "source_sub_task": "2. Boil the washed vegetables in a pot on the stove.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior wash_vegetables(vegetables:item):\n    body:\n        achieve clean(vegetables)\n        achieve has_water(vegetables)\n",
                "source_sub_task": "1. Wash all the vegetables.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior wash_all_vegetables(vegetables:item):\n    body:\n        wash_vegetables(vegetables)\n",
                "source_sub_task": "1. Wash all the vegetables.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior observe_chicken(chicken: item):\n    body:\n        observe(chicken, \"Check the chicken to confirm it is the one to be sliced\")\n        # Ensure the chicken is the correct one by observing it closely\n",
                "source_sub_task": "1. Identify the chicken to be sliced.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior slice_chicken(chicken:item, cutting_board:item, knife:item):\n    body:\n        achieve_once inhand(knife)\n        achieve_once inhand(chicken)\n        achieve on(chicken, cutting_board)\n        achieve cut(chicken)\n",
                "source_sub_task": "2. Slice the chicken.",
                "functions": []
            }
        ],
        "Put groceries in Fridge": [
            {
                "usage_description": "",
                "cdl": "behavior move_char_to_chicken(chicken: item):\n    body:\n        achieve close_char(char, chicken) # Move the character close to the chicken\n",
                "source_sub_task": "1. Find the chicken.",
                "functions": [
                    "def is_near_sink_1(item:item):\n    # Function to check if an item is near a sink\n    symbol near_sink=exists sink: item : is_sink(sink) and close(item, sink)\n    return near_sink\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior grab_the_pot(pot:item):\n    body:\n        achieve_once inhand(pot)\n",
                "source_sub_task": "3. Grab the pot.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior put_chicken_in_pot(chicken:item, pot:item):\n    body:\n        achieve inside(chicken, pot) \n        # Ensure the chicken is placed inside the pot\n",
                "source_sub_task": "2. Put the chicken into the pot.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior approach_chicken(chicken:item):\n    body:\n        achieve close_char(char, chicken)\n",
                "source_sub_task": "1. Put the chicken into the pot.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior approach_pot(pot:item):\n    body:\n        achieve close_char(char, pot)\n",
                "source_sub_task": "1. Put the chicken into the pot.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior place_chicken_in_pot(chicken:item, pot:item):\n    body:\n        achieve inside(chicken, pot)\n",
                "source_sub_task": "1. Place the chicken into the pot.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior observe_pot_for_location(pot:item):\n    body:\n        observe(pot, \"Check where the pot is located\")\n",
                "source_sub_task": "1. Locate the pot.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior cut_chicken_into_pieces(chicken:item, cutting_board:item, knife:item):\n    body:\n        observe_chicken(chicken)\n        move_to_cutting_board(chicken, cutting_board)\n        achieve_inhand_knife(knife)\n        place_chicken_on_board(chicken, cutting_board)\n        cut_chicken(chicken, cutting_board, knife)\n",
                "source_sub_task": "1. Cut the chicken into pieces.",
                "functions": []
            }
        ],
        "Drink": [
            {
                "usage_description": "",
                "cdl": "behavior fill_cup_with_water(cup:item, faucet:item):\n    body:\n        achieve has_water(cup)\n        # Fill the cup with water\n",
                "source_sub_task": "1. Fill a cup with water.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior pour_milk_into_cup(milk:item, cup:item):\n    body:\n        achieve inside(milk, cup)\n",
                "source_sub_task": "1. Pour milk into a cup.",
                "functions": [
                    "def is_filled_1(cup:item):\n    # Determine if the item has milk poured into it\n    symbol filled=exists milk:item: is_milk(milk) and inside(milk, cup)\n    return filled\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior fill_pot_with_water(pot:item):\n    body:\n        achieve has_water(pot)\n        # The pot should be filled with water\n",
                "source_sub_task": "1. Fill the pot with water.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior put_pot_on_stove(pot:item, stove:item):\n    body:\n        achieve on(pot, stove) # Place the pot on the stove\n",
                "source_sub_task": "2. Place the pot on the stove and turn on the heat.",
                "functions": [
                    "def has_stove_nearby_1(kitchen:item):\n    # Determine if there is a stove nearby in the kitchen\n    symbol stove_nearby=exists stove:item: is_stove(stove) and close(stove,kitchen)\n    return stove_nearby\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior heat_stove(stove:item):\n    body:\n        achieve is_on(stove) # Turn the stove on\n",
                "source_sub_task": "2. Place the pot on the stove and turn on the heat.",
                "functions": [
                    "def has_stove_nearby_1(kitchen:item):\n    # Determine if there is a stove nearby in the kitchen\n    symbol stove_nearby=exists stove:item: is_stove(stove) and close(stove,kitchen)\n    return stove_nearby\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior fill_pot_with_water(pot: item):\n    body:\n        achieve has_water(pot)\n",
                "source_sub_task": "1. Fill a pot with water.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior put_pot_on_stove(pot:item, stove:item):\n    body:\n        achieve on(pot, stove)\n",
                "source_sub_task": "2. Place the pot on the stove and turn on the heat.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior turn_on_stove(stove:item):\n    body:\n        achieve is_on(stove)\n",
                "source_sub_task": "2. Place the pot on the stove and turn on the heat.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior fill_pot_with_water(pot:item):\n    # Behavior to fill the pot with water\n    body:\n        achieve has_water(pot)\n        # Ensure the pot has water\n",
                "source_sub_task": "1. Fill the pot with water.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior fill_cup_with_water(cup:item, faucet:item):\n    body:\n        achieve has_water(cup)\n",
                "source_sub_task": "1. Fill a cup with water.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior find_water_source():\n    body:\n        foreach faucet: item:\n            if is_faucet(faucet) and not visited(faucet):\n                observe(faucet, \"Check if this is a source of water\")\n",
                "source_sub_task": "1. Find a source of water.  ",
                "functions": [
                    "def is_water_source_1(faucet:item):\n    # Function to check if the given item is a water source, specifically a faucet\n    return is_faucet(faucet)\n"
                ]
            }
        ],
        "Iron clothes": [
            {
                "usage_description": "",
                "cdl": "behavior clean_shirt(shirt:item, sink:item):\n    body:\n        achieve_once inside(shirt, sink)\n        # Ensure the shirt is placed inside the sink\n\n        bind faucet: item where:\n            is_faucet(faucet) and close(faucet, sink)\n        # Bind to a faucet close to the sink\n        \n        achieve_once is_on(faucet)\n        # Turn on the faucet to start the washing process\n        \n        wash(shirt)\n        # Wash the shirt\n\n        scrub(shirt)\n        # Scrub the shirt\n\n        rinse(shirt)\n        # Rinse the shirt\n\n        achieve_once is_off(faucet)\n        # Turn off the faucet after rinsing\n",
                "source_sub_task": "1. Wash the shirt.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior place_on_hanger(clothes:item, hanger:item):\n    body:\n        achieve on(clothes, hanger)\n        # Place the clothes on the hanger\n",
                "source_sub_task": "2. Dry the shirt.",
                "functions": [
                    "def is_clothes_1(x: item):\n    symbol is_clothes=exists o: item : is_clothes(x)\n    return is_clothes\n",
                    "def is_hanger_1(x: item):\n    symbol is_hanger=exists o: item : is_hanger(x)\n    return is_hanger\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior wash_shirt(shirt:item, sink:item):\n    body:\n        achieve_once inside(shirt, sink)\n        # Place the shirt inside the sink\n\n        achieve has_water(sink)\n        # Ensure the sink has water inside it for washing\n\n        wash(shirt)\n        # Wash the shirt\n\n        scrub(shirt)\n        # Scrub the shirt to ensure it is cleaned\n\n        rinse(shirt)\n        # Rinse the shirt to remove soap\n\n        achieve_once clean(shirt)\n        # Ensure the shirt is cleaned after washing\n",
                "source_sub_task": "1. Wash the shirt.",
                "functions": []
            }
        ],
        "make up bed": [
            {
                "usage_description": "",
                "cdl": "behavior fill_and_close_cup(cup:item, faucet:item):\n    body:\n        fill_cup_with_water(cup, faucet)\n        achieve has_water(cup)\n        # Ensure the cup has water inside\n",
                "source_sub_task": "2. Fill the cup with water.",
                "functions": []
            }
        ],
        "Pet cat": [
            {
                "usage_description": "",
                "cdl": "behavior locate_cat(cat:item):\n    body:\n        if not visited(cat):\n            observe(cat,\"Locate the cat within the household environment\")\n",
                "source_sub_task": "1. Locate the cat within the household environment.",
                "functions": [
                    "def is_cat_located_1(cat:item):\n    # Function to check if the cat has been located\n    symbol located=exists room: item : inside(cat, room)\n    return located\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior approach_cat(cat:item):\n    body:\n        achieve close_char(char, cat)\n        achieve facing_char(char, cat)\n",
                "source_sub_task": "2. Approach the cat cautiously and touch it.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior touch_cat(cat:item):\n    body:\n        touch(cat)\n",
                "source_sub_task": "2. Approach the cat cautiously and touch it.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior move_to_cutting_board(chicken: item, cutting_board: item):\n    body:\n        achieve close(chicken, cutting_board)\n",
                "source_sub_task": "1. Slice the chicken into appropriate portions.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior place_chicken_on_board(chicken: item, cutting_board: item):\n    body:\n        achieve on(chicken, cutting_board)\n",
                "source_sub_task": "1. Slice the chicken into appropriate portions.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior achieve_inhand_knife(knife: item):\n    body:\n        achieve_once inhand(knife)\n",
                "source_sub_task": "1. Slice the chicken into appropriate portions.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior cut_chicken(chicken: item, cutting_board: item, knife: item):\n    body:\n        achieve cut(chicken)\n",
                "source_sub_task": "1. Slice the chicken into appropriate portions.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior slice_the_chicken(chicken:item, cutting_board:item, knife:item):\n    body:\n        achieve cut(chicken)\n        # Slice the chicken\n",
                "source_sub_task": "1. Slice the chicken.  ",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior fill_bowl_with_water(bowl:item, faucet:item):\n    body:\n        achieve close(bowl, faucet)\n        # Position the bowl close to the faucet\n\n        achieve_once is_on(faucet)\n        is_sink(bowl)\n        # Turn on the faucet and fill the bowl with water\n\n        achieve_once is_off(faucet)\n        # Turn off the faucet after filling the bowl\n",
                "source_sub_task": "1. Fill a bowl with water and place it on the table in the home office.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior place_bowl_on_table(bowl:item, table:item):\n    body:\n        achieve on(bowl, table)\n        # Place the bowl on the table\n",
                "source_sub_task": "1. Fill a bowl with water and place it on the table in the home office.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior fill_bowl_with_water(bowl:item, faucet:item):\n    body:\n        achieve has_water(bowl) # Ensure the bowl is filled with water\n",
                "source_sub_task": "1. Fill a bowl with water.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior gently_pick_up(cat:item):\n    body:\n        achieve close_char(char, cat)\n        touch_cat(cat)\n        achieve_once inhand(cat)\n",
                "source_sub_task": "1. Gently pick up the cat.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior move_cat_to_bathtub(cat:item, bathtub:item):\n    body:\n        achieve close(cat, bathtub)\n        achieve on(cat, bathtub)\n        achieve close_char(char, cat)\n              ",
                "source_sub_task": "2. Take the cat to the bathtub.",
                "functions": [
                    "def is_bathtub_present_1(bathtub:item):\n    # Function to check if the identified item is a bathtub\n    assert is_bathtub(bathtub)\n    return True\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior find_suitable_sink():\n    body:\n        if exists sink: item : is_sink(sink) and clean(sink):\n            bind sink: item where:\n                is_sink(sink) and clean(sink)\n            achieve close_char(char, sink)\n        else:\n            foreach sink: item:\n                if is_sink(sink) and not visited(sink):\n                    observe(sink, \"Check if the sink is clean and suitable for washing a cat\")\n",
                "source_sub_task": "1. Find the sink suitable for washing a cat.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior clean_sink(sink:item):\n    body:\n        achieve clean(sink)\n",
                "source_sub_task": "1. Find the sink suitable for washing a cat.",
                "functions": []
            }
        ],
        "Prepare a reading space": [
            {
                "usage_description": "",
                "cdl": "behavior place_book_on_coffee_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n",
                "source_sub_task": "2. Place the book on the coffee table in the home office.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior find_book_and_place_on_coffee_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n",
                "source_sub_task": "1. Find the book and place it on the coffee table in the home office.",
                "functions": []
            }
        ],
        "Prepare breakfast": [
            {
                "usage_description": "",
                "cdl": "behavior fill_the_pot_with_water(pot:item):\n    body:\n        achieve has_water(pot)\n        # Ensure the pot is filled with water\n",
                "source_sub_task": "1. Fill a pot with water.",
                "functions": []
            }
        ],
        "Clean the bathroom": [
            {
                "usage_description": "",
                "cdl": "behavior wash_sink(sink:item):\n    body:\n        if has_faucet_1(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet,sink)\n            achieve_once is_on(faucet)\n            # Turn on the faucet if available\n            wash(sink)\n            achieve_once is_off(faucet)\n            # Turn off the faucet after washing if available\n",
                "source_sub_task": "1. Fill the bathroom sink with water.",
                "functions": [
                    "def has_faucet_1(sink:item):\n    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)\n    return has_faucet\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior clean_sink_directly(sink: item):\n    body:\n        if dirty(sink):\n            clean_sink(sink) # Call wash_sink behavior if the sink is dirty\n        else:\n            # If sink is already clean, ensure its visited and doublecheck its state\n            achieve visited(sink)\n",
                "source_sub_task": "2. Clean the bathroom sink.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior add_soap_to_sink(sink: item, soap: item):\n    body:\n        achieve close_char(char, sink) # Approach the sink\n        achieve_once inhand(soap) # Temporarily hold the soap\n        achieve inside(soap, sink) # Add the soap to the water in the sink\n",
                "source_sub_task": "3. Add soap to create soapy water.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior fill_sink_with_water(sink:item):\n    body:\n        if has_faucet_2(sink): # Check if the sink has a faucet to fill it with water\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_on(faucet) # Turn on the faucet\n            achieve has_water(sink) # Ensure the sink is filled with water\n            achieve_once is_off(faucet) # Turn off the faucet after filling\n\n# Define the main behavior to achieve the subtask goal",
                "source_sub_task": "2. Fill the sink with water.",
                "functions": [
                    "def has_faucet_2(sink:item):\n    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)\n    return has_faucet\n\n# Define function to fill the sink with water"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior inspect_sink(sink:item):\n    body:\n        observe(sink, \"Check the physical condition of the sink\")\n        # Inspect the sinks condition\n",
                "source_sub_task": "1. Identify and assess the condition of the bathroom sink.",
                "functions": [
                    "def condition_of_sink_1(sink:item):\n    # Function to determine if the sink is in good condition\n    symbol condition_good= not dirty(sink) and closed(sink)\n    return condition_good\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior fill_sink_with_water(sink:item):\n    body:\n        bind faucet: item where:\n            is_faucet(faucet) and close(faucet, sink)\n        achieve_once is_on(faucet)\n        achieve has_water(sink)\n        achieve_once is_off(faucet)\n",
                "source_sub_task": "2. Fill the sink with water.",
                "functions": []
            }
        ],
        "Listen to music": [
            {
                "usage_description": "",
                "cdl": "behavior locate_dvd_player(dvd_player:item):\n    body:\n        achieve close_char(char, dvd_player)\n",
                "source_sub_task": "1. Locate the DVD player in the household environment.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior locate_remote_control(remote_control:item):\n    body:\n        achieve visited(remote_control)\n",
                "source_sub_task": "1. Locate the remote control.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior locate_cd_player(cd_player:item):\n    body:\n        achieve visited(cd_player)\n        # Mark the CD player as visited after locating it\n",
                "source_sub_task": "1. Locate the CD player.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior ensure_cd_player_plugged_in(cd_player:item):\n    body:\n        achieve plugged(cd_player)\n        ",
                "source_sub_task": "2. Turn on the CD player.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior turn_on_cd_player(cd_player:item):\n    body:\n        achieve is_on(cd_player)\n",
                "source_sub_task": "2. Turn on the CD player.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior use_remote_to_turn_on_dvd_player(remote_control:item, dvd_player:item):\n    body:\n        achieve has_switch(dvd_player) # Ensure the DVD player has a switch\n        achieve close(remote_control, dvd_player) # Ensure the remote is close to DVD player\n        achieve is_on(dvd_player) # Ensure the DVD player is turned on\n        ",
                "source_sub_task": "2. Use the remote control to turn on the DVD player.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior find_cd_player_location(cd_player:item):\n    body:\n        achieve close_char(char, cd_player)\n",
                "source_sub_task": "1. Locate the CD player.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior ensure_cd_player_plugged_in(cd_player:item):\n    body:\n        achieve plugged(cd_player)\n",
                "source_sub_task": "2. Turn on the CD player.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior turn_on_cd_player(cd_player:item):\n    body:\n        achieve is_on(cd_player)\n",
                "source_sub_task": "2. Turn on the CD player.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior locate_remote(remote_control:item):\n    body:\n        achieve visited(remote_control)\n        # Ensure the remote control has been locatedobserved\n",
                "source_sub_task": "1. Locate the remote control for the DVD player.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior ensure_cd_player_plugged_in(cd_player:item):\n    body:\n        achieve plugged(cd_player)\n",
                "source_sub_task": "2. Turn on the CD player.",
                "functions": []
            }
        ],
        "Wash dishes with dishwasher": [
            {
                "usage_description": "",
                "cdl": "behavior put_dish_soap_in_dishwasher(dish_soap:item, dishwasher:item):\n    body:\n        achieve inside(dish_soap, dishwasher)\n",
                "source_sub_task": "1. Put dish soap in the dishwasher.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior observe_bowls_and_plates(dishwasher:item):\n    body:\n        observe(dishwasher, \"Check for the bowls and plates inside the dishwasher\")\n",
                "source_sub_task": "1. Identify the bowls and plates that need to be washed.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior load_object_to_dishwasher(o: item, dishwasher: item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the object inside the dishwasher\n",
                "source_sub_task": "2. Load the bowls and plates into the dishwasher and start the wash cycle.",
                "functions": [
                    "def all_bowls_and_plates_inside_1(dishwasher:item):\n    # Function to check if all bowls and plates are inside the dishwasher\n    symbol inside_dishwasher=exists o: item : (is_bowl(o) or is_plate(o)) and inside(o, dishwasher)\n    return inside_dishwasher\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior start_dishwasher_cycle(dishwasher: item):\n    body:\n        achieve closed(dishwasher)\n        # Close the dishwasher to prepare for the cycle\n        achieve is_on(dishwasher)\n        # Turn on the dishwasher to start the cycle\n",
                "source_sub_task": "2. Load the bowls and plates into the dishwasher and start the wash cycle.",
                "functions": [
                    "def all_bowls_and_plates_inside_1(dishwasher:item):\n    # Function to check if all bowls and plates are inside the dishwasher\n    symbol inside_dishwasher=exists o: item : (is_bowl(o) or is_plate(o)) and inside(o, dishwasher)\n    return inside_dishwasher\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior close_the_dishwasher(dishwasher:item):\n    body:\n        achieve is_off(dishwasher)\n        achieve closed(dishwasher)\n",
                "source_sub_task": "2. Start the dishwasher to clean the bowls and plates.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior wash_and_rinse_fork(fork:item):\n    body:\n        wash(fork) # Wash the fork by hand\n        rinse(fork) # Rinse the fork by hand\n",
                "source_sub_task": "3. Wash the forks by hand.",
                "functions": []
            }
        ],
        "Change TV channel": [
            {
                "usage_description": "",
                "cdl": "behavior locate_remote(remote_control:item):\n    body:\n        # Check all items to find the remote control\n        if not visited(remote_control):\n            observe(remote_control, \"Locate the remote control\")\n        # Mark the remote control as visited\n",
                "source_sub_task": "1. Locate the remote control.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior sit_on_couch(couch:item):\n    body:\n        achieve on_char(char, couch)\n",
                "source_sub_task": "1. Sit on the couch.",
                "functions": []
            }
        ]
    },
    "function_name_mapping": {
        "is_in_fridge": "is_in_fridge_1",
        "is_near_sink": "is_near_sink_1",
        "has_water_source_nearby": "has_water_source_nearby_1",
        "has_observed_faucet_and_cup_observed": "has_observed_faucet_and_cup_observed_1",
        "has_water_source": "has_water_source_1",
        "has_chicken": "has_chicken_1",
        "has_cup_and_water": "has_cup_and_water_1",
        "is_filled": "is_filled_1",
        "has_stove_nearby": "has_stove_nearby_1",
        "is_clothes": "is_clothes_1",
        "is_hanger": "is_hanger_1",
        "is_cup": "is_cup_1",
        "is_cat_located": "is_cat_located_1",
        "is_bathtub_present": "is_bathtub_present_1",
        "locate_specific_book": "locate_specific_book_1",
        "has_faucet": "has_faucet_2",
        "all_bowls_and_plates_inside": "all_bowls_and_plates_inside_1",
        "is_sink_in_bathroom": "is_sink_in_bathroom_1",
        "is_water_source": "is_water_source_1",
        "is_bathroom_sink": "is_bathroom_sink_1",
        "observed_sink_bathroom": "observed_sink_bathroom_1",
        "condition_of_sink": "condition_of_sink_1",
        "is_in_bathroom": "is_in_bathroom_1"
    },
    "function_name_counts": {
        "is_in_fridge": 2,
        "is_near_sink": 2,
        "has_water_source_nearby": 2,
        "has_observed_faucet_and_cup_observed": 2,
        "has_water_source": 2,
        "has_chicken": 2,
        "has_cup_and_water": 2,
        "is_filled": 2,
        "has_stove_nearby": 2,
        "is_clothes": 2,
        "is_hanger": 2,
        "is_cup": 2,
        "is_cat_located": 2,
        "is_bathtub_present": 2,
        "locate_specific_book": 2,
        "has_faucet": 3,
        "all_bowls_and_plates_inside": 2,
        "is_sink_in_bathroom": 2,
        "is_water_source": 2,
        "is_bathroom_sink": 2,
        "observed_sink_bathroom": 2,
        "condition_of_sink": 2,
        "is_in_bathroom": 2
    }
}