{
    "behavior_data": {
        "Clean the bathroom": [
            {
                "usage_description": "",
                "cdl": "behavior fill_sink_with_water(sink:item):\n    body:\n        if can_fill_sink_1(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_on(faucet)\n            achieve has_water(sink)\n            achieve_once is_off(faucet)\n",
                "source_sub_task": "2. Fill the sink with water.",
                "functions": [
                    "def can_fill_sink_1(sink:item):\n    # Determine whether the sink can have water\n    symbol water_access = exists faucet: item : is_faucet(faucet) and close(faucet, sink)\n    return water_access\n"
                ]
            }
        ],
        "Listen to music": [
            {
                "usage_description": "",
                "cdl": "behavior turn_on_dvd_player(remote_control:item, dvd_player:item):\n    body:\n        achieve is_on(remote_control)\n        achieve is_on(dvd_player)\n",
                "source_sub_task": "2. Use the remote control to turn on the DVD player.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior observe_cd_player(cd_player: item):\n    # Behavior to observe and locate the CD player\n    body:\n        if not visited(cd_player):\n            observe(cd_player, \"Locate the CD player\")\n            # Observe the CD player to gather information about its location\n",
                "source_sub_task": "1. Locate the CD player.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior plug_and_turn_on_cd_player(cd_player:item, powersocket:item):\n    body:\n        achieve plugged(cd_player) # Plug in the CD player\n        achieve is_on(cd_player) # Turn on the CD player\n",
                "source_sub_task": "2. Turn on the CD player.",
                "functions": [
                    "def has_plug_and_is_off_1(cd_player:item):\n    # Function to check if CD player has a plug and is currently off\n    symbol has_plug_and_off=has_plug(cd_player) and is_off(cd_player)\n    return has_plug_and_off\n"
                ]
            }
        ],
        "Wash dishes with dishwasher": [
            {
                "usage_description": "",
                "cdl": "behavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n",
                "source_sub_task": "1. Load bowls and plates into the dishwasher.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher) # Ensure the dishwasher is closed\n        achieve is_on(dishwasher)  # Turn on the dishwasher\n",
                "source_sub_task": "2. Start the dishwasher.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n",
                "source_sub_task": "2. Load the bowls and plates into the dishwasher.",
                "functions": []
            }
        ],
        "Change TV channel": [
            {
                "usage_description": "",
                "cdl": "behavior press_remote_control(remote_control:item):\n    body:\n        if has_switch_remote_1(remote_control):\n            achieve_once inhand(remote_control)\n            achieve is_on(remote_control)\n",
                "source_sub_task": "2. Use the remote control to turn on the TV.",
                "functions": [
                    "def has_switch_remote_1(remote_control:item):\n    # Determine whether the remote control has a switch\n    return has_switch(remote_control)\n"
                ]
            }
        ],
        "Make coffee": [
            {
                "usage_description": "",
                "cdl": "behavior place_coffee_maker_on_counter(coffee_maker:item, kitchen_counter:item):\n    body:\n        achieve on(coffee_maker, kitchen_counter)\n",
                "source_sub_task": "1. Brew a cup of coffee using the coffee maker.",
                "functions": [
                    "def has_coffee_filter_on_cup_1(cup:item):\n    # Function to check if there is a coffee filter on a specified cup\n    symbol has_coffee_filter=exists filter: item : is_coffee_filter(filter) and on(filter, cup)\n    return has_coffee_filter\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior add_water_to_coffee_maker(coffee_maker:item, faucet:item):\n    body:\n        achieve has_water(coffee_maker)\n",
                "source_sub_task": "1. Brew a cup of coffee using the coffee maker.",
                "functions": [
                    "def has_coffee_filter_on_cup_1(cup:item):\n    # Function to check if there is a coffee filter on a specified cup\n    symbol has_coffee_filter=exists filter: item : is_coffee_filter(filter) and on(filter, cup)\n    return has_coffee_filter\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior brew_coffee(coffee_maker:item):\n    body:\n        achieve is_on(coffee_maker)\n",
                "source_sub_task": "1. Brew a cup of coffee using the coffee maker.",
                "functions": [
                    "def has_coffee_filter_on_cup_1(cup:item):\n    # Function to check if there is a coffee filter on a specified cup\n    symbol has_coffee_filter=exists filter: item : is_coffee_filter(filter) and on(filter, cup)\n    return has_coffee_filter\n"
                ]
            }
        ],
        "Cook some food": [
            {
                "usage_description": "",
                "cdl": "behavior identify_chicken(chicken:item):\n    body:\n        observe(chicken, \"Check if it is chicken\")\n",
                "source_sub_task": "1. Identify the chicken that needs to be sliced.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior put_vegetables_in_pot(vegetables:item, pot:item):\n    body:\n        achieve inside(vegetables, pot)\n        # Place the vegetables inside the pot\n",
                "source_sub_task": "1. Put the vegetables into the pot.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior boil_vegetables(pot:item, stove:item):\n    body:\n        if not is_pot_on_stove_1(pot, stove):\n            achieve on(pot, stove)\n        # Ensure the pot is placed correctly on the stove\n        achieve is_on(stove)\n        # Turn on the stove for boiling\n",
                "source_sub_task": "2. Boil them on the stove.",
                "functions": [
                    "def is_pot_on_stove_1(pot:item, stove:item):\n    symbol is_on_stove=on(pot, stove)\n    return is_on_stove\n"
                ]
            }
        ],
        "Prepare breakfast": [
            {
                "usage_description": "",
                "cdl": "behavior slice_bread(bread: item, knife: item, cutting_board: item):\n    body:\n        assert cuttable(bread) # Confirm the bread can be cut\n        achieve on(bread, cutting_board) # Ensure the bread is placed on the cutting board\n        achieve_once inhand(knife) # Temporarily hold the knife to slice\n        achieve cut(bread) # Slice the bread\n",
                "source_sub_task": "1. Slice the bread.",
                "functions": []
            }
        ],
        "Pet cat": [
            {
                "usage_description": "",
                "cdl": "behavior approach_and_touch(cat:item):\n    body:\n        achieve close_char(char, cat)\n        touch(cat)\n",
                "source_sub_task": "2. Approach the cat and touch it.",
                "functions": []
            }
        ],
        "Wash clothes": [
            {
                "usage_description": "",
                "cdl": "behavior observe_basket_for_clothes(basket:item):\n    body:\n        # Observe the basket for clothes\n        observe(basket, \"Check if there are clothes in the basket\")\n",
                "source_sub_task": "1. Find the basket that contains clothes.",
                "functions": []
            }
        ],
        "Iron clothes": [
            {
                "usage_description": "",
                "cdl": "behavior find_basket_for_clothes(basket:item):\n    body:\n        achieve close_char(char,basket)\n",
                "source_sub_task": "1. Find the basket that contains clothes.",
                "functions": [
                    "def is_inside_bathroom_1(basket:item):\n    symbol in_bathroom=exists room: item : is_bathroom(room) and inside(basket, room)\n    return in_bathroom\n"
                ]
            }
        ],
        "Prepare dinner": [
            {
                "usage_description": "",
                "cdl": "behavior season_chicken_and_onion(chicken:item, onion:item, tray:item):\n    body:\n        achieve on(chicken, tray) # Place the chicken on the tray\n        achieve on(onion, tray) # Place the onion on the tray\n",
                "source_sub_task": "2. Season the chicken and onion.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior add_rice_and_water_to_pot(rice:item, pot:item):\n    body:\n        achieve inside(rice, pot)\n        achieve has_water(pot)\n",
                "source_sub_task": "2. Add the rinsed rice and appropriate amount of water to the pot.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior clean_rice_in_sink(rice:item, sink:item):\n    body:\n        achieve_once inside(rice, sink)\n        bind faucet: item where:\n            is_faucet(faucet) and close(faucet, sink)\n        achieve_once is_on(faucet)\n        wash(rice)\n        achieve_once is_off(faucet)\n",
                "source_sub_task": "1. Cook the rice.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior add_rice_and_water_to_pot(rice:item, pot:item):\n    body:\n        achieve inside(rice, pot)\n        achieve has_water(pot)\n",
                "source_sub_task": "1. Cook the rice.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior cook_rice_on_stove(pot:item, stove:item):\n    body:\n        achieve on(pot, stove)\n        achieve is_on(stove)\n",
                "source_sub_task": "1. Cook the rice.",
                "functions": []
            }
        ],
        "Prepare a reading space": [
            {
                "usage_description": "",
                "cdl": "behavior place_on_table(book:item, table:item):\n    body:\n        achieve on(book, table) # Place the book on the table\n",
                "source_sub_task": "1. Find the book and place it on the table in the bedroom.",
                "functions": [
                    "def in_bedroom_1(item:item):\n    # Check if the item is inside the bedroom\n    symbol in_bedroom=exists room: item : is_bedroom(room) and inside(item, room)\n    return in_bedroom\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior find_and_place_book(book:item, coffee_table:item):\n    body:\n        achieve close_char(char, book)\n        place_on_table(book, coffee_table)\n",
                "source_sub_task": "1. Find the book and put it on the coffee table in the home office.  ",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior find_and_place_book(book:item, coffee_table:item):\n    body:\n        assert is_book(book)\n        assert is_coffee_table(coffee_table)\n        achieve on(book, coffee_table)\n",
                "source_sub_task": "1. Find the book and place it on the coffee table in the home office.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior find_and_place_spectacles_on_coffee_table(spectacles:item, coffee_table:item):\n    body:\n        achieve visited(spectacles)\n        achieve_once inhand(spectacles)\n        achieve on(spectacles, coffee_table)\n",
                "source_sub_task": "1. Find the spectacles and put them on the coffee table in the home office.",
                "functions": [
                    "def is_in_home_office_1(item: item):\n    # Determine whether the item is in the home office\n    symbol in_home_office = exists room: item : is_home_office(room) and inside(item, room)\n    return in_home_office\n"
                ]
            }
        ],
        "Wash windows": [
            {
                "usage_description": "",
                "cdl": "behavior check_bathroom_for_windows(bathroom:item):\n    body:\n        observe(bathroom, \"Determine if there are any windows\")\n        # Observe the specified bathroom to check for the presence of windows\n",
                "source_sub_task": "1. Find the bathroom with windows.",
                "functions": []
            }
        ],
        "Vacuum the floor": [
            {
                "usage_description": "",
                "cdl": "behavior clean_floor_with_vacuum(floor:item):\n    body:\n        bind vacuum: item where:\n            is_vacuum_cleaner(vacuum)\n        achieve_once inhand(vacuum)\n        achieve is_on(vacuum)\n        achieve close_char(char, floor)\n        achieve clean(floor)\n",
                "source_sub_task": "2. Use the vacuum to clean those identified areas of the floor.",
                "functions": []
            }
        ],
        "Put groceries in Fridge": [
            {
                "usage_description": "",
                "cdl": "behavior clean_fish(fish:item):\n    body:\n        achieve clean(fish)\n        # Ensure the fish is cleaned\n",
                "source_sub_task": "1. Wash the fish.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior place_items_on_table(in_dining_room: item, table: item):\n    body:\n        foreach item: item:\n            if(is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item)) and inside(item, in_dining_room):\n                achieve on(item, table)\n",
                "source_sub_task": "2. Place milk, turkey, eggs, fish, and chicken on the table in the dining room.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior place_items_on_table(in_dining_room: item, table: item):\n    body:\n        achieve on(in_dining_room, table)\n",
                "source_sub_task": "1. Put milk and eggs on the table in the dining room.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior throw_items_in_trash(trash: item, trashcan: item):\n    body:\n        achieve inside(trash, trashcan)\n        # The item should be inside the trashcan\n",
                "source_sub_task": "2. Throw all the items in the fridge to the trashcan.",
                "functions": [
                    "def is_trash_inside_fridge_1(item: item, fridge: item):\n    # Check if the item is inside the fridge and is identified as food\n    return inside(item, fridge) and is_food(item)\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior put_item_back_in_fridge(item1:item, item2:item, fridge:item):\n    body:\n        achieve inside(item1, fridge)\n        achieve inside(item2, fridge)\n",
                "source_sub_task": "3. Put milk and eggs back in the fridge.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior close_fridge(fridge:item):\n    body:\n        achieve closed(fridge)\n",
                "source_sub_task": "3. Put milk and eggs back in the fridge.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior find_dining_table(dining_room:item):\n    body:\n        if is_dining_table_present_1(dining_room):\n            # If a dining table is present in the dining room, approach it\n            bind table: item where:\n                is_table(table) and inside(table, dining_room)\n            achieve close_char(char, table)\n        else:\n            # If no known dining table is present, start observing unvisited tables\n            foreach table: item:\n                if is_table(table) and not visited(table):\n                    observe(table, \"Confirm if its a dining table inside the dining room\")\n",
                "source_sub_task": "1. Locate the dining room table.",
                "functions": [
                    "def is_dining_table_present_1(dining_room:item):\n    # Define a function to check if there is a dining table in the dining room\n    symbol has_dining_table=exists table: item : is_table(table) and inside(table, dining_room)\n    return has_dining_table\n"
                ]
            }
        ],
        "Write an email": [
            {
                "usage_description": "",
                "cdl": "behavior sit_on_chair_and_touch_mouse(chair:item, mouse:item):\n    body:\n        achieve on_char(char, chair)  # Sit on the chair\n        achieve close_char(char, mouse)  # Be close to the mouse\n        touch(mouse)  # Touch the mouse\n",
                "source_sub_task": "2. Sit on the chair in front of the computer and touch the mouse.",
                "functions": []
            }
        ],
        "Drink": [
            {
                "usage_description": "",
                "cdl": "behavior fill_a_cup_with_water(cup:item, faucet:item):\n    body:\n        assert grabbable(cup)\n        # Ensure the cup is an item that can be grabbed\n\n        achieve_once inhand(cup)\n        # Temporarily hold the cup in hand\n\n        achieve close_char(char, faucet)\n        # Ensure the character is close to the faucet\n\n        achieve_once is_on(faucet)\n        # Temporarily turn on the faucet\n\n        is_sink(cup)\n        # Fill the cup with water\n\n        achieve_once is_off(faucet)\n        # Temporarily turn off the faucet to stop the water flow\n",
                "source_sub_task": "1. Fill a cup with water.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior pour_milk_into_cup(milk:item, cup:item):\n    body:\n        achieve inside(milk, cup)\n        # Pour the milk into the cup\n",
                "source_sub_task": "1. Pour milk into a microwave-safe cup.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior fill_pot_with_water(pot:item, sink:item):\n    body:\n        achieve_once close_char(char, sink)\n        # Approach the sink\n        achieve_once inhand(pot)\n        # Temporarily hold the pot\n        achieve has_water(pot)\n        # Ensure the pot is filled with water\n",
                "source_sub_task": "1. Find a pot and fill it with water from the sink.",
                "functions": []
            }
        ]
    },
    "function_name_mapping": {
        "has_sink_in_bathroom": "has_sink_in_bathroom_1",
        "can_fill_sink": "can_fill_sink_1",
        "has_remote_control_close_to": "has_remote_control_close_to_1",
        "has_plug_and_is_off": "has_plug_and_is_off_1",
        "is_in_tvroom": "is_in_tvroom_1",
        "has_switch_remote": "has_switch_remote_1",
        "has_coffee_filter_on_cup": "has_coffee_filter_on_cup_1",
        "is_pot_on_stove": "is_pot_on_stove_1",
        "is_this_a_cat": "is_this_a_cat_1",
        "is_inside_bathroom": "is_inside_bathroom_1",
        "in_bedroom": "in_bedroom_1",
        "is_in_home_office": "is_in_home_office_1",
        "has_dust_or_debris": "has_dust_or_debris_1",
        "is_trash_inside_fridge": "is_trash_inside_fridge_1",
        "is_dining_table_present": "is_dining_table_present_1"
    },
    "function_name_counts": {
        "has_sink_in_bathroom": 2,
        "can_fill_sink": 2,
        "has_remote_control_close_to": 2,
        "has_plug_and_is_off": 2,
        "is_in_tvroom": 2,
        "has_switch_remote": 2,
        "has_coffee_filter_on_cup": 2,
        "is_pot_on_stove": 2,
        "is_this_a_cat": 2,
        "is_inside_bathroom": 2,
        "in_bedroom": 2,
        "is_in_home_office": 2,
        "has_dust_or_debris": 2,
        "is_trash_inside_fridge": 2,
        "is_dining_table_present": 2
    }
}