From agent.py
Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta.', '2. Put the cooked chicken and pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_dry_pasta_2073_around_kitchen_counter_129(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_chicken_or_pasta(cooking_area:item):
    # Function to check if there is chicken or pasta in the cooking area
    symbol has_chicken_or_pasta=exists o: item : (is_food_chicken(o) or is_dry_pasta(o)) and close(o, cooking_area)
    return has_chicken_or_pasta

behavior prepare_chicken(chicken:item, stove:item):
    body:
        achieve on(chicken, stove)
        # Place the chicken on the stove for cooking
        achieve is_on(stove)
        # Turn on the stove for cooking the chicken

behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Put the pasta inside the pot
        achieve on(pot, stove)
        # Put the pot on the stove
        achieve is_on(stove)
        # Turn on the stove for cooking pasta
        achieve has_water(pot)
        # Ensure the pot has water for boiling pasta

behavior __goal__():
    body:
        if exists cooking_area: item : is_stove(cooking_area) and has_chicken_or_pasta(cooking_area):
            # If a cooking area with chicken or pasta is known, proceed with cooking
            bind chicken: item where:
                is_food_chicken(chicken)
            # Select the chicken
            
            bind stove: item where:
                is_stove(stove)
            # Select the stove

            prepare_chicken(chicken, stove)

            bind pasta: item where:
                is_dry_pasta(pasta)
            # Select the dry pasta

            bind pot: item where:
                is_pot(pot)
            # Select the pot
            
            cook_pasta(pasta, pot, stove)

        else:
            # If no known cooking area with chicken or pasta, explore and set up for cooking
            foreach cooking_area: item:
                if is_stove(cooking_area) and not visited(cooking_area):
                    observe(cooking_area, "Check if there is chicken or pasta in the cooking area")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_chicken_or_pasta(cooking_area:item):
    # Function to check if there is chicken or pasta in the cooking area
    symbol has_chicken_or_pasta=exists o: item : (is_food_chicken(o) or is_dry_pasta(o)) and close(o, cooking_area)
    return has_chicken_or_pasta

behavior prepare_chicken(chicken:item, stove:item):
    body:
        achieve on(chicken, stove)
        # Place the chicken on the stove for cooking
        achieve is_on(stove)
        # Turn on the stove for cooking the chicken

behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Put the pasta inside the pot
        achieve on(pot, stove)
        # Put the pot on the stove
        achieve is_on(stove)
        # Turn on the stove for cooking pasta
        achieve has_water(pot)
        # Ensure the pot has water for boiling pasta

behavior __goal__():
    body:
        if exists cooking_area: item : is_stove(cooking_area) and has_chicken_or_pasta(cooking_area):
            # If a cooking area with chicken or pasta is known, proceed with cooking
            bind chicken: item where:
                is_food_chicken(chicken)
            # Select the chicken
            
            bind stove: item where:
                is_stove(stove)
            # Select the stove

            prepare_chicken(chicken, stove)

            bind pasta: item where:
                is_dry_pasta(pasta)
            # Select the dry pasta

            bind pot: item where:
                is_pot(pot)
            # Select the pot
            
            cook_pasta(pasta, pot, stove)

        else:
            # If no known cooking area with chicken or pasta, explore and set up for cooking
            foreach cooking_area: item:
                if is_stove(cooking_area) and not visited(cooking_area):
                    observe(cooking_area, "Check if there is chicken or pasta in the cooking area")

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)obs(stove_2090, Check if there is chicken or pasta in the cooking area)walk_executor(oven_141)open_executor(oven_141)obs(oven_141, Check if there is chicken or pasta in the cooking area)
##############################
From agent.py
walk_executor(stove_2090)
Find pot_54. Find pot_2093. Find tray_142. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer inside home_office_161.
##############################
From agent.py
open_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
obs(stove_2090, Check if there is chicken or pasta in the cooking area)
Get this information:  stove_2090 is on kitchen_counter_129. stove_2090 is inside dining_room_1. stove_2090 is close to kitchen_counter_129. stove_2090 is close to character_219. stove_2090 is OPEN. stove_2090 is OFF.
##############################
From agent.py
walk_executor(oven_141)
Find food_butter_2018. Find dough_2021. Find food_onion_2026. Robot is inside dining_room_1. Robot is close food_butter_2018. Robot is close dough_2021. Robot is close food_onion_2026. Robot is close oven_141. Robot is close tray_142. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.
##############################
From agent.py
open_executor(oven_141)
Robot is inside dining_room_1. Robot is close food_butter_2018. Robot is close dough_2021. Robot is close food_onion_2026. Robot is close oven_141. Robot is close tray_142. 
##############################
From agent.py
obs(oven_141, Check if there is chicken or pasta in the cooking area)
Get this information:  pot_54 is on oven_141. food_butter_2018 is inside oven_141. food_onion_2026 is inside oven_141. tray_142 is inside oven_141. dough_2021 is inside oven_141. oven_141 is close to kitchen_counter_129. oven_141 is close to wall_2. oven_141 is close to cupboard_131. oven_141 is close to kitchen_counter_132. oven_141 is close to cupboard_130. oven_141 is close to faucet_134. oven_141 is close to food_butter_2018. oven_141 is close to wall_8. oven_141 is close to dough_2021. oven_141 is close to food_onion_2026. oven_141 is close to stovefan_139. oven_141 is close to walllamp_46. oven_141 is close to tray_142. oven_141 is close to floor_16. oven_141 is close to knifeblock_52. oven_141 is close to floor_21. oven_141 is close to pot_54. oven_141 is close to character_219. oven_141 is inside dining_room_1. oven_141 is PLUGGED_IN. oven_141 is CLEAN. oven_141 is OPEN. oven_141 is OFF.
##############################
From agent.py
Human Instruction: You need to locate the chicken and pasta to verify their presence. Then, cook the chicken using the stove, and cook the pasta by placing it inside a pot with water, placing the pot on the stove, and turning on the stove.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: Observe around stove_2090 with the question of Check if there is chicken or pasta in the cooking area.
Action 4: Walk to oven_141.
Action 5: Open oven_141.
Action 6: Observe around oven_141 with the question of Check if there is chicken or pasta in the cooking area.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_dry_pasta_2073_around_kitchen_counter_132(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def has_chicken_or_pasta_in_area(area:item):
    # Function to check if there is chicken or dry pasta in a specified area
    symbol has_chicken_or_pasta=exists o: item : (is_food_chicken(o) or is_dry_pasta(o)) and close(o, area)
    return has_chicken_or_pasta

behavior __goal__():
    body:
        if exists stove: item : is_stove(stove) and has_chicken_or_pasta_in_area(stove):
            # If chicken or pasta is already in the stove area, proceed with cooking
            bind stove: item where:
                is_stove(stove) and has_chicken_or_pasta_in_area(stove)
            achieve is_on(stove)
            # Turn on the stove to cook chicken and pasta

        elif exists oven: item : is_oven(oven) and has_chicken_or_pasta_in_area(oven):
            # If chicken or pasta is already in the oven area, inspect further
            bind oven: item where:
                is_oven(oven) and has_chicken_or_pasta_in_area(oven)
            observe(oven, "Check if there is chicken or pasta in the oven area")


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EXISTS', 'exists') at line 5956, column 14.
Expected one of: 
	* EQUAL
	* VBAR
	* __ANON_4
	* NOT_EQ
	* __ANON_2
	* MINUS
	* SEMICOLON
	* CIRCUMFLEX
	* MORETHAN
	* AND
	* RSHIFT
	* LESSTHAN
	* __ANON_0
	* LESS_EQ
	* __ANON_8
	* GREATER_EQ
	* FLOORDIV
	* LSHIFT
	* PLUS
	* __ANON_5
	* __ANON_1
	* DOUBLE_EQUAL
	* OR
	* AMPERSAND
	* STAR
	* PERCENT
	* SLASH
	* IF
	* AT
	* __ANON_3
	* __ANON_7
	* COMMA
	* __ANON_6
	* _NEWLINE

##############################
