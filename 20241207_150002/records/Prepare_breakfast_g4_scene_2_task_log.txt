From agent.py
Reset goals: The sub-goals are: 
['1. Cook the pasta and chicken separately until done.', '2. Combine the chicken and pasta together.', '3. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_54_around_kitchen_counter_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_dry_pasta_2073_around_kitchen_counter_129(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_chicken(chicken:item, stove:item):
    body:
        achieve inside(chicken, stove)
        # Place the chicken inside the stove to cook
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior boil_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot
        achieve has_water(pot)
        # Ensure the pot has water for boiling the pasta
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken for cooking
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove for cooking

        cook_chicken(chicken, stove)
        # Cook the chicken

        bind pot: item where:
            is_pot(pot)
        # Select the pot for boiling pasta

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the dry pasta

        boil_pasta(pasta, pot, stove)
        # Boil the pasta separately

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior cook_chicken(chicken:item, stove:item):
    body:
        achieve inside(chicken, stove)
        # Place the chicken inside the stove to cook
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior boil_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot
        achieve has_water(pot)
        # Ensure the pot has water for boiling the pasta
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken for cooking
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove for cooking

        cook_chicken(chicken, stove)
        # Cook the chicken

        bind pot: item where:
            is_pot(pot)
        # Select the pot for boiling pasta

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the dry pasta

        boil_pasta(pasta, pot, stove)
        # Boil the pasta separately

##############################
