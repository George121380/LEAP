Clean the bathroom:
behavior fill_sink_with_water(sink:item):
    body:
        achieve has_water(sink)
        

Listen to music:
behavior use_remote_control(remote:item, dvd:item):
    body:
        achieve close(remote, dvd) # Ensure the remote is close to the DVD player
        bind switch: item where:
            is_remote_control(remote) and has_switch(remote)
        achieve is_on(dvd) # Use the remote control to turn on the DVD player


behavior turn_on_cd_player(cd_player:item):
    body:
        achieve plugged(cd_player)
        achieve is_on(cd_player)


Wash dishes with dishwasher:
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher


behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher


behavior observe_unvisited_dishwashers():
    body:
        foreach dishwasher: item:
            if is_dishwasher(dishwasher) and not visited(dishwasher):
                observe(dishwasher, "Check if it is the dishwasher")


behavior load_dishwasher_for_bowls(bowl:item, dishwasher:item):
    body:
        achieve inside(bowl, dishwasher)
        # Place the bowl inside the dishwasher


Change TV channel:
behavior observe_for_remote_control():
    body:
        foreach obj: item:
            if is_remote_control(obj) and not visited(obj):
                observe(obj, "Check if this is the TV remote control")


behavior ensure_condition_for_tv_control(remote_control:item, tv:item):
    body:
        achieve_once inhand(remote_control) # Hold the correct remote control
        achieve close_char(char, tv) # Move close to the TV
        achieve facing_char(char, tv) # Ensure facing the TV


behavior activate_tv(remote:item, television:item):
    body:
        achieve is_on(television) # Turn the TV on


Make coffee:
behavior prepare_coffee_maker(filter: item, water: item, coffee_maker: item):
    body:
        achieve inside(filter, coffee_maker)
        achieve has_water(coffee_maker)


behavior start_coffee_brewing(coffee_maker: item):
    body:
        achieve closed(coffee_maker)
        achieve is_on(coffee_maker)


Cook some food:
behavior clean_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink

        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet if it is next to the sink

        wash(vegetable) # Wash the vegetable

        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after cleaning


behavior place_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot) # Put the vegetables inside the pot


behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot) # Fill the pot with water


behavior wash_vegetables(vegetable:item, sink:item):
    body:
        clean_vegetable(vegetable, sink)
        # Wash the specified vegetable in the sink


behavior boil_vegetables_on_stove(vegetable:item, stove:item, pot:item):
    body:
        place_vegetables_in_pot(vegetable, pot)
        fill_pot_with_water(pot)
        achieve on(pot, stove) # Put the pot on the stove
        achieve is_on(stove) # Turn on the stove


behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve inside(pot, fridge)
        # Store the pot inside the fridge


behavior close_the_fridge_door(fridge:item):
    body:
        achieve closed(fridge)
        # Close the fridge door


Prepare breakfast:
behavior mix_eggs(eggs:item, bowl:item):
    body:
        achieve inside(eggs, bowl)
        # Ensure the eggs are cracked into the bowl


behavior find_knife():
    body:
        bind knife: item where:
            is_knife(knife)
        achieve close_char(char, knife)


behavior position_bread_on_board(bread:item, cutting_board:item):
    body:
        achieve on(bread, cutting_board)


behavior slice_bread(bread:item, knife:item):
    body:
        achieve cut(bread)


behavior ensure_stove_operational(s: item):
    body:
        if has_plug_1(s):
            bind plug: item where:
                is_powersocket(plug) and close(s, plug)
            achieve plugged(s)
        achieve is_on(s)


behavior cook(chicken: item, pasta: item, pot: item, stove: item):
    body:
        achieve inside(chicken, pot)
        achieve inside(pasta, pot)
        ensure_stove_operational(stove)


behavior put_on_plate(chicken_pasta: item, plate: item):
    body:
        achieve on(chicken_pasta, plate) # Place the chicken pasta on the plate


Pet cat:
behavior put_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table) # Place the bowl on the table


behavior bring_cat_to_table(cat:item, table:item):
    body:
        achieve close(cat, table) 


behavior touch_cat(cat:item):
    body:
        achieve_once close_char(char, cat)
        touch(cat)


Wash clothes:
behavior locate_basket_of_clothes():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket)
        # Select an item identified as a basket for clothes

        achieve close_char(char, basket)
        # Move closer to the identified basket of clothes


behavior wash_underwear_with_soap(underwear:item, sink:item, soap:item):
    body:
        assert is_clothes_underwear(underwear)
        # Ensure the item to wash is underwear
        achieve inside(underwear, sink)
        # Place the underwear in the sink
        
        achieve_once inhand(soap)
        # Temporarily hold the soap
        scrub(underwear)
        # Scrub the underwear with the soap
        
        squeeze(underwear)
        # Squeeze any excess liquid from the underwear
        
        rinse(underwear)
        # Rinse the underwear with water
        
        if has_soap_1(sink):
            achieve clean(underwear)
        else:
            observe(sink, "Find soap around the sink")


behavior put_in_washing_machine(clothes:item, machine:item):
    body:
        achieve inside(clothes, machine)


behavior add_detergent(washing_machine:item, detergent:item):
    body:
        achieve inside(detergent, washing_machine)
        # Add detergent to the washing machine


Prepare dinner:
behavior cook_rice(rice:item, pot:item, stove:item):
    body:
        achieve inside(rice, pot)
        achieve has_water(pot)
        achieve on(pot, stove)
        achieve is_on(stove)


Prepare a reading space:
behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Place the book on the table


behavior find_specific_book():
    body:
        foreach book: item:
            if is_book(book) and not visited(book):
                observe(book, "Inspect to determine if this is the specific book needed")


behavior find_the_book_and_place_on_table(book:item, table:item):
    body:
        achieve on(book, table)


behavior find_and_place_spectacles(spectacles:item, coffee_table:item):
    body:
        achieve on(spectacles, coffee_table)
        # Place spectacles on the coffee table


Vacuum the floor:
behavior vacuum_floor(floor: item):
    body:
        assert is_floor(floor)
        # Ensure that the item is a floor
        achieve clean(floor)
        # Achieve a clean state for the floor


Put groceries in Fridge:
behavior clean_food(food:item, sink:item):
    # Define the behavior to clean food in the sink
    body:
        achieve_once inside(food, sink)
        # Ensure the food is placed inside the sink

        if has_faucet_1(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to clean

        wash(food)  # This is the key step of the behavior, used for cleaning food
        
        if has_faucet_1(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # If the sink has a faucet, turn it off after cleaning


behavior put_on_table(o: item, table: item):
    body:
        achieve on(o, table) # Place the item on the table


behavior throw_items_from_fridge_to_trash(fridge:item, trashcan:item):
    body:
        foreach item: item:
            if inside(item, fridge):
                achieve inside(item, trashcan)


behavior find_table_in_dining_room():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Check if this is a table in the dining room")
                

behavior put_milk_on_table(milk:item, table:item):
    body:
        achieve on(milk, table)


behavior put_turkey_on_table(turkey:item, table:item):
    body:
        achieve on(turkey, table)


behavior put_egg_on_table(egg:item, table:item):
    body:
        achieve on(egg, table)


behavior put_fish_on_table(fish:item, table:item):
    body:
        achieve on(fish, table)


behavior put_chicken_on_table(chicken:item, table:item):
    body:
        achieve on(chicken, table)


behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken)


Write an email:
behavior __turn_on_computer__(computer:item):
    body:
        achieve is_on(computer)


behavior __turn_on_computer__(computer:item):
    body:
        achieve is_on(computer) # Ensure the computer is turned on


behavior sit_on_chair(char:character, chair:item):
    body:
        achieve on_char(char, chair)


Drink:
behavior find_cup(cup:item):
    body:
        observe(cup,"Identify object as a cup")


behavior pour_milk(milk: item, cup: item):
    body:
        achieve inside(milk, cup)
        # Pour milk into the cup


