Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
cdl_dataset/dataset/Prepare_dinner/g1.txt,k1,"missed actions: walk_executor(pot_2069);grab_executor(pot_2069);walk_executor(faucet_43);switchon_ex
ecutor(faucet_43);switchoff_executor(faucet_43);walk_executor(pot_2069);open_executor(pot_2069);walk
_executor(fridge_289);switchoff_executor(fridge_289);open_executor(fridge_289);walk_executor(food_ri
ce_2036);grab_executor(food_rice_2036);walk_executor(pot_2069);putin_executor(food_rice_2036, pot_20
69);walk_executor(stove_2065);put_executor(pot_2069, stove_2065);switchon_executor(stove_2065);",missed action num: 479,,
"Reset goals: The sub-goals are: 
['1. Measure the required amount of rice and water.', '2. Bring water to a boil in a pot.', '3. Add 
rice to the boiling water and reduce heat to simmer.', '4. Cook rice until fully absorbed and tender
.']",,,,,
" 
behavior __goal__():
    body:
        # Bind to a rice item from the scene
        bind rice: item where:
            is_food_rice(rice)

        # Bind to a water source or container
        bind water_source: item where:
            is_sink(water_source) or is_bowl(water_source)

        # Bind to a container for measuring if not done already
        bind measuring_cup: item where:
            is_bowl(measuring_cup) or is_cup(measuring_cup)

        achieve_once inhand(rice)
        # Observe to determine the existing amount of rice
        observe(rice, ""Measure required amount of rice"")
        achieve_once inhand(measuring_cup)
        # Observe to determine the required amount of water
        observe(water_source, ""Measure required amount of water into the measuring cup"")

        # Ensure hands are free after measuring

",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Measure the appropriate amount of rice and water.', '2. Add rice and water to the pot.', '3. Tu
rn on the stove and adjust the heat to bring the water to a boil.', '4. Once boiling, reduce heat, c
over, and simmer until the rice is cooked.']",,,,,
" 
behavior measure_ingredients(rice:item, water:item, container:item):
    body:
        assert grabbable(rice)
        assert grabbable(water)
        assert containers(container)
        achieve inside(rice, container)
        achieve inside(water, container)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind water: item where:
            has_water(water)
        bind container: item where:
            containers(container)

        measure_ingredients(rice, water, container)
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Measure the appropriate amount of rice and water for boiling.', '2. Pour rice and water into th
e pot.', '3. Cook the rice on the stove until done.']",,,,,
" 
behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice item
        
        bind pot: item where:
            is_pot(pot)
        # Select pot item
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select a kitchen counter
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup for measuring water
        
        achieve close_char(char, rice)
        # Move character close to the rice
        
        observe(rice, ""Measure the appropriate amount of rice for boiling and transfer to pot"")
        # Measure rice and transfer it to the pot
        
        observe(cup, ""Measure the water using the cup and pour into the pot"")
        # Measure water using cup and pour into the pot

",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Measure the desired amount of rice and rinse it thoroughly.', '2. Add rice and the correct amou
nt of water to the pot.', '3. Boil the rice until it is cooked.']",,,,,
" 
def has_water_pot(pot:item):
    # Function to check if the pot has water
    symbol has_water=has_water(pot)
    return has_water

def is_clean_rice(rice:item):
    # Check if the rice is clean
    symbol clean_rice=clean(rice)
    return clean_rice

behavior rinse_rice(rice:item):
    body:
        achieve dirty(rice)
        rinse(rice) # Rinse the rice until it is clean

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind sink: item where:
            is_sink(sink)
        # Select a sink for rinsing the rice

        rinse_rice(rice)
        # Rinse the rice until clean
",From function reset_goal,,,,
cdl_dataset/dataset/Prepare_dinner/g1.txt,k1,"missed actions: walk_executor(pot_2069);grab_executor(pot_2069);walk_executor(faucet_43);switchon_ex
ecutor(faucet_43);switchoff_executor(faucet_43);walk_executor(pot_2069);open_executor(pot_2069);walk
_executor(fridge_289);switchoff_executor(fridge_289);open_executor(fridge_289);walk_executor(food_ri
ce_2036);grab_executor(food_rice_2036);walk_executor(pot_2069);putin_executor(food_rice_2036, pot_20
69);walk_executor(stove_2065);put_executor(pot_2069, stove_2065);switchon_executor(stove_2065);",missed action num: 479,,
cdl_dataset/dataset/Prepare_dinner/g1.txt,k1,"missed actions: walk_executor(pot_2069);grab_executor(pot_2069);walk_executor(faucet_43);switchon_ex
ecutor(faucet_43);switchoff_executor(faucet_43);walk_executor(pot_2069);open_executor(pot_2069);walk
_executor(fridge_289);switchoff_executor(fridge_289);open_executor(fridge_289);walk_executor(food_ri
ce_2036);grab_executor(food_rice_2036);walk_executor(pot_2069);putin_executor(food_rice_2036, pot_20
69);walk_executor(stove_2065);put_executor(pot_2069, stove_2065);switchon_executor(stove_2065);",missed action num: 479,,
