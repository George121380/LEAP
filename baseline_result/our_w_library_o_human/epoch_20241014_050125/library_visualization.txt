Listen to music:
behavior check_remote(item: item):
    body:
        observe(item, "Determine if this item is the remote control for the DVD player")


behavior use_remote_control_on_dvd(remote_control:item, dvd_player:item):
    body:
        achieve close(remote_control, dvd_player)
        # Ensure the remote control is close to the DVD player
        achieve is_on(dvd_player)
        # Turn on the DVD player using the remote control


behavior plugin_cd_player(cd_player:item, power_socket:item):
    body:
        achieve plugged(cd_player)
        achieve close(cd_player, power_socket)
        

behavior power_on_cd_player(cd_player:item):
    body:
        achieve closed(cd_player)
        achieve is_on(cd_player)
     

Wash dishes with dishwasher:
behavior load_item_into_dishwasher(item:item, dishwasher:item):
    body:
        achieve inside(item, dishwasher)
        # Place the item inside the dishwasher


behavior close_and_start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Ensure the dishwasher is closed
        achieve is_on(dishwasher) # Start the dishwasher


behavior load_bowls_and_plates_into_dishwasher(sink:item, dishwasher:item):
    body:
        foreach o: item:
            # Place all bowls and plates from the sink into the dishwasher
            if is_bowl(o) or is_plate(o) and inside(o, sink):
                load_item_into_dishwasher(o, dishwasher)


Change TV channel:
behavior check_for_remote_control(remote_control:item):
    body:
        check_remote(remote_control)


behavior turn_on_tv_with_remote(remote_control:item, tv:item):
    body:
        achieve is_on(tv)


behavior sit_on_couch(couch:item):
    body:
        sit_somewhere(couch) # Sit on the specific couch


Make coffee:
behavior prepare_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker) # Ensure the coffee maker is plugged in
        achieve has_water(coffee_maker) # Ensure the coffee maker has water
        if has_coffee_filter_1(coffee_maker):
            # If the coffee maker has a filter, close it to prepare for brewing
            achieve closed(coffee_maker)
        else:
            # If the coffee maker does not have a filter, observe what is inside it
            observe(coffee_maker, "Check if it has a coffee filter")


behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker) # Turn on the coffee maker to brew coffee


Cook some food:
behavior move_pot_to_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)


Prepare breakfast:
behavior slice_bread(bread:item, knife:item, cutting_board:item):
    body:
        achieve_once inhand(knife) # Take the knife in hand
        achieve on(bread, cutting_board) # Place the bread on the cutting board
        assert is_cuttable_1(bread)
        achieve cut(bread) # Slice the bread


Pet cat:
behavior bring_cat_to_table(cat:item, table:item):
    body:
        achieve on(cat, table) # Place the cat on the table


behavior touch_cat(cat:item):
    body:
        achieve close_char(char, cat)
        touch(cat)


behavior find_sink(sink:item):
    body:
        achieve close_char(char, sink)
        # Moves the character closer to the sink


Wash clothes:
behavior hand_wash_jacket(jacket:item):
    body:
        if not clean(jacket):
            achieve close_char(char, jacket)
            wash(jacket)
            # Hand wash the jacket


Prepare dinner:
behavior observe_oven_temp(oven:item):
    body:
        observe(oven, "What is the current temperature setting of the oven")
        

behavior preheat_heating_device(obj:item):
    body:
        if has_switch_1(obj):
            bind switch: item where:
                has_switch_1(obj)
            achieve is_on(obj)


behavior place_bacon_to_drain(bacon:item, plate:item, napkin:item):
    body:
        achieve inside(napkin, plate)
        achieve on(bacon, napkin)


behavior measure_and_rinse_rice(rice:item, bowl:item, water_source:item):
    body:
        achieve_once inhand(rice)
        # Temporarily hold the rice to measure it
        
        achieve inside(rice, bowl)
        # Place the rice inside a bowl for rinsing

        achieve has_water(bowl)
        # Fill the bowl with water to rinse the rice
        
        rinse(rice)
        # Rinse the rice in the bowl with water
        
        achieve clean(rice)
        # Ensure the rice is clean after rinsing


behavior measure_and_rinse_rice(rice:item, bowl:item, water_source:item):
    body:
        achieve inside(rice, bowl)
        if exists faucet:item : is_faucet(faucet) and close(faucet, water_source):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, water_source)
            achieve_once is_on(faucet)
            rinse(rice)
            achieve_once is_off(faucet)
            

behavior prepare_rice_for_frying(rice:item, bowl:item, water_source:item):
    body:
        measure_and_rinse_rice(rice, bowl, water_source)


behavior cook_rice_with_eggs(rice:item, eggs:item, cooking_device:item):
    body:
        achieve inside(rice, cooking_device) # Place rice inside the cooking device for cooking
        achieve inside(eggs, cooking_device) # Place eggs inside the cooking device for cooking
        achieve is_on(cooking_device) # Turn on the cooking device to start cooking


make up bed:
behavior check_and_fill_cup(cup: item, water_source: item):
    body:
        achieve clean(cup)
        # Ensure the cup is clean
        achieve has_water(cup)


Turn on light:
behavior turn_on_light(light:item):
    body:
        achieve is_on(light)


Prepare a reading space:
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)


behavior find_and_retrieve_spectacles(spectacles:item):
    body:
        achieve_once inhand(spectacles)
        # Temporarily hold the spectacles


behavior place_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve on(spectacles, coffee_table)
        # Place spectacles on the coffee table


Put groceries in Fridge:
behavior throw_items_in_trash(fridge:item, trashcan:item):
    body:
        foreach item: item:
            if inside(item, fridge):
                achieve inside(item, trashcan)


behavior locate_and_gather_target_food(fridge:item, chicken:item, turkey:item, fish:item, egg:item, milk:item):
    body:
        achieve inside(chicken, fridge)
        achieve inside(turkey, fridge)
        achieve inside(fish, fridge)
        achieve inside(egg, fridge)
        achieve inside(milk, fridge)
        observe(fridge, "Check if chicken, turkey, fish, egg, and milk are present")


behavior cut_item(item:item):
    body:
        if has_cuttable_part_1(item):
            achieve cut(item)


Drink:
behavior find_cup_with_water(cup:item, water_source:item):
    body:
        achieve has_water(cup)


behavior locate_water_source(tap_or_dispenser:item):
    body:
        achieve close_char(char, tap_or_dispenser)


