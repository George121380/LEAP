{
    "behavior_data": {
        "Listen to music": [
            {
                "usage_description": "",
                "cdl": "behavior check_remote(item: item):\n    body:\n        observe(item, \"Determine if this item is the remote control for the DVD player\")\n",
                "source_sub_task": "1. Locate the remote control for the DVD player.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior use_remote_control_on_dvd(remote_control:item, dvd_player:item):\n    body:\n        achieve close(remote_control, dvd_player)\n        # Ensure the remote control is close to the DVD player\n        achieve is_on(dvd_player)\n        # Turn on the DVD player using the remote control\n",
                "source_sub_task": "2. Use the remote control to turn on the DVD player.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior plugin_cd_player(cd_player:item, power_socket:item):\n    body:\n        achieve plugged(cd_player)\n        achieve close(cd_player, power_socket)\n        ",
                "source_sub_task": "2. Turn on the CD player.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior power_on_cd_player(cd_player:item):\n    body:\n        achieve closed(cd_player)\n        achieve is_on(cd_player)\n     ",
                "source_sub_task": "2. Turn on the CD player.",
                "functions": []
            }
        ],
        "Wash dishes with dishwasher": [
            {
                "usage_description": "",
                "cdl": "behavior load_item_into_dishwasher(item:item, dishwasher:item):\n    body:\n        achieve inside(item, dishwasher)\n        # Place the item inside the dishwasher\n",
                "source_sub_task": "1. Load the bowls and plates into the dishwasher.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior close_and_start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher) # Ensure the dishwasher is closed\n        achieve is_on(dishwasher) # Start the dishwasher\n",
                "source_sub_task": "1. Load the bowls and plates into the dishwasher.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior load_bowls_and_plates_into_dishwasher(sink:item, dishwasher:item):\n    body:\n        foreach o: item:\n            # Place all bowls and plates from the sink into the dishwasher\n            if is_bowl(o) or is_plate(o) and inside(o, sink):\n                load_item_into_dishwasher(o, dishwasher)\n",
                "source_sub_task": "2. Load the bowls and plates into the dishwasher.",
                "functions": [
                    "def has_bowls_or_plates_inside_1(sink:item):\n    # Function to check if there are bowls or plates inside the sink\n    symbol has_bowls_or_plates=exists o: item : (is_bowl(o) or is_plate(o)) and inside(o, sink)\n    return has_bowls_or_plates\n"
                ]
            }
        ],
        "Change TV channel": [
            {
                "usage_description": "",
                "cdl": "behavior check_for_remote_control(remote_control:item):\n    body:\n        check_remote(remote_control)\n",
                "source_sub_task": "1. Locate the remote control.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior turn_on_tv_with_remote(remote_control:item, tv:item):\n    body:\n        achieve is_on(tv)\n",
                "source_sub_task": "2. Use the remote control to turn on the TV.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior sit_on_couch(couch:item):\n    body:\n        sit_somewhere(couch) # Sit on the specific couch\n",
                "source_sub_task": "1. Sit on the couch.",
                "functions": [
                    "def is_couch_sittable_1(couch:item):\n    # Determine if the item is a couch that can be sat on\n    symbol sittable_couch= is_couch(couch) and sittable(couch)\n    return sittable_couch\n"
                ]
            }
        ],
        "Make coffee": [
            {
                "usage_description": "",
                "cdl": "behavior prepare_coffee_maker(coffee_maker:item):\n    body:\n        achieve plugged(coffee_maker) # Ensure the coffee maker is plugged in\n        achieve has_water(coffee_maker) # Ensure the coffee maker has water\n        if has_coffee_filter_1(coffee_maker):\n            # If the coffee maker has a filter, close it to prepare for brewing\n            achieve closed(coffee_maker)\n        else:\n            # If the coffee maker does not have a filter, observe what is inside it\n            observe(coffee_maker, \"Check if it has a coffee filter\")\n",
                "source_sub_task": "1. Brew the coffee using the coffee maker.",
                "functions": [
                    "def has_coffee_filter_1(coffee_maker:item):\n    # Determine if the coffee maker has a coffee filter\n    symbol has_filter=exists filter:item: is_coffee_filter(filter) and inside(filter, coffee_maker)\n    return has_filter\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior brew_coffee(coffee_maker:item):\n    body:\n        achieve is_on(coffee_maker) # Turn on the coffee maker to brew coffee\n",
                "source_sub_task": "1. Brew the coffee using the coffee maker.",
                "functions": [
                    "def has_coffee_filter_1(coffee_maker:item):\n    # Determine if the coffee maker has a coffee filter\n    symbol has_filter=exists filter:item: is_coffee_filter(filter) and inside(filter, coffee_maker)\n    return has_filter\n"
                ]
            }
        ],
        "Cook some food": [
            {
                "usage_description": "",
                "cdl": "behavior move_pot_to_stove(pot:item, stove:item):\n    body:\n        achieve on(pot, stove)\n",
                "source_sub_task": "1. Find a pot on the stove.",
                "functions": []
            }
        ],
        "Prepare breakfast": [
            {
                "usage_description": "",
                "cdl": "behavior slice_bread(bread:item, knife:item, cutting_board:item):\n    body:\n        achieve_once inhand(knife) # Take the knife in hand\n        achieve on(bread, cutting_board) # Place the bread on the cutting board\n        assert is_cuttable_1(bread)\n        achieve cut(bread) # Slice the bread\n",
                "source_sub_task": "1. Slice the bread.",
                "functions": [
                    "def is_cuttable_1(food_bread:item):\n    # Function to check if the bread is cuttable\n    return cuttable(food_bread)\n"
                ]
            }
        ],
        "Pet cat": [
            {
                "usage_description": "",
                "cdl": "behavior bring_cat_to_table(cat:item, table:item):\n    body:\n        achieve on(cat, table) # Place the cat on the table\n",
                "source_sub_task": "2. Find the cat and bring it to the table.",
                "functions": [
                    "def cat_in_home_office_1(cat:item):\n    # Function to check if the cat is in the home office\n    symbol is_in_home_office=exists room: item : is_home_office(room) and inside(cat, room)\n    return is_in_home_office\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior touch_cat(cat:item):\n    body:\n        achieve close_char(char, cat)\n        touch(cat)\n",
                "source_sub_task": "2. Touch the cat.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior find_sink(sink:item):\n    body:\n        achieve close_char(char, sink)\n        # Moves the character closer to the sink\n",
                "source_sub_task": "1. Find the sink.",
                "functions": []
            }
        ],
        "Wash clothes": [
            {
                "usage_description": "",
                "cdl": "behavior hand_wash_jacket(jacket:item):\n    body:\n        if not clean(jacket):\n            achieve close_char(char, jacket)\n            wash(jacket)\n            # Hand wash the jacket\n",
                "source_sub_task": "1. Hand wash the jacket.",
                "functions": [
                    "def is_clothes_jacket_1(jacket:item):\n    # Determine whether the item is a jacket\n    symbol is_jacket=is_clothes_jacket(jacket)\n    return is_jacket\n"
                ]
            }
        ],
        "Prepare dinner": [
            {
                "usage_description": "",
                "cdl": "behavior observe_oven_temp(oven:item):\n    body:\n        observe(oven, \"What is the current temperature setting of the oven\")\n        ",
                "source_sub_task": "1. Preheat the oven to the required temperature for roasting chicken.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior preheat_heating_device(obj:item):\n    body:\n        if has_switch_1(obj):\n            bind switch: item where:\n                has_switch_1(obj)\n            achieve is_on(obj)\n",
                "source_sub_task": "1. Preheat a skillet or oven.",
                "functions": [
                    "def has_switch_1(obj:item):\n    # Determine whether the object has a switch\n    symbol switch_exists=exists switch:item: has_switch(obj)\n    return switch_exists\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior place_bacon_to_drain(bacon:item, plate:item, napkin:item):\n    body:\n        achieve inside(napkin, plate)\n        achieve on(bacon, napkin)\n",
                "source_sub_task": "3. Place the cooked bacon on a plate lined with paper towels to absorb excess grease.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior measure_and_rinse_rice(rice:item, bowl:item, water_source:item):\n    body:\n        achieve_once inhand(rice)\n        # Temporarily hold the rice to measure it\n        \n        achieve inside(rice, bowl)\n        # Place the rice inside a bowl for rinsing\n\n        achieve has_water(bowl)\n        # Fill the bowl with water to rinse the rice\n        \n        rinse(rice)\n        # Rinse the rice in the bowl with water\n        \n        achieve clean(rice)\n        # Ensure the rice is clean after rinsing\n",
                "source_sub_task": "1. Measure and rinse the rice.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior measure_and_rinse_rice(rice:item, bowl:item, water_source:item):\n    body:\n        achieve inside(rice, bowl)\n        if exists faucet:item : is_faucet(faucet) and close(faucet, water_source):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, water_source)\n            achieve_once is_on(faucet)\n            rinse(rice)\n            achieve_once is_off(faucet)\n            ",
                "source_sub_task": "1. Prepare the rice for frying.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior prepare_rice_for_frying(rice:item, bowl:item, water_source:item):\n    body:\n        measure_and_rinse_rice(rice, bowl, water_source)\n",
                "source_sub_task": "1. Prepare the rice for frying.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior cook_rice_with_eggs(rice:item, eggs:item, cooking_device:item):\n    body:\n        achieve inside(rice, cooking_device) # Place rice inside the cooking device for cooking\n        achieve inside(eggs, cooking_device) # Place eggs inside the cooking device for cooking\n        achieve is_on(cooking_device) # Turn on the cooking device to start cooking\n",
                "source_sub_task": "2. Cook the rice along with eggs.",
                "functions": []
            }
        ],
        "make up bed": [
            {
                "usage_description": "",
                "cdl": "behavior check_and_fill_cup(cup: item, water_source: item):\n    body:\n        achieve clean(cup)\n        # Ensure the cup is clean\n        achieve has_water(cup)\n",
                "source_sub_task": "1. Find a clean cup and fill it with water.",
                "functions": []
            }
        ],
        "Turn on light": [
            {
                "usage_description": "",
                "cdl": "behavior turn_on_light(light:item):\n    body:\n        achieve is_on(light)\n",
                "source_sub_task": "1. Turn on the lights in the bedroom.",
                "functions": [
                    "def has_light_1(x: item):\n    # Function to check if an item is a light in the bedroom\n    symbol has_light= exists y: item : is_bedroom(y) and is_light(x) and inside(x, y)\n    return has_light\n",
                    "def in_bedroom_1(light:item):\n    # Function to check if a light is in the bedroom\n    symbol in_bedroom=exists room: item : is_bedroom(room) and inside(light, room)\n    return in_bedroom\n"
                ]
            }
        ],
        "Prepare a reading space": [
            {
                "usage_description": "",
                "cdl": "behavior put_book_on_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n",
                "source_sub_task": "2. Put the book on the table in the bedroom.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior find_and_retrieve_spectacles(spectacles:item):\n    body:\n        achieve_once inhand(spectacles)\n        # Temporarily hold the spectacles\n",
                "source_sub_task": "1. Find and retrieve the spectacles, then place them on the coffee table in the home office.",
                "functions": [
                    "def is_in_home_office_1(item:item):\n    # Function to check if an item is in the home office\n    symbol in_home_office=exists room: item : is_home_office(room) and inside(item, room)\n    return in_home_office\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior place_on_coffee_table(spectacles:item, coffee_table:item):\n    body:\n        achieve on(spectacles, coffee_table)\n        # Place spectacles on the coffee table\n",
                "source_sub_task": "1. Find and retrieve the spectacles, then place them on the coffee table in the home office.",
                "functions": [
                    "def is_in_home_office_1(item:item):\n    # Function to check if an item is in the home office\n    symbol in_home_office=exists room: item : is_home_office(room) and inside(item, room)\n    return in_home_office\n"
                ]
            }
        ],
        "Put groceries in Fridge": [
            {
                "usage_description": "",
                "cdl": "behavior throw_items_in_trash(fridge:item, trashcan:item):\n    body:\n        foreach item: item:\n            if inside(item, fridge):\n                achieve inside(item, trashcan)\n",
                "source_sub_task": "2. Throw all items in the fridge into the trashcan.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior locate_and_gather_target_food(fridge:item, chicken:item, turkey:item, fish:item, egg:item, milk:item):\n    body:\n        achieve inside(chicken, fridge)\n        achieve inside(turkey, fridge)\n        achieve inside(fish, fridge)\n        achieve inside(egg, fridge)\n        achieve inside(milk, fridge)\n        observe(fridge, \"Check if chicken, turkey, fish, egg, and milk are present\")\n",
                "source_sub_task": "1. Locate and gather the milk, turkey, eggs, fish, and chicken.",
                "functions": [
                    "def has_target_food_in_fridge_1(fridge:item):\n    # Check if the target food items are in the specified fridge\n    symbol has_food=exists o: item : (is_food_chicken(o) or is_food_turkey(o) or is_food_fish(o) or is_food_egg(o) or is_milk(o)) and inside(o, fridge)\n    return has_food\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior cut_item(item:item):\n    body:\n        if has_cuttable_part_1(item):\n            achieve cut(item)\n",
                "source_sub_task": "1. Cut the chicken into pieces.",
                "functions": [
                    "def has_cuttable_part_1(item:item):\n    # Function to check if the item has a cuttable part\n    symbol has_part=exists part: item : cuttable(part) and part==item\n    return has_part\n"
                ]
            }
        ],
        "Drink": [
            {
                "usage_description": "",
                "cdl": "behavior find_cup_with_water(cup:item, water_source:item):\n    body:\n        achieve has_water(cup)\n",
                "source_sub_task": "1. Find a cup and fill it with water.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior locate_water_source(tap_or_dispenser:item):\n    body:\n        achieve close_char(char, tap_or_dispenser)\n",
                "source_sub_task": "1. Locate a source of water, such as a tap or water dispenser.",
                "functions": []
            }
        ]
    },
    "function_name_mapping": {
        "has_bowls_or_plates": "has_bowls_or_plates_1",
        "has_bowls_or_plates_inside": "has_bowls_or_plates_inside_1",
        "is_couch_sittable": "is_couch_sittable_1",
        "has_coffee_filter": "has_coffee_filter_1",
        "is_cuttable": "is_cuttable_1",
        "is_home_office_table": "is_home_office_table_1",
        "cat_in_home_office": "cat_in_home_office_1",
        "has_cat_inside": "has_cat_inside_1",
        "is_clothes_jacket": "is_clothes_jacket_1",
        "has_switch": "has_switch_1",
        "has_light": "has_light_1",
        "in_bedroom": "in_bedroom_1",
        "is_specified_book": "is_specified_book_1",
        "is_in_home_office": "is_in_home_office_1",
        "has_target_food_in_fridge": "has_target_food_in_fridge_1",
        "has_cuttable_part": "has_cuttable_part_1"
    },
    "function_name_counts": {
        "has_bowls_or_plates": 2,
        "has_bowls_or_plates_inside": 2,
        "is_couch_sittable": 2,
        "has_coffee_filter": 2,
        "is_cuttable": 2,
        "is_home_office_table": 2,
        "cat_in_home_office": 2,
        "has_cat_inside": 2,
        "is_clothes_jacket": 2,
        "has_switch": 2,
        "has_light": 2,
        "in_bedroom": 2,
        "is_specified_book": 2,
        "is_in_home_office": 2,
        "has_target_food_in_fridge": 2,
        "has_cuttable_part": 2
    }
}