Error: Unexpected token Token('COLON', ':') at line 5635, column 30.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

--------------------------------------------------------------------------------
Goal:  
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

behavior fill_water_tank(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Make sure the coffee maker has water to brew the coffee

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

behavior brew_coffee(using:coffee_maker):
    body:
        achieve inside(coffee:item, using)
        # Brew the coffee using the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        plug_in_coffee_maker(coffee_maker)
        fill_water_tank(coffee_maker)
        turn_on_coffee_maker(coffee_maker)
        brew_coffee(coffee_maker)

--------------------------------------------------------------------------------
Exploration: 
behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5635, column 30.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

--------------------------------------------------------------------------------
Goal:  
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

behavior fill_water_tank(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Make sure the coffee maker has water to brew the coffee

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

behavior brew_coffee(using:coffee_maker):
    body:
        achieve inside(coffee:item, using)
        # Brew the coffee using the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        plug_in_coffee_maker(coffee_maker)
        fill_water_tank(coffee_maker)
        turn_on_coffee_maker(coffee_maker)
        brew_coffee(coffee_maker)

--------------------------------------------------------------------------------
Exploration: 
behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: sink; available variables: [Variable<bowl: item>, Variable<faucet: item>].
--------------------------------------------------------------------------------
Goal:  
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once inside(bowl, sink)
        # Place the bowl inside the sink
        
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the bowl with water
        
        achieve has_water(bowl)
        # Ensure the bowl has water in it

        achieve_once is_off(faucet)
        # Turn off the faucet once the bowl is filled

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to fill with water

        bind sink: item where:
            is_sink(sink)
        # Select a sink to fill the bowl with water

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet that is close to the sink

        fill_bowl_with_water(bowl, faucet)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2071_around_fridge_289(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(bowl,fridge_instance)
        else:
            exp(bowl,fridge_instance)
    eff:
        unknown[bowl]=False
        close[bowl,fridge_instance]=True
        close[fridge_instance,bowl]=True
    

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Error during applying inhand[observation, state](x: item).
  Arguments: O::char
Argument #0 type does not match: expect item, got character.
--------------------------------------------------------------------------------
Goal:  
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl) and inhand(char)
        # Select the bowl with water that is in my hand

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table in the home office

        move_bowl_to_table(bowl, table)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl) and inhand(bowl)
        # Select the bowl with water that is in my hand

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table in the home office

        move_bowl_to_table(bowl, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_2004_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: location; available variables: [Variable<home_office_table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        bind home_office_table: item where:
            is_table(home_office_table) and surfaces(home_office_table) and inside(home_office_table, location) and (exists room: item : is_home_office(room) and inside(home_office_table, room))
        move_bowl_to_table(bowl, home_office_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_356_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'location') at line 5960, column 84.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        bind home_office_table: item where:
            is_table(home_office_table) and surfaces(home_office_table) and exists location: item : inside(home_office_table, location) and (exists room: item : is_home_office(room) and inside(home_office_table, room))
        move_bowl_to_table(bowl, home_office_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_106_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            id[bowl] == 2071
        # Select the bowl with ID 2071
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        move_bowl_to_table(bowl, table)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: room; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            id[bowl] == 2071
        # Select the bowl with ID 2071
        
        bind table: item where:
            is_table(table) and inside(table, room) and is_home_office(room)
        # Select a table inside the home office

        move_bowl_to_table(bowl, table)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('_NEWLINE', '\n            ') at line 6063, column 32.
Expected one of: 
	* STRING
	* FINDONE
	* LPAR
	* MINUS
	* IMAG_NUMBER
	* FALSE
	* PLUS
	* VARNAME
	* LONG_STRING
	* NONE
	* LSQB
	* FINDALL
	* FORALL
	* NOT
	* EXISTS
	* HEX_NUMBER
	* BIN_NUMBER
	* ELLIPSIS
	* TRUE
	* DO
	* TILDE
	* OCT_NUMBER
	* FLOAT_NUMBER
	* DEC_NUMBER
	* COLON

--------------------------------------------------------------------------------
Goal:  
def is_my_cat(target:item):
    # Function to check if the target item is my cat
    return is_cat(target)

behavior __goal__():
    body:
        exists cat: item where:
            is_cat(cat)

        bind home_office: item where:
            is_home_office(home_office)

        # Approach directly if the subtask information is known:
        if exists cat: item where:
            is_cat(cat) and inside(cat, home_office):
            achieve close_char(char, cat)
        
        else:
            # Check all unvisited places:
            foreach place: item:
                if inside_char(char, place) and not visited(place):
                    if is_dining_room(place):
                        observe(place, "Check for my cat here")


--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_106_around_desk_357(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

################################################################################

Error: Unexpected token Token('_NEWLINE', '\n            ') at line 6041, column 32.
Expected one of: 
	* STRING
	* FINDONE
	* LPAR
	* MINUS
	* IMAG_NUMBER
	* FALSE
	* PLUS
	* VARNAME
	* LONG_STRING
	* NONE
	* LSQB
	* FINDALL
	* FORALL
	* NOT
	* EXISTS
	* HEX_NUMBER
	* BIN_NUMBER
	* ELLIPSIS
	* TRUE
	* DO
	* TILDE
	* OCT_NUMBER
	* FLOAT_NUMBER
	* DEC_NUMBER
	* COLON

--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        exists cat: item where:
            is_cat(cat)

        bind home_office: item where:
            is_home_office(home_office)
        
        # Approach directly if the subtask information is known:
        if exists cat: item where:
            is_cat(cat) and inside(cat, home_office):
            achieve close_char(char, cat)
        
        else:
            # Check all unvisited places:
            foreach place: item:
                if inside_char(char, place) and not visited(place):
                    if is_dining_room(place):
                        observe(place, "Check for my cat here")

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: cutting_board; available variables: [].
--------------------------------------------------------------------------------
Goal:  
behavior find_cutting_board():
    body:
        if exists cutting_board: item : is_cutting_board(cutting_board) and close_char(char, cutting_board):
            achieve close_char(char, cutting_board)
        else:
            foreach cutting_board: item:
                if is_cutting_board(cutting_board) and not visited(cutting_board):
                    observe(cutting_board, "Look for cutting board on the counter")

behavior find_chicken():
    body:
        if exists chicken: item : is_food_chicken(chicken) and close_char(char, chicken):
            achieve close_char(char, chicken)
        else:
            foreach chicken: item:
                if is_food_chicken(chicken) and not visited(chicken):
                    observe(chicken, "Look for chicken in the kitchen")

behavior slice_chicken(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        achieve cut(chicken)

behavior __goal__():
    body:
        find_cutting_board()
        find_chicken()
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and close_char(char, cutting_board)
        
        bind chicken: item where:
            is_food_chicken(chicken) and close_char(char, chicken)
        
        slice_chicken(chicken, cutting_board)


--------------------------------------------------------------------------------
Exploration: 
behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: cutting_board; available variables: [].
--------------------------------------------------------------------------------
Goal:  
behavior find_cutting_board():
    body:
        if exists cutting_board: item : is_cutting_board(cutting_board) and close_char(char, cutting_board):
            achieve close_char(char, cutting_board)
        else:
            foreach cutting_board: item:
                if is_cutting_board(cutting_board) and not visited(cutting_board):
                    observe(cutting_board, "Look for cutting board on the counter")

behavior find_chicken():
    body:
        if exists chicken: item : is_food_chicken(chicken) and close_char(char, chicken):
            achieve close_char(char, chicken)
        else:
            foreach chicken: item:
                if is_food_chicken(chicken) and not visited(chicken):
                    observe(chicken, "Look for chicken in the kitchen")

behavior slice_chicken(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        achieve cut(chicken)

behavior __goal__():
    body:
        find_cutting_board()
        find_chicken()
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and close_char(char, cutting_board)
        
        bind chicken: item where:
            is_food_chicken(chicken) and close_char(char, chicken)
        
        slice_chicken(chicken, cutting_board)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Unknown variable: kitchen_counter; available variables: [Variable<cutting_board: item>].
--------------------------------------------------------------------------------
Goal:  
def has_cutting_board():
    # Determine if there is a cutting board on the kitchen counter
    symbol has_board=exists cutting_board: item : is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
    return has_board

behavior setup_cutting():
    body:
        assert_hold close_char(char, kitchen_counter) # Ensure the character is close to the kitchen counter
        if not has_cutting_board():
            observe(kitchen_counter, "Check for any cutting board on the counter")
            # If cutting board is not observed, check the counter again for it

        if has_cutting_board():
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
            assert on(cutting_board, kitchen_counter)
            # Ensure cutting board is on the kitchen counter

behavior cut_chicken(chicken: item):
    body:
        assert is_food_chicken(chicken)
        achieve cut(chicken)
        # Achieve the state where the chicken is cut

behavior __goal__():
    body:
        symbol kitchen = exists k: item : is_kitchen(k)
        assert kitchen # Verify there is a kitchen present
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and inside(kitchen_counter, kitchen)
        
        bind chicken: item where:
            is_food_chicken(chicken) and close(chicken, kitchen_counter)
        # Choose a piece of chicken that is near the kitchen counter

        setup_cutting()
        # Prepare the cutting space

        cut_chicken(chicken)
        # Execute cutting of the chicken

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Error during applying inside[observation, state](x: item, y: item).
  Arguments: V::kitchen_counter, V::kitchen
Argument #1 type does not match: expect item, got bool.
--------------------------------------------------------------------------------
Goal:  
def has_cutting_board(kitchen_counter: item):
    # Determine if there is a cutting board on the kitchen counter
    symbol has_board = exists cutting_board: item : is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
    return has_board

behavior setup_cutting(kitchen_counter: item):
    body:
        assert_hold close_char(char, kitchen_counter) # Ensure the character is close to the kitchen counter
        if not has_cutting_board(kitchen_counter):
            observe(kitchen_counter, "Check for any cutting board on the counter")
            # If cutting board is not observed, check the counter again for it

        if has_cutting_board(kitchen_counter):
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
            assert on(cutting_board, kitchen_counter)
            # Ensure cutting board is on the kitchen counter

behavior cut_chicken(chicken: item):
    body:
        assert is_food_chicken(chicken)
        achieve cut(chicken)
        # Achieve the state where the chicken is cut

behavior __goal__():
    body:
        symbol kitchen = exists k: item : is_kitchen(k)
        assert kitchen # Verify there is a kitchen present
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and inside(kitchen_counter, kitchen)
        
        bind chicken: item where:
            is_food_chicken(chicken) and close(chicken, kitchen_counter)
        # Choose a piece of chicken that is near the kitchen counter

        setup_cutting(kitchen_counter)
        # Prepare the cutting space

        cut_chicken(chicken)
        # Execute cutting of the chicken

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Behavior get_water already exists.
--------------------------------------------------------------------------------
Goal:  
behavior get_water(cup:item, sink:item):
    body:
        assert grabbable(cup)
        achieve has_water(cup)

behavior freeze_water(cup:item, freezer:item):
    body:
        achieve inside(cup, freezer)
        achieve closed(freezer)
        # Ensure the freezer door is closed after placing the cup inside

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a grabbable cup that can hold water
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink to get water from
        
        bind freezer: item where:
            is_freezer(freezer)
        # Select a freezer to freeze the cup of water
        
        get_water(cup, sink)
        freeze_water(cup, freezer) 

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2064_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Number of arguments does not match the number of types: 2 vs 1. Args: (VariableExpression<V::cup>, VariableExpression<V::sink>), Types: (ObjectType<item>,)
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a grabbable cup that can hold water

        bind sink: item where:
            is_sink(sink)
        # Select a sink to get water from

        bind freezer: item where:
            is_freezer(freezer)
        # Select a freezer to freeze the cup of water

        get_water(cup, sink)
        freeze_water(cup, freezer)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'is_on') at line 5629, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
behavior achieve_has_water(cup:item):
    body:
        achieve has_water(cup)

behavior achieve_inside_freezer(cup:item, freezer:item):
    body:
        achieve inside(cup, freezer)

behavior achieve_frozen(cup:item, freezer:item):
    body:
        achieve is_off(freezer)
        achieve once is_on(freezer)
        achieve_once closed(freezer)
        # Assuming freezing is managed by switching the freezer on and closing the door

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
            
        bind freezer: item where:
            is_freezer(freezer)
        # Select a freezer

        achieve_has_water(cup)
        achieve_inside_freezer(cup, freezer)
        achieve_frozen(cup, freezer)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2064_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function achieve_has_water not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal: 
behavior achieve_frozen(cup:item, freezer:item):
    body:
        achieve is_off(freezer)
        achieve_once is_on(freezer)
        achieve_once closed(freezer)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)

        bind freezer: item where:
            is_freezer(freezer)

        achieve_has_water(cup)
        achieve_inside_freezer(cup, freezer)
        achieve_frozen(cup, freezer)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2063_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'item') at line 5911, column 23.
Expected one of: 
	* COLON

--------------------------------------------------------------------------------
Goal:  
behavior observe_cat(cat:item):
    body:
        observe(cat,"check if its on the table")

behavior place_cat_on_table(cat:item, table:item):
    body:
        achieve on(cat, table)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        
        if not exists item: item where:
            on(cat, table):
            observe_cat(cat)
        
        place_cat_on_table(cat, table)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'item') at line 5913, column 23.
Expected one of: 
	* COLON

--------------------------------------------------------------------------------
Goal:  
behavior observe_cat(cat:item):
    body:
        observe(cat, "check if its on the table")

behavior place_cat_on_table(cat:item, table:item):
    body:
        achieve on(cat, table)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        bind home_office: item where:
            is_home_office(home_office)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        
        if not exists item: item where:
            on(cat, table):
            observe_cat(cat)
        
        place_cat_on_table(cat, table)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'r') at line 5620, column 43.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def has_visited_all_rooms():
    # Check if all rooms in the house have been visited
    symbol all_rooms_visited = not exists r: item : is_room(r) and not visited(r)
    return all_rooms_visited

behavior identify_room(r:item):
    body:
        observe(r, "Determine if this is a room")

behavior __goal__():
    body:
        if not has_visited_all_rooms():
            # If not all rooms have been visited, proceed to identify them
            foreach r: item:
                if is_room(r) and not visited(r):
                    identify_room(r)

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_2004_around_table_226(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'r') at line 5620, column 43.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def has_visited_all_rooms():
    # Check if all rooms in the house have been visited
    symbol all_rooms_visited = not exists r: item : is_room(r) and not visited(r)
    return all_rooms_visited

behavior identify_room(r:item):
    body:
        observe(r, "Determine if this is a room")

behavior __goal__():
    body:
        if not has_visited_all_rooms():
            # If not all rooms have been visited, proceed to identify them
            foreach r: item:
                if is_room(r) and not visited(r):
                    identify_room(r)

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_106_around_table_226(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'room') at line 5629, column 47.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

--------------------------------------------------------------------------------
Goal:  
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles item

        bind table: item where:
            is_coffee_table(table) and exists room: item : is_home_office(room) and inside(table, room)
        # Select the coffee table in the home office

        place_spectacles_on_table(spectacles, table)
        # Place the spectacles on the coffee table in the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_spectacles_2082_around_bookshelf_101(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(spectacles,bookshelf_instance)
        else:
            exp(spectacles,bookshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,bookshelf_instance]=True
        close[bookshelf_instance,spectacles]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book to be placed

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office
        
        place_on_coffee_table(book, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_donut_2019_around_fridge_289(food_donut:item):
    goal: not unknown(food_donut)
    body:
        assert is_food_donut(food_donut)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_donut,fridge_instance)
        else:
            exp(food_donut,fridge_instance)
    eff:
        unknown[food_donut]=False
        close[food_donut,fridge_instance]=True
        close[fridge_instance,food_donut]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
--------------------------------------------------------------------------------
Goal:  
behavior crack_and_scramble_egg(egg:item, fryingpan:item, stove:item):
    body:
        achieve_once inhand(egg) # Hold the egg only until it is cracked into the pan
        achieve inside(egg, fryingpan) # Crack the egg into the frying pan
        achieve is_on(stove) # Ensure the stove is turned on

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to crack and scramble
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select a frying pan that is on the stove

        bind stove: item where:
            is_stove(stove)
        # Select the stove to use

        crack_and_scramble_egg(egg, fryingpan, stove)


--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
--------------------------------------------------------------------------------
Goal:  
behavior crack_and_scramble_egg(egg:item, fryingpan:item, stove:item):
    body:
        achieve_once inhand(egg) # Hold the egg only until it is cracked into the pan
        achieve inside(egg, fryingpan) # Crack the egg into the frying pan
        achieve is_on(stove) # Ensure the stove is turned on

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to crack and scramble
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select a frying pan that is on the stove

        bind stove: item where:
            is_stove(stove)
        # Select the stove to use

        crack_and_scramble_egg(egg, fryingpan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<frying_pan: item>].
--------------------------------------------------------------------------------
Goal:  
behavior crack_and_scramble_egg(egg:item, frying_pan:item, stove:item):
    body:
        achieve inside(egg, frying_pan)
        # Ensure the egg is inside the frying pan

        achieve is_on(stove)
        # Make sure the stove is on

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and scrambled

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, stove)
        # Select the frying pan that is on the stove

        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        crack_and_scramble_egg(egg, frying_pan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<frying_pan: item>].
--------------------------------------------------------------------------------
Goal:  
behavior crack_and_scramble_egg(egg:item, frying_pan:item, stove:item):
    body:
        achieve inside(egg, frying_pan)
        # Ensure the egg is inside the frying pan

        achieve is_on(stove)
        # Make sure the stove is on

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and scrambled

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, stove)
        # Select the frying pan that is on the stove

        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        crack_and_scramble_egg(egg, frying_pan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Invalid comparison: id(V::o) vs V::thing
--------------------------------------------------------------------------------
Goal:  
def has_egg(thing:item):
    # Function to check if the item is an egg
    symbol egg=exists o: item : is_food_egg(o) and id[o]==thing
    return egg

behavior crack_and_scramble_egg(egg:item, pan:item, stove:item):
    body:
        achieve inside(egg, pan)
        # Add cracked egg into the frying pan
        achieve is_on(stove)
        # Ensure the stove is on for scrambling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and scrambled

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2065)
        # Select the frying pan that has been placed on the stove with ID 2065

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        crack_and_scramble_egg(egg, pan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pan: item>].
--------------------------------------------------------------------------------
Goal:  
behavior crack_and_scramble_egg(egg:item, pan:item, stove:item):
    body:
        achieve inside(egg, pan) # Move to the cracking stage
        achieve is_on(stove) # Ensure stove is on for scrambling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and scrambled

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2065)
        # Select the frying pan that has been placed on the stove with ID 2065

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        crack_and_scramble_egg(egg, pan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal:  
behavior add_vegetables_to_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        # Select the pot that is on stove_2065

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not achieved(inside(vegetable, pot)):
                add_vegetables_to_pot(vegetable, pot)
        # Add each identified vegetable to the pot

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        turn_on_stove(stove)
        # Turn on the stove to boil the vegetables

--------------------------------------------------------------------------------
Exploration: 
behavior find_headset_2076_around_closetdrawer_150(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(headset,closetdrawer_instance)
        else:
            exp(headset,closetdrawer_instance)
    eff:
        unknown[headset]=False
        close[headset,closetdrawer_instance]=True
        close[closetdrawer_instance,headset]=True
    

behavior find_bowl_2071_around_tray_296(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==296
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(bowl,tray_instance)
        else:
            exp(bowl,tray_instance)
    eff:
        unknown[bowl]=False
        close[bowl,tray_instance]=True
        close[tray_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal:  
behavior add_vegetables_to_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot that is on stove_2065

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not achieved(inside(vegetable, pot)):
                add_vegetables_to_pot(vegetable, pot)
        # Add each identified vegetable to the pot

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        turn_on_stove(stove)
        # Turn on the stove to boil the vegetables

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2080_around_tray_296(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==296
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(fork,tray_instance)
        else:
            exp(fork,tray_instance)
    eff:
        unknown[fork]=False
        close[fork,tray_instance]=True
        close[tray_instance,fork]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Unknown variable: tvstand; available variables: [Variable<remote_control: item>].
--------------------------------------------------------------------------------
Goal:  
def is_close_to_tvstand(remote_control: item):
    # Check if the remote control is close to the TV stand
    symbol close_to_tvstand = close(remote_control, tvstand)
    return close_to_tvstand

behavior find_remote(tvstand:item):
    body:
        foreach remote_control: item:
            if is_remote_control(remote_control) and not visited(remote_control):
                observe(remote_control, "Check if the remote control is close to the tv stand")

behavior turn_on_dvd_player_with_remote(dvd_player:item, remote_control:item):
    body:
        assert plugged(dvd_player)
        # Ensure the DVD player is plugged in before using the remote
        achieve is_on(dvd_player)
        # Turn on the DVD player

behavior __goal__():
    body:
        bind tvstand: item where:
            is_tvstand(tvstand) and id[tvstand] == 353
        # Select the TV stand with ID 353

        bind dvd_player: item where:
            is_dvd_player(dvd_player) and id[dvd_player] == 2061
        # Select the DVD player with ID 2061

        if exists remote_control: item : is_remote_control(remote_control) and is_close_to_tvstand(remote_control):
            bind remote_control: item where:
                is_remote_control(remote_control) and is_close_to_tvstand(remote_control)
            turn_on_dvd_player_with_remote(dvd_player, remote_control)
        else:
            find_remote(tvstand)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cd_player_2060_around_bookshelf_101(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(cd_player,bookshelf_instance)
        else:
            exp(cd_player,bookshelf_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,bookshelf_instance]=True
        close[bookshelf_instance,cd_player]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5706, column 9.
Expected one of: 
	* EQUAL
	* PERCENT
	* STAR
	* __ANON_5
	* FLOORDIV
	* SLASH
	* GREATER_EQ
	* __ANON_1
	* __ANON_8
	* COMMA
	* __ANON_3
	* MINUS
	* PLUS
	* __ANON_0
	* CIRCUMFLEX
	* NOT_EQ
	* LESSTHAN
	* RSHIFT
	* AT
	* SEMICOLON
	* __ANON_2
	* __ANON_4
	* AMPERSAND
	* AND
	* LSHIFT
	* IF
	* MORETHAN
	* OR
	* __ANON_6
	* LESS_EQ
	* __ANON_7
	* VBAR
	* DOUBLE_EQUAL
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def operate_dvd_player(dvd_player: item, remote_control: item):
    body:
        achieve is_on(dvd_player)

behavior __goal__():
    body:
        bind dvd_player: item where:
            is_dvd_player(dvd_player)
        bind remote_control: item where:
            is_remote_control(remote_control)
        operate_dvd_player(dvd_player, remote_control)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cd_player_2060_around_bookshelf_101(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(cd_player,bookshelf_instance)
        else:
            exp(cd_player,bookshelf_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,bookshelf_instance]=True
        close[bookshelf_instance,cd_player]=True
    

behavior find_cd_2075_around_closetdrawer_154(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cd,closetdrawer_instance)
        else:
            exp(cd,closetdrawer_instance)
    eff:
        unknown[cd]=False
        close[cd,closetdrawer_instance]=True
        close[closetdrawer_instance,cd]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable pot already exists.
--------------------------------------------------------------------------------
Goal:  
def has_boiling_water(pot:item):
    # Function to check if there is boiling water in the pot
    symbol boiling_water=exists pot: item : has_water(pot) and is_on(pot)
    return boiling_water

behavior boil_water(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve is_on(pot)
        # Ensure the pot is on to boil the water

behavior boil_egg(egg:item, pot:item):
    body:
        achieve inside(egg, pot)
        # Ensure the egg is placed inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling water and egg

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be boiled

        if not has_boiling_water(pot):
            boil_water(pot)
            # Boil water in the pot if not already boiling

        boil_egg(egg, pot)
        # Boil the egg in the pot with boiling water

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable pot already exists.
--------------------------------------------------------------------------------
Goal:  
def has_boiling_water(pot:item):
    # Function to check if there is boiling water in the pot
    symbol boiling_water=exists pot: item : has_water(pot) and is_on(pot)
    return boiling_water

behavior boil_water(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve is_on(pot)
        # Ensure the pot is on to boil the water

behavior boil_egg(egg:item, pot:item):
    body:
        achieve inside(egg, pot)
        # Ensure the egg is placed inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling water and egg

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be boiled

        if not has_boiling_water(pot):
            boil_water(pot)
            # Boil water in the pot if not already boiling

        boil_egg(egg, pot)
        # Boil the egg in the pot with boiling water

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'stove') at line 5643, column 58.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def has_egg_in_pot(pot:item):
    # Function to check if there is an egg in the pot
    symbol has_egg=exists egg: item : is_food_egg(egg) and inside(egg, pot)
    return has_egg

def can_boiled(pot:item):
    # Function to check if there is water in pot and pot is on stove
    symbol has_water_and_stove=has_water(pot) and exists stove:item : is_stove(stove) and on(pot, stove)
    return has_water_and_stove

behavior start_boiling(pot:item, stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling the egg
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if exists pot: item : is_pot(pot) and has_egg_in_pot(pot) and can_boiled(pot):
            achieve on(pot, stove)
            start_boiling(pot, stove)
        else:
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Check if there is an egg and water in the pot and if it is on stove")

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'stove') at line 5643, column 58.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def has_egg_in_pot(pot:item):
    # Function to check if there is an egg in the pot
    symbol has_egg=exists egg: item : is_food_egg(egg) and inside(egg, pot)
    return has_egg

def can_boiled(pot:item):
    # Function to check if there is water in pot and pot is on stove
    symbol has_water_and_stove=has_water(pot) and exists stove:item : is_stove(stove) and on(pot, stove)
    return has_water_and_stove

behavior start_boiling(pot:item, stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling the egg
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if exists pot: item : is_pot(pot) and has_egg_in_pot(pot) and can_boiled(pot):
            start_boiling(pot, stove)
        else:
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Check if there is an egg and water in the pot and if it is on stove")

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: bathroom; available variables: [Variable<window: item>].
--------------------------------------------------------------------------------
Goal:  
behavior open_bathroom_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and inside(window, bathroom)
        open_bathroom_window(window)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Variable window already exists.
--------------------------------------------------------------------------------
Goal:  
behavior open_bathroom_window(window:item, bath:item):
    body:
        bind window: item where:
            is_window(window) and inside(window, bath) and is_bathroom(bath)
        achieve open(window)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        bind window: item where:
            is_window(window) and inside(window, bathroom)
        open_bathroom_window(window, bathroom)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: milk; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal:  
def is_in_home_office(table: item):
    # Function to check if a table is in the home office
    symbol is_home_office = exists room: item : is_home_office(room) and inside(table, room)
    return is_home_office

behavior fill_cup_with_hot_milk(cup: item):
    body:
        achieve clean(cup)
        achieve inside(milk, cup)
        # Assume milk is an instance of milk
        achieve is_on(stove)
        # To heat the milk

behavior place_on_table(cup: item, table: item):
    body:
        achieve on(cup, table)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup to fill it with hot milk and place
        
        bind table: item where:
            is_coffee_table(table) and is_in_home_office(table)
        # Select the coffee table in the home office
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove for heating the milk
        
        fill_cup_with_hot_milk(cup)
        
        place_on_table(cup, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Variable knife already exists.
--------------------------------------------------------------------------------
Goal:  
def has_knife():
    # Check if there is a knife available
    symbol knife_exists=exists knife: item : is_knife(knife)
    return knife_exists

def is_toaster_available():
    # Check if there is a toaster in the scene
    symbol toaster_exists=exists toaster: item : is_toaster(toaster)
    return toaster_exists

behavior slice_bread(bread:item, knife:item):
    body:
        bind knife: item where:
            is_knife(knife)
        achieve cut(bread)
        # Ensure the bread is sliced with a knife

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve plugged(toaster) 
        # Ensure the toaster is plugged in

        achieve is_on(toaster)
        # Turn on the toaster

        achieve inside(bread, toaster)
        # Put the bread inside the toaster

        # The bread will be toasted inside the toaster

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread to be sliced and toasted
        
        if has_knife():
            bind knife: item where:
                is_knife(knife)
            slice_bread(bread, knife)
        
        if is_toaster_available():
            bind toaster: item where:
                is_toaster(toaster)
            toast_bread(bread, toaster)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_bread_2012_around_fridge_289(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

################################################################################

Error: Unexpected token Token('BASIC_TYPENAME', 'yaml') at line 5635, column 1.
Expected one of: 
	* BEHAVIOR
	* IMPORT
	* UNDIRECTED_GENERATOR
	* CONTROLLER
	* DEF
	* INIT
	* TYPEDEF
	* GENERATOR
	* GOAL
	* _PRAGMA_KEYWORD
	* INCLUDE
	* OBJECTS
	* DOMAIN
	* FEATURE
	* $END
	* _NEWLINE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

--------------------------------------------------------------------------------
Goal: yaml
def has_ironing_board(location:item):
    # Determine whether there is an ironing board at the specified location
    symbol has_ironing_board=exists board: item : is_ironing_board(board) and close(board, location)
    return has_ironing_board

behavior iron_shirt(shirt:item, iron:item, board:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)
        achieve on(shirt, board)
        # Ensure the shirt is on the ironing board
        # Ensure the iron remains plugged in and turned on

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        if exists board: item : is_ironing_board(board) and has_ironing_board(board):
            # If the ironing boards location is already known
            bind board: item where:
                is_ironing_board(board) and has_ironing_board(board)
            # Select the ironing board
            iron_shirt(shirt, iron, board)
            # Iron the shirt on the board
        else:
            # Look for an ironing board that hasnt been visited yet
            foreach board: item:
                if is_ironing_board(board) and not visited(board):
                    observe(board, "Check if the board is suitable for ironing")
                    # Check the unvisited ironing board for suitability

--------------------------------------------------------------------------------
Exploration: 
behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_154(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

################################################################################

Error: Unexpected token Token('BASIC_TYPENAME', 'yaml') at line 5653, column 1.
Expected one of: 
	* BEHAVIOR
	* IMPORT
	* UNDIRECTED_GENERATOR
	* CONTROLLER
	* DEF
	* INIT
	* TYPEDEF
	* GENERATOR
	* GOAL
	* _PRAGMA_KEYWORD
	* INCLUDE
	* OBJECTS
	* DOMAIN
	* FEATURE
	* $END
	* _NEWLINE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

--------------------------------------------------------------------------------
Goal: yaml
def has_ironing_board(location:item):
    # Determine whether there is an ironing board at the specified location
    symbol has_ironing_board=exists board: item : is_ironing_board(board) and close(board, location)
    return has_ironing_board

behavior iron_shirt(shirt:item, iron:item, board:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)
        achieve on(shirt, board)
        # Ensure the shirt is on the ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        if exists board: item : is_ironing_board(board) and has_ironing_board(board):
            # If the ironing boards location is already known
            bind board: item where:
                is_ironing_board(board) and has_ironing_board(board)
            # Select the ironing board
            iron_shirt(shirt, iron, board)
            # Iron the shirt on the board
        else:
            # Look for an ironing board that hasnt been visited yet
            foreach board: item:
                if is_ironing_board(board) and not visited(board):
                    observe(board, "Check if the board is suitable for ironing")
                    # Check the unvisited ironing board for suitability

--------------------------------------------------------------------------------
Exploration: 
behavior find_basket_for_clothes_2006_around_washing_machine_2007(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(basket_for_clothes,washing_machine_instance)
        else:
            exp(basket_for_clothes,washing_machine_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,washing_machine_instance]=True
        close[washing_machine_instance,basket_for_clothes]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_154(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable coffee_maker already exists.
--------------------------------------------------------------------------------
Goal:  
def is_coffee_maker_on(coffee_maker: item):
    # Function to check if the coffee maker is on
    symbol coffee_maker_on=exists coffee_maker: item: is_coffe_maker(coffee_maker) and is_on(coffee_maker)
    return coffee_maker_on

behavior brew_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
            
        if not is_coffee_maker_on(coffee_maker):
            brew_coffee(coffee_maker)
        # If the coffee maker is not on, turn it on to brew coffee

--------------------------------------------------------------------------------
Exploration: 
behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2064_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

################################################################################

Error: Unexpected token Token('BIND', 'bind') at line 5618, column 1.
Expected one of: 
	* BEHAVIOR
	* IMPORT
	* UNDIRECTED_GENERATOR
	* CONTROLLER
	* DEF
	* INIT
	* TYPEDEF
	* GENERATOR
	* GOAL
	* _PRAGMA_KEYWORD
	* INCLUDE
	* OBJECTS
	* DOMAIN
	* FEATURE
	* $END
	* _NEWLINE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n \n')]

--------------------------------------------------------------------------------
Goal:  
bind vacuum_cleaner: item where:
    is_vacuum_cleaner(vacuum_cleaner)

behavior push_vacuum_cleaner(vacuum_cleaner:item):
    body:
        push(vacuum_cleaner)

behavior pull_vacuum_cleaner(vacuum_cleaner:item):
    body:
        pull(vacuum_cleaner)

behavior __goal__():
    body:
        achieve close_char(char, vacuum_cleaner)
        # Approach the vacuum cleaner to operate it
        push_vacuum_cleaner(vacuum_cleaner)
        pull_vacuum_cleaner(vacuum_cleaner)

--------------------------------------------------------------------------------
Exploration: 
behavior find_vacuum_cleaner_2070_around_table_226(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(vacuum_cleaner,table_instance)
        else:
            exp(vacuum_cleaner,table_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,table_instance]=True
        close[table_instance,vacuum_cleaner]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior find_book_and_place_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Place the book on the table in the home office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book that needs to be placed

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        find_book_and_place_on_table(book, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_book_2067_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_chicken_2017; available variables: [Variable<tray: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_tray_in_oven(tray: item, oven: item):
    body:
        achieve inside(tray, oven)
        # Move the tray inside the oven

behavior close_oven_door(oven: item):
    body:
        achieve closed(oven)
        # Close the oven door

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and (on(food_chicken_2017, tray) or on(food_onion_2032, tray))
        # Select the tray with chicken and onion
        
        bind oven: item where:
            is_oven(oven)
        # Select the oven to roast the chicken and onion

        place_tray_in_oven(tray, oven)
        close_oven_door(oven)

--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_rack_34_around_towel_rack_34(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel_rack,towel_rack_instance)
        else:
            exp(towel_rack,towel_rack_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,towel_rack_instance]=True
        close[towel_rack_instance,towel_rack]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Error during applying close[observation, state](x: item, y: item).
  Arguments: O::char, V::cat
Argument #0 type does not match: expect item, got character.
--------------------------------------------------------------------------------
Goal:  
behavior dry_cat_with_towel(cat: item, towel: item):
    body:
        achieve_once inhand(towel)
        # Temporarily hold the towel to dry the cat
        achieve close(char, cat)
        wipe(cat)
        # Wipe the cat dry with the towel

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and id[cat] == 2055
        # Select the cat with ID 2055

        bind towel: item where:
            is_towel(towel)
        # Select a towel

        dry_cat_with_towel(cat, towel)

--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2056_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable clothes already exists.
--------------------------------------------------------------------------------
Goal:  
def ironable_clothes(clothes:item):
    # Function to check if the clothes need ironing
    symbol needs_ironing=exists clothes: item : (is_clothes_shirt(clothes) or is_clothes_skirt(clothes)) and (id[clothes]==2086 or id[clothes]==2088) and inside(clothes, bathroom)
    return needs_ironing

def has_ironing_board(bathroom:item):
    # Function to check if there is any ironing board in the bathroom
    symbol has_board=exists board: item : is_ironing_board(board) and inside(board, bathroom)
    return has_board
    
behavior iron_clothes(ironing_board: item, iron: item, clothes_shirt: item, clothes_skirt: item):
    body:
        achieve plugged(iron) # Ensure iron is plugged in
        achieve is_on(iron) # Turn on the iron

        achieve on(clothes_shirt, ironing_board)
        # Make sure the shirt is on the ironing board
        achieve on(clothes_skirt, ironing_board)
        # Make sure the skirt is on the ironing board

behavior __goal__():
    body:
        bind basket_for_clothes: item where:
            is_basket_for_clothes(basket_for_clothes) and id[basket_for_clothes]==2006
        # Select the basket containing clothes that need ironing
        
        bind bathroom: item where:
            is_bathroom(bathroom) and inside(basket_for_clothes, bathroom)
        # Select the bathroom that contains the clothes basket
        
        if needs_ironing(bathroom):
            bind ironing_board: item where:
                is_ironing_board(ironing_board) and inside(ironing_board, bathroom)
            # Select the ironing board within the bathroom
                
            bind iron: item where:
                is_iron(iron)
            # Select an iron

            bind clothes_shirt: item where:
                is_clothes_shirt(clothes_shirt) and id[clothes_shirt]==2086 and inside(clothes_shirt, basket_for_clothes)
            # Select the shirt that needs ironing
            
            bind clothes_skirt: item where:
                is_clothes_skirt(clothes_skirt) and id[clothes_skirt]==2088 and inside(clothes_skirt, basket_for_clothes)
            # Select the skirt that needs ironing
            
            iron_clothes(ironing_board, iron, clothes_shirt, clothes_skirt)
            # Execute the ironing process

--------------------------------------------------------------------------------
Exploration: 
behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable clothes already exists.
--------------------------------------------------------------------------------
Goal:  
def needs_ironing(clothes:item):
    # Function to check if the clothes need ironing
    symbol needs_ironing=exists clothes: item : (is_clothes_shirt(clothes) or is_clothes_skirt(clothes)) and (id[clothes]==2086 or id[clothes]==2088) and inside(clothes, bathroom)
    return needs_ironing

behavior iron_clothes(ironing_board: item, iron: item, clothes_shirt: item, clothes_skirt: item):
    body:
        achieve plugged(iron) # Ensure iron is plugged in
        achieve is_on(iron) # Turn on the iron

        achieve on(clothes_shirt, ironing_board)
        # Make sure the shirt is on the ironing board
        achieve on(clothes_skirt, ironing_board)
        # Make sure the skirt is on the ironing board

behavior __goal__():
    body:
        bind basket_for_clothes: item where:
            is_basket_for_clothes(basket_for_clothes) and id[basket_for_clothes]==2006
        # Select the basket containing clothes that need ironing
        
        bind bathroom: item where:
            is_bathroom(bathroom) and inside(basket_for_clothes, bathroom)
        # Select the bathroom that contains the clothes basket
        
        if needs_ironing(bathroom):
            bind ironing_board: item where:
                is_ironing_board(ironing_board) and inside(ironing_board, bathroom)
            # Select the ironing board within the bathroom
                
            bind iron: item where:
                is_iron(iron)
            # Select an iron

            bind clothes_shirt: item where:
                is_clothes_shirt(clothes_shirt) and id[clothes_shirt]==2086 and inside(clothes_shirt, basket_for_clothes)
            # Select the shirt that needs ironing
            
            bind clothes_skirt: item where:
                is_clothes_skirt(clothes_skirt) and id[clothes_skirt]==2088 and inside(clothes_skirt, basket_for_clothes)
            # Select the skirt that needs ironing
            
            iron_clothes(ironing_board, iron, clothes_shirt, clothes_skirt)
            # Execute the ironing process

--------------------------------------------------------------------------------
Exploration: 
behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: Unexpected token Token('IN', 'in') at line 5954, column 28.
Expected one of: 
	* COLON
	* COMMA
	* LSQB
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

--------------------------------------------------------------------------------
Goal: behavior prepare_ironing(items: list, iron: item, ironing_board: item):
    body:
        foreach item: item in items:
            # Ensure each item is placed on the ironing board
            achieve on(item, ironing_board)
        achieve plugged(iron)
        # Plug in the iron for use
        achieve is_on(iron)
        # Turn on the iron to start ironing

behavior iron_clothes(items: list, ironing_board: item):
    body:
        foreach item: item in items:
            # Iron each item ensuring they are on the ironing board
            achieve on(item, ironing_board)
            assert clean(item)

behavior store_ironed_clothes(items: list, basket: item):
    body:
        foreach item: item in items:
            # Ensure each ironed item is stored in the basket
            achieve inside(item, basket)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt to be ironed
        
        bind basket_for_clothes: item where:
            is_basket_for_clothes(basket_for_clothes)

        prepare_ironing([shirt, skirt], iron, ironing_board)
        iron_clothes([shirt, skirt], ironing_board)
        store_ironed_clothes([shirt, skirt], basket_for_clothes)
--------------------------------------------------------------------------------
Exploration: 
behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: Unexpected token Token('IN', 'in') at line 5955, column 28.
Expected one of: 
	* COLON
	* COMMA
	* LSQB
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

--------------------------------------------------------------------------------
Goal:  
behavior prepare_ironing(items: list, iron: item, ironing_board: item):
    body:
        foreach item: item in items:
            # Ensure each item is placed on the ironing board
            achieve on(item, ironing_board)
        achieve plugged(iron)
        # Plug in the iron for use
        achieve is_on(iron)
        # Turn on the iron to start ironing

behavior iron_clothes(items: list, ironing_board: item):
    body:
        foreach item: item in items:
            # Iron each item ensuring they are on the ironing board
            achieve on(item, ironing_board)
            assert clean(item)

behavior store_ironed_clothes(items: list, basket: item):
    body:
        foreach item: item in items:
            # Ensure each ironed item is stored in the basket
            achieve inside(item, basket)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt to be ironed
        
        bind basket_for_clothes: item where:
            is_basket_for_clothes(basket_for_clothes)

        prepare_ironing([shirt, skirt], iron, ironing_board)
        iron_clothes([shirt, skirt], ironing_board)
        store_ironed_clothes([shirt, skirt], basket_for_clothes)

--------------------------------------------------------------------------------
Exploration: 
behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: ironing_board; available variables: [Variable<shirt: item>].
--------------------------------------------------------------------------------
Goal:  
behavior iron_clothes(shirt:item, skirt:item, iron:item, ironing_board:item):
    body:
        achieve on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board
        
        achieve is_on(iron) and plugged(iron)
        # Ensure the iron is on and plugged in
        
        # Begin ironing the shirt
        touch(iron)
        
        achieve on(skirt, ironing_board)
        # Ensure the skirt is on the ironing board after the shirt is ironed
        
        # Continue ironing the skirt
        touch(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board)
        # Bind the shirt that is on the ironing board
        
        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, ironing_board)
        # Bind the skirt that is on the ironing board
            
        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Bind the iron that is plugged in and on
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Bind the ironing board
        
        iron_clothes(shirt, skirt, iron, ironing_board)
        # Execute the behavior to iron the clothes

--------------------------------------------------------------------------------
Exploration: 
behavior find_remote_control_2052_around_couch_352(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(remote_control,couch_instance)
        else:
            exp(remote_control,couch_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,couch_instance]=True
        close[couch_instance,remote_control]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_150(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_clothes_jacket_2047_around_hanger_109(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==109
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_jacket,hanger_instance)
        else:
            exp(clothes_jacket,hanger_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,hanger_instance]=True
        close[hanger_instance,clothes_jacket]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: ironing_board; available variables: [Variable<shirt: item>].
--------------------------------------------------------------------------------
Goal: behavior iron_clothes(shirt:item, skirt:item, iron:item, ironing_board:item):
    body:
        achieve on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board

        achieve is_on(iron) and plugged(iron)
        # Ensure the iron is on and plugged in

        # Begin ironing the shirt
        touch(iron)

        achieve on(skirt, ironing_board)
        # Ensure the skirt is on the ironing board after the shirt is ironed

        # Continue ironing the skirt
        touch(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board)
        # Bind the shirt that is on the ironing board

        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, ironing_board)
        # Bind the skirt that is on the ironing board

        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Bind the iron that is plugged in and on

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Bind the ironing board

        iron_clothes(shirt, skirt, iron, ironing_board)
        # Execute the behavior to iron the clothes
--------------------------------------------------------------------------------
Exploration: 
behavior find_hanger_367_around_closetdrawer_150(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<window: item>].
--------------------------------------------------------------------------------
Goal: behavior open_window_in_home_office(window:item, office:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Bind the window inside the home office

        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office

        open_window_in_home_office(window, home_office)
--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('WHERE', 'where') at line 5856, column 38.
Expected one of: 
	* COLON

--------------------------------------------------------------------------------
Goal:  
def is_shirt_found(shirt: item):
    # Function to check if clothes shirt has been found
    symbol found=visited(shirt)
    return found

behavior wash_shirt(shirt:item):
    body:
        wash(shirt)
        achieve clean(shirt)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[clothes_shirt]==2086
        # Select the shirt to be washed

        if not is_shirt_found(shirt):
            # If shirt has not been found yet, ensure it is located
            foreach location_n: item where:
                (is_closetdrawer(location_n) or is_hanger(location_n)) and not visited(location_n):
                    observe(location_n, "Check is clothes_shirt_2086 present")
        
        wash_shirt(shirt)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cleaning_solution_2073_around_washing_machine_2007(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_basket_for_clothes_2006_around_washing_machine_2007(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(basket_for_clothes,washing_machine_instance)
        else:
            exp(basket_for_clothes,washing_machine_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,washing_machine_instance]=True
        close[washing_machine_instance,basket_for_clothes]=True
    

behavior find_hanger_124_around_hanger_124(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==124
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(hanger,hanger_instance)
        else:
            exp(hanger,hanger_instance)
    eff:
        unknown[hanger]=False
        close[hanger,hanger_instance]=True
        close[hanger_instance,hanger]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_clothes_shirt_2086_around_hanger_130(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==130
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5803, column 9.
Expected one of: 
	* EQUAL
	* PERCENT
	* STAR
	* __ANON_5
	* FLOORDIV
	* SLASH
	* GREATER_EQ
	* __ANON_1
	* __ANON_8
	* COMMA
	* __ANON_3
	* MINUS
	* PLUS
	* __ANON_0
	* CIRCUMFLEX
	* NOT_EQ
	* LESSTHAN
	* RSHIFT
	* AT
	* SEMICOLON
	* __ANON_2
	* __ANON_4
	* AMPERSAND
	* AND
	* LSHIFT
	* IF
	* MORETHAN
	* OR
	* __ANON_6
	* LESS_EQ
	* __ANON_7
	* VBAR
	* DOUBLE_EQUAL
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def find_shirt(shirt:item):
    body:
        observe(shirt, "Locate the shirt and check if its dirty")

behavior wash_shirt_by_hand(shirt:item):
    body:
        wash(shirt)
        # Ensure the shirt is washed by hand

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086
        
        if not visited(shirt):
            # If the shirt has not been found or its state is unknown
            find_shirt(shirt)
        
        wash_shirt_by_hand(shirt)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cleaning_solution_2073_around_washing_machine_2007(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_clothes_shirt_2086_around_hanger_130(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==130
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
def find_shirt(shirt:item):
    # Function to locate the shirt and check if its dirty
    observe(shirt, "Locate the shirt and check if its dirty")

behavior wash_shirt_by_hand(shirt:item):
    body:
        wash(shirt)
        # Ensure the shirt is washed by hand

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086
        
        if not visited(shirt):
            # If the shirt has not been found or its state is unknown
            find_shirt(shirt)
        
        wash_shirt_by_hand(shirt)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cleaning_solution_2073_around_washing_machine_2007(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_clothes_shirt_2086_around_hanger_130(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==130
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
def verify_cup_has_water(cup:item):
    # Function to check if the cup has water
    observe(cup, "Verify whether the cup is filled with water after turning off the faucet")

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        assert is_cup(cup) and is_faucet(faucet)
        # Confirm the objects are indeed a cup and a faucet
        achieve close(cup, faucet)
        # Ensure the cup is close to the faucet for filling
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the cup
        achieve_once is_off(faucet)
        # Turn off the faucet after filling the cup
        verify_cup_has_water(cup)

behavior return_to_starting_point(start_point:item):
    body:
        achieve close_char(char, start_point)
        # Ensure the character returns to the starting point

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Select the specific cup with ID 2063

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select the faucet with ID 43

        fill_cup_with_water(cup, faucet)

        bind starting_point: item where:
            is_kitchen_counter(starting_point) and id[starting_point]==230
        # Select the starting point where the task began

        return_to_starting_point(starting_point)


--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2058_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_cleaning_solution_2073_around_closetdrawer_154(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
def verify_cup_has_water(cup:item):
    # Function to check if the cup has water
    observe(cup, "Verify whether the cup is filled with water after turning off the faucet")

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        assert is_cup(cup) and is_faucet(faucet)
        # Confirm the objects are indeed a cup and a faucet
        achieve close(cup, faucet)
        # Ensure the cup is close to the faucet for filling
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the cup
        achieve_once is_off(faucet)
        # Turn off the faucet after filling the cup
        verify_cup_has_water(cup)

behavior return_to_starting_point(start_point:item):
    body:
        achieve close_char(char, start_point)
        # Ensure the character returns to the starting point

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Select the specific cup with ID 2063

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select the faucet with ID 43

        fill_cup_with_water(cup, faucet)

        bind starting_point: item where:
            is_kitchen_counter(starting_point) and id[starting_point]==230
        # Select the starting point where the task began

        return_to_starting_point(starting_point)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Variable faucet already exists.
--------------------------------------------------------------------------------
Goal:  
def has_filled_water(cup:item):
    # Function to check if the cup has been filled with water
    symbol cup_filled=has_water(cup)
    return cup_filled

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with water

        if has_filled_water(cup):
            bind faucet: item where:
                is_faucet(faucet)
            achieve is_off(faucet)
            # Ensure the faucet is turned off after the cup is filled

behavior return_to_start(char:character, start_location:item):
    body:
        achieve inside_char(char, start_location)
        # Ensure the character returns to the starting point

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Select cup 2063

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select faucet 43

        fill_cup_with_water(cup, faucet)

        bind start_location: item where:
            is_kitchen_counter(start_location) and id[start_location]==230
        # Assuming the initial starting point is the kitchen_counter_230

        return_to_start(char, start_location)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function range not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior observe_and_verify_water(cup:item):
    body:
        foreach i in range(2):
            observe(cup, "Check if the cup contains water after switching off the faucet")
            # Verify if the cup contains water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063
        observe_and_verify_water(cup)
        # Observe and verify the cup contains water

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_onion_2032_around_cupboard_229(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Invalid foreach_in statement: C::tensor([0., 1.]) is not a list.
--------------------------------------------------------------------------------
Goal:  
behavior observe_and_verify_water(cup:item):
    body:
        foreach _ in [0, 1]:
            observe(cup, "Check if the cup contains water after switching off the faucet")
            # Verify if the cup contains water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063
        observe_and_verify_water(cup)
        # Observe and verify the cup contains water

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "function_definition":

Variable cup already exists.
--------------------------------------------------------------------------------
Goal:  
def has_faucet_water_confirmation(cup: item, faucet: item):
    # Function to confirm that the cup has water after using the faucet
    symbol water_confirmed = exists cup: item, faucet: item : is_faucet(faucet) and has_water(cup)
    return water_confirmed

behavior observe_cup_for_water(cup: item):
    body:
        observe(cup, "Check if the cup contains water after switching off the faucet")

behavior turn_off_faucet(faucet: item):
    body:
        achieve is_off(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43
        
        if not has_faucet_water_confirmation(cup, faucet):
            turn_off_faucet(faucet)
            observe_cup_for_water(cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_onion_2032_around_fridge_289(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: clothes_shirt_2086; available variables: [Variable<shirt: item>].
--------------------------------------------------------------------------------
Goal:  
behavior iron_shirt(shirt:item, iron:item):
    body:
        achieve clean(shirt)
        # Ensure the shirt is clean after ironing

behavior prepare_ironing_board(board:item, shirt:item):
    body:
        achieve on(shirt, board)
        # Place the shirt on the ironing board

behavior start_ironing_process(iron:item):
    body:
        achieve is_on(iron)
        # Turn on the iron for ironing the shirt

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind shirt: item where:
            is_clothes_shirt(shirt) and id[clothes_shirt_2086]
        # Select the shirt with ID 2086

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        prepare_ironing_board(ironing_board, shirt)
        # Place the shirt on the ironing board

        start_ironing_process(iron)
        # Turn on the iron

        iron_shirt(shirt, iron)
        # Iron the shirt to ensure it is clean

--------------------------------------------------------------------------------
Exploration: 
behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_154(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Variable ironing_board already exists.
--------------------------------------------------------------------------------
Goal:  
behavior iron_shirt_and_place_on_bed(shirt:item, bed:item, iron:item, ironing_board:item):
    body:
        achieve clean(shirt) 
        # Ensure the shirt is clean before ironing it

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board for the task

        achieve inside(shirt, ironing_board)
        # Place the shirt on the ironing board for ironing

        bind iron: item where:
            is_iron(iron)
        # Select an iron for ironing the shirt

        achieve plugged(iron) # Plug in the iron
        achieve is_on(iron)   # Turn on the iron

        achieve_once inhand(iron)   
        # Temporarily hold the iron for the task until complete

        observe(ironing_board, "Iron the shirt placed on the ironing board")

        achieve_on_char(iron, ironing_board)
        # Place the iron back on the ironing board after use

        achieve on(shirt, bed) 
        # Place the ironed shirt neatly on the bed

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select the shirt that is to be ironed

        bind bed: item where:
            is_bed(bed)
        # Select the bed for placing the shirt after ironing

        bind iron: item where:
            is_iron(iron)
        # Bind an iron for use in ironing the shirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board) 
        # Bind an ironing board for the shirt

        iron_shirt_and_place_on_bed(shirt, bed, iron, ironing_board)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_clothes_shirt_2086_around_hanger_109(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==109
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
def find_shirt_location(item: item):
    # Function to check the location of clothes_shirt_2086
    observe(item, "Check where clothes_shirt_2086 is located")

behavior iron_shirt_and_place_on_bed(shirt: item, ironing_board: item, bed: item):
    body:
        achieve plugged(ironing_board)
        achieve is_on(ironing_board)
        achieve clean(shirt)
        achieve on(shirt, drying_rack) 
        # Note: An intermediary state as the shirt needs to be hung
        achieve plugged(ironing_board)
        achieve open(clothes_wardrobe)
        achieve inside(shirt, clothes_wardrobe)
        # This is assumed as returning to wardrobe after ironing

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)

        bind clothes_shirt_2086: item where:
            is_clothes_shirt(clothes_shirt_2086)

        if not visited(clothes_shirt_2086):
            # Check if clothes_shirt_2086 has already been located
            find_shirt_location(clothes_shirt_2086)

        bind bed: item where:
            is_bed(bed)
            
        iron_shirt_and_place_on_bed(clothes_shirt_2086, ironing_board, bed)

--------------------------------------------------------------------------------
Exploration: 
behavior find_basket_for_clothes_2006_around_cupboard_229(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(basket_for_clothes,cupboard_instance)
        else:
            exp(basket_for_clothes,cupboard_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,cupboard_instance]=True
        close[cupboard_instance,basket_for_clothes]=True
    

behavior find_hanger_114_around_closetdrawer_150(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_clothes_shirt_2086_around_hanger_114(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==114
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function find_shirt_location not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior iron_shirt_and_place_on_bed(shirt: item, ironing_board: item, bed: item):
    body:
        achieve plugged(ironing_board)
        achieve is_on(ironing_board)
        achieve clean(shirt)
        achieve on(shirt, bed)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)

        bind clothes_shirt_2086: item where:
            is_clothes_shirt(clothes_shirt_2086)

        # Check if clothes_shirt_2086 has already been located
        if not visited(clothes_shirt_2086):
            find_shirt_location(clothes_shirt_2086)

        bind bed: item where:
            is_bed(bed)

        iron_shirt_and_place_on_bed(clothes_shirt_2086, ironing_board, bed)

--------------------------------------------------------------------------------
Exploration: 
behavior find_hanger_140_around_hanger_140(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==140
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(hanger,hanger_instance)
        else:
            exp(hanger,hanger_instance)
    eff:
        unknown[hanger]=False
        close[hanger,hanger_instance]=True
        close[hanger_instance,hanger]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_158(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Error during applying inside[observation, state](x: item, y: item).
  Arguments: O::char, V::bed
Argument #0 type does not match: expect item, got character.
--------------------------------------------------------------------------------
Goal:  
def has_water(bed:item):
    # Function to check if the shirt is on the bed
    symbol has_water=exists o: item : (is_bed(o)) and inside(char, bed)
    return has_water

behavior iron_shirt(shirt:item):
    body:
        achieve is_clothes(shirt)
        # Ensure the shirt is ironed

behavior place_shirt_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)
        # Ensure the shirt is placed on the bed

behavior __goal__():
    body:
        bind clothes_shirt_2086: item where:
            is_clothes_shirt(clothes_shirt_2086)
        # Select the shirt with ID 2086

        bind bed: item where:
            is_bed(bed)
        # Select a bed

        iron_shirt(clothes_shirt_2086)
        # Iron the shirt
        place_shirt_on_bed(clothes_shirt_2086, bed)
        # Place the shirt on the bed

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_scarf_2048_around_hanger_142(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==142
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_scarf,hanger_instance)
        else:
            exp(clothes_scarf,hanger_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,hanger_instance]=True
        close[hanger_instance,clothes_scarf]=True
    

behavior find_clothes_hat_2045_around_hanger_142(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==142
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_hat,hanger_instance)
        else:
            exp(clothes_hat,hanger_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,hanger_instance]=True
        close[hanger_instance,clothes_hat]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5999, column 9.
Expected one of: 
	* EQUAL
	* PERCENT
	* STAR
	* __ANON_5
	* FLOORDIV
	* SLASH
	* GREATER_EQ
	* __ANON_1
	* __ANON_8
	* COMMA
	* __ANON_3
	* MINUS
	* PLUS
	* __ANON_0
	* CIRCUMFLEX
	* NOT_EQ
	* LESSTHAN
	* RSHIFT
	* AT
	* SEMICOLON
	* __ANON_2
	* __ANON_4
	* AMPERSAND
	* AND
	* LSHIFT
	* IF
	* MORETHAN
	* OR
	* __ANON_6
	* LESS_EQ
	* __ANON_7
	* VBAR
	* DOUBLE_EQUAL
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def ensure_clean_shirt(shirt:item, sink:item):
    # Function to ensure the shirt is clean, wash if necessary
    if dirty(shirt):
        achieve_once inside(shirt, sink)
        wash(shirt)
        # Wash the shirt if it is dirty

def iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve inside(shirt, ironing_board)
        # Place the shirt on the ironing board
        if not is_on(iron):
            achieve_once plugged(iron) # Plug in the iron if not plugged
            achieve_once is_on(iron) # Turn on the iron
        achieve clean(shirt) 
        # Ensure the shirt is clean and ready for ironing

behavior place_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)

behavior turn_off_and_unplug_iron(iron:item):
    body:
        achieve is_off(iron)
        achieve unplugged(iron)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind bed: item where:
            is_bed(bed) and id[bed]==105
        # Select the bed with ID 105

        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select sink with ID 42 for washing if necessary

        ensure_clean_shirt(shirt, sink)
        iron_shirt(shirt, ironing_board, iron)
        place_on_bed(shirt, bed)
        turn_off_and_unplug_iron(iron)

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5998, column 9.
Expected one of: 
	* EQUAL
	* PERCENT
	* STAR
	* __ANON_5
	* FLOORDIV
	* SLASH
	* GREATER_EQ
	* __ANON_1
	* __ANON_8
	* COMMA
	* __ANON_3
	* MINUS
	* PLUS
	* __ANON_0
	* CIRCUMFLEX
	* NOT_EQ
	* LESSTHAN
	* RSHIFT
	* AT
	* SEMICOLON
	* __ANON_2
	* __ANON_4
	* AMPERSAND
	* AND
	* LSHIFT
	* IF
	* MORETHAN
	* OR
	* __ANON_6
	* LESS_EQ
	* __ANON_7
	* VBAR
	* DOUBLE_EQUAL
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def ensure_clean_shirt(shirt:item, sink:item):
    # Function to ensure the shirt is clean, wash if necessary
    if dirty(shirt):
        achieve_once inside(shirt, sink)
        wash(shirt)

def iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve inside(shirt, ironing_board)
        # Place the shirt on the ironing board
        if not is_on(iron):
            achieve_once plugged(iron) # Plug in the iron if not plugged
            achieve_once is_on(iron) # Turn on the iron

behavior place_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)

behavior turn_off_and_unplug_iron(iron:item):
    body:
        achieve is_off(iron)
        achieve unplugged(iron)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind bed: item where:
            is_bed(bed) and id[bed]==105
        # Select the bed with ID 105

        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select sink with ID 42 for washing if necessary

        ensure_clean_shirt(shirt, sink)
        iron_shirt(shirt, ironing_board, iron)
        place_on_bed(shirt, bed)
        turn_off_and_unplug_iron(iron)

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function has_milk not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
def is_milk_heated(cup: item, microwave: item):
    # Function to check if the cup of milk has been heated in the microwave
    symbol milk_heated=exists milk: item : is_milk(milk) and inside(milk, cup) and inside(cup, microwave)
    return milk_heated

behavior heat_milk_in_microwave(cup: item, microwave: item):
    body:
        achieve inside(cup, microwave)
        # Place the cup of milk inside the microwave

        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_milk(cup)
        # Select the cup of milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        if not is_milk_heated(cup, microwave):
            # If the milk is not yet heated, perform the heating process
            heat_milk_in_microwave(cup, microwave)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'milk') at line 5820, column 36.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

--------------------------------------------------------------------------------
Goal:  
def is_milk_heated(cup: item, microwave: item):
    # Function to check if the cup of milk has been heated in the microwave
    symbol milk_heated=exists milk: item : is_milk(milk) and inside(milk, cup) and inside(cup, microwave)
    return milk_heated

behavior heat_milk_in_microwave(cup: item, microwave: item):
    body:
        achieve inside(cup, microwave)
        # Place the cup of milk inside the microwave

        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and exists milk: item : is_milk(milk) and inside(milk, cup)
        # Select the cup of milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        if not is_milk_heated(cup, microwave):
            # If the milk is not yet heated, perform the heating process
            heat_milk_in_microwave(cup, microwave)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter_230; available variables: [Variable<egg: item>].
--------------------------------------------------------------------------------
Goal:  
behavior prepare_to_scramble_eggs(egg: item, kitchen_counter: item, fryingpan: item):
    body:
        achieve_once inhand(egg)
        achieve cut(egg)
        achieve inside(egg, fryingpan)
        # Crack and scramble the egg, placing it inside the frying pan

behavior heat_fryingpan(fryingpan: item, stove: item):
    body:
        achieve inside(fryingpan, stove)
        achieve is_on(stove)
        # Ensure the frying pan is on the stove and the stove is turned on for scrambling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and on(egg, kitchen_counter_230)
        # Select the egg on the kitchen counter

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan for scrambling the egg

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        prepare_to_scramble_eggs(egg, kitchen_counter_230, fryingpan)
        heat_fryingpan(fryingpan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2081_around_coffee_table_2068(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(fork,coffee_table_instance)
        else:
            exp(fork,coffee_table_instance)
    eff:
        unknown[fork]=False
        close[fork,coffee_table_instance]=True
        close[coffee_table_instance,fork]=True
    

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter; available variables: [Variable<egg: item>].
--------------------------------------------------------------------------------
Goal: 
behavior prepare_to_scramble_eggs(egg: item, kitchen_counter: item, fryingpan: item):
    body:
        achieve_once inhand(egg)
        achieve cut(egg)
        achieve inside(egg, fryingpan)

behavior heat_fryingpan(fryingpan: item, stove: item):
    body:
        achieve inside(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and on(egg, kitchen_counter)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter]==230

        prepare_to_scramble_eggs(egg, kitchen_counter, fryingpan)
        heat_fryingpan(fryingpan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function cooked not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior scramble_eggs_in_pan(eggs: item, fryingpan: item, stove: item):
    body:
        achieve inside(eggs, fryingpan)
        # Ensure the eggs are inside the frying pan

        achieve is_on(stove)
        # Ensure the stove is on for cooking

        achieve cooked(eggs)
        # Ensure the eggs are fully cooked as scrambled eggs

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan_2083)
        # Select the eggs placed in the frying pan

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2083
        # Select the frying pan with ID 2083

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        scramble_eggs_in_pan(eggs, fryingpan, stove)
        # Execute the behavior to scramble the eggs using the frying pan on the stove

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "function_definition":

'Function is_scrambled not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
def has_scrambled_eggs(pan: item):
    # Determine if there are scrambled eggs in the fryingpan
    symbol eggs_scrambled = exists eggs: item: is_food_egg(eggs) and inside(eggs, pan) and is_scrambled(eggs)
    return eggs_scrambled

behavior combine_and_fry(rice: item, pan: item):
    body:
        achieve inside(rice, pan)
        achieve is_on(stove_2065)

behavior ensure_eggs_scrambled(pan: item):
    body:
        if not has_scrambled_eggs(pan):
            observe(pan, "Check if the eggs are being scrambled")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and visited(fryingpan)
        
        ensure_eggs_scrambled(fryingpan)
        combine_and_fry(rice, fryingpan)


--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_dvd_player_2061_around_tablelamp_97(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tablelamp_instance:item where:
            is_tablelamp(tablelamp_instance) and id[tablelamp_instance]==97
        achieve close_char(char,tablelamp_instance)
        if can_open(tablelamp_instance):
            achieve_once open(tablelamp_instance)
            exp(dvd_player,tablelamp_instance)
        else:
            exp(dvd_player,tablelamp_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tablelamp_instance]=True
        close[tablelamp_instance,dvd_player]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<rice: item>, Variable<pan: item>].
--------------------------------------------------------------------------------
Goal:  
def has_scrambled_eggs(pan: item):
    # Determine if there are scrambled eggs in the fryingpan
    symbol eggs_scrambled = exists eggs: item: is_food_egg(eggs) and inside(eggs, pan) and cut(eggs)
    return eggs_scrambled

behavior combine_and_fry(rice: item, pan: item):
    body:
        achieve inside(rice, pan)
        achieve is_on(stove_2065)

behavior ensure_eggs_scrambled(pan: item):
    body:
        if not has_scrambled_eggs(pan):
            observe(pan, "Check if the eggs are being scrambled")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and visited(fryingpan)
        
        ensure_eggs_scrambled(fryingpan)
        combine_and_fry(rice, fryingpan)

--------------------------------------------------------------------------------
Exploration: 
behavior find_dvd_player_2061_around_oven_295(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(dvd_player,oven_instance)
        else:
            exp(dvd_player,oven_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,oven_instance]=True
        close[oven_instance,dvd_player]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5843, column 9.
Expected one of: 
	* EQUAL
	* PERCENT
	* STAR
	* __ANON_5
	* FLOORDIV
	* SLASH
	* GREATER_EQ
	* __ANON_1
	* __ANON_8
	* COMMA
	* __ANON_3
	* MINUS
	* PLUS
	* __ANON_0
	* CIRCUMFLEX
	* NOT_EQ
	* LESSTHAN
	* RSHIFT
	* AT
	* SEMICOLON
	* __ANON_2
	* __ANON_4
	* AMPERSAND
	* AND
	* LSHIFT
	* IF
	* MORETHAN
	* OR
	* __ANON_6
	* LESS_EQ
	* __ANON_7
	* VBAR
	* DOUBLE_EQUAL
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def check_scrambled(eggs: item):
    # Function to check if the eggs have been scrambled
    observe(eggs, "Check if the eggs are being scrambled")
    
def scramble_eggs(fryingpan: item, stove: item):
    # Behavior to scramble the eggs
    body:
        achieve inside(fryingpan, stove)
        # Ensure the frying pan is in the stove
        achieve is_on(stove)
        # Ensure the stove is on
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan)
        check_scrambled(eggs)
        # Check if the eggs have been scrambled If not, scramble them

behavior combine_and_fry(rice: item, fryingpan: item, stove: item):
    body:
        achieve inside(rice, fryingpan)
        # Ensure the rice is inside the frying pan
        scramble_eggs(fryingpan, stove)
        # Ensure the eggs are scrambled if not already
        achieve inside(fryingpan, stove)
        # Ensure the frying pan is back on the stove
        achieve is_on(stove)
        # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the cooked rice
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        bind stove: item where:
            is_stove(stove)
        # Select the stove
       
        combine_and_fry(rice, fryingpan, stove)


--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2080_around_pot_2069(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(fork,pot_instance)
        else:
            exp(fork,pot_instance)
    eff:
        unknown[fork]=False
        close[fork,pot_instance]=True
        close[pot_instance,fork]=True
    

behavior find_dvd_player_2061_around_television_248(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==248
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(dvd_player,television_instance)
        else:
            exp(dvd_player,television_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,television_instance]=True
        close[television_instance,dvd_player]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
def check_scrambled(eggs: item):
    # Function to check if the eggs have been scrambled
    observe(eggs, "Check if the eggs are being scrambled")

behavior scramble_eggs(fryingpan: item, stove: item):
    body:
        achieve inside(fryingpan, stove)
        # Ensure the frying pan is in the stove
        achieve is_on(stove)
        # Ensure the stove is on
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan)
        check_scrambled(eggs)
        # Check if the eggs have been scrambled If not, scramble them by additional actions (not explicitly defined here)

behavior combine_and_fry(rice: item, fryingpan: item, stove: item):
    body:
        achieve inside(rice, fryingpan)
        # Ensure the rice is inside the frying pan
        scramble_eggs(fryingpan, stove)
        # Ensure the eggs are scrambled if not already
        achieve inside(fryingpan, stove)
        # Ensure the frying pan is back on the stove
        achieve is_on(stove)
        # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the cooked rice
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        combine_and_fry(rice, fryingpan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_103_around_table_107(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: iron; available variables: [Variable<clothes: item>, Variable<ironing_board: item>].
--------------------------------------------------------------------------------
Goal:  
behavior heat_iron(iron:item):
    body:
        achieve is_on(iron)
        # Ensure the iron is turned on and heated

behavior iron_clothes(clothes:item, ironing_board:item):
    body:
        achieve on(clothes, ironing_board)
        # Ensure clothes are on the ironing board
        assert is_on(iron)
        # Iron the clothes

behavior __goal__():
    body:
        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt) and id[clothes_skirt]==2088
        # Select the skirt with ID 2088

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind iron: item where:
            is_iron(iron) and id[iron]==2089
        # Select the iron with ID 2089

        heat_iron(iron)
        # Heat the iron

        iron_clothes(clothes_skirt, ironing_board)
        # Iron the clothes

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_hat_2045_around_hanger_142(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==142
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_hat,hanger_instance)
        else:
            exp(clothes_hat,hanger_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,hanger_instance]=True
        close[hanger_instance,clothes_hat]=True
    

behavior find_clothes_gloves_2046_around_washing_machine_2007(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_gloves,washing_machine_instance)
        else:
            exp(clothes_gloves,washing_machine_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,washing_machine_instance]=True
        close[washing_machine_instance,clothes_gloves]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Unknown variable: iron; available variables: [].
--------------------------------------------------------------------------------
Goal:  
def is_ironing_set_up():
    # Determine if the iron is set up and the skirt is on the ironing board
    symbol iron_ready = is_on(iron) and plugged(iron)
    symbol skirt_on_board = on(clothes_skirt, ironing_board)
    return iron_ready and skirt_on_board

behavior iron_skirt(clothes_skirt:item, ironing_board:item, iron:item):
    body:
        achieve clean(clothes_skirt)
        # The skirt needs to be ironed, assuming ironing makes it clean

behavior __goal__():
    body:
        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt) and id[clothes_skirt]==2088
        # Select the skirt with the specific ID

        bind iron: item where:
            is_iron(iron) and id[iron]==2089
        # Select the iron with the specific ID

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with the specific ID

        if is_ironing_set_up():
            iron_skirt(clothes_skirt, ironing_board, iron)

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_hat_2045_around_hanger_136(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==136
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_hat,hanger_instance)
        else:
            exp(clothes_hat,hanger_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,hanger_instance]=True
        close[hanger_instance,clothes_hat]=True
    

behavior find_towel_2057_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: ironing_board_2074; available variables: [Variable<skirt: item>].
--------------------------------------------------------------------------------
Goal:  
behavior iron_skirt(skirt:item, iron:item):
    body:
        achieve_once inhand(iron)
        achieve clean(skirt)
        # Ensure the skirt is clean after ironing

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Select the iron which is plugged in and turned on

        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, ironing_board_2074)
        # Select the skirt that is placed on the ironing board

        iron_skirt(skirt, iron)
        # Execute the behavior to iron the skirt

--------------------------------------------------------------------------------
Exploration: 
behavior find_cleaning_solution_2073_around_washing_machine_2007(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: board; available variables: [Variable<skirt: item>].
--------------------------------------------------------------------------------
Goal:  
behavior iron_skirt(skirt:item, iron:item, board:item):
    body:
        achieve_once inhand(iron)
        achieve clean(skirt)
        # Ensure the skirt is clean after ironing

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Select the iron which is plugged in and turned on

        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, board)
        # Select the skirt that is placed on the ironing board

        bind board: item where:
            is_ironing_board(board) and id[board]==2074
        # Bind the ironing board with ID 2074
        
        iron_skirt(skirt, iron, board)
        # Execute the behavior to iron the skirt

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_dress_2044_around_hanger_114(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==114
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_dress,hanger_instance)
        else:
            exp(clothes_dress,hanger_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,hanger_instance]=True
        close[hanger_instance,clothes_dress]=True
    

behavior find_clothes_hat_2045_around_hanger_109(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==109
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_hat,hanger_instance)
        else:
            exp(clothes_hat,hanger_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,hanger_instance]=True
        close[hanger_instance,clothes_hat]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_384(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: ironing_board; available variables: [Variable<skirt: item>, Variable<iron: item>].
--------------------------------------------------------------------------------
Goal:  
behavior iron_skirt(skirt:item, iron:item):
    body:
        achieve on(skirt, ironing_board)
        # Place the skirt on the ironing board
        achieve is_on(iron)
        # Ensure the iron is turned on
        assert is_clothes(skirt)
        # Confirm that the skirt is a clothing item

        # If the skirt is not smooth, proceed to iron
        observe(skirt, "Is the skirt fully smooth")
        achieve clean(skirt)
        # Ensure the skirt is clean and ironed

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, ironing_board_2074)
        # Select the skirt on the ironing board

        bind iron: item where:
            is_iron(iron) and is_on(iron) and close(iron, ironing_board_2074)
        # Select the iron close to the ironing board and ensure it is turned on

        iron_skirt(skirt, iron)

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_underwear_2049_around_closetdrawer_154(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: ironing_board_2074; available variables: [Variable<skirt: item>].
--------------------------------------------------------------------------------
Goal:  
behavior iron_skirt(skirt:item, iron:item, ironing_board:item):
    body:
        achieve on(skirt, ironing_board)
        # Place the skirt on the ironing board
        achieve is_on(iron)
        # Ensure the iron is turned on
        assert is_clothes(skirt)
        # Confirm that the skirt is a clothing item

        # If the skirt is not smooth, proceed to iron
        observe(skirt, "Is the skirt fully smooth")
        achieve clean(skirt)
        # Ensure the skirt is clean and ironed

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, ironing_board_2074)
        # Select the skirt on the ironing board

        bind iron: item where:
            is_iron(iron) and is_on(iron) and close(iron, ironing_board_2074)
        # Select the iron close to the ironing board and ensure it is turned on

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        iron_skirt(skirt, iron, ironing_board)

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_underwear_2049_around_closetdrawer_116(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'is_on') at line 5998, column 17.
Expected one of: 
	* SEMICOLON
	* __ANON_1
	* __ANON_5
	* IF
	* DOUBLE_EQUAL
	* LESSTHAN
	* __ANON_3
	* SLASH
	* PLUS
	* VBAR
	* EQUAL
	* AND
	* PERCENT
	* __ANON_2
	* __ANON_6
	* CIRCUMFLEX
	* OR
	* MORETHAN
	* LESS_EQ
	* RSHIFT
	* _NEWLINE
	* COMMA
	* NOT_EQ
	* __ANON_0
	* __ANON_7
	* AMPERSAND
	* __ANON_4
	* FLOORDIV
	* AT
	* GREATER_EQ
	* MINUS
	* STAR
	* LSHIFT
	* __ANON_8

--------------------------------------------------------------------------------
Goal:  
behavior iron_skirt(skirt:item, iron:item, ironing_board:item):
    body:
        achieve is_on(iron)
        # Ensure the iron is turned on

        achieve on(skirt, ironing_board)
        # Ensure the skirt is on the ironing board

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        
        bind iron: item where:
            is_iron(iron)
            and is_on(iron)
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
            and on(skirt, ironing_board)

        iron_skirt(skirt, iron, ironing_board)

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_underwear_2049_around_closetdrawer_116(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function off not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior prepare_hot_milk_and_place_on_table(milk: item, tabletop: item):
    body:
        achieve clean(milk)
        # Ensure the milk is clean

        achieve close_char(char, milk)
        # Character is close to milk for heating

        achieve is_on(milk)
        # Heat the milk

        achieve off(char)
        # Ensure character has control to turn off heating appliance

        achieve on(milk, tabletop)
        # Place the cup of hot milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table
        
        prepare_hot_milk_and_place_on_table(milk, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior heat_milk(milk:item, stove:item, cup:item):
    body:
        achieve plugged(stove) # Ensure the stove is plugged in
        achieve is_on(stove) # Turn on the stove
        achieve has_water(cup) # Add water to the cup for heating milk purpose
        
behavior put_on_table(item:item, table:item):
    body:
        achieve on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind table: item where:
            is_coffee_table(table) and inside(table, home_office)
        # Select the coffee table in the home office

        heat_milk(milk, stove, cup) # Heat the milk on the stove using the cup
        put_on_table(cup, table) # Put the cup of hot milk on the coffee table

--------------------------------------------------------------------------------
Exploration: 
behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'home_office') at line 5743, column 47.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

--------------------------------------------------------------------------------
Goal:  
behavior heat_milk(milk:item, stove:item, cup:item):
    body:
        achieve plugged(stove) # Ensure the stove is plugged in
        achieve is_on(stove) # Turn on the stove
        achieve has_water(cup) # Add water to the cup for heating milk purpose

behavior put_on_table(item:item, table:item):
    body:
        achieve on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind table: item where:
            is_coffee_table(table) and exists home_office: item : is_home_office(home_office) and inside(table, home_office)
        # Select the coffee table in the home office

        heat_milk(milk, stove, cup) # Heat the milk on the stove using the cup
        put_on_table(cup, table) # Put the cup of hot milk on the coffee table

--------------------------------------------------------------------------------
Exploration: 
behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable egg already exists.
--------------------------------------------------------------------------------
Goal:  
def on_fryingpan(egg: item, fryingpan: item):
    # Function to check if the egg is on the frying pan
    symbol egg_on_fryingpan=exists egg: item : is_food_egg(egg) and on(egg, fryingpan)
    return egg_on_fryingpan

def is_on_stove(fryingpan: item, stove: item):
    # Function to check if the frying pan is on the stove
    symbol fryingpan_on_stove=exists stove: item : is_stove(stove) and on(fryingpan, stove)
    return fryingpan_on_stove

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg as the item to scramble
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not on_fryingpan(egg, fryingpan):
            # Check if the egg is not yet on the frying pan
            achieve on(egg, fryingpan)
            # Achieve the state of having the egg on the frying pan

        if not is_on_stove(fryingpan, stove):
            # Check if the frying pan is not yet on the stove
            achieve on(fryingpan, stove)
            # Achieve the state of having the frying pan on the stove

        achieve is_on(stove)
        # Ensure the stove is turned on to cook the egg

--------------------------------------------------------------------------------
Exploration: 
behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2083_around_cupboard_229(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<sink: item>].
--------------------------------------------------------------------------------
Goal:  
def has_faucet(sink:item):
    # Determine if the sink has a faucet
    symbol has_faucet=exists faucet:item : is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior wash_cat_in_sink(cat:item, sink:item):
    body:
        achieve_once inside(cat, sink)
        # Ensure the cat is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the cat

        wash(cat) # Wash the cat
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing the cat

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        if exists sink: item : is_sink(sink) and has_faucet(sink):
            # If a sink with a faucet is known
            bind sink: item where:
                is_sink(sink) and has_faucet(sink)
            wash_cat_in_sink(cat, sink)
        else:
            # Explore to find a suitable sink
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink,"Check if it has a faucet suitable for washing the cat")
                    if has_faucet(sink):
                        wash_cat_in_sink(cat, sink)
                        break

--------------------------------------------------------------------------------
Exploration: 
behavior find_cat_2055_around_sink_42(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cat,sink_instance)
        else:
            exp(cat,sink_instance)
    eff:
        unknown[cat]=False
        close[cat,sink_instance]=True
        close[sink_instance,cat]=True
    

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2084_around_cupboard_229(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(detergent,cupboard_instance)
        else:
            exp(detergent,cupboard_instance)
    eff:
        unknown[detergent]=False
        close[detergent,cupboard_instance]=True
        close[cupboard_instance,detergent]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<sink: item>].
--------------------------------------------------------------------------------
Goal:  
def has_faucet(sink:item):
    # Determine if the sink has a faucet
    symbol has_faucet=exists faucet:item : is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior wash_cat_in_sink(cat:item, sink:item):
    body:
        achieve_once inside(cat, sink)
        # Ensure the cat is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the cat

        wash(cat) # Wash the cat
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing the cat

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        if exists sink: item : is_sink(sink) and has_faucet(sink):
            # If a sink with a faucet is known
            bind sink: item where:
                is_sink(sink) and has_faucet(sink)
            wash_cat_in_sink(cat, sink)
        else:
            # Explore to find a suitable sink
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink,"Check if it has a faucet suitable for washing the cat")
                    if has_faucet(sink):
                        wash_cat_in_sink(cat, sink)
                        break

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_towel_2056_around_bathroom_cabinet_40(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function has_faucet not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior move_cat_to_sink(cat:item, sink:item):
    body:
        achieve close(cat, sink)
        # Bring the cat close to the sink

behavior wash_cat(cat:item, sink:item):
    body:
        achieve_once inside(cat, sink)
        # Place the cat inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet if the sink has one

        wash(cat)
        # Wash the cat

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

def has_faucet(sink:item):
    # Determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        bind sink: item where:
            is_sink(sink)
        # Select the cat and the sink

        move_cat_to_sink(cat, sink)
        wash_cat(cat, sink)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<bowl: item>, Variable<faucet: item>].
--------------------------------------------------------------------------------
Goal:  
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve inside(bowl, home_office) # Ensure the bowl is in the home office before filling it
        achieve_once is_on(faucet) # Turn on the faucet to fill the bowl with water
        achieve has_water(bowl) # The bowl should have water in it
        achieve_once is_off(faucet) # Turn off the faucet after filling the bowl
        achieve on(bowl, table) # Place the bowl with water on the table in the home office

def in_home_office(bowl:item):
    # Function to check if a bowl is in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(bowl, room)
    return in_home_office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        bind faucet: item where:
            is_faucet(faucet)
        bind table: item where:
            is_table(table) and in_home_office(table)
        if not in_home_office(bowl):
            achieve inside(bowl, home_office)
        # Ensure the bowl is inside the home office
        fill_bowl_with_water(bowl, faucet)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_lemon_2028_around_cupboard_229(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_lemon,cupboard_instance)
        else:
            exp(food_lemon,cupboard_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,cupboard_instance]=True
        close[cupboard_instance,food_lemon]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_bowl_with_water_on_table(bowl: item, table: item):
    body:
        achieve has_water(bowl)
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and grabbable(bowl)
        # Select a grabbable bowl
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_bowl_with_water_on_table(bowl, table)
        # Fill the bowl with water and place it on the specified table

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_bowl_with_water_on_table(bowl: item, table: item):
    body:
        achieve has_water(bowl)
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and grabbable(bowl)
        # Select a grabbable bowl
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        place_bowl_with_water_on_table(bowl, table)
        # Fill the bowl with water and place it on the specified table

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function has_faucet not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
def has_water_in_pot(pot:item):
    # Determine if the pot has water
    symbol has_water=has_water(pot)
    return has_water

def is_pot_on_stove(pot: item, stove: item):
    # Determine if the pot is on the stove
    symbol pot_on_stove=on(pot, stove)
    return pot_on_stove

behavior fill_pot_with_water(sink:item, pot:item):
    body:
        achieve_once inside(pot, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the pot
        
        # Assume the action required to fill the pot with water is encompassed by the general task
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior start_boiling_pot(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Bind to a pot
        bind stove: item where:
            is_stove(stove)
        # Bind to a stove
        if not has_water_in_pot(pot):
            bind sink: item where:
                is_sink(sink)
            # Bind to a sink
            fill_pot_with_water(sink, pot)
        if not is_pot_on_stove(pot, stove):
            place_pot_on_stove(pot, stove)
        start_boiling_pot(stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal: 
behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        # Select the pot on the stove
        assert_hold has_water(pot)
        # The pot must have water
        achieve inside(rice, pot)
        # Ensure rice is inside the pot

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_rice_2036_around_cutting_board_2051(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_rice,cutting_board_instance)
        else:
            exp(food_rice,cutting_board_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cutting_board_instance]=True
        close[cutting_board_instance,food_rice]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot on the stove
        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        # Select the stove with a switch
        assert_hold has_water(pot)
        # The pot must have water
        achieve inside(rice, pot)
        # Ensure rice is inside the pot

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: sink_231; available variables: [Variable<cat: item>].
--------------------------------------------------------------------------------
Goal: behavior dry_cat_with_towel(cat:item, towel:item):
    body:
        achieve inside(cat, towel)
        # The towel should cover the cat

        achieve clean(cat)
        # Ensure the cat is dry and clean after using the towel

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and inside(cat, sink_231)
        # The cat, identified as cat_2055, is inside sink_231, ready for drying

        bind towel: item where:
            is_towel(towel)
        # Seeks a towel for drying the cat

        achieve_once inhand(towel)
        # Obtain the towel for usage

        dry_cat_with_towel(cat, towel)
        # Dry the cat with the obtained towel
--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2056_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: sink_231; available variables: [Variable<cat: item>].
--------------------------------------------------------------------------------
Goal:  
behavior dry_cat_with_towel(cat:item, towel:item):
    body:
        achieve inside(cat, towel)
        # The towel should cover the cat

        achieve clean(cat)
        # Ensure the cat is dry and clean after using the towel

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and inside(cat, sink_231)
        # The cat, identified as cat_2055, is inside sink_231, ready for drying

        bind towel: item where:
            is_towel(towel)
        # Seeks a towel for drying the cat

        achieve_once inhand(towel)
        # Obtain the towel for usage

        dry_cat_with_towel(cat, towel)
        # Dry the cat with the obtained towel

--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2057_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: sink_231; available variables: [Variable<cat: item>].
--------------------------------------------------------------------------------
Goal:  
behavior wipe_cat(cat: item, towel: item):
    body:
        achieve_once inhand(towel) # Use the towel to wipe the cat
        wipe(cat)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and inside(cat, sink_231)
        # Select the cat in the sink

        bind towel: item where:
            is_towel(towel) and close(towel, sink_231)
        # Select a towel close to the sink

        wipe_cat(cat, towel)

--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2056_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: sink_231; available variables: [Variable<cat: item>].
--------------------------------------------------------------------------------
Goal: 
def has_towel_nearby(cat:item):
    # Check if there is a towel nearby the cat
    symbol towel_nearby=exists towel: item : is_towel(towel) and close(towel, cat)
    return towel_nearby

behavior dry_cat_with_towel(cat:item, towel:item):
    body:
        achieve close(cat, towel)
        # Make sure the towel is close to the cat
        wipe(cat)
        # Dry the cat using the towel

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and inside(cat, sink_231)
        # Bind the cat inside the sink_231

        if has_towel_nearby(cat):
            bind towel: item where:
                is_towel(towel) and close(towel, cat)
            # If towel is nearby, use it to dry the cat
            dry_cat_with_towel(cat, towel)
        
        else:
            # If no towel is nearby, observe the scene to locate a towel
            foreach obj: item:
                if is_towel(obj) and not visited(obj):
                    observe(obj,"Determine if this towel can be used to dry the cat")

--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2058_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: sink_231; available variables: [Variable<cat: item>].
--------------------------------------------------------------------------------
Goal:  
behavior dry_cat_with_towel(cat: item, towel: item):
    body:
        achieve close(cat, towel) # Ensure the cat is close to the towel for effective drying
        achieve_once inhand(towel) # Temporarily hold the towel to dry the cat
        wipe(cat) # Dry the cat using the towel

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and close(cat, sink_231)
        # Select the cat close to sink_231

        bind towel: item where:
            is_towel(towel) and (id[towel] == 2056 or id[towel] == 2057 or id[towel] == 2058 or id[towel] == 2059)
        # Select a clean towel with one of the specified IDs
        
        dry_cat_with_towel(cat, towel)
        # Dry the cat using the identified towel

--------------------------------------------------------------------------------
Exploration: 
behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_pillow_406_around_pillow_406(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind pillow_instance:item where:
            is_pillow(pillow_instance) and id[pillow_instance]==406
        achieve close_char(char,pillow_instance)
        if can_open(pillow_instance):
            achieve_once open(pillow_instance)
            exp(pillow,pillow_instance)
        else:
            exp(pillow,pillow_instance)
    eff:
        unknown[pillow]=False
        close[pillow,pillow_instance]=True
        close[pillow_instance,pillow]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Error during applying on[observation, state](x: item, y: item).
  Arguments: V::towel, has_water(V::towel)
Argument #1 type does not match: expect item, got bool.
--------------------------------------------------------------------------------
Goal:  
behavior dry_cat(cat:item, towel:item):
    body:
        assert is_cat(cat) # Ensure the item is a cat
        assert is_towel(towel) # Ensure the item is a towel
        achieve clean(cat) # Dry the cat with the towel
        achieve on(towel, has_water(towel)) # Ensure the towel absorbs water

behavior __goal__():
    body:
        bind towel: item where:
            is_towel(towel) and id[towel] == 2056 or id[towel] == 2057 or id[towel] == 2058 or id[towel] == 2059
        # Bind a clean towel
        
        bind cat: item where:
            is_cat(cat) and id[cat]==2055
        # Bind the cat

        dry_cat(cat, towel)
        # Invoke the behavior to dry the cat using the towel

--------------------------------------------------------------------------------
Exploration: 
behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_pillow_405_around_pillow_405(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind pillow_instance:item where:
            is_pillow(pillow_instance) and id[pillow_instance]==405
        achieve close_char(char,pillow_instance)
        if can_open(pillow_instance):
            achieve_once open(pillow_instance)
            exp(pillow,pillow_instance)
        else:
            exp(pillow,pillow_instance)
    eff:
        unknown[pillow]=False
        close[pillow,pillow_instance]=True
        close[pillow_instance,pillow]=True
    

################################################################################

Error: Unexpected token Token('_NEWLINE', '\n            ') at line 5930, column 37.
Expected one of: 
	* DO
	* STRING
	* DEC_NUMBER
	* FORALL
	* VARNAME
	* FALSE
	* FINDONE
	* EXISTS
	* HEX_NUMBER
	* PLUS
	* ELLIPSIS
	* OCT_NUMBER
	* NOT
	* TRUE
	* LONG_STRING
	* TILDE
	* COLON
	* FLOAT_NUMBER
	* FINDALL
	* IMAG_NUMBER
	* BIN_NUMBER
	* MINUS
	* NONE
	* LPAR
	* LSQB

--------------------------------------------------------------------------------
Goal:  
behavior dry_cat(cat:item, towel:item):
    body:
        achieve close_char(char, cat)
        # Ensure the character is close to the cat
        achieve_once inhand(towel)
        # Temporarily hold the towel in hand to dry the cat
        wipe(cat)
        # Use the towel to dry the cat

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and on(cat, sink_231)
        # Select cat that is on the sink

        if exists towel: item where:
            is_towel(towel) and id[towel]==2056:
            bind towel: item where:
                is_towel(towel) and id[towel]==2056
        elif exists towel: item where:
            is_towel(towel) and id[towel]==2057:
            bind towel: item where:
                is_towel(towel) and id[towel]==2057
        elif exists towel: item where:
            is_towel(towel) and id[towel]==2058:
            bind towel: item where:
                is_towel(towel) and id[towel]==2058
        else:
            bind towel: item where:
                is_towel(towel) and id[towel]==2059
        # Select a clean towel from the available options
        
        dry_cat(cat, towel)
        # Perform the behavior to dry the cat with the selected towel

--------------------------------------------------------------------------------
Exploration: 
behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

################################################################################

Error: Unexpected token Token('_NEWLINE', '\n            ') at line 5948, column 37.
Expected one of: 
	* DO
	* STRING
	* DEC_NUMBER
	* FORALL
	* VARNAME
	* FALSE
	* FINDONE
	* EXISTS
	* HEX_NUMBER
	* PLUS
	* ELLIPSIS
	* OCT_NUMBER
	* NOT
	* TRUE
	* LONG_STRING
	* TILDE
	* COLON
	* FLOAT_NUMBER
	* FINDALL
	* IMAG_NUMBER
	* BIN_NUMBER
	* MINUS
	* NONE
	* LPAR
	* LSQB

--------------------------------------------------------------------------------
Goal:  
behavior dry_cat(cat:item, towel:item):
    body:
        achieve close_char(char, cat)
        # Ensure the character is close to the cat
        achieve_once inhand(towel)
        # Temporarily hold the towel in hand to dry the cat
        wipe(cat)
        # Use the towel to dry the cat

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and on(cat, sink_231)
        # Select cat that is on the sink

        if exists towel: item where:
            is_towel(towel) and id[towel]==2056:
            bind towel: item where:
                is_towel(towel) and id[towel]==2056
        elif exists towel: item where:
            is_towel(towel) and id[towel]==2057:
            bind towel: item where:
                is_towel(towel) and id[towel]==2057
        elif exists towel: item where:
            is_towel(towel) and id[towel]==2058:
            bind towel: item where:
                is_towel(towel) and id[towel]==2058
        else:
            bind towel: item where:
                is_towel(towel) and id[towel]==2059
        # Select a clean towel from the available options
        
        dry_cat(cat, towel)
        # Perform the behavior to dry the cat with the selected towel

--------------------------------------------------------------------------------
Exploration: 
behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_mat_236_around_cupboard_229(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(mat,cupboard_instance)
        else:
            exp(mat,cupboard_instance)
    eff:
        unknown[mat]=False
        close[mat,cupboard_instance]=True
        close[cupboard_instance,mat]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function on_cat not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
def is_clean_towel(towel: item):
    symbol clean_towel = not dirty(towel)
    return clean_towel

behavior dry_cat(cat: item, towel: item):
    body:
        achieve_once inhand(towel)
        # Ensure the towel is held once

        achieve on_cat(char, cat)
        wipe(cat)
        # Dry the cat using the towel

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and close(char, cat)
        # Select the cat close to the character

        bind towel: item where:
            is_towel(towel) and is_clean_towel(towel)
        # Choose a clean towel

        dry_cat(cat, towel)

--------------------------------------------------------------------------------
Exploration: 
behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Error during applying on[observation, state](x: item, y: item).
  Arguments: O::char, V::cat
Argument #0 type does not match: expect item, got character.
--------------------------------------------------------------------------------
Goal:  
def is_clean_towel(towel: item):
    symbol clean_towel = not dirty(towel)
    return clean_towel

behavior dry_cat(cat: item, towel: item):
    body:
        achieve_once inhand(towel)
        # Ensure the towel is held once

        achieve on(char, cat)
        wipe(cat)
        # Dry the cat using the towel

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and close_char(char, cat)
        # Select the cat close to the character

        bind towel: item where:
            is_towel(towel) and is_clean_towel(towel)
        # Choose a clean towel

        dry_cat(cat, towel)

--------------------------------------------------------------------------------
Exploration: 
behavior find_mat_237_around_cupboard_229(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(mat,cupboard_instance)
        else:
            exp(mat,cupboard_instance)
    eff:
        unknown[mat]=False
        close[mat,cupboard_instance]=True
        close[cupboard_instance,mat]=True
    

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: sink_231; available variables: [Variable<cat: item>].
--------------------------------------------------------------------------------
Goal:  
behavior dry_cat_with_towel(cat:item, towel:item):
    body:
        achieve inside(cat, towel)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and inside(cat, sink_231) # The cat should be determined based on it being already in the sink_231
        
        bind towel: item where:
            (id[towel] == 2056 or id[towel] == 2057 or id[towel] == 2058 or id[towel] == 2059) and is_towel(towel) and clean(towel)  # Selecting one of the clean towels to dry the cat
        
        dry_cat_with_towel(cat, towel)  # Use the selected towel to dry the cat

--------------------------------------------------------------------------------
Exploration: 
behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_mat_22_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        if exists table: item : is_table(table) and inside(table, dining_room):
            # Check if there is a table inside the dining room
            bind table: item where:
                is_table(table) and inside(table, dining_room)
            # Select a table within the dining room
            achieve visited(table)
            # Observe and mark the table as visited
        
        else:
            # If no table has been identified, search the scene for an unvisited table in the dining room
            foreach table: item:
                if is_table(table) and not visited(table) and inside(table, dining_room):
                    observe(table, "Check if this is a table in the dining room")
                    # Observe if the table is located within the dining room

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "function_definition":

Variable skirt already exists.
--------------------------------------------------------------------------------
Goal:  
def is_skirt_clothes_on_board(skirt:item, ironing_board:item):
    # Function to check if the skirt is on the ironing board for ironing
    symbol on_board=exists skirt: item : is_clothes_skirt(skirt) and on(skirt, ironing_board)
    return on_board

behavior prepare_iron(iron:item):
    body:
        achieve plugged(iron)
        # Plug in the iron

behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)
        # Turn on the iron

behavior iron_skirt(skirt:item, ironing_board:item, iron:item):
    body:
        achieve on(skirt, ironing_board)
        # Ensure skirt is on the ironing board
        achieve_once inhand(iron)
        # Hold the iron for ironing the skirt

behavior turn_off_iron(iron:item):
    body:
        achieve is_off(iron)

behavior unplug_iron(iron:item):
    body:
        achieve unplugged(iron)

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select a skirt to iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        observe(ironing_board, "Check if there is a skirt on it for ironing")

        if exists skirt: item : is_clothes_skirt(skirt) and is_skirt_clothes_on_board(skirt, ironing_board):
            prepare_iron(iron)
            turn_on_iron(iron)
            iron_skirt(skirt, ironing_board, iron)
            turn_off_iron(iron)
            unplug_iron(iron)

        else:
            # If no skirt is on the board, prepare to rectify the situation
            observe(skirt, "Ensure skirt is placed on the ironing board for ironing")

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_skirt_2088_around_dresser_358(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_skirt,dresser_instance)
        else:
            exp(clothes_skirt,dresser_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,dresser_instance]=True
        close[dresser_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: {'self': <concepts.dm.crow.executors.crow_executor.CrowExecutionCSPVisitor object at 0x7ff7422666a0>, 'rv': Value[bool, axes=[], tdtype=torch.int64, tdshape=(), quantized]{tensor(0)}, 'function_argument_variables': (Variable<skirt: item>, Variable<ironing_board: item>), 'outer_arguments': (VariableExpression<V::_t1>, VariableExpression<V::ironing_board>), 'argument_values': (slice(None, None, None), StateObjectReference(name='ironing_board_2074', index=74, dtype=ObjectType<item>)), 'output_batch_variables': [], 'function_argument_variable': Variable<skirt: item>, 'outer_argument_expr': VariableExpression<V::_t1>, 'argument_value': slice(None, None, None)}
--------------------------------------------------------------------------------
Goal:  
def is_skirt_clothes_on_board(skirt:item, ironing_board:item):
    # Function to check if the skirt is on the ironing board for ironing
    symbol on_board=exists s: item : is_clothes_skirt(s) and on(s, ironing_board)
    return on_board

behavior prepare_iron(iron:item):
    body:
        achieve plugged(iron)
        # Plug in the iron

behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)
        # Turn on the iron

behavior iron_skirt(skirt:item, ironing_board:item, iron:item):
    body:
        achieve on(skirt, ironing_board)
        # Ensure skirt is on the ironing board
        achieve_once inhand(iron)
        # Hold the iron for ironing the skirt

behavior turn_off_iron(iron:item):
    body:
        achieve is_off(iron)

behavior unplug_iron(iron:item):
    body:
        achieve unplugged(iron)

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select a skirt to iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        observe(ironing_board, "Check if there is a skirt on it for ironing")

        if exists skirt: item : is_clothes_skirt(skirt) and is_skirt_clothes_on_board(skirt, ironing_board):
            prepare_iron(iron)
            turn_on_iron(iron)
            iron_skirt(skirt, ironing_board, iron)
            turn_off_iron(iron)
            unplug_iron(iron)

        else:
            # If no skirt is on the board, prepare to rectify the situation
            observe(skirt, "Ensure skirt is placed on the ironing board for ironing")

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_skirt_2088_around_dresser_358(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_skirt,dresser_instance)
        else:
            exp(clothes_skirt,dresser_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,dresser_instance]=True
        close[dresser_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Error during applying close[observation, state](x: item, y: item).
  Arguments: O::char, V::skirt
Argument #0 type does not match: expect item, got character.
--------------------------------------------------------------------------------
Goal:  
def has_ironing_board_with_skirt(ironing_board:item):
    # Function to check if there is a skirt on a specified ironing board
    symbol has_skirt_on_board=exists o: item : is_clothes_skirt(o) and on(o, ironing_board)
    return has_skirt_on_board

behavior iron_skirt(skirt:item, iron:item):
    body:
        achieve close(char, skirt)
        # Ensure the character is close to the skirt
        achieve on(skirt, is_ironing_board)  # Ensure the skirt is on the ironing board
        achieve plugged(iron)  # Ensure the iron is plugged in
        achieve is_on(iron)  # Ensure the iron is turned on
        achieve clean(skirt)  # Ensure the skirt is ironed (clean state)

behavior __goal__():
    body:
        if exists ironing_board: item : is_ironing_board(ironing_board) and has_ironing_board_with_skirt(ironing_board):
            # If the ironing board with a skirt already exists, approach it
            bind ironing_board: item where:
                is_ironing_board(ironing_board) and has_ironing_board_with_skirt(ironing_board)
            # Select the skirt on the ironing board
            bind skirt: item where:
                is_clothes_skirt(skirt) and on(skirt, ironing_board)
            # Select an iron
            bind iron: item where:
                is_iron(iron)
            iron_skirt(skirt, iron)  # Iron the skirt
        else:
            # If no ironing board with a skirt is found, search for one
            foreach ironing_board: item:
                if is_ironing_board(ironing_board) and not visited(ironing_board):
                    observe(ironing_board, "Check if there is a skirt on the ironing board")

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_skirt_2088_around_dresser_358(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_skirt,dresser_instance)
        else:
            exp(clothes_skirt,dresser_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,dresser_instance]=True
        close[dresser_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: is_ironing_board; available variables: [Variable<skirt: item>, Variable<iron: item>].
--------------------------------------------------------------------------------
Goal:  
def has_ironing_board_with_skirt(ironing_board:item):
    # Function to check if there is a skirt on a specified ironing board
    symbol has_skirt_on_board=exists o: item : is_clothes_skirt(o) and on(o, ironing_board)
    return has_skirt_on_board

behavior iron_skirt(skirt:item, iron:item):
    body:
        achieve close_char(char, skirt)
        # Ensure the character is close to the skirt
        achieve on(skirt, is_ironing_board)  # Ensure the skirt is on the ironing board
        achieve plugged(iron)  # Ensure the iron is plugged in
        achieve is_on(iron)  # Ensure the iron is turned on
        achieve clean(skirt)  # Ensure the skirt is ironed (clean state)

behavior __goal__():
    body:
        if exists ironing_board: item : is_ironing_board(ironing_board) and has_ironing_board_with_skirt(ironing_board):
            # If the ironing board with a skirt already exists, approach it
            bind ironing_board: item where:
                is_ironing_board(ironing_board) and has_ironing_board_with_skirt(ironing_board)
            # Select the skirt on the ironing board
            bind skirt: item where:
                is_clothes_skirt(skirt) and on(skirt, ironing_board)
            # Select an iron
            bind iron: item where:
                is_iron(iron)
            iron_skirt(skirt, iron)  # Iron the skirt
        else:
            # If no ironing board with a skirt is found, search for one
            foreach ironing_board: item:
                if is_ironing_board(ironing_board) and not visited(ironing_board):
                    observe(ironing_board, "Check if there is a skirt on the ironing board")

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_skirt_2088_around_dresser_358(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_skirt,dresser_instance)
        else:
            exp(clothes_skirt,dresser_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,dresser_instance]=True
        close[dresser_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal:  
def is_suitable_pot(pot:item):
    # Function to check if an item is a suitable pot for boiling the vegetables
    symbol suitable_pot = is_pot(pot) and is_stove(stove) and on(pot, stove)
    return suitable_pot

def has_vegetables(pot:item):
    # Function to check if the pot has vegetables inside
    symbol has_vegetables_inside = exists v: item : is_food_vegetable(v) and inside(v, pot)
    return has_vegetables_inside

behavior boil_vegetables(pot:item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        assert has_vegetables(pot) # Check if the pot contains vegetables
        bind stove: item where:
            is_stove(stove) and on(pot, stove)
        achieve is_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and is_suitable_pot(pot) and has_vegetables(pot)
        boil_vegetables(pot) # Boil the vegetables in the suitable pot


--------------------------------------------------------------------------------
Exploration: 
behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_potato_2035_around_kitchen_counter_230(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function has_faucet not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior clean_food_food(food_food:item):
    # Define behavior to clean a fish
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink to clean the fish

        achieve close_char(char, sink)
        # Ensure the character is close to the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to clean

        wash(food_food)
        # Wash the fish

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # If the sink has a faucet, turn it off after cleaning

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item
        
        clean_food_food(fish)
        # Execute the cleaning behavior for the fish

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_food_2022_around_kitchen_counter_230(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_food_fish_2021_around_kitchen_counter_230(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function has_faucet not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior wash_fish(fish:item, sink:item):
    body:
        achieve_once inside(fish, sink)
        # Ensure the fish is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the pool has a faucet, turn it on to wash the fish

        wash(fish)
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # If the pool has a faucet, turn it off after washing

def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select fish
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        wash_fish(fish, sink)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_fish_2021_around_kitchen_counter_230(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function achieve_has_water not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior boil_egg(egg: item, pot: item, stove: item):
    body:
        achieve inside(egg, pot)
        # Place the egg inside the pot

        bind water_source: item where:
            is_faucet(water_source)
            # Ensure a water source (faucet) is available
       
        achieve_has_water(pot) # Fill the pot with water if it isnt already

        bind burner: item where:
            is_stove(burner) and close(burner, stove)
            # Ensure the burner is close to the stove

        achieve plugged(stove)
        # Ensure the stove is plugged in

        achieve is_on(burner)
        # Switch on the stove burner to heat the pot

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg for boiling

        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil the egg

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the egg

        boil_egg(egg, pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cleaning_solution_2073_around_kitchen_counter_230(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cleaning_solution,kitchen_counter_instance)
        else:
            exp(cleaning_solution,kitchen_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cleaning_solution]=True
    

behavior find_clothes_pants_2085_around_closetdrawer_121(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==121
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_pants,closetdrawer_instance)
        else:
            exp(clothes_pants,closetdrawer_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_pants]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

################################################################################

Error: Unexpected token Token('BEHAVIOR', 'behavior') at line 5730, column 9.
Expected one of: 
	* FINDALL
	* ACHIEVE_ONCE
	* FLOAT_NUMBER
	* _LLSQB
	* PACHIEVE_HOLD
	* PLUS
	* STAR
	* OCT_NUMBER
	* LET
	* SEQUENTIAL
	* LPAR
	* FORALL
	* ASSERT_ONCE
	* PREAMBLE
	* COLON
	* COMMIT
	* PASS
	* TRUE
	* PACHIEVE_ONCE
	* UNTRACK
	* IMAG_NUMBER
	* LONG_STRING
	* FOREACH
	* RETURN
	* ACHIEVE
	* LSQB
	* ELLIPSIS
	* NOT
	* VARNAME
	* _DEDENT
	* UNORDERED
	* DO
	* CRITICAL
	* ASSERT
	* ACHIEVE_HOLD
	* IF
	* ASSERT_HOLD
	* NONE
	* STRING
	* BIND
	* PROMOTABLE
	* WHILE
	* DEC_NUMBER
	* EXISTS
	* TILDE
	* PACHIEVE
	* BIN_NUMBER
	* ALTERNATIVE
	* MINUS
	* FINDONE
	* FALSE
	* HEX_NUMBER
	* SYMBOL

--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil the egg

        bind stove: item where:
            is_stove(stove)
        # Select a stove to use for boiling

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to be boiled

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board to cut the boiled egg

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to place the egg pieces

        behavior boil_egg(pot: item, stove: item, egg: item, cutting_board: item, bowl: item):
            body:
                achieve has_water(pot)
                # Ensure the pot is filled with water

                achieve on(pot, stove)
                # Place the pot on the stove

                achieve is_on(stove)
                # Turn on the stove to boil the water

                achieve inside(egg, pot)
                # Place the egg inside the pot to boil it

                achieve is_off(stove)
                # Turn off the stove after boiling

                achieve on(egg, cutting_board)
                # Place the boiled egg on the cutting board for cutting

                achieve cut(egg)
                # Cut the boiled egg into pieces

                achieve inside(egg, bowl)
                # Put the cut egg pieces into the bowl

boil_egg(pot, stove, egg, cutting_board, bowl)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_cutting_board_2051_around_cupboard_229(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cutting_board,cupboard_instance)
        else:
            exp(cutting_board,cupboard_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,cupboard_instance]=True
        close[cupboard_instance,cutting_board]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_knife_2050_around_cupboard_229(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>, Variable<egg: item>].
--------------------------------------------------------------------------------
Goal:  
behavior boil_egg(pot:item, egg:item):
    body:
        achieve inside(egg, pot)
        achieve has_water(pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg for boiling
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the egg
        
        boil_egg(pot, egg)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_napkin_2005_around_cupboard_229(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(napkin,cupboard_instance)
        else:
            exp(napkin,cupboard_instance)
    eff:
        unknown[napkin]=False
        close[napkin,cupboard_instance]=True
        close[cupboard_instance,napkin]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function ensure_skirt_on_board not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
def is_skirt_iron_ready(iron:item, skirt:item):
    # This function checks if the iron is ready to iron the skirt
    return plugged(iron) and is_on(iron) and close_char(char, skirt)

def is_skirt_on_ironing_board(skirt:item, ironing_board:item):
    # Function to check if the skirt is on the ironing board
    return on(skirt, ironing_board)

behavior iron_skirt(skirt:item, iron:item, ironing_board:item):
    body:
        if not plugged(iron):
            achieve plugged(iron)
        if not is_on(iron):
            achieve is_on(iron)
        if not is_skirt_iron_ready(iron, skirt):
            # Ensure iron is ready and close to the skirt
            achieve close_char(char, skirt)
        ensure_skirt_on_board(skirt, ironing_board)
        # At this point, both the iron is ready, and skirt is placed properly

behavior ensure_skirt_on_board(skirt:item, ironing_board:item):
    body:
        if not is_skirt_on_ironing_board(skirt, ironing_board):
            achieve on(skirt, ironing_board)
        # Ensure the skirt is on the ironing board

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        bind skirt: item where:
            is_clothes_skirt(skirt)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        
        iron_skirt(skirt, iron, ironing_board)

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_skirt_2088_around_closetdrawer_394(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'x') at line 5704, column 23.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def is_table_free(table:item):
    # Function to check if the table is free for use
    # Since there is no predefined state to directly check if a table is free, well assume an observation when necessary
    # If additional specifics were known, such as a unique state representing free, it would be leveraged here
    # This function is rather hypothetical due to lack of explicit free determinant
    return not exists x: item: (on(x, table))  # Assuming a table is free if there is nothing on it

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 226
        # Select table with ID 226 for now

        if is_table_free(table):
            achieve close_char(char, table)
            # Move closer to the table only if confirmed free for use
        
        else:
            # If the free status cant be determined
            observe(table, "Please confirm if the table is free for placing milk and egg")

--------------------------------------------------------------------------------
Exploration: 
behavior find_milk_2043_around_kitchen_counter_230(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'x') at line 5704, column 36.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def is_table_free(table:item):
    # Function to check if the table is free for use
    # Since there is no predefined state to directly check if a table is free, well assume an observation when necessary
    # If additional specifics were known, such as a unique state representing free, it would be leveraged here
    # This function is rather hypothetical due to lack of explicit free determinant
    symbol table_free = not exists x: item : on(x, table) # Assuming a table is free if there is nothing on it
    return table_free

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 226
        # Select table with ID 226 for now

        if is_table_free(table):
            achieve close_char(char, table)
            # Move closer to the table only if confirmed free for use
        
        else:
            # If the free status cant be determined
            observe(table, "Please confirm if the table is free for placing milk and egg")

--------------------------------------------------------------------------------
Exploration: 
behavior find_milk_2043_around_kitchen_counter_230(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'o') at line 5702, column 31.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def is_table_free_of_items(table:item):
    # Function to check if a table is free of items
    symbol is_free=not exists o: item : (inside(o, table))
    return is_free

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select dining room

        if exists table: item : is_table(table) and inside(table, dining_room) and is_table_free_of_items(table):
            # If there is a table free of items in the dining room according to current information
            bind table: item where:
                is_table(table) and inside(table, dining_room) and is_table_free_of_items(table)
            achieve close_char(char, table) 
            # Move the character closer to the free table

        else: 
            # If no free table is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and inside(table, dining_room) and not visited(table):
                    # Check all unvisited tables in the dining room
                    observe(table,"Check if the table is free of items")
                    # Observe to determine if each table is free of items

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_milk_2043_around_kitchen_counter_230(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'o') at line 5702, column 31.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def is_table_free_of_items(table:item):
    # Function to check if a table is free of items
    symbol is_free=not exists o: item : (inside(o, table))
    return is_free

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select dining room

        if exists table: item : is_table(table) and inside(table, dining_room) and is_table_free_of_items(table):
            # If there is a table free of items in the dining room according to current information
            bind table: item where:
                is_table(table) and inside(table, dining_room) and is_table_free_of_items(table)
            achieve close_char(char, table) 
            # Move the character closer to the free table

        else: 
            # If no free table is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and inside(table, dining_room) and not visited(table):
                    # Check all unvisited tables in the dining room
                    observe(table,"Check if the table is free of items")
                    # Observe to determine if each table is free of items

--------------------------------------------------------------------------------
Exploration: 
behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'o') at line 5666, column 35.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def empty_table_in_dining_room(table:item):
    # Check if a table in the dining room is free of items
    symbol empty_table=not exists o: item : (inside(o, table))
    return empty_table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Find the dining room

        if exists table: item : is_table(table) and inside(table, dining_room) and empty_table_in_dining_room(table):
            # Check if there is an empty table in the dining room
            bind table: item where:
                is_table(table) and inside(table, dining_room) and empty_table_in_dining_room(table)
            # Bind an empty table within the dining room
        else:
            # Explore for an empty table if none is initially found
            foreach table: item:
                if is_table(table) and inside(table, dining_room) and not visited(table):
                    observe(table, "Check if the table is free of items")

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'o') at line 5702, column 35.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def empty_table_in_dining_room(table:item):
    # Check if a table in the dining room is free of items
    symbol empty_table=not exists o: item : inside(o, table)
    return empty_table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Find the dining room

        if exists table: item : is_table(table) and inside(table, dining_room) and empty_table_in_dining_room(table):
            # Check if there is an empty table in the dining room
            bind table: item where:
                is_table(table) and inside(table, dining_room) and empty_table_in_dining_room(table)
            # Bind an empty table within the dining room
        else:
            # Explore for an empty table if none is initially found
            foreach table: item:
                if is_table(table) and inside(table, dining_room) and not visited(table):
                    observe(table, "Check if the table is free of items")

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_milk_2043_around_kitchen_counter_230(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'o') at line 5702, column 34.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def is_free_table(table: item):
    # Function to check if a table is free of items
    symbol free_table=not exists o: item : (on(o, table))
    return free_table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select a dining room
        
        if exists table: item : is_table(table) and inside(table, dining_room) and is_free_table(table):
            # Check if there is a free table in the dining room
            bind table: item where:
                is_table(table) and inside(table, dining_room) and is_free_table(table)
            # Select a free table in the dining room
            achieve close_char(char, table)
            # Approach the free table
        else:
            # If no free table is found in known information, explore further
            foreach table: item:
                if is_table(table) and inside(table, dining_room) and not visited(table):
                    # Check all unvisited tables in the dining room
                    observe(table, "Check if the table is free")
                    # Observe whether each table is free of items

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_milk_2043_around_kitchen_counter_230(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'o') at line 5702, column 34.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def is_free_table(table: item):
    # Function to check if a table is free of items
    symbol free_table=not exists o: item : on(o, table)
    return free_table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select a dining room
        
        if exists table: item : is_table(table) and inside(table, dining_room) and is_free_table(table):
            # Check if there is a free table in the dining room
            bind table: item where:
                is_table(table) and inside(table, dining_room) and is_free_table(table)
            # Select a free table in the dining room
            achieve close_char(char, table)
            # Approach the free table
        else:
            # If no free table is found in known information, explore further
            foreach table: item:
                if is_table(table) and inside(table, dining_room) and not visited(table):
                    # Check all unvisited tables in the dining room
                    observe(table, "Check if the table is free")
                    # Observe whether each table is free of items

--------------------------------------------------------------------------------
Exploration: 
behavior find_milk_2043_around_kitchen_counter_230(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

behavior find_food_egg_2020_around_kitchen_counter_230(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<board: item>].
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item
        
        bind knife: item where:
            is_knife(knife)
        # Select the knife

        symbol has_cutting_board=exists board: item : (is_cutting_board(board))
        if not has_cutting_board:
            # If there is no cutting board, check all unvisited items to find one
            foreach board: item:
                if is_cutting_board(board) and not visited(board):
                    achieve close_char(char, board)
                    break

        if has_cutting_board:
            bind board: item where:
                is_cutting_board(board)
            # Select the cutting board
            achieve on(chicken, board)
            # Place the chicken on the cutting board
            achieve close_char(char, board)
            # Move close to the cutting board
        
        achieve_once inhand(knife)
        # Take the knife in hand for cutting
        
        achieve cut(chicken)
        # Cut the chicken


--------------------------------------------------------------------------------
Exploration: 
behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

################################################################################

Error: Unexpected token Token('EQUAL', '=') at line 5955, column 46.
Expected one of: 
	* COLON

--------------------------------------------------------------------------------
Goal: 
behavior throw_into_trashcan(item: item, trashcan: item):
    body:
        achieve_once inside(item, trashcan)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140

        bind trashcan: item where:
            is_trashcan(trashcan)

        foreach item: item:
            if inside(item, fridge) and item = fridge:
                throw_into_trashcan(item, trashcan)

--------------------------------------------------------------------------------
Exploration: 
behavior find_juice_2034_around_walllamp_46(juice:item):
    goal: not unknown(juice)
    body:
        assert is_juice(juice)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==46
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(juice,walllamp_instance)
        else:
            exp(juice,walllamp_instance)
    eff:
        unknown[juice]=False
        close[juice,walllamp_instance]=True
        close[walllamp_instance,juice]=True
    

behavior find_food_orange_2008_around_walllamp_46(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==46
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(food_orange,walllamp_instance)
        else:
            exp(food_orange,walllamp_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,walllamp_instance]=True
        close[walllamp_instance,food_orange]=True
    

behavior find_food_bread_2016_around_trashcan_360(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==360
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_bread,trashcan_instance)
        else:
            exp(food_bread,trashcan_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,trashcan_instance]=True
        close[trashcan_instance,food_bread]=True
    

behavior find_food_butter_2018_around_walllamp_46(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==46
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(food_butter,walllamp_instance)
        else:
            exp(food_butter,walllamp_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,walllamp_instance]=True
        close[walllamp_instance,food_butter]=True
    

behavior find_food_onion_2026_around_trashcan_360(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==360
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_onion,trashcan_instance)
        else:
            exp(food_onion,trashcan_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,trashcan_instance]=True
        close[trashcan_instance,food_onion]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'c') at line 5754, column 87.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def has_milk_and_cereal(storage:item):
    # Check if there are milk and cereal in the specified storage
    symbol has_both = exists m: item : (is_milk(m) and inside(m, storage)) and exists c: item : (is_food_cereal(c) and inside(c, storage))
    return has_both

behavior __goal__():
    body:
        if exists storage: item : (containers(storage) and has_milk_and_cereal(storage)):
            # Check if there is a storage with both milk and cereal based on the available information
            bind storage: item where:
                containers(storage) and has_milk_and_cereal(storage)
            # Move the character closer to the storage with both milk and cereal
            achieve close_char(char, storage)
            
        else:
            # If no storage with both milk and cereal is found, initiate exploration to locate them
            foreach storage: item:
                if containers(storage) and not visited(storage):
                    # Check all unvisited storage locations
                    observe(storage, "Check is there any milk and cereal in the storage")

--------------------------------------------------------------------------------
Exploration: 
behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2048_around_kitchen_counter_132(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'c') at line 5754, column 87.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def has_milk_and_cereal(storage:item):
    # Check if there are milk and cereal in the specified storage
    symbol has_both = exists m: item : (is_milk(m) and inside(m, storage)) and exists c: item : (is_food_cereal(c) and inside(c, storage))
    return has_both

behavior __goal__():
    body:
        if exists storage: item : (containers(storage) and has_milk_and_cereal(storage)):
            # Check if there is a storage with both milk and cereal based on the available information
            bind storage: item where:
                containers(storage) and has_milk_and_cereal(storage)
            # Move the character closer to the storage with both milk and cereal
            achieve close_char(char, storage)
            
        else:
            # If no storage with both milk and cereal is found, initiate exploration to locate them
            foreach storage: item:
                if containers(storage) and not visited(storage):
                    # Check all unvisited storage locations
                    observe(storage, "Check is there any milk and cereal in the storage")

--------------------------------------------------------------------------------
Exploration: 
behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2048_around_kitchen_counter_128(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'milk') at line 5858, column 23.
Expected one of: 
	* COLON

--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        if not exists milk: item : (is_milk(milk) and close_char(char, milk)):
            # If milk is not found near the character, continue exploring
            foreach obj: item:
                if is_milk(obj) and not visited(obj):
                    observe(obj, "check milk location")
        
        if not exists cereal: item : (is_food_cereal(cereal) and close_char(char, cereal)):
            # If cereal is not found near the character, continue exploring
            foreach obj: item:
                if is_food_cereal(obj) and not visited(obj):
                    observe(obj, "check cereal location")


--------------------------------------------------------------------------------
Exploration: 
behavior find_food_bread_2016_around_cupboard_130(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'milk') at line 5822, column 23.
Expected one of: 
	* COLON

--------------------------------------------------------------------------------
Goal: 
behavior __goal__():
    body:
        if not exists milk: item : (is_milk(milk) and close_char(char, milk)):
            # If milk is not found near the character, continue exploring
            foreach obj: item:
                if is_milk(obj) and not visited(obj):
                    observe(obj, "check milk location")
        
        if not exists cereal: item : (is_food_cereal(cereal) and close_char(char, cereal)):
            # If cereal is not found near the character, continue exploring
            foreach obj: item:
                if is_food_cereal(obj) and not visited(obj):
                    observe(obj, "check cereal location")

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'inside') at line 5759, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
behavior slice_bread(bread:item, board:item):
    body:
        achieve_once on(bread, board) # Place the bread on the cutting board
        achieve_once cut(bread) # Slice the bread

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve once inside(bread, toaster) # Place the sliced bread inside the toaster
        achieve_once closed(toaster) # Close the toaster
        achieve_once is_on(toaster) # Turn on the toaster

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select a piece of bread
        bind board: item where:
            is_cutting_board(board)
        # Select a cutting board
        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster
        slice_bread(bread, board) # Slice the bread on the cutting board
        toast_bread(bread, toaster) # Toast the sliced bread in the toaster

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_bread_2016_around_fridge_140(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Foreach statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
def is_dirty_shirt(x:item):
    # Function to check if an item is a dirty shirt
    return is_clothes_shirt(x) and dirty(x)

def find_dirty_shirt():
    # Function to find a dirty shirt in the scene
    foreach shirt: item:
        if is_dirty_shirt(shirt) and not visited(shirt):
            observe(shirt, "Check if this shirt needs to be washed")

behavior __goal__():
    body:
        if exists shirt: item : (is_dirty_shirt(shirt) and visited(shirt)):
            # If a shirt that needs washing is already found, approach it
            bind shirt: item where:
                is_dirty_shirt(shirt) and visited(shirt)
            achieve close_char(char, shirt)

        else:
            # If no shirt is found, inspect unidentified items to locate it
            find_dirty_shirt()

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable s already exists.
--------------------------------------------------------------------------------
Goal: 
def is_shirt_to_be_washed(s: item):
    # Function to check if an item is a shirt that needs to be washed
    symbol is_needed=exists s: item : (is_clothes_shirt(s) and dirty(s))
    return is_needed

behavior __goal__():
    body:
        if exists shirt: item : (is_clothes_shirt(shirt) and is_shirt_to_be_washed(shirt)):
            # If we have already found the shirt that needs to be washed, we can directly approach it
            bind shirt: item where:
                is_clothes_shirt(shirt) and is_shirt_to_be_washed(shirt)
            achieve close_char(char, shirt)
        
        else:
            # Check all shirts in the scene that have not been visited
            foreach shirt: item:
                if is_clothes_shirt(shirt) and not visited(shirt):
                    observe(shirt, "Check if it needs to be washed")

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable shirt already exists.
--------------------------------------------------------------------------------
Goal:  
def is_shirt_to_be_washed(shirt: item):
    # Function to check if an item is a shirt that needs to be washed
    symbol is_needed=exists shirt: item : (is_clothes_shirt(shirt) and dirty(shirt))
    return is_needed

behavior __goal__():
    body:
        if exists shirt: item : (is_clothes_shirt(shirt) and is_shirt_to_be_washed(shirt)):
            # If we have already found the shirt that needs to be washed, we can directly approach it
            bind shirt: item where:
                is_clothes_shirt(shirt) and is_shirt_to_be_washed(shirt)
            achieve close_char(char, shirt)
        
        else:
            # Check all shirts in the scene that have not been visited
            foreach shirt: item:
                if is_clothes_shirt(shirt) and not visited(shirt):
                    observe(shirt, "Check if it needs to be washed")

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_detergent_2108_around_bathroom_cabinet_305(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'step') at line 5792, column 18.
Expected one of: 
	* __ANON_7
	* SEMICOLON
	* __ANON_2
	* PLUS
	* MINUS
	* AND
	* AT
	* COMMA
	* LSHIFT
	* CIRCUMFLEX
	* _NEWLINE
	* LESS_EQ
	* __ANON_6
	* NOT_EQ
	* IF
	* RSHIFT
	* __ANON_8
	* __ANON_1
	* DOUBLE_EQUAL
	* GREATER_EQ
	* FLOORDIV
	* EQUAL
	* VBAR
	* __ANON_0
	* __ANON_3
	* STAR
	* __ANON_5
	* MORETHAN
	* OR
	* SLASH
	* __ANON_4
	* PERCENT
	* LESSTHAN
	* AMPERSAND

--------------------------------------------------------------------------------
Goal:  
behavior wash_shirt(shirt:item, sink:item):
    body:
        foreach step: behavior:
            if step == 1:
                achieve close_char(char, sink) # Ensure you are close to the sink
            elif step == 2:
                achieve_once has_water(sink)  # Fill the sink with water
            elif step == 3:
                achieve_once dirty(shirt)  # Acknowledge the shirt is dirty before washing
            elif step == 4:
                wash(shirt)  # Wash the shirt
            elif step == 5:
                scrub(shirt)  # Scrub the shirt to ensure its clean
            elif step == 6:
                rinse(shirt)  # Rinse the shirt with clean water
            elif step == 7:
                squeeze(shirt)  # Squeeze out the excess water from the shirt

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2114
        bind sink: item where:
            is_sink(sink)
        wash_shirt(shirt, sink)

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2037_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2098_around_sink_133(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_sink_133(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

################################################################################

Error: Unexpected token Token('IN', 'in') at line 5807, column 27.
Expected one of: 
	* COLON
	* LSQB
	* COMMA
Previous tokens: [Token('BASIC_TYPENAME', 'int')]

--------------------------------------------------------------------------------
Goal: 
behavior wash_shirt(shirt:item, sink:item):
    body:
        foreach step: int in range(1, 8): # Corrected syntax to iterate over steps
            if step == 1:
                achieve close_char(char, sink) # Ensure you are close to the sink
            elif step == 2:
                achieve_once has_water(sink)  # Fill the sink with water
            elif step == 3:
                achieve dirty(shirt)  # Acknowledge the shirt is dirty before washing
            elif step == 4:
                wash(shirt)  # Wash the shirt
            elif step == 5:
                scrub(shirt)  # Scrub the shirt to ensure its clean
            elif step == 6:
                rinse(shirt)  # Rinse the shirt with clean water
            elif step == 7:
                squeeze(shirt)  # Squeeze out the excess water from the shirt

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2114
        bind sink: item where:
            is_sink(sink)
        wash_shirt(shirt, sink)

--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2083_around_sink_133(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_soap_2038_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2108_around_sink_133(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_towel_rack_299_around_sink_133(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel_rack,sink_instance)
        else:
            exp(towel_rack,sink_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,sink_instance]=True
        close[sink_instance,towel_rack]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: ironing_board_2099; available variables: [Variable<shirt: item>, Variable<iron: item>].
--------------------------------------------------------------------------------
Goal:  
behavior simulate_ironing_shirt(shirt: item, iron: item):
    body:
        achieve_once on(shirt, ironing_board_2099)
        achieve_once plugged(iron)
        achieve_once is_on(iron)
        # Simulate the ironing action
        achieve_once is_clothes(shirt) and not dirty(shirt)
        observe(iron, "Iron the shirt to remove wrinkles")
        achieve_once is_off(iron)
        achieve_once unplugged(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board_2099)
        bind iron: item where:
            is_iron(iron) and close_char(char, iron)
        simulate_ironing_shirt(shirt, iron)

--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2083_around_bathroom_cabinet_305(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

'Function is_readable not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
def is_needed_book(book:item):
    # Function to determine if the item is the book needed based on known criteria
    symbol needed= is_readable(book) and is_book(book)
    return needed

behavior __goal__():
    body:
        # Check if there is a book matching the needed criteria
        if exists book: item : (is_book(book) and is_needed_book(book)):
            # If book is already identified based on the available information
            bind book: item where:
                is_book(book) and is_needed_book(book)
            achieve close_char(char, book)
            # Approach the identified book

        else:
            # Inspect unvisited books to find the needed one
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book, "Check if its the book needed")

--------------------------------------------------------------------------------
Exploration: 
behavior find_book_2092_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_136(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5818, column 56.
Expected one of: 
	* EQUAL
	* RPAR
	* COMMA

--------------------------------------------------------------------------------
Goal:  
behavior simulate_ironing_shirt(shirt: item, iron: item, board: item):
    body:
        achieve_once on(shirt, board)
        achieve_once plugged(iron)
        achieve_once is_on(iron)
        # Simulate the ironing action
        achieve_once is_clothes(shirt) and not dirty(shirt)
        observe(iron, "Iron the shirt to remove wrinkles")
        achieve_once is_off(iron)
        achieve_once unplugged(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, board: item where is_ironing_board(board))
        bind iron: item where:
            is_iron(iron) and close_char(char, iron)
        bind board: item where:
            is_ironing_board(board)
        simulate_ironing_shirt(shirt, iron, board)

--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2083_around_bathroom_cabinet_305(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

behavior find_phone_47_around_table_123(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(phone,table_instance)
        else:
            exp(phone,table_instance)
    eff:
        unknown[phone]=False
        close[phone,table_instance]=True
        close[table_instance,phone]=True
    

behavior find_box_2023_around_washing_machine_2041(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(box,washing_machine_instance)
        else:
            exp(box,washing_machine_instance)
    eff:
        unknown[box]=False
        close[box,washing_machine_instance]=True
        close[washing_machine_instance,box]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'clean') at line 5806, column 39.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def required_to_iron_shirt(shirt: item, iron: item, board: item):
    # Function to check if shirt needs to be ironed, iron is on and clothing is on ironing board
    symbol need_ironing = not achieve clean(shirt) or not achieve on(shirt, board)
    symbol iron_ready = achieve is_on(iron) and plugged(iron)
    return need_ironing and iron_ready

behavior iron_shirt(shirt: item, iron: item, board: item):
    body:
        achieve_once on(shirt, board)
        # Place the shirt on the ironing board
        achieve_once plugged(iron)
        # Ensure the iron is plugged in

behavior start_ironing(shirt: item, iron: item):
    body:
        achieve clean(shirt)
        # Iron the shirt until it is clean (wrinklefree)
        achieve_once is_off(iron)
        # Turn off the iron after ironing is complete

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed

        bind iron: item where:
            is_iron(iron) and plugged(iron)
        # Select the pluggedin iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        if required_to_iron_shirt(shirt, iron, ironing_board):
            iron_shirt(shirt, iron, ironing_board)
            start_ironing(shirt, iron)

--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2083_around_bathroom_counter_306(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

behavior find_napkin_2014_around_table_123(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(napkin,table_instance)
        else:
            exp(napkin,table_instance)
    eff:
        unknown[napkin]=False
        close[napkin,table_instance]=True
        close[table_instance,napkin]=True
    

behavior find_toilet_paper_2118_around_toilet_302(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==302
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

################################################################################

Error: {'self': <concepts.dm.crow.executors.crow_executor.CrowExecutionCSPVisitor object at 0x7fc1d12719a0>, 'rv': Value[bool, axes=[], tdtype=torch.int64, tdshape=(), quantized]{tensor(0)}, 'function_argument_variables': (Variable<item: item>,), 'outer_arguments': (VariableExpression<V::_t1>,), 'argument_values': (slice(None, None, None),), 'output_batch_variables': [], 'function_argument_variable': Variable<item: item>, 'outer_argument_expr': VariableExpression<V::_t1>, 'argument_value': slice(None, None, None)}
--------------------------------------------------------------------------------
Goal:  
def has_dirty_bowls_or_plates_unvisited(item:item):
    # Function to check if there are dirty bowls or plates and if they have been visited
    symbol has_dirty=exists o: item : ((is_bowl(o) or is_plate(o)) and dirty(o) and not visited(o))
    return has_dirty

behavior __goal__():
    body:
        if exists item: item : (has_dirty_bowls_or_plates_unvisited(item)):
            # If we have unvisited dirty bowls or plates, approach them
            foreach item: item:
                if (is_bowl(item) or is_plate(item)) and dirty(item) and not visited(item):
                    observe(item, "Check if this item is a bowl or plate that needs washing")
        else:
            # If no specific bowls or plates are found, start gathering information about all items
            foreach item: item:
                if is_bowl(item) or is_plate(item):
                    observe(item, "Check if this bowl or plate needs washing")

--------------------------------------------------------------------------------
Exploration: 
behavior find_plate_2105_around_kitchen_counter_128(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_bowl_2095_around_kitchen_counter_128(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

################################################################################

Error: {'self': <concepts.dm.crow.executors.crow_executor.CrowExecutionCSPVisitor object at 0x7fc1d1296580>, 'rv': Value[bool, axes=[], tdtype=torch.int64, tdshape=(), quantized]{tensor(0)}, 'function_argument_variables': (Variable<thing: item>,), 'outer_arguments': (VariableExpression<V::_t1>,), 'argument_values': (slice(None, None, None),), 'output_batch_variables': [], 'function_argument_variable': Variable<thing: item>, 'outer_argument_expr': VariableExpression<V::_t1>, 'argument_value': slice(None, None, None)}
--------------------------------------------------------------------------------
Goal: 
def has_bowls_or_plates(thing: item):
    # Function to check if there are bowls or plates that are dirty and need washing
    symbol has_bowls_or_plates = exists o: item : ((is_bowl(o) or is_plate(o)) and dirty(o))
    return has_bowls_or_plates

behavior __goal__():
    body:
        if exists thing: item : (has_bowls_or_plates(thing)):
            foreach thing: item:
                if (is_bowl(thing) or is_plate(thing)) and dirty(thing):
                    observe(thing,"Determine if it is a dirty bowl or plate in need of washing")
        else:
            foreach thing: item:
                if (is_bowl(thing) or is_plate(thing)) and not visited(thing):
                    observe(thing,"Check if it is a bowl or plate and if it needs washing")

--------------------------------------------------------------------------------
Exploration: 
behavior find_plate_2105_around_stove_2090(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(plate,stove_instance)
        else:
            exp(plate,stove_instance)
    eff:
        unknown[plate]=False
        close[plate,stove_instance]=True
        close[stove_instance,plate]=True
    

behavior find_bowl_2095_around_kitchen_counter_128(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: bathroom; available variables: [Variable<sink: item>].
--------------------------------------------------------------------------------
Goal: 
behavior hand_wash_underwear(underwear:item, soap:item, sink:item):
    body:
        achieve_once inside(underwear, sink)
        # Place the underwear inside the sink
        achieve_once inside(soap, sink)
        # Place the soap inside the sink

behavior wash_underwear(underwear:item):
    body:
        wash(underwear)
        # Wash the underwear

behavior __goal__():
    body:
        bind underwear: item where:
            is_clothes_underwear(underwear)
        # Select the underwear
        
        bind soap: item where:
            is_soap(soap)
        # Select the soap
        
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        hand_wash_underwear(underwear, soap, sink)
        wash_underwear(underwear)

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2037_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_clothes_underwear_2022_around_basket_for_clothes_2040(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles
        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)
        # Select the coffee table in the home office
        place_spectacles_on_table(spectacles, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_remote_control_2081_around_tvstand_186(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior put_spectacles_on_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles
        
        bind coffee_table: item where:
            surfaces(coffee_table) and recipient(coffee_table) and inside(coffee_table, coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table located in the home office

        put_spectacles_on_coffee_table(spectacles, coffee_table)
        # Place spectacles on the coffee table located in home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_mouse_2112_around_keyboard_2111(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind keyboard_instance:item where:
            is_keyboard(keyboard_instance) and id[keyboard_instance]==2111
        achieve close_char(char,keyboard_instance)
        if can_open(keyboard_instance):
            achieve_once open(keyboard_instance)
            exp(mouse,keyboard_instance)
        else:
            exp(mouse,keyboard_instance)
    eff:
        unknown[mouse]=False
        close[mouse,keyboard_instance]=True
        close[keyboard_instance,mouse]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior put_spectacles_on_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles

        bind coffee_table: item where:
            surfaces(coffee_table) and recipient(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table located in the home office
        
        bind home_office: item where:
            is_home_office(home_office)
        # Define home_office instance

        put_spectacles_on_coffee_table(spectacles, coffee_table)
        # Place spectacles on the coffee table located in home office

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles item
        
        bind table: item where:
            is_table(table) and inside(table, home_office) and id[table] == 193
        # Select the coffee table located in the home office with ID 193
        
        place_spectacles_on_table(spectacles, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles item

        bind table: item where:
            is_table(table) and inside(table, home_office) and id[table] == 193
        # Select the coffee table located in the home office with ID 193 and ensure it is inside the home office
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office to ensure table is correctly located

        place_spectacles_on_table(spectacles, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_mouse_380_around_mouse_2112(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==2112
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

################################################################################

Error: {'self': <concepts.dm.crow.executors.crow_executor.CrowExecutionCSPVisitor object at 0x7f78f03b2d00>, 'rv': Value[bool, axes=[], tdtype=torch.int64, tdshape=(), quantized]{tensor(0)}, 'function_argument_variables': (Variable<sink: item>,), 'outer_arguments': (VariableExpression<V::_t1>,), 'argument_values': (slice(None, None, None),), 'output_batch_variables': [], 'function_argument_variable': Variable<sink: item>, 'outer_argument_expr': VariableExpression<V::_t1>, 'argument_value': slice(None, None, None)}
--------------------------------------------------------------------------------
Goal:  
def suitable_for_showering(sink:item):
    # Function to check if a sink is suitable for showering the cat
    symbol has_water_and_large_enough= exists o: item : (is_sink(o) and has_water(o) and not inside_char(char, o))
    return has_water_and_large_enough

behavior __goal__():
    body:
        if exists sink: item : (is_sink(sink) and suitable_for_showering(sink)):
            # If there is a suitable sink for showering the cat, approach it
            bind sink: item where:
                is_sink(sink) and suitable_for_showering(sink)
            achieve close_char(char, sink)

        else:
            # Check all sinks in the scene that have not been visited
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check if sink is large enough and has water")

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table located in the home office
        achieve on(spectacles, coffee_table)
        # Place the spectacles on the coffee table

--------------------------------------------------------------------------------
Exploration: 
behavior find_phone_47_around_powersocket_48(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==48
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(phone,powersocket_instance)
        else:
            exp(phone,powersocket_instance)
    eff:
        unknown[phone]=False
        close[phone,powersocket_instance]=True
        close[powersocket_instance,phone]=True
    

behavior find_remote_control_2081_around_tvstand_186(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_stereo_2007_around_tvstand_135(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'inside') at line 5786, column 17.
Expected one of: 
	* RSHIFT
	* STAR
	* LSHIFT
	* NOT_EQ
	* AMPERSAND
	* __ANON_6
	* __ANON_5
	* __ANON_0
	* AND
	* __ANON_7
	* EQUAL
	* DOUBLE_EQUAL
	* __ANON_8
	* MINUS
	* __ANON_1
	* PERCENT
	* SLASH
	* LESSTHAN
	* OR
	* COMMA
	* MORETHAN
	* __ANON_4
	* PLUS
	* LESS_EQ
	* AT
	* FLOORDIV
	* SEMICOLON
	* _NEWLINE
	* CIRCUMFLEX
	* __ANON_2
	* GREATER_EQ
	* __ANON_3
	* IF
	* VBAR

--------------------------------------------------------------------------------
Goal:  
behavior place_spectacles_on_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles item
        bind coffee_table: item where:
            is_table(coffee_table)
            and inside(coffee_table, home_office)
        # Select coffee table located in the home office
        place_spectacles_on_coffee_table(spectacles, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_mouse_380_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'inside') at line 5804, column 17.
Expected one of: 
	* RSHIFT
	* STAR
	* LSHIFT
	* NOT_EQ
	* AMPERSAND
	* __ANON_6
	* __ANON_5
	* __ANON_0
	* AND
	* __ANON_7
	* EQUAL
	* DOUBLE_EQUAL
	* __ANON_8
	* MINUS
	* __ANON_1
	* PERCENT
	* SLASH
	* LESSTHAN
	* OR
	* COMMA
	* MORETHAN
	* __ANON_4
	* PLUS
	* LESS_EQ
	* AT
	* FLOORDIV
	* SEMICOLON
	* _NEWLINE
	* CIRCUMFLEX
	* __ANON_2
	* GREATER_EQ
	* __ANON_3
	* IF
	* VBAR

--------------------------------------------------------------------------------
Goal:  
behavior place_spectacles_on_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles item
        bind coffee_table: item where:
            is_table(coffee_table)
            and inside(coffee_table, home_office)
        # Select coffee table located in the home office
        place_spectacles_on_coffee_table(spectacles, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_drawing_387_around_drawing_296(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'room') at line 5763, column 47.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles instance
        bind coffee_table: item where:
            is_table(coffee_table) and exists room: item : (is_home_office(room) and inside(coffee_table, room))
        # Select the coffee table in the home office
        achieve on(spectacles, coffee_table)
        # Place the spectacles on the coffee table in the home office

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'room') at line 5853, column 47.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

--------------------------------------------------------------------------------
Goal: 
behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles instance
        bind coffee_table: item where:
            is_table(coffee_table) and exists room: item : (is_home_office(room) and inside(coffee_table, room))
        # Select the coffee table in the home office
        achieve on(spectacles, coffee_table)
        # Place the spectacles on the coffee table in the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_mouse_380_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_drawing_238_around_drawing_296(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

behavior find_cup_2088_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_video_game_controller_2019_around_tvstand_135(video_game_controller:item):
    goal: not unknown(video_game_controller)
    body:
        assert is_video_game_controller(video_game_controller)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(video_game_controller,tvstand_instance)
        else:
            exp(video_game_controller,tvstand_instance)
    eff:
        unknown[video_game_controller]=False
        close[video_game_controller,tvstand_instance]=True
        close[tvstand_instance,video_game_controller]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior find_and_place_spectacles_in_home_office():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Check if this is the coffee table in the home office")
                if is_home_office(table):
                    bind spectacles: item where:
                        is_spectacles(spectacles)
                    place_spectacles_on_table(spectacles, table)
                    achieve close_char(char, table)
                    break

behavior __goal__():
    body:
        find_and_place_spectacles_in_home_office()

--------------------------------------------------------------------------------
Exploration: 
behavior find_mouse_2003_around_mouse_2112(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==2112
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior find_and_place_spectacles_in_home_office():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Check if this is the coffee table in the home office")
                if is_home_office(table):
                    bind spectacles: item where:
                        is_spectacles(spectacles)
                    place_spectacles_on_table(spectacles, table)
                    achieve_once close_char(char, table)
                    break

behavior __goal__():
    body:
        find_and_place_spectacles_in_home_office()

--------------------------------------------------------------------------------
Exploration: 
behavior find_dvd_player_2000_around_dvd_player_2000(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind dvd_player_instance:item where:
            is_dvd_player(dvd_player_instance) and id[dvd_player_instance]==2000
        achieve close_char(char,dvd_player_instance)
        if can_open(dvd_player_instance):
            achieve_once open(dvd_player_instance)
            exp(dvd_player,dvd_player_instance)
        else:
            exp(dvd_player,dvd_player_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,dvd_player_instance]=True
        close[dvd_player_instance,dvd_player]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: table_193; available variables: [Variable<spectacles: item>].
--------------------------------------------------------------------------------
Goal:  
def is_correct_table(table: item):
    # Function to check if the table is the coffee table in the home office
    symbol is_correct_table = exists room: item : (is_home_office(room) and inside(table, room))
    return is_correct_table

behavior move_spectacles_to_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)
        # Place the spectacles on the table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and on(spectacles, table_193)
        # Select spectacles that are already on table_193

        if is_correct_table(table_193):
            achieve close_char(char, table_193)
            # Move towards the table if its the correct one
            
        else:
            foreach table: item:
                if is_table(table) and is_correct_table(table):
                    move_spectacles_to_table(spectacles, table)
                    # Move the spectacles to the correct table in home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_phone_47_around_powersocket_48(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==48
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(phone,powersocket_instance)
        else:
            exp(phone,powersocket_instance)
    eff:
        unknown[phone]=False
        close[phone,powersocket_instance]=True
        close[powersocket_instance,phone]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: table; available variables: [Variable<spectacles: item>].
--------------------------------------------------------------------------------
Goal:  
def is_correct_table(table: item):
    # Function to check if the table is the coffee table in the home office
    symbol is_correct_table = exists room: item : (is_home_office(room) and inside(table, room))
    return is_correct_table

behavior move_spectacles_to_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)
        # Place the spectacles on the table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and on(spectacles, table)
        # Select spectacles that are already on any table

        bind table_193: item where:
            is_table(table_193) and id[table_193] == 193
        # Define table_193

        if is_correct_table(table_193):
            achieve close_char(char, table_193)
            # Move towards the table if its the correct one
            
        else:
            foreach table: item:
                if is_table(table) and is_correct_table(table):
                    move_spectacles_to_table(spectacles, table)
                    # Move the spectacles to the correct table in home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_console_2027_around_tvstand_135(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(console,tvstand_instance)
        else:
            exp(console,tvstand_instance)
    eff:
        unknown[console]=False
        close[console,tvstand_instance]=True
        close[tvstand_instance,console]=True
    

behavior find_keyboard_382_around_desk_261(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

behavior find_laptop_2015_around_computer_2110(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(laptop,computer_instance)
        else:
            exp(laptop,computer_instance)
    eff:
        unknown[laptop]=False
        close[laptop,computer_instance]=True
        close[computer_instance,laptop]=True
    

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal: 
behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office
        achieve close_char(char, spectacles)
        # Approach the spectacles
        achieve_once inhand(spectacles)
        # Pick up the spectacles
        achieve close_char(char, coffee_table)
        # Move closer to the coffee table
        achieve_once on(spectacles, coffee_table)
        # Place the spectacles on the coffee table

--------------------------------------------------------------------------------
Exploration: 
behavior find_mouse_380_around_mousepad_381(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==381
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_video_game_controller_2019_around_tvstand_135(video_game_controller:item):
    goal: not unknown(video_game_controller)
    body:
        assert is_video_game_controller(video_game_controller)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(video_game_controller,tvstand_instance)
        else:
            exp(video_game_controller,tvstand_instance)
    eff:
        unknown[video_game_controller]=False
        close[video_game_controller,tvstand_instance]=True
        close[tvstand_instance,video_game_controller]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal:  
def is_spectacles_safely_placed(table:item):
    # Function to check if the spectacles are placed on the coffee table in the home office
    symbol spectacles_safe= exists s: item : (is_spectacles(s) and on(s, table))
    return spectacles_safe

behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table) # Achieve placing spectacles on the table

behavior find_and_place_spectacles():
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office) 
        # Select the table located in the home office labeled as coffee table

        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        if not is_spectacles_safely_placed(coffee_table):
            place_spectacles_on_table(spectacles, coffee_table)
            
behavior __goal__():
    body:
        find_and_place_spectacles()

--------------------------------------------------------------------------------
Exploration: 
behavior find_glue_2013_around_kitchen_counter_129(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(glue,kitchen_counter_instance)
        else:
            exp(glue,kitchen_counter_instance)
    eff:
        unknown[glue]=False
        close[glue,kitchen_counter_instance]=True
        close[kitchen_counter_instance,glue]=True
    

behavior find_laptop_2015_around_computer_2110(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(laptop,computer_instance)
        else:
            exp(laptop,computer_instance)
    eff:
        unknown[laptop]=False
        close[laptop,computer_instance]=True
        close[computer_instance,laptop]=True
    

behavior find_stereo_2007_around_tvstand_135(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior move_spectacles_to_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table located in the home office

        move_spectacles_to_coffee_table(spectacles, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_mouse_380_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_phone_47_around_powersocket_48(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==48
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(phone,powersocket_instance)
        else:
            exp(phone,powersocket_instance)
    eff:
        unknown[phone]=False
        close[phone,powersocket_instance]=True
        close[powersocket_instance,phone]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior find_spectacles_and_place_on_table(spectacles:item, coffee_table:item, home_office:item):
    body:
        # Place the spectacles on the coffee table
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        # Identify the spectacles and the coffee table in the home office
        bind spectacles: item where:
            is_spectacles(spectacles)
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        bind home_office: item where:
            is_home_office(home_office)
        # Execute the behavior to find spectacles and place them on the coffee table
        find_spectacles_and_place_on_table(spectacles, coffee_table, home_office)

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_374_around_nightstand_373(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==373
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(chair,nightstand_instance)
        else:
            exp(chair,nightstand_instance)
    eff:
        unknown[chair]=False
        close[chair,nightstand_instance]=True
        close[nightstand_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: table; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal:  
def has_spectacles(table:item):
    symbol spectacles_exist=exists o: item : (is_spectacles(o) and on(o, table))
    return spectacles_exist

behavior place_spectacles_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
            
        bind coffee_table: item where:
            is_table(coffee_table) and is_home_office(table) and surfaces(coffee_table)
        
        place_spectacles_on_coffee_table(spectacles, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal: 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)
        
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select book with ID 2091
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office
        
        place_book_on_table(book, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_chair_263_around_chair_263(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==263
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: coffee_table; available variables: [].
--------------------------------------------------------------------------------
Goal: behavior move_book_to_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)
        # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the book with ID 2091
        
        bind table_193: item where:
            is_table(table_193) and id[table_193] == 193
        # Select table with ID 193 to confirm its not the coffee table
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office to ensure the coffee table is inside it

        foreach coffee_table: item:
            # Check all unvisited tables in the home office to find the coffee table
            if is_table(coffee_table) and inside(coffee_table, home_office) and not visited(coffee_table):
                observe(coffee_table, "Check if this is the coffee table in the home office")
        
        move_book_to_coffee_table(book, coffee_table)
        # Move the book to the correct coffee table in the home office
--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('BIND', 'bind') at line 5790, column 1.
Expected one of: 
	* FEATURE
	* DEF
	* _PRAGMA_KEYWORD
	* TYPEDEF
	* CONTROLLER
	* BEHAVIOR
	* DOMAIN
	* $END
	* UNDIRECTED_GENERATOR
	* INIT
	* GOAL
	* GENERATOR
	* INCLUDE
	* IMPORT
	* _NEWLINE
	* OBJECTS
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n\n')]

--------------------------------------------------------------------------------
Goal: 
bind coffee_table: item where:
    is_table(coffee_table) and inside(coffee_table, home_office)

behavior move_book_to_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book_2091: item where:
            is_book(book_2091) and id[book_2091] == 2091
        move_book_to_coffee_table(book_2091, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_2119_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

################################################################################

Error: Unexpected token Token('BIND', 'bind') at line 5772, column 1.
Expected one of: 
	* FEATURE
	* DEF
	* _PRAGMA_KEYWORD
	* TYPEDEF
	* CONTROLLER
	* BEHAVIOR
	* DOMAIN
	* $END
	* UNDIRECTED_GENERATOR
	* INIT
	* GOAL
	* GENERATOR
	* INCLUDE
	* IMPORT
	* _NEWLINE
	* OBJECTS

--------------------------------------------------------------------------------
Goal:  
bind coffee_table: item where:
    is_table(coffee_table) and inside(coffee_table, home_office)

behavior move_book_to_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book_2091: item where:
            is_book(book_2091) and id[book_2091] == 2091
        move_book_to_coffee_table(book_2091, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: {'self': <concepts.dm.crow.executors.crow_executor.CrowExecutionDefaultVisitor object at 0x7f78e8efc4f0>, 'rv': Value[bool, axes=[], tdtype=torch.int64, tdshape=(), quantized]{tensor(1)}, 'function_argument_variables': (Variable<table: item>, Variable<home_office: item>), 'outer_arguments': (VariableExpression<V::coffee_table>, VariableExpression<V::home_office>), 'argument_values': (slice(None, None, None), StateObjectReference(name='home_office_161', index=164, dtype=ObjectType<item>)), 'output_batch_variables': [], 'function_argument_variable': Variable<table: item>, 'outer_argument_expr': VariableExpression<V::coffee_table>, 'argument_value': slice(None, None, None)}
--------------------------------------------------------------------------------
Goal:  
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)
        # Place the book on the coffee table

def is_correct_coffee_table(table:item, home_office:item):
    symbol correct_table = exists furniture: item : (is_table(furniture) and inside(furniture, home_office) and surfaces(furniture))
    return correct_table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2091
        # Select book with ID 2091
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        bind coffee_table: item where:
            is_table(coffee_table) and is_correct_coffee_table(coffee_table, home_office)
        # Select the correct coffee table in the home office
        
        place_book_on_coffee_table(book, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bills_2009_around_filing_cabinet_378(bills:item):
    goal: not unknown(bills)
    body:
        assert is_bills(bills)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==378
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(bills,filing_cabinet_instance)
        else:
            exp(bills,filing_cabinet_instance)
    eff:
        unknown[bills]=False
        close[bills,filing_cabinet_instance]=True
        close[filing_cabinet_instance,bills]=True
    

behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Identify the book with ID 2091

        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)
        # Find the correct coffee table inside the home office with a surface to hold items

        achieve close_char(char, book)
        # Approach the book to be moved

        achieve_once on(book, table)
        # Place the book on the coffee table in the home office

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal: behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select book with ID 2091
        
        if exists table: item : (is_table(table) and inside(table, home_office) and surfaces(table)):
            # Check if there is a table that has surfaces and is inside the home_office based on the available information
            bind coffee_table: item where:
                is_table(coffee_table) and inside(coffee_table, home_office) and surfaces(coffee_table)
            # Select the coffee table in the home office with a surface
            put_book_on_coffee_table(book, coffee_table) 
            # Place the book on the coffee table
        
        else:
            # If no such coffee table is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Is this the coffee table in the home office")
                    # Observe to check if this table is the coffee table inside the home office
--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_book_on_correct_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table) # Place the book on the correct coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the book with ID 2091

        bind coffee_table: item where:
            is_table(coffee_table)
            # You need to select the correct coffee table in the home office

        if exists coffee_table: item : (is_table(coffee_table) and inside(coffee_table, home_office)):
            # If you know the correct coffee table is in the home office
            bind coffee_table: item where:
                is_table(coffee_table) and inside(coffee_table, home_office)
            # Select the coffee table in the home office
            
            place_book_on_correct_table(book, coffee_table)
        else:
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check if this is the coffee table in the home office")
                    # Observe each unvisited table to identify the correct coffee table

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_263_around_chair_263(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==263
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: is_home_office; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the book with ID 2091

        bind coffee_table: item where:
            surfaces(coffee_table) and inside(coffee_table, is_home_office)
        # Select the coffee table inside the home office

        achieve_once on(book, coffee_table)
        # Place the book on the coffee table in the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_chair_138_around_home_office_161(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal: 
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the book with ID 2091

        bind coffee_table: item where:
            surfaces(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        achieve_once on(book, coffee_table)
        # Place the book on the coffee table in the home office

        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_chair_263_around_chair_263(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==263
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2091
        # Select the book with ID 2091
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the table inside the home office, assuming it is the coffee table

        achieve_once on(book, coffee_table)
        # Place book_2091 on the coffee table inside the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_chair_2119_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2091
        # Select the book with ID 2091
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the table inside the home office, assuming it is the coffee table
        
        bind home_office: item where:
            is_home_office(home_office)
        # Ensure home_office is defined
        
        achieve_once on(book, coffee_table)
        # Place book_2091 on the coffee table inside the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_2119_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'o') at line 5889, column 31.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def is_correct_coffee_table(table:item):
    # Function to check if the specified table is the correct coffee table in the home office and does not have the book on it
    observe(table, "Check if this is the correct coffee table in the home office and if it lacks the book")
    symbol correct_table=exists home_office: item : (is_home_office(home_office) and inside(table, home_office))
    symbol no_book=not exists o: item : (is_book(o) and on(o, table))
    return correct_table and no_book

behavior move_book_to_table(book:item, table:item):
    body:
        achieve_once on(book, table)
        # Place the book on the specified table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2091
        # Select book with ID 2091
        foreach table: item:
            if is_table(table) and is_correct_coffee_table(table):
                move_book_to_table(book, table)
                break # Stop iteration once the correct table is found

--------------------------------------------------------------------------------
Exploration: 
behavior find_phone_47_around_home_office_161(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(phone,home_office_instance)
        else:
            exp(phone,home_office_instance)
    eff:
        unknown[phone]=False
        close[phone,home_office_instance]=True
        close[home_office_instance,phone]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'book') at line 5907, column 31.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def is_correct_coffee_table(table:item):
    # Function to check if the specified table is the correct coffee table in the home office and does not have the book on it
    observe(table, "Check if this is the correct coffee table in the home office and if it lacks the book")
    symbol correct_table=exists home_office: item : (is_home_office(home_office) and inside(table, home_office))
    symbol no_book=not exists book: item : (is_book(book) and on(book, table))
    return correct_table and no_book

behavior move_book_to_table(book:item, table:item):
    body:
        achieve_once on(book, table)
        # Place the book on the specified table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2091
        # Select book with ID 2091
        foreach table: item:
            if is_table(table) and is_correct_coffee_table(table):
                move_book_to_table(book, table)
                break # Stop iteration once the correct table is found

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_mouse_2112_around_mouse_2112(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==2112
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: dry_pasta; available variables: [Variable<pot: item>, Variable<stove: item>].
--------------------------------------------------------------------------------
Goal:  
behavior add_water_to_pot(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_contents(pot:item, stove:item):
    body:
        achieve_once inside(dry_pasta, pot) # Ensure the pasta is inside the pot
        achieve_once inside(food_chicken, pot) # Ensure the chicken is inside the pot
        achieve_once is_on(stove) # Turn on the stove to boil the contents

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and open(pot)
        # Select an open pot
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and inside(dry_pasta, pot)
        # Select dry pasta that is already in the pot
        bind food_chicken: item where:
            is_food_chicken(food_chicken) and inside(food_chicken, pot)
        # Select the chicken already in the pot
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select a stove that is on
        add_water_to_pot(pot, faucet)
        boil_contents(pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_coin_2004_around_kitchen_counter_128(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coin,kitchen_counter_instance)
        else:
            exp(coin,kitchen_counter_instance)
    eff:
        unknown[coin]=False
        close[coin,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coin]=True
    

behavior find_mouse_380_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
def is_correct_coffee_table(table:item):
    # Determine if a table is the correct coffee table in the home office
    symbol correct_table= exists room: item : (is_home_office(room) and inside(table, room) and surfaces(table) and not visited(table))
    return correct_table

behavior put_book_on_table(book: item, table: item):
    body:
        achieve_once on(book, table) 

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        bind book_2091: item where:
            is_book(book_2091) and id[book_2091]==2091
        # Select book_2091

        if not visited(home_office):
            observe(home_office, "Check which is the correct coffee table in the home office")
        
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Check if this is the correct coffee table in the home office and if it lacks the book")
                if is_correct_coffee_table(table):
                    put_book_on_table(book_2091, table)
                    break

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_spectacles_2106_around_wallshelf_187(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(spectacles,wallshelf_instance)
        else:
            exp(spectacles,wallshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,wallshelf_instance]=True
        close[wallshelf_instance,spectacles]=True
    

################################################################################

Error: Unexpected token Token('_NEWLINE', '\n\n#goal_representation_end\n') at line 5912, column 27.
Expected one of: 
	* FINDALL
	* FINDONE
	* FORALL
	* PLUS
	* EXISTS
	* MINUS
	* FALSE
	* TRUE
	* LSQB
	* ELLIPSIS
	* FLOAT_NUMBER
	* LPAR
	* COLON
	* VARNAME
	* STRING
	* OCT_NUMBER
	* DEC_NUMBER
	* HEX_NUMBER
	* TILDE
	* LONG_STRING
	* BIN_NUMBER
	* DO
	* NOT
	* IMAG_NUMBER
	* NONE

--------------------------------------------------------------------------------
Goal:  
def is_correct_coffee_table(table:item):
    # Determine if a table is the correct coffee table in the home office
    symbol correct_table = exists room: item : (is_home_office(room) and inside(table, room) and surfaces(table) and not visited(table))
    return correct_table

behavior put_book_on_table(book: item, table: item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        bind book_2091: item where:
            is_book(book_2091) and id[book_2091] == 2091
        # Select book_2091

        if not visited(home_office):
            observe(home_office, "Check which is the correct coffee table in the home office")

        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Check if this is the correct coffee table in the home office and if it lacks the book")
                if is_correct_coffee_table(table):
                    put_book_on_table(book_2091, table)
                    return

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_263_around_chair_263(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==263
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: dry_pasta_2073; available variables: [Variable<pot: item>, Variable<stove: item>].
--------------------------------------------------------------------------------
Goal:  
behavior add_water_to_pot(faucet:item, pot:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_items(pot:item, stove:item):
    body:
        achieve_once inside(dry_pasta_2073, pot)
        achieve_once inside(food_chicken_2050, pot)
        achieve_once is_on(stove)
        # Boil the items in the pot on the stove

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090

        add_water_to_pot(faucet, pot)
        boil_items(pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_coffee_filter_2035_around_wallshelf_191(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(coffee_filter,wallshelf_instance)
        else:
            exp(coffee_filter,wallshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,wallshelf_instance]=True
        close[wallshelf_instance,coffee_filter]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'o') at line 5870, column 46.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def is_correct_coffee_table(table: item):
    # Function to check if the specified table is the correct coffee table in the home office
    observe(table, "Check if this is the correct coffee table in the home office and if it lacks the book")
    symbol correct_coffee_table = not exists o: item : (is_book(o) and on(o, table))
    return correct_coffee_table

behavior place_book_on_table(book: item, table: item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book_2091: item where:
            is_book(book_2091) and id[book_2091] == 2091
        # Select book_2091
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        foreach table: item:
            if is_table(table) and surfaces(table) and not visited(table):
                inside(table, home_office)
                observe(table, "Check if this is the correct coffee table in the home office and if it lacks the book")
                if is_correct_coffee_table(table):
                    # If the correct coffee table is found, place the book on it
                    place_book_on_table(book_2091, table)
                    break

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
def is_correct_coffee_table(table: item):
    # Function to check if the specified table is the correct coffee table in the home office
    observe(table, "Check if this is the correct coffee table in the home office and if it lacks the book")
    symbol correct_coffee_table = exists o: item : (is_table(o) and not (is_book(o) and on(o, table)))
    return correct_coffee_table

behavior place_book_on_table(book: item, table: item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book_2091: item where:
            is_book(book_2091) and id[book_2091] == 2091
        # Select book_2091
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        foreach table: item:
            if is_table(table) and surfaces(table) and not visited(table):
                inside(table, home_office)
                observe(table, "Check if this is the correct coffee table in the home office and if it lacks the book")
                if is_correct_coffee_table(table):
                    # If the correct coffee table is found, place the book on it
                    place_book_on_table(book_2091, table)
                    break

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "function_definition":

Unknown variable: book_2091; available variables: [Variable<table: item>, Variable<o: item>].
--------------------------------------------------------------------------------
Goal:  
def correct_coffee_table_in_home_office(table: item):
    # Function to check if a table is the correct coffee table in the home office
    symbol is_correct_table=exists o: item : (is_table(o) and on(book_2091, o) and inside(o, home_office))
    return is_correct_table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        bind book_2091: item where:
            is_book(book_2091) and id[book_2091]==2091
        # Select book 2091
        
        if exists table: item : (is_table(table) and correct_coffee_table_in_home_office(table)):
            # If theres already a correct coffee table with the book in the home office, approach it
            bind table: item where:
                is_table(table) and correct_coffee_table_in_home_office(table)
            achieve on(book_2091, table)

        else:
            # If no such table exists, search for the correct coffee table inhome office
            foreach table: item:
                if is_table(table) and inside(table, home_office) and not visited(table):
                    observe(table, "Check if this is the correct coffee table in the home office")
                    # Observe each table to find the correct coffee table in the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_374_around_nightstand_373(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==373
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(chair,nightstand_instance)
        else:
            exp(chair,nightstand_instance)
    eff:
        unknown[chair]=False
        close[chair,nightstand_instance]=True
        close[nightstand_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Unknown variable: book_2091; available variables: [Variable<table: item>, Variable<o: item>].
--------------------------------------------------------------------------------
Goal:  
def correct_coffee_table_in_home_office(table: item):
    # Function to check if a table is the correct coffee table in the home office
    symbol is_correct_table=exists o: item : (is_table(o) and on(book_2091, o) and inside(o, home_office))
    return is_correct_table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        bind book_2091: item where:
            is_book(book_2091) and id[book_2091]==2091
        # Select book 2091

        if exists table: item : (is_table(table) and correct_coffee_table_in_home_office(table)):
            # If theres already a correct coffee table with the book in the home office, approach it
            bind table: item where:
                is_table(table) and correct_coffee_table_in_home_office(table)
            achieve on(book_2091, table)

        else:
            # If no such table exists, search for the correct coffee table in the home office
            foreach table: item:
                if is_table(table) and inside(table, home_office) and not visited(table):
                    observe(table, "Check if this is the correct coffee table in the home office")
                    # Observe each table to find the correct coffee table in the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_novel_2010_around_wallshelf_191(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(novel,wallshelf_instance)
        else:
            exp(novel,wallshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,wallshelf_instance]=True
        close[wallshelf_instance,novel]=True
    

behavior find_chair_2119_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'slice_kiwi') at line 5883, column 14.
Expected one of: 
	* RSHIFT
	* STAR
	* LSHIFT
	* NOT_EQ
	* AMPERSAND
	* __ANON_6
	* __ANON_5
	* __ANON_0
	* AND
	* __ANON_7
	* EQUAL
	* DOUBLE_EQUAL
	* __ANON_8
	* MINUS
	* __ANON_1
	* PERCENT
	* SLASH
	* LESSTHAN
	* OR
	* COMMA
	* MORETHAN
	* __ANON_4
	* PLUS
	* LESS_EQ
	* AT
	* FLOORDIV
	* SEMICOLON
	* _NEWLINE
	* CIRCUMFLEX
	* __ANON_2
	* GREATER_EQ
	* __ANON_3
	* IF
	* VBAR

--------------------------------------------------------------------------------
Goal: 
behavior slice_kiwi(kiwi:item):
    body:
        achieve_once cut(kiwi)

behavior add_slices_to_cup(slices:item, cup:item):
    body:
        achieve_once inside(slices, cup)

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        work slice_kiwi(kiwi)
        foreach slice: item:
            if is_food_fruit(slice) and cut(slice) and inside(slice, kiwi):
                add_slices_to_cup(slice, cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_kiwi_2060_around_cutting_board_2080(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_kiwi,cutting_board_instance)
        else:
            exp(food_kiwi,cutting_board_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,cutting_board_instance]=True
        close[cutting_board_instance,food_kiwi]=True
    

behavior find_cup_2087_around_sink_307(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'slice_kiwi') at line 5883, column 14.
Expected one of: 
	* RSHIFT
	* STAR
	* LSHIFT
	* NOT_EQ
	* AMPERSAND
	* __ANON_6
	* __ANON_5
	* __ANON_0
	* AND
	* __ANON_7
	* EQUAL
	* DOUBLE_EQUAL
	* __ANON_8
	* MINUS
	* __ANON_1
	* PERCENT
	* SLASH
	* LESSTHAN
	* OR
	* COMMA
	* MORETHAN
	* __ANON_4
	* PLUS
	* LESS_EQ
	* AT
	* FLOORDIV
	* SEMICOLON
	* _NEWLINE
	* CIRCUMFLEX
	* __ANON_2
	* GREATER_EQ
	* __ANON_3
	* IF
	* VBAR

--------------------------------------------------------------------------------
Goal:  
behavior slice_kiwi(kiwi:item):
    body:
        achieve_once cut(kiwi)

behavior add_slices_to_cup(slice:item, cup:item):
    body:
        achieve_once inside(slice, cup)

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        work slice_kiwi(kiwi)
        foreach slice: item:
            if is_food_fruit(slice) and cut(slice) and inside(slice, kiwi):
                add_slices_to_cup(slice, cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2088_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_kiwi_2060_around_cutting_board_2080(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_kiwi,cutting_board_instance)
        else:
            exp(food_kiwi,cutting_board_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,cutting_board_instance]=True
        close[cutting_board_instance,food_kiwi]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Behavior get_water already exists.
--------------------------------------------------------------------------------
Goal:  
behavior get_water(cup:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) # Move closer to the target faucet
        achieve is_on(faucet) # Turn on the specified faucet
        achieve has_water(cup) # Fill the cup with water from the faucet

behavior place_cup_in_fridge(cup:item, fridge:item):
    body:
        achieve_once inside(cup, fridge) # Place the cup inside the fridge
        achieve_once closed(fridge) # Ensure the fridge door is closed after placing the cup inside

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select the cup with ID 2087
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==308
        # Select the correct faucet to be used
        
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==140
        # Select the fridge with ID 140

        get_water(cup, faucet) # Execute behavior to get water in the cup
        place_cup_in_fridge(cup, fridge) # Execute behavior to store the cup in the fridge

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2089_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Behavior get_water already exists.
--------------------------------------------------------------------------------
Goal: behavior get_water(cup:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        achieve is_on(faucet) 
        achieve has_water(cup) 

behavior place_cup_in_fridge(cup:item, fridge:item):
    body:
        achieve_once inside(cup, fridge) 
        achieve_once closed(fridge) 

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==308
        
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==140

        get_water(cup, faucet) 
        place_cup_in_fridge(cup, fridge)
--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2089_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Unknown variable: faucet_308; available variables: [Variable<faucet: item>].
--------------------------------------------------------------------------------
Goal:  
def proper_faucet_used(faucet: item):
    # Function to check if the correct faucet is being used
    symbol used_faucet = faucet == faucet_308
    return used_faucet

behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        if proper_faucet_used(faucet):
            # If the correct faucet is being used, proceed to fill the cup
            achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308
        # Select the faucet with ID 308
        fill_cup_with_water(cup, faucet)

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_socks_2115_around_basket_for_clothes_2040(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

behavior find_cup_2087_around_computer_2110(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(cup,computer_instance)
        else:
            exp(cup,computer_instance)
    eff:
        unknown[cup]=False
        close[cup,computer_instance]=True
        close[computer_instance,cup]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5898, column 9.
Expected one of: 
	* __ANON_7
	* SEMICOLON
	* __ANON_2
	* PLUS
	* MINUS
	* AND
	* AT
	* COMMA
	* LSHIFT
	* CIRCUMFLEX
	* _NEWLINE
	* LESS_EQ
	* __ANON_6
	* NOT_EQ
	* IF
	* RSHIFT
	* __ANON_8
	* __ANON_1
	* DOUBLE_EQUAL
	* GREATER_EQ
	* FLOORDIV
	* EQUAL
	* VBAR
	* __ANON_0
	* __ANON_3
	* STAR
	* __ANON_5
	* MORETHAN
	* OR
	* SLASH
	* __ANON_4
	* PERCENT
	* LESSTHAN
	* AMPERSAND

--------------------------------------------------------------------------------
Goal: 
def fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select cup with ID 2087
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308
        # Select faucet with ID 308
        achieve_once on(cup, faucet)
        # Ensure cup is on faucet 308
        fill_cup_with_water(cup, faucet)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'o') at line 6008, column 54.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def has_water_and_kiwi(cup:item):
    # Function to check if the cup has water and kiwi
    symbol has_water_kiwi= has_water(cup) and exists o: item : (is_food_kiwi(o) and inside(o, cup))
    return has_water_kiwi

def is_kiwi_in_cup(cup:item):
    # Function to check if the kiwi is in the cup
    symbol kiwi_in_cup= exists o: item : (is_food_kiwi(o) and inside(o, cup))
    return kiwi_in_cup

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        # Ensure that the cup is filled with water

behavior add_kiwi_to_cup(food_kiwi:item, cup:item):
    body:
        achieve_once inside(food_kiwi, cup)
        # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        # Find a suitable cup
        bind faucet: item where:
            is_faucet(faucet)
        # Find a faucet to fill the cup
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi)
        # Find the kiwi
        if not has_water(cup):
            fill_cup_with_water(cup, faucet)
        if not is_kiwi_in_cup(cup):
            add_kiwi_to_cup(food_kiwi, cup)


--------------------------------------------------------------------------------
Exploration: 
behavior find_needle_2012_around_tvstand_135(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(needle,tvstand_instance)
        else:
            exp(needle,tvstand_instance)
    eff:
        unknown[needle]=False
        close[needle,tvstand_instance]=True
        close[tvstand_instance,needle]=True
    

behavior find_cup_2006_around_curtain_197(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==197
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(cup,curtain_instance)
        else:
            exp(cup,curtain_instance)
    eff:
        unknown[cup]=False
        close[cup,curtain_instance]=True
        close[curtain_instance,cup]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'o') at line 6008, column 54.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def has_water_and_kiwi(cup:item):
    # Function to check if the cup has water and kiwi
    symbol has_water_kiwi= has_water(cup) and exists o: item : (is_food_kiwi(o) and inside(o, cup))
    return has_water_kiwi

def is_kiwi_in_cup(cup:item):
    # Function to check if the kiwi is in the cup
    symbol kiwi_in_cup= exists o: item : (is_food_kiwi(o) and inside(o, cup))
    return kiwi_in_cup

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        # Ensure that the cup is filled with water

behavior add_kiwi_to_cup(food_kiwi:item, cup:item):
    body:
        achieve_once inside(food_kiwi, cup)
        # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        # Find a suitable cup
        bind faucet: item where:
            is_faucet(faucet)
        # Find a faucet to fill the cup
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi)
        # Find the kiwi
        if not has_water(cup):
            fill_cup_with_water(cup, faucet)
        if not is_kiwi_in_cup(cup):
            add_kiwi_to_cup(food_kiwi, cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_needle_2012_around_basket_for_clothes_2040(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(needle,basket_for_clothes_instance)
        else:
            exp(needle,basket_for_clothes_instance)
    eff:
        unknown[needle]=False
        close[needle,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,needle]=True
    

behavior find_cup_2006_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable table already exists.
--------------------------------------------------------------------------------
Goal:  
def book_is_on_table(table:item, book:item):
    # Check if the book is already on the table
    symbol is_book_on_table=exists table: item : (on(book, table))
    return is_book_on_table

def is_home_office_table(table:item):
    # Check if the table is in the home office
    symbol in_home_office= exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select a table in the home office

        bind book: item where:
            is_book(book)
        # Select a book

        if not book_is_on_table(table, book):
            # If the book is not already on the table
            achieve close_char(char, book) # Approach the book
            place_book_on_table(book, table) # Place the book on the table

--------------------------------------------------------------------------------
Exploration: 
behavior find_book_2092_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: is_home_office; available variables: [Variable<book: item>, Variable<bookshelf: item>, Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior pick_book_from_bookshelf(book:item, bookshelf:item, table:item):
    body:
        achieve_once inside_char(char, is_home_office) # Ensure the character is inside the home office
        achieve_once close_char(char, bookshelf) # Approach the bookshelf
        achieve_once inhand(book) # Pick up the book
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind bookshelf: item where:
            is_bookshelf(bookshelf)
        bind table: item where:
            is_table(table) and inside(table, is_home_office)
        pick_book_from_bookshelf(book, bookshelf, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_book_2091_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: bathroom; available variables: [Variable<sink: item>].
--------------------------------------------------------------------------------
Goal:  
behavior wash_underwear(underwear:item, soap:item, sink:item):
    body:
        achieve_once close_char(char, sink) # Get close to the sink where the washing is to be done
        achieve_once inside(underwear, sink) # Place the underwear in the sink
        if not has_water(sink):
            achieve has_water(sink) # Ensure the sink has water
        achieve_once clean(underwear) # Wash the underwear using soap and water in the sink

behavior __goal__():
    body:
        bind underwear: item where:
            is_clothes_underwear(underwear)
        # Select the underwear to be washed

        bind soap: item where:
            is_soap(soap)
        # Select a soap for washing

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select a sink in the bathroom

        wash_underwear(underwear, soap, sink) # Execute the washing behavior

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_clothes_underwear_2022_around_basket_for_clothes_2040(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: bathroom; available variables: [Variable<sink: item>].
--------------------------------------------------------------------------------
Goal:  
behavior wash_underwear(underwear:item, soap:item, sink:item):
    body:
        achieve_once close_char(char, sink) # Get close to the sink where the washing is to be done
        achieve_once inside(underwear, sink) # Place the underwear in the sink
        if not has_water(sink):
            achieve has_water(sink) # Ensure the sink has water
        achieve_once clean(underwear) # Wash the underwear using soap and water in the sink

behavior __goal__():
    body:
        bind underwear: item where:
            is_clothes_underwear(underwear)
        # Select the underwear to be washed

        bind soap: item where:
            is_soap(soap)
        # Select a soap for washing

        bind sink: item where:
            is_sink(sink) and inside_char(char, bathroom)
        # Select a sink in the bathroom

        wash_underwear(underwear, soap, sink) # Execute the washing behavior

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2038_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_clothes_underwear_2022_around_basket_for_clothes_2040(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal: behavior pick_book_from_bookshelf(book:item, bookshelf:item, table:item, home_office:item):
    body:
        achieve_once inside_char(char, home_office) # Ensure the character is inside the home office
        achieve_once close_char(char, bookshelf) # Approach the bookshelf
        achieve_once inhand(book) # Pick up the book
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind bookshelf: item where:
            is_bookshelf(bookshelf)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        bind home_office: item where:
            is_home_office(home_office)
        pick_book_from_bookshelf(book, bookshelf, table, home_office)
--------------------------------------------------------------------------------
Exploration: 
behavior find_novel_2010_around_bookshelf_260(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2091_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

################################################################################

Error: Unexpected token Token('RPAR', ')') at line 5804, column 65.
Expected one of: 
	* RSQB
	* COMMA

--------------------------------------------------------------------------------
Goal:  
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once open(faucet) # Open the faucet to allow water to flow
        achieve has_water(bowl) # Fill the bowl with water

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select the bowl with ID 2095

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134 or id[faucet) == 308
        # Select a faucet, ensuring it is one of the known faucets (134 or 308)

        fill_bowl_with_water(bowl, faucet) # Fill the selected bowl with water using the selected faucet

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2096_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<home_office_table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior observe_home_office_table(home_office_table:item):
    body:
        observe(home_office_table, "Check surface suitability and location confirmation")

behavior __goal__():
    body:
        bind home_office_table: item where:
            is_table(home_office_table) and inside(home_office_table, home_office)
        # Select the table in the home office

        if not visited(home_office_table):
            observe_home_office_table(home_office_table)
            # Observe the table to ensure it is suitable for placing the bowl

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl filled with water
        
        achieve on(bowl, home_office_table)
        # Place the bowl on the table in the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2096_around_home_office_161(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(bowl,home_office_instance)
        else:
            exp(bowl,home_office_instance)
    eff:
        unknown[bowl]=False
        close[bowl,home_office_instance]=True
        close[home_office_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function observe_home_office_table not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal: 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind home_office_table: item where:
            is_table(home_office_table) and inside(home_office_table, home_office)
        # Select the table in the home office

        if not visited(home_office_table):
            observe_home_office_table(home_office_table)
            # Observe the table to ensure it is suitable for placing the bowl

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl filled with water
        
        achieve on(bowl, home_office_table)
        # Place the bowl on the table in the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2097_around_home_office_161(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(bowl,home_office_instance)
        else:
            exp(bowl,home_office_instance)
    eff:
        unknown[bowl]=False
        close[bowl,home_office_instance]=True
        close[home_office_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior find_cat_and_place_on_table(cat:item, table:item):
    body:
        achieve close_char(char, cat)
        # Move the character close to the cat
        achieve_once close_char(char, table)
        # Ensure the character is close to the table in the home office
        achieve_once on(cat, table)
        # Place the cat on the table in the home office

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat
        bind table: item where:
            is_table(table) and inside_char(char, table) and inside(table, home_office)
        # Find a table inside the home office
        find_cat_and_place_on_table(cat, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cat_2082_around_home_office_161(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cat,home_office_instance)
        else:
            exp(cat,home_office_instance)
    eff:
        unknown[cat]=False
        close[cat,home_office_instance]=True
        close[home_office_instance,cat]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior find_cat(cat: item):
    body:
        achieve_once close_char(char, cat)
        # Approach the cat

behavior place_cat_on_table(cat:item, table:item):
    body:
        achieve_once on(cat, table)
        # Temporarily place the cat on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office
        
        bind cat: item where:
            is_cat(cat)
        # Select the cat in the scene

        find_cat(cat)
        place_cat_on_table(cat, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cat_2082_around_home_office_161(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cat,home_office_instance)
        else:
            exp(cat,home_office_instance)
    eff:
        unknown[cat]=False
        close[cat,home_office_instance]=True
        close[home_office_instance,cat]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_noodles_2062; available variables: [Variable<pot: item>, Variable<stove: item>].
--------------------------------------------------------------------------------
Goal:  
behavior boil_contents(pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once inside(food_noodles_2062, pot)
        # Ensure the noodles are inside the pot
        achieve_once inside(food_chicken_2050, pot)
        # Ensure the chicken is inside the pot
        achieve on(pot, stove)
        # Ensure the pot is on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090

        boil_contents(pot, stove)
        # Boil noodles and chicken in the pot on the stove

--------------------------------------------------------------------------------
Exploration: 
behavior find_shoes_2001_around_dresser_377(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

behavior find_box_2023_around_pot_2093(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(box,pot_instance)
        else:
            exp(box,pot_instance)
    eff:
        unknown[box]=False
        close[box,pot_instance]=True
        close[pot_instance,box]=True
    

behavior find_oil_2005_around_microwave_149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function achieve_on not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal: 
behavior check_pot_water(pot:item):
    body:
        if not has_water(pot):
            achieve has_water(pot)
        # Ensure there is water in the pot

behavior boil_noodles_and_chicken(pot:item, stove:item, noodles:item, chicken:item):
    body:
        achieve_once inside(noodles, pot)
        # Put noodles inside the pot
        achieve_once inside(chicken, pot)
        # Put chicken inside the pot
        achieve_on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the contents

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090
        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles] == 2062
        # Select the noodles with ID 2062
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select the chicken with ID 2050
        check_pot_water(pot)
        boil_noodles_and_chicken(pot, stove, noodles, chicken)

--------------------------------------------------------------------------------
Exploration: 
behavior find_shoes_2001_around_dresser_377(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and readable(book)
        # Select a book that is readable
        
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table with a surface inside the home office
        
        place_book_on_coffee_table(book, coffee_table)
        # Place the selected book on the coffee table

--------------------------------------------------------------------------------
Exploration: 
behavior find_novel_2010_around_bookshelf_260(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2092_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
def correct_book_on_table(table:item):
    # Function to check if the correct book is on the specified table
    symbol correct_book=exists o: item : (is_book(o) and id[o] == 2091 and on(o, table))
    return correct_book

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_home_office(home_office) and inside(table, home_office)
        # Select table in the home office
        
        if not correct_book_on_table(table):
            # If book_2091 is not on the table in the home office
            bind book: item where:
                is_book(book) and id[book] == 2091
            # Select book_2091
            place_book_on_table(book, table)
        # Execute if necessary, place the correct book on the table

--------------------------------------------------------------------------------
Exploration: 
behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Unknown variable: pot; available variables: [Variable<milk: item>, Variable<cup: item>, Variable<stove: item>].
--------------------------------------------------------------------------------
Goal:  
def prepare_hot_milk_in_cup(milk: item, cup: item, stove: item):
    # Begin heating the milk to prepare it for serving
    achieve_once inside(milk, pot)
    # Ensure milk is heated using a pot
    achieve_once on(pot, stove)
    # Place pot on stove for boiling
    achieve_once is_on(stove)
    # Turn the stove on to heat the milk
    achieve clean(cup)
    # Ensure the cup is clean before pouring hot milk
    achieve_once inside(milk, cup)
    # Pour heated milk into a cup
    achieve_once is_off(stove)
    # Turn off the stove after heating milk

def place_on_table(obj: item, table: item):
    # Move the item to the table in the home office
    achieve_once on(obj, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Identify the coffee table in the home office
        bind milk: item where:
            is_milk(milk)
        # Identify milk
        bind cup: item where:
            is_cup(cup)
        # Identify cup
        bind stove: item where:
            is_stove(stove)
        # Identify stove
        prepare_hot_milk_in_cup(milk, cup, stove)
        place_on_table(cup, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_pot_2093_around_fridge_140(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

behavior find_cup_2088_around_fridge_140(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(cup,fridge_instance)
        else:
            exp(cup,fridge_instance)
    eff:
        unknown[cup]=False
        close[cup,fridge_instance]=True
        close[fridge_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
def prepare_hot_milk_in_cup(milk: item, cup: item, stove: item, pot: item):
    # Begin heating the milk to prepare it for serving
    achieve_once inside(milk, pot)
    # Ensure milk is heated using a pot
    achieve_once on(pot, stove)
    # Place pot on stove for boiling
    achieve_once is_on(stove)
    # Turn the stove on to heat the milk
    achieve clean(cup)
    # Ensure the cup is clean before pouring hot milk
    achieve_once inside(milk, cup)
    # Pour heated milk into a cup
    achieve_once is_off(stove)
    # Turn off the stove after heating milk

def place_on_table(obj: item, table: item):
    # Move the item to the table in the home office
    achieve_once on(obj, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Identify the coffee table in the home office
        bind milk: item where:
            is_milk(milk)
        # Identify milk
        bind cup: item where:
            is_cup(cup)
        # Identify cup
        bind stove: item where:
            is_stove(stove)
        # Identify stove
        bind pot: item where:
            is_pot(pot)
        # Identify pot
        prepare_hot_milk_in_cup(milk, cup, stove, pot)
        place_on_table(cup, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_pot_54_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_cup_2089_around_fridge_140(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(cup,fridge_instance)
        else:
            exp(cup,fridge_instance)
    eff:
        unknown[cup]=False
        close[cup,fridge_instance]=True
        close[fridge_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Error during applying inside[observation, state](x: item, y: item).
  Arguments: V::house, O::char
Argument #1 type does not match: expect item, got character.
--------------------------------------------------------------------------------
Goal:  
def has_window_in_house(house:item):
    # Function to check if there are windows in the house
    symbol has_window = exists o: item : (is_window(o) and inside(o, house))
    return has_window

behavior __goal__():
    body:
        if exists house: item : (inside(house, char) and has_window_in_house(house)):
            # If there are windows in the house, find one to observe
            bind window: item where:
                is_window(window) and inside(window, char)
            achieve visited(window)
        
        else:
            # If no record of windows, search for each unvisited window within the house
            foreach window: item:
                if is_window(window) and not visited(window):
                    observe(window,"Identify all the windows in the house")

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Error during applying inside[observation, state](x: item, y: item).
  Arguments: V::window, O::char
Argument #1 type does not match: expect item, got character.
--------------------------------------------------------------------------------
Goal:  
def has_window_in_house(house:item):
    # Function to check if there are windows in the house
    symbol has_window = exists o: item : (is_window(o) and inside(o, house))
    return has_window

behavior __goal__():
    body:
        if exists house: item : (inside_char(char, house) and has_window_in_house(house)):
            # If there are windows in the house, find one to observe
            bind window: item where:
                is_window(window) and inside(window, char)
            achieve visited(window)
        
        else:
            # If no record of windows, search for each unvisited window within the house
            foreach window: item:
                if is_window(window) and not visited(window):
                    observe(window,"Identify all the windows in the house")

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: window; available variables: [Variable<room: item>].
--------------------------------------------------------------------------------
Goal:  
def is_window_in_room(window:item, room:item):
    # Function to check if a window is inside a specific room
    symbol window_in_room = exists w: item : (is_window(w) and inside(w, room))
    return window_in_room

behavior identify_windows_in_room(room:item):
    body:
        foreach window: item:
            if is_window(window) and inside(window, room) and not visited(window):
                observe(window, "Identify the window in the room")
                # Observe the window to identify it

behavior __goal__():
    body:
        foreach room: item:
            # Iterate through all rooms
            if not visited(room):
                observe(room, "Check for windows inside the room")
                # Observe the room to check for windows inside it
        
        foreach room: item:
            # Iterate through all rooms again for identification of windows
            if is_window_in_room(window, room):
                identify_windows_in_room(room)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl) # A bowl with water
        bind table: item where:
            is_table(table) and inside(table, home_office) # A table inside the home office
        place_bowl_on_table(bowl, table) # Place the bowl with water on the table in the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2095_around_home_office_161(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(bowl,home_office_instance)
        else:
            exp(bowl,home_office_instance)
    eff:
        unknown[bowl]=False
        close[bowl,home_office_instance]=True
        close[home_office_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: kitchen_storage; available variables: [Variable<section: item>].
--------------------------------------------------------------------------------
Goal:  
def has_vegetables_in_section(section:item):
    # Function to check if there are vegetables in the specified storage section
    symbol has_vegetables= exists o: item : (is_food_vegetable(o) and inside(o,section))
    return has_vegetables

behavior __goal__():
    body:
        if exists section: item : (inside(section, kitchen_storage) and has_vegetables_in_section(section)):
            # Check if there is a section in the kitchen storage area containing vegetables
            bind section: item where:
                inside(section, kitchen_storage) and has_vegetables_in_section(section)
            # Move the character closer to the section with vegetables
            achieve close_char(char, section)
        
        else:
            # If no section with vegetables is found, initiate exploration to locate one
            foreach section: item:
                if inside(section, kitchen_storage) and not visited(section):
                    observe(section, "Check if there are any vegetables in this section")

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_kiwi_2060_around_fridge_140(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_food_onion_2026_around_fridge_140(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_potato_2066_around_fridge_140(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal: 
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)
        # Select a table within the home office with a surface
        
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl that has water in it
        
        achieve on(bowl, table)
        # Place the bowl on the selected table

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal: behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl with water

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        place_bowl_on_table(bowl, table)
--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_gloves_2077_around_basket_for_clothes_2040(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'room') at line 5934, column 40.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

--------------------------------------------------------------------------------
Goal:  
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl with water

        bind table: item where:
            is_table(table) and exists room: item : (is_home_office(room) and inside(table, room))
        # Select a table in the home office

        place_bowl_on_table(bowl, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2088_around_tvstand_135(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cup,tvstand_instance)
        else:
            exp(cup,tvstand_instance)
    eff:
        unknown[cup]=False
        close[cup,tvstand_instance]=True
        close[tvstand_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: room; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior put_on_table(table:item, bowl:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table)
            is_home_office(room) and inside(table, room) # Ensure the table is in the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water in it

        put_on_table(table, bowl)
        # Execute the behavior to put the bowl on the table in the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_gloves_2077_around_basket_for_clothes_2040(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'is_on') at line 5762, column 24.
Expected one of: 
	* COLON

--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer in the home office

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office where the computer is located

        if not achieve is_on(computer):
            achieve_once inside_char(char, home_office)
            # Ensure you are inside the home office first
            achieve_once close_char(char, computer)
            # Move closer to the computer to turn it on
            achieve is_on(computer)
            # Turn on the computer

--------------------------------------------------------------------------------
Exploration: 
behavior find_keyboard_2111_around_desk_375(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the specified table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        move_bowl_to_table(bowl, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_gloves_2077_around_basket_for_clothes_2040(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

################################################################################

Error: Unexpected token Token('BASIC_TYPENAME', 'javascript') at line 5939, column 1.
Expected one of: 
	* OBJECTS
	* INIT
	* GOAL
	* TYPEDEF
	* BEHAVIOR
	* UNDIRECTED_GENERATOR
	* _PRAGMA_KEYWORD
	* DEF
	* INCLUDE
	* $END
	* DOMAIN
	* FEATURE
	* GENERATOR
	* IMPORT
	* CONTROLLER
	* _NEWLINE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

--------------------------------------------------------------------------------
Goal: javascript
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the specified table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        bind home_office: item where:
            is_home_office(home_office)
        # Define home_office as an item of type home_office

        move_bowl_to_table(bowl, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        achieve on(bowl, table)
        # Place the bowl filled with water on the table in the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_clothes_gloves_2077_around_basket_for_clothes_2040(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'room') at line 5929, column 40.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind table: item where:
            is_table(table) and exists room: item : (is_home_office(room) and inside(table, room))
        # Select a table in the home office

        achieve on(bowl, table)
        # Place the bowl filled with water on the table in the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_clothes_gloves_2077_around_basket_for_clothes_2040(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function is_containers not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
def has_milk_or_cereal_in_container(container:item):
    # Function to check if there is milk or cereal in a specified container
    symbol has_milk_or_cereal= exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside(o, container))
    return has_milk_or_cereal

behavior __goal__():
    body:
        if exists container: item : (is_containers(container) and has_milk_or_cereal_in_container(container)):
            # If we have already found the container with milk or cereal, we can directly approach it
            bind container: item where:
                is_containers(container) and has_milk_or_cereal_in_container(container)
            achieve close_char(char, container)

        else:
            # Check all containers that have not been visited in the scene
            foreach container: item:
                if is_containers(container) and not visited(container):
                    observe(container, "Check is there any milk or cereal in the container")

--------------------------------------------------------------------------------
Exploration: 
behavior find_juice_2034_around_kitchen_counter_132(juice:item):
    goal: not unknown(juice)
    body:
        assert is_juice(juice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(juice,kitchen_counter_instance)
        else:
            exp(juice,kitchen_counter_instance)
    eff:
        unknown[juice]=False
        close[juice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,juice]=True
    

behavior find_food_bread_2016_around_kitchen_counter_129(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: dry_pasta_2073; available variables: [Variable<pot: item>, Variable<stove: item>].
--------------------------------------------------------------------------------
Goal: behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve open(pot)
        # Ensure the pot is open to fill with water
        achieve has_water(pot)
        # Fill the pot with water from the faucet
        achieve_once closed(pot)
        # Close the pot after filling it

behavior boil_pasta(pot:item, stove:item):
    body:
        achieve_once inside(dry_pasta_2073, pot)
        # Insert dry pasta into the pot with water
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the pasta

behavior cook_chicken(food:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(food, fryingpan)
        # Place chicken in the frying pan
        achieve on(fryingpan, stove)
        # Place the pan on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134

        fill_pot_with_water(pot, faucet)
        # Fill pot with water for boiling pasta

        boil_pasta(pot, stove)
        # Boil pasta in the pot

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        # Select frying pan with ID 2107

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select food chicken with ID 2050

        cook_chicken(chicken, fryingpan, stove)
        # Cook the chicken in the frying pan
--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2103_around_table_123(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'in') at line 5984, column 21.
Expected one of: 
	* COLON

--------------------------------------------------------------------------------
Goal:  
behavior put_items_in_fridge(items: list, fridge: item):
    body:
        foreach item: item:
            if item in items:
                achieve_once inside(item, fridge)

behavior close_the_fridge(fridge: item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        symbol items = [milk, egg]
        put_items_in_fridge(items, fridge)
        close_the_fridge(fridge)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_bread_2016_around_kitchen_counter_128(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_keyboard_2111_around_computer_2110(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'in') at line 5947, column 21.
Expected one of: 
	* COLON

--------------------------------------------------------------------------------
Goal: behavior put_items_in_fridge(items: list, fridge: item):
    body:
        foreach item: item:
            if item in items:
                achieve_once inside(item, fridge)

behavior close_the_fridge(fridge: item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        symbol items = [milk, egg]
        put_items_in_fridge(items, fridge)
        close_the_fridge(fridge)
--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "function_definition":

Foreach statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
behavior add_water_and_sugar(cup:item, sugar:item, water_source:item):
    body:
        # Ensure the cup contains water
        achieve_once has_water(cup)
        # Place the sugar inside the cup
        achieve_once inside(sugar, cup)

def find_water_source():
    # A function to find a water source
    foreach w: item:
        if can_open(w) and not visited(w):
            observe(w, "Verify if this is a water source")

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select a sugar
        
        if exists water_source: item : (can_open(water_source) and visited(water_source)):
            bind water_source: item where:
                can_open(water_source) and visited(water_source)
            add_water_and_sugar(cup, sugar, water_source)
        else:
            find_water_source()

--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_clothes_hat_2076_around_bookshelf_136(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(clothes_hat,bookshelf_instance)
        else:
            exp(clothes_hat,bookshelf_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,bookshelf_instance]=True
        close[bookshelf_instance,clothes_hat]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Foreach statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
behavior add_water_and_sugar(cup:item, sugar:item, water_source:item):
    body:
        # Ensure the cup contains water
        achieve_once has_water(cup)
        # Place the sugar inside the cup
        achieve_once inside(sugar, cup)

def find_water_source():
    # A function to find a water source
    foreach w: item:
        if can_open(w) and not visited(w):
            observe(w, "Verify if this is a water source")

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select a sugar

        if exists ws: item : (can_open(ws) and visited(ws)):
            bind water_source: item where:
                can_open(water_source) and visited(water_source)
            add_water_and_sugar(cup, sugar, water_source)
        else:
            find_water_source()

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_socks_2115_around_basket_for_clothes_2040(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_sugar_2070; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal:  
behavior stir_lemon_water(cup:item, stirrer:item):
    body:
        achieve_once on(stirrer, cup)
        # Place the stirrer on the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup) and inside(food_sugar_2070, cup) and inside(food_lemon_2061, cup)
        # Select the cup containing lemon, sugar, and water

        bind knife: item where:
            is_knife(knife) and on(knife, cup)
        # Select the knife resting on the cup as the stirrer

        stir_lemon_water(cup, knife)

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2104_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_cup_2006_around_table_193(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'sugar') at line 5945, column 55.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

--------------------------------------------------------------------------------
Goal:  
behavior stir_lemon_water(cup:item, stirrer:item):
    body:
        achieve_once on(stirrer, cup)
        # Place the stirrer on the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup) and exists sugar: item : (is_food_sugar(sugar) and inside(sugar, cup)) and inside(food_lemon_2061, cup)
        # Select the cup containing lemon, sugar, and water

        bind knife: item where:
            is_knife(knife) and on(knife, cup)
        # Select the knife resting on the cup as the stirrer

        stir_lemon_water(cup, knife)

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2103_around_fork_2103(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind fork_instance:item where:
            is_fork(fork_instance) and id[fork_instance]==2103
        achieve close_char(char,fork_instance)
        if can_open(fork_instance):
            achieve_once open(fork_instance)
            exp(fork,fork_instance)
        else:
            exp(fork,fork_instance)
    eff:
        unknown[fork]=False
        close[fork,fork_instance]=True
        close[fork_instance,fork]=True
    

behavior find_cup_2006_around_tablelamp_359(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind tablelamp_instance:item where:
            is_tablelamp(tablelamp_instance) and id[tablelamp_instance]==359
        achieve close_char(char,tablelamp_instance)
        if can_open(tablelamp_instance):
            achieve_once open(tablelamp_instance)
            exp(cup,tablelamp_instance)
        else:
            exp(cup,tablelamp_instance)
    eff:
        unknown[cup]=False
        close[cup,tablelamp_instance]=True
        close[tablelamp_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter; available variables: [Variable<cup: item>, Variable<utensil: item>].
--------------------------------------------------------------------------------
Goal:  
behavior stir_contents(cup:item, utensil:item):
    body:
        achieve_once close_char(char, cup) # Move close to the cup
        achieve_once inhand(utensil) # Hold the selected utensil in hand
        achieve_once clean(utensil) # Ensure the utensil is clean for stirring
        achieve_once inside(cup, kitchen_counter) # Make sure the cup is on a stable surface for stirring
        # Stirring action will be considered performed here for this behavior

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and on(knife_2036, cup) # Select the cup
        bind utensil: item where:
            is_knife(utensil) and id[utensil] == 2036 
        stir_contents(cup, utensil) # Stir the contents of the cup with the knife

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2103_around_fork_2103(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind fork_instance:item where:
            is_fork(fork_instance) and id[fork_instance]==2103
        achieve close_char(char,fork_instance)
        if can_open(fork_instance):
            achieve_once open(fork_instance)
            exp(fork,fork_instance)
        else:
            exp(fork,fork_instance)
    eff:
        unknown[fork]=False
        close[fork,fork_instance]=True
        close[fork_instance,fork]=True
    

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: knife_2036; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal:  
behavior stir_contents(cup:item, utensil:item, kitchen_counter:item):
    body:
        achieve_once close_char(char, cup) # Move close to the cup
        achieve_once inhand(utensil) # Hold the selected utensil in hand
        achieve_once clean(utensil) # Ensure the utensil is clean for stirring
        achieve_once inside(cup, kitchen_counter) # Ensure the cup is on a stable surface for stirring

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and on(knife_2036, cup) # Select the cup
        bind utensil: item where:
            is_knife(utensil) and id[utensil] == 2036 
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        stir_contents(cup, utensil, kitchen_counter) # Stir the contents of the cup with the knife

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2103_around_kitchen_counter_129(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'inside') at line 5943, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
behavior stir_mixture(spoon:item, cup:item):
    body:
        achieve_once clean(spoon)
        # Ensure the spoon is clean before starting
        achieve_once close(spoon, cup)
        # Make sure the spoon is close to the cup
        achieve Once inside(spoon, cup)
        # Insert the spoon into the cup
        achieve_once clean(cup)
        # Stir the mixture in a circular motion to dissolve the sugar evenly

behavior __goal__():
    body:
        bind spoon: item where:
            is_fork(spoon) or is_knife(spoon) or is_spoon(spoon)
        # Select a suitable stirrer (spoon, fork, or knife)
        
        bind cup: item where:
            is_cup(cup) and not visited(cup)
        # Select a cup that has not been visited

        stir_mixture(spoon, cup)
        # Stir the lemon water mixture with the chosen spoon

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2104_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_cup_2006_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_sugar; available variables: [Variable<spoon: item>, Variable<cup: item>].
--------------------------------------------------------------------------------
Goal:  
behavior stir_mixture(spoon: item, cup: item):
    body:
        achieve clean(spoon)
        # Ensure the spoon is clean before using

        achieve inside(food_sugar, cup)
        # Make sure the sugar is inside the cup

        achieve inside(food_lemon, cup)
        # Make sure the lemon is inside the cup

        foreach o: item:
            if surfaces(o):
                achieve_once on(cup, o)
                # Place the cup on a stable surface for stirring

        foreach o: item:
            if grabbable(o) and is_spoon(o):
                achieve_once inhand(o)
                # Only hold the spoon for stirring

behavior __goal__():
    body:
        bind spoon: item where:
            is_fork(spoon) or is_knife(spoon) or is_spoon(spoon)
            # Bind any suitable utensil for the stirring task

        bind cup: item where:
            is_cup(cup) and inside(food_sugar, cup) and inside(food_lemon, cup)
            # Bind the cup containing sugar and lemon

        stir_mixture(spoon, cup)
        # Stir the mixture until the sugar is evenly dissolved

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2103_around_fork_2103(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind fork_instance:item where:
            is_fork(fork_instance) and id[fork_instance]==2103
        achieve close_char(char,fork_instance)
        if can_open(fork_instance):
            achieve_once open(fork_instance)
            exp(fork,fork_instance)
        else:
            exp(fork,fork_instance)
    eff:
        unknown[fork]=False
        close[fork,fork_instance]=True
        close[fork_instance,fork]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_sugar; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal:  
behavior stir_mixture(spoon: item, cup: item, food_sugar: item, food_lemon: item):
    body:
        achieve clean(spoon)
        # Ensure the spoon is clean before using

        achieve inside(food_sugar, cup)
        # Make sure the sugar is inside the cup

        achieve inside(food_lemon, cup)
        # Make sure the lemon is inside the cup

        foreach o: item:
            if surfaces(o):
                achieve_once on(cup, o)
                # Place the cup on a stable surface for stirring

        foreach o: item:
            if grabbable(o) and is_spoon(o):
                achieve_once inhand(o)
                # Only hold the spoon for stirring

behavior __goal__():
    body:
        bind spoon: item where:
            is_fork(spoon) or is_knife(spoon) or is_spoon(spoon)
            # Bind any suitable utensil for the stirring task

        bind cup: item where:
            is_cup(cup) and inside(food_sugar, cup) and inside(food_lemon, cup)
            # Bind the cup containing sugar and lemon

        bind food_sugar: item where:
            is_food_sugar(food_sugar)
            # Bind the food_sugar item

        bind food_lemon: item where:
            is_food_lemon(food_lemon)
            # Bind the food_lemon item

        stir_mixture(spoon, cup, food_sugar, food_lemon)
        # Stir the mixture until the sugar is evenly dissolved

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2104_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_sugar_2070; available variables: [Variable<cup: item>, Variable<spoon: item>].
--------------------------------------------------------------------------------
Goal:  
behavior stir_lemon_water_with_spoon(cup:item, spoon:item):
    body:
        achieve_once clean(spoon)
        achieve_once inside(spoon, cup)
        # The spoon is clean and placed inside the cup
        achieve inside(food_sugar_2070, cup)
        # The sugar is inside the cup and stirred until dissolved

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with the id 2087
        bind spoon: item where:
            is_knife(spoon) # Use a spoon or a knifelike item to stir
        stir_lemon_water_with_spoon(cup, spoon)

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2104_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'sugar') at line 5934, column 55.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

--------------------------------------------------------------------------------
Goal: 
behavior stir_lemon_water_mixture(cup:item, spoon:item):
    body:
        achieve clean(spoon)
        achieve inside(food_sugar, cup)
        achieve inside(food_lemon, cup)
        achieve has_water(cup)
        achieve_once inhand(spoon)
        # Stir will happen here to dissolve sugar in the mixture
        # The achieve statements ensure that the necessary conditions are maintained

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup) and exists sugar: item : (is_food_sugar(sugar) and inside(sugar, cup)) and exists lemon: item : (is_food_lemon(lemon) and inside(lemon, cup))
        # Bind the cup with water, sugar, and lemon inside it

        bind spoon: item where:
            is_fork(spoon) or is_knife(spoon) or is_fork(spoon) # Assuming spoon is one of these, selecting a suitable stirrer
        stir_lemon_water_mixture(cup, spoon)

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2104_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'sugar_item') at line 5934, column 55.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

--------------------------------------------------------------------------------
Goal:  
behavior stir_lemon_water_mixture(cup:item, spoon:item):
    body:
        achieve clean(spoon)
        achieve inside(food_sugar, cup)
        achieve inside(food_lemon, cup)
        achieve has_water(cup)
        achieve_once inhand(spoon)
        # Stir will happen here to dissolve sugar in the mixture
        # The achieve statements ensure that the necessary conditions are maintained

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup) and exists sugar_item: item : (is_food_sugar(sugar_item) and inside(sugar_item, cup)) and exists lemon_item: item : (is_food_lemon(lemon_item) and inside(lemon_item, cup))
        # Bind the cup with water, sugar, and lemon inside it

        bind spoon: item where:
            is_spoon(spoon) or is_knife(spoon) or is_fork(spoon) # Assuming spoon is one of these, selecting a suitable stirrer
        stir_lemon_water_mixture(cup, spoon)

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2103_around_microwave_149(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(fork,microwave_instance)
        else:
            exp(fork,microwave_instance)
    eff:
        unknown[fork]=False
        close[fork,microwave_instance]=True
        close[microwave_instance,fork]=True
    

################################################################################

Error: {'self': <concepts.dm.crow.executors.crow_executor.CrowExecutionDefaultVisitor object at 0x7f78ece353d0>, 'rv': Value[bool, axes=[], tdtype=torch.int64, tdshape=(), quantized]{tensor(1)}, 'function_argument_variables': (Variable<mixture: item>,), 'outer_arguments': (VariableExpression<V::mixture>,), 'argument_values': (slice(None, None, None),), 'output_batch_variables': [], 'function_argument_variable': Variable<mixture: item>, 'outer_argument_expr': VariableExpression<V::mixture>, 'argument_value': slice(None, None, None)}
--------------------------------------------------------------------------------
Goal:  
def is_sugar_dissolved(mixture:item):
    # Function to check if sugar is fully dissolved in the mixture
    symbol dissolved= exists spoon: item : (is_fork(spoon) or is_knife(spoon) or is_cup(spoon)) and clean(spoon)
    return dissolved

behavior stir_mixture(spoon:item, cup:item):
    body:
        achieve_once clean(spoon)
        # Ensure spoon is clean before stirring
        achieve_once inside(spoon, cup)
        # Stir using spoon until sugar dissolves evenly in the cup
        
behavior __goal__():
    body:
        bind spoon: item where:
            is_knife(spoon) or is_fork(spoon) or is_cup(spoon)
        bind mixture: item where:
            is_cup(mixture) and not is_sugar_dissolved(mixture)
        # Bind the necessary items for stirring operation
        stir_mixture(spoon, mixture)

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2103_around_fork_2103(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind fork_instance:item where:
            is_fork(fork_instance) and id[fork_instance]==2103
        achieve close_char(char,fork_instance)
        if can_open(fork_instance):
            achieve_once open(fork_instance)
            exp(fork,fork_instance)
        else:
            exp(fork,fork_instance)
    eff:
        unknown[fork]=False
        close[fork,fork_instance]=True
        close[fork_instance,fork]=True
    

behavior find_cup_2089_around_bench_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==122
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(cup,bench_instance)
        else:
            exp(cup,bench_instance)
    eff:
        unknown[cup]=False
        close[cup,bench_instance]=True
        close[bench_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function is_clean not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior stir_mixture(spoon:item, cup:item):
    body:
        achieve_once inhand(spoon)
        # Hold the spoon
        achieve clean(spoon)
        # Ensure the spoon is clean
        achieve_once close_char(char, cup)
        # Approach the cup to stir the mixture

behavior __goal__():
    body:
        bind spoon: item where:
            grabbable(spoon) and is_clean(spoon)
        # Select a clean utensil (preferably a spoon)
        bind cup: item where:
            is_cup(cup)
        # Select the cup containing the lemon water mixture
        stir_mixture(spoon, cup)
        # Stir the mixture with the spoon until the sugar is dissolved evenly

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2104_around_cupboard_130(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_bowl_2095_around_bowl_2095(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2095
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(bowl,bowl_instance)
        else:
            exp(bowl,bowl_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bowl_instance]=True
        close[bowl_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_pizza_2065; available variables: [Variable<plate: item>].
--------------------------------------------------------------------------------
Goal: 
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate inside the microwave
        achieve_once closed(microwave)
        # Close the microwave
        achieve_once is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_pizza_2065, plate) and on(food_hamburger_2057, plate)
        # Select the plate with both pizza and hamburger on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(plate, microwave)
        # Heat the plate with pizza and hamburger in the microwave

--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2083_around_washing_machine_2041(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(towel,washing_machine_instance)
        else:
            exp(towel,washing_machine_instance)
    eff:
        unknown[towel]=False
        close[towel,washing_machine_instance]=True
        close[washing_machine_instance,towel]=True
    

behavior find_fryingpan_2107_around_oven_141(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_pizza_2065; available variables: [Variable<plate_with_food: item>].
--------------------------------------------------------------------------------
Goal: 
def inside_microwave(plate_with_food:item, microwave:item):
    # Function to check if plate with food is inside the microwave
    symbol inside_microwave = inside(plate_with_food, microwave)
    return inside_microwave

behavior heat_food_in_microwave(plate_with_food:item, microwave:item):
    body:
        achieve_once inside(plate_with_food, microwave)
        # Place the plate with food inside the microwave temporarily
        achieve_once is_on(microwave)
        # Heat the food by turning on the microwave

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        
        bind plate_with_food: item where:
            is_plate(plate_with_food) and on(food_pizza_2065, plate_with_food) and on(food_hamburger_2057, plate_with_food)
        # Select the plate that has pizza and hamburger

        heat_food_in_microwave(plate_with_food, microwave)

--------------------------------------------------------------------------------
Exploration: 
behavior find_fryingpan_2107_around_oven_141(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_pizza_2065; available variables: [Variable<plate_with_food: item>].
--------------------------------------------------------------------------------
Goal:  
behavior inside_microwave(plate_with_food:item, microwave:item):
    body:
        achieve_once inside(plate_with_food, microwave)
        # Place the plate with food inside the microwave temporarily

behavior heat_food_in_microwave(plate_with_food:item, microwave:item):
    body:
        inside_microwave(plate_with_food, microwave)
        achieve_once is_on(microwave)
        # Heat the food by turning on the microwave

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        
        bind plate_with_food: item where:
            is_plate(plate_with_food) and on(food_pizza_2065, plate_with_food) and on(food_hamburger_2057, plate_with_food)
        # Select the plate that has pizza and hamburger

        heat_food_in_microwave(plate_with_food, microwave)

--------------------------------------------------------------------------------
Exploration: 
behavior find_tray_142_around_oven_141(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable room already exists.
--------------------------------------------------------------------------------
Goal:  
def is_home_office_location(table: item, room: item):
    # Function to check if a table is inside the home office
    symbol is_home_office= exists room: item : (is_home_office(room) and inside(table, room))
    return is_home_office

behavior place_book_on_table(book: item, table: item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        bind table: item where:
            is_table(table) and is_home_office_location(table, room)
        # Select a table in the home office
        observe(book, "Locate the book to grab it")
        # Observe the location of the book to grab it
        place_book_on_table(book, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_book_2137_around_bookshelf_275(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Number of arguments does not match the number of types: 2 vs 3. Args: (VariableExpression<V::cup>, VariableExpression<V::sugar>), Types: (ObjectType<item>, ObjectType<item>, ObjectType<item>)
--------------------------------------------------------------------------------
Goal:  
behavior squeeze_lemon_into_cup(lemon:item, cup:item):
    body:
        squeeze(lemon)
        achieve_once inside(lemon, cup)

behavior add_water_sugar_and_stir(cup:item, water:item, sugar:item):
    body:
        achieve has_water(cup)
        achieve_once inside(sugar, cup)
        # Assuming the action to stir exists, though not explicitly defined in provided details

behavior __goal__():
    body:
        # Selecting the items using bind based on the provided IDs and knowledge
        bind lemon: item where:
            is_food_lemon(lemon)
        bind cup: item where:
            is_cup(cup) and id[cup]==2132
        bind sugar: item where:
            is_food_sugar(sugar)
        
        squeeze_lemon_into_cup(lemon, cup)
        add_water_sugar_and_stir(cup, sugar)

--------------------------------------------------------------------------------
Exploration: 
behavior find_wooden_spoon_2000_around_knifeblock_76(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(wooden_spoon,knifeblock_instance)
        else:
            exp(wooden_spoon,knifeblock_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,knifeblock_instance]=True
        close[knifeblock_instance,wooden_spoon]=True
    

behavior find_measuring_cup_2012_around_bowl_2142(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2142
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(measuring_cup,bowl_instance)
        else:
            exp(measuring_cup,bowl_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,bowl_instance]=True
        close[bowl_instance,measuring_cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: spoon; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal:  
behavior squeeze_lemon(lemon:item):
    body:
        achieve_once cut(lemon) # Cut the lemon first if necessary
        squeeze(lemon) # Squeeze the lemon to extract juice

behavior add_water(cup:item):
    body:
        achieve has_water(cup) # Ensure the cup has water in it

behavior add_sugar(sugar:item, cup:item):
    body:
        achieve_once inside(sugar, cup) # Add sugar to the cup

behavior stir_contents(cup:item):
    body:
        achieve_once inhand(spoon) # Use a spoon to stir, assuming a spoon is available and symbolic here for stirring
        # Ideally, a achieve_once inside content (eg, water, lemon juice, sugar) should be around spoon here to indicate stirring 

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select the sugar

        bind cup: item where:
            is_cup(cup)
        # Select the cup

        squeeze_lemon(lemon)
        # Squeeze the lemon

        add_water(cup)
        # Add water to the cup

        add_sugar(sugar, cup)
        # Add sugar to the cup

        stir_contents(cup)
        # Stir the contents in the cup

--------------------------------------------------------------------------------
Exploration: 
behavior find_wooden_spoon_2000_around_toaster_132(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(wooden_spoon,toaster_instance)
        else:
            exp(wooden_spoon,toaster_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,toaster_instance]=True
        close[toaster_instance,wooden_spoon]=True
    

################################################################################

Error: Error trying to process rule "typed_argument":

Unknown type: state, known types are: ['item', 'character', 'id'].
--------------------------------------------------------------------------------
Goal:  
def is_ironed(item:item):
    # Function to determine if the given clothing item has been ironed
    symbol ironed = exists state: state : (state == is_clean(item) and not dirty(item))
    return ironed

behavior iron_clothes(item:item, iron:item, ironing_board:item):
    body:
        achieve_once inhand(item) # Hold the clothing item
        achieve_once on(item, ironing_board) # Place clothing on the ironing board
        achieve is_on(iron) # Ensure that the iron is on
        achieve clean(item) # Iron the clothing item

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and not is_ironed(shirt)
        bind skirt: item where:
            is_clothes_skirt(skirt) and not is_ironed(skirt)
        bind iron: item where:
            is_iron(iron)
        observe(iron, "Check if the iron is plugged and on")
        observe(shirt, "Check if the shirt is clean and not ironed")
        observe(skirt, "Check if the skirt is clean and not ironed")
        
        achieve plugged(iron) # Make sure the iron is plugged in
        achieve is_on(iron) # Make sure the iron is turned on

        # Iron the shirt if it has not been completed yet
        if not is_ironed(shirt):
            bind ironing_board: item where:
                is_ironing_board(ironing_board)
            iron_clothes(shirt, iron, ironing_board)

        # Iron the skirt if it has not been completed yet
        if not is_ironed(skirt):
            bind ironing_board: item where:
                is_ironing_board(ironing_board)
            iron_clothes(skirt, iron, ironing_board)

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2054_around_washing_machine_2007(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(soap,washing_machine_instance)
        else:
            exp(soap,washing_machine_instance)
    eff:
        unknown[soap]=False
        close[soap,washing_machine_instance]=True
        close[washing_machine_instance,soap]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'o') at line 5717, column 31.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
def is_clothes_ironed(clothes:item):
    # Function to check if a piece of clothing is ironed
    symbol ironed= not exists o: item : (is_clothes(o) and dirty(o))
    return ironed

behavior iron_clothes(clothes:item, iron:item, ironing_board:item):
    body:
        achieve_once close_char(char, ironing_board)
        achieve_once is_on(iron)
        achieve_once clean(clothes)
        # Perform actions to iron the clothes

behavior ensure_iron_is_ready(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)
        # Ensure the iron is plugged in and turned on

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and not is_clothes_ironed(shirt)
        # Select the unironed shirt

        bind skirt: item where:
            is_clothes_skirt(skirt) and not is_clothes_ironed(skirt)
        # Select the unironed skirt

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        ensure_iron_is_ready(iron)
        
        iron_clothes(shirt, iron, ironing_board)
        iron_clothes(skirt, iron, ironing_board)

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2054_around_washing_machine_2007(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(soap,washing_machine_instance)
        else:
            exp(soap,washing_machine_instance)
    eff:
        unknown[soap]=False
        close[soap,washing_machine_instance]=True
        close[washing_machine_instance,soap]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'o') at line 5753, column 32.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
def is_clothes_ironed(clothes:item):
    # Function to check if a piece of clothing is ironed
    symbol ironed = not exists o: item : (is_clothes(o) and dirty(o))
    return ironed

behavior iron_clothes(clothes:item, iron:item, ironing_board:item):
    body:
        achieve_once close_char(char, ironing_board)
        achieve_once is_on(iron)
        achieve clean(clothes)
        # Perform actions to iron the clothes

behavior ensure_iron_is_ready(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)
        # Ensure the iron is plugged in and turned on

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and not is_clothes_ironed(shirt)
        # Select the unironed shirt

        bind skirt: item where:
            is_clothes_skirt(skirt) and not is_clothes_ironed(skirt)
        # Select the unironed skirt

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        ensure_iron_is_ready(iron)
        
        iron_clothes(shirt, iron, ironing_board)
        iron_clothes(skirt, iron, ironing_board)

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2053_around_washing_machine_2007(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(soap,washing_machine_instance)
        else:
            exp(soap,washing_machine_instance)
    eff:
        unknown[soap]=False
        close[soap,washing_machine_instance]=True
        close[washing_machine_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_washing_machine_2007(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_towel_2057_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: cat; available variables: [].
--------------------------------------------------------------------------------
Goal:  
def is_cat_located(cat: item):
    # Function to check if the cat has been located
    symbol cat_found = exists m: item : (is_cat(m))
    return cat_found

behavior locate_cat():
    body:
        # Check all items categorized as is_cat
        foreach m: item:
            if is_cat(m) and not visited(m):
                # Only nonvisited cat
                observe(m, "Locate the cat gently")

behavior __goal__():
    body:
        if is_cat_located(cat):
            # If we have already found the cat, move closer
            bind cat: item where:
                is_cat(cat)
            achieve close_char(char, cat)

        else:
            # Locate the cat
            locate_cat()

--------------------------------------------------------------------------------
Exploration: 
behavior find_cat_2055_around_coffee_table_2068(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cat,coffee_table_instance)
        else:
            exp(cat,coffee_table_instance)
    eff:
        unknown[cat]=False
        close[cat,coffee_table_instance]=True
        close[coffee_table_instance,cat]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5435, column 9.
Expected one of: 
	* DOUBLE_EQUAL
	* GREATER_EQ
	* STAR
	* LESS_EQ
	* __ANON_3
	* __ANON_2
	* MORETHAN
	* _NEWLINE
	* AND
	* __ANON_5
	* AT
	* __ANON_8
	* SLASH
	* LSHIFT
	* PLUS
	* __ANON_1
	* __ANON_6
	* LESSTHAN
	* OR
	* IF
	* __ANON_0
	* __ANON_4
	* NOT_EQ
	* VBAR
	* FLOORDIV
	* MINUS
	* AMPERSAND
	* __ANON_7
	* RSHIFT
	* EQUAL
	* PERCENT
	* SEMICOLON
	* CIRCUMFLEX
	* COMMA

--------------------------------------------------------------------------------
Goal:  
def is_fryingpan(x: item):
    # Function to check if an item is a frying pan
    return is_fryingpan(x)

def is_stove(x: item):
    # Function to check if an item is a stove
    return is_stove(x)

def on_stove(x: item, stove: item):
    # Function to check if an item is on the stove
    return on(x, stove)

def fry_potatoes(potatoes: item, fryingpan: item):
    body:
        achieve_once inside(potatoes, fryingpan) 
        # Place the potatoes into the frying pan

behavior heat_fryingpan(fryingpan: item):
    body:
        bind stove: item where:
            is_stove(stove)
        achieve_once is_on(stove)

behavior fry_to_golden_brown(potatoes: item, fryingpan: item):
    body:
        fry_potatoes(potatoes, fryingpan)
        heat_fryingpan(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)

        fry_to_golden_brown(potatoes, fryingpan)

--------------------------------------------------------------------------------
Exploration: 
behavior find_mouse_213_around_mousepad_279(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==279
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2013_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5413, column 9.
Expected one of: 
	* DOUBLE_EQUAL
	* GREATER_EQ
	* STAR
	* LESS_EQ
	* __ANON_3
	* __ANON_2
	* MORETHAN
	* _NEWLINE
	* AND
	* __ANON_5
	* AT
	* __ANON_8
	* SLASH
	* LSHIFT
	* PLUS
	* __ANON_1
	* __ANON_6
	* LESSTHAN
	* OR
	* IF
	* __ANON_0
	* __ANON_4
	* NOT_EQ
	* VBAR
	* FLOORDIV
	* MINUS
	* AMPERSAND
	* __ANON_7
	* RSHIFT
	* EQUAL
	* PERCENT
	* SEMICOLON
	* CIRCUMFLEX
	* COMMA

--------------------------------------------------------------------------------
Goal:  
def is_fryingpan(x: item):
    # Function to check if an item is a frying pan
    return is_fryingpan(x)

def is_stove(x: item):
    # Function to check if an item is a stove
    return is_stove(x)

def fry_potatoes(potatoes: item, fryingpan: item):
    body:
        achieve_once inside(potatoes, fryingpan) 
        # Place the potatoes into the frying pan

behavior heat_fryingpan(fryingpan: item):
    body:
        bind stove: item where:
            is_stove(stove)
        achieve_once on(fryingpan, stove)
        achieve is_on(stove)

behavior fry_to_golden_brown(potatoes: item, fryingpan: item):
    body:
        fry_potatoes(potatoes, fryingpan)
        heat_fryingpan(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)

        fry_to_golden_brown(potatoes, fryingpan)

--------------------------------------------------------------------------------
Exploration: 
behavior find_mouse_280_around_mousepad_279(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==279
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_wooden_spoon_2000_around_knifeblock_76(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(wooden_spoon,knifeblock_instance)
        else:
            exp(wooden_spoon,knifeblock_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,knifeblock_instance]=True
        close[knifeblock_instance,wooden_spoon]=True
    

behavior find_oil_2149_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Variable fryingpan already exists.
--------------------------------------------------------------------------------
Goal:  
behavior fry_potato_strips(potato_strips: item, fryingpan: item, stove: item):
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        achieve_once inside(potato_strips, fryingpan)
        # Put the potato strips inside the frying pan
        
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        
        achieve is_on(stove)
        # Turn on the stove

        achieve close_char(char, fryingpan)
        # Stay close to the frying pan

behavior __goal__():
    body:
        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select the cut potato strips to fry

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind stove: item where:
            is_stove(stove)
        
        fry_potato_strips(potato_strips, fryingpan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_mouse_213_around_mousepad_279(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==279
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_clothes_scarf_2120_around_basket_for_clothes_2078(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_oil_2149_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_wooden_spoon_2000_around_knifeblock_76(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(wooden_spoon,knifeblock_instance)
        else:
            exp(wooden_spoon,knifeblock_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,knifeblock_instance]=True
        close[knifeblock_instance,wooden_spoon]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        bind table: item where:
            is_coffee_table(table) and inside(table, home_office)
        # Select a coffee table inside the home office
        place_book_on_table(book, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_book_2066_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        bind table: item where:
            is_coffee_table(table) and inside(table, home_office)
        # Select a coffee table inside the home office
        bind home_office: item where:
            is_home_office(home_office)
        # Ensure home_office is properly defined and bound       
        place_book_on_table(book, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_book_2067_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<window: item>].
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and inside(window, home_office)
        achieve open(window)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('BIND', 'bind') at line 5652, column 1.
Expected one of: 
	* $END
	* INIT
	* INCLUDE
	* FEATURE
	* TYPEDEF
	* CONTROLLER
	* GOAL
	* DOMAIN
	* DEF
	* _NEWLINE
	* GENERATOR
	* _PRAGMA_KEYWORD
	* BEHAVIOR
	* IMPORT
	* UNDIRECTED_GENERATOR
	* OBJECTS

--------------------------------------------------------------------------------
Goal: 
bind home_office: item where:
    is_home_office(home_office)

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and inside(window, home_office)
        achieve open(window)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: iron_2161; available variables: [].
--------------------------------------------------------------------------------
Goal:  
behavior set_up_ironing():
    body:
        achieve plugged(iron_2161)
        # Ensure the iron is plugged in
        achieve is_on(iron_2161)
        # Ensure the iron is turned on
        achieve on(clothes_skirt_2160, ironing_board_2144)
        # Ensure the skirt is on the ironing board

behavior switch_off_and_unplug_iron():
    body:
        achieve_once is_off(iron_2161)
        # Turn off the iron
        achieve_once unplugged(iron_2161)
        # Unplug the iron

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2144
        # Bind to the specific ironing board
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        # Bind to the specific iron
        bind skirt: item where:
            is_clothes_skirt(skirt) and id[skirt] == 2160
        # Bind to the specific skirt
        
        set_up_ironing()
        # Set up the ironing scenario
        
        switch_off_and_unplug_iron()
        # Ensure the iron is turned off and unplugged

--------------------------------------------------------------------------------
Exploration: 
behavior find_rag_2025_around_washing_machine_2079(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(rag,washing_machine_instance)
        else:
            exp(rag,washing_machine_instance)
    eff:
        unknown[rag]=False
        close[rag,washing_machine_instance]=True
        close[washing_machine_instance,rag]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal: 
behavior boil_water(pot:item):
    body:
        achieve has_water(pot) # Fill the pot with water
        achieve_once is_on(stove) # Turn on the stove
        achieve on(pot, stove) # Place the pot on the stove to heat it

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        boil_water(pot) # Execute the boiling water behavior

--------------------------------------------------------------------------------
Exploration: 
behavior find_pencil_2001_around_home_office_319(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: bathroom; available variables: [Variable<bathroom_sink: item>].
--------------------------------------------------------------------------------
Goal:  
behavior fill_sink_with_water(sink: item, faucet: item):
    body:
        achieve has_water(sink)

behavior add_soap_to_water(sink: item, soap: item):
    body:
        achieve_once inside(soap, sink)

behavior __goal__():
    body:
        bind bathroom_sink: item where:
            is_sink(bathroom_sink) and inside(bathroom_sink, bathroom)
        # Bind the bathroom sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, bathroom_sink)
        # Bind the faucet near the bathroom sink

        bind soap: item where:
            is_soap(soap)
        # Bind the soap

        fill_sink_with_water(bathroom_sink, faucet)
        # Fill the bathroom sink with water

        add_soap_to_water(bathroom_sink, soap)
        # Add soap to the water in the bathroom sink to create soapy water

--------------------------------------------------------------------------------
Exploration: 
behavior find_detergent_2155_around_bathroom_counter_18(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(detergent,bathroom_counter_instance)
        else:
            exp(detergent,bathroom_counter_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_counter_instance]=True
        close[bathroom_counter_instance,detergent]=True
    

behavior find_shampoo_2019_around_bathroom_counter_18(shampoo:item):
    goal: not unknown(shampoo)
    body:
        assert is_shampoo(shampoo)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(shampoo,bathroom_counter_instance)
        else:
            exp(shampoo,bathroom_counter_instance)
    eff:
        unknown[shampoo]=False
        close[shampoo,bathroom_counter_instance]=True
        close[bathroom_counter_instance,shampoo]=True
    

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2125_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: room; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal: 
behavior put_on_table(item1:item, item2:item):
    body:
        achieve_once on(item1, item2)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_dining_room(inside(table, room))
        # Select a table in the dining room
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        put_on_table(milk, table)
        put_on_table(egg, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_table_cloth_2005_around_table_270(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

behavior find_milk_2115_around_mousepad_279(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==279
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(milk,mousepad_instance)
        else:
            exp(milk,mousepad_instance)
    eff:
        unknown[milk]=False
        close[milk,mousepad_instance]=True
        close[mousepad_instance,milk]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'id') at line 5387, column 18.
Expected one of: 
	* DOUBLE_EQUAL
	* GREATER_EQ
	* STAR
	* LESS_EQ
	* __ANON_3
	* __ANON_2
	* MORETHAN
	* _NEWLINE
	* AND
	* __ANON_5
	* AT
	* __ANON_8
	* SLASH
	* LSHIFT
	* PLUS
	* __ANON_1
	* __ANON_6
	* LESSTHAN
	* OR
	* IF
	* __ANON_0
	* __ANON_4
	* NOT_EQ
	* VBAR
	* FLOORDIV
	* MINUS
	* AMPERSAND
	* __ANON_7
	* RSHIFT
	* EQUAL
	* PERCENT
	* SEMICOLON
	* CIRCUMFLEX
	* COMMA

--------------------------------------------------------------------------------
Goal:  
behavior place_milk_and_egg_on_table(milk:item, egg:item, table:item):
    body:
        achieve_once on(milk, table)
        # Place the milk on the table
        achieve_once on(egg, table)
        # Place the egg on the table

behavior find_items_and_place_on_table(milk_id:int, egg_id:int, table:item):
    body:
        foreach o: item:
            if id[o] == milk_id:
                bind milk: item where:
                    id[milk] == milk_id
                if is_milk(milk):
                    achieve close_char(char, milk)
                    place_milk_and_egg_on_table(milk, egg, table)
            elif id[o] == egg_id:
                bind egg: item where:
                    id[egg] == egg_id
                if is_food_egg(egg):
                    achieve close_char(char, egg)
                    place_milk_and_egg_on_table(milk, egg, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and surfaces(table)
        find_items_and_place_on_table(2115, 2053, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_food_2064_around_kitchen_counter_123(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

behavior find_milk_2115_around_kitchen_counter_123(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'id') at line 5387, column 18.
Expected one of: 
	* DOUBLE_EQUAL
	* GREATER_EQ
	* STAR
	* LESS_EQ
	* __ANON_3
	* __ANON_2
	* MORETHAN
	* _NEWLINE
	* AND
	* __ANON_5
	* AT
	* __ANON_8
	* SLASH
	* LSHIFT
	* PLUS
	* __ANON_1
	* __ANON_6
	* LESSTHAN
	* OR
	* IF
	* __ANON_0
	* __ANON_4
	* NOT_EQ
	* VBAR
	* FLOORDIV
	* MINUS
	* AMPERSAND
	* __ANON_7
	* RSHIFT
	* EQUAL
	* PERCENT
	* SEMICOLON
	* CIRCUMFLEX
	* COMMA

--------------------------------------------------------------------------------
Goal:  
behavior place_milk_and_egg_on_table(milk:item, egg:item, table:item):
    body:
        achieve_once on(milk, table)
        # Place the milk on the table
        achieve_once on(egg, table)
        # Place the egg on the table

behavior find_items_and_place_on_table(milk_id:int, egg_id:int, table:item):
    body:
        foreach o: item:
            if id[o] == milk_id:
                bind milk: item where:
                    id[milk] == milk_id
                if is_milk(milk):
                    achieve_once close_char(char, milk)
                    place_milk_and_egg_on_table(milk, None, table)
            elif id[o] == egg_id:
                bind egg: item where:
                    id[egg] == egg_id
                if is_food_egg(egg):
                    achieve_once close_char(char, egg)
                    place_milk_and_egg_on_table(None, egg, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and surfaces(table)
        find_items_and_place_on_table(2115, 2053, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_butter_2007_around_kitchen_counter_119(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

behavior find_milk_2115_around_kitchen_counter_123(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'food_hamburger') at line 5208, column 127.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
def has_pizza_and_hamburger(loc: item):
    # Function to check if both pizza and hamburger are located at a given location
    symbol has_pizza_hamburger = exists food_pizza: item : (is_food_pizza(food_pizza) and inside(food_pizza, loc)) and exists food_hamburger: item : (is_food_hamburger(food_hamburger) and inside(food_hamburger, loc))
    return has_pizza_hamburger

behavior __goal__():
    body:
        # Check known locations for pizza and hamburger
        if exists loc: item : (is_fridge(loc) or is_table(loc) or is_box(loc)) and has_pizza_and_hamburger(loc):
            bind loc: item where:
                (is_fridge(loc) or is_table(loc) or is_box(loc)) and has_pizza_and_hamburger(loc)
            # Approach the location containing both pizza and hamburger
            achieve close_char(char, loc)

        else:
            # If we cant find them based on known info, move through the scene to locate them
            foreach loc: item:
                if (is_fridge(loc) or is_table(loc) or is_box(loc)) and not visited(loc):
                    observe(loc, "Check for the presence of both pizza and hamburger")

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_hamburger_2096_around_kitchen_counter_123(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

behavior find_food_pizza_2106_around_kitchen_counter_123(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_pizza,kitchen_counter_instance)
        else:
            exp(food_pizza,kitchen_counter_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_pizza]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'food_hamburger') at line 5208, column 127.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
def has_pizza_and_hamburger(loc: item):
    # Function to check if both pizza and hamburger are located at a given location
    symbol has_pizza_hamburger = exists food_pizza: item : (is_food_pizza(food_pizza) and inside(food_pizza, loc)) and exists food_hamburger: item : (is_food_hamburger(food_hamburger) and inside(food_hamburger, loc))
    return has_pizza_hamburger

behavior __goal__():
    body:
        # Check known locations for pizza and hamburger
        if exists loc: item : (is_fridge(loc) or is_table(loc) or is_box(loc)) and has_pizza_and_hamburger(loc):
            bind loc: item where:
                (is_fridge(loc) or is_table(loc) or is_box(loc)) and has_pizza_and_hamburger(loc)
            # Approach the location containing both pizza and hamburger
            achieve close_char(char, loc)

        else:
            # If we cannot find them based on known info, move through the scene to locate them
            foreach loc: item:
                if (is_fridge(loc) or is_table(loc) or is_box(loc)) and not visited(loc):
                    observe(loc, "Check for the presence of both pizza and hamburger")

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_hamburger_2096_around_kitchen_counter_123(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

behavior find_food_pizza_2106_around_kitchen_counter_123(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_pizza,kitchen_counter_instance)
        else:
            exp(food_pizza,kitchen_counter_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_pizza]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function is_lookable not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
def has_hamburger_and_pizza(loc: item):
    # Function to check if there are both pizza and hamburger at a specified location
    symbol contains_hamburger= exists x: item : (is_food_hamburger(x) and inside(x, loc))
    symbol contains_pizza= exists y: item : (is_food_pizza(y) and inside(y, loc))
    return contains_hamburger and contains_pizza

behavior __goal__():
    body:
        if exists loc: item : (is_lookable(loc) and has_hamburger_and_pizza(loc)):
            # Check if there is an observable location with both pizza and hamburger
            bind loc: item where:
                is_lookable(loc) and has_hamburger_and_pizza(loc)
            # Select a location with pizza and hamburger
            achieve close_char(char, loc)
            # Move the character closer to the location with pizza and hamburger

        else: 
           # If no location with both items is found, initiate exploration to locate them
            foreach loc: item:
                if is_lookable(loc) and not visited(loc):
                    observe(loc,"Check if there are pizza and hamburger here")
                    # Observe whether both pizza and hamburger are present

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_hamburger_2096_around_kitchen_counter_123(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

behavior find_food_pizza_2106_around_kitchen_counter_123(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_pizza,kitchen_counter_instance)
        else:
            exp(food_pizza,kitchen_counter_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_pizza]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: placing_pot; available variables: [Variable<vegetable: item>, Variable<pot: item>, Variable<stove: item>].
--------------------------------------------------------------------------------
Goal:  
behavior boil_vegetables_in_pot(vegetable:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetable, pot)
        # Place the vegetable inside the pot
        achieve_once has_water(pot)
        # Ensure the pot has water in it
        achieve within(placing_pot, turned_on_stove)
        
behavior placing_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior turned_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove and keep it on to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
            # Select a pot
        bind stove: item where:
            is_stove(stove)
            # Select a stove
        bind vegetable: item where:
            is_food_vegetable(vegetable)
            # Select a vegetable to boil
        boil_vegetables_in_pot(vegetable, pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function placing_pot not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior boil_vegetables_in_pot(vegetable:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetable, pot)
        # Place the vegetable inside the pot
        achieve_once has_water(pot)
        # Ensure the pot has water in it
        achieve within(placing_pot(pot, stove), turned_on_stove(stove))

behavior placing_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior turned_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove and keep it on to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
            # Select a pot
        bind stove: item where:
            is_stove(stove)
            # Select a stove
        bind vegetable: item where:
            is_food_vegetable(vegetable)
            # Select a vegetable to boil
        boil_vegetables_in_pot(vegetable, pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
def ensure_pot_has_water(pot:item, faucet:item):
    # This behavior ensures the pot has water inside
    if not has_water(pot):
        achieve_once on(pot, faucet)
        achieve has_water(pot)
        achieve_once unplugged(pot)

behavior boil_vegetables(pot:item, stove:item, food_vegetable:item):
    # Boil the vegetables in the pot on the stove
    body:
        achieve_once inside(food_vegetable, pot)
        achieve_once on(pot, stove)
        ensure_pot_has_water(pot, faucet_43)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Selecting the pot
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)
        # Selecting the vegetables
        bind stove: item where:
            is_stove(stove)
        # Selecting the stove
        
        boil_vegetables(pot, stove, food_vegetable)

--------------------------------------------------------------------------------
Exploration: 
behavior find_headset_2062_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_clothes_hat_2045_around_basket_for_clothes_2006(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: faucet_43; available variables: [Variable<pot: item>, Variable<stove: item>, Variable<food_vegetable: item>].
--------------------------------------------------------------------------------
Goal:  
def has_water(pot:item):
    # Checks if the pot contains water 
    return exists x: item : (close(x, pot) and has_water(pot))

behavior ensure_pot_has_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            achieve_once inside(pot, faucet)
            achieve has_water(pot)

behavior boil_vegetables(pot:item, stove:item, food_vegetable:item):
    body:
        achieve_once inside(food_vegetable, pot)
        achieve_once on(pot, stove)
        ensure_pot_has_water(pot, faucet_43)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)
        bind stove: item where:
            is_stove(stove)
        
        boil_vegetables(pot, stove, food_vegetable)

--------------------------------------------------------------------------------
Exploration: 
behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: fridge_289; available variables: [Variable<vegetable: item>].
--------------------------------------------------------------------------------
Goal:  
def has_vegetables_in_pot(pot:item):
    # Function to check if there are vegetables in the specified pot
    symbol has_vegetables= exists o: item : (is_food_vegetable(o) and inside(o, pot))
    return has_vegetables

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve inside_char(char, stove)
        achieve on(pot, stove)
        achieve is_on(stove)
        # Ensure the pot of vegetables is on the stove and the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot to use

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        if not has_vegetables_in_pot(pot):
            foreach vegetable: item:
                if is_food_vegetable(vegetable) and inside(vegetable, fridge_289):
                    achieve_once inhand(vegetable)
                    achieve_once inside(vegetable, pot)
            # Place all found vegetables from the fridge into the pot

        achieve has_water(pot)
        # Fill the pot with water

        boil_vegetables(pot, stove)
        # Boil the vegetables using the stove

--------------------------------------------------------------------------------
Exploration: 
behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_388(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Error during applying is_on[observation, state](x: item).
  Arguments: id(V::pot)
Argument #0 type does not match: expect item, got int64.
--------------------------------------------------------------------------------
Goal:  
def has_water_pot(pot:item):
    # Checks if the pot has water
    symbol has_water= exists o: item : (is_pot(o) and has_water(o) and id[o] == id[pot])
    return has_water

def vegetables_are_boiling(pot:item):
    # Check if vegetables are boiling in the pot
    symbol is_boiling= exists o: item : (is_food_vegetable(o) and inside(o, pot) and is_on(id[pot]))
    return is_boiling

behavior fill_pot_with_water(pot:item, faucet:item):
    # Fill the pot with water from a faucet
    body:
        achieve_once has_water(pot)

behavior start_boiling_vegetables(pot:item, stove:item):
    # Place the pot on the stove and turn it on to boil the vegetables
    body:
        achieve inside(food_vegetable_2041, pot)
        achieve has_water(pot)
        achieve is_on(stove)
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)

        if has_water_pot(pot):
            bind stove: item where:
                is_stove(stove)
            
            start_boiling_vegetables(pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_headset_2062_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_vegetable_2041; available variables: [Variable<pot: item>, Variable<stove: item>].
--------------------------------------------------------------------------------
Goal:  
def has_water_pot(pot:item):
    # Checks if the pot has water
    symbol has_water= exists o: item : (is_pot(o) and has_water(o) and id[o] == id[pot])
    return has_water

def vegetables_are_boiling(pot:item):
    # Check if vegetables are boiling in the pot
    symbol is_boiling= exists o: item : (is_food_vegetable(o) and inside(o, pot) and is_on(pot))
    return is_boiling

behavior fill_pot_with_water(pot:item, faucet:item):
    # Fill the pot with water from a faucet
    body:
        achieve_once has_water(pot)

behavior start_boiling_vegetables(pot:item, stove:item):
    # Place the pot on the stove and turn it on to boil the vegetables
    body:
        achieve inside(food_vegetable_2041, pot)
        achieve has_water(pot)
        achieve is_on(stove)
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)

        if has_water_pot(pot):
            bind stove: item where:
                is_stove(stove)
            
            start_boiling_vegetables(pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function achieve_on not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal: 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        observe(faucet, "Check if faucet is lookable and has a free hand") # Ensure faucet is available to use
        achieve_once has_water(pot) # Fill the pot with water

behavior wash_vegetables(vegetables:item, faucet:item):
    body:
        achieve_once clean(vegetables) # Wash the vegetables

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind faucet: item where:
            is_faucet(faucet)
        fill_pot_with_water(pot, faucet)
        wash_vegetables(vegetables, faucet)
        boil_vegetables(pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

################################################################################

Error: Unexpected token Token('_NEWLINE', '\n        \n        ') at line 5281, column 19.
Expected one of: 
	* HEX_NUMBER
	* FLOAT_NUMBER
	* FINDONE
	* EXISTS
	* IMAG_NUMBER
	* VARNAME
	* PLUS
	* NOT
	* TILDE
	* OCT_NUMBER
	* BIN_NUMBER
	* ELLIPSIS
	* TRUE
	* LPAR
	* NONE
	* FALSE
	* FINDALL
	* MINUS
	* FORALL
	* COLON
	* LONG_STRING
	* DEC_NUMBER
	* STRING
	* DO
	* LSQB

--------------------------------------------------------------------------------
Goal:  
def is_long_term_goal_complete(b: item):
    symbol goal_complete=exists char: item: (close_char(char, b))
    return goal_complete

def has_underwear(sink:item):
    # Function to check if underwear is found inside a specified sink
    symbol has_underwear=exists o: item : (is_clothes_underwear(o) and inside(o, sink))
    return has_underwear

behavior __goal__():
    body:
        if exists bathroom: item : (is_bathroom(bathroom) and is_long_term_goal_complete(bathroom)):
            return
        
        if exists sink: item : (is_sink(sink) and has_underwear(sink)):
            # If we have already found the sink with underwear, we can directly approach it
            bind sink: item where:
                is_sink(sink) and has_underwear(sink)
            achieve close_char(char, sink)
        else:
            # Check all sinks in the scene that have not been visited
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink,"Check for underwear in the sink")

--------------------------------------------------------------------------------
Exploration: 
behavior find_detergent_2011_around_bathroom_cabinet_17(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_clothes_underwear_2121_around_basket_for_clothes_2078(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

################################################################################

Error: Unexpected token Token('_NEWLINE', '\n        \n        ') at line 5281, column 19.
Expected one of: 
	* HEX_NUMBER
	* FLOAT_NUMBER
	* FINDONE
	* EXISTS
	* IMAG_NUMBER
	* VARNAME
	* PLUS
	* NOT
	* TILDE
	* OCT_NUMBER
	* BIN_NUMBER
	* ELLIPSIS
	* TRUE
	* LPAR
	* NONE
	* FALSE
	* FINDALL
	* MINUS
	* FORALL
	* COLON
	* LONG_STRING
	* DEC_NUMBER
	* STRING
	* DO
	* LSQB

--------------------------------------------------------------------------------
Goal:  
def is_long_term_goal_complete(b: item):
    symbol goal_complete=exists char: item: (close_char(char, b))
    return goal_complete

def has_underwear(sink:item):
    # Function to check if underwear is found inside a specified sink
    symbol has_underwear=exists o: item : (is_clothes_underwear(o) and inside(o, sink))
    return has_underwear

behavior __goal__():
    body:
        if exists bathroom: item : (is_bathroom(bathroom) and is_long_term_goal_complete(bathroom)):
            return
        
        if exists sink: item : (is_sink(sink) and has_underwear(sink)):
            # If we have already found the sink with underwear, we can directly approach it
            bind sink: item where:
                is_sink(sink) and has_underwear(sink)
            achieve close_char(char, sink)
        else:
            # Check all sinks in the scene that have not been visited
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink,"Check for underwear in the sink")

--------------------------------------------------------------------------------
Exploration: 
behavior find_detergent_2011_around_cleaning_solution_2143(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind cleaning_solution_instance:item where:
            is_cleaning_solution(cleaning_solution_instance) and id[cleaning_solution_instance]==2143
        achieve close_char(char,cleaning_solution_instance)
        if can_open(cleaning_solution_instance):
            achieve_once open(cleaning_solution_instance)
            exp(detergent,cleaning_solution_instance)
        else:
            exp(detergent,cleaning_solution_instance)
    eff:
        unknown[detergent]=False
        close[detergent,cleaning_solution_instance]=True
        close[cleaning_solution_instance,detergent]=True
    

behavior find_clothes_underwear_2121_around_basket_for_clothes_2078(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal:  
def in_home_office(table: item):
    # Function to check if a table is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior find_book_and_place_on_table(book: item, table: item):
    body:
        achieve_once on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        # Identify the book and the coffee table
        bind book: item where:
            is_book(book)
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)

        if not visited(book):
            # Check if the book is not visited yet
            observe(book, "Check if its the correct book to place on the table")

            # Check if the coffee table is in the home office
            if not in_home_office(coffee_table):
                observe(coffee_table, "Verify the location of the coffee table")

        find_book_and_place_on_table(book, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_book_2066_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function is_hot not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal: behavior prepare_hot_milk_on_table(coffee_table:item, cup:item, milk:item):
    body:
        achieve_once inside(milk, cup) # Pour milk into the cup
        achieve_once is_on(coffee_table) # Confirming that the coffee table is on

behavior heat_milk_cup(cup:item):
    body:
        achieve_once is_hot(cup) # Ensure the milk in the cup is heated

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table) # Place an item on the table

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_coffee_table(coffee_table)

        bind cup: item where:
            is_cup(cup)

        bind milk: item where:
            is_milk(milk)

        prepare_hot_milk_on_table(coffee_table, cup, milk)
        heat_milk_cup(cup) # Heat the milk in the cup
        place_on_table(cup, coffee_table) # Place the cup of hot milk on the coffee table
--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2063_around_home_office_319(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cup,home_office_instance)
        else:
            exp(cup,home_office_instance)
    eff:
        unknown[cup]=False
        close[cup,home_office_instance]=True
        close[home_office_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior prepare_hot_milk(cup:item, milk:item, stove:item):
    body:
        achieve_once inside(milk, cup)
        # Pour the milk into the cup
        achieve_once is_on(stove)
        # Turn on the stove
        achieve_once on(cup, stove)
        # Place the cup with milk on the stove to heat

behavior place_item_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)
        # Place the prepared item on the table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Find a cup to hold the milk

        bind stove: item where:
            is_stove(stove)
        # Locate the stove for heating the milk

        bind table: item where:
            is_coffee_table(table) and inside(table, home_office)
        # Locate the coffee table in the home office

        bind milk: item where:
            is_milk(milk)
        # Identify the milk that will be used

        prepare_hot_milk(cup, milk, stove)
        # Prepare the milk and heat it on the stove

        place_item_on_table(cup, table)
        # Place the cup of hot milk on the coffee table in the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2064_around_home_office_319(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cup,home_office_instance)
        else:
            exp(cup,home_office_instance)
    eff:
        unknown[cup]=False
        close[cup,home_office_instance]=True
        close[home_office_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_pencil_2001_around_home_office_319(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal: 
behavior prepare_hot_milk(cup:item, milk:item, stove:item):
    body:
        achieve_once inside(milk, cup)
        # Pour the milk into the cup
        achieve_once is_on(stove)
        # Turn on the stove
        achieve_once on(cup, stove)
        # Place the cup with milk on the stove to heat

behavior place_item_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)
        # Place the prepared item on the table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Find a cup to hold the milk

        bind stove: item where:
            is_stove(stove)
        # Locate the stove for heating the milk

        bind table: item where:
            is_coffee_table(table) and inside(table, home_office)
        # Locate the coffee table in the home office

        bind milk: item where:
            is_milk(milk)
        # Identify the milk that will be used

        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office location

        prepare_hot_milk(cup, milk, stove)
        # Prepare the milk and heat it on the stove

        place_item_on_table(cup, table)
        # Place the cup of hot milk on the coffee table in the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2064_around_home_office_319(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cup,home_office_instance)
        else:
            exp(cup,home_office_instance)
    eff:
        unknown[cup]=False
        close[cup,home_office_instance]=True
        close[home_office_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_pencil_2001_around_home_office_319(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

################################################################################

Error: Unexpected token Token('BIND', 'bind') at line 5686, column 1.
Expected one of: 
	* $END
	* INIT
	* INCLUDE
	* FEATURE
	* TYPEDEF
	* CONTROLLER
	* GOAL
	* DOMAIN
	* DEF
	* _NEWLINE
	* GENERATOR
	* _PRAGMA_KEYWORD
	* BEHAVIOR
	* IMPORT
	* UNDIRECTED_GENERATOR
	* OBJECTS
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n \n')]

--------------------------------------------------------------------------------
Goal:  
bind jacket: item where:
    is_clothes_jacket(jacket)

behavior hand_wash(jacket:item):
    body:
        achieve_once dirty(jacket) # Ensure the jacket is dirty before washing
        achieve has_water(jacket) # Ensure the jacket is wet
        achieve clean(jacket) # Hand wash the jacket to make it clean

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        hand_wash(jacket)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_388(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

The return expression has already been set: is_cup(V::cup)
--------------------------------------------------------------------------------
Goal:  
behavior fill_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        # Fill the cup with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
            # Identify the cup with ID 2087
            id[cup] == 2087

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
            # Identify faucet with ID 134

        fill_with_water(cup, faucet)
        # Fill the identified cup with water using the faucet

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2089_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: cutting_board_2080; available variables: [Variable<food_kiwi: item>, Variable<cup: item>, Variable<knife: item>].
--------------------------------------------------------------------------------
Goal: 
behavior cut_and_add_kiwi_to_cup(food_kiwi: item, cup: item, knife: item):
    body:
        achieve_once on(food_kiwi, cutting_board_2080) # Place the kiwi on the cutting board for slicing
        achieve_once cut(food_kiwi) # Slice the kiwi
        achieve_once inside(food_kiwi, cup) # Add the sliced kiwi into the cup

behavior __goal__():
    body:
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi) and id[food_kiwi] == 2060 # Select the specific kiwi for slicing

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087 # Select the specific cup that has the water
        
        bind knife: item where:
            is_knife(knife) and id[knife] == 2036 # Select the specific knife for slicing

        cut_and_add_kiwi_to_cup(food_kiwi, cup, knife) # Execute the cut and place task

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2087_around_homework_2011(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind homework_instance:item where:
            is_homework(homework_instance) and id[homework_instance]==2011
        achieve close_char(char,homework_instance)
        if can_open(homework_instance):
            achieve_once open(homework_instance)
            exp(cup,homework_instance)
        else:
            exp(cup,homework_instance)
    eff:
        unknown[cup]=False
        close[cup,homework_instance]=True
        close[homework_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function cutting not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
def is_plate_or_cup_present(sink:item):
    # Function to check if plates or cups are present in the specified location
    symbol present= exists o: item : ((is_plate(o) or is_cup(o)) and inside(o, sink))
    return present

behavior put_on_cutting_board(kiwi:item, board:item):
    body:
        achieve_once on(kiwi, board)

behavior cut_kiwi(kiwi:item, cutting_board:item, knife:item):
    body:
        achieve_once inhand(knife)
        achieve cutting(kiwi)

behavior transfer_kiwi_from_board_to_cup(kiwi:item, cup:item):
    body:
        achieve_once inside(kiwi, cup)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and is_plate_or_cup_present(sink)
        # Find a sink that contains plates or cups

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Find a cutting board

        bind knife: item where:
            is_knife(knife)
        # Find a knife

        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Find a kiwi

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Find a cup that already contains water

        put_on_cutting_board(kiwi, cutting_board) 
        # Temporarily put the kiwi on the cutting board
        cut_kiwi(kiwi, cutting_board, knife)
        # Slice the kiwi using the knife
        transfer_kiwi_from_board_to_cup(kiwi, cup)
        # Transfer sliced kiwi from cutting board to the cup


--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_scarf_2079_around_basket_for_clothes_2040(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_cup_2087_around_kitchen_counter_129(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'pot') at line 5688, column 76.
Expected one of: 
	* RPAR
	* COMMA

--------------------------------------------------------------------------------
Goal:  
def stove_with_pot():
    # Function to check if there is a pot on a stove
    symbol stove_with_pot=exists stove: item : (is_stove(stove) and exists pot: item : (is_pot(pot) and on(pot, stove)))
    return stove_with_pot

behavior boil_rice(pot:item, stove:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot has water
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Bind to any rice available
        
        if exists stove: item : (is_stove(stove) and stove_with_pot()):
            # If there is already a pot on a stove, proceed to boil the rice
            bind stove: item where:
                is_stove(stove) and stove_with_pot()
            bind pot: item where:
                is_pot(pot) and on(pot, stove)
            boil_rice(pot, stove)
            
        else:
            # Find a pot and stove if theres no pot on a stove
            bind pot: item where:
                is_pot(pot)

            bind stove: item where:
                is_stove(stove)

            move_pot_to_stove(pot, stove)
            # Place pot on stove
            boil_rice(pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_pencil_2001_around_home_office_319(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(pencil,home_office_instance)
        else:
            exp(pencil,home_office_instance)
    eff:
        unknown[pencil]=False
        close[pencil,home_office_instance]=True
        close[home_office_instance,pencil]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'p') at line 5688, column 76.
Expected one of: 
	* RPAR
	* COMMA

--------------------------------------------------------------------------------
Goal:  
def stove_with_pot():
    # Function to check if there is a pot on a stove
    symbol stove_with_pot=exists stove: item : (is_stove(stove) and exists p: item : (is_pot(p) and on(p, stove)))
    return stove_with_pot

behavior boil_rice(pot:item, stove:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot has water
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Bind to any rice available
        
        if exists stove: item : (is_stove(stove) and stove_with_pot()):
            # If there is already a pot on a stove, proceed to boil the rice
            bind stove: item where:
                is_stove(stove) and stove_with_pot()
            bind pot: item where:
                is_pot(pot) and on(pot, stove)
            boil_rice(pot, stove)
            
        else:
            # Find a pot and stove if theres no pot on a stove
            bind pot: item where:
                is_pot(pot)

            bind stove: item where:
                is_stove(stove)

            move_pot_to_stove(pot, stove)
            # Place pot on stove
            boil_rice(pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal: behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        achieve has_water(pot)
        foreach o: item:
            if is_food_rice(o):
                achieve_once inside(o, pot)
        start_boiling(pot, stove_2065) 

behavior start_boiling(pot: item, stove: item):
    body:
        achieve_once is_on(stove)
        achieve_once on(pot, stove)
--------------------------------------------------------------------------------
Exploration: 
behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal: 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        achieve has_water(pot)
        foreach o: item:
            if is_food_rice(o):
                achieve_once inside(o, pot)
        start_boiling(pot, stove) 

behavior start_boiling(pot: item, stove: item):
    body:
        achieve_once is_on(stove)
        achieve_once on(pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065) and has_water(pot) # Bind the pot which is already on the stove with water

        bind stove: item where:
            is_stove(stove) and id[stove]==2065 # Bind the stove with known ID 2065

        # Achieve the desired state: the pot is on the stove and contains water
        achieve has_water(pot)
        achieve on(pot, stove) # Ensure the pot is on the stove

        achieve is_on(stove)
        # Achieve the desired state: the stove is turned on for boiling

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065) and has_water(pot)

        bind stove: item where:
            is_stove(stove) and id[stove]==2065

        achieve has_water(pot)
        achieve on(pot, stove)
        achieve is_on(stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'on') at line 5698, column 22.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)
        # Add the rice to the pot

behavior ensure_has_water(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water

behavior boil_on_stove(pot:item, stove:item):
    body:
        achieve once on(pot, stove)
        # Put the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select a package of rice
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        add_rice_to_pot(rice, pot)
        ensure_has_water(pot)
        boil_on_stove(pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal:  
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        
behavior boil_rice_with_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        fill_pot_with_water(pot, faucet)
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        boil_rice_with_pot(pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal:  
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior boil_rice_with_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        fill_pot_with_water(pot, faucet)
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        boil_rice_with_pot(pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_headset_2062_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_388(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'on') at line 5806, column 22.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
behavior boil_rice_in_pot(pot: item, stove: item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve is_on(stove) # Turn on the stove to start boiling
        achieve once on(pot, stove) # Place the pot on the stove

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once has_water(pot) # Fill the pot with water

behavior add_rice_to_pot(rice: item, pot: item):
    body:
        achieve_once inside(rice, pot) # Put the rice inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        fill_pot_with_water(pot, faucet)
        add_rice_to_pot(rice, pot)
        boil_rice_in_pot(pot, stove)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'has_water') at line 5840, column 51.
Expected one of: 
	* RPAR
	* COMMA

--------------------------------------------------------------------------------
Goal: 
def has_water_in_pot(pot:item):
    # Function to check if there is water in the specified pot
    symbol water_in_pot=exists o: item : (achieve has_water(pot))
    return water_in_pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Bind pot_2069 as the pot item to work with

        if not has_water_in_pot(pot):
            # Check if the pot does not have water
            achieve has_water(pot)
            # Ensure the pot has water
            
        achieve plugged(pot)
        # Optionally ensure other requirements like plugged state

--------------------------------------------------------------------------------
Exploration: 
behavior find_headset_2076_around_desk_104(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(headset,desk_instance)
        else:
            exp(headset,desk_instance)
    eff:
        unknown[headset]=False
        close[headset,desk_instance]=True
        close[desk_instance,headset]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_384(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal:  
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once close_char(char, pot) # Move close to the pot
        achieve open(pot) # Open the pot
        achieve_once close_char(char, faucet) # Move close to the faucet
        achieve can_open(faucet) # Verify that the faucet can be operated
        foreach f: item:
            if is_faucet(f) and f == faucet and can_open(f):
                achieve is_on(f) # Turn on the faucet to fill the pot with water
                achieve_once has_water(pot) # Ensure the pot has water
                achieve_once not is_on(f) # Turn off the faucet once pot is filled

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve_once close_char(char, stove) # Move close to the stove
        achieve can_open(stove) # Ensure the stove can be operated
        achieve is_on(stove) # Turn on the stove
        achieve_once on(pot, stove) # Place the pot on the stove

behavior add_rice_to_pot(pot: item, rice: item):
    body:
        achieve_once close_char(char, pot) # Move close to the pot
        achieve can_open(pot) # Verify the pot can be opened
        achieve inside(rice, pot) # Add rice to pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        # Binding to the specific pot on the stove with ID 2065

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Binding to the specific faucet with ID 43

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Binding to the specific stove with ID 2065

        fill_pot_with_water(pot, faucet)
        
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Binding to the specific rice with ID 2036

        add_rice_to_pot(pot, rice) # Add rice to pot after filling it with water
        
        place_pot_on_stove(pot, stove) # Place the pot on the stove and turn it on


--------------------------------------------------------------------------------
Exploration: 
behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_388(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_bowl_2072_around_table_355(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: bathroom; available variables: [Variable<window: item>].
--------------------------------------------------------------------------------
Goal:  
behavior open_bathroom_windows(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        if exists window: item : (is_window(window) and inside(window, bathroom)):
            # If a window exists in the bathroom, attempt to open it
            bind window: item where:
                is_window(window) and inside(window, bathroom)
            # Execute the behavior to open the window in the bathroom
            open_bathroom_windows(window)
        else:
            # Check all windows in the scene to find the bathroom window
            foreach window: item:
                if is_window(window) and not visited(window):
                    observe(window,"Check if this window is in the bathroom")

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('BIND', 'bind') at line 5752, column 1.
Expected one of: 
	* $END
	* INIT
	* INCLUDE
	* FEATURE
	* TYPEDEF
	* CONTROLLER
	* GOAL
	* DOMAIN
	* DEF
	* _NEWLINE
	* GENERATOR
	* _PRAGMA_KEYWORD
	* BEHAVIOR
	* IMPORT
	* UNDIRECTED_GENERATOR
	* OBJECTS
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n \n')]

--------------------------------------------------------------------------------
Goal:  
bind chicken: item where:
    is_food_chicken(chicken)

bind cutting_board: item where:
    is_cutting_board(cutting_board)

bind knife: item where:
    is_knife(knife)

behavior place_on_cutting_board(chicken:item, cutting_board:item):
    body:
        achieve_once on(chicken, cutting_board)
        # Place the chicken on the cutting board

behavior slice_chicken(chicken:item, knife:item):
    body:
        achieve_once cut(chicken)
        # Slice the chicken using the knife

behavior __goal__():
    body:
        place_on_cutting_board(chicken, cutting_board)
        # Ensure the chicken is placed on the cutting board
        
        slice_chicken(chicken, knife)
        # Proceed to slice the chicken

--------------------------------------------------------------------------------
Exploration: 
behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Behavior find_and_wash_ingredients already exists.
--------------------------------------------------------------------------------
Goal:  
def identify_required_ingredients_for_fish_soup():
    # Function to determine the required ingredients
    symbol has_ingredients=exists ingredient: item : (is_food_fish(ingredient) or is_food_vegetable(ingredient))
    return has_ingredients

behavior find_and_wash_ingredients():
    body:
        if exists sink: item : (is_sink(sink) and identify_required_ingredients_for_fish_soup()):
            # If the ingredients are found near a known sink, approach it
            bind sink: item where:
                is_sink(sink) and identify_required_ingredients_for_fish_soup()
            achieve close_char(char, sink)

        else:
            foreach ingredient: item:
                if (is_food_fish(ingredient) or is_food_vegetable(ingredient)) and not visited(ingredient):
                    # Check all unvisited ingredients that are needed
                    observe(ingredient, "Check if this is a required ingredient for fish soup")
            
def ingredient_is_dirty(ingredient: item):
    # Function to check if an ingredient is dirty
    symbol is_dirty = exists state: item : (dirty(ingredient))
    return is_dirty

behavior wash_ingredient(ingredient: item):
    body:
        achieve_once clean(ingredient) # Wash the particular ingredient

behavior find_and_wash_ingredients():
    body:
        foreach ingredient: item:
            if (is_food_fish(ingredient) or is_food_vegetable(ingredient)) and ingredient_is_dirty(ingredient):
                wash_ingredient(ingredient)

behavior __goal__():
    body:
        find_and_wash_ingredients()

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_potato_2035_around_kitchen_counter_230(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Foreach statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
def find_and_wash_ingredients():
    # Check if there are dirty ingredients related to fish soup and wash them
    foreach ingredient: item:
        if is_food_fish(ingredient) or is_food_onion(ingredient) and dirty(ingredient):
            wash(ingredient)

behavior __goal__():
    body:
        find_and_wash_ingredients()

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Foreach statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
def find_and_wash_ingredients():
    # Check if there are dirty ingredients related to fish soup and wash them
    foreach ingredient: item:
        if (is_food_fish(ingredient) or is_food_onion(ingredient)) and dirty(ingredient):
            wash(ingredient)

behavior __goal__():
    body:
        find_and_wash_ingredients()

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

################################################################################

Error: Unexpected token Token('BIND', 'bind') at line 5668, column 1.
Expected one of: 
	* $END
	* INIT
	* INCLUDE
	* FEATURE
	* TYPEDEF
	* CONTROLLER
	* GOAL
	* DOMAIN
	* DEF
	* _NEWLINE
	* GENERATOR
	* _PRAGMA_KEYWORD
	* BEHAVIOR
	* IMPORT
	* UNDIRECTED_GENERATOR
	* OBJECTS
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n \n')]

--------------------------------------------------------------------------------
Goal:  
bind fish: item where:
    is_food_fish(fish)

bind sink: item where:
    is_sink(sink)

behavior wash_fish(fish:item, sink:item):
    body:
        achieve has_water(sink)
        achieve_once inside(fish, sink)
        achieve clean(fish)

behavior __goal__():
    body:
        wash_fish(fish, sink)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_fish_2021_around_sink_42(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_fish,sink_instance)
        else:
            exp(food_fish,sink_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,sink_instance]=True
        close[sink_instance,food_fish]=True
    

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal: behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the book with ID 2091

        bind table: item where:
            surfaces(table) and inside(table, home_office)
        # Select a table that is inside the home office

        place_book_on_table(book, table)
        # Place the book on the selected table
--------------------------------------------------------------------------------
Exploration: 
behavior find_novel_2010_around_wallshelf_187(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(novel,wallshelf_instance)
        else:
            exp(novel,wallshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,wallshelf_instance]=True
        close[wallshelf_instance,novel]=True
    

behavior find_book_2091_around_toaster_144(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(book,toaster_instance)
        else:
            exp(book,toaster_instance)
    eff:
        unknown[book]=False
        close[book,toaster_instance]=True
        close[toaster_instance,book]=True
    

behavior find_chair_138_around_table_123(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: book_2091; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
def is_coffee_table_in_home_office(table: item):
    symbol is_coffee_table_home_office = exists room: item: (is_home_office(room) and inside(table, room))
    return is_coffee_table_home_office

behavior place_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind table_193: item where:
            id[table_193] == 193
        if not is_coffee_table_in_home_office(table_193):
            # If table_193 is not the coffee table in the home office, find the coffee table in the home office
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Verify if the table is located in the home office")
                    # Check if the visited table is the coffee table in the home office
                    if is_coffee_table_in_home_office(table):
                        achieve close_char(char, table)
                        # Approach the correct coffee table
                        bind correct_coffee_table: item where:
                            is_coffee_table_in_home_office(correct_coffee_table)
                        place_on_coffee_table(book_2091, correct_coffee_table)
        else:
            # If table_193 is the correct coffee table, proceed with placing the book
            achieve close_char(char, table_193)
            place_on_coffee_table(book_2091, table_193)

--------------------------------------------------------------------------------
Exploration: 
behavior find_novel_2010_around_wallshelf_187(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(novel,wallshelf_instance)
        else:
            exp(novel,wallshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,wallshelf_instance]=True
        close[wallshelf_instance,novel]=True
    

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

################################################################################

Error: Unexpected token Token('BASIC_TYPENAME', 'bool') at line 5800, column 34.
Expected one of: 
	* $END
	* INIT
	* COLON
	* INCLUDE
	* FEATURE
	* TYPEDEF
	* _RIGHT_ARROW
	* CONTROLLER
	* GOAL
	* DOMAIN
	* DEF
	* _NEWLINE
	* GENERATOR
	* _PRAGMA_KEYWORD
	* BEHAVIOR
	* IMPORT
	* UNDIRECTED_GENERATOR
	* OBJECTS
Previous tokens: [Token('RPAR', ')')]

--------------------------------------------------------------------------------
Goal:  
def is_known_table(table: item)  bool:
    # Check if the table is a known coffee table in the home office
    symbol is_home_office_table = exists o: item : (is_table(o) and inside(o, table) and is_home_office(inside(o, table)))
    return is_home_office_table

behavior move_book_to_correct_table(table: item, book: item):
    body:
        if not is_known_table(table):
            # If the table is not a known coffee table in the home office, relocate the book
            bind correct_table: item where:
                is_table(correct_table) and inside(correct_table, table) and is_home_office(inside(correct_table, table))
            achieve_once on(book, correct_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        bind current_table: item where:
            is_table(current_table) and id[current_table] == 193
        move_book_to_correct_table(current_table, book)

--------------------------------------------------------------------------------
Exploration: 
behavior find_novel_2010_around_bookshelf_137(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

################################################################################

Error: Unexpected token Token('BASIC_TYPENAME', 'bool') at line 5782, column 34.
Expected one of: 
	* $END
	* INIT
	* COLON
	* INCLUDE
	* FEATURE
	* TYPEDEF
	* _RIGHT_ARROW
	* CONTROLLER
	* GOAL
	* DOMAIN
	* DEF
	* _NEWLINE
	* GENERATOR
	* _PRAGMA_KEYWORD
	* BEHAVIOR
	* IMPORT
	* UNDIRECTED_GENERATOR
	* OBJECTS
Previous tokens: [Token('RPAR', ')')]

--------------------------------------------------------------------------------
Goal:  
def is_known_table(table: item)  bool:
    # Check if the table is a known coffee table in the home office
    symbol is_home_office_table = exists o: item : (is_table(o) and on(table, o) and is_home_office(o))
    return is_home_office_table

behavior move_book_to_correct_table(table: item, book: item):
    body:
        if not is_known_table(table):
            # If the table is not a known coffee table in the home office, relocate the book
            bind correct_table: item where:
                is_table(correct_table) and is_home_office(inside_char(char, correct_table))
            achieve_once on(book, correct_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        bind current_table: item where:
            is_table(current_table) and id[current_table] == 193
        move_book_to_correct_table(current_table, book)

--------------------------------------------------------------------------------
Exploration: 
behavior find_book_2092_around_home_office_161(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(book,home_office_instance)
        else:
            exp(book,home_office_instance)
    eff:
        unknown[book]=False
        close[book,home_office_instance]=True
        close[home_office_instance,book]=True
    

################################################################################

Error: Unexpected token Token('BIND', 'bind') at line 5800, column 1.
Expected one of: 
	* $END
	* INIT
	* INCLUDE
	* FEATURE
	* TYPEDEF
	* CONTROLLER
	* GOAL
	* DOMAIN
	* DEF
	* _NEWLINE
	* GENERATOR
	* _PRAGMA_KEYWORD
	* BEHAVIOR
	* IMPORT
	* UNDIRECTED_GENERATOR
	* OBJECTS
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n \n')]

--------------------------------------------------------------------------------
Goal:  
bind table: item where:
    is_table(table) and id[table]==193

bind coffee_table: item where:
    is_table(coffee_table) and inside(coffee_table, home_office)

behavior place_on_table(obj:item, target_table:item):
    body:
        achieve_once on(obj, target_table)

behavior verify_table(table:item):
    body:
        observe(table, "Verify if the table is located in the home office")

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2091

        place_on_table(book, table)

        if not inside(table, home_office):
            verify_table(table)
            place_on_table(book, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_chair_2119_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function verify_table not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal: 
def is_in_home_office(table: item):
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior verify_and_place_on_coffee_table(book:item, table_placed:item, coffee_table:item):
    body:
        if is_in_home_office(table_placed):
            # No action needed if already in home office
            achieve_once on(book, table_placed)
        else:
            verify_table(table_placed)
            achieve_once on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2091

        bind table: item where:
            is_table(table) and id[table]==193

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)

        verify_and_place_on_coffee_table(book, table, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_book_2091_around_home_office_161(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(book,home_office_instance)
        else:
            exp(book,home_office_instance)
    eff:
        unknown[book]=False
        close[book,home_office_instance]=True
        close[home_office_instance,book]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'table') at line 5818, column 23.
Expected one of: 
	* COLON

--------------------------------------------------------------------------------
Goal:  
def is_coffee_table(table:item):
    # Function to determine if a table is a coffee table in the home office
    symbol is_coffee_table=exists room: item: (is_home_office(room) and inside(table, room) and surfaces(table))
    return is_coffee_table

behavior put_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the designated table

behavior verify_coffee_table(table:item):
    body:
        if not is_coffee_table(table):
            observe(table, "Verify if the table is the coffee table located in the home office")
        # Verify if the given table is the coffee table If not, observe around it
        
behavior __goal__():
    body:
        # Since no coffee table is definitively identified, start by identifying it
        if not exists table: item : (is_coffee_table(table)):
            # If no known coffee table in the home office, search for it
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Verify if the table is the coffee table located in the home office")
        
        # Once confirmed, trigger actions to verify table and put the book on it
        bind coffee_table: item where:
            is_coffee_table(coffee_table) # Get the table thats confirmed to be a coffee table in the home office
        
        bind book: item where:
            is_book(book) and id[book]==2091 # Get the specific book by ID
        
        verify_coffee_table(coffee_table)
        put_on_table(book, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_book_2092_around_wallshelf_187(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(book,wallshelf_instance)
        else:
            exp(book,wallshelf_instance)
    eff:
        unknown[book]=False
        close[book,wallshelf_instance]=True
        close[wallshelf_instance,book]=True
    

behavior find_chair_138_around_chair_263(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==263
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'table') at line 5836, column 23.
Expected one of: 
	* COLON

--------------------------------------------------------------------------------
Goal:  
def is_coffee_table(table: item):
    # Function to determine if a table is a coffee table in the home office
    symbol is_table_coffee=exists room: item: (is_home_office(room) and inside(table, room) and surfaces(table))
    return is_table_coffee

behavior put_on_table(book: item, table: item):
    body:
        achieve_once on(book, table) # Place the book on the designated table

behavior verify_coffee_table(table: item):
    body:
        if not is_coffee_table(table):
            observe(table, "Verify if the table is the coffee table located in the home office")
        # Verify if the given table is the coffee table If not, observe around it
        
behavior __goal__():
    body:
        # Since no coffee table is definitively identified, start by identifying it
        if not exists table: item : (is_coffee_table(table)):  
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Verify if the table is the coffee table located in the home office")
        
        # Once confirmed, trigger actions to verify table and put the book on it
        bind coffee_table: item where:
            is_coffee_table(coffee_table) # Get the table that is confirmed to be a coffee table in the home office
        
        bind book: item where:
            is_book(book) and id[book]==2091 # Get the specific book by ID
        
        verify_coffee_table(coffee_table)
        put_on_table(book, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_novel_2010_around_home_office_161(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(novel,home_office_instance)
        else:
            exp(novel,home_office_instance)
    eff:
        unknown[novel]=False
        close[novel,home_office_instance]=True
        close[home_office_instance,novel]=True
    

behavior find_book_2091_around_wallshelf_187(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(book,wallshelf_instance)
        else:
            exp(book,wallshelf_instance)
    eff:
        unknown[book]=False
        close[book,wallshelf_instance]=True
        close[wallshelf_instance,book]=True
    

behavior find_chair_2119_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function achieve_close_char not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal: behavior position_shirt_on_board(char: character, shirt: item, ironing_board: item):
    body:
        achieve_close_char(char, ironing_board) # Move the character closer to the ironing board
        achieve_once on(shirt, ironing_board) # Place the shirt on the ironing_board

behavior power_on_iron(char: character, iron: item, ironing_board: item):
    body:
        achieve_close_char(char, iron) # Move the character closer to the iron
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve is_on(iron) # Turn on the iron

behavior iron_shirt(char: character, shirt: item, iron: item):
    body:
        achieve_once close_char(char, shirt) # Move the character closer to the shirt
        achieve is_on(iron) # Ensure the iron is on
        push(iron) # Push the iron
        pull(iron) # Pull the iron

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2158
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2144
        bind iron: item where:
            is_iron(iron) and id[iron]==2161
        
        position_shirt_on_board(char, shirt, ironing_board)
        power_on_iron(char, iron, ironing_board)
        iron_shirt(char, shirt, iron)
--------------------------------------------------------------------------------
Exploration: 
behavior find_rag_2052_around_washing_machine_2079(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(rag,washing_machine_instance)
        else:
            exp(rag,washing_machine_instance)
    eff:
        unknown[rag]=False
        close[rag,washing_machine_instance]=True
        close[washing_machine_instance,rag]=True
    

behavior find_clothes_gloves_2118_around_washing_machine_2079(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_gloves,washing_machine_instance)
        else:
            exp(clothes_gloves,washing_machine_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,washing_machine_instance]=True
        close[washing_machine_instance,clothes_gloves]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'on') at line 5774, column 22.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_salt_2068_around_fridge_140(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_salt,fridge_instance)
        else:
            exp(food_salt,fridge_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,fridge_instance]=True
        close[fridge_instance,food_salt]=True
    

behavior find_novel_2010_around_bookshelf_188(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'close_char') at line 5677, column 65.
Expected one of: 
	* RPAR
	* COMMA

--------------------------------------------------------------------------------
Goal:  
behavior find_pizza_hamburger(pizza:item, hamburger:item):
    body:
        achieve_once visited(pizza)
        # Mark the pizza as visited
        achieve_once visited(hamburger)
        # Mark the hamburger as visited

behavior __goal__():
    body:
        if exists fridge: item : (is_fridge(fridge) and achieve close_char(char, fridge)):
            # Find the fridge close to the character and prepare to check inside it
            bind pizza: item where:
                is_food_pizza(pizza) and inside(pizza, fridge)
            # Bind the pizza found inside the fridge
            bind hamburger: item where:
                is_food_hamburger(hamburger) and inside(hamburger, fridge)
            # Bind the hamburger found inside the fridge
            find_pizza_hamburger(pizza, hamburger)
        else:
            # Explore and check other rooms or places for pizza and hamburger if not found in the fridge
            foreach location: item:
                if not visited(location):
                    observe(location, "Searching for pizza and hamburger")

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_hamburger_2024_around_table_355(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_hamburger,table_instance)
        else:
            exp(food_hamburger,table_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,table_instance]=True
        close[table_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: fridge; available variables: [Variable<pizza: item>].
--------------------------------------------------------------------------------
Goal: behavior find_pizza_hamburger(pizza:item, hamburger:item):
    body:
        achieve_once visited(pizza)
        # Mark the pizza as visited
        achieve_once visited(hamburger)
        # Mark the hamburger as visited

behavior __goal__():
    body:
        if exists fridge: item : (is_fridge(fridge) and close_char(char, fridge)):
            # Find the fridge close to the character
            bind pizza: item where:
                is_food_pizza(pizza) and inside(pizza, fridge)
            # Bind the pizza found inside the fridge
            bind hamburger: item where:
                is_food_hamburger(hamburger) and inside(hamburger, fridge)
            # Bind the hamburger found inside the fridge
            find_pizza_hamburger(pizza, hamburger)
        else:
            # Explore and check other rooms or places for pizza and hamburger if not found in the fridge
            foreach location: item:
                if not visited(location):
                    observe(location, "Searching for pizza and hamburger")
--------------------------------------------------------------------------------
Exploration: 
behavior find_food_hamburger_2024_around_oven_295(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_hamburger,oven_instance)
        else:
            exp(food_hamburger,oven_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,oven_instance]=True
        close[oven_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

################################################################################

Error: Error trying to process rule "typed_argument":

Unknown type: str, known types are: ['item', 'character', 'id'].
--------------------------------------------------------------------------------
Goal: behavior find_food(item_type: str):
    # A behavior to find an item of a specified type
    body:
        if exists item: item: (item_type(item)):
            bind item: item where:
                item_type(item)
            achieve close_char(char, item)
        else:
            foreach item: item:
                if item_type(item) and not visited(item):
                    observe(item, "fCheck if this is item_type")

behavior __goal__():
    body:
        find_food(is_food_pizza)
        find_food(is_food_hamburger)
--------------------------------------------------------------------------------
Exploration: 
behavior find_food_hamburger_2024_around_oven_295(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_hamburger,oven_instance)
        else:
            exp(food_hamburger,oven_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,oven_instance]=True
        close[oven_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

################################################################################

Error: Error trying to process rule "typed_argument":

Unknown type: property, known types are: ['item', 'character', 'id'].
--------------------------------------------------------------------------------
Goal: 
behavior find_food(item_type: property):
    # A behavior to find an item of a specified type
    body:
        if exists item: item: (item_type(item)):
            bind item: item where:
                item_type(item)
            achieve close_char(char, item)
        else:
            foreach item: item:
                if item_type(item) and not visited(item):
                    observe(item, "Check if this is item_type")

behavior __goal__():
    body:
        find_food(is_food_pizza)
        find_food(is_food_hamburger)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_hamburger_2024_around_oven_295(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_hamburger,oven_instance)
        else:
            exp(food_hamburger,oven_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,oven_instance]=True
        close[oven_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_hamburger_2024; available variables: [Variable<plate: item>].
--------------------------------------------------------------------------------
Goal: 
behavior load_plate_into_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate inside the microwave

behavior start_heating(microwave:item):
    body:
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave) and open(microwave)
        # Select the microwave that is already open

        bind plate: item where:
            on(food_hamburger_2024, plate) and on(food_pizza_2034, plate)
        # Select the plate with the hamburger and pizza

        load_plate_into_microwave(plate, microwave)
        start_heating(microwave)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2072_around_coffe_maker_290(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(bowl,coffe_maker_instance)
        else:
            exp(bowl,coffe_maker_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffe_maker_instance]=True
        close[coffe_maker_instance,bowl]=True
    

################################################################################

Error: Unexpected token Token('_NEWLINE', '\n            ') at line 5942, column 81.
Expected one of: 
	* HEX_NUMBER
	* FLOAT_NUMBER
	* IMAG_NUMBER
	* VARNAME
	* PLUS
	* TILDE
	* NOT
	* OCT_NUMBER
	* BIN_NUMBER
	* ELLIPSIS
	* TRUE
	* NONE
	* LPAR
	* FALSE
	* MINUS
	* COLON
	* LONG_STRING
	* DEC_NUMBER
	* STRING
	* DO
	* LSQB

--------------------------------------------------------------------------------
Goal:  
behavior load_plate_into_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)

behavior start_heating(microwave:item):
    body:
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave) and open(microwave)

        bind plate: item where:
            exists item: item: (is_food_hamburger(item) and on(item, plate)) and
            exists item: item: (is_food_pizza(item) and on(item, plate))

        load_plate_into_microwave(plate, microwave)
        start_heating(microwave)


--------------------------------------------------------------------------------
Exploration: 
behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_bowl_2072_around_bookshelf_233(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bowl,bookshelf_instance)
        else:
            exp(bowl,bookshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bookshelf_instance]=True
        close[bookshelf_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_hamburger_2024; available variables: [Variable<plate: item>].
--------------------------------------------------------------------------------
Goal:  
behavior heat_in_microwave(plate: item, microwave: item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate with food inside the microwave
        achieve_once closed(microwave)
        # Close the microwave to start heating
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the pizza and hamburger

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_hamburger_2024, plate) and on(food_pizza_2034, plate)
        # Select the plate with pizza and hamburger on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(plate, microwave)


--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2071_around_stove_2065(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(bowl,stove_instance)
        else:
            exp(bowl,stove_instance)
    eff:
        unknown[bowl]=False
        close[bowl,stove_instance]=True
        close[stove_instance,bowl]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5903, column 50.
Expected one of: 
	* COMMA
	* RPAR
	* EQUAL

--------------------------------------------------------------------------------
Goal:  
behavior heat_in_microwave(plate: item, microwave: item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate with food inside the microwave
        achieve_once closed(microwave)
        # Close the microwave to start heating
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the pizza and hamburger

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_hamburger: item, plate) and on(food_pizza: item, plate)
        # Select the plate with pizza and hamburger on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(plate, microwave)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_hamburger_2024; available variables: [Variable<plate: item>].
--------------------------------------------------------------------------------
Goal:  
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave) # Put the plate with food inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_hamburger_2024, plate) and on(food_pizza_2034, plate)
        # Select the plate with burger and pizza on it
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave to heat the plate of food
        
        heat_in_microwave(plate, microwave)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2072_around_bookshelf_233(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bowl,bookshelf_instance)
        else:
            exp(bowl,bookshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bookshelf_instance]=True
        close[bookshelf_instance,bowl]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'o') at line 5900, column 40.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

--------------------------------------------------------------------------------
Goal:  
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave) # Put the plate with food inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and exists o: item : (on(o, plate) and (is_food_hamburger(o) or is_food_pizza(o)))
        # Select the plate with burger and pizza on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave to heat the plate of food

        heat_in_microwave(plate, microwave)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: dining_room_201; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior put_on_table(plate: item, table: item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room_201)
        # Select a table inside the dining room
        
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with ID 1000 which has pizza and hamburger on it

        put_on_table(plate, table)
        # Place the plate on the selected table in the dining room

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: continue; available variables: [Variable<room: item>].
--------------------------------------------------------------------------------
Goal:  
def has_light_on(room: item):
    # Function to check if there is a light on in the specified room
    symbol light_on = exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return light_on

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):
                # Assuming these are the types of rooms identified in the household
                if not has_light_on(room):
                    # If there is no light on in the room, check for a nearby light to switch on
                    foreach light: item:
                        if is_light(light) and not is_on(light) and inside(light, room):
                            achieve_once is_on(light)
                else:
                    # If the light is already on, do nothing
                    continue

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'light') at line 5722, column 34.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
def has_light_off(room:item):
    # Function to check if there is a light that is off in the specified room
    symbol light_off= not exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return light_off

behavior turn_on_light_in_room(room:item):
    body:
        symbol light=exists light: item : (is_light(light) and is_off(light) and inside(light, room))
        if light:
            bind light_in_room: item where:
                is_light(light_in_room) and is_off(light_in_room) and inside(light_in_room, room)
            achieve_once is_on(light_in_room)

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):
                if has_light_off(room):
                    turn_on_light_in_room(room)

--------------------------------------------------------------------------------
Exploration: 
behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_vacuum_cleaner_2070_around_home_office_319(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(vacuum_cleaner,home_office_instance)
        else:
            exp(vacuum_cleaner,home_office_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,home_office_instance]=True
        close[home_office_instance,vacuum_cleaner]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'light') at line 5722, column 34.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
def has_light_off(room:item):
    # Function to check if there is a light that is off in the specified room
    symbol light_off= not exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return light_off

behavior turn_on_light_in_room(room:item):
    body:
        if exists light: item : (is_light(light) and is_off(light) and inside(light, room)):
            bind light_in_room: item where:
                is_light(light_in_room) and is_off(light_in_room) and inside(light_in_room, room)
            achieve_once is_on(light_in_room)

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):
                if has_light_off(room):
                    turn_on_light_in_room(room)

--------------------------------------------------------------------------------
Exploration: 
behavior find_remote_control_2052_around_home_office_319(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(remote_control,home_office_instance)
        else:
            exp(remote_control,home_office_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,home_office_instance]=True
        close[home_office_instance,remote_control]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_phone_247_around_phone_247(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==247
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'light') at line 5667, column 37.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
def light_needs_to_be_turned_on(room: item):
    symbol no_light_on = not exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return no_light_on

behavior turn_on_light_if_needed(room: item):
    body:
        if light_needs_to_be_turned_on(room):
            foreach light: item:
                if is_light(light) and inside(light, room) and is_off(light):
                    achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if exists light: item : (is_light(light) and inside(light, room)):
                turn_on_light_if_needed(room)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'light') at line 5667, column 37.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
def light_needs_to_be_turned_on(room: item):
    symbol no_light_on = not exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return no_light_on

behavior turn_on_light_if_needed(room: item):
    body:
        if light_needs_to_be_turned_on(room):
            foreach light: item:
                if is_light(light) and inside(light, room) and is_off(light):
                    achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if exists light: item : (is_light(light) and inside(light, room)):
                turn_on_light_if_needed(room)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'light') at line 5686, column 35.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
def is_light_off(room: item):
    # Function to check if there is no light on in the specified room
    symbol light_off = not exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return light_off

behavior turn_on_light(room: item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room)
        achieve is_on(light)
        # Turn on a light inside the specified room

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):
                # Consider all room types
                if is_light_off(room):
                    turn_on_light(room)
                    # Turn on a light if it is off

--------------------------------------------------------------------------------
Exploration: 
behavior find_remote_control_2052_around_home_office_319(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(remote_control,home_office_instance)
        else:
            exp(remote_control,home_office_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,home_office_instance]=True
        close[home_office_instance,remote_control]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'light') at line 5668, column 35.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
def is_light_off(room: item):
    # Function to check if there is no light on in the specified room
    symbol light_off = not exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return light_off

behavior turn_on_light(room: item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room)
        achieve is_on(light)
        # Turn on a light inside the specified room

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):
                # Consider all room types
                if is_light_off(room):
                    turn_on_light(room)
                    # Turn on a light if it is off

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'light') at line 5668, column 37.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
def light_is_off_in_room(room: item):
    # Function to check if all lights in the specified room are off
    symbol no_light_on = not exists light: item : (is_light(light) and inside(light, room) and is_on(light))
    return no_light_on

behavior turn_on_light_in_room(room: item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room) and is_off(light)
        # Select a light that is off within the specified room
        achieve_once is_on(light)
        # Turn on the light in the room
        
behavior __goal__():
    body:
        foreach room: item:
            # Iterate over all rooms
            if not visited(room):
                # Check all rooms that have not been visited
                observe(room,"Identify the room and its purpose")
                # Observe each room to identify it and its purpose

        foreach room: item:
            # Iterate over all rooms to ensure there is a light on
            if light_is_off_in_room(room):
                # If all lights in the room are off, turn one on
                turn_on_light_in_room(room)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'light') at line 5667, column 37.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal: def light_is_off_in_room(room: item):
    # Function to check if all lights in the specified room are off
    symbol no_light_on = not exists light: item : (is_light(light) and inside(light, room) and is_on(light))
    return no_light_on

behavior turn_on_light_in_room(room: item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room) and is_off(light)
        # Select a light that is off within the specified room
        achieve_once is_on(light)
        # Turn on the light in the room

behavior __goal__():
    body:
        foreach room: item:
            # Iterate over all rooms
            if not visited(room):
                # Check all rooms that have not been visited
                observe(room, "Identify the room and its purpose")
                # Observe each room to identify it and its purpose

        foreach room: item:
            # Iterate over all rooms to ensure there is a light on
            if light_is_off_in_room(room):
                # If all lights in the room are off, turn one on
                turn_on_light_in_room(room)
--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Variable room already exists.
--------------------------------------------------------------------------------
Goal: 
def has_lights_off(room:item):
    # Function to check if lights are off in a given room
    symbol has_lights_off= exists light: item : (is_light(light) and inside(light, room) and is_off(light))
    return has_lights_off

behavior turn_on_light(room:item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room) and is_off(light)
        achieve_once is_on(light)
        # This will turn on a light that is off in the specified room

behavior __goal__():
    body:
        foreach room: item:
            # Iterate over all rooms to check the lighting condition
            if exists room: item : (has_lights_off(room)):
                # If there is a room where lights are off, turn the light on
                turn_on_light(room)
--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: ice_cream; available variables: [].
--------------------------------------------------------------------------------
Goal:  
behavior find_ice_cream_and_bowl():
    body:
        bind ice_cream: item where:
            is_food_ice_cream(ice_cream)
        # Select an item classified as ice cream

        bind bowl: item where:
            is_bowl(bowl)
        # Select an item classified as a bowl

behavior place_ice_cream_in_bowl(ice_cream:item, bowl:item):
    body:
        achieve_once inside(ice_cream, bowl)
        # Place the ice cream inside the bowl

behavior __goal__():
    body:
        find_ice_cream_and_bowl()
        place_ice_cream_in_bowl(ice_cream, bowl)


--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2140_around_cupboard_118(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_food_ice_cream_2097_around_fridge_126(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

################################################################################

Error: Unexpected token Token('COMMA', ',') at line 5216, column 25.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
behavior find_ice_cream_and_bowl():
    body:
        bind ice_cream: item where:
            is_food_ice_cream(ice_cream)
        # Select an item classified as ice cream

        bind bowl: item where:
            is_bowl(bowl)
        # Select an item classified as a bowl

        return ice_cream, bowl

behavior place_ice_cream_in_bowl(ice_cream:item, bowl:item):
    body:
        achieve_once inside(ice_cream, bowl)
        # Place the ice cream inside the bowl

behavior __goal__():
    body:
        ice_cream, bowl = find_ice_cream_and_bowl()
        place_ice_cream_in_bowl(ice_cream, bowl)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_ice_cream_2097_around_fridge_126(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

behavior find_bowl_2140_around_kitchen_counter_122(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

################################################################################

Error: Unexpected token Token('BEHAVIOR', 'behavior') at line 5363, column 9.
Expected one of: 
	* UNORDERED
	* VARNAME
	* COMMIT
	* PACHIEVE_HOLD
	* ASSERT_HOLD
	* EXISTS
	* PACHIEVE_ONCE
	* WHILE
	* UNTRACK
	* LET
	* PLUS
	* ACHIEVE_HOLD
	* FINDALL
	* FOREACH
	* BIND
	* NONE
	* FORALL
	* HEX_NUMBER
	* ACHIEVE_ONCE
	* _DEDENT
	* SYMBOL
	* TRUE
	* FALSE
	* LSQB
	* CRITICAL
	* PREAMBLE
	* LPAR
	* ACHIEVE
	* STRING
	* BIN_NUMBER
	* DO
	* SEQUENTIAL
	* NOT
	* FINDONE
	* FLOAT_NUMBER
	* IF
	* PASS
	* RETURN
	* LONG_STRING
	* ALTERNATIVE
	* OCT_NUMBER
	* _LLSQB
	* MINUS
	* IMAG_NUMBER
	* TILDE
	* DEC_NUMBER
	* STAR
	* COLON
	* PACHIEVE
	* PROMOTABLE
	* ELLIPSIS
	* ASSERT_ONCE
	* ASSERT

--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind food_ice_cream: item where:
            is_food_ice_cream(food_ice_cream) and inside(food_ice_cream, bowl_2140)
        # Bind the ice cream, which is already in the bowl

        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2140
        # Select the bowl that already contains the ice cream

        bind food_jam: item where:
            is_food_jam(food_jam)
        # Bind the jam, which needs to be added on top of the ice cream

        behavior add_jam_on_ice_cream(food_jam: item, ice_cream: item, bowl: item):
            body:
                achieve_once on(food_jam, food_ice_cream)
                # Add jam on top of the ice cream in the bowl

        add_jam_on_ice_cream(food_jam, food_ice_cream, bowl)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_butter_2007_around_cutting_board_2123(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_butter,cutting_board_instance)
        else:
            exp(food_butter,cutting_board_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cutting_board_instance]=True
        close[cutting_board_instance,food_butter]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: bowl_2140; available variables: [Variable<food_ice_cream: item>].
--------------------------------------------------------------------------------
Goal:  
behavior add_jam_on_ice_cream(food_jam: item, ice_cream: item, bowl: item):
    body:
        achieve_once on(food_jam, ice_cream)
        # Add jam on top of the ice cream in the bowl

behavior __goal__():
    body:
        bind food_ice_cream: item where:
            is_food_ice_cream(food_ice_cream) and inside(food_ice_cream, bowl_2140)
        # Bind the ice cream, which is already in the bowl

        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2140
        # Select the bowl that already contains the ice cream

        bind food_jam: item where:
            is_food_jam(food_jam)
        # Bind the jam, which needs to be added on top of the ice cream

        add_jam_on_ice_cream(food_jam, food_ice_cream, bowl)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_food_2064_around_cupboard_117(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_food,cupboard_instance)
        else:
            exp(food_food,cupboard_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cupboard_instance]=True
        close[cupboard_instance,food_food]=True
    

################################################################################

Error: Unexpected token Token('BIND', 'bind') at line 5752, column 1.
Expected one of: 
	* _NEWLINE
	* _PRAGMA_KEYWORD
	* DEF
	* INCLUDE
	* INIT
	* $END
	* GENERATOR
	* GOAL
	* FEATURE
	* UNDIRECTED_GENERATOR
	* IMPORT
	* DOMAIN
	* TYPEDEF
	* OBJECTS
	* BEHAVIOR
	* CONTROLLER
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n \n')]

--------------------------------------------------------------------------------
Goal:  
bind chicken: item where:
    is_food_chicken(chicken)

bind knife: item where:
    is_knife(knife)

bind cutting_board: item where:
    is_cutting_board(cutting_board)

behavior place_chicken_on_board(chicken:item, board:item):
    body:
        achieve_once on(chicken, board)

behavior cut_the_chicken(chicken:item, knife:item):
    body:
        achieve_once cut(chicken)

behavior __goal__():
    body:
        place_chicken_on_board(chicken, cutting_board)
        cut_the_chicken(chicken, knife)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function is_lookable not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
def has_cup(obj:item):
    # Function to check if there is a cup in a specified location
    symbol cup_present = exists o: item : (is_cup(o) and close(o, obj))
    return cup_present

behavior __goal__():
    body:
        if exists obj: item : (has_cup(obj)):
            # If a cup is already found near the character, move to approach it
            bind obj: item where:
                is_cup(obj)
            achieve close_char(char, obj)

        else:
            # Check all potential locations for an unvisited cup
            foreach obj: item:
                if is_lookable(obj) and not visited(obj):
                    observe(obj, "Check if there is a cup around")

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2063_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_ice_cream_2025; available variables: [Variable<bowl: item>].
--------------------------------------------------------------------------------
Goal:  
behavior search_for_jam(jam:item):
    body:
        achieve_once visited(jam)

behavior add_jam_on_ice_cream(jam:item, bowl:item):
    body:
        achieve_once on(jam, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and inside(food_ice_cream_2025, bowl)

        foreach jam: item:
            if is_food_jam(jam) and not visited(jam):
                search_for_jam(jam)

        bind jam: item where:
            is_food_jam(jam)

        add_jam_on_ice_cream(jam, bowl)

--------------------------------------------------------------------------------
Exploration: 
behavior find_oil_2079_around_closetdrawer_384(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(oil,closetdrawer_instance)
        else:
            exp(oil,closetdrawer_instance)
    eff:
        unknown[oil]=False
        close[oil,closetdrawer_instance]=True
        close[closetdrawer_instance,oil]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'ice_cream') at line 5811, column 38.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

--------------------------------------------------------------------------------
Goal:  
behavior search_for_jam(jam:item):
    body:
        achieve_once visited(jam)

behavior add_jam_on_ice_cream(jam:item, bowl:item):
    body:
        achieve_once on(jam, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and exists ice_cream: item : (is_food_ice_cream(ice_cream) and inside(ice_cream, bowl))

        foreach jam: item:
            if is_food_jam(jam) and not visited(jam):
                search_for_jam(jam)

        bind jam: item where:
            is_food_jam(jam)

        add_jam_on_ice_cream(jam, bowl)

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2054_around_bathtub_30(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==30
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(soap,bathtub_instance)
        else:
            exp(soap,bathtub_instance)
    eff:
        unknown[soap]=False
        close[soap,bathtub_instance]=True
        close[bathtub_instance,soap]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal:  
behavior find_cup(cup:item):
    body:
        achieve_once visited(cup)

behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        foreach cup: item:
            if is_cup(cup) and not visited(cup):
                find_cup(cup)
                break

        bind cup: item where:
            is_cup(cup) and visited(cup)

        fill_cup_with_water(cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2064_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function achieve_close_char not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior find_cup(cup:item):
    body:
        achieve_once visited(cup)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_close_char(char, faucet)
        achieve_once inhand(cup)
        achieve is_on(faucet)
        achieve has_water(cup)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        foreach cup: item:
            if is_cup(cup) and not visited(cup) and id[cup] == 2049:
                find_cup(cup)

        bind cup: item where:
            is_cup(cup) and visited(cup) and id[cup] == 2049

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20

        fill_cup_with_water(cup, faucet)

--------------------------------------------------------------------------------
Exploration: 
behavior find_measuring_cup_2012_around_photoframe_219(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==219
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(measuring_cup,photoframe_instance)
        else:
            exp(measuring_cup,photoframe_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,photoframe_instance]=True
        close[photoframe_instance,measuring_cup]=True
    

################################################################################

Error: Unexpected token Token('_DEDENT', '') at line 5843, column 10.
Expected one of: 
	* _INDENT

--------------------------------------------------------------------------------
Goal:  
behavior observe_banana(banana:item):
    body:
        achieve_once visited(banana)

behavior peel_the_banana(banana:item):
    body:
        # Peeling the banana does not have a state in the available list, implicit from instructions

behavior slice_the_banana(banana:item, knife:item):
    body:
        achieve_once cut(banana)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and not visited(banana)
        # Select a banana that hasnt been visited
        
        observe_banana(banana)
        # Observe the banana

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        peel_the_banana(banana)
        slice_the_banana(banana, knife)

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_2004_around_couch_352(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

################################################################################

Error: Unexpected token Token('_DEDENT', '') at line 5843, column 10.
Expected one of: 
	* _INDENT

--------------------------------------------------------------------------------
Goal: 
behavior observe_banana(banana:item):
    body:
        achieve_once visited(banana)

behavior peel_the_banana(banana:item):
    body:
        # Peeling the banana does not have a state in the available list, implicit from instructions

behavior slice_the_banana(banana:item, knife:item):
    body:
        achieve_once cut(banana)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and not visited(banana)
        # Select a banana that hasnt been visited
        
        observe_banana(banana)
        # Observe the banana

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        peel_the_banana(banana)
        slice_the_banana(banana, knife)

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<fryingpan: item>].
--------------------------------------------------------------------------------
Goal:  
behavior fry_bananas(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan) # Put the banana slices into the frying pan

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the cut banana

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065) and inside(oil_2079, fryingpan)
        # Select a frying pan that is on the stove and has oil inside

        fry_bananas(banana, fryingpan) # Fry the banana slices in the frying pan

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_hanger_130_around_wallshelf_234(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(hanger,wallshelf_instance)
        else:
            exp(hanger,wallshelf_instance)
    eff:
        unknown[hanger]=False
        close[hanger,wallshelf_instance]=True
        close[wallshelf_instance,hanger]=True
    

behavior find_drawing_175_around_drawing_175(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==175
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: oil_2079; available variables: [Variable<fryingpan: item>].
--------------------------------------------------------------------------------
Goal:  
behavior fry_bananas(banana:item, fryingpan:item):
    body:
        achieve_once inside(banana, fryingpan) # Put the banana slices into the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the correct stove

        bind banana: item where:
            is_food_banana(banana) and cut(banana)
        # Select the cut banana

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove) and inside(oil_2079, fryingpan)
        # Select a frying pan that is on the stove and has oil inside

        fry_bananas(banana, fryingpan) # Fry the banana slices in the frying pan

--------------------------------------------------------------------------------
Exploration: 
behavior find_hanger_115_around_closetdrawer_122(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_122(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: cereal; available variables: [Variable<milk: item>].
--------------------------------------------------------------------------------
Goal:  
behavior search_for_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk_and_cereal(milk, cereal=None)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_milk_and_cereal(milk=None, cereal=cereal)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2095_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: cereal; available variables: [Variable<milk: item>].
--------------------------------------------------------------------------------
Goal:  
behavior search_for_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk_and_cereal(milk, cereal=cereal)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_milk_and_cereal(milk=milk, cereal=cereal)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2097_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_butter_2018_around_kitchen_counter_129(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'this') at line 5869, column 34.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

--------------------------------------------------------------------------------
Goal:  
behavior find_item(item:item, question:string):
    body:
        observe(item, "question")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cereal: item where:
            is_food_cereal(cereal)

        if not visited(milk):
            find_item(milk, Find this item)

        if not visited(cereal):
            find_item(cereal, Find this item)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2096_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'this') at line 5905, column 34.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

--------------------------------------------------------------------------------
Goal:  
behavior find_item(item:item, question:string):
    body:
        observe(item, "question")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cereal: item where:
            is_food_cereal(cereal)

        if not visited(milk):
            find_item(milk, Find this item)

        if not visited(cereal):
            find_item(cereal, Find this item)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_onion_2026_around_kitchen_counter_132(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_butter_2018_around_kitchen_counter_129(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

behavior find_food_bread_2016_around_sink_133(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_bread,sink_instance)
        else:
            exp(food_bread,sink_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,sink_instance]=True
        close[sink_instance,food_bread]=True
    

behavior find_food_orange_2008_around_cupboard_131(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_orange,cupboard_instance)
        else:
            exp(food_orange,cupboard_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,cupboard_instance]=True
        close[cupboard_instance,food_orange]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: cereal; available variables: [Variable<milk: item>].
--------------------------------------------------------------------------------
Goal:  
behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                find_milk_and_cereal(milk, cereal)
        
        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                find_milk_and_cereal(milk, cereal)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2096_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function is_hot not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal: 
behavior pour_hot_milk(cup:item, milk:item):
    body:
        achieve_once inside(milk, cup)

behavior add_cereal(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        
        bind milk: item where:
            is_milk(milk) and is_hot(milk) # Assuming is_hot is intended to check the temperature
        
        bind cereal: item where:
            is_food_cereal(cereal)

        pour_hot_milk(cup, milk)
        add_cereal(cereal, cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2096_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_cup_2089_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function cleaned not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve_once cleaned(faucet)
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==308

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_socks_2115_around_basket_for_clothes_2040(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

behavior find_bowl_2095_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: pot_78; available variables: [Variable<vegetables: item>].
--------------------------------------------------------------------------------
Goal: behavior find_bowl(bowl:item):
    body:
        achieve_once visited(bowl)

behavior place_vegetables_in_bowl(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)

behavior wait_for_cooling(vegetables:item):
    body:
        achieve clean(vegetables)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, pot_78)
        # Select the boiled vegetables that are in the pot

        foreach bowl: item:
            if is_bowl(bowl) and not visited(bowl):
                find_bowl(bowl)
        
        bind cooling_bowl: item where:
            is_bowl(cooling_bowl) and visited(cooling_bowl)

        place_vegetables_in_bowl(vegetables, cooling_bowl)
        wait_for_cooling(vegetables)
--------------------------------------------------------------------------------
Exploration: 
behavior find_food_carrot_2086_around_cupboard_118(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_cheese_2088_around_cupboard_118(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cheese,cupboard_instance)
        else:
            exp(food_cheese,cupboard_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,cupboard_instance]=True
        close[cupboard_instance,food_cheese]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal:  
behavior find_pot(pot:item):
    body:
        achieve_once visited(pot)

behavior find_bowl(bowl:item):
    body:
        achieve_once visited(bowl)

behavior place_vegetables_in_bowl(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)

behavior wait_for_cooling(vegetables:item):
    body:
        achieve clean(vegetables)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inside(pot, stove_2135)
        # Select the pot

        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, pot)
        # Select the boiled vegetables that are in the pot

        foreach bowl: item:
            if is_bowl(bowl) and not visited(bowl):
                find_bowl(bowl)
        
        bind cooling_bowl: item where:
            is_bowl(cooling_bowl) and visited(cooling_bowl)

        place_vegetables_in_bowl(vegetables, cooling_bowl)
        wait_for_cooling(vegetables)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_carrot_2086_around_cupboard_118(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_clothes_skirt_2160_around_washing_machine_2079(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_skirt,washing_machine_instance)
        else:
            exp(clothes_skirt,washing_machine_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,washing_machine_instance]=True
        close[washing_machine_instance,clothes_skirt]=True
    

behavior find_cup_2049_around_bowl_2140(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(cup,bowl_instance)
        else:
            exp(cup,bowl_instance)
    eff:
        unknown[cup]=False
        close[cup,bowl_instance]=True
        close[bowl_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function cooked not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior move_boiled_vegetables_to_bowl(vegetable:item, bowl:item):
    body:
        achieve_once inside(vegetable, bowl)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable) and cooked(vegetable)
        # Select the boiled vegetable

        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl

        move_boiled_vegetables_to_bowl(vegetable, bowl)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2096_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'inhand') at line 6014, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
behavior grab_and_fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve once inhand(cup)
        achieve has_water(cup)
        achieve_once is_on(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2006
        # Select the cup with ID 2006 that is already located

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        grab_and_fill_cup_with_water(cup, faucet)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'inside') at line 5848, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)

behavior close_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and clean(vegetables)

        bind pot: item where:
            is_pot(pot) and has_water(pot)

        bind stove: item where:
            is_stove(stove) and is_on(stove)

        bind fridge: item where:
            is_fridge(fridge)

        achieve once inside(vegetables, pot)
        # Place the clean vegetables inside the pot with water

        store_pot_in_fridge(pot, fridge)
        close_fridge_door(fridge)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2071_around_closetdrawer_377(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(bowl,closetdrawer_instance)
        else:
            exp(bowl,closetdrawer_instance)
    eff:
        unknown[bowl]=False
        close[bowl,closetdrawer_instance]=True
        close[closetdrawer_instance,bowl]=True
    

behavior find_fork_2080_around_closetdrawer_377(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function store_pot_in_fridge not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior wash_vegetables(vegetables:item):
    body:
        achieve clean(vegetables)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and clean(vegetables)

        bind pot: item where:
            is_pot(pot) and has_water(pot)

        bind stove: item where:
            is_stove(stove) and is_on(stove)

        bind fridge: item where:
            is_fridge(fridge)

        wash_vegetables(vegetables)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        place_vegetables_in_pot(vegetables, pot)
        store_pot_in_fridge(pot, fridge)
        close_fridge_door(fridge)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2072_around_closetdrawer_377(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(bowl,closetdrawer_instance)
        else:
            exp(bowl,closetdrawer_instance)
    eff:
        unknown[bowl]=False
        close[bowl,closetdrawer_instance]=True
        close[closetdrawer_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_pizza_2065; available variables: [Variable<plate: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_plate_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)

behavior heat_in_microwave(microwave:item):
    body:
        achieve_once closed(microwave) # Close the microwave door
        achieve is_on(microwave) # Turn on the microwave

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_pizza_2065, plate) and on(food_hamburger_2057, plate)
        # Bind plate_2105 with pizza and hamburger on it
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave to heat the food
        
        place_plate_in_microwave(plate, microwave)
        heat_in_microwave(microwave)

--------------------------------------------------------------------------------
Exploration: 
behavior find_tray_142_around_microwave_149(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(tray,microwave_instance)
        else:
            exp(tray,microwave_instance)
    eff:
        unknown[tray]=False
        close[tray,microwave_instance]=True
        close[microwave_instance,tray]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'food_pizza') at line 5983, column 40.
Expected one of: 
	* SEMICOLON
	* COMMA
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
behavior place_plate_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)

behavior heat_in_microwave(microwave:item):
    body:
        achieve_once closed(microwave) # Close the microwave door
        achieve is_on(microwave) # Turn on the microwave

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and exists food_pizza: item: (is_food_pizza(food_pizza) and on(food_pizza, plate)) 
            and exists food_hamburger: item: (is_food_hamburger(food_hamburger) and on(food_hamburger, plate))
        # Bind plate_2105 with pizza and hamburger on it
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave to heat the food
        
        place_plate_in_microwave(plate, microwave)
        heat_in_microwave(microwave)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: milk; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_cup_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)

behavior close_the_microwave_door(microwave:item):
    body:
        achieve_once closed(microwave)

behavior turn_on_microwave(microwave:item):
    body:
        achieve is_on(microwave)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inside(cup, milk) # Ensure that cup contains milk

        bind microwave: item where:
            is_microwave(microwave)

        place_cup_in_microwave(cup, microwave)
        close_the_microwave_door(microwave)
        turn_on_microwave(microwave)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'milk') at line 5961, column 36.
Expected one of: 
	* SEMICOLON
	* COMMA
	* _NEWLINE

--------------------------------------------------------------------------------
Goal: 
behavior place_cup_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)

behavior close_the_microwave_door(microwave:item):
    body:
        achieve_once closed(microwave)

behavior turn_on_microwave(microwave:item):
    body:
        achieve is_on(microwave)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and exists milk: item : (is_milk(milk) and inside(milk, cup))
        # Define milk and ensure that the cup contains milk

        bind microwave: item where:
            is_microwave(microwave)

        place_cup_in_microwave(cup, microwave)
        close_the_microwave_door(microwave)
        turn_on_microwave(microwave)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2095_around_microwave_149(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(bowl,microwave_instance)
        else:
            exp(bowl,microwave_instance)
    eff:
        unknown[bowl]=False
        close[bowl,microwave_instance]=True
        close[microwave_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function has_milk not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior heat_cup_of_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_milk(cup)
        # Select the cup containing milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_cup_of_milk_in_microwave(cup, microwave)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'milk') at line 5479, column 36.
Expected one of: 
	* SEMICOLON
	* COMMA
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
behavior add_cereal_to_milk_and_serve(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)

        bind cup: item where:
            is_cup(cup) and exists milk: item : (is_milk(milk) and inside(milk, cup))
        # Select the cup containing hot milk

        add_cereal_to_milk_and_serve(cereal, cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_measuring_cup_2012_around_cup_2049(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2049
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(measuring_cup,cup_instance)
        else:
            exp(measuring_cup,cup_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,cup_instance]=True
        close[cup_instance,measuring_cup]=True
    

behavior find_food_food_2073_around_bowl_2141(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_food,bowl_instance)
        else:
            exp(food_food,bowl_instance)
    eff:
        unknown[food_food]=False
        close[food_food,bowl_instance]=True
        close[bowl_instance,food_food]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'milk') at line 5464, column 36.
Expected one of: 
	* SEMICOLON
	* COMMA
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
behavior add_cereal_to_hot_milk(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)

behavior serve_cup_on_table(cup:item, table:item):
    body:
        achieve_once on(cup, table)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)

        bind cup: item where:
            is_cup(cup) and exists milk:item : (is_milk(milk) and inside(milk, cup))
        
        bind table: item where:
            is_table(table)

        add_cereal_to_hot_milk(cereal, cup)
        serve_cup_on_table(cup, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: cup; available variables: [Variable<cereal: item>].
--------------------------------------------------------------------------------
Goal:  
behavior add_cereal_to_milk(cereal:item, milk:item):
    body:
        achieve_once inside(cereal, milk)

behavior place_cup_on_table(cup:item, table:item):
    body:
        achieve_once on(cup, table)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal) and inside(cereal, cup)
        # Select the cereal inside the cup

        bind milk: item where:
            is_milk(milk) and inside(milk, cup)
        # Select the milk inside the cup

        bind table: item where:
            is_table(table)
        # Select an available table
        
        add_cereal_to_milk(cereal, milk)
        place_cup_on_table(cup, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'cereal') at line 5806, column 83.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def has_milk_and_cereal():
    # Check if both milk and cereal are found
    symbol found_milk_and_cereal = exists milk: item : (is_milk(milk)) and exists cereal: item : (is_food_cereal(cereal))
    return found_milk_and_cereal

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        if not has_milk_and_cereal():
            # If milk and cereal are not both found, proceed to search for them
            foreach milk: item:
                if is_milk(milk) and not visited(milk):
                    search_for_milk(milk)

            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    search_for_cereal(cereal)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'cereal') at line 5805, column 105.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def has_milk_and_cereal(fridge:item):
    # Function to check if both milk and cereal are located in or around the specified fridge
    symbol has_milk_and_cereal = exists milk: item : (is_milk(milk) and close(milk, fridge)) and exists cereal: item : (is_food_cereal(cereal) and close(cereal, fridge))
    return has_milk_and_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289 
        # Select the fridge with ID 289

        if has_milk_and_cereal(fridge):
            achieve close_char(char, fridge)
        else:
            observe(fridge, "Look for milk and cereal around this fridge")

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'c') at line 5823, column 105.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def has_milk_and_cereal(fridge: item):
    # Function to check if both milk and cereal are located in or around the specified fridge
    symbol has_milk_and_cereal = exists milk: item : (is_milk(milk) and close(milk, fridge)) and exists c: item : (is_food_cereal(c) and close(c, fridge))
    return has_milk_and_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289 
        # Select the fridge with ID 289

        if has_milk_and_cereal(fridge):
            achieve close_char(char, fridge)
        else:
            observe(fridge, "Look for milk and cereal around this fridge")

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'cereal') at line 5788, column 91.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def find_milk_and_cereal():
    # Function to check if both milk and cereal have been found
    symbol found_items = exists milk: item : (is_milk(milk) and visited(milk)) and exists cereal: item : (is_food_cereal(cereal) and visited(cereal))
    return found_items

behavior search_for_items(item_name:string):
    body:
        foreach obj: item:
            if (is_milk(obj) and item_name == milk or is_food_cereal(obj) and item_name == cereal) and not visited(obj):
                achieve_once visited(obj)

behavior __goal__():
    body:
        if not find_milk_and_cereal():
            search_for_items(milk)
            search_for_items(cereal)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'cereal') at line 5824, column 91.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def find_milk_and_cereal():
    # Function to check if both milk and cereal have been found
    symbol found_items = exists milk: item : (is_milk(milk) and visited(milk)) and exists cereal: item : (is_food_cereal(cereal) and visited(cereal))
    return found_items

behavior search_for_items(item_name:string):
    body:
        foreach obj: item:
            if (is_milk(obj) and item_name == milk or is_food_cereal(obj) and item_name == cereal) and not visited(obj):
                achieve_once visited(obj)

behavior __goal__():
    body:
        if not find_milk_and_cereal():
            search_for_items(milk)
            search_for_items(cereal)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_plate_1000_around_kitchen_counter_230(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5829, column 73.
Expected one of: 
	* SEMICOLON
	* COMMA
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def is_milk_observed(milk:item):
    # Function to check if the milk has been observed
    symbol observed=visited(milk)
    return observed

def is_cereal_observed(cereal:item):
    # Function to check if the cereal has been observed
    symbol observed=visited(cereal)
    return observed

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)
        # Visit the milk to find it

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)
        # Visit the cereal to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) and not is_milk_observed(item)):
                # Check all unvisited items that are milk
                search_for_milk(item)
            elif (is_food_cereal(item) and not is_cereal_observed(item)):
                # Check all unvisited items that are cereal
                search_for_cereal(item)

--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'is_food_cereal') at line 5847, column 18.
Expected one of: 
	* SEMICOLON
	* NOT_EQ
	* MORETHAN
	* __ANON_7
	* GREATER_EQ
	* LSHIFT
	* AND
	* RSHIFT
	* PLUS
	* LESS_EQ
	* __ANON_5
	* FLOORDIV
	* __ANON_1
	* CIRCUMFLEX
	* AMPERSAND
	* AT
	* SLASH
	* __ANON_2
	* LESSTHAN
	* __ANON_8
	* OR
	* VBAR
	* IF
	* PERCENT
	* __ANON_3
	* __ANON_4
	* __ANON_6
	* _NEWLINE
	* STAR
	* MINUS
	* __ANON_0
	* EQUAL
	* DOUBLE_EQUAL
	* COMMA

--------------------------------------------------------------------------------
Goal:  
def is_milk_observed(milk:item):
    # Function to check if the milk has been observed
    symbol observed=visited(milk)
    return observed

def is_cereal_observed(cereal:item):
    # Function to check if the cereal has been observed
    symbol observed=visited(cereal)
    return observed

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)
        # Visit the milk to find it

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)
        # Visit the cereal to find it

behavior __goal__():
    body:
        foreach item: item:
            if is_milk(item) and not is_milk_observed(item):
                # Check all unvisited items that are milk
                search_for_milk(item)
            elif is_food_cereal(item) and not is_cereal_observed(item):
                # Check all unvisited items that are cereal
                search_for_cereal(item)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2071_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable cereal already exists.
--------------------------------------------------------------------------------
Goal:  
def has_milk_close_to_cereal(milk:item, cereal:item):
    # Function to check if milk is close to cereal
    symbol milk_cereal_close=exists cereal: item : (is_food_cereal(cereal) and close(milk, cereal))
    return milk_cereal_close

behavior __goal__():
    body:
        if exists milk: item : (is_milk(milk) and has_milk_close_to_cereal(milk, cereal)):
            # If milk is found close to cereal based on available information, bind them
            bind milk: item where:
                is_milk(milk) and has_milk_close_to_cereal(milk, cereal)
            # Select milk and cereal that are close

            bind cereal: item where:
                is_food_cereal(cereal) and close(milk, cereal)
            # Move the character closer to milk and cereal

        else:
            # If milk is not close to cereal, search for both separately
            foreach milk: item:
                if is_milk(milk) and not visited(milk):
                    observe(milk, "Check proximity to cereal")
                    # Observe to check if there is cereal nearby

            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    observe(cereal, "Check proximity to milk")
                    # Observe to check if there is milk nearby

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'cereal') at line 5792, column 58.
Expected one of: 
	* COMMA
	* RPAR

--------------------------------------------------------------------------------
Goal:  
def has_milk_close_to_cereal(milk:item, cereal:item):
    # Function to check if milk is close to cereal
    symbol milk_cereal_close=exists cereal: item : (is_food_cereal(cereal) and close(milk, cereal))
    return milk_cereal_close

behavior __goal__():
    body:
        if exists milk: item : (is_milk(milk) and exists cereal: item : (is_food_cereal(cereal) and close(milk, cereal))):
            # If milk is found close to cereal based on available information, bind them
            bind milk: item where:
                is_milk(milk) and exists cereal: item : (is_food_cereal(cereal) and close(milk, cereal))
            # Select milk and cereal that are close

            bind cereal: item where:
                is_food_cereal(cereal) and close(milk, cereal)
            # Move the character closer to milk and cereal

        else:
            # If milk is not close to cereal, search for both separately
            foreach milk: item:
                if is_milk(milk) and not visited(milk):
                    observe(milk, "Check proximity to cereal")
                    # Observe to check if there is cereal nearby

            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    observe(cereal, "Check proximity to milk")
                    # Observe to check if there is milk nearby

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'cereal') at line 5817, column 59.
Expected one of: 
	* COLON

--------------------------------------------------------------------------------
Goal: 
def milk_near_cereal(milk:item, cereal:item):
    # Function to determine if milk is near cereal
    symbol near=close(milk, cereal)
    return near

behavior search_for_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        # Visit the milk to find it
        achieve_once visited(cereal)
        # Visit the cereal to find it

behavior __goal__():
    body:
        if exists milk: item : (is_milk(milk)) and exists cereal: item : (is_food_cereal(cereal)) and milk_near_cereal(milk, cereal):
            # If milk and cereal are known to be near each other, proceed to investigate
            bind milk: item where:
                is_milk(milk)
            bind cereal: item where:
                is_food_cereal(cereal)
            achieve close_char(char, milk)
            # Approach the milk
            achieve close_char(char, cereal)
            # Approach the cereal
        else:
            # If the milk and cereal havent been found together, search for them
            foreach milk: item:
                if is_milk(milk) and not visited(milk):
                    search_for_milk_and_cereal(milk, cereal)
            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    search_for_milk_and_cereal(milk, cereal)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'for') at line 5788, column 97.
Expected one of: 
	* COMMA
	* RPAR

--------------------------------------------------------------------------------
Goal:  
def has_milk_and_cereal():
    # Function to check if there is milk close to a cereal in the known information
    symbol milk_cereal_pair_exists = exists milk: item : (is_milk(milk) and close(milk, cereal) for cereal in (exists cereal: item : is_food_cereal(cereal)))
    return milk_cereal_pair_exists

behavior __goal__():
    body:
        if has_milk_and_cereal():
            # When milk and cereal are found close to each other, approach the milk (where cereal is close)
            bind milk: item where:
                is_milk(milk) and exists cereal: item : (is_food_cereal(cereal) and close(milk, cereal))
            # Approach the milk found near cereal
            achieve close_char(char, milk) 

        else: 
           # Explore the environment to look for milk and cereal
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o)) and not visited(o):
                    observe(o, "Look for milk and check proximity to cereal") 

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'milk') at line 5788, column 95.
Expected one of: 
	* COMMA
	* RPAR

--------------------------------------------------------------------------------
Goal:  
def has_milk_and_cereal():
    # Function to check if there is milk close to a cereal in the known information
    symbol milk_cereal_pair_exists = exists cereal: item : (is_food_cereal(cereal) and exists milk: item : (is_milk(milk) and close(milk, cereal)))
    return milk_cereal_pair_exists

behavior __goal__():
    body:
        if has_milk_and_cereal():
            # When milk and cereal are found close to each other, approach the milk (where cereal is close)
            bind milk: item where:
                is_milk(milk) and exists cereal: item : (is_food_cereal(cereal) and close(milk, cereal))
            # Approach the milk found near cereal
            achieve close_char(char, milk)

        else: 
           # Explore the environment to look for milk and cereal
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o)) and not visited(o):
                    observe(o, "Look for milk and check proximity to cereal")

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'the') at line 5814, column 40.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

--------------------------------------------------------------------------------
Goal:  
behavior find_item(item:item, location_placeholder:string):
    body:
        observe(item, "location_placeholder")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and open(fridge) and is_off(fridge)
        foreach item: item:
            if is_milk(item) and inside(item, fridge):
                find_item(item, Locate the milk inside the fridge)

        bind pantry: item where:
            is_cupboard(pantry)
        foreach item: item:
            if is_food_cereal(item):
                find_item(item, Locate the cereal inside the pantry)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'the') at line 5814, column 40.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

--------------------------------------------------------------------------------
Goal:  
behavior find_item(item:item, location_placeholder:string):
    body:
        observe(item, "location_placeholder")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and open(fridge) and is_off(fridge)
        foreach item: item:
            if is_milk(item) and inside(item, fridge):
                find_item(item, Locate the milk inside the fridge)

        bind pantry: item where:
            is_cupboard(pantry)
        foreach item: item:
            if is_food_cereal(item) and inside(item, pantry):
                find_item(item, Locate the cereal inside the pantry)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'is_fridge') at line 5808, column 22.
Expected one of: 
	* SEMICOLON
	* NOT_EQ
	* MORETHAN
	* __ANON_7
	* GREATER_EQ
	* LSHIFT
	* AND
	* RSHIFT
	* PLUS
	* LESS_EQ
	* __ANON_5
	* FLOORDIV
	* __ANON_1
	* CIRCUMFLEX
	* AMPERSAND
	* AT
	* SLASH
	* __ANON_2
	* LESSTHAN
	* __ANON_8
	* OR
	* VBAR
	* IF
	* PERCENT
	* __ANON_3
	* __ANON_4
	* __ANON_6
	* _NEWLINE
	* STAR
	* MINUS
	* __ANON_0
	* EQUAL
	* DOUBLE_EQUAL
	* COMMA

--------------------------------------------------------------------------------
Goal:  
def has_milk_or_cereal(fridge:item, pantry:item):
    # Function to check if there is milk in the fridge or cereal in the pantry
    symbol has_milk=exists o: item : (is_milk(o) and inside(o, fridge))
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, pantry))
    return has_milk or has_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)

        bind pantry: item where:
            is_cupboard(pantry)

        if has_milk_or_cereal(fridge, pantry):
            observe(fridge,"Check for milk inside the fridge")
            observe(pantry,"Check for cereal inside the pantry")

        else:
            # Check all unvisited cupboards for cereal and fridges for milk
            foreach o: item:
                if is_cupboard(o) and not visited(o):
                    observe(o,"Check is there any cereal inside")
                elif is_fridge(o) and not visited(o):
                    observe(o,"Check is there any milk inside")

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'is_fridge') at line 5826, column 22.
Expected one of: 
	* SEMICOLON
	* NOT_EQ
	* MORETHAN
	* __ANON_7
	* GREATER_EQ
	* LSHIFT
	* AND
	* RSHIFT
	* PLUS
	* LESS_EQ
	* __ANON_5
	* FLOORDIV
	* __ANON_1
	* CIRCUMFLEX
	* AMPERSAND
	* AT
	* SLASH
	* __ANON_2
	* LESSTHAN
	* __ANON_8
	* OR
	* VBAR
	* IF
	* PERCENT
	* __ANON_3
	* __ANON_4
	* __ANON_6
	* _NEWLINE
	* STAR
	* MINUS
	* __ANON_0
	* EQUAL
	* DOUBLE_EQUAL
	* COMMA

--------------------------------------------------------------------------------
Goal:  
def has_milk_or_cereal(fridge:item, pantry:item):
    # Function to check if there is milk in the fridge or cereal in the pantry
    symbol has_milk=exists o: item : (is_milk(o) and inside(o, fridge))
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, pantry))
    return has_milk or has_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)

        bind pantry: item where:
            is_cupboard(pantry)

        if has_milk_or_cereal(fridge, pantry):
            observe(fridge,"Check for milk inside the fridge")
            observe(pantry,"Check for cereal inside the pantry")

        else:
            # Check all unvisited cupboards for cereal and fridges for milk
            foreach o: item:
                if is_cupboard(o) and not visited(o):
                    observe(o,"Check is there any cereal inside")
                elif is_fridge(o) and not visited(o):
                    observe(o,"Check is there any milk inside")

--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

################################################################################

Error: Unexpected token Token('EXISTS', 'exists') at line 5805, column 18.
Expected one of: 
	* SEMICOLON
	* NOT_EQ
	* MORETHAN
	* __ANON_7
	* GREATER_EQ
	* LSHIFT
	* AND
	* RSHIFT
	* PLUS
	* LESS_EQ
	* __ANON_5
	* FLOORDIV
	* __ANON_1
	* CIRCUMFLEX
	* AMPERSAND
	* AT
	* SLASH
	* __ANON_2
	* LESSTHAN
	* __ANON_8
	* OR
	* VBAR
	* IF
	* PERCENT
	* __ANON_3
	* __ANON_4
	* __ANON_6
	* _NEWLINE
	* STAR
	* MINUS
	* __ANON_0
	* EQUAL
	* DOUBLE_EQUAL
	* COMMA

--------------------------------------------------------------------------------
Goal:  
def has_milk_or_cereal(fridge:item, pantry:item):
    # Function to check if there is milk in the fridge or cereal in the pantry
    symbol has_milk=exists o: item : (is_milk(o) and inside(o, fridge))
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, pantry))
    return has_milk or has_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and is_off(fridge) and open(fridge)
        # Select the fridge that has been turned off and opened

        bind pantry: item where:
            is_cupboard(pantry)
        # Since theres no explicit pantry category, use cupboard as a close alternative based on the functionality described

        if has_milk_or_cereal(fridge, pantry):
            # If milk is found in the fridge or cereal in the pantry, approach the respective location
            if exists o: item : (is_milk(o) and inside(o, fridge)):
                achieve close_char(char, fridge) # Approach the fridge if it contains milk
            elif exists o: item : (is_food_cereal(o) and inside(o, pantry)):
                achieve close_char(char, pantry) # Approach the pantry if it contains cereal
        else:
            # Explore by observing fridge and pantry to locate milk and cereal
            observe(fridge, "Check for milk inside the fridge")
            observe(pantry, "Check for cereal inside the pantry")

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('EXISTS', 'exists') at line 5823, column 18.
Expected one of: 
	* SEMICOLON
	* NOT_EQ
	* MORETHAN
	* __ANON_7
	* GREATER_EQ
	* LSHIFT
	* AND
	* RSHIFT
	* PLUS
	* LESS_EQ
	* __ANON_5
	* FLOORDIV
	* __ANON_1
	* CIRCUMFLEX
	* AMPERSAND
	* AT
	* SLASH
	* __ANON_2
	* LESSTHAN
	* __ANON_8
	* OR
	* VBAR
	* IF
	* PERCENT
	* __ANON_3
	* __ANON_4
	* __ANON_6
	* _NEWLINE
	* STAR
	* MINUS
	* __ANON_0
	* EQUAL
	* DOUBLE_EQUAL
	* COMMA

--------------------------------------------------------------------------------
Goal:  
def has_milk_or_cereal(fridge:item, pantry:item):
    # Function to check if there is milk in the fridge or cereal in the pantry
    symbol has_milk=exists o: item : (is_milk(o) and inside(o, fridge))
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, pantry))
    return has_milk or has_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and is_off(fridge) and open(fridge)
        # Select the fridge that has been turned off and opened

        bind pantry: item where:
            is_cupboard(pantry)
        # Since theres no explicit pantry category, use cupboard as a close alternative based on the functionality described

        if has_milk_or_cereal(fridge, pantry):
            # If milk is found in the fridge or cereal in the pantry, approach the respective location
            if exists o: item : (is_milk(o) and inside(o, fridge)):
                achieve close_char(char, fridge) # Approach the fridge if it contains milk
            elif exists o: item : (is_food_cereal(o) and inside(o, pantry)):
                achieve close_char(char, pantry) # Approach the pantry if it contains cereal
        else:
            # Explore by observing fridge and pantry to locate milk and cereal
            observe(fridge, "Check for milk inside the fridge")
            observe(pantry, "Check for cereal inside the pantry")

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'is_food_cereal') at line 5824, column 22.
Expected one of: 
	* SEMICOLON
	* NOT_EQ
	* MORETHAN
	* __ANON_7
	* GREATER_EQ
	* LSHIFT
	* AND
	* RSHIFT
	* PLUS
	* LESS_EQ
	* __ANON_5
	* FLOORDIV
	* __ANON_1
	* CIRCUMFLEX
	* AMPERSAND
	* AT
	* SLASH
	* __ANON_2
	* LESSTHAN
	* __ANON_8
	* OR
	* VBAR
	* IF
	* PERCENT
	* __ANON_3
	* __ANON_4
	* __ANON_6
	* _NEWLINE
	* STAR
	* MINUS
	* __ANON_0
	* EQUAL
	* DOUBLE_EQUAL
	* COMMA

--------------------------------------------------------------------------------
Goal:  
def has_milk_or_cereal(item:item):
    # Function to check if an item is milk or cereal
    symbol is_found= (is_milk(item) or is_food_cereal(item))
    return is_found

behavior search_for_milk(item:item):
    body:
        if not visited(item):
            observe(item, "Locate the milk in the refrigerator")

behavior search_for_cereal(item:item):
    body:
        if not visited(item):
            observe(item, "Locate the cereal in the pantry")

behavior __goal__():
    body:
        foreach item: item:
            if has_milk_or_cereal(item) and not visited(item):
                if is_milk(item):
                    search_for_milk(item)
                elif is_food_cereal(item):
                    search_for_cereal(item)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'is_food_cereal') at line 5842, column 22.
Expected one of: 
	* SEMICOLON
	* NOT_EQ
	* MORETHAN
	* __ANON_7
	* GREATER_EQ
	* LSHIFT
	* AND
	* RSHIFT
	* PLUS
	* LESS_EQ
	* __ANON_5
	* FLOORDIV
	* __ANON_1
	* CIRCUMFLEX
	* AMPERSAND
	* AT
	* SLASH
	* __ANON_2
	* LESSTHAN
	* __ANON_8
	* OR
	* VBAR
	* IF
	* PERCENT
	* __ANON_3
	* __ANON_4
	* __ANON_6
	* _NEWLINE
	* STAR
	* MINUS
	* __ANON_0
	* EQUAL
	* DOUBLE_EQUAL
	* COMMA

--------------------------------------------------------------------------------
Goal:  
def has_milk_or_cereal(item: item):
    # Function to check if an item is milk or cereal
    symbol is_found = (is_milk(item) or is_food_cereal(item))
    return is_found

behavior search_for_milk(item: item):
    body:
        if not visited(item):
            observe(item, "Locate the milk in the refrigerator")

behavior search_for_cereal(item: item):
    body:
        if not visited(item):
            observe(item, "Locate the cereal in the pantry")

behavior __goal__():
    body:
        foreach item: item:
            if has_milk_or_cereal(item) and not visited(item):
                if is_milk(item):
                    search_for_milk(item)
                elif is_food_cereal(item):
                    search_for_cereal(item)

--------------------------------------------------------------------------------
Exploration: 
behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_headset_2062_around_closetdrawer_377(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(headset,closetdrawer_instance)
        else:
            exp(headset,closetdrawer_instance)
    eff:
        unknown[headset]=False
        close[headset,closetdrawer_instance]=True
        close[closetdrawer_instance,headset]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: milk; available variables: [Variable<fridge: item>].
--------------------------------------------------------------------------------
Goal: behavior search_for_milk_in_fridge(milk:item, fridge:item):
    body:
        achieve_once visited(fridge)
        # By visiting the fridge, we are searching for the milk inside it

behavior __goal__():
    body:
        foreach fridge: item:
            if is_fridge(fridge) and not visited(fridge):
                search_for_milk_in_fridge(milk, fridge)
--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<milk: item>].
--------------------------------------------------------------------------------
Goal:  
behavior add_cereal_to_milk(cereal:item, milk:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        achieve_once inside(milk, cup)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        
        bind milk: item where:
            is_milk(milk) and inside(milk, pot)

        bind cup: item where:
            is_cup(cup)

        add_cereal_to_milk(cereal, milk, cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

################################################################################

Error: Unexpected token Token('EXISTS', 'exists') at line 5763, column 16.
Expected one of: 
	* __ANON_5
	* __ANON_0
	* LESSTHAN
	* NOT_EQ
	* __ANON_6
	* MINUS
	* __ANON_7
	* DOUBLE_EQUAL
	* AMPERSAND
	* SLASH
	* AT
	* IF
	* COMMA
	* EQUAL
	* __ANON_8
	* GREATER_EQ
	* PLUS
	* CIRCUMFLEX
	* AND
	* SEMICOLON
	* __ANON_2
	* _NEWLINE
	* LESS_EQ
	* VBAR
	* __ANON_4
	* STAR
	* __ANON_3
	* PERCENT
	* RSHIFT
	* FLOORDIV
	* OR
	* LSHIFT
	* __ANON_1
	* MORETHAN

--------------------------------------------------------------------------------
Goal:  
def has_lemon_or_sugar_in_hand():
    # Function to check if the character is holding a lemon or sugar
    symbol held_item=exists o: item : ((is_food_lemon(o) or is_food_sugar(o)) and inhand(o))
    return held_item

behavior __goal__():
    body:
        if exists lemon: item : (is_food_lemon(lemon) and has_lemon_or_sugar_in_hand()):
            # If the character is already holding a lemon, no further action is needed
            achieve_once inhand(lemon)

        elseif exists sugar: item : (is_food_sugar(sugar) and has_lemon_or_sugar_in_hand()):
            # If the character is already holding sugar, no further action is needed
            achieve_once inhand(sugar)

        else:
            # Otherwise, the character should find a lemon or sugar
            foreach item: item:
                if (is_food_lemon(item) or is_food_sugar(item)) and not visited(item):
                    observe(item,"Check if it is a lemon or sugar and if it can be picked up")
                    if grabbable(item):
                        achieve_once inhand(item)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_sugar_2070_around_fridge_140(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: lemon; available variables: [].
--------------------------------------------------------------------------------
Goal:  
def has_lemon_or_sugar_in_hand():
    # Function to check if the character is holding a lemon or sugar
    symbol held_item=exists o: item : ((is_food_lemon(o) or is_food_sugar(o)) and inhand(o))
    return held_item

behavior __goal__():
    body:
        if exists lemon: item : (is_food_lemon(lemon) and has_lemon_or_sugar_in_hand()):
            # If the character is already holding a lemon, no further action is needed
            achieve_once inhand(lemon)

        else:
            # If a lemon is not in hand, check for sugar
            if exists sugar: item : (is_food_sugar(sugar) and has_lemon_or_sugar_in_hand()):
                # If the character is already holding sugar, no further action is needed
                achieve_once inhand(sugar)

            else:
                # Otherwise, the character should find a lemon or sugar
                foreach item: item:
                    if (is_food_lemon(item) or is_food_sugar(item)) and not visited(item):
                        observe(item,"Check if it is a lemon or sugar and if it can be picked up")
                        if grabbable(item):
                            achieve_once inhand(item)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_sugar_2070_around_fridge_140(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: spoon; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal: behavior stir_mixture(cup:item):
    body:
        achieve_once close_char(char, cup)
        # Ensure that the character is close to the cup
        achieve clean(spoon)
        # Ensure the spoon is clean before stirring

behavior find_spoon(spoon:item):
    body:
        achieve_once visited(spoon)
        # Visit the spoon to find it

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select a cup with water

        foreach spoon: item:
            if is_fork(spoon) and not visited(spoon):
                find_spoon(spoon)
        # Find an unvisited spoon

        bind spoon: item where:
            is_fork(spoon) and visited(spoon)
        # Select a spoon that has been found

        stir_mixture(cup)
--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2089_around_cupboard_130(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'sugar') at line 6027, column 75.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def verify_cup_water_necessity(cup:item):
    # Function to check if water needs to be added to the cup
    symbol water_needed = not has_water(cup)
    return water_needed

def cup_contains_ingredients(cup:item):
    # Function to check if the cup already contains lemon and sugar
    symbol contains_lemon_and_sugar = exists lemon: item : (is_food_lemon(lemon) and inside(lemon, cup))
    symbol contains_lemon_and_sugar = contains_lemon_and_sugar and exists sugar: item : (is_food_sugar(sugar) and inside(sugar, cup))
    return contains_lemon_and_sugar

behavior ensure_cup_contains_ingredients(cup:item, lemon:item, sugar:item):
    body:
        if not cup_contains_ingredients(cup):
            achieve_once inside(lemon, cup)
            achieve_once inside(sugar, cup)

behavior add_water_to_cup(cup:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet
        achieve is_on(faucet)
        # Ensure faucet is on
        achieve has_water(cup)
        # Fill the cup with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)

        bind faucet: item where:
            is_faucet(faucet)

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select a lemon that has already been cut

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        if verify_cup_water_necessity(cup):
            add_water_to_cup(cup, faucet)

        ensure_cup_contains_ingredients(cup, lemon, sugar)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cat_2082_around_bed_376(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(cat,bed_instance)
        else:
            exp(cat,bed_instance)
    eff:
        unknown[cat]=False
        close[cat,bed_instance]=True
        close[bed_instance,cat]=True
    

behavior find_box_2023_around_bookshelf_188(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(box,bookshelf_instance)
        else:
            exp(box,bookshelf_instance)
    eff:
        unknown[box]=False
        close[box,bookshelf_instance]=True
        close[bookshelf_instance,box]=True
    

behavior find_tape_2028_around_bed_376(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(tape,bed_instance)
        else:
            exp(tape,bed_instance)
    eff:
        unknown[tape]=False
        close[tape,bed_instance]=True
        close[bed_instance,tape]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'sugar') at line 5991, column 75.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def verify_cup_water_necessity(cup:item):
    # Function to check if water needs to be added to the cup
    symbol water_needed = not has_water(cup)
    return water_needed

def cup_contains_ingredients(cup:item):
    # Function to check if the cup already contains lemon and sugar
    symbol contains_lemon_and_sugar = exists lemon: item : (is_food_lemon(lemon) and inside(lemon, cup))
    symbol contains_lemon_and_sugar = contains_lemon_and_sugar and exists sugar: item : (is_food_sugar(sugar) and inside(sugar, cup))
    return contains_lemon_and_sugar

behavior ensure_cup_contains_ingredients(cup:item, lemon:item, sugar:item):
    body:
        if not cup_contains_ingredients(cup):
            achieve_once inside(lemon, cup)
            achieve_once inside(sugar, cup)

behavior add_water_to_cup(cup:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet
        achieve is_on(faucet)
        # Ensure faucet is on
        achieve has_water(cup)
        # Fill the cup with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)

        bind faucet: item where:
            is_faucet(faucet)

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select a lemon that has already been cut

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        if verify_cup_water_necessity(cup):
            add_water_to_cup(cup, faucet)

        ensure_cup_contains_ingredients(cup, lemon, sugar)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cat_2082_around_bed_376(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(cat,bed_instance)
        else:
            exp(cat,bed_instance)
    eff:
        unknown[cat]=False
        close[cat,bed_instance]=True
        close[bed_instance,cat]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'egg') at line 5471, column 74.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
def has_oil_in_oven(oven:item):
    symbol has_oil=exists oil: item : (is_oil(oil) and inside(oil, oven))
    return has_oil

def has_rice_and_eggs():
    symbol has_items=exists rice: item : (is_food_rice(rice)) and exists egg: item : (is_food_egg(egg))
    return has_items

behavior gather_rice_and_eggs(rice:item, egg:item):
    body:
        achieve_once inhand(rice)
        achieve_once inhand(egg)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room) and id[dining_room]==41
        bind oven: item where:
            is_oven(oven) and id[oven]==127 and inside(oven, dining_room)
        
        if not is_off(oven):
            achieve_once is_off(oven)
        if not open(oven):
            achieve_once open(oven)
        if not has_oil_in_oven(oven):
            observe(oven, "Check if oil is present inside the oven")
            
        if has_rice_and_eggs():
            bind rice: item where:
                is_food_rice(rice)
            bind egg: item where:
                is_food_egg(egg)
            gather_rice_and_eggs(rice, egg)
        else:
            foreach place: item:
                if (is_fridge(place) or is_kitchen_counter(place)) and not visited(place):
                    observe(place, "Look for rice and eggs")

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_onion_2104_around_cutting_board_2123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_food_carrot_2015_around_cutting_board_2123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_carrot,cutting_board_instance)
        else:
            exp(food_carrot,cutting_board_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cutting_board_instance]=True
        close[cutting_board_instance,food_carrot]=True
    

behavior find_knife_2122_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_oil_2149_around_food_orange_2027(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind food_orange_instance:item where:
            is_food_orange(food_orange_instance) and id[food_orange_instance]==2027
        achieve close_char(char,food_orange_instance)
        if can_open(food_orange_instance):
            achieve_once open(food_orange_instance)
            exp(oil,food_orange_instance)
        else:
            exp(oil,food_orange_instance)
    eff:
        unknown[oil]=False
        close[oil,food_orange_instance]=True
        close[food_orange_instance,oil]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'egg') at line 5471, column 74.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

--------------------------------------------------------------------------------
Goal:  
def has_oil_in_oven(oven:item):
    symbol has_oil=exists oil: item : (is_oil(oil) and inside(oil, oven))
    return has_oil

def has_rice_and_eggs():
    symbol has_items=exists rice: item : (is_food_rice(rice)) and exists egg: item : (is_food_egg(egg))
    return has_items

behavior gather_rice_and_eggs(rice:item, egg:item):
    body:
        achieve_once inhand(rice)
        achieve_once inhand(egg)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room) and id[dining_room]==41
        bind oven: item where:
            is_oven(oven) and id[oven]==127 and inside(oven, dining_room)
        
        if not is_off(oven):
            achieve_once is_off(oven)
        if not open(oven):
            achieve_once open(oven)
        if not has_oil_in_oven(oven):
            observe(oven, "Check if oil is present inside the oven")
            
        if has_rice_and_eggs():
            bind rice: item where:
                is_food_rice(rice)
            bind egg: item where:
                is_food_egg(egg)
            gather_rice_and_eggs(rice, egg)
        else:
            foreach place: item:
                if (is_fridge(place) or is_kitchen_counter(place)) and not visited(place):
                    observe(place, "Look for rice and eggs")

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_onion_2104_around_cutting_board_2123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_food_carrot_2015_around_cutting_board_2123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_carrot,cutting_board_instance)
        else:
            exp(food_carrot,cutting_board_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cutting_board_instance]=True
        close[cutting_board_instance,food_carrot]=True
    

behavior find_food_orange_2027_around_food_orange_2027(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind food_orange_instance:item where:
            is_food_orange(food_orange_instance) and id[food_orange_instance]==2027
        achieve close_char(char,food_orange_instance)
        if can_open(food_orange_instance):
            achieve_once open(food_orange_instance)
            exp(food_orange,food_orange_instance)
        else:
            exp(food_orange,food_orange_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,food_orange_instance]=True
        close[food_orange_instance,food_orange]=True
    

behavior find_food_butter_2007_around_cutting_board_2123(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_butter,cutting_board_instance)
        else:
            exp(food_butter,cutting_board_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cutting_board_instance]=True
        close[cutting_board_instance,food_butter]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
--------------------------------------------------------------------------------
Goal: behavior fry_eggs_and_rice(egg:item, rice:item, pan:item):
    body:
        achieve_once inside(egg, pan)
        # Place the egg into the frying pan

behavior add_rice_and_vegetables_to_pan(rice:item, vegetables:item, pan:item):
    body:
        achieve_once inside(rice, pan)
        # Add the rice to the frying pan
        achieve_once inside(vegetables, pan)
        # Add the vegetables to the frying pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind rice: item where:
            is_food_rice(rice)

        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pan: item where:
            is_fryingpan(pan) and is_on(stove) and inside(oil, pan)
        # Ensure the frying pan has oil inside and is on the stove

        fry_eggs_and_rice(egg, rice, pan)
        add_rice_and_vegetables_to_pan(rice, vegetables, pan)
--------------------------------------------------------------------------------
Exploration: 
behavior find_oil_2149_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<rice: item>].
--------------------------------------------------------------------------------
Goal: behavior fry_egg(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)

behavior add_vegetables_and_rice(fryingpan:item, vegetables:item, rice:item):
    body:
        achieve_once inside(vegetables, fryingpan)
        achieve_once inside(rice, fryingpan)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is on

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select a frying pan that is on the stove
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select cut vegetables

        bind rice: item where:
            is_food_rice(rice) and inside(rice, pot)
        # Select cooked rice from the pot
        
        fry_egg(egg, fryingpan)
        add_vegetables_and_rice(fryingpan, vegetables, rice)
--------------------------------------------------------------------------------
Exploration: 
behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'pot') at line 5421, column 43.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal: behavior fry_egg(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)

behavior add_vegetables_and_rice(fryingpan:item, vegetables:item, rice:item):
    body:
        achieve_once inside(vegetables, fryingpan)
        achieve_once inside(rice, fryingpan)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and is_on(stove)

        bind egg: item where:
            is_food_egg(egg)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)

        bind rice: item where:
            is_food_rice(rice) and exists pot: item : (is_pot(pot) and inside(rice, pot))
        
        fry_egg(egg, fryingpan)
        add_vegetables_and_rice(fryingpan, vegetables, rice)
--------------------------------------------------------------------------------
Exploration: 
behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_pot_2040_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: fryingpan; available variables: [Variable<cooked_rice: item>].
--------------------------------------------------------------------------------
Goal:  
behavior fry_eggs(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan) # Crack the eggs into the frying pan

behavior add_cooked_rice_and_vegetables(rice:item, vegetables:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan) # Add the cooked rice to the frying pan
        achieve_once inside(vegetables, fryingpan) # Add the vegetables to the frying pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind cooked_rice: item where:
            is_food_rice(cooked_rice) and inside(cooked_rice, fryingpan)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, fryingpan)

        bind stove: item where:
            is_stove(stove) and is_on(stove)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)

        fry_eggs(egg, fryingpan)
        add_cooked_rice_and_vegetables(cooked_rice, vegetables, fryingpan)

--------------------------------------------------------------------------------
Exploration: 
behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_pot_78_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
--------------------------------------------------------------------------------
Goal:  
behavior add_rice_egg_oil_to_pan(rice:item, egg:item, oil:item, pan:item):
    body:
        achieve_once inside(rice, pan)
        achieve_once inside(egg, pan)
        achieve_once inside(oil, pan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind oil: item where:
            is_oil(oil)

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove) and is_on(stove)
        # Ensure the frying pan is on a stove that is turned on

        add_rice_egg_oil_to_pan(rice, egg, oil, pan)

--------------------------------------------------------------------------------
Exploration: 
behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_blow_dryer_2057_around_washing_machine_2079(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(blow_dryer,washing_machine_instance)
        else:
            exp(blow_dryer,washing_machine_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,washing_machine_instance]=True
        close[washing_machine_instance,blow_dryer]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5901, column 9.
Expected one of: 
	* __ANON_6
	* _NEWLINE
	* SLASH
	* SEMICOLON
	* __ANON_4
	* FLOORDIV
	* AMPERSAND
	* __ANON_1
	* GREATER_EQ
	* __ANON_2
	* AND
	* LESS_EQ
	* NOT_EQ
	* PLUS
	* RSHIFT
	* COMMA
	* OR
	* AT
	* STAR
	* LESSTHAN
	* LSHIFT
	* __ANON_3
	* CIRCUMFLEX
	* PERCENT
	* DOUBLE_EQUAL
	* __ANON_5
	* VBAR
	* __ANON_7
	* __ANON_8
	* MINUS
	* EQUAL
	* MORETHAN
	* __ANON_0
	* IF

--------------------------------------------------------------------------------
Goal:  
def chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)

def turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        
        bind onion: item where:
            is_food_onion(onion)

        bind oven: item where:
            is_oven(oven)

        chicken_and_onion_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

--------------------------------------------------------------------------------
Exploration: 
behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: oven; available variables: [Variable<chicken: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior close_and_turn_on_oven(oven:item):
    body:
        achieve_once closed(oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, oven)
        # Select the chicken that is already inside the oven
        
        bind oven: item where:
            is_oven(oven) and open(oven) and is_off(oven)
        # Select the oven that is open and off
        
        bind onion: item where:
            is_food_onion(onion) and open(oven)

        place_onion_in_oven(onion, oven)
        close_and_turn_on_oven(oven)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cd_player_2084_around_kitchen_counter_132(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cd_player,kitchen_counter_instance)
        else:
            exp(cd_player,kitchen_counter_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cd_player]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: oven; available variables: [Variable<chicken: item>].
--------------------------------------------------------------------------------
Goal: behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior close_and_turn_on_oven(oven:item):
    body:
        achieve_once closed(oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, oven)
        # Select the chicken that is already inside the oven
        
        bind oven: item where:
            is_oven(oven) and open(oven) and is_off(oven)
        # Select the oven that is open and off
        
        bind onion: item where:
            is_food_onion(onion)

        place_onion_in_oven(onion, oven)
        close_and_turn_on_oven(oven)
--------------------------------------------------------------------------------
Exploration: 
behavior find_cd_player_2084_around_kitchen_counter_132(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cd_player,kitchen_counter_instance)
        else:
            exp(cd_player,kitchen_counter_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cd_player]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5883, column 9.
Expected one of: 
	* __ANON_6
	* _NEWLINE
	* SLASH
	* SEMICOLON
	* __ANON_4
	* FLOORDIV
	* AMPERSAND
	* __ANON_1
	* GREATER_EQ
	* __ANON_2
	* AND
	* LESS_EQ
	* NOT_EQ
	* PLUS
	* RSHIFT
	* COMMA
	* OR
	* AT
	* STAR
	* LESSTHAN
	* LSHIFT
	* __ANON_3
	* CIRCUMFLEX
	* PERCENT
	* DOUBLE_EQUAL
	* __ANON_5
	* VBAR
	* __ANON_7
	* __ANON_8
	* MINUS
	* EQUAL
	* MORETHAN
	* __ANON_0
	* IF

--------------------------------------------------------------------------------
Goal:  
def place_item_in_oven(item:item, oven:item):
    body:
        achieve_once inside(item, oven)

def activate_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)

        bind oven: item where:
            is_oven(oven)

        place_item_in_oven(chicken, oven)
        place_item_in_oven(onion, oven)
        activate_oven(oven)

--------------------------------------------------------------------------------
Exploration: 
behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

################################################################################

Error: Unexpected token Token('IN', 'in') at line 5774, column 33.
Expected one of: 
	* COMMA
	* COLON
	* LSQB
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

--------------------------------------------------------------------------------
Goal:  
behavior find_and_prepare_items(egg:item, lemon:item, vegetables:item_list):
    body:
        achieve_once visited(egg)
        achieve_once visited(lemon)
        foreach vegetable: item in vegetables:
            achieve_once visited(vegetable)

behavior clean_items(egg:item, lemon:item, vegetables:item_list):
    body:
        achieve clean(egg)
        achieve clean(lemon)
        foreach vegetable: item in vegetables:
            achieve clean(vegetable)

def find_vegetables():
    symbol found_vegetables = exists vegetable: item : (is_food_vegetable(vegetable) and not visited(vegetable))
    return found_vegetables

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and not visited(egg)

        bind lemon: item where:
            is_food_lemon(lemon) and not visited(lemon)

        items vegetables: item_list
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable) and find_vegetables():
                vegetablesappend(vegetable)

        find_and_prepare_items(egg, lemon, vegetables)
        clean_items(egg, lemon, vegetables)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

################################################################################

Error: Unexpected token Token('IN', 'in') at line 5774, column 33.
Expected one of: 
	* COMMA
	* COLON
	* LSQB
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

--------------------------------------------------------------------------------
Goal: 
behavior find_and_prepare_items(egg:item, lemon:item, vegetables:item_list):
    body:
        achieve_once visited(egg)
        achieve_once visited(lemon)
        foreach vegetable: item in vegetables:
            achieve_once visited(vegetable)

behavior clean_items(egg:item, lemon:item, vegetables:item_list):
    body:
        achieve clean(egg)
        achieve clean(lemon)
        foreach vegetable: item in vegetables:
            achieve clean(vegetable)

def find_vegetables():
    symbol found_vegetables = exists vegetable: item : (is_food_vegetable(vegetable) and not visited(vegetable))
    return found_vegetables

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and not visited(egg)

        bind lemon: item where:
            is_food_lemon(lemon) and not visited(lemon)

        items vegetables: item_list
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable) and find_vegetables():
                vegetablesappend(vegetable)

        find_and_prepare_items(egg, lemon, vegetables)
        clean_items(egg, lemon, vegetables)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: cutting_board; available variables: [Variable<food_item: item>].
--------------------------------------------------------------------------------
Goal:  
behavior find_food_item_on_cutting_board(food_item:item):
    body:
        achieve_once on(food_item, cutting_board)

behavior inspect_item(item:item):
    body:
        achieve_once visited(item)

behavior clean_item(item:item):
    body:
        achieve clean(item)

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        foreach egg: item:
            if is_food_egg(egg) and not visited(egg):
                find_food_item_on_cutting_board(egg)
                inspect_item(egg)
        
        foreach lemon: item:
            if is_food_lemon(lemon) and not visited(lemon):
                find_food_item_on_cutting_board(lemon)
                inspect_item(lemon)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                find_food_item_on_cutting_board(vegetable)
                inspect_item(vegetable)
        
        foreach egg: item:
            if is_food_egg(egg) and visited(egg) and dirty(egg):
                clean_item(egg)

        foreach lemon: item:
            if is_food_lemon(lemon) and visited(lemon) and dirty(lemon):
                clean_item(lemon)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and visited(vegetable) and dirty(vegetable):
                clean_item(vegetable)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Invalid argument: (VariableExpression<V::egg>, FunctionApplicationExpression<cut(V::egg)>). Type: <class 'tuple'>.
--------------------------------------------------------------------------------
Goal:  
behavior combine_salad_ingredients(bowl:item, egg:item, vegetables:item, lemon:item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(vegetables, bowl)
        achieve_once inside(lemon, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)

        bind egg: item where:
            is_food_egg(egg) and (egg, cut(egg))
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)

        combine_salad_ingredients(bowl, egg, vegetables, lemon)

--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_shoes_2033_around_couch_269(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(shoes,couch_instance)
        else:
            exp(shoes,couch_instance)
    eff:
        unknown[shoes]=False
        close[shoes,couch_instance]=True
        close[couch_instance,shoes]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
--------------------------------------------------------------------------------
Goal: behavior crack_eggs_into_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

behavior scramble_eggs(egg:item, pan:item):
    body:
        if not cut(egg):
            achieve_once cut(egg)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        
        bind pan: item where:
            is_fryingpan(pan) and visited(pan) and on(pan, stove)
        
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        
        crack_eggs_into_pan(egg, pan)
        scramble_eggs(egg, pan)
--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_clothes_hat_2117_around_basket_for_clothes_2078(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
--------------------------------------------------------------------------------
Goal: behavior crack_eggs_into_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

behavior scramble_eggs(egg:item, pan:item):
    body:
        if not cut(egg):
            achieve_once cut(egg)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        
        bind pan: item where:
            is_fryingpan(pan) and visited(pan) and on(pan, stove)
        
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        
        crack_eggs_into_pan(egg, pan)
        scramble_eggs(egg, pan)
--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_clothes_hat_2117_around_basket_for_clothes_2078(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: table; available variables: [Variable<pan: item>].
--------------------------------------------------------------------------------
Goal:  
behavior crack_and_scramble_eggs(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)
        achieve is_food_food(egg) # Ensure the egg is classified as food
        # Since eggs need to be scrambled in the pan
        # observe will be needed to confirm placement in pan
        observe(pan, "Checking if the egg was cracked and scrambled in the pan")

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to be used

        bind pan: item where:
            is_fryingpan(pan) and on(pan, table)
        # Select the frying pan that was found in the previous subtask

        crack_and_scramble_eggs(egg, pan)

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_gloves_2118_around_basket_for_clothes_2078(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

behavior find_headset_2146_around_nightstand_195(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==195
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(headset,nightstand_instance)
        else:
            exp(headset,nightstand_instance)
    eff:
        unknown[headset]=False
        close[headset,nightstand_instance]=True
        close[nightstand_instance,headset]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
--------------------------------------------------------------------------------
Goal: behavior use_frying_pan_to_scramble_egg(pan:item, egg:item):
    body:
        achieve_once inside(egg, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove) and is_on(stove)
        # Ensure the frying pan is on a stove that is turned on

        bind egg: item where:
            is_food_egg(egg)

        use_frying_pan_to_scramble_egg(pan, egg)
--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_oil_2102_around_fridge_140(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(oil,fridge_instance)
        else:
            exp(oil,fridge_instance)
    eff:
        unknown[oil]=False
        close[oil,fridge_instance]=True
        close[fridge_instance,oil]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal: 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet) # Ensure faucet is on
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior cook_contents(pot:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==121
        
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        cook_contents(pot)

--------------------------------------------------------------------------------
Exploration: 
behavior find_tea_bag_2023_around_bookshelf_124(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(tea_bag,bookshelf_instance)
        else:
            exp(tea_bag,bookshelf_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,bookshelf_instance]=True
        close[bookshelf_instance,tea_bag]=True
    

behavior find_tooth_paste_2059_around_bathroom_cabinet_17(tooth_paste:item):
    goal: not unknown(tooth_paste)
    body:
        assert is_tooth_paste(tooth_paste)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(tooth_paste,bathroom_cabinet_instance)
        else:
            exp(tooth_paste,bathroom_cabinet_instance)
    eff:
        unknown[tooth_paste]=False
        close[tooth_paste,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,tooth_paste]=True
    

behavior find_shoes_2033_around_food_food_1000(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(shoes,food_food_instance)
        else:
            exp(shoes,food_food_instance)
    eff:
        unknown[shoes]=False
        close[shoes,food_food_instance]=True
        close[food_food_instance,shoes]=True
    

################################################################################

Error: Error trying to process rule "typed_argument":

Unknown type: str, known types are: ['item', 'character', 'id'].
--------------------------------------------------------------------------------
Goal:  
def find_item(item_type: str):
    # Function to iterate over all items of a certain type and observe them if not yet visited
    foreach item: item:
        if eval(fis_item_type(item)) and not visited(item):
            observe(item, "fCheck if its a item_type")

behavior __goal__():
    body:
        find_item(food_lemon)
        find_item(food_sugar)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_food_sugar_2039_around_kitchen_counter_230(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'item_type') at line 5672, column 10.
Expected one of: 
	* __ANON_6
	* _NEWLINE
	* SLASH
	* SEMICOLON
	* __ANON_4
	* FLOORDIV
	* AMPERSAND
	* __ANON_1
	* GREATER_EQ
	* __ANON_2
	* AND
	* LESS_EQ
	* NOT_EQ
	* PLUS
	* RSHIFT
	* COMMA
	* OR
	* AT
	* STAR
	* LESSTHAN
	* LSHIFT
	* __ANON_3
	* CIRCUMFLEX
	* PERCENT
	* DOUBLE_EQUAL
	* __ANON_5
	* VBAR
	* __ANON_7
	* __ANON_8
	* MINUS
	* EQUAL
	* MORETHAN
	* __ANON_0
	* IF

--------------------------------------------------------------------------------
Goal:  
def is_item_type(item: item, item_type: str):
    # Determine if the item is of a certain type
    if item_type == food_lemon:
        return is_food_lemon(item)
    elif item_type == food_sugar:
        return is_food_sugar(item)
    return False

def find_item(item_type: str):
    # Function to iterate over all items of a certain type and observe them if not yet visited
    foreach item: item:
        if is_item_type(item, item_type) and not visited(item):
            observe(item, "Check if its a   item_type")

behavior __goal__():
    body:
        find_item(food_lemon)
        find_item(food_sugar)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: item; available variables: [Variable<lemon: item>].
--------------------------------------------------------------------------------
Goal: 
behavior search_for_item(lemon:item, sugar:item):
    body:
        achieve_once visited(lemon)
        achieve_once visited(sugar)

behavior __goal__():
    body:
        foreach lemon: item:
            if is_food_lemon(lemon) and not visited(lemon):
                search_for_item(lemon, item)

        foreach sugar: item:
            if is_food_sugar(sugar) and not visited(sugar):
                search_for_item(item, sugar)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_food_sugar_2039_around_kitchen_counter_230(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: sugar; available variables: [Variable<lemon: item>].
--------------------------------------------------------------------------------
Goal: 
behavior search_for_item(lemon:item, sugar:item):
    body:
        achieve_once visited(lemon)
        achieve_once visited(sugar)

behavior __goal__():
    body:
        foreach lemon: item:
            if is_food_lemon(lemon) and not visited(lemon):
                search_for_item(lemon, sugar)

        foreach sugar: item:
            if is_food_sugar(sugar) and not visited(sugar):
                search_for_item(lemon, sugar)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_food_sugar_2039_around_kitchen_counter_230(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: cup; available variables: [Variable<lemon: item>].
--------------------------------------------------------------------------------
Goal:  
behavior squeeze_lemon_into_cup(lemon:item, cup:item):
    body:
        achieve_once inhand(lemon) # Temporarily hold the lemon to squeeze
        achieve_once inhand(cup) # Temporarily hold the cup to prevent spills
        achieve cut(lemon)
        achieve_once inside(lemon, cup)
        squeeze(lemon)

behavior add_water_to_cup(cup:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the cup
        achieve is_on(faucet) # Ensure faucet is on
        achieve has_water(cup)
        # Fill the cup with water

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon) and inside(lemon, cup)

        bind cup: item where:
            is_cup(cup)

        bind faucet: item where:
            is_faucet(faucet)

        squeeze_lemon_into_cup(lemon, cup)
        add_water_to_cup(cup, faucet)

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: cup; available variables: [Variable<lemon: item>].
--------------------------------------------------------------------------------
Goal: 
behavior squeeze_lemon_into_cup(lemon:item, cup:item):
    body:
        achieve_once inhand(lemon) # Temporarily hold the lemon to squeeze
        achieve cut(lemon)
        achieve_once inside(lemon, cup)
        squeeze(lemon)

behavior add_water_to_cup(cup:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the cup
        achieve is_on(faucet) # Ensure faucet is on
        achieve has_water(cup)
        # Fill the cup with water

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon) and inside(lemon, cup)

        bind cup: item where:
            is_cup(cup)

        bind faucet: item where:
            is_faucet(faucet)

        squeeze_lemon_into_cup(lemon, cup)
        add_water_to_cup(cup, faucet)

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2054_around_shower_38(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==38
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function squeezed not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal: behavior squeeze_lemon(lemon:item):
    body:
        achieve_once squeezed(lemon)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon for squeezing

        squeeze_lemon(lemon)
        # Squeeze the lemon to obtain lemon juice
--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

'Function squeezed not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior squeeze_lemon(lemon:item):
    body:
        achieve_once squeezed(lemon)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)

        squeeze_lemon(lemon)

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function squeezed not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior add_ingredients_to_bowl(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(vegetables, bowl)
        achieve_once inside(lemon, bowl)

behavior squeeze_lemon(lemon:item):
    body:
        achieve_once squeezed(lemon)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)

        bind bowl: item where:
            is_bowl(bowl)

        squeeze_lemon(lemon)
        add_ingredients_to_bowl(egg, vegetables, lemon, bowl)

--------------------------------------------------------------------------------
Exploration: 
behavior find_hairbrush_2002_around_closetdrawer_119(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hairbrush,closetdrawer_instance)
        else:
            exp(hairbrush,closetdrawer_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,closetdrawer_instance]=True
        close[closetdrawer_instance,hairbrush]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'juice') at line 5812, column 42.
Expected one of: 
	* EQUAL
	* COMMA
	* RPAR

--------------------------------------------------------------------------------
Goal: behavior add_ingredients_to_bowl(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(vegetables, bowl)
        achieve_once inside(lemon, bowl)

behavior squeeze_lemon(lemon:item):
    body:
        achieve_once inside(lemon, lemon juice)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)

        bind bowl: item where:
            is_bowl(bowl)

        squeeze_lemon(lemon)
        add_ingredients_to_bowl(egg, vegetables, lemon, bowl)
--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: fryingpan; available variables: [Variable<chicken: item>].
--------------------------------------------------------------------------------
Goal: behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet) 
        achieve has_water(pot)

behavior boil_pasta(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior cook_chicken(chicken:item, fryingpan:item):
    body:
        achieve_once inside(chicken, fryingpan)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308
        
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090

        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot)

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fryingpan)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)

        fill_pot_with_water(pot, faucet)
        boil_pasta(pasta, pot)
        place_pot_on_stove(pot, stove)
        cook_chicken(chicken, fryingpan)
        turn_on_stove(stove)
--------------------------------------------------------------------------------
Exploration: 
behavior find_food_onion_2026_around_microwave_149(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_onion,microwave_instance)
        else:
            exp(food_onion,microwave_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,microwave_instance]=True
        close[microwave_instance,food_onion]=True
    

behavior find_oil_2005_around_dishwasher_143(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(oil,dishwasher_instance)
        else:
            exp(oil,dishwasher_instance)
    eff:
        unknown[oil]=False
        close[oil,dishwasher_instance]=True
        close[dishwasher_instance,oil]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

################################################################################

Error: Error trying to process rule "typed_argument":

Unknown type: list, known types are: ['item', 'character', 'id'].
--------------------------------------------------------------------------------
Goal:  
behavior ensure_pot_boiling(pot:item, stove:item, faucet:item):
    body:
        achieve is_on(stove) # Ensure stove is on to boil the water
        if not has_water(pot):
            achieve_once close_char(char, faucet)
            # Approach the faucet to fill the pot
            achieve is_on(faucet)
            achieve has_water(pot)
            # Fill the pot with water

behavior add_ingredients_to_pot(ingredients:list, pot:item):
    body:
        foreach ingredient: item:
            achieve_once inside(ingredient, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2040

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        foreach ingredient: item:
            if (is_food_vegetable(ingredient) or is_food_fish(ingredient) or is_food_food(ingredient)) and cut(ingredient):
                add_ingredients_to_pot([ingredient], pot)

        ensure_pot_boiling(pot, stove, faucet)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_onion_2009_around_sink_19(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_onion,sink_instance)
        else:
            exp(food_onion,sink_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,sink_instance]=True
        close[sink_instance,food_onion]=True
    

behavior find_food_food_2001_around_trashcan_99(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(food_food,trashcan_instance)
        else:
            exp(food_food,trashcan_instance)
    eff:
        unknown[food_food]=False
        close[food_food,trashcan_instance]=True
        close[trashcan_instance,food_food]=True
    

behavior find_food_carrot_2086_around_walllamp_34(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==34
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(food_carrot,walllamp_instance)
        else:
            exp(food_carrot,walllamp_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,walllamp_instance]=True
        close[walllamp_instance,food_carrot]=True
    

################################################################################

Error: Unexpected token Token('IN', 'in') at line 5441, column 33.
Expected one of: 
	* COMMA
	* COLON
	* LSQB
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

--------------------------------------------------------------------------------
Goal:  
behavior gather_and_add_ingredients(fish:item, vegetables:list, pot:item):
    body:
        foreach vegetable: item in vegetables:
            achieve_once inside(vegetable, pot)
        achieve_once inside(fish, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior ensure_water_boiling(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and cut(fish)

        bind pot: item where:
            is_pot(pot) and id[pot] == 2040
        # Select the specific pot with ID 2040

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is on

        fill_pot_with_water(pot)
        ensure_water_boiling(stove)

        # Assume other vegetables have been identified and cut
        symbol vegetables_to_add = [food_food_2094, food_food_1000, food_food_2001]

        gather_and_add_ingredients(fish, vegetables_to_add, pot)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_onion_2048_around_sink_19(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_onion,sink_instance)
        else:
            exp(food_onion,sink_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,sink_instance]=True
        close[sink_instance,food_onion]=True
    

behavior find_food_carrot_2015_around_fryingpan_2154(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2154
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(food_carrot,fryingpan_instance)
        else:
            exp(food_carrot,fryingpan_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fryingpan_instance]=True
        close[fryingpan_instance,food_carrot]=True
    

behavior find_dry_pasta_2114_around_toaster_132(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(dry_pasta,toaster_instance)
        else:
            exp(dry_pasta,toaster_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,toaster_instance]=True
        close[toaster_instance,dry_pasta]=True
    

################################################################################

Error: Unexpected token Token('IN', 'in') at line 5422, column 33.
Expected one of: 
	* COMMA
	* COLON
	* LSQB
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

--------------------------------------------------------------------------------
Goal: behavior gather_and_add_ingredients(fish:item, vegetables:list, pot:item):
    body:
        foreach vegetable: item in vegetables:
            achieve_once inside(vegetable, pot)
        achieve_once inside(fish, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior ensure_water_boiling(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and cut(fish)

        bind pot: item where:
            is_pot(pot) and id[pot] == 2040
        # Select the specific pot with ID 2040

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is on

        fill_pot_with_water(pot)
        ensure_water_boiling(pot, stove)

        # Assume other vegetables have been identified and cut
        symbol vegetables_to_add = [food_food_2094, food_food_1000, food_food_2001]

        gather_and_add_ingredients(fish, vegetables_to_add, pot)
--------------------------------------------------------------------------------
Exploration: 
behavior find_food_onion_2048_around_fryingpan_2154(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2154
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(food_onion,fryingpan_instance)
        else:
            exp(food_onion,fryingpan_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fryingpan_instance]=True
        close[fryingpan_instance,food_onion]=True
    

behavior find_food_carrot_2086_around_sink_19(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_carrot,sink_instance)
        else:
            exp(food_carrot,sink_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,sink_instance]=True
        close[sink_instance,food_carrot]=True
    

################################################################################

Error: Unexpected token Token('_DEDENT', '') at line 5928, column 10.
Expected one of: 
	* _INDENT

--------------------------------------------------------------------------------
Goal: behavior add_lemon_slices_to_sugar_water(pot:item, lemon:item):
    body:
        achieve_once inside(lemon, pot)
        # Add the lemon slices to the pot with sugar water

behavior let_it_steep():
    body:
        # Let the mixture steep after adding the lemon
        # No state change just wait for a period of time

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot) and inside(food_sugar_2070, pot)
        # Select the pot with sugar water

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon

        add_lemon_slices_to_sugar_water(pot, lemon)
        let_it_steep()
--------------------------------------------------------------------------------
Exploration: 
behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_sugar_2070; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal:  
behavior add_lemon_slices_to_sugar_water(pot:item, lemon:item):
    body:
        achieve_once inside(lemon, pot)
        # Add the lemon slices to the pot with sugar water

behavior let_it_steep():
    body:
        # Let the mixture steep after adding the lemon
        pass  # No state change, just wait for a period of time

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot) and inside(food_sugar_2070, pot)
        # Select the pot with sugar water

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        # Select the cut lemon

        add_lemon_slices_to_sugar_water(pot, lemon)
        let_it_steep()

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function achieve_on not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal: behavior verify_pot_readiness(pot:item):
    body:
        if not has_water(pot):
            achieve has_water(pot)

behavior add_lemon_slices_to_pot(lemon_slices:item, pot:item):
    body:
        achieve_once inside(lemon_slices, pot)

behavior allow_steeping(pot:item):
    body:
        achieve_on(pot)

behavior __goal__():
    body:
        bind sugar_water_pot: item where:
            is_pot(sugar_water_pot) and id[sugar_water_pot] == 2093

        bind lemon_slices: item where:
            is_food_lemon(lemon_slices) and cut(lemon_slices)

        verify_pot_readiness(sugar_water_pot)
        add_lemon_slices_to_pot(lemon_slices, sugar_water_pot)
        allow_steeping(sugar_water_pot)
--------------------------------------------------------------------------------
Exploration: 
behavior find_tea_bag_2017_around_cupboard_130(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tea_bag,cupboard_instance)
        else:
            exp(tea_bag,cupboard_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,cupboard_instance]=True
        close[cupboard_instance,tea_bag]=True
    

behavior find_shoes_2001_around_bathroom_cabinet_305(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(shoes,bathroom_cabinet_instance)
        else:
            exp(shoes,bathroom_cabinet_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,shoes]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal: behavior verify_pot_readiness(pot:item):
    body:
        if not has_water(pot):
            achieve has_water(pot)

behavior add_lemon_slices_to_pot(lemon_slices:item, pot:item):
    body:
        achieve_once inside(lemon_slices, pot)

behavior allow_steeping(pot:item):
    body:
        achieve inside(pot, stove)

behavior __goal__():
    body:
        bind sugar_water_pot: item where:
            is_pot(sugar_water_pot) and id[sugar_water_pot] == 2093

        bind lemon_slices: item where:
            is_food_lemon(lemon_slices) and cut(lemon_slices)

        verify_pot_readiness(sugar_water_pot)
        add_lemon_slices_to_pot(lemon_slices, sugar_water_pot)
        allow_steeping(sugar_water_pot)
--------------------------------------------------------------------------------
Exploration: 
behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_tea_bag_2017_around_cupboard_130(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tea_bag,cupboard_instance)
        else:
            exp(tea_bag,cupboard_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,cupboard_instance]=True
        close[cupboard_instance,tea_bag]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'to') at line 6025, column 42.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

--------------------------------------------------------------------------------
Goal:  
behavior observe_and_squeeze_lemon(lemon:item, cup:item):
    body:
        if not cut(lemon):
            observe(lemon, "Ensure the lemon is cut for squeezing")
        achieve_once inside(cup, Observe to ensure lemon juice goes into the cup)
        squeeze(lemon)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)

        bind cup: item where:
            is_cup(cup)

        observe_and_squeeze_lemon(lemon, cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_juice_2034_around_cup_2088(juice:item):
    goal: not unknown(juice)
    body:
        assert is_juice(juice)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(juice,cup_instance)
        else:
            exp(juice,cup_instance)
    eff:
        unknown[juice]=False
        close[juice,cup_instance]=True
        close[cup_instance,juice]=True
    

behavior find_cup_2089_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function is_jug not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal: behavior add_water_and_sugar_to_lemon_juice(lemon:item, sugar:item, water:item, cup:item):
    body:
        achieve_once inside(lemon, cup)
        achieve_once inside(sugar, cup)
        achieve_once inside(water, cup)

behavior stir_contents(cup:item):
    body:
        achieve clean(cup) # Using clean for stirring to represent the thorough mixing

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)

        bind sugar: item where:
            is_food_sugar(sugar)

        bind water: item where:
            is_pot(water) or is_jug(water)

        bind cup: item where:
            is_cup(cup)

        add_water_and_sugar_to_lemon_juice(lemon, sugar, water, cup)
        stir_contents(cup)
--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2006_around_cup_2006(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2006
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_clothes_socks_2115_around_basket_for_clothes_2040(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_lemon_2061; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal:  
behavior add_water_and_sugar_to_juice(cup:item, water:item, sugar:item, spoon:item):
    body:
        achieve_once inside(water, cup)
        achieve_once inside(sugar, cup)
        achieve_once clean(cup)
        # Add water and sugar to the cup that contains lemon juice

behavior stir_cup_contents(cup:item, spoon:item):
    body:
        achieve_once close_char(char, cup)
        # Stir the contents of the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inside(food_lemon_2061, cup) and clean(cup)
        # Select cup with lemon juice and ensure it is clean

        bind water: item where:
            has_water(water)

        bind sugar: item where:
            is_food_sugar(sugar)

        bind spoon: item where:
            on(spoon, kitchen_counter_128)

        add_water_and_sugar_to_juice(cup, water, sugar, spoon)
        stir_cup_contents(cup, spoon)
 
--------------------------------------------------------------------------------
Exploration: 
behavior find_juice_2034_around_cup_2088(juice:item):
    goal: not unknown(juice)
    body:
        assert is_juice(juice)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(juice,cup_instance)
        else:
            exp(juice,cup_instance)
    eff:
        unknown[juice]=False
        close[juice,cup_instance]=True
        close[cup_instance,juice]=True
    

behavior find_cup_2006_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_clothes_underwear_2022_around_basket_for_clothes_2040(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_lemon_2061; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal:  
behavior add_water_and_sugar_to_juice(cup:item, water:item, sugar:item):
    body:
        achieve_once inside(water, cup)
        achieve_once inside(sugar, cup)
        # Add water and sugar to the cup that contains lemon juice

behavior stir_cup_contents(cup:item, spoon:item):
    body:
        achieve_once close_char(char, cup)
        # Stir the contents of the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inside(food_lemon_2061, cup) and clean(cup)
        # Select cup with lemon juice and ensure it is clean

        bind water: item where:
            has_water(water)

        bind sugar: item where:
            is_food_sugar(sugar)

        bind spoon: item where:
            on(spoon, kitchen_counter_128)

        add_water_and_sugar_to_juice(cup, water, sugar)
        stir_cup_contents(cup, spoon)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2006_around_bowl_2095(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2095
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(cup,bowl_instance)
        else:
            exp(cup,bowl_instance)
    eff:
        unknown[cup]=False
        close[cup,bowl_instance]=True
        close[bowl_instance,cup]=True
    

behavior find_clothes_underwear_2022_around_basket_for_clothes_2040(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter_129; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal:  
behavior find_cup_and_fill_with_lemon_juice(cup:item):
    body:
        achieve_once visited(cup)
        # Visit a specific cup
        achieve_once inside(cup, kitchen_counter_129)
        # Ensure the cup is on a known location, such as a kitchen counter

behavior add_water_and_sugar_to_lemon_juice(cup:item, water:item, sugar:item):
    body:
        achieve_once has_water(cup)
        # Cup is filled with water
        achieve_once inside(sugar, cup)
        # Add sugar into the cup
        achieve_once inside(water, cup)
        # Ensure water is also inside the cup

behavior stir_contents(cup:item):
    body:
        achieve_once has_water(cup)
        # After adding water and sugar, ensure the contents are stirred to mix well

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select any unvisited item that is a cup
        
        foreach water: item:
            if has_water(food_lemon_2061) and is_pourable(water):
                find_cup_and_fill_with_lemon_juice(cup)
            
        bind water: item where:
            is_pourable(water)
        
        foreach sugar: item:
            if is_food_sugar(sugar) and not visited(sugar):
                achieve_once visited(sugar)
            
        bind sugar: item where:
            is_food_sugar(sugar)
        
        add_water_and_sugar_to_lemon_juice(cup, water, sugar)
        stir_contents(cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_book_2091_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_clothes_shirt_2114_around_basket_for_clothes_2040(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_clothes_underwear_2022_around_basket_for_clothes_2040(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_lemon_2061; available variables: [Variable<water: item>].
--------------------------------------------------------------------------------
Goal: 
behavior find_cup_and_fill_with_lemon_juice(cup:item):
    body:
        achieve_once visited(cup)
        # Visit a specific cup

behavior add_water_and_sugar_to_lemon_juice(cup:item, water:item, sugar:item):
    body:
        achieve_once has_water(cup)
        # Cup is filled with water
        achieve_once inside(sugar, cup)
        # Add sugar into the cup
        achieve_once inside(water, cup)
        # Ensure water is also inside the cup

behavior stir_contents(cup:item):
    body:
        achieve_once has_water(cup)
        # After adding water and sugar, ensure the contents are stirred to mix well

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select any unvisited item that is a cup
        
        bind sugar: item where:
            is_food_sugar(sugar)
        
        foreach water: item:
            if has_water(food_lemon_2061) and is_pourable(water):
                find_cup_and_fill_with_lemon_juice(cup)
            
        bind water: item where:
            is_pourable(water)

        add_water_and_sugar_to_lemon_juice(cup, water, sugar)
        stir_contents(cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2006_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_juice_2034_around_cup_2088(juice:item):
    goal: not unknown(juice)
    body:
        assert is_juice(juice)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(juice,cup_instance)
        else:
            exp(juice,cup_instance)
    eff:
        unknown[juice]=False
        close[juice,cup_instance]=True
        close[cup_instance,juice]=True
    

behavior find_clothes_underwear_2022_around_basket_for_clothes_2040(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_lemon_2100; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal:  
behavior dissolve_sugar_in_water(sugar:item, water:item):
    body:
        achieve_once inside(sugar, water)

behavior pour_mixture_into_cup(mixture:item, cup:item):
    body:
        achieve_once inside(mixture, cup)

behavior __goal__():
    body:
        bind sugar: item where:
            is_food_sugar(sugar)

        bind cup: item where:
            is_cup(cup) and visited(cup) and inside(food_lemon_2100, cup)
        # Ensure it is the correct cup with the lemon slices inside

        bind water: item where:
            is_pot(water) or has_water(water)
        # Use a pot or container with water that is available

        dissolve_sugar_in_water(sugar, water)
        pour_mixture_into_cup(water, cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_shirt_2158_around_basket_for_clothes_2078(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5505, column 58.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

--------------------------------------------------------------------------------
Goal: behavior dissolve_sugar_in_water(sugar:item, water:item):
    body:
        achieve_once inside(sugar, water)

behavior pour_mixture_into_cup(mixture:item, cup:item):
    body:
        achieve_once inside(mixture, cup)

behavior __goal__():
    body:
        bind sugar: item where:
            is_food_sugar(sugar)

        bind cup: item where:
            is_cup(cup) and visited(cup) and inside(lemon: item where is_food_lemon(lemon), cup)
        # Ensure it is the correct cup with the lemon slices inside

        bind water: item where:
            is_pot(water) or has_water(water)
        # Use a pot or container with water that is available

        dissolve_sugar_in_water(sugar, water)
        pour_mixture_into_cup(water, cup)
--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_wooden_spoon_2000_around_stove_2135(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(wooden_spoon,stove_instance)
        else:
            exp(wooden_spoon,stove_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,stove_instance]=True
        close[stove_instance,wooden_spoon]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: coffe_maker_147; available variables: [Variable<coffee: item>].
--------------------------------------------------------------------------------
Goal: behavior add_milk_and_sugar_to_coffee(milk:item, sugar:item, coffee:item):
    body:
        achieve_once inside(milk, coffee)
        achieve_once inside(sugar, coffee)

behavior __goal__():
    body:
        bind coffee: item where:
            is_cup(coffee) and inside(coffee, coffe_maker_147) and has_water(coffee)
        # Select the brewed coffee in the cup

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        add_milk_and_sugar_to_coffee(milk, sugar, coffee)
--------------------------------------------------------------------------------
Exploration: 
behavior find_food_sugar_2070_around_kitchen_counter_128(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_lemon_2061; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal: behavior find_sugar_and_water(sugar:item, water:item):
    body:
        achieve_once visited(sugar)
        # Visit the item classified as sugar to find it
        achieve_once visited(water)
        # Visit the item classified as water to find it

behavior add_sugar_to_cup(sugar:item, cup:item):
    body:
        achieve_once inside(sugar, cup)
        # Place the sugar inside the cup

behavior add_water_to_cup(water:item, cup:item):
    body:
        achieve has_water(cup)
        # Add the water to the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inside(food_lemon_2061, cup)
        # Select the cup that already has lemon slices

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select the sugar

        bind water: item where:
            is_water(water)
        # Select the water

        find_sugar_and_water(sugar, water)
        add_sugar_to_cup(sugar, cup)
        add_water_to_cup(water, cup)
--------------------------------------------------------------------------------
Exploration: 
behavior find_box_2023_around_filing_cabinet_378(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==378
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(box,filing_cabinet_instance)
        else:
            exp(box,filing_cabinet_instance)
    eff:
        unknown[box]=False
        close[box,filing_cabinet_instance]=True
        close[filing_cabinet_instance,box]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function has_sugar not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal: behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_sugar(cup) and not has_water(cup)
        # Select the cup that already has sugar but not water

        fill_cup_with_water(cup)
--------------------------------------------------------------------------------
Exploration: 
behavior find_stamp_2031_around_doorjamb_182(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==182
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(stamp,doorjamb_instance)
        else:
            exp(stamp,doorjamb_instance)
    eff:
        unknown[stamp]=False
        close[stamp,doorjamb_instance]=True
        close[doorjamb_instance,stamp]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function is_clean not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal: 
behavior crack_eggs_into_bowl(egg:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        # Crack and place the egg inside the bowl

behavior beat_eggs_in_bowl(bowl:item):
    body:
        achieve is_clean(bowl)
        # Ensure the bowl is clean before beating the eggs
        achieve close_char(char, bowl)
        # Position close to the bowl to beat the eggs

def eggs_in_bowl(bowl:item):
    # Function to check if there are eggs inside the bowl
    symbol contains_eggs = exists egg: item : (is_food_egg(egg) and inside(egg, bowl))
    return contains_eggs

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and eggs_in_bowl(bowl)
        # Select the bowl that contains eggs

        foreach egg: item:
            if is_food_egg(egg) and not inside(egg, bowl):
                crack_eggs_into_bowl(egg, bowl)

        beat_eggs_in_bowl(bowl)
--------------------------------------------------------------------------------
Exploration: 
behavior find_wooden_spoon_2000_around_cupboard_117(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(wooden_spoon,cupboard_instance)
        else:
            exp(wooden_spoon,cupboard_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cupboard_instance]=True
        close[cupboard_instance,wooden_spoon]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
--------------------------------------------------------------------------------
Goal: behavior heat_pan_and_pour_eggs(pan:item, eggs:item):
    body:
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove) and is_on(stove)
        # Select a frying pan that is already on the stove and the stove is on

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        # Select eggs that have been beaten

        heat_pan_and_pour_eggs(pan, eggs)
--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function beaten not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior heat_the_fryingpan_and_pour_eggs(pan:item, stove:item, eggs:item):
    body:
        achieve_once on(pan, stove)
        achieve is_on(stove)
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        bind eggs: item where:
            is_food_egg(eggs) and beaten(eggs)
        
        heat_the_fryingpan_and_pour_eggs(fryingpan, stove, eggs)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_butter_2007_around_cupboard_117(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_lemon_2100; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal:  
behavior add_water_and_sugar_to_cup(cup:item, water_source:item, sugar:item):
    body:
        achieve_once close_char(char, water_source)
        # Approach the water source to fill the cup
        achieve has_water(cup)
        # Fill the cup with water
        achieve_once inside(sugar, cup)
        # Add sugar to the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inside(food_lemon_2100, cup)
        # Select the cup with lemon juice in it

        bind water_source: item where:
            is_faucet(water_source) or is_sink(water_source)
        # Select a water source, like a faucet or a sink

        bind sugar: item where:
            is_food_sugar(sugar)

        add_water_and_sugar_to_cup(cup, water_source, sugar)

--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_mouse_280_around_computer_209(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==209
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'lemon') at line 5484, column 36.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal: behavior add_water_and_sugar_to_cup(cup:item, water_source:item, sugar:item):
    body:
        achieve_once close_char(char, water_source)
        # Approach the water source to fill the cup
        achieve has_water(cup)
        # Fill the cup with water
        achieve_once inside(sugar, cup)
        # Add sugar to the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and exists lemon: item : (is_food_lemon(lemon) and inside(lemon, cup))
        # Select the cup with lemon juice in it

        bind water_source: item where:
            is_faucet(water_source) or is_sink(water_source)
        # Select a water source, like a faucet or a sink

        bind sugar: item where:
            is_food_sugar(sugar)

        add_water_and_sugar_to_cup(cup, water_source, sugar)
--------------------------------------------------------------------------------
Exploration: 
behavior find_stamp_2043_around_bookshelf_275(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(stamp,bookshelf_instance)
        else:
            exp(stamp,bookshelf_instance)
    eff:
        unknown[stamp]=False
        close[stamp,bookshelf_instance]=True
        close[bookshelf_instance,stamp]=True
    

behavior find_mouse_280_around_desk_193(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(mouse,desk_instance)
        else:
            exp(mouse,desk_instance)
    eff:
        unknown[mouse]=False
        close[mouse,desk_instance]=True
        close[desk_instance,mouse]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_lemon_2100; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal:  
behavior stir_mixture(cup:item):
    body:
        achieve clean(cup)
        # Ensure the cup is clean, if needed, the stirring action implies mixing

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup) and inside(food_lemon_2100, cup) and inside(food_sugar_2111, cup)
        # Select the cup with water, lemon juice, and sugar inside

        stir_mixture(cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_wooden_spoon_2000_around_kitchen_counter_123(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'sugar') at line 5831, column 117.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal: behavior stir_sugar_in_cup(cup:item):
    body:
        achieve clean(cup) # Ensure the cup is clean after stirring

def cup_contains_lemon_and_sugar(cup:item):
    # Function to check if the cup contains both lemon juice and sugar
    symbol contains_lemon_and_sugar = exists lemon: item : (is_food_lemon(lemon) and inside(lemon, cup)) and exists sugar: item : (is_food_sugar(sugar) and inside(sugar, cup))
    return contains_lemon_and_sugar

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup) and cup_contains_lemon_and_sugar(cup)
        # Select the cup with water, lemon juice, and sugar inside

        stir_sugar_in_cup(cup)
--------------------------------------------------------------------------------
Exploration: 
behavior find_hairbrush_2002_around_bathroom_cabinet_40(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(hairbrush,bathroom_cabinet_instance)
        else:
            exp(hairbrush,bathroom_cabinet_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,hairbrush]=True
    

behavior find_fork_2080_around_dishwasher_1001(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'sugar') at line 5813, column 117.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal: 
behavior stir_sugar_in_cup(cup:item):
    body:
        achieve clean(cup)

def cup_contains_lemon_and_sugar(cup:item):
    symbol contains_lemon_and_sugar = exists lemon: item : (is_food_lemon(lemon) and inside(lemon, cup)) and exists sugar: item : (is_food_sugar(sugar) and inside(sugar, cup))
    return contains_lemon_and_sugar

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup) and cup_contains_lemon_and_sugar(cup)

        stir_sugar_in_cup(cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: spice; available variables: [Variable<vegetable: item>].
--------------------------------------------------------------------------------
Goal:  
behavior find_vegetables_and_spices(vegetable:item, spice:item):
    body:
        achieve_once visited(vegetable)
        # Find and visit the vegetable to prepare it
        achieve_once visited(spice)
        # Find and visit the spice to prepare it

behavior clean_vegetable(vegetable:item):
    body:
        achieve clean(vegetable)
        # Clean the vegetable

behavior prepare_spices(spice:item):
    body:
        achieve_once inhand(spice)
        # Temporarily hold the spice in hand for preparation

behavior place_vegetable_on_cutting_board(vegetable:item, board:item):
    body:
        achieve_once on(vegetable, board)
        # Place the vegetable on the cutting board

behavior cut_vegetable(vegetable:item, knife:item):
    body:
        achieve_once cut(vegetable)
        # Cut the vegetable

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                find_vegetables_and_spices(vegetable, spice)

        bind vegetable: item where:
            is_food_vegetable(vegetable) and visited(vegetable)

        foreach spice: item:
            if is_sauce(spice) and not visited(spice):
                find_vegetables_and_spices(vegetable, spice)

        bind spice: item where:
            is_sauce(spice) and visited(spice)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        clean_vegetable(vegetable)
        prepare_spices(spice)
        place_vegetable_on_cutting_board(vegetable, cutting_board)
        cut_vegetable(vegetable, knife)

--------------------------------------------------------------------------------
Exploration: 
behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

################################################################################

Error: Unexpected token Token('EQUAL', '=') at line 5908, column 62.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal: behavior gather_ingredients(vegetable:item, spice:item):
    body:
        achieve_once visited(vegetable)
        achieve_once clean(vegetable)
        # Visit and clean the vegetable

        achieve_once visited(spice)
        # Visit the spice to find it

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                gather_ingredients(vegetable, none)

        bind vegetable: item where:
            is_food_vegetable(vegetable) and visited(vegetable)

        foreach spice: item:
            if is_sauce(spice) and not visited(spice):
                gather_ingredients(none, spice)

        bind spice: item where:
            is_sauce(spice) and visited(spice) and id[spice] = 2101

        gather_ingredients(vegetable, spice)
--------------------------------------------------------------------------------
Exploration: 
behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: none; available variables: [Variable<vegetable: item>].
--------------------------------------------------------------------------------
Goal:  
behavior gather_ingredients(vegetable:item, spice:item):
    body:
        achieve_once visited(vegetable)
        achieve_once clean(vegetable)
        # Visit and clean the vegetable

        achieve_once visited(spice)
        # Visit the spice to find it

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                gather_ingredients(vegetable, none)

        bind vegetable: item where:
            is_food_vegetable(vegetable) and visited(vegetable)

        foreach spice: item:
            if is_sauce(spice) and not visited(spice):
                gather_ingredients(none, spice)

        bind spice: item where:
            is_sauce(spice) and visited(spice) and id[spice] == 2101

        gather_ingredients(vegetable, spice)

--------------------------------------------------------------------------------
Exploration: 
behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

################################################################################

Error: Unexpected token Token('EQUAL', '=') at line 5903, column 26.
Expected one of: 
	* COLON

--------------------------------------------------------------------------------
Goal: 
behavior find_and_clean_vegetables(vegetable:item):
    body:
        achieve_once visited(vegetable)
        achieve clean(vegetable)

behavior find_and_gather_spices(spice:item):
    body:
        achieve_once visited(spice)

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                find_and_clean_vegetables(vegetable)

        foreach spice: item:
            if is_sauce(spice) and not visited(spice):
                if spice = sauce_2101:
                    find_and_gather_spices(spice)
--------------------------------------------------------------------------------
Exploration: 
behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: sauce_2101; available variables: [Variable<spice: item>].
--------------------------------------------------------------------------------
Goal: behavior find_and_clean_vegetables(vegetable:item):
    body:
        achieve_once visited(vegetable)
        achieve clean(vegetable)

behavior find_and_gather_spices(spice:item):
    body:
        achieve_once visited(spice)

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                find_and_clean_vegetables(vegetable)

        foreach spice: item:
            if is_sauce(spice) and not visited(spice):
                if spice == sauce_2101:
                    find_and_gather_spices(spice)
--------------------------------------------------------------------------------
Exploration: 
behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
--------------------------------------------------------------------------------
Goal: behavior cook_chicken_in_fryingpan(chicken:item, fryingpan:item):
    body:
        achieve_once inside(chicken, fryingpan)

behavior ensure_stove_is_on(stove:item):
    body:
        achieve is_on(stove)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior cook_pasta_in_pot(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)

        bind stove: item where:
            is_stove(stove) and is_on(stove)

        bind pot: item where:
            is_pot(pot) and has_water(pot)

        bind faucet: item where:
            is_faucet(faucet)
        
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        cook_chicken_in_fryingpan(chicken, fryingpan)
        ensure_stove_is_on(stove)
        cook_pasta_in_pot(dry_pasta, pot)
--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_toy_2056_around_table_114(toy:item):
    goal: not unknown(toy)
    body:
        assert is_toy(toy)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(toy,table_instance)
        else:
            exp(toy,table_instance)
    eff:
        unknown[toy]=False
        close[toy,table_instance]=True
        close[table_instance,toy]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
--------------------------------------------------------------------------------
Goal: behavior cook_chicken_in_fryingpan(chicken:item, fryingpan:item):
    body:
        achieve_once inside(chicken, fryingpan)

behavior ensure_stove_is_on(stove:item):
    body:
        achieve is_on(stove)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior cook_pasta_in_pot(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)

        bind stove: item where:
            is_stove(stove) and is_on(stove)

        bind pot: item where:
            is_pot(pot) and has_water(pot)

        bind faucet: item where:
            is_faucet(faucet)
        
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        cook_chicken_in_fryingpan(chicken, fryingpan)
        ensure_stove_is_on(stove)
        cook_pasta_in_pot(dry_pasta, pot)
--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_2040_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

behavior find_toy_2056_around_door_62(toy:item):
    goal: not unknown(toy)
    body:
        assert is_toy(toy)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==62
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(toy,door_instance)
        else:
            exp(toy,door_instance)
    eff:
        unknown[toy]=False
        close[toy,door_instance]=True
        close[door_instance,toy]=True
    

behavior find_dry_pasta_2114_around_table_114(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(dry_pasta,table_instance)
        else:
            exp(dry_pasta,table_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,table_instance]=True
        close[table_instance,dry_pasta]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function cooked not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior mix_chicken_and_pasta(chicken:item, pasta:item, bowl:item):
    body:
        achieve_once inside(chicken, bowl)
        achieve_once inside(pasta, bowl)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the cooked and cut chicken

        bind pasta: item where:
            is_dry_pasta(pasta) and cooked(pasta)
        # Select the cooked pasta

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl for mixing

        mix_chicken_and_pasta(chicken, pasta, bowl)

--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_wooden_spoon_2000_around_kitchen_counter_123(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<pasta: item>].
--------------------------------------------------------------------------------
Goal:  
behavior mix_chicken_and_pasta(chicken:item, pasta:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once inside(pasta, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        
        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot)

        bind pot: item where:
            is_pot(pot)

        mix_chicken_and_pasta(chicken, pasta, pot)

--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_wooden_spoon_2000_around_kitchen_counter_123(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: egg; available variables: [Variable<rice: item>].
--------------------------------------------------------------------------------
Goal: behavior find_and_wash_ingredients(rice:item, egg:item):
    body:
        achieve_once visited(rice)
        achieve clean(rice)
        achieve_once visited(egg)
        achieve clean(egg)

behavior __goal__():
    body:
        foreach rice: item:
            if is_food_rice(rice) and (not visited(rice) or dirty(rice)):
                find_and_wash_ingredients(rice, egg)

        foreach egg: item:
            if is_food_egg(egg) and (not visited(egg) or dirty(egg)):
                find_and_wash_ingredients(rice, egg)
--------------------------------------------------------------------------------
Exploration: 
behavior find_food_rice_2108_around_kitchen_counter_122(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2092_around_kitchen_counter_122(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_fish; available variables: [Variable<pot: item>, Variable<stove: item>].
--------------------------------------------------------------------------------
Goal:  
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot) # Fill the pot with water

behavior cook_ingredients_in_pot(pot:item, stove:item):
    body:
        achieve_once inside(food_fish, pot)
        achieve_once inside(food_vegetable, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)

        bind stove: item where:
            is_stove(stove)

        bind food_fish: item where:
            is_food_fish(food_fish)

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)

        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)
        cook_ingredients_in_pot(pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_socks_2159_around_basket_for_clothes_2078(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

behavior find_pot_78_around_computer_276(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(pot,computer_instance)
        else:
            exp(pot,computer_instance)
    eff:
        unknown[pot]=False
        close[pot,computer_instance]=True
        close[computer_instance,pot]=True
    

behavior find_clothes_dress_2116_around_basket_for_clothes_2078(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function place_pan_on_stove not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior place_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior scramble_eggs_in_pan(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot)

        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        place_rice_in_pot(rice, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

        place_pan_on_stove(pan, stove)
        add_oil_to_pan(oil, pan)
        scramble_eggs_in_pan(egg, pan)


--------------------------------------------------------------------------------
Exploration: 
behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'is_on') at line 5231, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
behavior find_coffee_maker(coffee_maker:item):
    body:
        achieve_once visited(coffee_maker)

behavior ensure_coffee_maker_ready(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        achieve once is_on(coffee_maker)

behavior fill_coffee_filter_with_coffee(coffee_filter:item, coffee_granules:item):
    body:
        achieve_once inside(coffee_granules, coffee_filter)

behavior place_filter_in_coffee_maker(coffee_filter:item, coffee_maker:item):
    body:
        achieve_once inside(coffee_filter, coffee_maker)

behavior start_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve_once close_char(char, coffee_maker)
        achieve_once inside(cup, coffee_maker) # Assuming coffee dispenses directly into the cup

behavior __goal__():
    body:
        foreach coffee_maker: item:
            if is_coffe_maker(coffee_maker) and not visited(coffee_maker):
                find_coffee_maker(coffee_maker)

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        
        ensure_coffee_maker_ready(coffee_maker)

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        
        bind coffee_granules: item where:
            is_food_food(coffee_granules) # Assuming granules classified as a general food category

        fill_coffee_filter_with_coffee(coffee_filter, coffee_granules)
        place_filter_in_coffee_maker(coffee_filter, coffee_maker)

        bind cup: item where:
            is_cup(cup)
        
        start_coffee_maker(coffee_maker, cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_food_2094_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_coffee_filter_2065_around_coffe_maker_130(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==130
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_cup_2133_around_kitchen_counter_119(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: coffe_maker_130; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal: 
behavior add_milk_and_sugar_to_coffee(milk:item, sugar:item, coffee:item):
    body:
        achieve_once inside(milk, coffee)
        achieve_once inside(sugar, coffee)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        
        bind sugar: item where:
            is_food_sugar(sugar)
        
        bind cup: item where:
            is_cup(cup) and on(cup, coffe_maker_130)
        
        add_milk_and_sugar_to_coffee(milk, sugar, cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_sugar_2111_around_fridge_126(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: coffe_maker_130; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal:  
behavior add_milk_and_sugar_to_coffee(milk:item, sugar:item, coffee:item):
    body:
        achieve_once inside(milk, coffee)
        achieve_once inside(sugar, coffee)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        
        bind sugar: item where:
            is_food_sugar(sugar)
        
        bind cup: item where:
            is_cup(cup) and on(cup, coffe_maker_130)
        
        bind coffe_maker_130: item where:
            is_coffe_maker(coffe_maker_130)
        
        add_milk_and_sugar_to_coffee(milk, sugar, cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_sugar_2111_around_fridge_126(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function achieve_close_char not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior cook_chicken(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior cook_pasta(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        bind pot_chicken: item where:
            is_pot(pot_chicken)

        bind pot_pasta: item where:
            is_pot(pot_pasta)

        fill_pot_with_water(pot_chicken, faucet)
        fill_pot_with_water(pot_pasta, faucet)

        place_pot_on_stove(pot_chicken, stove)
        place_pot_on_stove(pot_pasta, stove)

        turn_on_stove(stove)

        cook_chicken(chicken, pot_chicken)
        cook_pasta(pasta, pot_pasta)

--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_dry_pasta_2042_around_kitchen_counter_230(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

################################################################################

Error: Unexpected token Token('EQUAL', '=') at line 5845, column 40.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
behavior cook_chicken_separately(chicken:item, pot:item, stove:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior cook_pasta_separately(pasta:item, pot:item, stove:item, faucet:item):
    body:
        achieve has_water(pot)
        achieve_once inside(pasta, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot) and id[pot]==2069

        bind stove: item where:
            is_stove(stove) and id[stove]==2065

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43

        cook_chicken_separately(chicken, pot, stove)

        bind pot_new: item where:
            is_pot(pot_new) and pot_new=pot

        cook_pasta_separately(pasta, pot_new, stove, faucet)

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2081_around_table_355(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

################################################################################

Error: Unexpected token Token('EQUAL', '=') at line 5886, column 40.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal: behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve is_on(faucet)
        achieve has_water(pot)

behavior place_chicken_in_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior place_pasta_in_pot(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot) and id[pot]==2069

        bind stove: item where:
            is_stove(stove) and id[stove]==2065

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43

        bind pot_new: item where:
            is_pot(pot_new) and pot_new=pot

        # Cook chicken separately
        place_chicken_in_pot(chicken, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

        # Cook pasta separately
        fill_pot_with_water(pot_new, faucet)
        place_pasta_in_pot(pasta, pot_new)
        place_pot_on_stove(pot_new, stove)
        turn_on_stove(stove)
--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2080_around_dishwasher_1001(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_116(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_cd_2075_around_drawing_239(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==239
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(cd,drawing_instance)
        else:
            exp(cd,drawing_instance)
    eff:
        unknown[cd]=False
        close[cd,drawing_instance]=True
        close[drawing_instance,cd]=True
    

################################################################################

Error: Unexpected token Token('EQUAL', '=') at line 5846, column 45.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet) 
        achieve has_water(pot)

behavior place_chicken_in_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior place_pasta_in_pot(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior ensure_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot_chicken: item where:
            is_pot(pot_chicken) and id[pot_chicken]==2069

        bind pot_pasta: item where:
            is_pot(pot_pasta) and pot_pasta = pot_chicken

        bind stove_chicken: item where:
            is_stove(stove_chicken) and id[stove_chicken]==2065

        bind stove_pasta: item where:
            is_stove(stove_pasta) and stove_chicken = stove_pasta

        bind faucet1: item where:
            is_faucet(faucet1) and id[faucet1]==232

        bind faucet2: item where:
            is_faucet(faucet2) and faucet1 = faucet2
        
        fill_pot_with_water(pot_chicken, faucet1)
        fill_pot_with_water(pot_pasta, faucet2)
        place_chicken_in_pot(chicken, pot_chicken)
        place_pasta_in_pot(pasta, pot_pasta)
        ensure_pot_on_stove(pot_chicken, stove_chicken)
        ensure_pot_on_stove(pot_pasta, stove_pasta)
        turn_on_stove(stove_chicken)
        turn_on_stove(stove_pasta)

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2081_around_dishwasher_1001(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

################################################################################

Error: Unexpected token Token('EQUAL', '=') at line 5863, column 44.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal: behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(pot)

behavior place_chicken_in_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior place_pasta_in_pot(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior ensure_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot_chicken: item where:
            is_pot(pot_chicken) and id[pot_chicken]==2069

        bind pot_pasta: item where:
            is_pot(pot_pasta) and pot_pasta=pot_chicken

        bind stove_chicken: item where:
            is_stove(stove_chicken) and id[stove_chicken]==2065

        bind stove_pasta: item where:
            is_stove(stove_pasta) and stove_chicken=stove_pasta

        bind faucet1: item where:
            is_faucet(faucet1) and id[faucet1]==232

        bind faucet2: item where:
            is_faucet(faucet2) and faucet1=faucet2
        
        fill_pot_with_water(pot_chicken, faucet1)
        fill_pot_with_water(pot_pasta, faucet2)
        place_chicken_in_pot(chicken, pot_chicken)
        place_pasta_in_pot(pasta, pot_pasta)
        ensure_pot_on_stove(pot_chicken, stove_chicken)
        ensure_pot_on_stove(pot_pasta, stove_pasta)
        turn_on_stove(stove_chicken)
        turn_on_stove(stove_pasta)
--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2081_around_dishwasher_1001(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

################################################################################

Error: Unexpected token Token('EQUAL', '=') at line 5882, column 53.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
behavior separate_pasta_and_chicken(pasta:item, chicken:item, pot:item):
    body:
        achieve_once inside(pasta, pot)
        achieve_once inside(chicken, pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior cook_pasta_or_chicken(item:item, stove:item, pot:item):
    body:
        achieve_once inside(item, pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)

        bind pot_for_chicken: item where:
            is_pot(pot_for_chicken)

        bind pot_for_pasta: item where:
            is_pot(pot_for_pasta) and pot_for_pasta = pot_for_chicken

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        separate_pasta_and_chicken(dry_pasta, chicken, pot_for_pasta)
        fill_pot_with_water(pot_for_pasta, faucet)
        place_pot_on_stove(pot_for_pasta, stove)
        cook_pasta_or_chicken(dry_pasta, stove, pot_for_pasta)

        fill_pot_with_water(pot_for_chicken, faucet)
        place_pot_on_stove(pot_for_chicken, stove)
        cook_pasta_or_chicken(chicken, stove, pot_for_chicken)

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

################################################################################

Error: Unexpected token Token('EQUAL', '=') at line 5846, column 53.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal: 
behavior separate_pasta_and_chicken(pasta:item, chicken:item, pot_for_pasta:item, pot_for_chicken:item):
    body:
        achieve_once inside(pasta, pot_for_pasta)
        achieve_once inside(chicken, pot_for_chicken)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior cook_pasta_or_chicken(item:item, stove:item, pot:item):
    body:
        achieve_once inside(item, pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)

        bind pot_for_chicken: item where:
            is_pot(pot_for_chicken)

        bind pot_for_pasta: item where:
            is_pot(pot_for_pasta) and pot_for_pasta = pot_for_chicken

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        separate_pasta_and_chicken(dry_pasta, chicken, pot_for_pasta, pot_for_chicken)
        fill_pot_with_water(pot_for_pasta, faucet)
        place_pot_on_stove(pot_for_pasta, stove)
        cook_pasta_or_chicken(dry_pasta, stove, pot_for_pasta)

        fill_pot_with_water(pot_for_chicken, faucet)
        place_pot_on_stove(pot_for_chicken, stove)
        cook_pasta_or_chicken(chicken, stove, pot_for_chicken)

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2080_around_dishwasher_1001(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: pot_54; available variables: [Variable<chicken: item>].
--------------------------------------------------------------------------------
Goal:  
behavior ensure_pot_has_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot) # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, pot_54)
        # Select the chicken that is already inside pot_54

        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the specific pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the specific stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the specific faucet with ID 134

        ensure_pot_has_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)


--------------------------------------------------------------------------------
Exploration: 
behavior find_stamp_2031_around_kitchen_counter_128(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(stamp,kitchen_counter_instance)
        else:
            exp(stamp,kitchen_counter_instance)
    eff:
        unknown[stamp]=False
        close[stamp,kitchen_counter_instance]=True
        close[kitchen_counter_instance,stamp]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<chicken: item>].
--------------------------------------------------------------------------------
Goal: behavior ensure_pot_has_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot) # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, pot)
        # Select the chicken that is already inside pot

        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the specific pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the specific stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the specific faucet with ID 134

        ensure_pot_has_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
--------------------------------------------------------------------------------
Exploration: 
behavior find_stamp_2031_around_kitchen_counter_128(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(stamp,kitchen_counter_instance)
        else:
            exp(stamp,kitchen_counter_instance)
    eff:
        unknown[stamp]=False
        close[stamp,kitchen_counter_instance]=True
        close[kitchen_counter_instance,stamp]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_mouse_2112_around_sink_307(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(mouse,sink_instance)
        else:
            exp(mouse,sink_instance)
    eff:
        unknown[mouse]=False
        close[mouse,sink_instance]=True
        close[sink_instance,mouse]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function cleaned not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal: 
behavior boil_pasta_and_cook_chicken(pasta:item, chicken:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot)
        achieve cleaned(chicken)
        achieve_once inside(chicken, pot)
        achieve has_water(pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind pot: item where:
            is_pot(pot) and id[pot]==2093

        bind stove: item where:
            is_stove(stove)

        boil_pasta_and_cook_chicken(pasta, chicken, pot, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_54_around_sink_133(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_food_chicken_2050_around_kitchen_counter_129(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_dry_pasta_2073_around_kitchen_counter_129(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_coin_2004_around_kitchen_counter_129(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coin,kitchen_counter_instance)
        else:
            exp(coin,kitchen_counter_instance)
    eff:
        unknown[coin]=False
        close[coin,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coin]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function place_pan_on_stove not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior cook_pasta(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior find_and_clean_chicken(chicken:item):
    body:
        achieve_once visited(chicken)
        achieve clean(chicken)

behavior cut_chicken(chicken:item, cutting_board:item, knife:item):
    body:
        achieve_once on(chicken, cutting_board)
        achieve_once cut(chicken)

behavior cook_chicken(chicken:item, fryingpan:item):
    body:
        achieve_once inside(chicken, fryingpan)

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        place_pot_on_stove(pot, stove)
        fill_pot_with_water(pot)
        cook_pasta(pasta, pot)
        turn_on_stove(stove)

        find_and_clean_chicken(chicken)
        cut_chicken(chicken, cutting_board, knife)

        place_pan_on_stove(fryingpan, stove)
        cook_chicken(chicken, fryingpan)


--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_54_around_kitchen_counter_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_chicken_2050_around_kitchen_counter_129(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_dry_pasta_2073_around_kitchen_counter_129(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function is_coffee_ground not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind water: item where:
            is_faucet(water) or has_water(water)
        bind coffee_ground: item where:
            is_coffee_ground(coffee_ground)
        bind filter: item where:
            is_coffee_filter(filter)
        bind cup: item where:
            is_cup(cup)
        achieve clean(cup)
        achieve clean(coffee_maker)
        achieve clean(filter)
        achieve_once has_water(coffee_maker)
        achieve_once has(coffee_ground, filter)
        achieve is_on(coffee_maker)
        achieve_once inside(coffee, cup)
        achieve clean(coffee_maker)
        achieve is_off(coffee_maker)
        if drinkable(cup):
            achieve inside(cup, coffee_maker)


--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2063_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function is_food_coffee not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal: behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind water: item where:
            is_faucet(water) or has_water(water)
        bind coffee_ground: item where:
            is_food_coffee(coffee_ground)
        bind filter: item where:
            is_coffee_filter(filter)
        bind cup: item where:
            is_cup(cup)
        achieve clean(cup)
        achieve clean(coffee_maker)
        achieve clean(filter)
        achieve_once has_water(coffee_maker)
        achieve_once has(coffee_ground, filter)
        achieve is_on(coffee_maker)
        achieve_once inside(coffee, cup)
        achieve clean(coffee_maker)
        achieve is_off(coffee_maker)
        if drinkable(cup):
            achieve inside(cup, coffee_maker)
--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2064_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

################################################################################

Error: Unexpected token Token('_DEDENT', '') at line 5684, column 10.
Expected one of: 
	* _INDENT

--------------------------------------------------------------------------------
Goal:  
behavior observe_coffee_maker(coffee_maker:item):
    body:
        observe(coffee_maker,"Check if the coffee maker is suitable for making coffee")

behavior prepare_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        achieve clean(coffee_maker)
        achieve closed(coffee_maker)
        achieve has_water(coffee_maker)

behavior operate_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior wait_for_coffee(coffee_maker:item):
    body:
        # No specific achieve state here waiting for the coffee to be ready

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Ensure the coffee maker is appropriate for making coffee
        observe_coffee_maker(coffee_maker)
        # Prepare the coffee maker
        prepare_coffee_maker(coffee_maker)
        # Operate the coffee maker
        operate_coffee_maker(coffee_maker)
        # Wait for the coffee to be ready
        wait_for_coffee(coffee_maker)

--------------------------------------------------------------------------------
Exploration: 
behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
behavior wash_item(item:item):
    body:
        achieve_once clean(item)

behavior fill_pot_with_water(pot:item):
    body:
        achieve_once has_water(pot)

behavior cook_chicken(chicken:item, stove:item, pot:item):
    goal:
        achieve inside(chicken, pot)
    body:
        achieve_once is_on(stove)

behavior cut_ingredient(item:item, cutting_board:item):
    body:
        achieve_once on(item, cutting_board)
        achieve_once cut(item)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select vegetable item

        bind onion: item where:
            is_food_onion(onion)
        # Select onion item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken item

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        foreach item: item:
            if item == vegetable or item == onion or item == chicken:
                wash_item(item)
                # Wash all ingredients

        fill_pot_with_water(pot)
        cook_chicken(chicken, stove, pot)
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        foreach item: item:
            if item == vegetable or item == onion or item == chicken:
                cut_ingredient(item, cutting_board)
                # Cut all ingredients

--------------------------------------------------------------------------------
Exploration: 
behavior find_plate_1000_around_table_355(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_onion_2032_around_fridge_289(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

################################################################################

