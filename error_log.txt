Error: Unexpected token Token('COLON', ':') at line 5635, column 30.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

--------------------------------------------------------------------------------
Goal:  
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

behavior fill_water_tank(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Make sure the coffee maker has water to brew the coffee

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

behavior brew_coffee(using:coffee_maker):
    body:
        achieve inside(coffee:item, using)
        # Brew the coffee using the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        plug_in_coffee_maker(coffee_maker)
        fill_water_tank(coffee_maker)
        turn_on_coffee_maker(coffee_maker)
        brew_coffee(coffee_maker)

--------------------------------------------------------------------------------
Exploration: 
behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5635, column 30.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

--------------------------------------------------------------------------------
Goal:  
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

behavior fill_water_tank(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Make sure the coffee maker has water to brew the coffee

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

behavior brew_coffee(using:coffee_maker):
    body:
        achieve inside(coffee:item, using)
        # Brew the coffee using the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        plug_in_coffee_maker(coffee_maker)
        fill_water_tank(coffee_maker)
        turn_on_coffee_maker(coffee_maker)
        brew_coffee(coffee_maker)

--------------------------------------------------------------------------------
Exploration: 
behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: sink; available variables: [Variable<bowl: item>, Variable<faucet: item>].
--------------------------------------------------------------------------------
Goal:  
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once inside(bowl, sink)
        # Place the bowl inside the sink
        
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the bowl with water
        
        achieve has_water(bowl)
        # Ensure the bowl has water in it

        achieve_once is_off(faucet)
        # Turn off the faucet once the bowl is filled

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to fill with water

        bind sink: item where:
            is_sink(sink)
        # Select a sink to fill the bowl with water

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet that is close to the sink

        fill_bowl_with_water(bowl, faucet)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2071_around_fridge_289(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(bowl,fridge_instance)
        else:
            exp(bowl,fridge_instance)
    eff:
        unknown[bowl]=False
        close[bowl,fridge_instance]=True
        close[fridge_instance,bowl]=True
    

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Error during applying inhand[observation, state](x: item).
  Arguments: O::char
Argument #0 type does not match: expect item, got character.
--------------------------------------------------------------------------------
Goal:  
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl) and inhand(char)
        # Select the bowl with water that is in my hand

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table in the home office

        move_bowl_to_table(bowl, table)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl) and inhand(bowl)
        # Select the bowl with water that is in my hand

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table in the home office

        move_bowl_to_table(bowl, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_2004_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: location; available variables: [Variable<home_office_table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        bind home_office_table: item where:
            is_table(home_office_table) and surfaces(home_office_table) and inside(home_office_table, location) and (exists room: item : is_home_office(room) and inside(home_office_table, room))
        move_bowl_to_table(bowl, home_office_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_356_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'location') at line 5960, column 84.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        bind home_office_table: item where:
            is_table(home_office_table) and surfaces(home_office_table) and exists location: item : inside(home_office_table, location) and (exists room: item : is_home_office(room) and inside(home_office_table, room))
        move_bowl_to_table(bowl, home_office_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_106_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            id[bowl] == 2071
        # Select the bowl with ID 2071
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        move_bowl_to_table(bowl, table)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: room; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            id[bowl] == 2071
        # Select the bowl with ID 2071
        
        bind table: item where:
            is_table(table) and inside(table, room) and is_home_office(room)
        # Select a table inside the home office

        move_bowl_to_table(bowl, table)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('_NEWLINE', '\n            ') at line 6063, column 32.
Expected one of: 
	* STRING
	* FINDONE
	* LPAR
	* MINUS
	* IMAG_NUMBER
	* FALSE
	* PLUS
	* VARNAME
	* LONG_STRING
	* NONE
	* LSQB
	* FINDALL
	* FORALL
	* NOT
	* EXISTS
	* HEX_NUMBER
	* BIN_NUMBER
	* ELLIPSIS
	* TRUE
	* DO
	* TILDE
	* OCT_NUMBER
	* FLOAT_NUMBER
	* DEC_NUMBER
	* COLON

--------------------------------------------------------------------------------
Goal:  
def is_my_cat(target:item):
    # Function to check if the target item is my cat
    return is_cat(target)

behavior __goal__():
    body:
        exists cat: item where:
            is_cat(cat)

        bind home_office: item where:
            is_home_office(home_office)

        # Approach directly if the subtask information is known:
        if exists cat: item where:
            is_cat(cat) and inside(cat, home_office):
            achieve close_char(char, cat)
        
        else:
            # Check all unvisited places:
            foreach place: item:
                if inside_char(char, place) and not visited(place):
                    if is_dining_room(place):
                        observe(place, "Check for my cat here")


--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_106_around_desk_357(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

################################################################################

Error: Unexpected token Token('_NEWLINE', '\n            ') at line 6041, column 32.
Expected one of: 
	* STRING
	* FINDONE
	* LPAR
	* MINUS
	* IMAG_NUMBER
	* FALSE
	* PLUS
	* VARNAME
	* LONG_STRING
	* NONE
	* LSQB
	* FINDALL
	* FORALL
	* NOT
	* EXISTS
	* HEX_NUMBER
	* BIN_NUMBER
	* ELLIPSIS
	* TRUE
	* DO
	* TILDE
	* OCT_NUMBER
	* FLOAT_NUMBER
	* DEC_NUMBER
	* COLON

--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        exists cat: item where:
            is_cat(cat)

        bind home_office: item where:
            is_home_office(home_office)
        
        # Approach directly if the subtask information is known:
        if exists cat: item where:
            is_cat(cat) and inside(cat, home_office):
            achieve close_char(char, cat)
        
        else:
            # Check all unvisited places:
            foreach place: item:
                if inside_char(char, place) and not visited(place):
                    if is_dining_room(place):
                        observe(place, "Check for my cat here")

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: cutting_board; available variables: [].
--------------------------------------------------------------------------------
Goal:  
behavior find_cutting_board():
    body:
        if exists cutting_board: item : is_cutting_board(cutting_board) and close_char(char, cutting_board):
            achieve close_char(char, cutting_board)
        else:
            foreach cutting_board: item:
                if is_cutting_board(cutting_board) and not visited(cutting_board):
                    observe(cutting_board, "Look for cutting board on the counter")

behavior find_chicken():
    body:
        if exists chicken: item : is_food_chicken(chicken) and close_char(char, chicken):
            achieve close_char(char, chicken)
        else:
            foreach chicken: item:
                if is_food_chicken(chicken) and not visited(chicken):
                    observe(chicken, "Look for chicken in the kitchen")

behavior slice_chicken(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        achieve cut(chicken)

behavior __goal__():
    body:
        find_cutting_board()
        find_chicken()
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and close_char(char, cutting_board)
        
        bind chicken: item where:
            is_food_chicken(chicken) and close_char(char, chicken)
        
        slice_chicken(chicken, cutting_board)


--------------------------------------------------------------------------------
Exploration: 
behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: cutting_board; available variables: [].
--------------------------------------------------------------------------------
Goal:  
behavior find_cutting_board():
    body:
        if exists cutting_board: item : is_cutting_board(cutting_board) and close_char(char, cutting_board):
            achieve close_char(char, cutting_board)
        else:
            foreach cutting_board: item:
                if is_cutting_board(cutting_board) and not visited(cutting_board):
                    observe(cutting_board, "Look for cutting board on the counter")

behavior find_chicken():
    body:
        if exists chicken: item : is_food_chicken(chicken) and close_char(char, chicken):
            achieve close_char(char, chicken)
        else:
            foreach chicken: item:
                if is_food_chicken(chicken) and not visited(chicken):
                    observe(chicken, "Look for chicken in the kitchen")

behavior slice_chicken(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        achieve cut(chicken)

behavior __goal__():
    body:
        find_cutting_board()
        find_chicken()
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and close_char(char, cutting_board)
        
        bind chicken: item where:
            is_food_chicken(chicken) and close_char(char, chicken)
        
        slice_chicken(chicken, cutting_board)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Unknown variable: kitchen_counter; available variables: [Variable<cutting_board: item>].
--------------------------------------------------------------------------------
Goal:  
def has_cutting_board():
    # Determine if there is a cutting board on the kitchen counter
    symbol has_board=exists cutting_board: item : is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
    return has_board

behavior setup_cutting():
    body:
        assert_hold close_char(char, kitchen_counter) # Ensure the character is close to the kitchen counter
        if not has_cutting_board():
            observe(kitchen_counter, "Check for any cutting board on the counter")
            # If cutting board is not observed, check the counter again for it

        if has_cutting_board():
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
            assert on(cutting_board, kitchen_counter)
            # Ensure cutting board is on the kitchen counter

behavior cut_chicken(chicken: item):
    body:
        assert is_food_chicken(chicken)
        achieve cut(chicken)
        # Achieve the state where the chicken is cut

behavior __goal__():
    body:
        symbol kitchen = exists k: item : is_kitchen(k)
        assert kitchen # Verify there is a kitchen present
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and inside(kitchen_counter, kitchen)
        
        bind chicken: item where:
            is_food_chicken(chicken) and close(chicken, kitchen_counter)
        # Choose a piece of chicken that is near the kitchen counter

        setup_cutting()
        # Prepare the cutting space

        cut_chicken(chicken)
        # Execute cutting of the chicken

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Error during applying inside[observation, state](x: item, y: item).
  Arguments: V::kitchen_counter, V::kitchen
Argument #1 type does not match: expect item, got bool.
--------------------------------------------------------------------------------
Goal:  
def has_cutting_board(kitchen_counter: item):
    # Determine if there is a cutting board on the kitchen counter
    symbol has_board = exists cutting_board: item : is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
    return has_board

behavior setup_cutting(kitchen_counter: item):
    body:
        assert_hold close_char(char, kitchen_counter) # Ensure the character is close to the kitchen counter
        if not has_cutting_board(kitchen_counter):
            observe(kitchen_counter, "Check for any cutting board on the counter")
            # If cutting board is not observed, check the counter again for it

        if has_cutting_board(kitchen_counter):
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
            assert on(cutting_board, kitchen_counter)
            # Ensure cutting board is on the kitchen counter

behavior cut_chicken(chicken: item):
    body:
        assert is_food_chicken(chicken)
        achieve cut(chicken)
        # Achieve the state where the chicken is cut

behavior __goal__():
    body:
        symbol kitchen = exists k: item : is_kitchen(k)
        assert kitchen # Verify there is a kitchen present
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and inside(kitchen_counter, kitchen)
        
        bind chicken: item where:
            is_food_chicken(chicken) and close(chicken, kitchen_counter)
        # Choose a piece of chicken that is near the kitchen counter

        setup_cutting(kitchen_counter)
        # Prepare the cutting space

        cut_chicken(chicken)
        # Execute cutting of the chicken

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Behavior get_water already exists.
--------------------------------------------------------------------------------
Goal:  
behavior get_water(cup:item, sink:item):
    body:
        assert grabbable(cup)
        achieve has_water(cup)

behavior freeze_water(cup:item, freezer:item):
    body:
        achieve inside(cup, freezer)
        achieve closed(freezer)
        # Ensure the freezer door is closed after placing the cup inside

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a grabbable cup that can hold water
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink to get water from
        
        bind freezer: item where:
            is_freezer(freezer)
        # Select a freezer to freeze the cup of water
        
        get_water(cup, sink)
        freeze_water(cup, freezer) 

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2064_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Number of arguments does not match the number of types: 2 vs 1. Args: (VariableExpression<V::cup>, VariableExpression<V::sink>), Types: (ObjectType<item>,)
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a grabbable cup that can hold water

        bind sink: item where:
            is_sink(sink)
        # Select a sink to get water from

        bind freezer: item where:
            is_freezer(freezer)
        # Select a freezer to freeze the cup of water

        get_water(cup, sink)
        freeze_water(cup, freezer)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'is_on') at line 5629, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
behavior achieve_has_water(cup:item):
    body:
        achieve has_water(cup)

behavior achieve_inside_freezer(cup:item, freezer:item):
    body:
        achieve inside(cup, freezer)

behavior achieve_frozen(cup:item, freezer:item):
    body:
        achieve is_off(freezer)
        achieve once is_on(freezer)
        achieve_once closed(freezer)
        # Assuming freezing is managed by switching the freezer on and closing the door

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
            
        bind freezer: item where:
            is_freezer(freezer)
        # Select a freezer

        achieve_has_water(cup)
        achieve_inside_freezer(cup, freezer)
        achieve_frozen(cup, freezer)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2064_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function achieve_has_water not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal: 
behavior achieve_frozen(cup:item, freezer:item):
    body:
        achieve is_off(freezer)
        achieve_once is_on(freezer)
        achieve_once closed(freezer)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)

        bind freezer: item where:
            is_freezer(freezer)

        achieve_has_water(cup)
        achieve_inside_freezer(cup, freezer)
        achieve_frozen(cup, freezer)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cup_2063_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'item') at line 5911, column 23.
Expected one of: 
	* COLON

--------------------------------------------------------------------------------
Goal:  
behavior observe_cat(cat:item):
    body:
        observe(cat,"check if its on the table")

behavior place_cat_on_table(cat:item, table:item):
    body:
        achieve on(cat, table)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        
        if not exists item: item where:
            on(cat, table):
            observe_cat(cat)
        
        place_cat_on_table(cat, table)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'item') at line 5913, column 23.
Expected one of: 
	* COLON

--------------------------------------------------------------------------------
Goal:  
behavior observe_cat(cat:item):
    body:
        observe(cat, "check if its on the table")

behavior place_cat_on_table(cat:item, table:item):
    body:
        achieve on(cat, table)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        bind home_office: item where:
            is_home_office(home_office)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        
        if not exists item: item where:
            on(cat, table):
            observe_cat(cat)
        
        place_cat_on_table(cat, table)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'r') at line 5620, column 43.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def has_visited_all_rooms():
    # Check if all rooms in the house have been visited
    symbol all_rooms_visited = not exists r: item : is_room(r) and not visited(r)
    return all_rooms_visited

behavior identify_room(r:item):
    body:
        observe(r, "Determine if this is a room")

behavior __goal__():
    body:
        if not has_visited_all_rooms():
            # If not all rooms have been visited, proceed to identify them
            foreach r: item:
                if is_room(r) and not visited(r):
                    identify_room(r)

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_2004_around_table_226(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'r') at line 5620, column 43.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def has_visited_all_rooms():
    # Check if all rooms in the house have been visited
    symbol all_rooms_visited = not exists r: item : is_room(r) and not visited(r)
    return all_rooms_visited

behavior identify_room(r:item):
    body:
        observe(r, "Determine if this is a room")

behavior __goal__():
    body:
        if not has_visited_all_rooms():
            # If not all rooms have been visited, proceed to identify them
            foreach r: item:
                if is_room(r) and not visited(r):
                    identify_room(r)

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_106_around_table_226(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'room') at line 5629, column 47.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

--------------------------------------------------------------------------------
Goal:  
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles item

        bind table: item where:
            is_coffee_table(table) and exists room: item : is_home_office(room) and inside(table, room)
        # Select the coffee table in the home office

        place_spectacles_on_table(spectacles, table)
        # Place the spectacles on the coffee table in the home office

--------------------------------------------------------------------------------
Exploration: 
behavior find_spectacles_2082_around_bookshelf_101(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(spectacles,bookshelf_instance)
        else:
            exp(spectacles,bookshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,bookshelf_instance]=True
        close[bookshelf_instance,spectacles]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book to be placed

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office
        
        place_on_coffee_table(book, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_donut_2019_around_fridge_289(food_donut:item):
    goal: not unknown(food_donut)
    body:
        assert is_food_donut(food_donut)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_donut,fridge_instance)
        else:
            exp(food_donut,fridge_instance)
    eff:
        unknown[food_donut]=False
        close[food_donut,fridge_instance]=True
        close[fridge_instance,food_donut]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
--------------------------------------------------------------------------------
Goal:  
behavior crack_and_scramble_egg(egg:item, fryingpan:item, stove:item):
    body:
        achieve_once inhand(egg) # Hold the egg only until it is cracked into the pan
        achieve inside(egg, fryingpan) # Crack the egg into the frying pan
        achieve is_on(stove) # Ensure the stove is turned on

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to crack and scramble
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select a frying pan that is on the stove

        bind stove: item where:
            is_stove(stove)
        # Select the stove to use

        crack_and_scramble_egg(egg, fryingpan, stove)


--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
--------------------------------------------------------------------------------
Goal:  
behavior crack_and_scramble_egg(egg:item, fryingpan:item, stove:item):
    body:
        achieve_once inhand(egg) # Hold the egg only until it is cracked into the pan
        achieve inside(egg, fryingpan) # Crack the egg into the frying pan
        achieve is_on(stove) # Ensure the stove is turned on

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to crack and scramble
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select a frying pan that is on the stove

        bind stove: item where:
            is_stove(stove)
        # Select the stove to use

        crack_and_scramble_egg(egg, fryingpan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<frying_pan: item>].
--------------------------------------------------------------------------------
Goal:  
behavior crack_and_scramble_egg(egg:item, frying_pan:item, stove:item):
    body:
        achieve inside(egg, frying_pan)
        # Ensure the egg is inside the frying pan

        achieve is_on(stove)
        # Make sure the stove is on

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and scrambled

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, stove)
        # Select the frying pan that is on the stove

        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        crack_and_scramble_egg(egg, frying_pan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<frying_pan: item>].
--------------------------------------------------------------------------------
Goal:  
behavior crack_and_scramble_egg(egg:item, frying_pan:item, stove:item):
    body:
        achieve inside(egg, frying_pan)
        # Ensure the egg is inside the frying pan

        achieve is_on(stove)
        # Make sure the stove is on

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and scrambled

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, stove)
        # Select the frying pan that is on the stove

        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        crack_and_scramble_egg(egg, frying_pan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Invalid comparison: id(V::o) vs V::thing
--------------------------------------------------------------------------------
Goal:  
def has_egg(thing:item):
    # Function to check if the item is an egg
    symbol egg=exists o: item : is_food_egg(o) and id[o]==thing
    return egg

behavior crack_and_scramble_egg(egg:item, pan:item, stove:item):
    body:
        achieve inside(egg, pan)
        # Add cracked egg into the frying pan
        achieve is_on(stove)
        # Ensure the stove is on for scrambling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and scrambled

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2065)
        # Select the frying pan that has been placed on the stove with ID 2065

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        crack_and_scramble_egg(egg, pan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pan: item>].
--------------------------------------------------------------------------------
Goal:  
behavior crack_and_scramble_egg(egg:item, pan:item, stove:item):
    body:
        achieve inside(egg, pan) # Move to the cracking stage
        achieve is_on(stove) # Ensure stove is on for scrambling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and scrambled

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2065)
        # Select the frying pan that has been placed on the stove with ID 2065

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        crack_and_scramble_egg(egg, pan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal:  
behavior add_vegetables_to_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        # Select the pot that is on stove_2065

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not achieved(inside(vegetable, pot)):
                add_vegetables_to_pot(vegetable, pot)
        # Add each identified vegetable to the pot

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        turn_on_stove(stove)
        # Turn on the stove to boil the vegetables

--------------------------------------------------------------------------------
Exploration: 
behavior find_headset_2076_around_closetdrawer_150(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(headset,closetdrawer_instance)
        else:
            exp(headset,closetdrawer_instance)
    eff:
        unknown[headset]=False
        close[headset,closetdrawer_instance]=True
        close[closetdrawer_instance,headset]=True
    

behavior find_bowl_2071_around_tray_296(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==296
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(bowl,tray_instance)
        else:
            exp(bowl,tray_instance)
    eff:
        unknown[bowl]=False
        close[bowl,tray_instance]=True
        close[tray_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal:  
behavior add_vegetables_to_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot that is on stove_2065

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not achieved(inside(vegetable, pot)):
                add_vegetables_to_pot(vegetable, pot)
        # Add each identified vegetable to the pot

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        turn_on_stove(stove)
        # Turn on the stove to boil the vegetables

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2080_around_tray_296(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==296
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(fork,tray_instance)
        else:
            exp(fork,tray_instance)
    eff:
        unknown[fork]=False
        close[fork,tray_instance]=True
        close[tray_instance,fork]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Unknown variable: tvstand; available variables: [Variable<remote_control: item>].
--------------------------------------------------------------------------------
Goal:  
def is_close_to_tvstand(remote_control: item):
    # Check if the remote control is close to the TV stand
    symbol close_to_tvstand = close(remote_control, tvstand)
    return close_to_tvstand

behavior find_remote(tvstand:item):
    body:
        foreach remote_control: item:
            if is_remote_control(remote_control) and not visited(remote_control):
                observe(remote_control, "Check if the remote control is close to the tv stand")

behavior turn_on_dvd_player_with_remote(dvd_player:item, remote_control:item):
    body:
        assert plugged(dvd_player)
        # Ensure the DVD player is plugged in before using the remote
        achieve is_on(dvd_player)
        # Turn on the DVD player

behavior __goal__():
    body:
        bind tvstand: item where:
            is_tvstand(tvstand) and id[tvstand] == 353
        # Select the TV stand with ID 353

        bind dvd_player: item where:
            is_dvd_player(dvd_player) and id[dvd_player] == 2061
        # Select the DVD player with ID 2061

        if exists remote_control: item : is_remote_control(remote_control) and is_close_to_tvstand(remote_control):
            bind remote_control: item where:
                is_remote_control(remote_control) and is_close_to_tvstand(remote_control)
            turn_on_dvd_player_with_remote(dvd_player, remote_control)
        else:
            find_remote(tvstand)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cd_player_2060_around_bookshelf_101(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(cd_player,bookshelf_instance)
        else:
            exp(cd_player,bookshelf_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,bookshelf_instance]=True
        close[bookshelf_instance,cd_player]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5706, column 9.
Expected one of: 
	* EQUAL
	* PERCENT
	* STAR
	* __ANON_5
	* FLOORDIV
	* SLASH
	* GREATER_EQ
	* __ANON_1
	* __ANON_8
	* COMMA
	* __ANON_3
	* MINUS
	* PLUS
	* __ANON_0
	* CIRCUMFLEX
	* NOT_EQ
	* LESSTHAN
	* RSHIFT
	* AT
	* SEMICOLON
	* __ANON_2
	* __ANON_4
	* AMPERSAND
	* AND
	* LSHIFT
	* IF
	* MORETHAN
	* OR
	* __ANON_6
	* LESS_EQ
	* __ANON_7
	* VBAR
	* DOUBLE_EQUAL
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def operate_dvd_player(dvd_player: item, remote_control: item):
    body:
        achieve is_on(dvd_player)

behavior __goal__():
    body:
        bind dvd_player: item where:
            is_dvd_player(dvd_player)
        bind remote_control: item where:
            is_remote_control(remote_control)
        operate_dvd_player(dvd_player, remote_control)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cd_player_2060_around_bookshelf_101(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(cd_player,bookshelf_instance)
        else:
            exp(cd_player,bookshelf_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,bookshelf_instance]=True
        close[bookshelf_instance,cd_player]=True
    

behavior find_cd_2075_around_closetdrawer_154(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cd,closetdrawer_instance)
        else:
            exp(cd,closetdrawer_instance)
    eff:
        unknown[cd]=False
        close[cd,closetdrawer_instance]=True
        close[closetdrawer_instance,cd]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable pot already exists.
--------------------------------------------------------------------------------
Goal:  
def has_boiling_water(pot:item):
    # Function to check if there is boiling water in the pot
    symbol boiling_water=exists pot: item : has_water(pot) and is_on(pot)
    return boiling_water

behavior boil_water(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve is_on(pot)
        # Ensure the pot is on to boil the water

behavior boil_egg(egg:item, pot:item):
    body:
        achieve inside(egg, pot)
        # Ensure the egg is placed inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling water and egg

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be boiled

        if not has_boiling_water(pot):
            boil_water(pot)
            # Boil water in the pot if not already boiling

        boil_egg(egg, pot)
        # Boil the egg in the pot with boiling water

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable pot already exists.
--------------------------------------------------------------------------------
Goal:  
def has_boiling_water(pot:item):
    # Function to check if there is boiling water in the pot
    symbol boiling_water=exists pot: item : has_water(pot) and is_on(pot)
    return boiling_water

behavior boil_water(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve is_on(pot)
        # Ensure the pot is on to boil the water

behavior boil_egg(egg:item, pot:item):
    body:
        achieve inside(egg, pot)
        # Ensure the egg is placed inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling water and egg

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be boiled

        if not has_boiling_water(pot):
            boil_water(pot)
            # Boil water in the pot if not already boiling

        boil_egg(egg, pot)
        # Boil the egg in the pot with boiling water

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'stove') at line 5643, column 58.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def has_egg_in_pot(pot:item):
    # Function to check if there is an egg in the pot
    symbol has_egg=exists egg: item : is_food_egg(egg) and inside(egg, pot)
    return has_egg

def can_boiled(pot:item):
    # Function to check if there is water in pot and pot is on stove
    symbol has_water_and_stove=has_water(pot) and exists stove:item : is_stove(stove) and on(pot, stove)
    return has_water_and_stove

behavior start_boiling(pot:item, stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling the egg
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if exists pot: item : is_pot(pot) and has_egg_in_pot(pot) and can_boiled(pot):
            achieve on(pot, stove)
            start_boiling(pot, stove)
        else:
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Check if there is an egg and water in the pot and if it is on stove")

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'stove') at line 5643, column 58.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def has_egg_in_pot(pot:item):
    # Function to check if there is an egg in the pot
    symbol has_egg=exists egg: item : is_food_egg(egg) and inside(egg, pot)
    return has_egg

def can_boiled(pot:item):
    # Function to check if there is water in pot and pot is on stove
    symbol has_water_and_stove=has_water(pot) and exists stove:item : is_stove(stove) and on(pot, stove)
    return has_water_and_stove

behavior start_boiling(pot:item, stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling the egg
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if exists pot: item : is_pot(pot) and has_egg_in_pot(pot) and can_boiled(pot):
            start_boiling(pot, stove)
        else:
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Check if there is an egg and water in the pot and if it is on stove")

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: bathroom; available variables: [Variable<window: item>].
--------------------------------------------------------------------------------
Goal:  
behavior open_bathroom_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and inside(window, bathroom)
        open_bathroom_window(window)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Variable window already exists.
--------------------------------------------------------------------------------
Goal:  
behavior open_bathroom_window(window:item, bath:item):
    body:
        bind window: item where:
            is_window(window) and inside(window, bath) and is_bathroom(bath)
        achieve open(window)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        bind window: item where:
            is_window(window) and inside(window, bathroom)
        open_bathroom_window(window, bathroom)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: milk; available variables: [Variable<cup: item>].
--------------------------------------------------------------------------------
Goal:  
def is_in_home_office(table: item):
    # Function to check if a table is in the home office
    symbol is_home_office = exists room: item : is_home_office(room) and inside(table, room)
    return is_home_office

behavior fill_cup_with_hot_milk(cup: item):
    body:
        achieve clean(cup)
        achieve inside(milk, cup)
        # Assume milk is an instance of milk
        achieve is_on(stove)
        # To heat the milk

behavior place_on_table(cup: item, table: item):
    body:
        achieve on(cup, table)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup to fill it with hot milk and place
        
        bind table: item where:
            is_coffee_table(table) and is_in_home_office(table)
        # Select the coffee table in the home office
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove for heating the milk
        
        fill_cup_with_hot_milk(cup)
        
        place_on_table(cup, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Variable knife already exists.
--------------------------------------------------------------------------------
Goal:  
def has_knife():
    # Check if there is a knife available
    symbol knife_exists=exists knife: item : is_knife(knife)
    return knife_exists

def is_toaster_available():
    # Check if there is a toaster in the scene
    symbol toaster_exists=exists toaster: item : is_toaster(toaster)
    return toaster_exists

behavior slice_bread(bread:item, knife:item):
    body:
        bind knife: item where:
            is_knife(knife)
        achieve cut(bread)
        # Ensure the bread is sliced with a knife

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve plugged(toaster) 
        # Ensure the toaster is plugged in

        achieve is_on(toaster)
        # Turn on the toaster

        achieve inside(bread, toaster)
        # Put the bread inside the toaster

        # The bread will be toasted inside the toaster

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread to be sliced and toasted
        
        if has_knife():
            bind knife: item where:
                is_knife(knife)
            slice_bread(bread, knife)
        
        if is_toaster_available():
            bind toaster: item where:
                is_toaster(toaster)
            toast_bread(bread, toaster)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_bread_2012_around_fridge_289(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

################################################################################

Error: Unexpected token Token('BASIC_TYPENAME', 'yaml') at line 5635, column 1.
Expected one of: 
	* BEHAVIOR
	* IMPORT
	* UNDIRECTED_GENERATOR
	* CONTROLLER
	* DEF
	* INIT
	* TYPEDEF
	* GENERATOR
	* GOAL
	* _PRAGMA_KEYWORD
	* INCLUDE
	* OBJECTS
	* DOMAIN
	* FEATURE
	* $END
	* _NEWLINE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

--------------------------------------------------------------------------------
Goal: yaml
def has_ironing_board(location:item):
    # Determine whether there is an ironing board at the specified location
    symbol has_ironing_board=exists board: item : is_ironing_board(board) and close(board, location)
    return has_ironing_board

behavior iron_shirt(shirt:item, iron:item, board:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)
        achieve on(shirt, board)
        # Ensure the shirt is on the ironing board
        # Ensure the iron remains plugged in and turned on

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        if exists board: item : is_ironing_board(board) and has_ironing_board(board):
            # If the ironing boards location is already known
            bind board: item where:
                is_ironing_board(board) and has_ironing_board(board)
            # Select the ironing board
            iron_shirt(shirt, iron, board)
            # Iron the shirt on the board
        else:
            # Look for an ironing board that hasnt been visited yet
            foreach board: item:
                if is_ironing_board(board) and not visited(board):
                    observe(board, "Check if the board is suitable for ironing")
                    # Check the unvisited ironing board for suitability

--------------------------------------------------------------------------------
Exploration: 
behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_154(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

################################################################################

Error: Unexpected token Token('BASIC_TYPENAME', 'yaml') at line 5653, column 1.
Expected one of: 
	* BEHAVIOR
	* IMPORT
	* UNDIRECTED_GENERATOR
	* CONTROLLER
	* DEF
	* INIT
	* TYPEDEF
	* GENERATOR
	* GOAL
	* _PRAGMA_KEYWORD
	* INCLUDE
	* OBJECTS
	* DOMAIN
	* FEATURE
	* $END
	* _NEWLINE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

--------------------------------------------------------------------------------
Goal: yaml
def has_ironing_board(location:item):
    # Determine whether there is an ironing board at the specified location
    symbol has_ironing_board=exists board: item : is_ironing_board(board) and close(board, location)
    return has_ironing_board

behavior iron_shirt(shirt:item, iron:item, board:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)
        achieve on(shirt, board)
        # Ensure the shirt is on the ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        if exists board: item : is_ironing_board(board) and has_ironing_board(board):
            # If the ironing boards location is already known
            bind board: item where:
                is_ironing_board(board) and has_ironing_board(board)
            # Select the ironing board
            iron_shirt(shirt, iron, board)
            # Iron the shirt on the board
        else:
            # Look for an ironing board that hasnt been visited yet
            foreach board: item:
                if is_ironing_board(board) and not visited(board):
                    observe(board, "Check if the board is suitable for ironing")
                    # Check the unvisited ironing board for suitability

--------------------------------------------------------------------------------
Exploration: 
behavior find_basket_for_clothes_2006_around_washing_machine_2007(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(basket_for_clothes,washing_machine_instance)
        else:
            exp(basket_for_clothes,washing_machine_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,washing_machine_instance]=True
        close[washing_machine_instance,basket_for_clothes]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_154(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable coffee_maker already exists.
--------------------------------------------------------------------------------
Goal:  
def is_coffee_maker_on(coffee_maker: item):
    # Function to check if the coffee maker is on
    symbol coffee_maker_on=exists coffee_maker: item: is_coffe_maker(coffee_maker) and is_on(coffee_maker)
    return coffee_maker_on

behavior brew_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
            
        if not is_coffee_maker_on(coffee_maker):
            brew_coffee(coffee_maker)
        # If the coffee maker is not on, turn it on to brew coffee

--------------------------------------------------------------------------------
Exploration: 
behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2064_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

################################################################################

Error: Unexpected token Token('BIND', 'bind') at line 5618, column 1.
Expected one of: 
	* BEHAVIOR
	* IMPORT
	* UNDIRECTED_GENERATOR
	* CONTROLLER
	* DEF
	* INIT
	* TYPEDEF
	* GENERATOR
	* GOAL
	* _PRAGMA_KEYWORD
	* INCLUDE
	* OBJECTS
	* DOMAIN
	* FEATURE
	* $END
	* _NEWLINE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n \n')]

--------------------------------------------------------------------------------
Goal:  
bind vacuum_cleaner: item where:
    is_vacuum_cleaner(vacuum_cleaner)

behavior push_vacuum_cleaner(vacuum_cleaner:item):
    body:
        push(vacuum_cleaner)

behavior pull_vacuum_cleaner(vacuum_cleaner:item):
    body:
        pull(vacuum_cleaner)

behavior __goal__():
    body:
        achieve close_char(char, vacuum_cleaner)
        # Approach the vacuum cleaner to operate it
        push_vacuum_cleaner(vacuum_cleaner)
        pull_vacuum_cleaner(vacuum_cleaner)

--------------------------------------------------------------------------------
Exploration: 
behavior find_vacuum_cleaner_2070_around_table_226(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(vacuum_cleaner,table_instance)
        else:
            exp(vacuum_cleaner,table_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,table_instance]=True
        close[table_instance,vacuum_cleaner]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior find_book_and_place_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Place the book on the table in the home office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book that needs to be placed

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        find_book_and_place_on_table(book, table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_book_2067_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: food_chicken_2017; available variables: [Variable<tray: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_tray_in_oven(tray: item, oven: item):
    body:
        achieve inside(tray, oven)
        # Move the tray inside the oven

behavior close_oven_door(oven: item):
    body:
        achieve closed(oven)
        # Close the oven door

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and (on(food_chicken_2017, tray) or on(food_onion_2032, tray))
        # Select the tray with chicken and onion
        
        bind oven: item where:
            is_oven(oven)
        # Select the oven to roast the chicken and onion

        place_tray_in_oven(tray, oven)
        close_oven_door(oven)

--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_rack_34_around_towel_rack_34(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel_rack,towel_rack_instance)
        else:
            exp(towel_rack,towel_rack_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,towel_rack_instance]=True
        close[towel_rack_instance,towel_rack]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Error during applying close[observation, state](x: item, y: item).
  Arguments: O::char, V::cat
Argument #0 type does not match: expect item, got character.
--------------------------------------------------------------------------------
Goal:  
behavior dry_cat_with_towel(cat: item, towel: item):
    body:
        achieve_once inhand(towel)
        # Temporarily hold the towel to dry the cat
        achieve close(char, cat)
        wipe(cat)
        # Wipe the cat dry with the towel

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and id[cat] == 2055
        # Select the cat with ID 2055

        bind towel: item where:
            is_towel(towel)
        # Select a towel

        dry_cat_with_towel(cat, towel)

--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2056_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable clothes already exists.
--------------------------------------------------------------------------------
Goal:  
def ironable_clothes(clothes:item):
    # Function to check if the clothes need ironing
    symbol needs_ironing=exists clothes: item : (is_clothes_shirt(clothes) or is_clothes_skirt(clothes)) and (id[clothes]==2086 or id[clothes]==2088) and inside(clothes, bathroom)
    return needs_ironing

def has_ironing_board(bathroom:item):
    # Function to check if there is any ironing board in the bathroom
    symbol has_board=exists board: item : is_ironing_board(board) and inside(board, bathroom)
    return has_board
    
behavior iron_clothes(ironing_board: item, iron: item, clothes_shirt: item, clothes_skirt: item):
    body:
        achieve plugged(iron) # Ensure iron is plugged in
        achieve is_on(iron) # Turn on the iron

        achieve on(clothes_shirt, ironing_board)
        # Make sure the shirt is on the ironing board
        achieve on(clothes_skirt, ironing_board)
        # Make sure the skirt is on the ironing board

behavior __goal__():
    body:
        bind basket_for_clothes: item where:
            is_basket_for_clothes(basket_for_clothes) and id[basket_for_clothes]==2006
        # Select the basket containing clothes that need ironing
        
        bind bathroom: item where:
            is_bathroom(bathroom) and inside(basket_for_clothes, bathroom)
        # Select the bathroom that contains the clothes basket
        
        if needs_ironing(bathroom):
            bind ironing_board: item where:
                is_ironing_board(ironing_board) and inside(ironing_board, bathroom)
            # Select the ironing board within the bathroom
                
            bind iron: item where:
                is_iron(iron)
            # Select an iron

            bind clothes_shirt: item where:
                is_clothes_shirt(clothes_shirt) and id[clothes_shirt]==2086 and inside(clothes_shirt, basket_for_clothes)
            # Select the shirt that needs ironing
            
            bind clothes_skirt: item where:
                is_clothes_skirt(clothes_skirt) and id[clothes_skirt]==2088 and inside(clothes_skirt, basket_for_clothes)
            # Select the skirt that needs ironing
            
            iron_clothes(ironing_board, iron, clothes_shirt, clothes_skirt)
            # Execute the ironing process

--------------------------------------------------------------------------------
Exploration: 
behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable clothes already exists.
--------------------------------------------------------------------------------
Goal:  
def needs_ironing(clothes:item):
    # Function to check if the clothes need ironing
    symbol needs_ironing=exists clothes: item : (is_clothes_shirt(clothes) or is_clothes_skirt(clothes)) and (id[clothes]==2086 or id[clothes]==2088) and inside(clothes, bathroom)
    return needs_ironing

behavior iron_clothes(ironing_board: item, iron: item, clothes_shirt: item, clothes_skirt: item):
    body:
        achieve plugged(iron) # Ensure iron is plugged in
        achieve is_on(iron) # Turn on the iron

        achieve on(clothes_shirt, ironing_board)
        # Make sure the shirt is on the ironing board
        achieve on(clothes_skirt, ironing_board)
        # Make sure the skirt is on the ironing board

behavior __goal__():
    body:
        bind basket_for_clothes: item where:
            is_basket_for_clothes(basket_for_clothes) and id[basket_for_clothes]==2006
        # Select the basket containing clothes that need ironing
        
        bind bathroom: item where:
            is_bathroom(bathroom) and inside(basket_for_clothes, bathroom)
        # Select the bathroom that contains the clothes basket
        
        if needs_ironing(bathroom):
            bind ironing_board: item where:
                is_ironing_board(ironing_board) and inside(ironing_board, bathroom)
            # Select the ironing board within the bathroom
                
            bind iron: item where:
                is_iron(iron)
            # Select an iron

            bind clothes_shirt: item where:
                is_clothes_shirt(clothes_shirt) and id[clothes_shirt]==2086 and inside(clothes_shirt, basket_for_clothes)
            # Select the shirt that needs ironing
            
            bind clothes_skirt: item where:
                is_clothes_skirt(clothes_skirt) and id[clothes_skirt]==2088 and inside(clothes_skirt, basket_for_clothes)
            # Select the skirt that needs ironing
            
            iron_clothes(ironing_board, iron, clothes_shirt, clothes_skirt)
            # Execute the ironing process

--------------------------------------------------------------------------------
Exploration: 
behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: Unexpected token Token('IN', 'in') at line 5954, column 28.
Expected one of: 
	* COLON
	* COMMA
	* LSQB
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

--------------------------------------------------------------------------------
Goal: behavior prepare_ironing(items: list, iron: item, ironing_board: item):
    body:
        foreach item: item in items:
            # Ensure each item is placed on the ironing board
            achieve on(item, ironing_board)
        achieve plugged(iron)
        # Plug in the iron for use
        achieve is_on(iron)
        # Turn on the iron to start ironing

behavior iron_clothes(items: list, ironing_board: item):
    body:
        foreach item: item in items:
            # Iron each item ensuring they are on the ironing board
            achieve on(item, ironing_board)
            assert clean(item)

behavior store_ironed_clothes(items: list, basket: item):
    body:
        foreach item: item in items:
            # Ensure each ironed item is stored in the basket
            achieve inside(item, basket)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt to be ironed
        
        bind basket_for_clothes: item where:
            is_basket_for_clothes(basket_for_clothes)

        prepare_ironing([shirt, skirt], iron, ironing_board)
        iron_clothes([shirt, skirt], ironing_board)
        store_ironed_clothes([shirt, skirt], basket_for_clothes)
--------------------------------------------------------------------------------
Exploration: 
behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: Unexpected token Token('IN', 'in') at line 5955, column 28.
Expected one of: 
	* COLON
	* COMMA
	* LSQB
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

--------------------------------------------------------------------------------
Goal:  
behavior prepare_ironing(items: list, iron: item, ironing_board: item):
    body:
        foreach item: item in items:
            # Ensure each item is placed on the ironing board
            achieve on(item, ironing_board)
        achieve plugged(iron)
        # Plug in the iron for use
        achieve is_on(iron)
        # Turn on the iron to start ironing

behavior iron_clothes(items: list, ironing_board: item):
    body:
        foreach item: item in items:
            # Iron each item ensuring they are on the ironing board
            achieve on(item, ironing_board)
            assert clean(item)

behavior store_ironed_clothes(items: list, basket: item):
    body:
        foreach item: item in items:
            # Ensure each ironed item is stored in the basket
            achieve inside(item, basket)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt to be ironed

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select the skirt to be ironed
        
        bind basket_for_clothes: item where:
            is_basket_for_clothes(basket_for_clothes)

        prepare_ironing([shirt, skirt], iron, ironing_board)
        iron_clothes([shirt, skirt], ironing_board)
        store_ironed_clothes([shirt, skirt], basket_for_clothes)

--------------------------------------------------------------------------------
Exploration: 
behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: ironing_board; available variables: [Variable<shirt: item>].
--------------------------------------------------------------------------------
Goal:  
behavior iron_clothes(shirt:item, skirt:item, iron:item, ironing_board:item):
    body:
        achieve on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board
        
        achieve is_on(iron) and plugged(iron)
        # Ensure the iron is on and plugged in
        
        # Begin ironing the shirt
        touch(iron)
        
        achieve on(skirt, ironing_board)
        # Ensure the skirt is on the ironing board after the shirt is ironed
        
        # Continue ironing the skirt
        touch(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board)
        # Bind the shirt that is on the ironing board
        
        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, ironing_board)
        # Bind the skirt that is on the ironing board
            
        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Bind the iron that is plugged in and on
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Bind the ironing board
        
        iron_clothes(shirt, skirt, iron, ironing_board)
        # Execute the behavior to iron the clothes

--------------------------------------------------------------------------------
Exploration: 
behavior find_remote_control_2052_around_couch_352(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(remote_control,couch_instance)
        else:
            exp(remote_control,couch_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,couch_instance]=True
        close[couch_instance,remote_control]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_150(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_clothes_jacket_2047_around_hanger_109(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==109
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_jacket,hanger_instance)
        else:
            exp(clothes_jacket,hanger_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,hanger_instance]=True
        close[hanger_instance,clothes_jacket]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: ironing_board; available variables: [Variable<shirt: item>].
--------------------------------------------------------------------------------
Goal: behavior iron_clothes(shirt:item, skirt:item, iron:item, ironing_board:item):
    body:
        achieve on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board

        achieve is_on(iron) and plugged(iron)
        # Ensure the iron is on and plugged in

        # Begin ironing the shirt
        touch(iron)

        achieve on(skirt, ironing_board)
        # Ensure the skirt is on the ironing board after the shirt is ironed

        # Continue ironing the skirt
        touch(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board)
        # Bind the shirt that is on the ironing board

        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, ironing_board)
        # Bind the skirt that is on the ironing board

        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Bind the iron that is plugged in and on

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Bind the ironing board

        iron_clothes(shirt, skirt, iron, ironing_board)
        # Execute the behavior to iron the clothes
--------------------------------------------------------------------------------
Exploration: 
behavior find_hanger_367_around_closetdrawer_150(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<window: item>].
--------------------------------------------------------------------------------
Goal: behavior open_window_in_home_office(window:item, office:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Bind the window inside the home office

        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office

        open_window_in_home_office(window, home_office)
--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('WHERE', 'where') at line 5856, column 38.
Expected one of: 
	* COLON

--------------------------------------------------------------------------------
Goal:  
def is_shirt_found(shirt: item):
    # Function to check if clothes shirt has been found
    symbol found=visited(shirt)
    return found

behavior wash_shirt(shirt:item):
    body:
        wash(shirt)
        achieve clean(shirt)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[clothes_shirt]==2086
        # Select the shirt to be washed

        if not is_shirt_found(shirt):
            # If shirt has not been found yet, ensure it is located
            foreach location_n: item where:
                (is_closetdrawer(location_n) or is_hanger(location_n)) and not visited(location_n):
                    observe(location_n, "Check is clothes_shirt_2086 present")
        
        wash_shirt(shirt)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cleaning_solution_2073_around_washing_machine_2007(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_basket_for_clothes_2006_around_washing_machine_2007(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(basket_for_clothes,washing_machine_instance)
        else:
            exp(basket_for_clothes,washing_machine_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,washing_machine_instance]=True
        close[washing_machine_instance,basket_for_clothes]=True
    

behavior find_hanger_124_around_hanger_124(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==124
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(hanger,hanger_instance)
        else:
            exp(hanger,hanger_instance)
    eff:
        unknown[hanger]=False
        close[hanger,hanger_instance]=True
        close[hanger_instance,hanger]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_clothes_shirt_2086_around_hanger_130(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==130
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5803, column 9.
Expected one of: 
	* EQUAL
	* PERCENT
	* STAR
	* __ANON_5
	* FLOORDIV
	* SLASH
	* GREATER_EQ
	* __ANON_1
	* __ANON_8
	* COMMA
	* __ANON_3
	* MINUS
	* PLUS
	* __ANON_0
	* CIRCUMFLEX
	* NOT_EQ
	* LESSTHAN
	* RSHIFT
	* AT
	* SEMICOLON
	* __ANON_2
	* __ANON_4
	* AMPERSAND
	* AND
	* LSHIFT
	* IF
	* MORETHAN
	* OR
	* __ANON_6
	* LESS_EQ
	* __ANON_7
	* VBAR
	* DOUBLE_EQUAL
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def find_shirt(shirt:item):
    body:
        observe(shirt, "Locate the shirt and check if its dirty")

behavior wash_shirt_by_hand(shirt:item):
    body:
        wash(shirt)
        # Ensure the shirt is washed by hand

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086
        
        if not visited(shirt):
            # If the shirt has not been found or its state is unknown
            find_shirt(shirt)
        
        wash_shirt_by_hand(shirt)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cleaning_solution_2073_around_washing_machine_2007(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_clothes_shirt_2086_around_hanger_130(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==130
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
def find_shirt(shirt:item):
    # Function to locate the shirt and check if its dirty
    observe(shirt, "Locate the shirt and check if its dirty")

behavior wash_shirt_by_hand(shirt:item):
    body:
        wash(shirt)
        # Ensure the shirt is washed by hand

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086
        
        if not visited(shirt):
            # If the shirt has not been found or its state is unknown
            find_shirt(shirt)
        
        wash_shirt_by_hand(shirt)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cleaning_solution_2073_around_washing_machine_2007(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_clothes_shirt_2086_around_hanger_130(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==130
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
def verify_cup_has_water(cup:item):
    # Function to check if the cup has water
    observe(cup, "Verify whether the cup is filled with water after turning off the faucet")

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        assert is_cup(cup) and is_faucet(faucet)
        # Confirm the objects are indeed a cup and a faucet
        achieve close(cup, faucet)
        # Ensure the cup is close to the faucet for filling
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the cup
        achieve_once is_off(faucet)
        # Turn off the faucet after filling the cup
        verify_cup_has_water(cup)

behavior return_to_starting_point(start_point:item):
    body:
        achieve close_char(char, start_point)
        # Ensure the character returns to the starting point

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Select the specific cup with ID 2063

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select the faucet with ID 43

        fill_cup_with_water(cup, faucet)

        bind starting_point: item where:
            is_kitchen_counter(starting_point) and id[starting_point]==230
        # Select the starting point where the task began

        return_to_starting_point(starting_point)


--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2058_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_cleaning_solution_2073_around_closetdrawer_154(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cleaning_solution,closetdrawer_instance)
        else:
            exp(cleaning_solution,closetdrawer_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,closetdrawer_instance]=True
        close[closetdrawer_instance,cleaning_solution]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
def verify_cup_has_water(cup:item):
    # Function to check if the cup has water
    observe(cup, "Verify whether the cup is filled with water after turning off the faucet")

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        assert is_cup(cup) and is_faucet(faucet)
        # Confirm the objects are indeed a cup and a faucet
        achieve close(cup, faucet)
        # Ensure the cup is close to the faucet for filling
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the cup
        achieve_once is_off(faucet)
        # Turn off the faucet after filling the cup
        verify_cup_has_water(cup)

behavior return_to_starting_point(start_point:item):
    body:
        achieve close_char(char, start_point)
        # Ensure the character returns to the starting point

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Select the specific cup with ID 2063

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select the faucet with ID 43

        fill_cup_with_water(cup, faucet)

        bind starting_point: item where:
            is_kitchen_counter(starting_point) and id[starting_point]==230
        # Select the starting point where the task began

        return_to_starting_point(starting_point)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Variable faucet already exists.
--------------------------------------------------------------------------------
Goal:  
def has_filled_water(cup:item):
    # Function to check if the cup has been filled with water
    symbol cup_filled=has_water(cup)
    return cup_filled

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with water

        if has_filled_water(cup):
            bind faucet: item where:
                is_faucet(faucet)
            achieve is_off(faucet)
            # Ensure the faucet is turned off after the cup is filled

behavior return_to_start(char:character, start_location:item):
    body:
        achieve inside_char(char, start_location)
        # Ensure the character returns to the starting point

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Select cup 2063

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43
        # Select faucet 43

        fill_cup_with_water(cup, faucet)

        bind start_location: item where:
            is_kitchen_counter(start_location) and id[start_location]==230
        # Assuming the initial starting point is the kitchen_counter_230

        return_to_start(char, start_location)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function range not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior observe_and_verify_water(cup:item):
    body:
        foreach i in range(2):
            observe(cup, "Check if the cup contains water after switching off the faucet")
            # Verify if the cup contains water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063
        observe_and_verify_water(cup)
        # Observe and verify the cup contains water

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_onion_2032_around_cupboard_229(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Invalid foreach_in statement: C::tensor([0., 1.]) is not a list.
--------------------------------------------------------------------------------
Goal:  
behavior observe_and_verify_water(cup:item):
    body:
        foreach _ in [0, 1]:
            observe(cup, "Check if the cup contains water after switching off the faucet")
            # Verify if the cup contains water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063
        observe_and_verify_water(cup)
        # Observe and verify the cup contains water

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "function_definition":

Variable cup already exists.
--------------------------------------------------------------------------------
Goal:  
def has_faucet_water_confirmation(cup: item, faucet: item):
    # Function to confirm that the cup has water after using the faucet
    symbol water_confirmed = exists cup: item, faucet: item : is_faucet(faucet) and has_water(cup)
    return water_confirmed

behavior observe_cup_for_water(cup: item):
    body:
        observe(cup, "Check if the cup contains water after switching off the faucet")

behavior turn_off_faucet(faucet: item):
    body:
        achieve is_off(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43
        
        if not has_faucet_water_confirmation(cup, faucet):
            turn_off_faucet(faucet)
            observe_cup_for_water(cup)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_onion_2032_around_fridge_289(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: clothes_shirt_2086; available variables: [Variable<shirt: item>].
--------------------------------------------------------------------------------
Goal:  
behavior iron_shirt(shirt:item, iron:item):
    body:
        achieve clean(shirt)
        # Ensure the shirt is clean after ironing

behavior prepare_ironing_board(board:item, shirt:item):
    body:
        achieve on(shirt, board)
        # Place the shirt on the ironing board

behavior start_ironing_process(iron:item):
    body:
        achieve is_on(iron)
        # Turn on the iron for ironing the shirt

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind shirt: item where:
            is_clothes_shirt(shirt) and id[clothes_shirt_2086]
        # Select the shirt with ID 2086

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        prepare_ironing_board(ironing_board, shirt)
        # Place the shirt on the ironing board

        start_ironing_process(iron)
        # Turn on the iron

        iron_shirt(shirt, iron)
        # Iron the shirt to ensure it is clean

--------------------------------------------------------------------------------
Exploration: 
behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_154(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Variable ironing_board already exists.
--------------------------------------------------------------------------------
Goal:  
behavior iron_shirt_and_place_on_bed(shirt:item, bed:item, iron:item, ironing_board:item):
    body:
        achieve clean(shirt) 
        # Ensure the shirt is clean before ironing it

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board for the task

        achieve inside(shirt, ironing_board)
        # Place the shirt on the ironing board for ironing

        bind iron: item where:
            is_iron(iron)
        # Select an iron for ironing the shirt

        achieve plugged(iron) # Plug in the iron
        achieve is_on(iron)   # Turn on the iron

        achieve_once inhand(iron)   
        # Temporarily hold the iron for the task until complete

        observe(ironing_board, "Iron the shirt placed on the ironing board")

        achieve_on_char(iron, ironing_board)
        # Place the iron back on the ironing board after use

        achieve on(shirt, bed) 
        # Place the ironed shirt neatly on the bed

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select the shirt that is to be ironed

        bind bed: item where:
            is_bed(bed)
        # Select the bed for placing the shirt after ironing

        bind iron: item where:
            is_iron(iron)
        # Bind an iron for use in ironing the shirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board) 
        # Bind an ironing board for the shirt

        iron_shirt_and_place_on_bed(shirt, bed, iron, ironing_board)

--------------------------------------------------------------------------------
Exploration: 
behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_clothes_shirt_2086_around_hanger_109(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==109
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
def find_shirt_location(item: item):
    # Function to check the location of clothes_shirt_2086
    observe(item, "Check where clothes_shirt_2086 is located")

behavior iron_shirt_and_place_on_bed(shirt: item, ironing_board: item, bed: item):
    body:
        achieve plugged(ironing_board)
        achieve is_on(ironing_board)
        achieve clean(shirt)
        achieve on(shirt, drying_rack) 
        # Note: An intermediary state as the shirt needs to be hung
        achieve plugged(ironing_board)
        achieve open(clothes_wardrobe)
        achieve inside(shirt, clothes_wardrobe)
        # This is assumed as returning to wardrobe after ironing

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)

        bind clothes_shirt_2086: item where:
            is_clothes_shirt(clothes_shirt_2086)

        if not visited(clothes_shirt_2086):
            # Check if clothes_shirt_2086 has already been located
            find_shirt_location(clothes_shirt_2086)

        bind bed: item where:
            is_bed(bed)
            
        iron_shirt_and_place_on_bed(clothes_shirt_2086, ironing_board, bed)

--------------------------------------------------------------------------------
Exploration: 
behavior find_basket_for_clothes_2006_around_cupboard_229(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(basket_for_clothes,cupboard_instance)
        else:
            exp(basket_for_clothes,cupboard_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,cupboard_instance]=True
        close[cupboard_instance,basket_for_clothes]=True
    

behavior find_hanger_114_around_closetdrawer_150(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_clothes_shirt_2086_around_hanger_114(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==114
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function find_shirt_location not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior iron_shirt_and_place_on_bed(shirt: item, ironing_board: item, bed: item):
    body:
        achieve plugged(ironing_board)
        achieve is_on(ironing_board)
        achieve clean(shirt)
        achieve on(shirt, bed)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)

        bind clothes_shirt_2086: item where:
            is_clothes_shirt(clothes_shirt_2086)

        # Check if clothes_shirt_2086 has already been located
        if not visited(clothes_shirt_2086):
            find_shirt_location(clothes_shirt_2086)

        bind bed: item where:
            is_bed(bed)

        iron_shirt_and_place_on_bed(clothes_shirt_2086, ironing_board, bed)

--------------------------------------------------------------------------------
Exploration: 
behavior find_hanger_140_around_hanger_140(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==140
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(hanger,hanger_instance)
        else:
            exp(hanger,hanger_instance)
    eff:
        unknown[hanger]=False
        close[hanger,hanger_instance]=True
        close[hanger_instance,hanger]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_158(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Error during applying inside[observation, state](x: item, y: item).
  Arguments: O::char, V::bed
Argument #0 type does not match: expect item, got character.
--------------------------------------------------------------------------------
Goal:  
def has_water(bed:item):
    # Function to check if the shirt is on the bed
    symbol has_water=exists o: item : (is_bed(o)) and inside(char, bed)
    return has_water

behavior iron_shirt(shirt:item):
    body:
        achieve is_clothes(shirt)
        # Ensure the shirt is ironed

behavior place_shirt_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)
        # Ensure the shirt is placed on the bed

behavior __goal__():
    body:
        bind clothes_shirt_2086: item where:
            is_clothes_shirt(clothes_shirt_2086)
        # Select the shirt with ID 2086

        bind bed: item where:
            is_bed(bed)
        # Select a bed

        iron_shirt(clothes_shirt_2086)
        # Iron the shirt
        place_shirt_on_bed(clothes_shirt_2086, bed)
        # Place the shirt on the bed

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_scarf_2048_around_hanger_142(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==142
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_scarf,hanger_instance)
        else:
            exp(clothes_scarf,hanger_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,hanger_instance]=True
        close[hanger_instance,clothes_scarf]=True
    

behavior find_clothes_hat_2045_around_hanger_142(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==142
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_hat,hanger_instance)
        else:
            exp(clothes_hat,hanger_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,hanger_instance]=True
        close[hanger_instance,clothes_hat]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5999, column 9.
Expected one of: 
	* EQUAL
	* PERCENT
	* STAR
	* __ANON_5
	* FLOORDIV
	* SLASH
	* GREATER_EQ
	* __ANON_1
	* __ANON_8
	* COMMA
	* __ANON_3
	* MINUS
	* PLUS
	* __ANON_0
	* CIRCUMFLEX
	* NOT_EQ
	* LESSTHAN
	* RSHIFT
	* AT
	* SEMICOLON
	* __ANON_2
	* __ANON_4
	* AMPERSAND
	* AND
	* LSHIFT
	* IF
	* MORETHAN
	* OR
	* __ANON_6
	* LESS_EQ
	* __ANON_7
	* VBAR
	* DOUBLE_EQUAL
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def ensure_clean_shirt(shirt:item, sink:item):
    # Function to ensure the shirt is clean, wash if necessary
    if dirty(shirt):
        achieve_once inside(shirt, sink)
        wash(shirt)
        # Wash the shirt if it is dirty

def iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve inside(shirt, ironing_board)
        # Place the shirt on the ironing board
        if not is_on(iron):
            achieve_once plugged(iron) # Plug in the iron if not plugged
            achieve_once is_on(iron) # Turn on the iron
        achieve clean(shirt) 
        # Ensure the shirt is clean and ready for ironing

behavior place_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)

behavior turn_off_and_unplug_iron(iron:item):
    body:
        achieve is_off(iron)
        achieve unplugged(iron)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind bed: item where:
            is_bed(bed) and id[bed]==105
        # Select the bed with ID 105

        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select sink with ID 42 for washing if necessary

        ensure_clean_shirt(shirt, sink)
        iron_shirt(shirt, ironing_board, iron)
        place_on_bed(shirt, bed)
        turn_off_and_unplug_iron(iron)

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5998, column 9.
Expected one of: 
	* EQUAL
	* PERCENT
	* STAR
	* __ANON_5
	* FLOORDIV
	* SLASH
	* GREATER_EQ
	* __ANON_1
	* __ANON_8
	* COMMA
	* __ANON_3
	* MINUS
	* PLUS
	* __ANON_0
	* CIRCUMFLEX
	* NOT_EQ
	* LESSTHAN
	* RSHIFT
	* AT
	* SEMICOLON
	* __ANON_2
	* __ANON_4
	* AMPERSAND
	* AND
	* LSHIFT
	* IF
	* MORETHAN
	* OR
	* __ANON_6
	* LESS_EQ
	* __ANON_7
	* VBAR
	* DOUBLE_EQUAL
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def ensure_clean_shirt(shirt:item, sink:item):
    # Function to ensure the shirt is clean, wash if necessary
    if dirty(shirt):
        achieve_once inside(shirt, sink)
        wash(shirt)

def iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve inside(shirt, ironing_board)
        # Place the shirt on the ironing board
        if not is_on(iron):
            achieve_once plugged(iron) # Plug in the iron if not plugged
            achieve_once is_on(iron) # Turn on the iron

behavior place_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)

behavior turn_off_and_unplug_iron(iron:item):
    body:
        achieve is_off(iron)
        achieve unplugged(iron)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind bed: item where:
            is_bed(bed) and id[bed]==105
        # Select the bed with ID 105

        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select sink with ID 42 for washing if necessary

        ensure_clean_shirt(shirt, sink)
        iron_shirt(shirt, ironing_board, iron)
        place_on_bed(shirt, bed)
        turn_off_and_unplug_iron(iron)

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function has_milk not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
def is_milk_heated(cup: item, microwave: item):
    # Function to check if the cup of milk has been heated in the microwave
    symbol milk_heated=exists milk: item : is_milk(milk) and inside(milk, cup) and inside(cup, microwave)
    return milk_heated

behavior heat_milk_in_microwave(cup: item, microwave: item):
    body:
        achieve inside(cup, microwave)
        # Place the cup of milk inside the microwave

        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_milk(cup)
        # Select the cup of milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        if not is_milk_heated(cup, microwave):
            # If the milk is not yet heated, perform the heating process
            heat_milk_in_microwave(cup, microwave)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Unexpected token Token('VARNAME', 'milk') at line 5820, column 36.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

--------------------------------------------------------------------------------
Goal:  
def is_milk_heated(cup: item, microwave: item):
    # Function to check if the cup of milk has been heated in the microwave
    symbol milk_heated=exists milk: item : is_milk(milk) and inside(milk, cup) and inside(cup, microwave)
    return milk_heated

behavior heat_milk_in_microwave(cup: item, microwave: item):
    body:
        achieve inside(cup, microwave)
        # Place the cup of milk inside the microwave

        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and exists milk: item : is_milk(milk) and inside(milk, cup)
        # Select the cup of milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        if not is_milk_heated(cup, microwave):
            # If the milk is not yet heated, perform the heating process
            heat_milk_in_microwave(cup, microwave)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter_230; available variables: [Variable<egg: item>].
--------------------------------------------------------------------------------
Goal:  
behavior prepare_to_scramble_eggs(egg: item, kitchen_counter: item, fryingpan: item):
    body:
        achieve_once inhand(egg)
        achieve cut(egg)
        achieve inside(egg, fryingpan)
        # Crack and scramble the egg, placing it inside the frying pan

behavior heat_fryingpan(fryingpan: item, stove: item):
    body:
        achieve inside(fryingpan, stove)
        achieve is_on(stove)
        # Ensure the frying pan is on the stove and the stove is turned on for scrambling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and on(egg, kitchen_counter_230)
        # Select the egg on the kitchen counter

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan for scrambling the egg

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        prepare_to_scramble_eggs(egg, kitchen_counter_230, fryingpan)
        heat_fryingpan(fryingpan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2081_around_coffee_table_2068(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(fork,coffee_table_instance)
        else:
            exp(fork,coffee_table_instance)
    eff:
        unknown[fork]=False
        close[fork,coffee_table_instance]=True
        close[coffee_table_instance,fork]=True
    

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter; available variables: [Variable<egg: item>].
--------------------------------------------------------------------------------
Goal: 
behavior prepare_to_scramble_eggs(egg: item, kitchen_counter: item, fryingpan: item):
    body:
        achieve_once inhand(egg)
        achieve cut(egg)
        achieve inside(egg, fryingpan)

behavior heat_fryingpan(fryingpan: item, stove: item):
    body:
        achieve inside(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and on(egg, kitchen_counter)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter]==230

        prepare_to_scramble_eggs(egg, kitchen_counter, fryingpan)
        heat_fryingpan(fryingpan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function cooked not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior scramble_eggs_in_pan(eggs: item, fryingpan: item, stove: item):
    body:
        achieve inside(eggs, fryingpan)
        # Ensure the eggs are inside the frying pan

        achieve is_on(stove)
        # Ensure the stove is on for cooking

        achieve cooked(eggs)
        # Ensure the eggs are fully cooked as scrambled eggs

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan_2083)
        # Select the eggs placed in the frying pan

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2083
        # Select the frying pan with ID 2083

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        scramble_eggs_in_pan(eggs, fryingpan, stove)
        # Execute the behavior to scramble the eggs using the frying pan on the stove

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "function_definition":

'Function is_scrambled not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
def has_scrambled_eggs(pan: item):
    # Determine if there are scrambled eggs in the fryingpan
    symbol eggs_scrambled = exists eggs: item: is_food_egg(eggs) and inside(eggs, pan) and is_scrambled(eggs)
    return eggs_scrambled

behavior combine_and_fry(rice: item, pan: item):
    body:
        achieve inside(rice, pan)
        achieve is_on(stove_2065)

behavior ensure_eggs_scrambled(pan: item):
    body:
        if not has_scrambled_eggs(pan):
            observe(pan, "Check if the eggs are being scrambled")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and visited(fryingpan)
        
        ensure_eggs_scrambled(fryingpan)
        combine_and_fry(rice, fryingpan)


--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_dvd_player_2061_around_tablelamp_97(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tablelamp_instance:item where:
            is_tablelamp(tablelamp_instance) and id[tablelamp_instance]==97
        achieve close_char(char,tablelamp_instance)
        if can_open(tablelamp_instance):
            achieve_once open(tablelamp_instance)
            exp(dvd_player,tablelamp_instance)
        else:
            exp(dvd_player,tablelamp_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tablelamp_instance]=True
        close[tablelamp_instance,dvd_player]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<rice: item>, Variable<pan: item>].
--------------------------------------------------------------------------------
Goal:  
def has_scrambled_eggs(pan: item):
    # Determine if there are scrambled eggs in the fryingpan
    symbol eggs_scrambled = exists eggs: item: is_food_egg(eggs) and inside(eggs, pan) and cut(eggs)
    return eggs_scrambled

behavior combine_and_fry(rice: item, pan: item):
    body:
        achieve inside(rice, pan)
        achieve is_on(stove_2065)

behavior ensure_eggs_scrambled(pan: item):
    body:
        if not has_scrambled_eggs(pan):
            observe(pan, "Check if the eggs are being scrambled")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and visited(fryingpan)
        
        ensure_eggs_scrambled(fryingpan)
        combine_and_fry(rice, fryingpan)

--------------------------------------------------------------------------------
Exploration: 
behavior find_dvd_player_2061_around_oven_295(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(dvd_player,oven_instance)
        else:
            exp(dvd_player,oven_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,oven_instance]=True
        close[oven_instance,dvd_player]=True
    

################################################################################

Error: Unexpected token Token('COLON', ':') at line 5843, column 9.
Expected one of: 
	* EQUAL
	* PERCENT
	* STAR
	* __ANON_5
	* FLOORDIV
	* SLASH
	* GREATER_EQ
	* __ANON_1
	* __ANON_8
	* COMMA
	* __ANON_3
	* MINUS
	* PLUS
	* __ANON_0
	* CIRCUMFLEX
	* NOT_EQ
	* LESSTHAN
	* RSHIFT
	* AT
	* SEMICOLON
	* __ANON_2
	* __ANON_4
	* AMPERSAND
	* AND
	* LSHIFT
	* IF
	* MORETHAN
	* OR
	* __ANON_6
	* LESS_EQ
	* __ANON_7
	* VBAR
	* DOUBLE_EQUAL
	* _NEWLINE

--------------------------------------------------------------------------------
Goal:  
def check_scrambled(eggs: item):
    # Function to check if the eggs have been scrambled
    observe(eggs, "Check if the eggs are being scrambled")
    
def scramble_eggs(fryingpan: item, stove: item):
    # Behavior to scramble the eggs
    body:
        achieve inside(fryingpan, stove)
        # Ensure the frying pan is in the stove
        achieve is_on(stove)
        # Ensure the stove is on
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan)
        check_scrambled(eggs)
        # Check if the eggs have been scrambled If not, scramble them

behavior combine_and_fry(rice: item, fryingpan: item, stove: item):
    body:
        achieve inside(rice, fryingpan)
        # Ensure the rice is inside the frying pan
        scramble_eggs(fryingpan, stove)
        # Ensure the eggs are scrambled if not already
        achieve inside(fryingpan, stove)
        # Ensure the frying pan is back on the stove
        achieve is_on(stove)
        # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the cooked rice
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        bind stove: item where:
            is_stove(stove)
        # Select the stove
       
        combine_and_fry(rice, fryingpan, stove)


--------------------------------------------------------------------------------
Exploration: 
behavior find_fork_2080_around_pot_2069(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(fork,pot_instance)
        else:
            exp(fork,pot_instance)
    eff:
        unknown[fork]=False
        close[fork,pot_instance]=True
        close[pot_instance,fork]=True
    

behavior find_dvd_player_2061_around_television_248(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==248
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(dvd_player,television_instance)
        else:
            exp(dvd_player,television_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,television_instance]=True
        close[television_instance,dvd_player]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
--------------------------------------------------------------------------------
Goal:  
def check_scrambled(eggs: item):
    # Function to check if the eggs have been scrambled
    observe(eggs, "Check if the eggs are being scrambled")

behavior scramble_eggs(fryingpan: item, stove: item):
    body:
        achieve inside(fryingpan, stove)
        # Ensure the frying pan is in the stove
        achieve is_on(stove)
        # Ensure the stove is on
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan)
        check_scrambled(eggs)
        # Check if the eggs have been scrambled If not, scramble them by additional actions (not explicitly defined here)

behavior combine_and_fry(rice: item, fryingpan: item, stove: item):
    body:
        achieve inside(rice, fryingpan)
        # Ensure the rice is inside the frying pan
        scramble_eggs(fryingpan, stove)
        # Ensure the eggs are scrambled if not already
        achieve inside(fryingpan, stove)
        # Ensure the frying pan is back on the stove
        achieve is_on(stove)
        # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the cooked rice
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        combine_and_fry(rice, fryingpan, stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_chair_103_around_table_107(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: iron; available variables: [Variable<clothes: item>, Variable<ironing_board: item>].
--------------------------------------------------------------------------------
Goal:  
behavior heat_iron(iron:item):
    body:
        achieve is_on(iron)
        # Ensure the iron is turned on and heated

behavior iron_clothes(clothes:item, ironing_board:item):
    body:
        achieve on(clothes, ironing_board)
        # Ensure clothes are on the ironing board
        assert is_on(iron)
        # Iron the clothes

behavior __goal__():
    body:
        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt) and id[clothes_skirt]==2088
        # Select the skirt with ID 2088

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind iron: item where:
            is_iron(iron) and id[iron]==2089
        # Select the iron with ID 2089

        heat_iron(iron)
        # Heat the iron

        iron_clothes(clothes_skirt, ironing_board)
        # Iron the clothes

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_hat_2045_around_hanger_142(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==142
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_hat,hanger_instance)
        else:
            exp(clothes_hat,hanger_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,hanger_instance]=True
        close[hanger_instance,clothes_hat]=True
    

behavior find_clothes_gloves_2046_around_washing_machine_2007(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_gloves,washing_machine_instance)
        else:
            exp(clothes_gloves,washing_machine_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,washing_machine_instance]=True
        close[washing_machine_instance,clothes_gloves]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Unknown variable: iron; available variables: [].
--------------------------------------------------------------------------------
Goal:  
def is_ironing_set_up():
    # Determine if the iron is set up and the skirt is on the ironing board
    symbol iron_ready = is_on(iron) and plugged(iron)
    symbol skirt_on_board = on(clothes_skirt, ironing_board)
    return iron_ready and skirt_on_board

behavior iron_skirt(clothes_skirt:item, ironing_board:item, iron:item):
    body:
        achieve clean(clothes_skirt)
        # The skirt needs to be ironed, assuming ironing makes it clean

behavior __goal__():
    body:
        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt) and id[clothes_skirt]==2088
        # Select the skirt with the specific ID

        bind iron: item where:
            is_iron(iron) and id[iron]==2089
        # Select the iron with the specific ID

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with the specific ID

        if is_ironing_set_up():
            iron_skirt(clothes_skirt, ironing_board, iron)

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_hat_2045_around_hanger_136(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==136
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_hat,hanger_instance)
        else:
            exp(clothes_hat,hanger_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,hanger_instance]=True
        close[hanger_instance,clothes_hat]=True
    

behavior find_towel_2057_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: ironing_board_2074; available variables: [Variable<skirt: item>].
--------------------------------------------------------------------------------
Goal:  
behavior iron_skirt(skirt:item, iron:item):
    body:
        achieve_once inhand(iron)
        achieve clean(skirt)
        # Ensure the skirt is clean after ironing

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Select the iron which is plugged in and turned on

        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, ironing_board_2074)
        # Select the skirt that is placed on the ironing board

        iron_skirt(skirt, iron)
        # Execute the behavior to iron the skirt

--------------------------------------------------------------------------------
Exploration: 
behavior find_cleaning_solution_2073_around_washing_machine_2007(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: board; available variables: [Variable<skirt: item>].
--------------------------------------------------------------------------------
Goal:  
behavior iron_skirt(skirt:item, iron:item, board:item):
    body:
        achieve_once inhand(iron)
        achieve clean(skirt)
        # Ensure the skirt is clean after ironing

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and plugged(iron) and is_on(iron)
        # Select the iron which is plugged in and turned on

        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, board)
        # Select the skirt that is placed on the ironing board

        bind board: item where:
            is_ironing_board(board) and id[board]==2074
        # Bind the ironing board with ID 2074
        
        iron_skirt(skirt, iron, board)
        # Execute the behavior to iron the skirt

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_dress_2044_around_hanger_114(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==114
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_dress,hanger_instance)
        else:
            exp(clothes_dress,hanger_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,hanger_instance]=True
        close[hanger_instance,clothes_dress]=True
    

behavior find_clothes_hat_2045_around_hanger_109(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==109
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_hat,hanger_instance)
        else:
            exp(clothes_hat,hanger_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,hanger_instance]=True
        close[hanger_instance,clothes_hat]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_384(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==384
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: ironing_board; available variables: [Variable<skirt: item>, Variable<iron: item>].
--------------------------------------------------------------------------------
Goal:  
behavior iron_skirt(skirt:item, iron:item):
    body:
        achieve on(skirt, ironing_board)
        # Place the skirt on the ironing board
        achieve is_on(iron)
        # Ensure the iron is turned on
        assert is_clothes(skirt)
        # Confirm that the skirt is a clothing item

        # If the skirt is not smooth, proceed to iron
        observe(skirt, "Is the skirt fully smooth")
        achieve clean(skirt)
        # Ensure the skirt is clean and ironed

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, ironing_board_2074)
        # Select the skirt on the ironing board

        bind iron: item where:
            is_iron(iron) and is_on(iron) and close(iron, ironing_board_2074)
        # Select the iron close to the ironing board and ensure it is turned on

        iron_skirt(skirt, iron)

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_underwear_2049_around_closetdrawer_154(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: ironing_board_2074; available variables: [Variable<skirt: item>].
--------------------------------------------------------------------------------
Goal:  
behavior iron_skirt(skirt:item, iron:item, ironing_board:item):
    body:
        achieve on(skirt, ironing_board)
        # Place the skirt on the ironing board
        achieve is_on(iron)
        # Ensure the iron is turned on
        assert is_clothes(skirt)
        # Confirm that the skirt is a clothing item

        # If the skirt is not smooth, proceed to iron
        observe(skirt, "Is the skirt fully smooth")
        achieve clean(skirt)
        # Ensure the skirt is clean and ironed

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt) and on(skirt, ironing_board_2074)
        # Select the skirt on the ironing board

        bind iron: item where:
            is_iron(iron) and is_on(iron) and close(iron, ironing_board_2074)
        # Select the iron close to the ironing board and ensure it is turned on

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        iron_skirt(skirt, iron, ironing_board)

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_underwear_2049_around_closetdrawer_116(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'is_on') at line 5998, column 17.
Expected one of: 
	* SEMICOLON
	* __ANON_1
	* __ANON_5
	* IF
	* DOUBLE_EQUAL
	* LESSTHAN
	* __ANON_3
	* SLASH
	* PLUS
	* VBAR
	* EQUAL
	* AND
	* PERCENT
	* __ANON_2
	* __ANON_6
	* CIRCUMFLEX
	* OR
	* MORETHAN
	* LESS_EQ
	* RSHIFT
	* _NEWLINE
	* COMMA
	* NOT_EQ
	* __ANON_0
	* __ANON_7
	* AMPERSAND
	* __ANON_4
	* FLOORDIV
	* AT
	* GREATER_EQ
	* MINUS
	* STAR
	* LSHIFT
	* __ANON_8

--------------------------------------------------------------------------------
Goal:  
behavior iron_skirt(skirt:item, iron:item, ironing_board:item):
    body:
        achieve is_on(iron)
        # Ensure the iron is turned on

        achieve on(skirt, ironing_board)
        # Ensure the skirt is on the ironing board

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        
        bind iron: item where:
            is_iron(iron)
            and is_on(iron)
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
            and on(skirt, ironing_board)

        iron_skirt(skirt, iron, ironing_board)

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_underwear_2049_around_closetdrawer_116(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function off not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior prepare_hot_milk_and_place_on_table(milk: item, tabletop: item):
    body:
        achieve clean(milk)
        # Ensure the milk is clean

        achieve close_char(char, milk)
        # Character is close to milk for heating

        achieve is_on(milk)
        # Heat the milk

        achieve off(char)
        # Ensure character has control to turn off heating appliance

        achieve on(milk, tabletop)
        # Place the cup of hot milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table
        
        prepare_hot_milk_and_place_on_table(milk, coffee_table)

--------------------------------------------------------------------------------
Exploration: 
behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior heat_milk(milk:item, stove:item, cup:item):
    body:
        achieve plugged(stove) # Ensure the stove is plugged in
        achieve is_on(stove) # Turn on the stove
        achieve has_water(cup) # Add water to the cup for heating milk purpose
        
behavior put_on_table(item:item, table:item):
    body:
        achieve on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind table: item where:
            is_coffee_table(table) and inside(table, home_office)
        # Select the coffee table in the home office

        heat_milk(milk, stove, cup) # Heat the milk on the stove using the cup
        put_on_table(cup, table) # Put the cup of hot milk on the coffee table

--------------------------------------------------------------------------------
Exploration: 
behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

################################################################################

Error: Unexpected token Token('VARNAME', 'home_office') at line 5743, column 47.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

--------------------------------------------------------------------------------
Goal:  
behavior heat_milk(milk:item, stove:item, cup:item):
    body:
        achieve plugged(stove) # Ensure the stove is plugged in
        achieve is_on(stove) # Turn on the stove
        achieve has_water(cup) # Add water to the cup for heating milk purpose

behavior put_on_table(item:item, table:item):
    body:
        achieve on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind table: item where:
            is_coffee_table(table) and exists home_office: item : is_home_office(home_office) and inside(table, home_office)
        # Select the coffee table in the home office

        heat_milk(milk, stove, cup) # Heat the milk on the stove using the cup
        put_on_table(cup, table) # Put the cup of hot milk on the coffee table

--------------------------------------------------------------------------------
Exploration: 
behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Variable egg already exists.
--------------------------------------------------------------------------------
Goal:  
def on_fryingpan(egg: item, fryingpan: item):
    # Function to check if the egg is on the frying pan
    symbol egg_on_fryingpan=exists egg: item : is_food_egg(egg) and on(egg, fryingpan)
    return egg_on_fryingpan

def is_on_stove(fryingpan: item, stove: item):
    # Function to check if the frying pan is on the stove
    symbol fryingpan_on_stove=exists stove: item : is_stove(stove) and on(fryingpan, stove)
    return fryingpan_on_stove

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg as the item to scramble
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not on_fryingpan(egg, fryingpan):
            # Check if the egg is not yet on the frying pan
            achieve on(egg, fryingpan)
            # Achieve the state of having the egg on the frying pan

        if not is_on_stove(fryingpan, stove):
            # Check if the frying pan is not yet on the stove
            achieve on(fryingpan, stove)
            # Achieve the state of having the frying pan on the stove

        achieve is_on(stove)
        # Ensure the stove is turned on to cook the egg

--------------------------------------------------------------------------------
Exploration: 
behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2083_around_cupboard_229(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<sink: item>].
--------------------------------------------------------------------------------
Goal:  
def has_faucet(sink:item):
    # Determine if the sink has a faucet
    symbol has_faucet=exists faucet:item : is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior wash_cat_in_sink(cat:item, sink:item):
    body:
        achieve_once inside(cat, sink)
        # Ensure the cat is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the cat

        wash(cat) # Wash the cat
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing the cat

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        if exists sink: item : is_sink(sink) and has_faucet(sink):
            # If a sink with a faucet is known
            bind sink: item where:
                is_sink(sink) and has_faucet(sink)
            wash_cat_in_sink(cat, sink)
        else:
            # Explore to find a suitable sink
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink,"Check if it has a faucet suitable for washing the cat")
                    if has_faucet(sink):
                        wash_cat_in_sink(cat, sink)
                        break

--------------------------------------------------------------------------------
Exploration: 
behavior find_cat_2055_around_sink_42(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cat,sink_instance)
        else:
            exp(cat,sink_instance)
    eff:
        unknown[cat]=False
        close[cat,sink_instance]=True
        close[sink_instance,cat]=True
    

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2084_around_cupboard_229(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(detergent,cupboard_instance)
        else:
            exp(detergent,cupboard_instance)
    eff:
        unknown[detergent]=False
        close[detergent,cupboard_instance]=True
        close[cupboard_instance,detergent]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<sink: item>].
--------------------------------------------------------------------------------
Goal:  
def has_faucet(sink:item):
    # Determine if the sink has a faucet
    symbol has_faucet=exists faucet:item : is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior wash_cat_in_sink(cat:item, sink:item):
    body:
        achieve_once inside(cat, sink)
        # Ensure the cat is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the cat

        wash(cat) # Wash the cat
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing the cat

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        if exists sink: item : is_sink(sink) and has_faucet(sink):
            # If a sink with a faucet is known
            bind sink: item where:
                is_sink(sink) and has_faucet(sink)
            wash_cat_in_sink(cat, sink)
        else:
            # Explore to find a suitable sink
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink,"Check if it has a faucet suitable for washing the cat")
                    if has_faucet(sink):
                        wash_cat_in_sink(cat, sink)
                        break

--------------------------------------------------------------------------------
Exploration: 
behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_towel_2056_around_bathroom_cabinet_40(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function has_faucet not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior move_cat_to_sink(cat:item, sink:item):
    body:
        achieve close(cat, sink)
        # Bring the cat close to the sink

behavior wash_cat(cat:item, sink:item):
    body:
        achieve_once inside(cat, sink)
        # Place the cat inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet if the sink has one

        wash(cat)
        # Wash the cat

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

def has_faucet(sink:item):
    # Determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        bind sink: item where:
            is_sink(sink)
        # Select the cat and the sink

        move_cat_to_sink(cat, sink)
        wash_cat(cat, sink)

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<bowl: item>, Variable<faucet: item>].
--------------------------------------------------------------------------------
Goal:  
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve inside(bowl, home_office) # Ensure the bowl is in the home office before filling it
        achieve_once is_on(faucet) # Turn on the faucet to fill the bowl with water
        achieve has_water(bowl) # The bowl should have water in it
        achieve_once is_off(faucet) # Turn off the faucet after filling the bowl
        achieve on(bowl, table) # Place the bowl with water on the table in the home office

def in_home_office(bowl:item):
    # Function to check if a bowl is in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(bowl, room)
    return in_home_office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        bind faucet: item where:
            is_faucet(faucet)
        bind table: item where:
            is_table(table) and in_home_office(table)
        if not in_home_office(bowl):
            achieve inside(bowl, home_office)
        # Ensure the bowl is inside the home office
        fill_bowl_with_water(bowl, faucet)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_lemon_2028_around_cupboard_229(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_lemon,cupboard_instance)
        else:
            exp(food_lemon,cupboard_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,cupboard_instance]=True
        close[cupboard_instance,food_lemon]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_bowl_with_water_on_table(bowl: item, table: item):
    body:
        achieve has_water(bowl)
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and grabbable(bowl)
        # Select a grabbable bowl
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_bowl_with_water_on_table(bowl, table)
        # Fill the bowl with water and place it on the specified table

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior place_bowl_with_water_on_table(bowl: item, table: item):
    body:
        achieve has_water(bowl)
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and grabbable(bowl)
        # Select a grabbable bowl
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        place_bowl_with_water_on_table(bowl, table)
        # Fill the bowl with water and place it on the specified table

--------------------------------------------------------------------------------
Exploration: 
behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function has_faucet not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
def has_water_in_pot(pot:item):
    # Determine if the pot has water
    symbol has_water=has_water(pot)
    return has_water

def is_pot_on_stove(pot: item, stove: item):
    # Determine if the pot is on the stove
    symbol pot_on_stove=on(pot, stove)
    return pot_on_stove

behavior fill_pot_with_water(sink:item, pot:item):
    body:
        achieve_once inside(pot, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the pot
        
        # Assume the action required to fill the pot with water is encompassed by the general task
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior start_boiling_pot(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Bind to a pot
        bind stove: item where:
            is_stove(stove)
        # Bind to a stove
        if not has_water_in_pot(pot):
            bind sink: item where:
                is_sink(sink)
            # Bind to a sink
            fill_pot_with_water(sink, pot)
        if not is_pot_on_stove(pot, stove):
            place_pot_on_stove(pot, stove)
        start_boiling_pot(stove)

--------------------------------------------------------------------------------
Exploration: 
behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal: 
behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        # Select the pot on the stove
        assert_hold has_water(pot)
        # The pot must have water
        achieve inside(rice, pot)
        # Ensure rice is inside the pot

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_rice_2036_around_cutting_board_2051(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_rice,cutting_board_instance)
        else:
            exp(food_rice,cutting_board_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cutting_board_instance]=True
        close[cutting_board_instance,food_rice]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot on the stove
        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        # Select the stove with a switch
        assert_hold has_water(pot)
        # The pot must have water
        achieve inside(rice, pot)
        # Ensure rice is inside the pot

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: sink_231; available variables: [Variable<cat: item>].
--------------------------------------------------------------------------------
Goal: behavior dry_cat_with_towel(cat:item, towel:item):
    body:
        achieve inside(cat, towel)
        # The towel should cover the cat

        achieve clean(cat)
        # Ensure the cat is dry and clean after using the towel

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and inside(cat, sink_231)
        # The cat, identified as cat_2055, is inside sink_231, ready for drying

        bind towel: item where:
            is_towel(towel)
        # Seeks a towel for drying the cat

        achieve_once inhand(towel)
        # Obtain the towel for usage

        dry_cat_with_towel(cat, towel)
        # Dry the cat with the obtained towel
--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2056_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: sink_231; available variables: [Variable<cat: item>].
--------------------------------------------------------------------------------
Goal:  
behavior dry_cat_with_towel(cat:item, towel:item):
    body:
        achieve inside(cat, towel)
        # The towel should cover the cat

        achieve clean(cat)
        # Ensure the cat is dry and clean after using the towel

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and inside(cat, sink_231)
        # The cat, identified as cat_2055, is inside sink_231, ready for drying

        bind towel: item where:
            is_towel(towel)
        # Seeks a towel for drying the cat

        achieve_once inhand(towel)
        # Obtain the towel for usage

        dry_cat_with_towel(cat, towel)
        # Dry the cat with the obtained towel

--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2057_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: sink_231; available variables: [Variable<cat: item>].
--------------------------------------------------------------------------------
Goal:  
behavior wipe_cat(cat: item, towel: item):
    body:
        achieve_once inhand(towel) # Use the towel to wipe the cat
        wipe(cat)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and inside(cat, sink_231)
        # Select the cat in the sink

        bind towel: item where:
            is_towel(towel) and close(towel, sink_231)
        # Select a towel close to the sink

        wipe_cat(cat, towel)

--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2056_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: sink_231; available variables: [Variable<cat: item>].
--------------------------------------------------------------------------------
Goal: 
def has_towel_nearby(cat:item):
    # Check if there is a towel nearby the cat
    symbol towel_nearby=exists towel: item : is_towel(towel) and close(towel, cat)
    return towel_nearby

behavior dry_cat_with_towel(cat:item, towel:item):
    body:
        achieve close(cat, towel)
        # Make sure the towel is close to the cat
        wipe(cat)
        # Dry the cat using the towel

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and inside(cat, sink_231)
        # Bind the cat inside the sink_231

        if has_towel_nearby(cat):
            bind towel: item where:
                is_towel(towel) and close(towel, cat)
            # If towel is nearby, use it to dry the cat
            dry_cat_with_towel(cat, towel)
        
        else:
            # If no towel is nearby, observe the scene to locate a towel
            foreach obj: item:
                if is_towel(obj) and not visited(obj):
                    observe(obj,"Determine if this towel can be used to dry the cat")

--------------------------------------------------------------------------------
Exploration: 
behavior find_towel_2058_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: sink_231; available variables: [Variable<cat: item>].
--------------------------------------------------------------------------------
Goal:  
behavior dry_cat_with_towel(cat: item, towel: item):
    body:
        achieve close(cat, towel) # Ensure the cat is close to the towel for effective drying
        achieve_once inhand(towel) # Temporarily hold the towel to dry the cat
        wipe(cat) # Dry the cat using the towel

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and close(cat, sink_231)
        # Select the cat close to sink_231

        bind towel: item where:
            is_towel(towel) and (id[towel] == 2056 or id[towel] == 2057 or id[towel] == 2058 or id[towel] == 2059)
        # Select a clean towel with one of the specified IDs
        
        dry_cat_with_towel(cat, towel)
        # Dry the cat using the identified towel

--------------------------------------------------------------------------------
Exploration: 
behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_pillow_406_around_pillow_406(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind pillow_instance:item where:
            is_pillow(pillow_instance) and id[pillow_instance]==406
        achieve close_char(char,pillow_instance)
        if can_open(pillow_instance):
            achieve_once open(pillow_instance)
            exp(pillow,pillow_instance)
        else:
            exp(pillow,pillow_instance)
    eff:
        unknown[pillow]=False
        close[pillow,pillow_instance]=True
        close[pillow_instance,pillow]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Error during applying on[observation, state](x: item, y: item).
  Arguments: V::towel, has_water(V::towel)
Argument #1 type does not match: expect item, got bool.
--------------------------------------------------------------------------------
Goal:  
behavior dry_cat(cat:item, towel:item):
    body:
        assert is_cat(cat) # Ensure the item is a cat
        assert is_towel(towel) # Ensure the item is a towel
        achieve clean(cat) # Dry the cat with the towel
        achieve on(towel, has_water(towel)) # Ensure the towel absorbs water

behavior __goal__():
    body:
        bind towel: item where:
            is_towel(towel) and id[towel] == 2056 or id[towel] == 2057 or id[towel] == 2058 or id[towel] == 2059
        # Bind a clean towel
        
        bind cat: item where:
            is_cat(cat) and id[cat]==2055
        # Bind the cat

        dry_cat(cat, towel)
        # Invoke the behavior to dry the cat using the towel

--------------------------------------------------------------------------------
Exploration: 
behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_pillow_405_around_pillow_405(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind pillow_instance:item where:
            is_pillow(pillow_instance) and id[pillow_instance]==405
        achieve close_char(char,pillow_instance)
        if can_open(pillow_instance):
            achieve_once open(pillow_instance)
            exp(pillow,pillow_instance)
        else:
            exp(pillow,pillow_instance)
    eff:
        unknown[pillow]=False
        close[pillow,pillow_instance]=True
        close[pillow_instance,pillow]=True
    

################################################################################

Error: Unexpected token Token('_NEWLINE', '\n            ') at line 5930, column 37.
Expected one of: 
	* DO
	* STRING
	* DEC_NUMBER
	* FORALL
	* VARNAME
	* FALSE
	* FINDONE
	* EXISTS
	* HEX_NUMBER
	* PLUS
	* ELLIPSIS
	* OCT_NUMBER
	* NOT
	* TRUE
	* LONG_STRING
	* TILDE
	* COLON
	* FLOAT_NUMBER
	* FINDALL
	* IMAG_NUMBER
	* BIN_NUMBER
	* MINUS
	* NONE
	* LPAR
	* LSQB

--------------------------------------------------------------------------------
Goal:  
behavior dry_cat(cat:item, towel:item):
    body:
        achieve close_char(char, cat)
        # Ensure the character is close to the cat
        achieve_once inhand(towel)
        # Temporarily hold the towel in hand to dry the cat
        wipe(cat)
        # Use the towel to dry the cat

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and on(cat, sink_231)
        # Select cat that is on the sink

        if exists towel: item where:
            is_towel(towel) and id[towel]==2056:
            bind towel: item where:
                is_towel(towel) and id[towel]==2056
        elif exists towel: item where:
            is_towel(towel) and id[towel]==2057:
            bind towel: item where:
                is_towel(towel) and id[towel]==2057
        elif exists towel: item where:
            is_towel(towel) and id[towel]==2058:
            bind towel: item where:
                is_towel(towel) and id[towel]==2058
        else:
            bind towel: item where:
                is_towel(towel) and id[towel]==2059
        # Select a clean towel from the available options
        
        dry_cat(cat, towel)
        # Perform the behavior to dry the cat with the selected towel

--------------------------------------------------------------------------------
Exploration: 
behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

################################################################################

Error: Unexpected token Token('_NEWLINE', '\n            ') at line 5948, column 37.
Expected one of: 
	* DO
	* STRING
	* DEC_NUMBER
	* FORALL
	* VARNAME
	* FALSE
	* FINDONE
	* EXISTS
	* HEX_NUMBER
	* PLUS
	* ELLIPSIS
	* OCT_NUMBER
	* NOT
	* TRUE
	* LONG_STRING
	* TILDE
	* COLON
	* FLOAT_NUMBER
	* FINDALL
	* IMAG_NUMBER
	* BIN_NUMBER
	* MINUS
	* NONE
	* LPAR
	* LSQB

--------------------------------------------------------------------------------
Goal:  
behavior dry_cat(cat:item, towel:item):
    body:
        achieve close_char(char, cat)
        # Ensure the character is close to the cat
        achieve_once inhand(towel)
        # Temporarily hold the towel in hand to dry the cat
        wipe(cat)
        # Use the towel to dry the cat

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and on(cat, sink_231)
        # Select cat that is on the sink

        if exists towel: item where:
            is_towel(towel) and id[towel]==2056:
            bind towel: item where:
                is_towel(towel) and id[towel]==2056
        elif exists towel: item where:
            is_towel(towel) and id[towel]==2057:
            bind towel: item where:
                is_towel(towel) and id[towel]==2057
        elif exists towel: item where:
            is_towel(towel) and id[towel]==2058:
            bind towel: item where:
                is_towel(towel) and id[towel]==2058
        else:
            bind towel: item where:
                is_towel(towel) and id[towel]==2059
        # Select a clean towel from the available options
        
        dry_cat(cat, towel)
        # Perform the behavior to dry the cat with the selected towel

--------------------------------------------------------------------------------
Exploration: 
behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_mat_236_around_cupboard_229(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(mat,cupboard_instance)
        else:
            exp(mat,cupboard_instance)
    eff:
        unknown[mat]=False
        close[mat,cupboard_instance]=True
        close[cupboard_instance,mat]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function on_cat not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
def is_clean_towel(towel: item):
    symbol clean_towel = not dirty(towel)
    return clean_towel

behavior dry_cat(cat: item, towel: item):
    body:
        achieve_once inhand(towel)
        # Ensure the towel is held once

        achieve on_cat(char, cat)
        wipe(cat)
        # Dry the cat using the towel

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and close(char, cat)
        # Select the cat close to the character

        bind towel: item where:
            is_towel(towel) and is_clean_towel(towel)
        # Choose a clean towel

        dry_cat(cat, towel)

--------------------------------------------------------------------------------
Exploration: 
behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Error during applying on[observation, state](x: item, y: item).
  Arguments: O::char, V::cat
Argument #0 type does not match: expect item, got character.
--------------------------------------------------------------------------------
Goal:  
def is_clean_towel(towel: item):
    symbol clean_towel = not dirty(towel)
    return clean_towel

behavior dry_cat(cat: item, towel: item):
    body:
        achieve_once inhand(towel)
        # Ensure the towel is held once

        achieve on(char, cat)
        wipe(cat)
        # Dry the cat using the towel

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and close_char(char, cat)
        # Select the cat close to the character

        bind towel: item where:
            is_towel(towel) and is_clean_towel(towel)
        # Choose a clean towel

        dry_cat(cat, towel)

--------------------------------------------------------------------------------
Exploration: 
behavior find_mat_237_around_cupboard_229(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(mat,cupboard_instance)
        else:
            exp(mat,cupboard_instance)
    eff:
        unknown[mat]=False
        close[mat,cupboard_instance]=True
        close[cupboard_instance,mat]=True
    

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: sink_231; available variables: [Variable<cat: item>].
--------------------------------------------------------------------------------
Goal:  
behavior dry_cat_with_towel(cat:item, towel:item):
    body:
        achieve inside(cat, towel)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and inside(cat, sink_231) # The cat should be determined based on it being already in the sink_231
        
        bind towel: item where:
            (id[towel] == 2056 or id[towel] == 2057 or id[towel] == 2058 or id[towel] == 2059) and is_towel(towel) and clean(towel)  # Selecting one of the clean towels to dry the cat
        
        dry_cat_with_towel(cat, towel)  # Use the selected towel to dry the cat

--------------------------------------------------------------------------------
Exploration: 
behavior find_toilet_paper_2090_around_bathroom_cabinet_40(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_mat_22_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<table: item>].
--------------------------------------------------------------------------------
Goal:  
behavior __goal__():
    body:
        if exists table: item : is_table(table) and inside(table, dining_room):
            # Check if there is a table inside the dining room
            bind table: item where:
                is_table(table) and inside(table, dining_room)
            # Select a table within the dining room
            achieve visited(table)
            # Observe and mark the table as visited
        
        else:
            # If no table has been identified, search the scene for an unvisited table in the dining room
            foreach table: item:
                if is_table(table) and not visited(table) and inside(table, dining_room):
                    observe(table, "Check if this is a table in the dining room")
                    # Observe if the table is located within the dining room

--------------------------------------------------------------------------------
Exploration: 
################################################################################

Error: Error trying to process rule "function_definition":

Variable skirt already exists.
--------------------------------------------------------------------------------
Goal:  
def is_skirt_clothes_on_board(skirt:item, ironing_board:item):
    # Function to check if the skirt is on the ironing board for ironing
    symbol on_board=exists skirt: item : is_clothes_skirt(skirt) and on(skirt, ironing_board)
    return on_board

behavior prepare_iron(iron:item):
    body:
        achieve plugged(iron)
        # Plug in the iron

behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)
        # Turn on the iron

behavior iron_skirt(skirt:item, ironing_board:item, iron:item):
    body:
        achieve on(skirt, ironing_board)
        # Ensure skirt is on the ironing board
        achieve_once inhand(iron)
        # Hold the iron for ironing the skirt

behavior turn_off_iron(iron:item):
    body:
        achieve is_off(iron)

behavior unplug_iron(iron:item):
    body:
        achieve unplugged(iron)

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select a skirt to iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        observe(ironing_board, "Check if there is a skirt on it for ironing")

        if exists skirt: item : is_clothes_skirt(skirt) and is_skirt_clothes_on_board(skirt, ironing_board):
            prepare_iron(iron)
            turn_on_iron(iron)
            iron_skirt(skirt, ironing_board, iron)
            turn_off_iron(iron)
            unplug_iron(iron)

        else:
            # If no skirt is on the board, prepare to rectify the situation
            observe(skirt, "Ensure skirt is placed on the ironing board for ironing")

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_skirt_2088_around_dresser_358(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_skirt,dresser_instance)
        else:
            exp(clothes_skirt,dresser_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,dresser_instance]=True
        close[dresser_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: {'self': <concepts.dm.crow.executors.crow_executor.CrowExecutionCSPVisitor object at 0x7ff7422666a0>, 'rv': Value[bool, axes=[], tdtype=torch.int64, tdshape=(), quantized]{tensor(0)}, 'function_argument_variables': (Variable<skirt: item>, Variable<ironing_board: item>), 'outer_arguments': (VariableExpression<V::_t1>, VariableExpression<V::ironing_board>), 'argument_values': (slice(None, None, None), StateObjectReference(name='ironing_board_2074', index=74, dtype=ObjectType<item>)), 'output_batch_variables': [], 'function_argument_variable': Variable<skirt: item>, 'outer_argument_expr': VariableExpression<V::_t1>, 'argument_value': slice(None, None, None)}
--------------------------------------------------------------------------------
Goal:  
def is_skirt_clothes_on_board(skirt:item, ironing_board:item):
    # Function to check if the skirt is on the ironing board for ironing
    symbol on_board=exists s: item : is_clothes_skirt(s) and on(s, ironing_board)
    return on_board

behavior prepare_iron(iron:item):
    body:
        achieve plugged(iron)
        # Plug in the iron

behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)
        # Turn on the iron

behavior iron_skirt(skirt:item, ironing_board:item, iron:item):
    body:
        achieve on(skirt, ironing_board)
        # Ensure skirt is on the ironing board
        achieve_once inhand(iron)
        # Hold the iron for ironing the skirt

behavior turn_off_iron(iron:item):
    body:
        achieve is_off(iron)

behavior unplug_iron(iron:item):
    body:
        achieve unplugged(iron)

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select a skirt to iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        observe(ironing_board, "Check if there is a skirt on it for ironing")

        if exists skirt: item : is_clothes_skirt(skirt) and is_skirt_clothes_on_board(skirt, ironing_board):
            prepare_iron(iron)
            turn_on_iron(iron)
            iron_skirt(skirt, ironing_board, iron)
            turn_off_iron(iron)
            unplug_iron(iron)

        else:
            # If no skirt is on the board, prepare to rectify the situation
            observe(skirt, "Ensure skirt is placed on the ironing board for ironing")

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_skirt_2088_around_dresser_358(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_skirt,dresser_instance)
        else:
            exp(clothes_skirt,dresser_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,dresser_instance]=True
        close[dresser_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Error during applying close[observation, state](x: item, y: item).
  Arguments: O::char, V::skirt
Argument #0 type does not match: expect item, got character.
--------------------------------------------------------------------------------
Goal:  
def has_ironing_board_with_skirt(ironing_board:item):
    # Function to check if there is a skirt on a specified ironing board
    symbol has_skirt_on_board=exists o: item : is_clothes_skirt(o) and on(o, ironing_board)
    return has_skirt_on_board

behavior iron_skirt(skirt:item, iron:item):
    body:
        achieve close(char, skirt)
        # Ensure the character is close to the skirt
        achieve on(skirt, is_ironing_board)  # Ensure the skirt is on the ironing board
        achieve plugged(iron)  # Ensure the iron is plugged in
        achieve is_on(iron)  # Ensure the iron is turned on
        achieve clean(skirt)  # Ensure the skirt is ironed (clean state)

behavior __goal__():
    body:
        if exists ironing_board: item : is_ironing_board(ironing_board) and has_ironing_board_with_skirt(ironing_board):
            # If the ironing board with a skirt already exists, approach it
            bind ironing_board: item where:
                is_ironing_board(ironing_board) and has_ironing_board_with_skirt(ironing_board)
            # Select the skirt on the ironing board
            bind skirt: item where:
                is_clothes_skirt(skirt) and on(skirt, ironing_board)
            # Select an iron
            bind iron: item where:
                is_iron(iron)
            iron_skirt(skirt, iron)  # Iron the skirt
        else:
            # If no ironing board with a skirt is found, search for one
            foreach ironing_board: item:
                if is_ironing_board(ironing_board) and not visited(ironing_board):
                    observe(ironing_board, "Check if there is a skirt on the ironing board")

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_skirt_2088_around_dresser_358(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_skirt,dresser_instance)
        else:
            exp(clothes_skirt,dresser_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,dresser_instance]=True
        close[dresser_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

Unknown variable: is_ironing_board; available variables: [Variable<skirt: item>, Variable<iron: item>].
--------------------------------------------------------------------------------
Goal:  
def has_ironing_board_with_skirt(ironing_board:item):
    # Function to check if there is a skirt on a specified ironing board
    symbol has_skirt_on_board=exists o: item : is_clothes_skirt(o) and on(o, ironing_board)
    return has_skirt_on_board

behavior iron_skirt(skirt:item, iron:item):
    body:
        achieve close_char(char, skirt)
        # Ensure the character is close to the skirt
        achieve on(skirt, is_ironing_board)  # Ensure the skirt is on the ironing board
        achieve plugged(iron)  # Ensure the iron is plugged in
        achieve is_on(iron)  # Ensure the iron is turned on
        achieve clean(skirt)  # Ensure the skirt is ironed (clean state)

behavior __goal__():
    body:
        if exists ironing_board: item : is_ironing_board(ironing_board) and has_ironing_board_with_skirt(ironing_board):
            # If the ironing board with a skirt already exists, approach it
            bind ironing_board: item where:
                is_ironing_board(ironing_board) and has_ironing_board_with_skirt(ironing_board)
            # Select the skirt on the ironing board
            bind skirt: item where:
                is_clothes_skirt(skirt) and on(skirt, ironing_board)
            # Select an iron
            bind iron: item where:
                is_iron(iron)
            iron_skirt(skirt, iron)  # Iron the skirt
        else:
            # If no ironing board with a skirt is found, search for one
            foreach ironing_board: item:
                if is_ironing_board(ironing_board) and not visited(ironing_board):
                    observe(ironing_board, "Check if there is a skirt on the ironing board")

--------------------------------------------------------------------------------
Exploration: 
behavior find_clothes_skirt_2088_around_dresser_358(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_skirt,dresser_instance)
        else:
            exp(clothes_skirt,dresser_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,dresser_instance]=True
        close[dresser_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

################################################################################

Error: Error trying to process rule "function_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
--------------------------------------------------------------------------------
Goal:  
def is_suitable_pot(pot:item):
    # Function to check if an item is a suitable pot for boiling the vegetables
    symbol suitable_pot = is_pot(pot) and is_stove(stove) and on(pot, stove)
    return suitable_pot

def has_vegetables(pot:item):
    # Function to check if the pot has vegetables inside
    symbol has_vegetables_inside = exists v: item : is_food_vegetable(v) and inside(v, pot)
    return has_vegetables_inside

behavior boil_vegetables(pot:item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        assert has_vegetables(pot) # Check if the pot contains vegetables
        bind stove: item where:
            is_stove(stove) and on(pot, stove)
        achieve is_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and is_suitable_pot(pot) and has_vegetables(pot)
        boil_vegetables(pot) # Boil the vegetables in the suitable pot


--------------------------------------------------------------------------------
Exploration: 
behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_potato_2035_around_kitchen_counter_230(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function has_faucet not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior clean_food_food(food_food:item):
    # Define behavior to clean a fish
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink to clean the fish

        achieve close_char(char, sink)
        # Ensure the character is close to the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to clean

        wash(food_food)
        # Wash the fish

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # If the sink has a faucet, turn it off after cleaning

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item
        
        clean_food_food(fish)
        # Execute the cleaning behavior for the fish

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_food_2022_around_kitchen_counter_230(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_food_fish_2021_around_kitchen_counter_230(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

################################################################################

Error: Error trying to process rule "behavior_definition":

'Function has_faucet not found. Note that recursive function calls are not supported in the current version.'
--------------------------------------------------------------------------------
Goal:  
behavior wash_fish(fish:item, sink:item):
    body:
        achieve_once inside(fish, sink)
        # Ensure the fish is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the pool has a faucet, turn it on to wash the fish

        wash(fish)
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # If the pool has a faucet, turn it off after washing

def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select fish
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        wash_fish(fish, sink)

--------------------------------------------------------------------------------
Exploration: 
behavior find_food_fish_2021_around_kitchen_counter_230(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

################################################################################

