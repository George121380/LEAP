From agent.py
Reset goals: The sub-goals are: 
['Slice the chicken.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_cutting_board(kitchen_counter: item):
    # Function to check if there is a cutting board on the kitchen counter
    symbol has_cutting_board=exists o: item : is_cutting_board(o) and on(o, kitchen_counter)
    return has_cutting_board

behavior prepare_slicing(chicken: item, kitchen_counter: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board) # Place the chicken on the cutting board

behavior slice_chicken(chicken: item):
    body:
        achieve cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken to be sliced
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select a kitchen counter
        
        if has_cutting_board(kitchen_counter):
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
            # Select the cutting board on the kitchen counter
            prepare_slicing(chicken, kitchen_counter, cutting_board)
            slice_chicken(chicken)
        else:
            foreach counter: item:
                if is_kitchen_counter(counter) and not visited(counter):
                    observe(counter, "Check for a cutting board on the counter")
                    # If no cutting board is found, observe the counter to locate one

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_cutting_board(kitchen_counter: item):
    # Function to check if there is a cutting board on the kitchen counter
    symbol has_cutting_board=exists o: item : is_cutting_board(o) and on(o, kitchen_counter)
    return has_cutting_board

behavior prepare_slicing(chicken: item, kitchen_counter: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board) # Place the chicken on the cutting board

behavior slice_chicken(chicken: item):
    body:
        achieve cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken to be sliced
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select a kitchen counter
        
        if has_cutting_board(kitchen_counter):
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
            # Select the cutting board on the kitchen counter
            prepare_slicing(chicken, kitchen_counter, cutting_board)
            slice_chicken(chicken)
        else:
            foreach counter: item:
                if is_kitchen_counter(counter) and not visited(counter):
                    observe(counter, "Check for a cutting board on the counter")
                    # If no cutting board is found, observe the counter to locate one

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)obs(kitchen_counter_230, Check for a cutting board on the counter)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find cutting_board_2051. Find pot_2069. Find knife_2050. Find napkin_2005. Find drawing_238. Find drawing_239. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Find cup_2064. Find cup_2063. Find oil_2079. Find fryingpan_2083. Find tray_296. Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
obs(kitchen_counter_230, Check for a cutting board on the counter)
Get this information:  pot_2069 is on kitchen_counter_230. knife_2050 is on kitchen_counter_230. kitchen_counter_230 is facing drawing_238. kitchen_counter_230 is facing drawing_239. kitchen_counter_230 is facing drawing_240. kitchen_counter_230 is facing drawing_241. kitchen_counter_230 is facing drawing_242. kitchen_counter_230 is facing drawing_243. sink_231 is inside kitchen_counter_230. cup_2064 is on kitchen_counter_230. kitchen_counter_230 is close to knife_2050. kitchen_counter_230 is close to cutting_board_2051. kitchen_counter_230 is close to floor_7. kitchen_counter_230 is close to wall_11. kitchen_counter_230 is close to cup_2063. kitchen_counter_230 is close to cup_2064. kitchen_counter_230 is close to stove_2065. kitchen_counter_230 is close to wall_15. kitchen_counter_230 is close to pot_2069. kitchen_counter_230 is close to oil_2079. kitchen_counter_230 is close to stovefan_288. kitchen_counter_230 is close to fridge_289. kitchen_counter_230 is close to coffe_maker_290. kitchen_counter_230 is close to fryingpan_2083. kitchen_counter_230 is close to toaster_292. kitchen_counter_230 is close to toilet_37. kitchen_counter_230 is close to shower_36. kitchen_counter_230 is close to oven_295. kitchen_counter_230 is close to tray_296. kitchen_counter_230 is close to microwave_297. kitchen_counter_230 is close to drawing_174. kitchen_counter_230 is close to floor_202. kitchen_counter_230 is close to floor_203. kitchen_counter_230 is close to floor_204. kitchen_counter_230 is close to wall_211. kitchen_counter_230 is close to wall_212. kitchen_counter_230 is close to napkin_2005. kitchen_counter_230 is close to trashcan_99. kitchen_counter_230 is close to cupboard_229. kitchen_counter_230 is close to sink_231. kitchen_counter_230 is close to faucet_232. kitchen_counter_230 is close to drawing_239. kitchen_counter_230 is close to character_65. fryingpan_2083 is on kitchen_counter_230. microwave_297 is on kitchen_counter_230. cutting_board_2051 is on kitchen_counter_230. toaster_292 is on kitchen_counter_230. stove_2065 is on kitchen_counter_230. napkin_2005 is on kitchen_counter_230. faucet_232 is on kitchen_counter_230. coffe_maker_290 is on kitchen_counter_230. oil_2079 is on kitchen_counter_230. kitchen_counter_230 is inside dining_room_201. cup_2063 is on kitchen_counter_230. kitchen_counter_230 is CLEAN. kitchen_counter_230 is CLOSED.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place the chicken on the cutting board and slice it, as these actions have not been noted in the given sub-task actions. Make sure to execute the necessary steps to complete slicing the chicken.
##############################
From agent.py
Human Instruction: You need to place the chicken on the cutting board and slice it, as these actions have not been noted in the given sub-task actions. Make sure to execute the necessary steps to complete slicing the chicken.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: Observe around kitchen_counter_230 with the question of Check for a cutting board on the counter.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def has_cutting_board(counter:item):
    # Determine whether the counter has a cutting board
    symbol has_cutting_board=exists board: item : is_cutting_board(board) and on(board, counter)
    return has_cutting_board

behavior slice_chicken(chicken: item, board: item):
    body:
        achieve cut(chicken)
        # Ensure the chicken is cut on the cutting board

behavior __goal__():
    body:
        bind counter: item where:
            is_kitchen_counter(counter) and id[counter] == 230
        # Select the kitchen counter with ID 230

        if has_cutting_board(counter):
            # If a cutting board is found on the counter
            bind board: item where:
                is_cutting_board(board) and on(board, counter)
            # Select the cutting board on the counter

            bind chicken: item where:
                is_food_chicken(chicken) and on(chicken, board)
            # Select the chicken on the cutting board

            slice_chicken(chicken, board)
            # Slice the chicken on the cutting board

        else:
            # If no cutting board is found, observe the counter to find one
            observe(counter, "Check if there is a cutting board on the counter")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_cutting_board():
    body:
        if exists cutting_board: item : is_cutting_board(cutting_board) and close_char(char, cutting_board):
            achieve close_char(char, cutting_board)
        else:
            foreach cutting_board: item:
                if is_cutting_board(cutting_board) and not visited(cutting_board):
                    observe(cutting_board, "Look for cutting board on the counter")

behavior find_chicken():
    body:
        if exists chicken: item : is_food_chicken(chicken) and close_char(char, chicken):
            achieve close_char(char, chicken)
        else:
            foreach chicken: item:
                if is_food_chicken(chicken) and not visited(chicken):
                    observe(chicken, "Look for chicken in the kitchen")

behavior slice_chicken(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        achieve cut(chicken)

behavior __goal__():
    body:
        find_cutting_board()
        find_chicken()
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and close_char(char, cutting_board)
        
        bind chicken: item where:
            is_food_chicken(chicken) and close_char(char, chicken)
        
        slice_chicken(chicken, cutting_board)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cutting_board; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
behavior find_cutting_board():
    body:
        if exists cutting_board: item : is_cutting_board(cutting_board) and close_char(char, cutting_board):
            achieve close_char(char, cutting_board)
        else:
            foreach cutting_board: item:
                if is_cutting_board(cutting_board) and not visited(cutting_board):
                    observe(cutting_board, "Look for cutting board on the counter")

behavior find_chicken():
    body:
        if exists chicken: item : is_food_chicken(chicken) and close_char(char, chicken):
            achieve close_char(char, chicken)
        else:
            foreach chicken: item:
                if is_food_chicken(chicken) and not visited(chicken):
                    observe(chicken, "Look for chicken in the kitchen")

behavior slice_chicken(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        achieve cut(chicken)

behavior __goal__():
    body:
        find_cutting_board()
        find_chicken()
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and close_char(char, cutting_board)
        
        bind chicken: item where:
            is_food_chicken(chicken) and close_char(char, chicken)
        
        slice_chicken(chicken, cutting_board)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cutting_board; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_clothes_pants_2085_around_closetdrawer_122(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==122
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_pants,closetdrawer_instance)
        else:
            exp(clothes_pants,closetdrawer_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_pants]=True
    

#goal_representation
behavior find_cutting_board():
    body:
        if exists cutting_board: item : is_cutting_board(cutting_board) and close_char(char, cutting_board):
            achieve close_char(char, cutting_board)
        else:
            foreach cutting_board: item:
                if is_cutting_board(cutting_board) and not visited(cutting_board):
                    observe(cutting_board, "Look for cutting board on the counter")

behavior find_chicken():
    body:
        if exists chicken: item : is_food_chicken(chicken) and close_char(char, chicken):
            achieve close_char(char, chicken)
        else:
            foreach chicken: item:
                if is_food_chicken(chicken) and not visited(chicken):
                    observe(chicken, "Look for chicken in the kitchen")

behavior slice_chicken(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        achieve cut(chicken)

behavior __goal__():
    body:
        find_cutting_board()
        find_chicken()
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and close_char(char, cutting_board)
        
        bind chicken: item where:
            is_food_chicken(chicken) and close_char(char, chicken)
        
        slice_chicken(chicken, cutting_board)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def has_cutting_board():
    # Determine if there is a cutting board on the kitchen counter
    symbol has_board=exists cutting_board: item : is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
    return has_board

behavior setup_cutting():
    body:
        assert_hold close_char(char, kitchen_counter) # Ensure the character is close to the kitchen counter
        if not has_cutting_board():
            observe(kitchen_counter, "Check for any cutting board on the counter")
            # If cutting board is not observed, check the counter again for it

        if has_cutting_board():
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
            assert on(cutting_board, kitchen_counter)
            # Ensure cutting board is on the kitchen counter

behavior cut_chicken(chicken: item):
    body:
        assert is_food_chicken(chicken)
        achieve cut(chicken)
        # Achieve the state where the chicken is cut

behavior __goal__():
    body:
        symbol kitchen = exists k: item : is_kitchen(k)
        assert kitchen # Verify there is a kitchen present
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and inside(kitchen_counter, kitchen)
        
        bind chicken: item where:
            is_food_chicken(chicken) and close(chicken, kitchen_counter)
        # Choose a piece of chicken that is near the kitchen counter

        setup_cutting()
        # Prepare the cutting space

        cut_chicken(chicken)
        # Execute cutting of the chicken

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: kitchen_counter; available variables: [Variable<cutting_board: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
def has_cutting_board(kitchen_counter: item):
    # Determine if there is a cutting board on the kitchen counter
    symbol has_board = exists cutting_board: item : is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
    return has_board

behavior setup_cutting(kitchen_counter: item):
    body:
        assert_hold close_char(char, kitchen_counter) # Ensure the character is close to the kitchen counter
        if not has_cutting_board(kitchen_counter):
            observe(kitchen_counter, "Check for any cutting board on the counter")
            # If cutting board is not observed, check the counter again for it

        if has_cutting_board(kitchen_counter):
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
            assert on(cutting_board, kitchen_counter)
            # Ensure cutting board is on the kitchen counter

behavior cut_chicken(chicken: item):
    body:
        assert is_food_chicken(chicken)
        achieve cut(chicken)
        # Achieve the state where the chicken is cut

behavior __goal__():
    body:
        symbol kitchen = exists k: item : is_kitchen(k)
        assert kitchen # Verify there is a kitchen present
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and inside(kitchen_counter, kitchen)
        
        bind chicken: item where:
            is_food_chicken(chicken) and close(chicken, kitchen_counter)
        # Choose a piece of chicken that is near the kitchen counter

        setup_cutting(kitchen_counter)
        # Prepare the cutting space

        cut_chicken(chicken)
        # Execute cutting of the chicken

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Error during applying inside[observation, state](x: item, y: item).
  Arguments: V::kitchen_counter, V::kitchen
Argument #1 type does not match: expect item, got bool.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
def has_cutting_board(kitchen_counter: item):
    # Determine if there is a cutting board on the kitchen counter
    symbol has_board = exists cutting_board: item : is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
    return has_board

behavior setup_cutting(kitchen_counter: item):
    body:
        assert_hold close_char(char, kitchen_counter) # Ensure the character is close to the kitchen counter
        if not has_cutting_board(kitchen_counter):
            observe(kitchen_counter, "Check for any cutting board on the counter")
            # If cutting board is not observed, check the counter again for it

        if has_cutting_board(kitchen_counter):
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
            assert on(cutting_board, kitchen_counter)
            # Ensure cutting board is on the kitchen counter

behavior cut_chicken(chicken: item):
    body:
        assert is_food_chicken(chicken)
        achieve cut(chicken)
        # Achieve the state where the chicken is cut

behavior __goal__():
    body:
        symbol kitchen_present = exists k: item : is_kitchen(k)
        assert kitchen_present # Verify there is a kitchen present
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and exists k: item : is_kitchen(k) and inside(kitchen_counter, k)
        
        bind chicken: item where:
            is_food_chicken(chicken) and close(chicken, kitchen_counter)
        # Choose a piece of chicken that is near the kitchen counter

        setup_cutting(kitchen_counter)
        # Prepare the cutting space

        cut_chicken(chicken)
        # Execute cutting of the chicken

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
