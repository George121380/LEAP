From agent.py
Reset goals: The sub-goals are: 
['1. Brew a cup of coffee using the coffee maker.', '2. Add milk and sugar to the brewed coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

behavior fill_water_tank(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Make sure the coffee maker has water to brew the coffee

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

behavior brew_coffee(using:coffee_maker):
    body:
        achieve inside(coffee:item, using)
        # Brew the coffee using the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        plug_in_coffee_maker(coffee_maker)
        fill_water_tank(coffee_maker)
        turn_on_coffee_maker(coffee_maker)
        brew_coffee(coffee_maker)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5635, column 30.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

behavior fill_water_tank(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Make sure the coffee maker has water to brew the coffee

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

behavior brew_coffee(using:coffee_maker):
    body:
        achieve inside(coffee:item, using)
        # Brew the coffee using the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        plug_in_coffee_maker(coffee_maker)
        fill_water_tank(coffee_maker)
        turn_on_coffee_maker(coffee_maker)
        brew_coffee(coffee_maker)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5635, column 30.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

behavior fill_water_tank(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Make sure the coffee maker has water to brew the coffee

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

behavior brew_coffee(using:coffee_maker):
    body:
        achieve inside(coffee:item, using)
        # Brew the coffee using the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        plug_in_coffee_maker(coffee_maker)
        fill_water_tank(coffee_maker)
        turn_on_coffee_maker(coffee_maker)
        brew_coffee(using=coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_388(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_ready_to_brew(coffee_maker:item):
    # Function to check if the coffee maker is ready to brew coffee
    symbol ready=plugged(coffee_maker) and has_water(coffee_maker) and closed(coffee_maker)
    return ready

behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

behavior __goal__():
    body:
        # Select a coffee maker
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        if is_ready_to_brew(coffee_maker):
            brew_coffee(coffee_maker)
            # Brew the coffee if the coffee maker is ready
        else:
            # Otherwise, observe the coffee maker to gather necessary information
            observe(coffee_maker,"Check if plugged, has water, and closed for brewing coffee")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_ready_to_brew(coffee_maker:item):
    # Function to check if the coffee maker is ready to brew coffee
    symbol ready=plugged(coffee_maker) and has_water(coffee_maker) and closed(coffee_maker)
    return ready

behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

behavior __goal__():
    body:
        # Select a coffee maker
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        if is_ready_to_brew(coffee_maker):
            brew_coffee(coffee_maker)
            # Brew the coffee if the coffee maker is ready
        else:
            # Otherwise, observe the coffee maker to gather necessary information
            observe(coffee_maker,"Check if plugged, has water, and closed for brewing coffee")

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Check if plugged, has water, and closed for brewing coffee)
##############################
From agent.py
walk_executor(coffe_maker_290)
Find cutting_board_2051. Find pot_2069. Find knife_2050. Find napkin_2005. Find drawing_238. Find drawing_239. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Find cup_2064. Find cup_2063. Find oil_2079. Find fryingpan_2083. Find tray_296. Robot is inside the dining_room_201. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
open_executor(coffe_maker_290)
Find drawing_174. Robot is inside the dining_room_201. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
obs(coffe_maker_290, Check if plugged, has water, and closed for brewing coffee)
Get this information:  coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is CLEAN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OFF. coffe_maker_290 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The coffee maker needs to be closed and filled with water before it is ready to brew. The coffee maker should also be turned on to start the brewing process.
##############################
From agent.py
Human Instruction: The coffee maker needs to be closed and filled with water before it is ready to brew. The coffee maker should also be turned on to start the brewing process.

The actions you have taken:
Action 1: Walk to coffe_maker_290.
Action 2: Open coffe_maker_290.
Action 3: Invalid parameter input.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_with_water(coffe_maker:item):
    body:
        achieve has_water(coffe_maker)

behavior close_coffe_maker(coffe_maker:item):
    body:
        achieve closed(coffe_maker)

behavior turn_on_coffe_maker(coffe_maker:item):
    body:
        achieve is_on(coffe_maker)

behavior brew_coffee(coffe_maker:item):
    body:
        fill_with_water(coffe_maker)
        close_coffe_maker(coffe_maker)
        turn_on_coffe_maker(coffe_maker)

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker]==290
        brew_coffee(coffe_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_with_water(coffe_maker:item):
    body:
        achieve has_water(coffe_maker)

behavior close_coffe_maker(coffe_maker:item):
    body:
        achieve closed(coffe_maker)

behavior turn_on_coffe_maker(coffe_maker:item):
    body:
        achieve is_on(coffe_maker)

behavior brew_coffee(coffe_maker:item):
    body:
        fill_with_water(coffe_maker)
        close_coffe_maker(coffe_maker)
        turn_on_coffe_maker(coffe_maker)

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker]==290
        brew_coffee(coffe_maker)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(faucet_232)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. Robot is no longer close coffe_maker_290.
##############################
From agent.py
switchon_executor(faucet_232)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. Robot is no longer close faucet_232.
##############################
From agent.py
close_executor(coffe_maker_290)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_milk_and_sugar(coffee: item, milk: item, sugar: item):
    body:
        achieve_once inhand(milk)
        # Temporarily hold the milk to add it to the coffee
        
        achieve_once inhand(sugar)
        # Temporarily hold the sugar to add it to the coffee
        
        achieve inside(milk, coffee)
        # Pour milk into the coffee
        
        achieve inside(sugar, coffee)
        # Add sugar to the coffee

behavior __goal__():
    body:
        bind coffee: item where:
            is_cup(coffee) and drinkable(coffee)
        # Select the brewed coffee in a cup
        
        bind milk: item where:
            is_milk(milk) and pourable(milk)
        # Select the milk that can be added to coffee
        
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select the sugar to be added to the coffee
        
        add_milk_and_sugar(coffee, milk, sugar)
        # Add milk and sugar to the brewed coffee

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_milk_cup(milk:item, cup:item):
    body:
        achieve inside(milk, cup) 
        # Ensure the milk is poured inside the coffee cup

behavior add_sugar_to_cup(sugar:item, cup:item):
    body:
        achieve inside(sugar, cup) 
        # Ensure the sugar is inside the coffee cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup to add milk and sugar to the brewed coffee
        
        bind milk: item where:
            is_milk(milk)
        # Select milk to be added to coffee
        
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar to be added to coffee
        
        pour_milk_cup(milk, cup)
        add_sugar_to_cup(sugar, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior pour_milk_cup(milk:item, cup:item):
    body:
        achieve inside(milk, cup) 
        # Ensure the milk is poured inside the coffee cup

behavior add_sugar_to_cup(sugar:item, cup:item):
    body:
        achieve inside(sugar, cup) 
        # Ensure the sugar is inside the coffee cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup to add milk and sugar to the brewed coffee
        
        bind milk: item where:
            is_milk(milk)
        # Select milk to be added to coffee
        
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar to be added to coffee
        
        pour_milk_cup(milk, cup)
        add_sugar_to_cup(sugar, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_sugar_2039, cupboard_229)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the floor_202. Robot is close to the floor_203. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Robot is no longer close coffe_maker_290.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the floor_202. Robot is close to the floor_203. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the floor_202. Robot is close to the floor_203. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
grab_executor(milk_2043)
Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the floor_202. Robot is close to the floor_203. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot is inside the dining_room_201. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot is inside the dining_room_201. Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_sugar_2039)
Robot is inside the dining_room_201. Robot is close to the fridge_289. Robot is close to the food_sugar_2039. Robot is no longer close milk_2043.Robot is no longer close kitchen_counter_230.Robot is no longer close cup_2063.
##############################
From agent.py
grab_executor(food_sugar_2039)
Robot is inside the dining_room_201. Robot is close to the fridge_289. Robot is close to the food_sugar_2039. Grabbing food_sugar_2039 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot is inside the dining_room_201. Robot is close to the food_sugar_2039. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is no longer close fridge_289.
##############################
From agent.py
putin_executor(food_sugar_2039, cup_2063)
Robot is inside the dining_room_201. Robot is close to the food_sugar_2039. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. food_sugar_2039 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
make a cup of coffee using the coffee maker, then add milk and sugar.
Action History:
['walk_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'walk_executor(faucet_232)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'walk_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)', 'walk_executor(food_sugar_2039)', 'grab_executor(food_sugar_2039)', 'walk_executor(cup_2063)', 'putin_executor(food_sugar_2039, cup_2063)']
Time info:
Time consume: 114 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 5
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 9 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
