From agent.py
Reset goals: The sub-goals are: 
['1. Find and prepare the boiled egg, lemon, and vegetables for the salad.', '2. Combine the prepared ingredients into a bowl to make the egg salad.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_prepare_items(egg:item, lemon:item, vegetables:item_list):
    body:
        achieve_once visited(egg)
        achieve_once visited(lemon)
        foreach vegetable: item in vegetables:
            achieve_once visited(vegetable)

behavior clean_items(egg:item, lemon:item, vegetables:item_list):
    body:
        achieve clean(egg)
        achieve clean(lemon)
        foreach vegetable: item in vegetables:
            achieve clean(vegetable)

def find_vegetables():
    symbol found_vegetables = exists vegetable: item : (is_food_vegetable(vegetable) and not visited(vegetable))
    return found_vegetables

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and not visited(egg)

        bind lemon: item where:
            is_food_lemon(lemon) and not visited(lemon)

        items vegetables: item_list
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable) and find_vegetables():
                vegetablesappend(vegetable)

        find_and_prepare_items(egg, lemon, vegetables)
        clean_items(egg, lemon, vegetables)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 5774, column 33.
Expected one of: 
	* COMMA
	* COLON
	* LSQB
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#goal_representation

behavior find_and_prepare_items(egg:item, lemon:item, vegetables:item_list):
    body:
        achieve_once visited(egg)
        achieve_once visited(lemon)
        foreach vegetable: item in vegetables:
            achieve_once visited(vegetable)

behavior clean_items(egg:item, lemon:item, vegetables:item_list):
    body:
        achieve clean(egg)
        achieve clean(lemon)
        foreach vegetable: item in vegetables:
            achieve clean(vegetable)

def find_vegetables():
    symbol found_vegetables = exists vegetable: item : (is_food_vegetable(vegetable) and not visited(vegetable))
    return found_vegetables

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and not visited(egg)

        bind lemon: item where:
            is_food_lemon(lemon) and not visited(lemon)

        items vegetables: item_list
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable) and find_vegetables():
                vegetablesappend(vegetable)

        find_and_prepare_items(egg, lemon, vegetables)
        clean_items(egg, lemon, vegetables)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 5774, column 33.
Expected one of: 
	* COMMA
	* COLON
	* LSQB
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior find_and_prepare_items(egg:item, lemon:item, vegetables:item_list):
    body:
        achieve_once visited(egg)
        achieve_once visited(lemon)
        foreach vegetable: item in vegetables:
            achieve_once visited(vegetable)

behavior clean_items(egg:item, lemon:item, vegetables:item_list):
    body:
        achieve clean(egg)
        achieve clean(lemon)
        foreach vegetable: item in vegetables:
            achieve clean(vegetable)

def find_vegetables():
    symbol found_vegetables = exists vegetable: item : (is_food_vegetable(vegetable) and not visited(vegetable))
    return found_vegetables

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and not visited(egg)

        bind lemon: item where:
            is_food_lemon(lemon) and not visited(lemon)

        items vegetables: item_list
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable) and find_vegetables():
                vegetablesappend(vegetable)

        find_and_prepare_items(egg, lemon, vegetables)
        clean_items(egg, lemon, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_food_item_on_cutting_board(food_item:item):
    body:
        achieve_once on(food_item, cutting_board)

behavior inspect_item(item:item):
    body:
        achieve_once visited(item)

behavior clean_item(item:item):
    body:
        achieve clean(item)

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        foreach egg: item:
            if is_food_egg(egg) and not visited(egg):
                find_food_item_on_cutting_board(egg)
                inspect_item(egg)
        
        foreach lemon: item:
            if is_food_lemon(lemon) and not visited(lemon):
                find_food_item_on_cutting_board(lemon)
                inspect_item(lemon)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                find_food_item_on_cutting_board(vegetable)
                inspect_item(vegetable)
        
        foreach egg: item:
            if is_food_egg(egg) and visited(egg) and dirty(egg):
                clean_item(egg)

        foreach lemon: item:
            if is_food_lemon(lemon) and visited(lemon) and dirty(lemon):
                clean_item(lemon)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and visited(vegetable) and dirty(vegetable):
                clean_item(vegetable)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cutting_board; available variables: [Variable<food_item: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#goal_representation
behavior find_food_item_on_cutting_board(food_item:item, cutting_board:item):
    body:
        achieve_once on(food_item, cutting_board)

behavior inspect_item(item:item):
    body:
        achieve_once visited(item)

behavior clean_item(item:item):
    body:
        achieve clean(item)

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        foreach egg: item:
            if is_food_egg(egg) and not visited(egg):
                find_food_item_on_cutting_board(egg, cutting_board)
                inspect_item(egg)

        foreach lemon: item:
            if is_food_lemon(lemon) and not visited(lemon):
                find_food_item_on_cutting_board(lemon, cutting_board)
                inspect_item(lemon)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                find_food_item_on_cutting_board(vegetable, cutting_board)
                inspect_item(vegetable)

        foreach egg: item:
            if is_food_egg(egg) and visited(egg) and dirty(egg):
                clean_item(egg)

        foreach lemon: item:
            if is_food_lemon(lemon) and visited(lemon) and dirty(lemon):
                clean_item(lemon)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and visited(vegetable) and dirty(vegetable):
                clean_item(vegetable)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_food_item_on_cutting_board(food_item:item, cutting_board:item):
    body:
        achieve_once on(food_item, cutting_board)

behavior inspect_item(item:item):
    body:
        achieve_once visited(item)

behavior clean_item(item:item):
    body:
        achieve clean(item)

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        foreach egg: item:
            if is_food_egg(egg) and not visited(egg):
                find_food_item_on_cutting_board(egg, cutting_board)
                inspect_item(egg)

        foreach lemon: item:
            if is_food_lemon(lemon) and not visited(lemon):
                find_food_item_on_cutting_board(lemon, cutting_board)
                inspect_item(lemon)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                find_food_item_on_cutting_board(vegetable, cutting_board)
                inspect_item(vegetable)

        foreach egg: item:
            if is_food_egg(egg) and visited(egg) and dirty(egg):
                clean_item(egg)

        foreach lemon: item:
            if is_food_lemon(lemon) and visited(lemon) and dirty(lemon):
                clean_item(lemon)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and visited(vegetable) and dirty(vegetable):
                clean_item(vegetable)
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(food_egg_2053)obs(food_egg_2053, look around this place)walk_executor(fridge_140)exp(food_lemon_2061, fridge_140)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(food_lemon_2061)obs(food_lemon_2061, look around this place)walk_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(food_vegetable_2072)obs(food_vegetable_2072, look around this place)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_egg_2053, fridge_140)
Find food_egg_2053. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(food_egg_2053)obs(food_egg_2053, look around this place)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(cutting_board_2080)put_executor(food_lemon_2061, cutting_board_2080)walk_executor(food_lemon_2061)obs(food_lemon_2061, look around this place)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(food_vegetable_2072)obs(food_vegetable_2072, look around this place)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_egg_2053, cutting_board_2080)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. cutting_board_2080 is close food_egg_2053. food_egg_2053 is close cutting_board_2080. food_egg_2053 is on cutting_board_2080. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the food_egg_2053. Robot is close to the cutting_board_2080. 
##############################
From agent.py
obs(food_egg_2053, look around this place)
Get this information:  food_egg_2053 is close to character_219. food_egg_2053 is close to cutting_board_2080. food_egg_2053 is inside dining_room_1. food_egg_2053 is on cutting_board_2080. food_egg_2053 is CLEAN.
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the fridge_140. Robot is close to the food_lemon_2061. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the fridge_140. Robot is close to the food_lemon_2061. Grabbing food_lemon_2061 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_lemon_2061, cutting_board_2080)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_lemon_2061 is close cutting_board_2080. cutting_board_2080 is close food_lemon_2061. food_lemon_2061 is on cutting_board_2080. food_lemon_2061 released by right hand. 
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the food_lemon_2061. Robot is close to the cutting_board_2080. 
##############################
From agent.py
obs(food_lemon_2061, look around this place)
Get this information:  food_lemon_2061 is close to character_219. food_lemon_2061 is close to cutting_board_2080. food_lemon_2061 is inside dining_room_1. food_lemon_2061 is on cutting_board_2080. food_lemon_2061 is CLEAN.
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
put_executor(food_vegetable_2072, cutting_board_2080)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. food_vegetable_2072 is close cutting_board_2080. cutting_board_2080 is close food_vegetable_2072. food_vegetable_2072 is on cutting_board_2080. food_vegetable_2072 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. 
##############################
From agent.py
obs(food_vegetable_2072, look around this place)
Get this information:  food_vegetable_2072 is close to character_219. food_vegetable_2072 is close to cutting_board_2080. food_vegetable_2072 is inside dining_room_1. food_vegetable_2072 is on cutting_board_2080. food_vegetable_2072 is DIRTY.
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. food_vegetable_2072 is cleaned. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: pot_54, Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_bowl_2095_around_kitchen_counter_129(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_ingredients_in_bowl(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(lemon, bowl)
        achieve_once inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and visited(egg)

        bind lemon: item where:
            is_food_lemon(lemon) and visited(lemon)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and visited(vegetables)

        bind bowl: item where:
            is_bowl(bowl)

        place_ingredients_in_bowl(egg, lemon, vegetables, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_ingredients_in_bowl(egg:item, lemon:item, vegetables:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(lemon, bowl)
        achieve_once inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and visited(egg)

        bind lemon: item where:
            is_food_lemon(lemon) and visited(lemon)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and visited(vegetables)

        bind bowl: item where:
            is_bowl(bowl)

        place_ingredients_in_bowl(egg, lemon, vegetables, bowl)

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_bowl_2095_around_kitchen_counter_129(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients_in_bowl(egg: item, lemon: item, vegetables: item, bowl: item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(lemon, bowl)
        achieve_once inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        
        bind lemon: item where:
            is_food_lemon(lemon)
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        
        bind bowl: item where:
            is_bowl(bowl)
        
        combine_ingredients_in_bowl(egg, lemon, vegetables, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior combine_ingredients_in_bowl(egg: item, lemon: item, vegetables: item, bowl: item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(lemon, bowl)
        achieve_once inside(vegetables, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        
        bind lemon: item where:
            is_food_lemon(lemon)
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        
        bind bowl: item where:
            is_bowl(bowl)
        
        combine_ingredients_in_bowl(egg, lemon, vegetables, bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(bowl_2096, kitchen_counter_129)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(bowl_2096)putin_executor(food_egg_2053, bowl_2096)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(bowl_2096)putin_executor(food_lemon_2061, bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(bowl_2096, kitchen_counter_129)
Fail to find bowl_2096 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(bowl_2096, table_127)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(bowl_2096)putin_executor(food_egg_2053, bowl_2096)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(bowl_2096)putin_executor(food_lemon_2061, bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, drawing_118, Robot is close to the food_vegetable_2072. Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(bowl_2096, table_127)
Find bowl_2096. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(bowl_2096)putin_executor(food_egg_2053, bowl_2096)walk_executor(food_lemon_2061)grab_executor(food_lemon_2061)walk_executor(bowl_2096)putin_executor(food_lemon_2061, bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(food_egg_2053)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. 
##############################
From agent.py
grab_executor(food_egg_2053)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the food_egg_2053. Grabbing food_egg_2053 by left hand. 
##############################
From agent.py
walk_executor(bowl_2096)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_egg_2053. Robot is close to the bowl_2096. Robot is close to the table_127. 
##############################
From agent.py
putin_executor(food_egg_2053, bowl_2096)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_egg_2053. Robot is close to the bowl_2096. Robot is close to the table_127. bowl_2096 is close food_egg_2053. food_egg_2053 is close bowl_2096. food_egg_2053 is inside bowl_2096. food_egg_2053 released by left hand. 
##############################
From agent.py
walk_executor(food_lemon_2061)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. 
##############################
From agent.py
grab_executor(food_lemon_2061)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the cutting_board_2080. Robot is close to the food_lemon_2061. Grabbing food_lemon_2061 by left hand. 
##############################
From agent.py
walk_executor(bowl_2096)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_lemon_2061. Robot is close to the bowl_2096. Robot is close to the table_127. 
##############################
From agent.py
putin_executor(food_lemon_2061, bowl_2096)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_lemon_2061. Robot is close to the bowl_2096. Robot is close to the table_127. food_lemon_2061 is close bowl_2096. bowl_2096 is close food_lemon_2061. food_lemon_2061 is inside bowl_2096. food_lemon_2061 released by left hand. 
##############################
From agent.py
putin_executor(food_vegetable_2072, bowl_2096)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the food_lemon_2061. Robot is close to the bowl_2096. Robot is close to the table_127. food_vegetable_2072 is close bowl_2096. bowl_2096 is close food_vegetable_2072. food_vegetable_2072 is inside bowl_2096. food_vegetable_2072 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make a bowl of egg salad with boiled egg, lemon, and vegetables.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_egg_2053)', 'walk_executor(cutting_board_2080)', 'put_executor(food_egg_2053, cutting_board_2080)', 'walk_executor(food_egg_2053)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(cutting_board_2080)', 'put_executor(food_lemon_2061, cutting_board_2080)', 'walk_executor(food_lemon_2061)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(cutting_board_2080)', 'put_executor(food_vegetable_2072, cutting_board_2080)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'wash_executor(food_vegetable_2072)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(kitchen_counter_129)', 'walk_executor(table_127)', 'walk_executor(food_egg_2053)', 'grab_executor(food_egg_2053)', 'walk_executor(bowl_2096)', 'putin_executor(food_egg_2053, bowl_2096)', 'walk_executor(food_lemon_2061)', 'grab_executor(food_lemon_2061)', 'walk_executor(bowl_2096)', 'putin_executor(food_lemon_2061, bowl_2096)', 'putin_executor(food_vegetable_2072, bowl_2096)']
Time info:
Time consume: 326 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 63
goal generate times: 4
goal correct times: 1
action_num: 32

Task complete rate:
Keystate: k1 - Requires: 12 steps
Keystate: k2 - Requires: 23 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
