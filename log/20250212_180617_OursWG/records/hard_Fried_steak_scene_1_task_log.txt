From agent.py
Reset goals: The sub-goals are: 
['1. Fry the steak.', '2. Cut the steak.', '3. Put the steak on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_food_steak_2080_around_fridge_126(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

#exp_behavior_end

#goal_representation

behavior place_steak_on_pan(steak:item, pan:item):
    body:
        achieve_once inside(steak, pan)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is on
        
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, stove)
        # Select a frying pan that is on the stove

        place_steak_on_pan(steak, frying_pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_steak_2080_around_fridge_126(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_123(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation

behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(pan:item, oil:item):
    body:
        achieve_once inside(oil, pan)

behavior place_steak_in_pan(steak:item, pan:item):
    body:
        achieve_once inside(steak, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind steak: item where:
            is_food_steak(steak)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        add_oil_to_pan(pan, oil)
        turn_on_stove(stove)
        place_steak_in_pan(steak, pan)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(pan:item, oil:item):
    body:
        achieve_once inside(oil, pan)

behavior place_steak_in_pan(steak:item, pan:item):
    body:
        achieve_once inside(steak, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind steak: item where:
            is_food_steak(steak)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        add_oil_to_pan(pan, oil)
        turn_on_stove(stove)
        place_steak_in_pan(steak, pan)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(fryingpan_2154, kitchen_counter_123)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)walk_executor(kitchen_counter_122)exp(oil_2149, kitchen_counter_122)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_steak_2080, fridge_126)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)putin_executor(food_steak_2080, fryingpan_2154)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_123)
Fail to find fryingpan_2154 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_steak_2080, fridge_126)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)putin_executor(food_steak_2080, fryingpan_2154)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(fryingpan_2154, stove_2135)
Fail to find fryingpan_2154 around stove_2135. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Fry the steak, then cut it and put it on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_fryingpan_2154_around_microwave_135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(fryingpan,microwave_instance)
        else:
            exp(fryingpan,microwave_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,microwave_instance]=True
        close[microwave_instance,fryingpan]=True
    

behavior find_food_steak_2080_around_fridge_126(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_on_pan(steak:item, pan:item):
    body:
        achieve_once inside(steak, pan)

behavior cut_steak(steak:item, knife:item, cutting_board:item):
    body:
        achieve_once on(steak, cutting_board)
        achieve_once cut(steak)

behavior place_steak_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)

        bind stove: item where:
            is_stove(stove) and is_on(stove)

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        bind plate: item where:
            is_plate(plate)

        place_steak_on_pan(steak, pan)
        cut_steak(steak, knife, cutting_board)
        place_steak_on_plate(steak, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_fridge_126(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(oil,fridge_instance)
        else:
            exp(oil,fridge_instance)
    eff:
        unknown[oil]=False
        close[oil,fridge_instance]=True
        close[fridge_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_fryingpan_2154_around_sink_19(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(fryingpan,sink_instance)
        else:
            exp(fryingpan,sink_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,sink_instance]=True
        close[sink_instance,fryingpan]=True
    

behavior find_food_steak_2080_around_fridge_126(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

#exp_behavior_end

#goal_representation
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior fry_steak(steak:item, fryingpan:item):
    body:
        achieve_once inside(steak, fryingpan)

behavior cut_steak(steak:item, knife:item, cutting_board:item):
    body:
        achieve_once on(steak, cutting_board)
        achieve_once cut(steak)

behavior place_steak_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind steak: item where:
            is_food_steak(steak)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        bind plate: item where:
            is_plate(plate)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        add_oil_to_pan(oil, pan)
        turn_on_stove(stove)
        fry_steak(steak, pan)
        cut_steak(steak, knife, cutting_board)
        place_steak_on_plate(steak, plate)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior fry_steak(steak:item, fryingpan:item):
    body:
        achieve_once inside(steak, fryingpan)

behavior cut_steak(steak:item, knife:item, cutting_board:item):
    body:
        achieve_once on(steak, cutting_board)
        achieve_once cut(steak)

behavior place_steak_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind steak: item where:
            is_food_steak(steak)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        bind plate: item where:
            is_plate(plate)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        add_oil_to_pan(oil, pan)
        turn_on_stove(stove)
        fry_steak(steak, pan)
        cut_steak(steak, knife, cutting_board)
        place_steak_on_plate(steak, plate)
##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)exp(fryingpan_2154, sink_19)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_steak_2080, fridge_126)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)putin_executor(food_steak_2080, fryingpan_2154)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(cutting_board_2123)put_executor(food_steak_2080, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_steak_2080)cut_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(plate_2152)put_executor(food_steak_2080, plate_2152)
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, mat_32, phone_2029, cleaning_solution_2143, drawing_33, Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
exp(fryingpan_2154, sink_19)
Fail to find fryingpan_2154 around sink_19. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(fryingpan_2154, cupboard_117)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_steak_2080, fridge_126)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)putin_executor(food_steak_2080, fryingpan_2154)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(cutting_board_2123)put_executor(food_steak_2080, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_steak_2080)cut_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(plate_2152)put_executor(food_steak_2080, plate_2152)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_117)
Fail to find fryingpan_2154 around cupboard_117. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fry the steak.', '2. Cut the fried steak.', '3. Put the steak pieces on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_fridge_126(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(oil,fridge_instance)
        else:
            exp(oil,fridge_instance)
    eff:
        unknown[oil]=False
        close[oil,fridge_instance]=True
        close[fridge_instance,oil]=True
    

behavior find_food_steak_2080_around_fridge_126(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior place_steak_in_pan(steak:item, pan:item):
    body:
        achieve_once inside(steak, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind steak: item where:
            is_food_steak(steak)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        add_oil_to_pan(oil, pan)
        turn_on_stove(stove)
        place_steak_in_pan(steak, pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_fridge_126(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(oil,fridge_instance)
        else:
            exp(oil,fridge_instance)
    eff:
        unknown[oil]=False
        close[oil,fridge_instance]=True
        close[fridge_instance,oil]=True
    

behavior find_fryingpan_2154_around_fridge_126(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(fryingpan,fridge_instance)
        else:
            exp(fryingpan,fridge_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,fridge_instance]=True
        close[fridge_instance,fryingpan]=True
    

behavior find_food_steak_2080_around_fridge_126(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_fryingpan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior fry_steak(steak:item, pan:item, stove:item):
    body:
        achieve_once inside(steak, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind steak: item where:
            is_food_steak(steak)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        turn_on_stove(stove)
        add_oil_to_fryingpan(oil, pan)
        fry_steak(steak, pan, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_fryingpan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior fry_steak(steak:item, pan:item, stove:item):
    body:
        achieve_once inside(steak, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind steak: item where:
            is_food_steak(steak)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        turn_on_stove(stove)
        add_oil_to_fryingpan(oil, pan)
        fry_steak(steak, pan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(fryingpan_2154, fridge_126)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(fridge_126)exp(food_steak_2080, fridge_126)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)putin_executor(food_steak_2080, fryingpan_2154)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(fryingpan_2154, fridge_126)
Fail to find fryingpan_2154 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(fryingpan_2154, cupboard_118)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)putin_executor(food_steak_2080, fryingpan_2154)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find fryingpan_2154 ?
Answer: The target item, fryingpan_2154, is located on kitchen_counter_122, which is inside dining_room_41. Please proceed to the dining room, locate kitchen_counter_122, and retrieve fryingpan_2154 from on top of the counter.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, fryingpan_2154, is located on kitchen_counter_122, which is inside dining_room_41. Please proceed to the dining room, locate kitchen_counter_122, and retrieve fryingpan_2154 from on top of the counter.

The actions you have taken:
Action 1: Walk to kitchen_counter_123.
Action 2: look for fryingpan_2154 around kitchen_counter_123.
Action 3: Walk to stove_2135.
Action 4: Open stove_2135.
Action 5: look for fryingpan_2154 around stove_2135.
Action 6: Walk to sink_19.
Action 7: look for fryingpan_2154 around sink_19.
Action 8: Walk to cupboard_117.
Action 9: look for fryingpan_2154 around cupboard_117.
Action 10: Walk to fridge_126.
Action 11: Switch off fridge_126.
Action 12: Open fridge_126.
Action 13: look for fryingpan_2154 around fridge_126.
Action 14: Walk to cupboard_118.
Action 15: Open cupboard_118.

##############################
From agent.py
exp(fryingpan_2154, cupboard_118)
Fail to find fryingpan_2154 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)putin_executor(food_steak_2080, fryingpan_2154)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)putin_executor(food_steak_2080, fryingpan_2154)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. 
##############################
From agent.py
obs(fryingpan_2154, look around this place)
Get this information:  fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to character_240. fryingpan_2154 is on kitchen_counter_122. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. Grabbing fryingpan_2154 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close fryingpan_2154. fryingpan_2154 is close stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(oil_2149)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. 
##############################
From agent.py
grab_executor(oil_2149)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. Grabbing oil_2149 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(oil_2149, fryingpan_2154)
Robot find: Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. oil_2149 is inside fryingpan_2154. fryingpan_2154 is close oil_2149. oil_2149 is close fryingpan_2154. oil_2149 released by right hand. 
##############################
From agent.py
walk_executor(food_steak_2080)
Robot find: Robot is close to the food_steak_2080. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_steak_2080)
Robot find: Robot is close to the food_steak_2080. Robot is close to the fridge_126. Grabbing food_steak_2080 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_steak_2080. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_steak_2080, fryingpan_2154)
Robot find: Robot is close to the food_steak_2080. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. food_steak_2080 is inside fryingpan_2154. food_steak_2080 is close fryingpan_2154. fryingpan_2154 is close food_steak_2080. food_steak_2080 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_on_board(steak:item, board:item):
    body:
        achieve_once on(steak, board)

behavior cut_the_steak(steak:item, knife:item):
    body:
        achieve_once cut(steak)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        place_steak_on_board(steak, cutting_board)
        cut_the_steak(steak, knife)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_steak_on_board(steak:item, board:item):
    body:
        achieve_once on(steak, board)

behavior cut_the_steak(steak:item, knife:item):
    body:
        achieve_once cut(steak)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        place_steak_on_board(steak, cutting_board)
        cut_the_steak(steak, knife)

##############################
From agent.py-> find a plan in act()
grab_executor(food_steak_2080)walk_executor(cutting_board_2123)put_executor(food_steak_2080, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_steak_2080)cut_executor(food_steak_2080)
##############################
From agent.py
grab_executor(food_steak_2080)
Robot find: Robot is close to the food_steak_2080. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. Grabbing food_steak_2080 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_steak_2080, cutting_board_2123)
Robot find: Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_steak_2080. food_steak_2080 is close cutting_board_2123. food_steak_2080 is on cutting_board_2123. food_steak_2080 released by right hand. 
##############################
From agent.py
walk_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. 
##############################
From agent.py
grab_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. Grabbing knife_2035 by right hand. 
##############################
From agent.py
walk_executor(food_steak_2080)
Robot find: Robot is close to the knife_2035. Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_steak_2080)
Robot find: Robot is close to the knife_2035. Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_pieces_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate)

        place_steak_pieces_on_plate(steak, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_tray_128_around_tray_2068(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(tray,tray_instance)
        else:
            exp(tray,tray_instance)
    eff:
        unknown[tray]=False
        close[tray,tray_instance]=True
        close[tray_instance,tray]=True
    

#exp_behavior_end

#goal_representation
behavior place_steak_pieces_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak pieces

        bind plate: item where:
            is_plate(plate)
        # Select a plate to place the steak pieces on

        place_steak_pieces_on_plate(steak, plate)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_pieces_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        place_steak_pieces_on_plate(steak, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. put the steak pieces on a plate." ?
Answer: After slicing the steak, put it on a plate.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2073_around_plate_2152(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_food,plate_instance)
        else:
            exp(food_food,plate_instance)
    eff:
        unknown[food_food]=False
        close[food_food,plate_instance]=True
        close[plate_instance,food_food]=True
    

behavior find_cup_2133_around_plate_2152(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(cup,plate_instance)
        else:
            exp(cup,plate_instance)
    eff:
        unknown[cup]=False
        close[cup,plate_instance]=True
        close[plate_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior place_steak_pieces_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak pieces

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_steak_pieces_on_plate(steak, plate)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cup_2049_around_plate_2152(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(cup,plate_instance)
        else:
            exp(cup,plate_instance)
    eff:
        unknown[cup]=False
        close[cup,plate_instance]=True
        close[plate_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior place_steak_pieces_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak pieces

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_steak_pieces_on_plate(steak, plate)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior place_steak_pieces_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_steak_pieces_on_plate(steak, plate)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2040_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior place_steak_pieces_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Ensure the stove is on

        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select a frying pan on the stove

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_steak_pieces_on_plate(steak, plate)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_pieces_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)

        bind plate: item where:
            is_plate(plate)

        place_steak_pieces_on_plate(steak, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2049_around_plate_2152(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(cup,plate_instance)
        else:
            exp(cup,plate_instance)
    eff:
        unknown[cup]=False
        close[cup,plate_instance]=True
        close[plate_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_pieces_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_steak_pieces_on_plate(steak, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. put the steak pieces on a plate." ?
Answer: After slicing the steak, put it on a plate.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2132_around_plate_2152(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(cup,plate_instance)
        else:
            exp(cup,plate_instance)
    eff:
        unknown[cup]=False
        close[cup,plate_instance]=True
        close[plate_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_pieces_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        
        bind plate: item where:
            is_plate(plate)
        
        place_steak_pieces_on_plate(steak, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2049_around_plate_2152(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(cup,plate_instance)
        else:
            exp(cup,plate_instance)
    eff:
        unknown[cup]=False
        close[cup,plate_instance]=True
        close[plate_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate)

        place_steak_on_plate(steak, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2133_around_plate_2152(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(cup,plate_instance)
        else:
            exp(cup,plate_instance)
    eff:
        unknown[cup]=False
        close[cup,plate_instance]=True
        close[plate_instance,cup]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_pieces_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_steak_pieces_on_plate(steak, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_128_around_tray_2068(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(tray,tray_instance)
        else:
            exp(tray,tray_instance)
    eff:
        unknown[tray]=False
        close[tray,tray_instance]=True
        close[tray_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_plate(plate:item):
    body:
        achieve_once visited(plate)

behavior place_steak_pieces_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        foreach plate: item:
            if is_plate(plate) and not visited(plate):
                find_plate(plate)
        
        bind plate: item where:
            is_plate(plate) and visited(plate)

        bind steak: item where:
            is_food_steak(steak) and cut(steak)

        place_steak_pieces_on_plate(steak, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_pieces_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the steak that is cut

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_steak_pieces_on_plate(steak, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_plate_2152(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_bread,plate_instance)
        else:
            exp(food_bread,plate_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,plate_instance]=True
        close[plate_instance,food_bread]=True
    

behavior find_cup_2133_around_plate_2152(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(cup,plate_instance)
        else:
            exp(cup,plate_instance)
    eff:
        unknown[cup]=False
        close[cup,plate_instance]=True
        close[plate_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior place_steak_pieces_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak
        
        bind plate: item where:
            is_plate(plate)
        # Select a plate 

        place_steak_pieces_on_plate(steak, plate)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. put the steak pieces on a plate." ?
Answer: After slicing the steak on a cutting board, put the pieces on a plate.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2074_around_plate_2152(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_food,plate_instance)
        else:
            exp(food_food,plate_instance)
    eff:
        unknown[food_food]=False
        close[food_food,plate_instance]=True
        close[plate_instance,food_food]=True
    

behavior find_cup_2134_around_plate_2152(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(cup,plate_instance)
        else:
            exp(cup,plate_instance)
    eff:
        unknown[cup]=False
        close[cup,plate_instance]=True
        close[plate_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior place_cut_steak_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)

        bind plate: item where:
            is_plate(plate)

        place_cut_steak_on_plate(steak, plate)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_2068_around_tray_2068(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(tray,tray_instance)
        else:
            exp(tray,tray_instance)
    eff:
        unknown[tray]=False
        close[tray,tray_instance]=True
        close[tray_instance,tray]=True
    

behavior find_cup_2133_around_plate_2152(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(cup,plate_instance)
        else:
            exp(cup,plate_instance)
    eff:
        unknown[cup]=False
        close[cup,plate_instance]=True
        close[plate_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_steak_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        put_steak_on_plate(steak, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2132_around_plate_2152(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(cup,plate_instance)
        else:
            exp(cup,plate_instance)
    eff:
        unknown[cup]=False
        close[cup,plate_instance]=True
        close[plate_instance,cup]=True
    

behavior find_food_food_2094_around_plate_2152(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(food_food,plate_instance)
        else:
            exp(food_food,plate_instance)
    eff:
        unknown[food_food]=False
        close[food_food,plate_instance]=True
        close[plate_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_pieces_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak pieces

        bind plate: item where:
            is_plate(plate)
        # Select a plate to place the steak pieces on

        place_steak_pieces_on_plate(steak, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_clothes_pants_2036_around_basket_for_clothes_2078(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_pants,basket_for_clothes_instance)
        else:
            exp(clothes_pants,basket_for_clothes_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
behavior place_steak_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_steak_on_plate(steak, plate)
        # Place the steak pieces on the plate
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)

        bind plate: item where:
            is_plate(plate)

        place_steak_on_plate(steak, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)

        bind plate: item where:
            is_plate(plate)

        place_steak_on_plate(steak, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)

        bind plate: item where:
            is_plate(plate)

        place_steak_on_plate(steak, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2132_around_plate_2152(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(cup,plate_instance)
        else:
            exp(cup,plate_instance)
    eff:
        unknown[cup]=False
        close[cup,plate_instance]=True
        close[plate_instance,cup]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_steak_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the cut steak

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_steak_on_plate(steak, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_cup_2132_around_plate_2152(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(cup,plate_instance)
        else:
            exp(cup,plate_instance)
    eff:
        unknown[cup]=False
        close[cup,plate_instance]=True
        close[plate_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior put_steak_pieces_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak) and cut(steak)
        # Select the steak that has been cut

        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        put_steak_pieces_on_plate(steak, plate)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Fried a steak. Then cut it and put it on a plate.
Action History:
['walk_executor(kitchen_counter_123)', 'walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(sink_19)', 'walk_executor(cupboard_117)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fryingpan_2154)', 'grab_executor(fryingpan_2154)', 'walk_executor(stove_2135)', 'put_executor(fryingpan_2154, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(oil_2149)', 'grab_executor(oil_2149)', 'walk_executor(fryingpan_2154)', 'putin_executor(oil_2149, fryingpan_2154)', 'walk_executor(food_steak_2080)', 'grab_executor(food_steak_2080)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_steak_2080, fryingpan_2154)', 'grab_executor(food_steak_2080)', 'walk_executor(cutting_board_2123)', 'put_executor(food_steak_2080, cutting_board_2123)', 'walk_executor(knife_2035)', 'grab_executor(knife_2035)', 'walk_executor(food_steak_2080)', 'cut_executor(food_steak_2080)']
Time info:
Time consume: 516 seconds
Exp_helper query times: 1
Guidance query times: 3
library scale: 63
goal generate times: 31
goal correct times: 0
action_num: 31

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
