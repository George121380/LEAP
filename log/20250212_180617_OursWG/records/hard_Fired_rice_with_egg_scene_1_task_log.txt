From agent.py
Reset goals: The sub-goals are: 
['1. Gather the necessary ingredients for fried rice with egg in the cooking area.', '2. Cook the rice and eggs together in a pan.', '3. Serve the fried rice with egg on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2108_around_kitchen_counter_122(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_oil_2013_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_salt_2109_around_kitchen_counter_122(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_clothes_underwear_2121_around_basket_for_clothes_2078(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_ingredient(ingredient:item, cooking_area:item):
    body:
        achieve_once inside(ingredient, cooking_area)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind oil: item where:
            is_oil(oil)

        bind stove: item where:
            is_stove(stove)

        bind pan: item where:
            is_fryingpan(pan)

        bind salt: item where:
            is_food_salt(salt)

        bind vegetable: item where:
            is_food_vegetable(vegetable)

        bind cooking_area: item where:
            is_kitchen_counter(cooking_area)

        gather_ingredient(rice, cooking_area)
        gather_ingredient(egg, cooking_area)
        gather_ingredient(oil, cooking_area)
        gather_ingredient(stove, cooking_area)
        gather_ingredient(pan, cooking_area)
        gather_ingredient(salt, cooking_area)
        gather_ingredient(vegetable, cooking_area)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2108_around_kitchen_counter_122(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_oil_2013_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_rice(rice:item):
    body:
        achieve_once visited(rice)

behavior gather_egg(egg:item):
    body:
        achieve_once visited(egg)

behavior gather_oil(oil:item):
    body:
        achieve_once visited(oil)

behavior __goal__():
    body:
        foreach rice: item:
            if is_food_rice(rice) and not visited(rice):
                gather_rice(rice)
        
        foreach egg: item:
            if is_food_egg(egg) and not visited(egg):
                gather_egg(egg)
        
        foreach oil: item:
            if is_oil(oil) and not visited(oil):
                gather_oil(oil)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior gather_rice(rice:item):
    body:
        achieve_once visited(rice)

behavior gather_egg(egg:item):
    body:
        achieve_once visited(egg)

behavior gather_oil(oil:item):
    body:
        achieve_once visited(oil)

behavior __goal__():
    body:
        foreach rice: item:
            if is_food_rice(rice) and not visited(rice):
                gather_rice(rice)
        
        foreach egg: item:
            if is_food_egg(egg) and not visited(egg):
                gather_egg(egg)
        
        foreach oil: item:
            if is_oil(oil) and not visited(oil):
                gather_oil(oil)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(food_rice_2108, kitchen_counter_122)walk_executor(food_rice_2108)obs(food_rice_2108, look around this place)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)obs(food_egg_2092, look around this place)walk_executor(kitchen_counter_122)exp(oil_2149, kitchen_counter_122)walk_executor(oil_2149)obs(oil_2149, look around this place)walk_executor(kitchen_counter_122)exp(oil_2013, kitchen_counter_122)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(food_rice_2108, kitchen_counter_122)
Fail to find food_rice_2108 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_rice_2108, fridge_126)walk_executor(food_rice_2108)obs(food_rice_2108, look around this place)walk_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)obs(food_egg_2092, look around this place)walk_executor(cupboard_118)open_executor(cupboard_118)exp(oil_2149, cupboard_118)walk_executor(oil_2149)obs(oil_2149, look around this place)walk_executor(cupboard_118)exp(oil_2013, cupboard_118)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_rice_2108, fridge_126)
Find food_rice_2108. 
##############################
From agent.py-> find a plan in act()
obs(food_rice_2108, look around this place)obs(food_egg_2092, look around this place)walk_executor(cupboard_118)open_executor(cupboard_118)exp(oil_2149, cupboard_118)walk_executor(oil_2149)obs(oil_2149, look around this place)walk_executor(cupboard_118)exp(oil_2013, cupboard_118)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
obs(food_rice_2108, look around this place)
Get this information:  food_rice_2108 is inside dining_room_41. food_rice_2108 is inside fridge_126. food_rice_2108 is close to fridge_126. food_rice_2108 is close to character_240. food_rice_2108 is CLEAN.
##############################
From agent.py
obs(food_egg_2092, look around this place)
Get this information:  food_egg_2092 is inside dining_room_41. food_egg_2092 is inside fridge_126. food_egg_2092 is close to fridge_126. food_egg_2092 is close to character_240. food_egg_2092 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(oil_2149, cupboard_118)
Fail to find oil_2149 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(oil_2149, stove_2135)walk_executor(oil_2149)obs(oil_2149, look around this place)walk_executor(stove_2135)exp(oil_2013, stove_2135)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(oil_2149, stove_2135)
Fail to find oil_2149 around stove_2135. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(oil_2149, cupboard_117)walk_executor(oil_2149)obs(oil_2149, look around this place)walk_executor(cupboard_117)exp(oil_2013, cupboard_117)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(oil_2149, cupboard_117)
Fail to find oil_2149 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(oil_2149, kitchen_counter_123)walk_executor(oil_2149)obs(oil_2149, look around this place)walk_executor(kitchen_counter_123)exp(oil_2013, kitchen_counter_123)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(oil_2149, kitchen_counter_123)
Find oil_2149. 
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2149)obs(oil_2149, look around this place)walk_executor(kitchen_counter_123)exp(oil_2013, kitchen_counter_123)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(oil_2149)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. 
##############################
From agent.py
obs(oil_2149, look around this place)
Get this information:  oil_2149 is inside dining_room_41. oil_2149 is close to kitchen_counter_123. oil_2149 is close to character_240. oil_2149 is on kitchen_counter_123.
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(oil_2013, kitchen_counter_123)
Fail to find oil_2013 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)exp(oil_2013, pot_78)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find oil_2013 ?
Answer: Robot, go to dining_room_41. Once there, locate oven_127. You will find oil_2013 inside oven_127.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, go to dining_room_41. Once there, locate oven_127. You will find oil_2013 inside oven_127.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for food_rice_2108 around kitchen_counter_122.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_rice_2108 around fridge_126.
Action 7: Observe around food_rice_2108 with the question of look around this place.
Action 8: Observe around food_egg_2092 with the question of look around this place.
Action 9: Walk to cupboard_118.
Action 10: Open cupboard_118.
Action 11: look for oil_2149 around cupboard_118.
Action 12: Walk to stove_2135.
Action 13: Open stove_2135.
Action 14: look for oil_2149 around stove_2135.
Action 15: Walk to cupboard_117.
Action 16: look for oil_2149 around cupboard_117.
Action 17: Walk to kitchen_counter_123.
Action 18: look for oil_2149 around kitchen_counter_123.
Action 19: Walk to oil_2149.
Action 20: Observe around oil_2149 with the question of look around this place.
Action 21: Walk to kitchen_counter_123.
Action 22: look for oil_2013 around kitchen_counter_123.
Action 23: Walk to pot_78.

##############################
From agent.py
exp(oil_2013, pot_78)
Fail to find oil_2013 around pot_78. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_193)exp(oil_2013, desk_193)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(desk_193)
Robot find: mouse_213, keyboard_211, check_2026, chair_194, laser_pointer_2034, Robot is close to the desk_193. 
##############################
From agent.py
exp(oil_2013, desk_193)
Fail to find oil_2013 around desk_193. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Gather rice and eggs and any additional ingredients you want for the fried rice.', '2. Cook the rice in a suitable pot or rice cooker.', '3. Fry the eggs in a pan.', '4. Mix the cooked rice and fried eggs together in the pan and fry them to combine.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2104_around_cutting_board_2123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_food_carrot_2015_around_cutting_board_2123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_carrot,cutting_board_instance)
        else:
            exp(food_carrot,cutting_board_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cutting_board_instance]=True
        close[cutting_board_instance,food_carrot]=True
    

behavior find_knife_2122_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_oil_2149_around_food_orange_2027(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind food_orange_instance:item where:
            is_food_orange(food_orange_instance) and id[food_orange_instance]==2027
        achieve close_char(char,food_orange_instance)
        if can_open(food_orange_instance):
            achieve_once open(food_orange_instance)
            exp(oil,food_orange_instance)
        else:
            exp(oil,food_orange_instance)
    eff:
        unknown[oil]=False
        close[oil,food_orange_instance]=True
        close[food_orange_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def has_oil_in_oven(oven:item):
    symbol has_oil=exists oil: item : (is_oil(oil) and inside(oil, oven))
    return has_oil

def has_rice_and_eggs():
    symbol has_items=exists rice: item : (is_food_rice(rice)) and exists egg: item : (is_food_egg(egg))
    return has_items

behavior gather_rice_and_eggs(rice:item, egg:item):
    body:
        achieve_once inhand(rice)
        achieve_once inhand(egg)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room) and id[dining_room]==41
        bind oven: item where:
            is_oven(oven) and id[oven]==127 and inside(oven, dining_room)
        
        if not is_off(oven):
            achieve_once is_off(oven)
        if not open(oven):
            achieve_once open(oven)
        if not has_oil_in_oven(oven):
            observe(oven, "Check if oil is present inside the oven")
            
        if has_rice_and_eggs():
            bind rice: item where:
                is_food_rice(rice)
            bind egg: item where:
                is_food_egg(egg)
            gather_rice_and_eggs(rice, egg)
        else:
            foreach place: item:
                if (is_fridge(place) or is_kitchen_counter(place)) and not visited(place):
                    observe(place, "Look for rice and eggs")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'egg') at line 5471, column 74.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2104_around_cutting_board_2123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_food_carrot_2015_around_cutting_board_2123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_carrot,cutting_board_instance)
        else:
            exp(food_carrot,cutting_board_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cutting_board_instance]=True
        close[cutting_board_instance,food_carrot]=True
    

behavior find_food_orange_2027_around_food_orange_2027(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind food_orange_instance:item where:
            is_food_orange(food_orange_instance) and id[food_orange_instance]==2027
        achieve close_char(char,food_orange_instance)
        if can_open(food_orange_instance):
            achieve_once open(food_orange_instance)
            exp(food_orange,food_orange_instance)
        else:
            exp(food_orange,food_orange_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,food_orange_instance]=True
        close[food_orange_instance,food_orange]=True
    

behavior find_food_butter_2007_around_cutting_board_2123(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_butter,cutting_board_instance)
        else:
            exp(food_butter,cutting_board_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cutting_board_instance]=True
        close[cutting_board_instance,food_butter]=True
    

#goal_representation
 
def has_oil_in_oven(oven:item):
    symbol has_oil=exists oil: item : (is_oil(oil) and inside(oil, oven))
    return has_oil

def has_rice_and_eggs():
    symbol has_items=exists rice: item : (is_food_rice(rice)) and exists egg: item : (is_food_egg(egg))
    return has_items

behavior gather_rice_and_eggs(rice:item, egg:item):
    body:
        achieve_once inhand(rice)
        achieve_once inhand(egg)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room) and id[dining_room]==41
        bind oven: item where:
            is_oven(oven) and id[oven]==127 and inside(oven, dining_room)
        
        if not is_off(oven):
            achieve_once is_off(oven)
        if not open(oven):
            achieve_once open(oven)
        if not has_oil_in_oven(oven):
            observe(oven, "Check if oil is present inside the oven")
            
        if has_rice_and_eggs():
            bind rice: item where:
                is_food_rice(rice)
            bind egg: item where:
                is_food_egg(egg)
            gather_rice_and_eggs(rice, egg)
        else:
            foreach place: item:
                if (is_fridge(place) or is_kitchen_counter(place)) and not visited(place):
                    observe(place, "Look for rice and eggs")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'egg') at line 5471, column 74.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2104_around_cutting_board_2123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_food_carrot_2086_around_cutting_board_2123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_carrot,cutting_board_instance)
        else:
            exp(food_carrot,cutting_board_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cutting_board_instance]=True
        close[cutting_board_instance,food_carrot]=True
    

#goal_representation
 
def has_oil_in_oven(oven:item):
    symbol has_oil=exists oil: item : (is_oil(oil) and inside(oil, oven))
    return has_oil

def has_rice_and_eggs():
    symbol has_items=exists rice: item : (is_food_rice(rice)) and exists egg: item : (is_food_egg(egg))
    return has_items

behavior gather_rice_and_eggs(rice:item, egg:item):
    body:
        achieve_once inhand(rice)
        achieve_once inhand(egg)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room) and id[dining_room]==41
        bind oven: item where:
            is_oven(oven) and id[oven]==127 and inside(oven, dining_room)
        
        if not is_off(oven):
            achieve_once is_off(oven)
        if not open(oven):
            achieve_once open(oven)
        if not has_oil_in_oven(oven):
            observe(oven, "Check if oil is present inside the oven")
            
        if has_rice_and_eggs():
            bind rice: item where:
                is_food_rice(rice)
            bind egg: item where:
                is_food_egg(egg)
            gather_rice_and_eggs(rice, egg)
        else:
            foreach place: item:
                if (is_fridge(place) or is_kitchen_counter(place)) and not visited(place):
                    observe(place, "Look for rice and eggs")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2048_around_cutting_board_2123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_food_carrot_2086_around_cutting_board_2123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_carrot,cutting_board_instance)
        else:
            exp(food_carrot,cutting_board_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cutting_board_instance]=True
        close[cutting_board_instance,food_carrot]=True
    

behavior find_oil_2013_around_couch_198(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(oil,couch_instance)
        else:
            exp(oil,couch_instance)
    eff:
        unknown[oil]=False
        close[oil,couch_instance]=True
        close[couch_instance,oil]=True
    

behavior find_food_cheese_2072_around_cutting_board_2123(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_cheese,cutting_board_instance)
        else:
            exp(food_cheese,cutting_board_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,cutting_board_instance]=True
        close[cutting_board_instance,food_cheese]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (rice or egg) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior find_oil_in_kitchen(oil:item):
    body:
        achieve_once visited(oil)

behavior __goal__():
    body:
        # Search for rice and eggs in the scene
        foreach food_item: item:
            if (is_food_rice(food_item) or is_food_egg(food_item)) and not is_food_item_observed(food_item):
                search_for_food(food_item)
        
        # Search for oil in the kitchen area
        foreach oil: item:
            if is_oil(oil) and not visited(oil):
                find_oil_in_kitchen(oil)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (rice or egg) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior find_oil_in_kitchen(oil:item):
    body:
        achieve_once visited(oil)

behavior __goal__():
    body:
        # Search for rice and eggs in the scene
        foreach food_item: item:
            if (is_food_rice(food_item) or is_food_egg(food_item)) and not is_food_item_observed(food_item):
                search_for_food(food_item)
        
        # Search for oil in the kitchen area
        foreach oil: item:
            if is_oil(oil) and not visited(oil):
                find_oil_in_kitchen(oil)

##############################
From agent.py-> find a plan in act()
walk_executor(couch_198)exp(oil_2013, couch_198)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(couch_198)
Robot find: chair_2003, instrument_guitar_2028, rag_2052, mat_203, phone_2016, clothes_jacket_2119, Robot is close to the couch_198. 
##############################
From agent.py
exp(oil_2013, couch_198)
Fail to find oil_2013 around couch_198. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)exp(oil_2013, bowl_2140)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(oil_2013, bowl_2140)
Fail to find oil_2013 around bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_2003)exp(oil_2013, chair_2003)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(chair_2003)
Robot find: Robot is close to the chair_2003. Robot is close to the couch_198. 
##############################
From agent.py
exp(oil_2013, chair_2003)
Fail to find oil_2013 around chair_2003. 
##############################
From agent.py-> find a plan in act()
walk_executor(light_73)exp(oil_2013, light_73)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(light_73)
Robot find: Robot is close to the light_73. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find oil_2013 ?
Answer: Go to the dining room and find the oven labeled oven_127. The target item, oil_2013, is inside this oven.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, go to dining_room_41. Once there, locate oven_127. You will find oil_2013 inside oven_127.
Go to the dining room and find the oven labeled oven_127. The target item, oil_2013, is inside this oven.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for food_rice_2108 around kitchen_counter_122.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_rice_2108 around fridge_126.
Action 7: Observe around food_rice_2108 with the question of look around this place.
Action 8: Observe around food_egg_2092 with the question of look around this place.
Action 9: Walk to cupboard_118.
Action 10: Open cupboard_118.
Action 11: look for oil_2149 around cupboard_118.
Action 12: Walk to stove_2135.
Action 13: Open stove_2135.
Action 14: look for oil_2149 around stove_2135.
Action 15: Walk to cupboard_117.
Action 16: look for oil_2149 around cupboard_117.
Action 17: Walk to kitchen_counter_123.
Action 18: look for oil_2149 around kitchen_counter_123.
Action 19: Walk to oil_2149.
Action 20: Observe around oil_2149 with the question of look around this place.
Action 21: Walk to kitchen_counter_123.
Action 22: look for oil_2013 around kitchen_counter_123.
Action 23: Walk to pot_78.
Action 24: look for oil_2013 around pot_78.
Action 25: Walk to desk_193.
Action 26: look for oil_2013 around desk_193.
Action 27: Walk to couch_198.
Action 28: look for oil_2013 around couch_198.
Action 29: Walk to bowl_2140.
Action 30: look for oil_2013 around bowl_2140.
Action 31: Walk to chair_2003.
Action 32: look for oil_2013 around chair_2003.
Action 33: Walk to light_73.

##############################
From agent.py
exp(oil_2013, light_73)
Fail to find oil_2013 around light_73. 
##############################
From agent.py-> find a plan in act()
walk_executor(walllamp_34)exp(oil_2013, walllamp_34)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(walllamp_34)
Robot find: drawing_33, Robot is close to the walllamp_34. 
##############################
From agent.py
exp(oil_2013, walllamp_34)
Fail to find oil_2013 around walllamp_34. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_17)open_executor(bathroom_cabinet_17)exp(oil_2013, bathroom_cabinet_17)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(bathroom_cabinet_17)
Robot find: Robot is close to the bathroom_cabinet_17. 
##############################
From agent.py
open_executor(bathroom_cabinet_17)
Robot find: tooth_paste_2059, Robot is close to the bathroom_cabinet_17. Robot is close to the tooth_paste_2059. bathroom_cabinet_17 is opened. 
##############################
From agent.py
exp(oil_2013, bathroom_cabinet_17)
Fail to find oil_2013 around bathroom_cabinet_17. 
##############################
From agent.py-> find a plan in act()
walk_executor(trashcan_99)exp(oil_2013, trashcan_99)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(trashcan_99)
Robot find: food_orange_2061, food_onion_2009, glue_2045, vacuum_cleaner_2139, Robot is close to the trashcan_99. Robot is close to the food_orange_2061. Robot is close to the food_onion_2009. Robot is close to the glue_2045. 
##############################
From agent.py
exp(oil_2013, trashcan_99)
Fail to find oil_2013 around trashcan_99. 
##############################
From agent.py-> find a plan in act()
walk_executor(mat_203)exp(oil_2013, mat_203)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(mat_203)
Robot find: shoe_rack_2044, drawing_202, Robot is close to the mat_203. 
##############################
From agent.py
exp(oil_2013, mat_203)
Fail to find oil_2013 around mat_203. 
##############################
From agent.py-> find a plan in act()
walk_executor(keyboard_211)exp(oil_2013, keyboard_211)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(keyboard_211)
Robot find: drawing_201, Robot is close to the desk_193. Robot is close to the keyboard_211. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find oil_2013 ?
Answer: The target item, oil_2013, is inside the dining room and located inside oven_127. Look for oil_2013 inside the oven in the dining room area.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, go to dining_room_41. Once there, locate oven_127. You will find oil_2013 inside oven_127.
Go to the dining room and find the oven labeled oven_127. The target item, oil_2013, is inside this oven.
The target item, oil_2013, is inside the dining room and located inside oven_127. Look for oil_2013 inside the oven in the dining room area.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for food_rice_2108 around kitchen_counter_122.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_rice_2108 around fridge_126.
Action 7: Observe around food_rice_2108 with the question of look around this place.
Action 8: Observe around food_egg_2092 with the question of look around this place.
Action 9: Walk to cupboard_118.
Action 10: Open cupboard_118.
Action 11: look for oil_2149 around cupboard_118.
Action 12: Walk to stove_2135.
Action 13: Open stove_2135.
Action 14: look for oil_2149 around stove_2135.
Action 15: Walk to cupboard_117.
Action 16: look for oil_2149 around cupboard_117.
Action 17: Walk to kitchen_counter_123.
Action 18: look for oil_2149 around kitchen_counter_123.
Action 19: Walk to oil_2149.
Action 20: Observe around oil_2149 with the question of look around this place.
Action 21: Walk to kitchen_counter_123.
Action 22: look for oil_2013 around kitchen_counter_123.
Action 23: Walk to pot_78.
Action 24: look for oil_2013 around pot_78.
Action 25: Walk to desk_193.
Action 26: look for oil_2013 around desk_193.
Action 27: Walk to couch_198.
Action 28: look for oil_2013 around couch_198.
Action 29: Walk to bowl_2140.
Action 30: look for oil_2013 around bowl_2140.
Action 31: Walk to chair_2003.
Action 32: look for oil_2013 around chair_2003.
Action 33: Walk to light_73.
Action 34: look for oil_2013 around light_73.
Action 35: Walk to walllamp_34.
Action 36: look for oil_2013 around walllamp_34.
Action 37: Walk to bathroom_cabinet_17.
Action 38: Open bathroom_cabinet_17.
Action 39: look for oil_2013 around bathroom_cabinet_17.
Action 40: Walk to trashcan_99.
Action 41: look for oil_2013 around trashcan_99.
Action 42: Walk to mat_203.
Action 43: look for oil_2013 around mat_203.
Action 44: Walk to keyboard_211.

##############################
From agent.py
exp(oil_2013, keyboard_211)
Fail to find oil_2013 around keyboard_211. 
##############################
From agent.py-> find a plan in act()
walk_executor(drawing_201)exp(oil_2013, drawing_201)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(drawing_201)
Robot find: pillow_208, pillow_207, Robot is close to the drawing_201. 
##############################
From agent.py
exp(oil_2013, drawing_201)
Fail to find oil_2013 around drawing_201. 
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2123)exp(oil_2013, cutting_board_2123)walk_executor(oil_2013)obs(oil_2013, look around this place)
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(oil_2013, cutting_board_2123)
Fail to find oil_2013 around cutting_board_2123. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Wash the rice and eggs.', '2. Cook the rice.', '3. Scramble the eggs and mix them with the cooked rice in a pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2108_around_kitchen_counter_123(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_item(item: item):
    body:
        achieve clean(item)

behavior __goal__():
    body:
        foreach item: item:
            if (is_food_rice(item) or is_food_egg(item)) and dirty(item):
                wash_item(item)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2108_around_kitchen_counter_119(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_item(item:item):
    body:
        achieve clean(item)
        # Clean the item

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to wash

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to wash

        wash_item(rice)
        wash_item(egg)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_item(item:item):
    body:
        achieve clean(item)
        # Clean the item

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to wash

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to wash

        wash_item(rice)
        wash_item(egg)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_rice_2108, kitchen_counter_119)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_rice_2108)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(kitchen_counter_119)put_executor(food_rice_2108, kitchen_counter_119)switchon_executor(faucet_121)wash_executor(food_egg_2092)switchoff_executor(faucet_121)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_rice_2108, kitchen_counter_119)
Fail to find food_rice_2108 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_rice_2108, fridge_126)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_rice_2108)switchoff_executor(faucet_20)walk_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(kitchen_counter_119)put_executor(food_rice_2108, kitchen_counter_119)switchon_executor(faucet_121)wash_executor(food_egg_2092)switchoff_executor(faucet_121)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_rice_2108, fridge_126)
Find food_rice_2108. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Gather the ingredients required for fried rice with egg, such as rice, eggs, and vegetables, and place them near the cooking area.', '2. Cook the rice if not already cooked.', '3. Fry the eggs, then add the cooked rice and vegetables to make the fried rice with egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_food_onion_2009_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def observe_rice(rice:item):
    symbol observed = visited(rice)
    return observed

def observe_egg(egg:item):
    symbol observed = visited(egg)
    return observed

def observe_vegetable(vegetable:item):
    symbol observed = visited(vegetable)
    return observed

behavior gather_ingredients(ingredient:item, location:item):
    body:
        achieve_once on(ingredient, location)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        
        foreach rice: item:
            if is_food_rice(rice) and not observe_rice(rice):
                observe(rice, "Check if its rice needed for fried rice")
        
        foreach egg: item:
            if is_food_egg(egg) and not observe_egg(egg):
                observe(egg, "Check if its an egg needed for fried rice")
        
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not observe_vegetable(vegetable):
                observe(vegetable, "Check if its a vegetable needed for fried rice")

        foreach rice: item:
            if is_food_rice(rice) and observe_rice(rice):
                gather_ingredients(rice, kitchen_counter)
        
        foreach egg: item:
            if is_food_egg(egg) and observe_egg(egg):
                gather_ingredients(egg, kitchen_counter)
        
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and observe_vegetable(vegetable):
                gather_ingredients(vegetable, kitchen_counter)
 
#goal_representation_end

##############################
From agent.py->reset_goal
 
def observe_rice(rice:item):
    symbol observed = visited(rice)
    return observed

def observe_egg(egg:item):
    symbol observed = visited(egg)
    return observed

def observe_vegetable(vegetable:item):
    symbol observed = visited(vegetable)
    return observed

behavior gather_ingredients(ingredient:item, location:item):
    body:
        achieve_once on(ingredient, location)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        
        foreach rice: item:
            if is_food_rice(rice) and not observe_rice(rice):
                observe(rice, "Check if its rice needed for fried rice")
        
        foreach egg: item:
            if is_food_egg(egg) and not observe_egg(egg):
                observe(egg, "Check if its an egg needed for fried rice")
        
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not observe_vegetable(vegetable):
                observe(vegetable, "Check if its a vegetable needed for fried rice")

        foreach rice: item:
            if is_food_rice(rice) and observe_rice(rice):
                gather_ingredients(rice, kitchen_counter)
        
        foreach egg: item:
            if is_food_egg(egg) and observe_egg(egg):
                gather_ingredients(egg, kitchen_counter)
        
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and observe_vegetable(vegetable):
                gather_ingredients(vegetable, kitchen_counter)
 
##############################
From agent.py-> find a plan in act()
obs(food_rice_2108, Check if its rice needed for fried rice)obs(food_egg_2092, Check if its an egg needed for fried rice)obs(food_vegetable_2113, Check if its a vegetable needed for fried rice)grab_executor(food_rice_2108)walk_executor(kitchen_counter_119)put_executor(food_rice_2108, kitchen_counter_119)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(kitchen_counter_119)put_executor(food_egg_2092, kitchen_counter_119)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(kitchen_counter_119)put_executor(food_vegetable_2113, kitchen_counter_119)
##############################
From agent.py
obs(food_rice_2108, Check if its rice needed for fried rice)
Get this information:  food_rice_2108 is inside dining_room_41. food_rice_2108 is inside fridge_126. food_rice_2108 is close to fridge_126. food_rice_2108 is close to character_240. food_rice_2108 is CLEAN.
##############################
From agent.py
obs(food_egg_2092, Check if its an egg needed for fried rice)
Get this information:  food_egg_2092 is inside dining_room_41. food_egg_2092 is inside fridge_126. food_egg_2092 is close to fridge_126. food_egg_2092 is close to character_240. food_egg_2092 is CLEAN.
##############################
From agent.py
obs(food_vegetable_2113, Check if its a vegetable needed for fried rice)
Get this information:  food_vegetable_2113 is inside dining_room_41. food_vegetable_2113 is inside fridge_126. food_vegetable_2113 is close to fridge_126. food_vegetable_2113 is close to character_240. food_vegetable_2113 is DIRTY.
##############################
From agent.py
grab_executor(food_rice_2108)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_rice_2108 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the food_rice_2108. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_rice_2108, kitchen_counter_119)
Robot find: Robot is close to the food_rice_2108. Robot is close to the kitchen_counter_119. kitchen_counter_119 is close food_rice_2108. food_rice_2108 is close kitchen_counter_119. food_rice_2108 is on kitchen_counter_119. food_rice_2108 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the food_egg_2092. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_egg_2092, kitchen_counter_119)
Robot find: Robot is close to the food_egg_2092. Robot is close to the kitchen_counter_119. kitchen_counter_119 is close food_egg_2092. food_egg_2092 is close kitchen_counter_119. food_egg_2092 is on kitchen_counter_119. food_egg_2092 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_vegetable_2113, kitchen_counter_119)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. kitchen_counter_119 is close food_vegetable_2113. food_vegetable_2113 is close kitchen_counter_119. food_vegetable_2113 is on kitchen_counter_119. food_vegetable_2113 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_pillow_208_around_couch_198(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(pillow,couch_instance)
        else:
            exp(pillow,couch_instance)
    eff:
        unknown[pillow]=False
        close[pillow,couch_instance]=True
        close[couch_instance,pillow]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_rice_in_pot(rice, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_rice_in_pot(rice, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(pot_78)putin_executor(food_rice_2108, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(food_rice_2108)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the food_rice_2108. 
##############################
From agent.py
grab_executor(food_rice_2108)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the food_rice_2108. Grabbing food_rice_2108 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the food_rice_2108. Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
putin_executor(food_rice_2108, pot_78)
Robot find: Robot is close to the food_rice_2108. Robot is close to the pot_78. Robot is close to the oven_127. pot_78 is close food_rice_2108. food_rice_2108 is inside pot_78. food_rice_2108 is close pot_78. food_rice_2108 released by right hand. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the food_rice_2108. Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
behavior fry_eggs_and_rice(egg:item, rice:item, pan:item):
    body:
        achieve_once inside(egg, pan)
        # Place the egg into the frying pan

behavior add_rice_and_vegetables_to_pan(rice:item, vegetables:item, pan:item):
    body:
        achieve_once inside(rice, pan)
        # Add the rice to the frying pan
        achieve_once inside(vegetables, pan)
        # Add the vegetables to the frying pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind rice: item where:
            is_food_rice(rice)

        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pan: item where:
            is_fryingpan(pan) and is_on(stove) and inside(oil, pan)
        # Ensure the frying pan has oil inside and is on the stove

        fry_eggs_and_rice(egg, rice, pan)
        add_rice_and_vegetables_to_pan(rice, vegetables, pan)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2013_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2154_around_sink_19(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(fryingpan,sink_instance)
        else:
            exp(fryingpan,sink_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,sink_instance]=True
        close[sink_instance,fryingpan]=True
    

#goal_representation
 
behavior fry_eggs(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

behavior add_rice_and_vegetables_to_pan(rice:item, vegetables:item, pan:item):
    body:
        achieve_once inside(rice, pan)
        achieve_once inside(vegetables, pan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind rice: item where:
            is_food_rice(rice)

        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove) and is_on(stove) and on(pan, stove)

        bind oil: item where:
            is_oil(oil) and inside(oil, pan)
        
        fry_eggs(egg, pan)
        add_rice_and_vegetables_to_pan(rice, vegetables, pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
behavior fry_egg(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)

behavior add_vegetables_and_rice(fryingpan:item, vegetables:item, rice:item):
    body:
        achieve_once inside(vegetables, fryingpan)
        achieve_once inside(rice, fryingpan)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is on

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select a frying pan that is on the stove
        
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select cut vegetables

        bind rice: item where:
            is_food_rice(rice) and inside(rice, pot)
        # Select cooked rice from the pot
        
        fry_egg(egg, fryingpan)
        add_vegetables_and_rice(fryingpan, vegetables, rice)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<rice: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_pot_2040_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#goal_representation
behavior fry_egg(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)

behavior add_vegetables_and_rice(fryingpan:item, vegetables:item, rice:item):
    body:
        achieve_once inside(vegetables, fryingpan)
        achieve_once inside(rice, fryingpan)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and is_on(stove)

        bind egg: item where:
            is_food_egg(egg)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)

        bind rice: item where:
            is_food_rice(rice) and exists pot: item : (is_pot(pot) and inside(rice, pot))
        
        fry_egg(egg, fryingpan)
        add_vegetables_and_rice(fryingpan, vegetables, rice)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'pot') at line 5421, column 43.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2138_around_sink_19(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_fryingpan_2154_around_sink_120(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(fryingpan,sink_instance)
        else:
            exp(fryingpan,sink_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,sink_instance]=True
        close[sink_instance,fryingpan]=True
    

#goal_representation

behavior fry_egg(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)

behavior add_vegetables_and_rice(fryingpan:item, vegetables:item, rice:item):
    body:
        achieve_once inside(vegetables, fryingpan)
        achieve_once inside(rice, fryingpan)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and is_on(stove)

        bind egg: item where:
            is_food_egg(egg)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)

        bind rice: item where:
            is_food_rice(rice) and exists pot: item : (is_pot(pot) and inside(rice, pot))
        
        fry_egg(egg, fryingpan)
        add_vegetables_and_rice(fryingpan, vegetables, rice)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_pot_78_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_eggs(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan) # Crack the eggs into the frying pan

behavior add_cooked_rice_and_vegetables(rice:item, vegetables:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan) # Add the cooked rice to the frying pan
        achieve_once inside(vegetables, fryingpan) # Add the vegetables to the frying pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind cooked_rice: item where:
            is_food_rice(cooked_rice) and inside(cooked_rice, fryingpan)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, fryingpan)

        bind stove: item where:
            is_stove(stove) and is_on(stove)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)

        fry_eggs(egg, fryingpan)
        add_cooked_rice_and_vegetables(cooked_rice, vegetables, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fryingpan; available variables: [Variable<cooked_rice: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#goal_representation
 
behavior fry_eggs(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan) # Crack the eggs into the frying pan

behavior add_cooked_rice_and_vegetables(rice:item, vegetables:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan) # Add the cooked rice to the frying pan
        achieve_once inside(vegetables, fryingpan) # Add the vegetables to the frying pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind cooked_rice: item where:
            is_food_rice(cooked_rice)

        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind stove: item where:
            is_stove(stove) and is_on(stove)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)

        fry_eggs(egg, fryingpan)
        add_cooked_rice_and_vegetables(cooked_rice, vegetables, fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. fry the eggs, then add the cooked rice and vegetables to make the fried rice with egg." ?
Answer: After boiling the rice, put a frying pan on the stove and turn on the stove. Then put rice, egg, oil in a frying pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put a frying pan on the stove and turn on the stove.', '2. Add rice, egg, and oil to the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(fryingpan_2154, cupboard_117)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_117)
Fail to find fryingpan_2154 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(fryingpan_2154, cupboard_118)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_118)
Fail to find fryingpan_2154 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_270)exp(fryingpan_2154, table_270)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
exp(fryingpan_2154, table_270)
Fail to find fryingpan_2154 around table_270. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_120)exp(fryingpan_2154, sink_120)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(sink_120)
Robot find: soap_2126, soap_2010, ice_2024, Robot is close to the sink_120. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(fryingpan_2154, sink_120)
Fail to find fryingpan_2154 around sink_120. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)exp(fryingpan_2154, sink_19)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, cleaning_solution_2143, Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find fryingpan_2154 ?
Answer: The frying pan, labeled as fryingpan_2154, is located inside the dining room, specifically on top of the kitchen counter, identified as kitchen_counter_122. Look for the kitchen counter within the dining room area to locate the frying pan.
Re-decompose: None

##############################
From agent.py
Human Instruction: The frying pan, labeled as fryingpan_2154, is located inside the dining room, specifically on top of the kitchen counter, identified as kitchen_counter_122. Look for the kitchen counter within the dining room area to locate the frying pan.

Human Guidance: After boiling the rice, put a frying pan on the stove and turn on the stove. Then put rice, egg, oil in a frying pan.
The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_rice_2108 around kitchen_counter_119.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_rice_2108 around fridge_126.
Action 7: Observe around food_rice_2108 with the question of Check if its rice needed for fried rice.
Action 8: Observe around food_egg_2092 with the question of Check if its an egg needed for fried rice.
Action 9: Observe around food_vegetable_2113 with the question of Check if its a vegetable needed for fried rice.
Action 10: Grab food_rice_2108.
Action 11: Walk to kitchen_counter_119.
Action 12: Put food_rice_2108 on kitchen_counter_119.
Action 13: Walk to food_egg_2092.
Action 14: Grab food_egg_2092.
Action 15: Walk to kitchen_counter_119.
Action 16: Put food_egg_2092 on kitchen_counter_119.
Action 17: Walk to food_vegetable_2113.
Action 18: Grab food_vegetable_2113.
Action 19: Walk to kitchen_counter_119.
Action 20: Put food_vegetable_2113 on kitchen_counter_119.
Action 21: Walk to food_rice_2108.
Action 22: Grab food_rice_2108.
Action 23: Walk to pot_78.
Action 24: Put food_rice_2108 into pot_78.
Action 25: Grab pot_78.
Action 26: Walk to faucet_20.
Action 27: Switch on faucet_20.
Action 28: Switch off faucet_20.
Action 29: Walk to stove_2135.
Action 30: Put pot_78 on stove_2135.
Action 31: Switch on stove_2135.
Action 32: Walk to cupboard_117.
Action 33: look for fryingpan_2154 around cupboard_117.
Action 34: Walk to cupboard_118.
Action 35: Open cupboard_118.
Action 36: look for fryingpan_2154 around cupboard_118.
Action 37: Walk to table_270.
Action 38: look for fryingpan_2154 around table_270.
Action 39: Walk to sink_120.
Action 40: look for fryingpan_2154 around sink_120.
Action 41: Walk to sink_19.

##############################
From agent.py
exp(fryingpan_2154, sink_19)
Fail to find fryingpan_2154 around sink_19. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Place a frying pan on the stove and turn on the stove.', '2. Add the cooked rice, egg, and oil to the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_toaster_132(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(oil,toaster_instance)
        else:
            exp(oil,toaster_instance)
    eff:
        unknown[oil]=False
        close[oil,toaster_instance]=True
        close[toaster_instance,oil]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        turn_on_stove(stove)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. 
##############################
From agent.py
obs(fryingpan_2154, look around this place)
Get this information:  fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to character_240. fryingpan_2154 is on kitchen_counter_122. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. Grabbing fryingpan_2154 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close fryingpan_2154. fryingpan_2154 is close stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_blow_dryer_2057_around_washing_machine_2079(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(blow_dryer,washing_machine_instance)
        else:
            exp(blow_dryer,washing_machine_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,washing_machine_instance]=True
        close[washing_machine_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_rice_egg_oil_to_pan(rice:item, egg:item, oil:item, pan:item):
    body:
        achieve_once inside(rice, pan)
        achieve_once inside(egg, pan)
        achieve_once inside(oil, pan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind oil: item where:
            is_oil(oil)

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove) and is_on(stove)
        # Ensure the frying pan is on a stove that is turned on

        add_rice_egg_oil_to_pan(rice, egg, oil, pan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

behavior find_blow_dryer_2057_around_washing_machine_2079(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(blow_dryer,washing_machine_instance)
        else:
            exp(blow_dryer,washing_machine_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,washing_machine_instance]=True
        close[washing_machine_instance,blow_dryer]=True
    

#goal_representation
 
behavior add_rice_egg_oil_to_pan(rice:item, egg:item, oil:item, pan:item):
    body:
        achieve_once inside(rice, pan)
        achieve_once inside(egg, pan)
        achieve_once inside(oil, pan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind oil: item where:
            is_oil(oil)

        bind stove: item where:
            is_stove(stove)

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove) and is_on(stove)
        # Ensure the frying pan is on a stove that is turned on

        add_rice_egg_oil_to_pan(rice, egg, oil, pan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_rice_egg_oil_to_pan(rice:item, egg:item, oil:item, pan:item):
    body:
        achieve_once inside(rice, pan)
        achieve_once inside(egg, pan)
        achieve_once inside(oil, pan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind oil: item where:
            is_oil(oil)

        bind stove: item where:
            is_stove(stove)

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove) and is_on(stove)
        # Ensure the frying pan is on a stove that is turned on

        add_rice_egg_oil_to_pan(rice, egg, oil, pan)

##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(fryingpan_2154)putin_executor(food_rice_2108, fryingpan_2154)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)walk_executor(microwave_135)open_executor(microwave_135)exp(oil_2149, microwave_135)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(food_rice_2108)
Robot find: Robot is close to the food_rice_2108. Robot is close to the pot_78. 
##############################
From agent.py
grab_executor(food_rice_2108)
Robot find: Robot is close to the food_rice_2108. Robot is close to the pot_78. Grabbing food_rice_2108 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_rice_2108. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_rice_2108, fryingpan_2154)
Robot find: Robot is close to the food_rice_2108. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. food_rice_2108 is inside fryingpan_2154. fryingpan_2154 is close food_rice_2108. food_rice_2108 is close fryingpan_2154. food_rice_2108 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the kitchen_counter_119. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_egg_2092, fryingpan_2154)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. food_egg_2092 is inside fryingpan_2154. fryingpan_2154 is close food_egg_2092. food_egg_2092 is close fryingpan_2154. food_egg_2092 released by right hand. 
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
exp(oil_2149, microwave_135)
Fail to find oil_2149 around microwave_135. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(oil_2149, kitchen_counter_123)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(oil_2149, kitchen_counter_123)
Find oil_2149. 
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(oil_2149)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. 
##############################
From agent.py
grab_executor(oil_2149)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. Grabbing oil_2149 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(oil_2149, fryingpan_2154)
Robot find: Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. oil_2149 is inside fryingpan_2154. fryingpan_2154 is close oil_2149. oil_2149 is close fryingpan_2154. oil_2149 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(kitchen_counter_119)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_rice_2108)', 'walk_executor(kitchen_counter_119)', 'put_executor(food_rice_2108, kitchen_counter_119)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(kitchen_counter_119)', 'put_executor(food_egg_2092, kitchen_counter_119)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(kitchen_counter_119)', 'put_executor(food_vegetable_2113, kitchen_counter_119)', 'walk_executor(food_rice_2108)', 'grab_executor(food_rice_2108)', 'walk_executor(pot_78)', 'putin_executor(food_rice_2108, pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(table_270)', 'walk_executor(sink_120)', 'walk_executor(sink_19)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fryingpan_2154)', 'grab_executor(fryingpan_2154)', 'walk_executor(stove_2135)', 'put_executor(fryingpan_2154, stove_2135)', 'walk_executor(food_rice_2108)', 'grab_executor(food_rice_2108)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_rice_2108, fryingpan_2154)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_egg_2092, fryingpan_2154)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(kitchen_counter_123)', 'walk_executor(oil_2149)', 'grab_executor(oil_2149)', 'walk_executor(fryingpan_2154)', 'putin_executor(oil_2149, fryingpan_2154)']
Time info:
Time consume: 511 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 63
goal generate times: 10
goal correct times: 2
action_num: 52

Task complete rate:
1
Scene_id: 1
##############################
