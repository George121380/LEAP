From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.', '2. Place the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_cutting_board_2080(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_chicken,cutting_board_instance)
        else:
            exp(food_chicken,cutting_board_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,cutting_board_instance]=True
        close[cutting_board_instance,food_chicken]=True
    

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_chicken(chicken:item):
    body:
        achieve clean(chicken)

behavior clean_onion(onion:item):
    body:
        achieve clean(onion)

behavior __goal__():
    body:
        foreach chicken: item:
            if is_food_chicken(chicken) and (not clean(chicken) or dirty(chicken)):
                clean_chicken(chicken)

        foreach onion: item:
            if is_food_onion(onion) and (not clean(onion) or dirty(onion)):
                clean_onion(onion)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior clean_chicken(chicken:item):
    body:
        achieve clean(chicken)

behavior clean_onion(onion:item):
    body:
        achieve clean(onion)

behavior __goal__():
    body:
        foreach chicken: item:
            if is_food_chicken(chicken) and (not clean(chicken) or dirty(chicken)):
                clean_chicken(chicken)

        foreach onion: item:
            if is_food_onion(onion) and (not clean(onion) or dirty(onion)):
                clean_onion(onion)

##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2080)exp(food_chicken_2050, cutting_board_2080)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(cutting_board_2080)exp(food_onion_2026, cutting_board_2080)walk_executor(food_onion_2026)grab_executor(food_onion_2026)wash_executor(food_onion_2026)walk_executor(kitchen_counter_132)put_executor(food_chicken_2050, kitchen_counter_132)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_chicken_2050, cutting_board_2080)
Fail to find food_chicken_2050 around cutting_board_2080. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(kitchen_counter_129)exp(food_onion_2026, kitchen_counter_129)walk_executor(food_onion_2026)grab_executor(food_onion_2026)wash_executor(food_onion_2026)walk_executor(kitchen_counter_132)put_executor(food_chicken_2050, kitchen_counter_132)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(food_onion_2026, kitchen_counter_129)walk_executor(food_onion_2026)grab_executor(food_onion_2026)wash_executor(food_onion_2026)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(food_onion_2026, kitchen_counter_129)
Fail to find food_onion_2026 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_onion_2026, cupboard_130)walk_executor(food_onion_2026)grab_executor(food_onion_2026)wash_executor(food_onion_2026)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(food_onion_2026, cupboard_130)
Fail to find food_onion_2026 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(food_onion_2026, kitchen_counter_132)walk_executor(food_onion_2026)grab_executor(food_onion_2026)wash_executor(food_onion_2026)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(food_onion_2026, kitchen_counter_132)
Fail to find food_onion_2026 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_onion_2026, cupboard_131)walk_executor(food_onion_2026)grab_executor(food_onion_2026)wash_executor(food_onion_2026)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_onion_2026, cupboard_131)
Fail to find food_onion_2026 around cupboard_131. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.', '2. Place the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2098_around_sink_133(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_sink_133(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior clean_item(x:item):
    body:
        achieve clean(x)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and dirty(chicken)
        clean_item(chicken)

        bind onion: item where:
            is_food_onion(onion) and dirty(onion)
        clean_item(onion)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_food_onion_2026_around_fridge_140(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_item(item:item, sink:item):
    body:
        achieve_once close_char(char, sink) # Approach the sink
        achieve clean(item) # Clean the item

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and dirty(chicken)
        # Select a dirty chicken

        bind onion: item where:
            is_food_onion(onion) and dirty(onion)
        # Select a dirty onion

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        wash_item(chicken, sink)
        wash_item(onion, sink)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_detergent_2108_around_sink_133(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item:item):
    body:
        achieve clean(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and dirty(chicken)

        bind onion: item where:
            is_food_onion(onion) and dirty(onion)

        clean_item(chicken)
        clean_item(onion)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. clean the chicken and onion." ?
Answer: Place the chicken and onion in the oven. Then turn on the oven.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Place the chicken and onion in the oven.  ', '2. Turn on the oven to start roasting.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_fridge_140(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)

behavior close_oven_door(oven:item):
    body:
        achieve_once closed(oven)
        achieve_once is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)
        
        bind oven: item where:
            is_oven(oven)

        place_items_in_oven(chicken, onion, oven)
        close_oven_door(oven)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(oven_141)open_executor(oven_141)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(oven_141)putin_executor(food_chicken_2050, oven_141)walk_executor(fridge_140)exp(food_onion_2026, fridge_140)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(oven_141)putin_executor(food_onion_2026, oven_141)close_executor(oven_141)switchon_executor(oven_141)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_141)open_executor(oven_141)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(oven_141)putin_executor(food_chicken_2050, oven_141)walk_executor(fridge_140)exp(food_onion_2026, fridge_140)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(oven_141)putin_executor(food_onion_2026, oven_141)close_executor(oven_141)switchon_executor(oven_141)
##############################
From agent.py
walk_executor(oven_141)
Robot find: pot_54, Robot is close to the oven_141. 
##############################
From agent.py
open_executor(oven_141)
Robot find: food_butter_2018, dough_2021, food_onion_2026, tray_142, Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. 
##############################
From agent.py
putin_executor(food_chicken_2050, oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is close food_chicken_2050. food_chicken_2050 is close oven_141. food_chicken_2050 is inside oven_141. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. 
##############################
From agent.py
exp(food_onion_2026, fridge_140)
Find food_onion_2026. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_141)close_executor(oven_141)switchon_executor(oven_141)
##############################
From agent.py
walk_executor(oven_141)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. 
##############################
From agent.py
close_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is closed. 
##############################
From agent.py
switchon_executor(oven_141)
Robot find: Robot is close to the oven_141. oven_141 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Place the onion into the oven.
##############################
From agent.py
Human Instruction: Place the onion into the oven.

Human Guidance: Place the chicken and onion in the oven. Then turn on the oven.
The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_chicken_2050 around fridge_140.
Action 5: Walk to oven_141.
Action 6: Open oven_141.
Action 7: Walk to food_chicken_2050.
Action 8: Grab food_chicken_2050.
Action 9: Walk to oven_141.
Action 10: Put food_chicken_2050 into oven_141.
Action 11: Walk to fridge_140.
Action 12: look for food_onion_2026 around fridge_140.
Action 13: Walk to oven_141.
Action 14: Close oven_141.
Action 15: Switch on oven_141.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2084_around_cupboard_130(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cd_player,cupboard_instance)
        else:
            exp(cd_player,cupboard_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,cupboard_instance]=True
        close[cupboard_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_item_in_oven(item:item, oven:item):
    body:
        achieve_once inside(item, oven)

behavior close_oven_and_turn_on(oven:item):
    body:
        achieve_once closed(oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)

        bind oven: item where:
            is_oven(oven)

        place_item_in_oven(chicken, oven)
        place_item_in_oven(onion, oven)
        close_oven_and_turn_on(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_bowl_2096_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_in_oven(chicken:item, oven:item):
    body:
        achieve_once inside(chicken, oven)

behavior place_onions_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)

        bind oven: item where:
            is_oven(oven)

        place_chicken_in_oven(chicken, oven)
        place_onions_in_oven(onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)

def turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        
        bind onion: item where:
            is_food_onion(onion)

        bind oven: item where:
            is_oven(oven)

        chicken_and_onion_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5901, column 9.
Expected one of: 
	* __ANON_6
	* _NEWLINE
	* SLASH
	* SEMICOLON
	* __ANON_4
	* FLOORDIV
	* AMPERSAND
	* __ANON_1
	* GREATER_EQ
	* __ANON_2
	* AND
	* LESS_EQ
	* NOT_EQ
	* PLUS
	* RSHIFT
	* COMMA
	* OR
	* AT
	* STAR
	* LESSTHAN
	* LSHIFT
	* __ANON_3
	* CIRCUMFLEX
	* PERCENT
	* DOUBLE_EQUAL
	* __ANON_5
	* VBAR
	* __ANON_7
	* __ANON_8
	* MINUS
	* EQUAL
	* MORETHAN
	* __ANON_0
	* IF

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior place_chicken_in_oven(chicken:item, oven:item):
    body:
        achieve_once inside(chicken, oven)

behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        
        bind onion: item where:
            is_food_onion(onion)

        bind oven: item where:
            is_oven(oven)

        place_chicken_in_oven(chicken, oven)
        place_onion_in_oven(onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. place the chicken and onion in the oven.  " ?
Answer: Put the chicken and onion in the oven.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_food_in_oven(food:item, oven:item):
    body:
        achieve_once inside(food, oven)

behavior start_oven(oven:item):
    body:
        achieve is_on(oven)
        achieve_once closed(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)

        bind oven: item where:
            is_oven(oven) and open(oven)

        place_food_in_oven(chicken, oven)
        place_food_in_oven(onion, oven)
        start_oven(oven)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2084_around_tvstand_135(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cd_player,tvstand_instance)
        else:
            exp(cd_player,tvstand_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,tvstand_instance]=True
        close[tvstand_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_in_oven(chicken:item, oven:item):
    body:
        achieve_once inside(chicken, oven)

behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)

        bind oven: item where:
            is_oven(oven) and open(oven)

        place_chicken_in_oven(chicken, oven)
        place_onion_in_oven(onion, oven)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_in_oven(chicken:item, oven:item):
    body:
        achieve_once inside(chicken, oven)

behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)

        bind oven: item where:
            is_oven(oven)
        
        place_chicken_in_oven(chicken, oven)
        place_onion_in_oven(onion, oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2084_around_kitchen_counter_132(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cd_player,kitchen_counter_instance)
        else:
            exp(cd_player,kitchen_counter_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cd_player]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior close_and_turn_on_oven(oven:item):
    body:
        achieve_once closed(oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, oven)
        # Select the chicken that is already inside the oven
        
        bind oven: item where:
            is_oven(oven) and open(oven) and is_off(oven)
        # Select the oven that is open and off
        
        bind onion: item where:
            is_food_onion(onion) and open(oven)

        place_onion_in_oven(onion, oven)
        close_and_turn_on_oven(oven)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: oven; available variables: [Variable<chicken: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cd_player_2084_around_kitchen_counter_132(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cd_player,kitchen_counter_instance)
        else:
            exp(cd_player,kitchen_counter_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cd_player]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior close_and_turn_on_oven(oven:item):
    body:
        achieve_once closed(oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, oven)
        # Select the chicken that is already inside the oven
        
        bind oven: item where:
            is_oven(oven) and open(oven) and is_off(oven)
        # Select the oven that is open and off
        
        bind onion: item where:
            is_food_onion(onion)

        place_onion_in_oven(onion, oven)
        close_and_turn_on_oven(oven)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: oven; available variables: [Variable<chicken: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation

behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior close_and_turn_on_oven(oven:item):
    body:
        achieve_once closed(oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind oven: item where:
            is_oven(oven) and open(oven) and is_off(oven)
        # Select the oven that is open and off

        bind onion: item where:
            is_food_onion(onion)

        place_onion_in_oven(onion, oven)
        close_and_turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def chicken_in_oven(oven:item, chicken:item):
    # Function to check if the chicken is inside the specified oven
    symbol is_inside=exists o: item : (is_food_chicken(o) and inside(o, oven))
    return is_inside

def onion_in_oven(oven:item, onion:item):
    # Function to check if the onion is inside the specified oven
    symbol is_inside=exists o: item : (is_food_onion(o) and inside(o, oven))
    return is_inside

behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        # Place the chicken inside the oven
        achieve_once inside(onion, oven)
        # Place the onion inside the oven

behavior close_the_oven_door(oven:item):
    body:
        achieve_once closed(oven)
        # Close the oven door

behavior start_roasting(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven to start roasting

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven) 

        bind chicken: item where:
            is_food_chicken(chicken)
        
        bind onion: item where:
            is_food_onion(onion)

        if not chicken_in_oven(oven, chicken) or not onion_in_oven(oven, onion):
            put_in_oven(chicken, onion, oven)
            close_the_oven_door(oven)
            start_roasting(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2084_around_cupboard_131(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cd_player,cupboard_instance)
        else:
            exp(cd_player,cupboard_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,cupboard_instance]=True
        close[cupboard_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
def is_inside_oven(item:item, oven:item):
    # Function to check if the item is inside the oven
    symbol is_inside = inside(item, oven)
    return is_inside

behavior place_item_in_oven(item:item, oven:item):
    body:
        achieve_once inside(item, oven)

behavior close_and_turn_on_oven(oven:item):
    body:
        achieve_once closed(oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)

        bind oven: item where:
            is_oven(oven)

        if not is_inside_oven(chicken, oven):
            place_item_in_oven(chicken, oven)

        if not is_inside_oven(onion, oven):
            place_item_in_oven(onion, oven)

        close_and_turn_on_oven(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "put the chicken and onion in the oven to roast." ?
Answer: Put the chicken and onion in the oven. Then turn on the oven.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_54_around_pot_54(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==54
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_food_in_oven(food:item, oven:item):
    body:
        achieve_once inside(food, oven)

behavior close_the_oven_door(oven:item):
    body:
        achieve_once closed(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        
        bind onion: item where:
            is_food_onion(onion)
        
        bind oven: item where:
            is_oven(oven)
        
        put_food_in_oven(chicken, oven)
        put_food_in_oven(onion, oven)
        close_the_oven_door(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior place_chicken_in_oven(chicken:item, oven:item):
    body:
        achieve_once inside(chicken, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)
            
        bind chicken: item where:
            is_food_chicken(chicken)
            
        bind oven: item where:
            is_oven(oven)

        place_onion_in_oven(onion, oven)
        place_chicken_in_oven(chicken, oven)
        turn_on_oven(oven)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven) # Place the chicken inside the oven
        achieve_once inside(onion, oven) # Place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)

        bind oven: item where:
            is_oven(oven)

        place_chicken_and_onion_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the chicken and onion in the oven, then turn on the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def place_item_in_oven(item:item, oven:item):
    body:
        achieve_once inside(item, oven)

def activate_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)

        bind oven: item where:
            is_oven(oven)

        place_item_in_oven(chicken, oven)
        place_item_in_oven(onion, oven)
        activate_oven(oven)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5883, column 9.
Expected one of: 
	* __ANON_6
	* _NEWLINE
	* SLASH
	* SEMICOLON
	* __ANON_4
	* FLOORDIV
	* AMPERSAND
	* __ANON_1
	* GREATER_EQ
	* __ANON_2
	* AND
	* LESS_EQ
	* NOT_EQ
	* PLUS
	* RSHIFT
	* COMMA
	* OR
	* AT
	* STAR
	* LESSTHAN
	* LSHIFT
	* __ANON_3
	* CIRCUMFLEX
	* PERCENT
	* DOUBLE_EQUAL
	* __ANON_5
	* VBAR
	* __ANON_7
	* __ANON_8
	* MINUS
	* EQUAL
	* MORETHAN
	* __ANON_0
	* IF

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior place_item_in_oven(item:item, oven:item):
    body:
        achieve_once inside(item, oven)

behavior activate_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)

        bind oven: item where:
            is_oven(oven)

        place_item_in_oven(chicken, oven)
        place_item_in_oven(onion, oven)
        activate_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2084_around_kitchen_counter_132(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cd_player,kitchen_counter_instance)
        else:
            exp(cd_player,kitchen_counter_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cd_player]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_chicken_into_oven(chicken:item, oven:item):
    body:
        achieve_once inside(chicken, oven)

behavior put_onion_into_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior close_and_turn_on_oven(oven:item):
    body:
        achieve_once closed(oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)

        bind oven: item where:
            is_oven(oven)

        put_chicken_into_oven(chicken, oven)
        put_onion_into_oven(onion, oven)
        close_and_turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_onion_and_chicken_in_oven(onion:item, chicken:item, oven:item):
    body:
        achieve_once inside(onion, oven)
        achieve_once inside(chicken, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind onion: item where:
            is_food_onion(onion)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind oven: item where:
            is_oven(oven)

        place_onion_and_chicken_in_oven(onion, chicken, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the chicken and onion in the oven, then turn on the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_in_oven(chicken:item, oven:item):
    body:
        achieve_once inside(chicken, oven)

behavior place_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        
        bind onion: item where:
            is_food_onion(onion)
        
        bind oven: item where:
            is_oven(oven)

        place_chicken_in_oven(chicken, oven)
        place_onion_in_oven(onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_pants_2113_around_basket_for_clothes_2040(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_pants,basket_for_clothes_instance)
        else:
            exp(clothes_pants,basket_for_clothes_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation

behavior put_chicken_in_oven(chicken:item, oven:item):
    body:
        achieve_once inside(chicken, oven)

behavior put_onion_in_oven(onion:item, oven:item):
    body:
        achieve_once inside(onion, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)

        bind oven: item where:
            is_oven(oven)

        put_chicken_in_oven(chicken, oven)
        put_onion_in_oven(onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve_once inside(chicken, oven)
        achieve_once inside(onion, oven)

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)

        bind oven: item where:
            is_oven(oven)

        place_chicken_and_onion_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Roast chicken with onion in the oven.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(oven_141)', 'open_executor(oven_141)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(oven_141)', 'putin_executor(food_chicken_2050, oven_141)', 'walk_executor(fridge_140)', 'walk_executor(oven_141)', 'close_executor(oven_141)', 'switchon_executor(oven_141)']
Time info:
Time consume: 278 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 63
goal generate times: 22
goal correct times: 1
action_num: 13

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
