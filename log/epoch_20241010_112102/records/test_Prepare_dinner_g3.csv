Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
k1,"missed actions: walk_executor(fridge_289);switchoff_executor(fridge_289);open_executor(fridge_289);w
alk_executor(food_bacon_2010);grab_executor(food_bacon_2010);walk_executor(fryingpan_2083);putin_exe
cutor(food_bacon_2010, fryingpan_2083);walk_executor(oil_2079);grab_executor(oil_2079);walk_executor
(fryingpan_2083);putin_executor(oil_2079, fryingpan_2083);grab_executor(fryingpan_2083);walk_executo
r(stove_2065);put_executor(fryingpan_2083, stove_2065);switchon_executor(stove_2065);",,,,
"Reset goals: The sub-goals are: 
['1. Heat the pan.', '2. Cook the bacon until crispy.']",,,,,
" 
behavior heat_pan(pan:item, stove:item):
    body:
        achieve on(pan, stove)
        # Place the pan on the stove

        achieve is_on(stove)
        # Turn on the stove to heat the pan
        
behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Bind the pan which is a frying pan

        bind stove: item where:
            is_stove(stove)
        # Bind the stove

        heat_pan(pan, stove)
        # Perform the behavior to heat the pan on the stove
",From function reset_goal,,,,
,,,,"Record from func query_human in agent.py
Question: Can you tell me how to heat the pan.
Answer: I don't know.
",
,,,,"Record from func query_human in agent.py
Question: Can you tell me how to cook the bacon until crispy.
Answer: I don't know.
",
,,,,,"(CrowControllerApplier<walk_executor(kitchen_counter_230)>, CrowControllerApplier<exp(fryingpan_2083
, kitchen_counter_230)>, CrowControllerApplier<walk_executor(fryingpan_2083)>, CrowControllerApplier
<grab_executor(fryingpan_2083)>, CrowControllerApplier<walk_executor(stove_2065)>, CrowControllerApp
lier<put_executor(fryingpan_2083, stove_2065)>, CrowControllerApplier<switchon_executor(stove_2065)>
)"
,,walk_executor(kitchen_counter_230),"Find remote_control_2052. Find napkin_2005. Find knife_2050. Find cutting_board_2051. Find cup_2063.
 Find cup_2064. Find pot_2069. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. 
Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is i
nside dining_room_201. Robot is close remote_control_2052. Robot is close kitchen_counter_230. Grabb
ing remote_control_2052 by right hand. Robot is on couch_352. Grabbing remote_control_2052 by left h
and. ",,
Checking k1,Evaluator failed to find a plan,,,,
,,"exp(fryingpan_2083, kitchen_counter_230)",Find fryingpan_2083. ,,
Checking k1,Evaluator failed to find a plan,,,,
"Reset goals: The sub-goals are: 
['1. Heat a pan on the stove.', '2. Cook the bacon in the heated pan until desired crispiness is ach
ieved.']",,,,,
" 
def has_fryingpan():
    # Determine if the frying pan exists and is close to the character
    symbol has_fryingpan=exists fryingpan: item : is_fryingpan(fryingpan) and close_char(char, fryin
gpan)
    return has_fryingpan

def is_heatable_on_stove(stove: item):
    # Check if the stove has the capability to be turned on (heatable)
    symbol heatable_on_stove = has_switch(stove) and plugged(stove)
    return heatable_on_stove

behavior heat_pan_on_stove():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and close_char(char, fryingpan)
        # Bind the fryingpan instance that is close to the character
        
        achieve on(fryingpan, stove)
        # Place the fryingpan on the stove
        
        if not is_heatable_on_stove(stove):
            observe(stove, ""Check if the stove is plugged and has a switch that can be turned on"")
        
        achieve is_on(stove)
        # Turn on the stove
        
behavior __goal__():
    body:
        bind kitchen_counter_230: item where:
            is_kitchen_counter(kitchen_counter_230)
            
        if not has_fryingpan():
            # Check if we need to locate the fryingpan due to it not being close
            observe(kitchen_counter_230, ""Locate the fryingpan around the kitchen counter"")

        heat_pan_on_stove()
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Heat a pan over medium heat.', '2. Place the bacon strips in the pan.', ""3. Cook the bacon unti
l it's crispy, turning as needed."", '4. Remove the bacon from the pan and drain on paper towels.']",,,,,
" 
def has_switch(fryingpan: item):
    # Determines whether the fryingpan has a switch
    symbol has_switch = exists switch: item: has_switch(switch) and close(switch, fryingpan)
    return has_switch

behavior heat_pan(fryingpan: item):
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select kitchen counter
        achieve on(fryingpan, kitchen_counter)
        # Move fryingpan to the kitchen counter

        bind stove: item where:
            is_stove(stove) and close(fryingpan, stove)
        # Select stove close to fryingpan
        if has_switch(fryingpan):
            bind switch: item where:
                has_switch(switch) and close(switch, fryingpan)
            achieve_once is_on(switch)
            # Turn on the switch to heat the pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select fryingpan
        
        heat_pan(fryingpan)
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Heat the pan.', '2. Cook the bacon in the pan.']",,,,,
" 
behavior heat_the_pan(pan:item, stove:item):
    body:
        achieve on(pan, stove) # Place the pan on the stove

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan) and id[pan]==2083
        # Select the frying pan with ID 2083
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        heat_the_pan(pan, stove) # Heat the frying pan on the stove
",From function reset_goal,,,,
,,,,"Record from func query_human in agent.py
Question: Can you teach me how to ""1. heat the pan."" ?
Answer: I don't know.
",
" 
def has_switch_to_turn_fryingpan_on(fryingpan:item):
    # Determine whether the fryingpan has a switch to turn it on
    symbol has_switch=exists switch:item : close(switch, fryingpan) and has_switch(switch)
    return has_switch

behavior turn_on_fryingpan_by_switch(fryingpan:item):
    body:
        bind switch: item where:
            close(switch,fryingpan) and has_switch(switch)
        achieve_once is_on(switch)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        if has_switch_to_turn_fryingpan_on(fryingpan):
            turn_on_fryingpan_by_switch(fryingpan)
        else:
            achieve is_on(fryingpan)
",From function reset_sub_goal,,,,
"Reset goals: The sub-goals are: 
['1. Heat the pan over medium heat.', '2. Cook the bacon in the heated pan until crispy or desired d
oneness.']",,,,,
" 
behavior heat_pan(pan: item, stove: item):
    body:
        achieve on(pan, stove)
        # Place the pan on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and not visited(fryingpan)
        # Select the frying pan that has yet to be visited
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        observe(fryingpan, ""Check is it on the kitchen counter or elsewhere"")
        observe(stove, ""Ensure the stove is in a state to heat the pan"")

        heat_pan(fryingpan, stove)
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Heat the pan.', '2. Cook the bacon in the pan.', '3. Remove the bacon from the pan.']",,,,,
" 
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select frying pan

        bind stove: item where:
            is_stove(stove) and close(fryingpan, stove)
        # Select a stove close to the frying pan

        achieve on(fryingpan, stove) 
        # Place the frying pan on the stove

        turn_on_stove(stove) 
        # Turn on the stove to heat the pan
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Heat a pan on the stove.', '2. Cook the bacon in the pan until crispy.']",,,,,
"
def has_stove_fan_char_near(char:character):
    # Determine if the character is close to the stove or a relevant switch
    symbol is_close=exists stovefan: item: is_stovefan(stovefan) and close_char(char, stovefan)
    return is_close

behavior heat_pan_on_stove(fryingpan:item, stove:item):
    body:
        observe(stove, ""Check is there a stove fan"") 
        # Check for a stove fan, if any
        if has_stove_fan_char_near(char):
            achieve is_on(stove)
            # Turn on the stove once close to the stove fan
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        heat_pan_on_stove(fryingpan, stove)
",From function reset_goal,,,,
Checking k1,Evaluator failed to find a plan,,,,
Checking k1,Evaluator failed to find a plan,,,,
