Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
k1,"missed actions: walk_executor(book_2066);grab_executor(book_2066);walk_executor(coffee_table_2068);p
ut_executor(book_2066, coffee_table_2068);",,,,
k2,missed actions: walk_executor(window_348);open_executor(window_348);,,,,
"Reset goals: The sub-goals are: 
['1. Find the book and put it on the coffee table in the home office.', '2. Open the window in the h
ome office.']",,,,,
" 
def in_home_office(item:item):
    # Determine whether the item is inside the home office
    symbol in_office=exists room: item : is_home_office(room) and inside(item, room)
    return in_office

def is_book_on_coffee_table(book:item, coffee_table:item):
    # Check if the book is on the coffee table
    symbol on_coffee_table=on(book, coffee_table)
    return on_coffee_table

behavior put_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve inside(book, coffee_table)
        # Ensure the book is placed on the coffee table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select home office

        bind book: item where:
            is_book(book) and in_home_office(book)
        # Select a book inside the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and in_home_office(coffee_table)
        # Select a coffee table inside the home office

        if not is_book_on_coffee_table(book, coffee_table):
            put_on_coffee_table(book, coffee_table)
        # If the book is not already on the coffee table, move it there
",From function reset_goal,,,,
,,,,"Record from func query_human in agent.py
Question: Can you tell me how to find the book and put it on the coffee table in the home office.
Answer: I don't know.
",
,,,,"Record from func query_human in agent.py
Question: Can you tell me how to open the window in the home office.
Answer: I don't know.
",
"Reset goals: The sub-goals are: 
['1. Find the book.', '2. Put the book on the coffee table in the home office.', '3. Open the window
 in the home office.']",,,,,
" 
def has_book(instance:item):
    # Function to check if an item is a book
    return is_book(instance)

behavior __goal__():
    body:
        if exists book: item : is_book(book):
            # Check if there is a known book in the current environment
            bind book: item where:
                is_book(book)
            # Select the book
            achieve close_char(char, book) 
            # Move the character closer to the book

        else: 
            # If no book is found, initiate exploration to locate one
            foreach item: item:
                if not visited(item):
                    observe(item, ""Check if it is a book"")
                    # Observe whether the item is a book
",From function reset_goal,,,,
,,,,,"(CrowControllerApplier<walk_executor(bookshelf_233)>, CrowControllerApplier<open_executor(bookshelf_
233)>, CrowControllerApplier<exp(book_2066, bookshelf_233)>, CrowControllerApplier<walk_executor(boo
k_2066)>)"
,,walk_executor(bookshelf_233),"Find remote_control_2052. Robot is inside dining_room_201. Robot is close remote_control_2052. Robot
 is close bookshelf_233. Robot is close floor_207. Grabbing remote_control_2052 by right hand. Robot
 is on couch_352. Grabbing remote_control_2052 by left hand. ",,
Checking k1,Evaluator failed to find a plan,,,,
" 
def exists_book_on_shelf(bookshelf:item):
    # Function to check if there is a book visible on the specified bookshelf
    symbol has_book=exists o: item : is_book(o) and close(o, bookshelf)
    return has_book

behavior __goal__():
    body:
        if exists bookshelf: item : is_bookshelf(bookshelf) and exists_book_on_shelf(bookshelf):
            # If we have already found a book close to a bookshelf, we can directly approach it
            bind bookshelf: item where:
                is_bookshelf(bookshelf) and exists_book_on_shelf(bookshelf)
            achieve close_char(char, bookshelf)

        else:
            # If no book is found close to an bookshelf, initiate exploration to locate one
            foreach bookshelf: item:
                if is_bookshelf(bookshelf) and not visited(bookshelf):
                    observe(bookshelf,""Check for any book on or near the bookshelf"")
",From function reset_sub_goal,,,,
Checking k1,Evaluator failed to find a plan,,,,
"Reset goals: The sub-goals are: 
['1. Find the book.', '2. Place the book on the coffee table in the home office.', '3. Open the wind
ow in the home office.']",,,,,
"behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book item
        
        if close_char(char, book):
            achieve_once inhand(book)
            # Pick up the book
            
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table item
        
        achieve on(book, coffee_table)
        # Place the book on the coffee table",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Find the book.', '2. Put the book on the coffee table in the home office.', '3. Open the window
 in the home office.']",,,,,
" 
def has_book_on_bookshelf(bookshelf:item):
    # Check if there is a book on the specified bookshelf
    symbol has_book = exists o: item : is_book(o) and on(o, bookshelf)
    return has_book

behavior __goal__():
    body:
        if exists bookshelf: item : is_bookshelf(bookshelf) and has_book_on_bookshelf(bookshelf):
            # If there is a bookshelf with a book, select it and approach it
            bind bookshelf: item where:
                is_bookshelf(bookshelf) and has_book_on_bookshelf(bookshelf)
            achieve close_char(char, bookshelf)

        else:
            # Check all bookshelves in the scene that have not been visited
            foreach bookshelf: item:
                if is_bookshelf(bookshelf) and not visited(bookshelf):
                    observe(bookshelf,""Check is there any book on the bookshelf"")
                    # Observe whether there are any books on each bookshelf
",From function reset_goal,,,,
,,,,"Record from func query_human in agent.py
Question: Can you teach me how to ""1. find the book."" ?
Answer: The book is on the bookshelf in the bedroom.
",
" 
def is_valid_bookshelf(bookshelf: item):
    # Determine whether the bookshelf is in the bedroom where the book is located
    symbol valid_shelf = exists room: item : is_bedroom(room) and inside(bookshelf, room)
    return valid_shelf

behavior __goal__():
    body:
        if exists bookshelf: item : is_bookshelf(bookshelf) and is_valid_bookshelf(bookshelf):
            # Check if there is a bookshelf in the bedroom based on the available information
            bind bookshelf: item where:
                is_bookshelf(bookshelf) and is_valid_bookshelf(bookshelf)
            achieve close_char(char, bookshelf) 
            # Move the character closer to the bookshelf in the bedroom

        else: 
           # If no suitable bookshelf is found, initiate exploration to locate one
            foreach bookshelf: item:
                if is_bookshelf(bookshelf) and not visited(bookshelf):
                    observe(bookshelf, ""Check is there any book on the bookshelf"")
                    # Observe whether the bookshelf has a book present
",From function reset_sub_goal,,,,
"Reset goals: The sub-goals are: 
['1. Find the book and place it on the coffee table in the home office.', '2. Open the window in the
 home office.']",,,,,
" 
def reachable_bookshelf(shelf:item):
    symbol reachable=exists room: item : is_bedroom(room) and inside(shelf, room)
    return reachable

behavior find_and_place_book(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind shelf: item where:
            is_bookshelf(shelf) and reachable_bookshelf(shelf)
        # Select a reachable bookshelf in the bedroom

        bind book: item where:
            is_book(book) and close(book, shelf)
        # Select a book that is close to the bookshelf

        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table

        find_and_place_book(book, coffee_table) 
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Find the book.', '2. Put the book on the coffee table in the home office.', '3. Open the window
 in the home office.']",,,,,
" 
behavior find_book_on_bookshelf(bookshelf:item):
    body:
        if not visited(bookshelf):
            observe(bookshelf, ""Check is there any book on this bookshelf"")

behavior __goal__():
    body:
        bind bookshelf: item where:
            is_bookshelf(bookshelf) and id[bookshelf] == 233
        find_book_on_bookshelf(bookshelf)
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Find the book you are looking for.', '2. Place the book on the coffee table in the home office.
', '3. Open the window in the home office.']",,,,,
" 
def is_book_on_bookshelf(book: item, bookshelf: item):
    # Function to check if a book is on the specified bookshelf
    symbol book_on_shelf=exists b: item : is_book(b) and on(b, bookshelf)
    return book_on_shelf

behavior __goal__():
    body:
        bind bookshelf: item where:
            is_bookshelf(bookshelf) and can_open(bookshelf) and id[bookshelf] == 233
        # Select the bookshelf in the bedroom, identified by ID 233

        bind book: item where:
            is_book(book)
        
        if is_book_on_bookshelf(book, bookshelf):
            bind book: item where:
                is_book(book) and on(book, bookshelf)
            # Select a book on the bookshelf

            achieve close_char(char, book)
            # Move the character closer to the book

            achieve_once inhand(book)
            # Temporarily hold the book

        else:
            # If the book is not found on the bookshelf, observe the bookshelf
            observe(bookshelf, ""Check if there is a book on the bookshelf"")
",From function reset_goal,,,,
Checking k1,Evaluator failed to find a plan,,,,
Checking k1,Evaluator failed to find a plan,,,,
Checking k2,Evaluator failed to find a plan,,,,
