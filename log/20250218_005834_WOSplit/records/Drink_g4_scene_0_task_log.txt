From agent.py
Reset goals: The sub-goals are: 
['Make some coffee']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_ready(cup:item):
    # Function to check whether the cup contains coffee
    symbol has_coffee= exists coffee: item : (is_cup(cup) and drinkable(coffee) and inside(coffee, cup))
    return has_coffee

behavior prepare_coffee(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        achieve has_water(coffee_maker)
        achieve is_on(coffee_maker)

behavior pour_coffee_from_maker(cup:item, coffee_maker:item):
    body:
        achieve_once inside(cup, coffee_maker)

behavior __goal__():
    body:
        # Step 1: Find a coffee maker
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        
        # Step 2: Prepare the coffee using the coffee maker
        prepare_coffee(coffee_maker)
        
        # Step 3: Get a cup to pour the coffee into
        bind cup: item where:
            is_cup(cup)
        
        if not is_coffee_ready(cup):
            pour_coffee_from_maker(cup, coffee_maker)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_coffee_maker(coffee_maker:item):
    body:
        observe(coffee_maker,"Check if the coffee maker is suitable for making coffee")

behavior prepare_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        achieve clean(coffee_maker)
        achieve closed(coffee_maker)
        achieve has_water(coffee_maker)

behavior operate_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior wait_for_coffee(coffee_maker:item):
    body:
        # No specific achieve state here waiting for the coffee to be ready

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Ensure the coffee maker is appropriate for making coffee
        observe_coffee_maker(coffee_maker)
        # Prepare the coffee maker
        prepare_coffee_maker(coffee_maker)
        # Operate the coffee maker
        operate_coffee_maker(coffee_maker)
        # Wait for the coffee to be ready
        wait_for_coffee(coffee_maker)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_DEDENT', '') at line 5684, column 10.
Expected one of: 
	* _INDENT

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation

behavior observe_coffee_maker(coffee_maker:item):
    body:
        observe(coffee_maker, "Check if the coffee maker is suitable for making coffee")

behavior prepare_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        achieve clean(coffee_maker)
        achieve closed(coffee_maker)
        achieve has_water(coffee_maker)

behavior operate_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior wait_for_coffee(coffee_maker:item):
    body:
        achieve_once visited(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        observe_coffee_maker(coffee_maker)
        prepare_coffee_maker(coffee_maker)
        operate_coffee_maker(coffee_maker)
        wait_for_coffee(coffee_maker)

#goal_representation_end

##############################
