From agent.py
Reset goals: The sub-goals are: 
['1. Find and heat the milk.', '2. Add cereal to the hot milk and serve.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2132_around_table_114(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def cup_contains_milk(cup:item):
    # Function to check if the cup contains milk
    symbol contains_milk = exists milk: item : (is_milk(milk) and inside(milk, cup))
    return contains_milk

behavior place_cup_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup inside the microwave

behavior heat_cup_with_milk(microwave:item):
    body:
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and cup_contains_milk(cup)
        # Select a cup containing milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        place_cup_in_microwave(cup, microwave)
        heat_cup_with_milk(microwave)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior heat_milk_in_microwave(milk:item, microwave:item):
    body:
        achieve_once inside(milk, microwave)
        # Place the milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                find_milk(milk)

        bind milk: item where:
            is_milk(milk) and visited(milk)

        bind microwave: item where:
            is_microwave(microwave)

        heat_milk_in_microwave(milk, microwave)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior heat_milk_in_microwave(milk:item, microwave:item):
    body:
        achieve_once inside(milk, microwave)
        # Place the milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                find_milk(milk)

        bind milk: item where:
            is_milk(milk) and visited(milk)

        bind microwave: item where:
            is_microwave(microwave)

        heat_milk_in_microwave(milk, microwave)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)obs(milk_2115, look around this place)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(milk_2115, fridge_126)
Fail to find milk_2115 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_food_1000)exp(milk_2115, food_food_1000)walk_executor(milk_2115)obs(milk_2115, look around this place)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(food_food_1000)
Robot find: Robot is close to the food_food_1000. 
##############################
From agent.py
exp(milk_2115, food_food_1000)
Fail to find milk_2115 around food_food_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2123)exp(milk_2115, cutting_board_2123)walk_executor(milk_2115)obs(milk_2115, look around this place)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(milk_2115, cutting_board_2123)
Fail to find milk_2115 around cutting_board_2123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(milk_2115, cupboard_118)walk_executor(milk_2115)obs(milk_2115, look around this place)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(milk_2115, cupboard_118)
Fail to find milk_2115 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(milk_2115, cupboard_117)walk_executor(milk_2115)obs(milk_2115, look around this place)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(milk_2115, cupboard_117)
Fail to find milk_2115 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(milk_2115, kitchen_counter_122)walk_executor(milk_2115)obs(milk_2115, look around this place)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find milk_2115 ?
Answer: Robot, you can find milk_2115 in the dining_room_41. It is located on table_114. Look for the table and milk_2115 will be on it, nearby.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, you can find milk_2115 in the dining_room_41. It is located on table_114. Look for the table and milk_2115 will be on it, nearby.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for milk_2115 around fridge_126.
Action 5: Walk to food_food_1000.
Action 6: look for milk_2115 around food_food_1000.
Action 7: Walk to cutting_board_2123.
Action 8: look for milk_2115 around cutting_board_2123.
Action 9: Walk to cupboard_118.
Action 10: Open cupboard_118.
Action 11: look for milk_2115 around cupboard_118.
Action 12: Walk to cupboard_117.
Action 13: look for milk_2115 around cupboard_117.
Action 14: Walk to kitchen_counter_122.

##############################
From agent.py
exp(milk_2115, kitchen_counter_122)
Fail to find milk_2115 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(milk_2115, table_114)walk_executor(milk_2115)obs(milk_2115, look around this place)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(milk_2115, table_114)
Find milk_2115. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2115)obs(milk_2115, look around this place)walk_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(microwave_135)putin_executor(milk_2115, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
obs(milk_2115, look around this place)
Get this information:  milk_2115 is close to table_114. milk_2115 is close to character_240. milk_2115 is on table_114. milk_2115 is inside dining_room_41.
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. Grabbing milk_2115 by right hand. 
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the milk_2115. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
putin_executor(milk_2115, microwave_135)
Robot find: Robot is close to the milk_2115. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. milk_2115 is close microwave_135. microwave_135 is close milk_2115. milk_2115 is inside microwave_135. milk_2115 released by right hand. 
##############################
From agent.py
close_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is closed. 
##############################
From agent.py
switchon_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_cup_2049(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2049
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(measuring_cup,cup_instance)
        else:
            exp(measuring_cup,cup_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,cup_instance]=True
        close[cup_instance,measuring_cup]=True
    

behavior find_food_food_2073_around_bowl_2141(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_food,bowl_instance)
        else:
            exp(food_food,bowl_instance)
    eff:
        unknown[food_food]=False
        close[food_food,bowl_instance]=True
        close[bowl_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_milk_and_serve(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)

        bind cup: item where:
            is_cup(cup) and exists milk: item : (is_milk(milk) and inside(milk, cup))
        # Select the cup containing hot milk

        add_cereal_to_milk_and_serve(cereal, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'milk') at line 5479, column 36.
Expected one of: 
	* SEMICOLON
	* COMMA
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_food_food_2074_around_food_salt_2041(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_salt_instance:item where:
            is_food_salt(food_salt_instance) and id[food_salt_instance]==2041
        achieve close_char(char,food_salt_instance)
        if can_open(food_salt_instance):
            achieve_once open(food_salt_instance)
            exp(food_food,food_salt_instance)
        else:
            exp(food_food,food_salt_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_salt_instance]=True
        close[food_salt_instance,food_food]=True
    

#goal_representation

behavior add_cereal_to_milk_and_serve(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)

def cup_contains_hot_milk(cup:item):
    symbol contains_hot_milk = exists milk: item : (is_milk(milk) and inside(milk, cup))
    return contains_hot_milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)

        bind cup: item where:
            is_cup(cup) and cup_contains_hot_milk(cup)
        # Select the cup containing hot milk

        add_cereal_to_milk_and_serve(cereal, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2094_around_bowl_2140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_food,bowl_instance)
        else:
            exp(food_food,bowl_instance)
    eff:
        unknown[food_food]=False
        close[food_food,bowl_instance]=True
        close[bowl_instance,food_food]=True
    

behavior find_measuring_cup_2012_around_cup_2049(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2049
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(measuring_cup,cup_instance)
        else:
            exp(measuring_cup,cup_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,cup_instance]=True
        close[cup_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_hot_milk(cereal:item, milk:item):
    body:
        achieve_once inside(cereal, milk)
        # Add cereal to the hot milk

behavior serve_hot_milk_with_cereal(cup:item, table:item):
    body:
        achieve_once on(cup, table)
        # Place the cup with milk and cereal on the table to serve

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal to add to the hot milk

        bind cup: item where:
            is_cup(cup)
        # Select the cup containing the hot milk

        add_cereal_to_hot_milk(cereal, cup)

        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)

        serve_hot_milk_with_cereal(cup, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_cereal_to_hot_milk(cereal:item, milk:item):
    body:
        achieve_once inside(cereal, milk)
        # Add cereal to the hot milk

behavior serve_hot_milk_with_cereal(cup:item, table:item):
    body:
        achieve_once on(cup, table)
        # Place the cup with milk and cereal on the table to serve

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal to add to the hot milk

        bind cup: item where:
            is_cup(cup)
        # Select the cup containing the hot milk

        add_cereal_to_hot_milk(cereal, cup)

        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)

        serve_hot_milk_with_cereal(cup, table)

##############################
From agent.py-> find a plan in act()
walk_executor(food_cereal_2087)grab_executor(food_cereal_2087)walk_executor(cup_2132)putin_executor(food_cereal_2087, cup_2132)
##############################
From agent.py
walk_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. 
##############################
From agent.py
grab_executor(food_cereal_2087)
Robot find: Robot is close to the fridge_126. Robot is close to the food_cereal_2087. Grabbing food_cereal_2087 by right hand. 
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the food_cereal_2087. Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
putin_executor(food_cereal_2087, cup_2132)
Robot find: Robot is close to the food_cereal_2087. Robot is close to the table_114. Robot is close to the cup_2132. cup_2132 is close food_cereal_2087. food_cereal_2087 is inside cup_2132. food_cereal_2087 is close cup_2132. food_cereal_2087 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to add the milk to the cup containing the cereal and serve it on the table.
##############################
From agent.py
Human Instruction: You need to add the milk to the cup containing the cereal and serve it on the table.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for milk_2115 around fridge_126.
Action 5: Walk to food_food_1000.
Action 6: look for milk_2115 around food_food_1000.
Action 7: Walk to cutting_board_2123.
Action 8: look for milk_2115 around cutting_board_2123.
Action 9: Walk to cupboard_118.
Action 10: Open cupboard_118.
Action 11: look for milk_2115 around cupboard_118.
Action 12: Walk to cupboard_117.
Action 13: look for milk_2115 around cupboard_117.
Action 14: Walk to kitchen_counter_122.
Action 15: look for milk_2115 around kitchen_counter_122.
Action 16: Walk to table_114.
Action 17: look for milk_2115 around table_114.
Action 18: Walk to milk_2115.
Action 19: Observe around milk_2115 with the question of look around this place.
Action 20: Walk to microwave_135.
Action 21: Open microwave_135.
Action 22: Walk to milk_2115.
Action 23: Grab milk_2115.
Action 24: Walk to microwave_135.
Action 25: Put milk_2115 into microwave_135.
Action 26: Close microwave_135.
Action 27: Switch on microwave_135.
Action 28: Walk to food_cereal_2087.
Action 29: Grab food_cereal_2087.
Action 30: Walk to cup_2132.
Action 31: Put food_cereal_2087 into cup_2132.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_hot_milk(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)

behavior serve_cup_on_table(cup:item, table:item):
    body:
        achieve_once on(cup, table)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)

        bind cup: item where:
            is_cup(cup) and exists milk:item : (is_milk(milk) and inside(milk, cup))
        
        bind table: item where:
            is_table(table)

        add_cereal_to_hot_milk(cereal, cup)
        serve_cup_on_table(cup, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'milk') at line 5464, column 36.
Expected one of: 
	* SEMICOLON
	* COMMA
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_oil_2149_around_fryingpan_2154(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2154
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(oil,fryingpan_instance)
        else:
            exp(oil,fryingpan_instance)
    eff:
        unknown[oil]=False
        close[oil,fryingpan_instance]=True
        close[fryingpan_instance,oil]=True
    

#goal_representation

behavior add_cereal_to_hot_milk(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)

behavior serve_cup_on_table(cup:item, table:item):
    body:
        achieve_once on(cup, table)

def is_cup_with_hot_milk(cup:item):
    symbol with_hot_milk = exists milk: item : (is_milk(milk) and inside(milk, cup))
    return with_hot_milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)

        bind cup: item where:
            is_cup(cup) and is_cup_with_hot_milk(cup)

        bind table: item where:
            is_table(table)

        add_cereal_to_hot_milk(cereal, cup)
        serve_cup_on_table(cup, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

behavior find_tray_128_around_table_270(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(tray,table_instance)
        else:
            exp(tray,table_instance)
    eff:
        unknown[tray]=False
        close[tray,table_instance]=True
        close[table_instance,tray]=True
    

#exp_behavior_end

#goal_representation

behavior add_cereal_to_cup(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)

behavior serve_cup_on_table(cup:item, table:item):
    body:
        achieve_once on(cup, table)

def cup_contains_hot_milk(cup:item):
# Function to check if the cup contains hot milk
    symbol contains_hot_milk = exists milk: item : (is_milk(milk) and inside(milk, cup))
    return contains_hot_milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and cup_contains_hot_milk(cup)
        # Select the cup containing hot milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal

        bind table: item where:
            is_table(table)
        # Select a table

        add_cereal_to_cup(cereal, cup)
        serve_cup_on_table(cup, table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_milk(cereal:item, milk:item):
    body:
        achieve_once inside(cereal, milk)

behavior place_cup_on_table(cup:item, table:item):
    body:
        achieve_once on(cup, table)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal) and inside(cereal, cup)
        # Select the cereal inside the cup

        bind milk: item where:
            is_milk(milk) and inside(milk, cup)
        # Select the milk inside the cup

        bind table: item where:
            is_table(table)
        # Select an available table
        
        add_cereal_to_milk(cereal, milk)
        place_cup_on_table(cup, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cup; available variables: [Variable<cereal: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_butter_2007_around_fryingpan_2154(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2154
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(food_butter,fryingpan_instance)
        else:
            exp(food_butter,fryingpan_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fryingpan_instance]=True
        close[fryingpan_instance,food_butter]=True
    

behavior find_food_food_2001_around_fryingpan_2154(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2154
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(food_food,fryingpan_instance)
        else:
            exp(food_food,fryingpan_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fryingpan_instance]=True
        close[fryingpan_instance,food_food]=True
    

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

#goal_representation
behavior add_cereal_to_milk(cereal:item, milk:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        achieve_once inside(milk, cup)
        # Put the cereal and milk inside the cup

behavior place_cup_on_table(cup:item, table:item):
    body:
        achieve_once on(cup, table)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)

        bind milk: item where:
            is_milk(milk)

        bind cup: item where:
            is_cup(cup)

        bind table: item where:
            is_table(table)

        add_cereal_to_milk(cereal, milk, cup)
        place_cup_on_table(cup, table)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior add_cereal_to_milk(cereal:item, milk:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        achieve_once inside(milk, cup)
        # Put the cereal and milk inside the cup

behavior place_cup_on_table(cup:item, table:item):
    body:
        achieve_once on(cup, table)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)

        bind milk: item where:
            is_milk(milk)

        bind cup: item where:
            is_cup(cup)

        bind table: item where:
            is_table(table)

        add_cereal_to_milk(cereal, milk, cup)
        place_cup_on_table(cup, table)
##############################
From agent.py-> find a plan in act()
walk_executor(microwave_135)switchoff_executor(microwave_135)open_executor(microwave_135)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(cup_2132)putin_executor(milk_2115, cup_2132)
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
switchoff_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is turned off. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the milk_2115. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the milk_2115. Robot is close to the microwave_135. 
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the milk_2115. Robot is close to the microwave_135. Grabbing milk_2115 by right hand. 
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the milk_2115. Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
putin_executor(milk_2115, cup_2132)
Robot find: Robot is close to the milk_2115. Robot is close to the table_114. Robot is close to the cup_2132. milk_2115 is close cup_2132. cup_2132 is close milk_2115. milk_2115 is inside cup_2132. milk_2115 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(food_food_1000)', 'walk_executor(cutting_board_2123)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(cupboard_117)', 'walk_executor(kitchen_counter_122)', 'walk_executor(table_114)', 'walk_executor(milk_2115)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(milk_2115)', 'grab_executor(milk_2115)', 'walk_executor(microwave_135)', 'putin_executor(milk_2115, microwave_135)', 'close_executor(microwave_135)', 'switchon_executor(microwave_135)', 'walk_executor(food_cereal_2087)', 'grab_executor(food_cereal_2087)', 'walk_executor(cup_2132)', 'putin_executor(food_cereal_2087, cup_2132)', 'walk_executor(microwave_135)', 'switchoff_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(milk_2115)', 'grab_executor(milk_2115)', 'walk_executor(cup_2132)', 'putin_executor(milk_2115, cup_2132)']
Time info:
Time consume: 234 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 35
goal generate times: 7
goal correct times: 1
action_num: 30

Task complete rate:
Keystate: k1 - Requires: 5 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
