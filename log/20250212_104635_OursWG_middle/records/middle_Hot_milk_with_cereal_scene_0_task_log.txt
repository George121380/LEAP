From agent.py
Reset goals: The sub-goals are: 
['1. Find the milk and cereal.', '2. Pour the cereal into a cup.', '3. Warm the milk and pour it into the cup with cereal.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cereal_2015_around_kitchen_counter_230(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)obs(milk_2043, look around this place)walk_executor(kitchen_counter_230)exp(food_cereal_2015, kitchen_counter_230)walk_executor(food_cereal_2015)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_and_cereal():
    # Check if both milk and cereal are found
    symbol found_milk_and_cereal = exists milk: item : (is_milk(milk)) and exists cereal: item : (is_food_cereal(cereal))
    return found_milk_and_cereal

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        if not has_milk_and_cereal():
            # If milk and cereal are not both found, proceed to search for them
            foreach milk: item:
                if is_milk(milk) and not visited(milk):
                    search_for_milk(milk)

            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    search_for_cereal(cereal)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cereal') at line 5806, column 83.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not is_food_item_observed(milk):
                # Check all unvisited milk items
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not is_food_item_observed(cereal):
                # Check all unvisited cereal items
                search_for_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not is_food_item_observed(milk):
                # Check all unvisited milk items
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not is_food_item_observed(cereal):
                # Check all unvisited cereal items
                search_for_cereal(cereal)

##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_item_observed(item:item):
    # Function to check if the item has been observed
    symbol observed = visited(item)
    return observed

behavior search_for_item(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_item_observed(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_item_observed(item:item):
    # Function to check if the item has been observed
    symbol observed = visited(item)
    return observed

behavior search_for_item(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_item_observed(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_milk_or_cereal_found(item: item):
    # Function to check if milk or cereal is found and marked as visited
    symbol found = visited(item)
    return found

behavior search_for_item(item: item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_milk_or_cereal_found(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_milk_or_cereal_found(item: item):
    # Function to check if milk or cereal is found and marked as visited
    symbol found = visited(item)
    return found

behavior search_for_item(item: item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_milk_or_cereal_found(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_cup_2063_around_coffee_table_2068(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cup,coffee_table_instance)
        else:
            exp(cup,coffee_table_instance)
    eff:
        unknown[cup]=False
        close[cup,coffee_table_instance]=True
        close[coffee_table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_item_observed(item:item):
    # Function to check if the item (milk or cereal) has been observed
    symbol observed = visited(item)
    return observed

behavior search_for_item(item:item):
    body:
        achieve_once visited(item)
        # Observe the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_item_observed(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_item_observed(item:item):
    # Function to check if the item (milk or cereal) has been observed
    symbol observed = visited(item)
    return observed

behavior search_for_item(item:item):
    body:
        achieve_once visited(item)
        # Observe the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_item_observed(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def find_food_item(food_item:item):
    # Function to check if the food item (milk or cereal) has been found
    symbol found = visited(food_item)
    return found

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not find_food_item(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_food_item(food_item:item):
    # Function to check if the food item (milk or cereal) has been found
    symbol found = visited(food_item)
    return found

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not find_food_item(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_near_fridge(fridge: item):
    # Function to check if milk is near the fridge
    symbol has_milk_near=exists milk: item : (is_milk(milk) and close(milk, fridge))
    return has_milk_near

def has_cereal_near_fridge(fridge: item):
    # Function to check if cereal is near the fridge
    symbol has_cereal_near=exists cereal: item : (is_food_cereal(cereal) and close(cereal, fridge))
    return has_cereal_near

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289

        if has_milk_near_fridge(fridge) and has_cereal_near_fridge(fridge):
            # If milk and cereal are already close to the fridge, no further action is needed
            bind milk: item where:
                is_milk(milk) and close(milk, fridge)
            bind cereal: item where:
                is_food_cereal(cereal) and close(cereal, fridge)
        else:
            # Observe once for milk or cereal if they are not present near the fridge
            foreach item: item:
                if (is_milk(item) or is_food_cereal(item)) and not visited(item):
                    observe(item, "Check if this is milk or cereal")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed = visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed = visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)
        
        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)
        
        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

def find_milk_and_cereal():
    # Find both milk and cereal
    symbol is_found = exists o: item : ((is_milk(o) or is_food_cereal(o)) and visited(o))
    return is_found

behavior search_for_food_items(food_item:item):
    body:
        achieve_once visited(food_item)

behavior __goal__():
    body:
        if not find_milk_and_cereal():
            foreach food_item: item:
                if (is_milk(food_item) or is_food_cereal(food_item)) and not visited(food_item):
                    search_for_food_items(food_item)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_pants_2085_around_basket_for_clothes_2006(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_pants,basket_for_clothes_instance)
        else:
            exp(clothes_pants,basket_for_clothes_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_pants]=True
    

behavior find_cd_player_2060_around_closetdrawer_392(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cd_player,closetdrawer_instance)
        else:
            exp(cd_player,closetdrawer_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,closetdrawer_instance]=True
        close[closetdrawer_instance,cd_player]=True
    

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior locate_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                locate_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                locate_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior locate_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior locate_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                locate_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                locate_cereal(cereal)

##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_item_observed(obj:item):
    # Function to check if the item (milk or cereal) has been observed
    symbol observed=visited(obj)
    return observed

behavior search_for_milk_or_cereal(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_item_observed(item):
                # Check all unvisited items that are either milk or cereal
                search_for_milk_or_cereal(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_item_observed(obj:item):
    # Function to check if the item (milk or cereal) has been observed
    symbol observed=visited(obj)
    return observed

behavior search_for_milk_or_cereal(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_item_observed(item):
                # Check all unvisited items that are either milk or cereal
                search_for_milk_or_cereal(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def can_find(item: item):
    # Function to check if the item can be found
    symbol found=visited(item)
    return found

behavior search_for_item(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not can_find(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def can_find(item: item):
    # Function to check if the item can be found
    symbol found=visited(item)
    return found

behavior search_for_item(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not can_find(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
def is_item_observed(item:item):
    # Function to check if the item (milk or cereal) has been observed
    symbol observed=visited(item)
    return observed

behavior search_for_item(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_item_observed(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_item_observed(item:item):
    # Function to check if the item (milk or cereal) has been observed
    symbol observed=visited(item)
    return observed

behavior search_for_item(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_item_observed(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_headset_2076_around_closetdrawer_388(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(headset,closetdrawer_instance)
        else:
            exp(headset,closetdrawer_instance)
    eff:
        unknown[headset]=False
        close[headset,closetdrawer_instance]=True
        close[closetdrawer_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation

def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_food_cereal(food_item) or is_milk(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either cereal or milk
                search_for_food(food_item)


#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_food_cereal(food_item) or is_milk(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either cereal or milk
                search_for_food(food_item)


##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_and_cereal():
    # Function to check if there is milk and cereal available
    symbol has_milk=exists o: item : (is_milk(o) and close_char(char, o))
    symbol has_cereal=exists o: item : (is_food_cereal(o) and close_char(char, o))
    return has_milk and has_cereal

behavior __goal__():
    body:
        if has_milk_and_cereal():
            # If both milk and cereal are already observed close by
            bind milk: item where:
                is_milk(milk) and close_char(char, milk)
            bind cereal: item where:
                is_food_cereal(cereal) and close_char(char, cereal)
        else:
            # If not both items are known and close, explore the area
            foreach item: item:
                if (is_milk(item) or is_food_cereal(item)) and not visited(item):
                    observe(item, "Check if it is the milk or cereal")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_headset_2076_around_closetdrawer_382(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(headset,closetdrawer_instance)
        else:
            exp(headset,closetdrawer_instance)
    eff:
        unknown[headset]=False
        close[headset,closetdrawer_instance]=True
        close[closetdrawer_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_item_near_fridge(item:item):
    # Function to check if the item is close to the fridge
    symbol is_near=exists fridge: item : (is_fridge(fridge) and close(item, fridge))
    return is_near

behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk) # Visit milk to find it
        achieve_once visited(cereal) # Visit cereal to find it

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and is_item_near_fridge(milk)
        # Select the milk near the fridge
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        find_milk_and_cereal(milk, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_item_near_fridge(item:item):
    # Function to check if the item is close to the fridge
    symbol is_near=exists fridge: item : (is_fridge(fridge) and close(item, fridge))
    return is_near

behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk) # Visit milk to find it
        achieve_once visited(cereal) # Visit cereal to find it

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and is_item_near_fridge(milk)
        # Select the milk near the fridge
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        find_milk_and_cereal(milk, cereal)

##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_found(milk:item):
    # Function to check if the milk has been found
    symbol found=visited(milk)
    return found

def is_cereal_found(cereal:item):
    # Function to check if the cereal has been found
    symbol found=visited(cereal)
    return found

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)
        # Visit the milk to find it

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)
        # Visit the cereal to find it

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not is_milk_found(milk):
                search_for_milk(milk)
                # Search for milk if it hasnt been found
        
        foreach cereal: item:
            if is_food_cereal(cereal) and not is_cereal_found(cereal):
                search_for_cereal(cereal)
                # Search for cereal if it hasnt been found

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_milk_found(milk:item):
    # Function to check if the milk has been found
    symbol found=visited(milk)
    return found

def is_cereal_found(cereal:item):
    # Function to check if the cereal has been found
    symbol found=visited(cereal)
    return found

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)
        # Visit the milk to find it

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)
        # Visit the cereal to find it

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not is_milk_found(milk):
                search_for_milk(milk)
                # Search for milk if it hasnt been found
        
        foreach cereal: item:
            if is_food_cereal(cereal) and not is_cereal_found(cereal):
                search_for_cereal(cereal)
                # Search for cereal if it hasnt been found

##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior search_for_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and inside_char(char, fridge)
        # Select the fridge where items should be searched

        bind milk: item where:
            is_milk(milk) and inside(milk, fridge)
        # Select milk inside the fridge
        
        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_milk_and_cereal(milk, cereal)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_pillow_183_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_and_cereal():
    # Function to check if there are milk and cereal available
    symbol has_milk = exists milk: item : (is_milk(milk) and visited(milk))
    symbol has_cereal = exists cereal: item : (is_food_cereal(cereal) and visited(cereal))
    return has_milk and has_cereal

behavior search_for_milk_and_cereal(item:item):
    body:
        achieve_once visited(item)

behavior __goal__():
    body:
        if not has_milk_and_cereal():
            # If either milk or cereal is not found
            foreach item: item:
                if (is_milk(item) or is_food_cereal(item)) and not visited(item):
                    search_for_milk_and_cereal(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_milk_and_cereal():
    # Function to check if there are milk and cereal available
    symbol has_milk = exists milk: item : (is_milk(milk) and visited(milk))
    symbol has_cereal = exists cereal: item : (is_food_cereal(cereal) and visited(cereal))
    return has_milk and has_cereal

behavior search_for_milk_and_cereal(item:item):
    body:
        achieve_once visited(item)

behavior __goal__():
    body:
        if not has_milk_and_cereal():
            # If either milk or cereal is not found
            foreach item: item:
                if (is_milk(item) or is_food_cereal(item)) and not visited(item):
                    search_for_milk_and_cereal(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_and_cereal(fridge:item):
    # Function to check if both milk and cereal are located in or around the specified fridge
    symbol has_milk_and_cereal = exists milk: item : (is_milk(milk) and close(milk, fridge)) and exists cereal: item : (is_food_cereal(cereal) and close(cereal, fridge))
    return has_milk_and_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289 
        # Select the fridge with ID 289

        if has_milk_and_cereal(fridge):
            achieve close_char(char, fridge)
        else:
            observe(fridge, "Look for milk and cereal around this fridge")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cereal') at line 5805, column 105.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

#goal_representation
 
def has_milk_and_cereal(fridge: item):
    # Function to check if both milk and cereal are located in or around the specified fridge
    symbol has_milk_and_cereal = exists milk: item : (is_milk(milk) and close(milk, fridge)) and exists c: item : (is_food_cereal(c) and close(c, fridge))
    return has_milk_and_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289 
        # Select the fridge with ID 289

        if has_milk_and_cereal(fridge):
            achieve close_char(char, fridge)
        else:
            observe(fridge, "Look for milk and cereal around this fridge")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'c') at line 5823, column 105.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_oil_2079_around_oven_295(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#goal_representation
 
def has_milk_and_cereal(fridge: item):
    # Function to check if both milk and cereal are located in or around the specified fridge
    symbol has_milk_and_cereal = exists milk: item : (is_milk(milk) and close(milk, fridge)) and exists cereal: item : (is_food_cereal(cereal) and close(cereal, fridge))
    return has_milk_and_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289 
        # Select the fridge with ID 289

        if has_milk_and_cereal(fridge):
            achieve close_char(char, fridge)
        else:
            observe(fridge, "Look for milk and cereal around this fridge")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_kitchen_counter_230(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def item_found(item:item):
    # Function to check if the item (milk or cereal) has been observed
    symbol found=visited(item)
    return found

behavior search_for_item(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not item_found(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def item_found(item:item):
    # Function to check if the item (milk or cereal) has been observed
    symbol found=visited(item)
    return found

behavior search_for_item(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not item_found(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_recipe_key_items(item:item):
    # Function to check if an item is either milk or cereal
    symbol is_key_item = is_milk(item) or is_food_cereal(item)
    return is_key_item

behavior search_for_item(item:item):
    # Behavior to search for the specified item
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    # Main behavior to achieve the goal of finding milk and cereal
    body:
        foreach item: item:
            if is_recipe_key_items(item) and not visited(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_recipe_key_items(item:item):
    # Function to check if an item is either milk or cereal
    symbol is_key_item = is_milk(item) or is_food_cereal(item)
    return is_key_item

behavior search_for_item(item:item):
    # Behavior to search for the specified item
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    # Main behavior to achieve the goal of finding milk and cereal
    body:
        foreach item: item:
            if is_recipe_key_items(item) and not visited(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_pants_2085_around_washing_machine_2007(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_pants,washing_machine_instance)
        else:
            exp(clothes_pants,washing_machine_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,washing_machine_instance]=True
        close[washing_machine_instance,clothes_pants]=True
    

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_observed(item:item):
    # Function to check if an item has been observed
    symbol observed=visited(item)
    return observed

behavior search_for_item(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_observed(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_observed(item:item):
    # Function to check if an item has been observed
    symbol observed=visited(item)
    return observed

behavior search_for_item(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_observed(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (cereal or milk) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_food_cereal(food_item) or is_milk(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either cereal or milk
                search_for_food(food_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (cereal or milk) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_food_cereal(food_item) or is_milk(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either cereal or milk
                search_for_food(food_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior search_for_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk_and_cereal(milk, milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_milk_and_cereal(cereal, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior search_for_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk_and_cereal(milk, milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_milk_and_cereal(cereal, cereal)

##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def find_milk_and_cereal():
    # Function to check if both milk and cereal have been found
    symbol found_items = exists milk: item : (is_milk(milk) and visited(milk)) and exists cereal: item : (is_food_cereal(cereal) and visited(cereal))
    return found_items

behavior search_for_items(item_name:string):
    body:
        foreach obj: item:
            if (is_milk(obj) and item_name == milk or is_food_cereal(obj) and item_name == cereal) and not visited(obj):
                achieve_once visited(obj)

behavior __goal__():
    body:
        if not find_milk_and_cereal():
            search_for_items(milk)
            search_for_items(cereal)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cereal') at line 5788, column 91.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_plate_1000_around_kitchen_counter_230(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#goal_representation
 
def find_milk_and_cereal():
    # Function to check if both milk and cereal have been found
    symbol found_items = exists milk: item : (is_milk(milk) and visited(milk)) and exists cereal: item : (is_food_cereal(cereal) and visited(cereal))
    return found_items

behavior search_for_items(item_name:string):
    body:
        foreach obj: item:
            if (is_milk(obj) and item_name == milk or is_food_cereal(obj) and item_name == cereal) and not visited(obj):
                achieve_once visited(obj)

behavior __goal__():
    body:
        if not find_milk_and_cereal():
            search_for_items(milk)
            search_for_items(cereal)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cereal') at line 5824, column 91.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_item(item:item):
    body:
        achieve_once visited(item)

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not visited(item):
                find_item(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_item(item:item):
    body:
        achieve_once visited(item)

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not visited(item):
                find_item(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                find_milk_and_cereal(milk, None)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                find_milk_and_cereal(None, cereal)

#goal_representation_end

##############################
Error is:

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

behavior find_pillow_406_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior find_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                find_milk(milk)
        
        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                find_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior find_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                find_milk(milk)
        
        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                find_cereal(cereal)

##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

#exp_behavior_end

#goal_representation

def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food_item(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food_item(food_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food_item(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food_item(food_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_observed(item: item):
    # Function to check if the milk item has been observed
    symbol observed = visited(item)
    return observed

def is_cereal_observed(item: item):
    # Function to check if the cereal item has been observed
    symbol observed = visited(item)
    return observed

behavior search_for_milk(milk: item):
    body:
        achieve_once visited(milk)
        # Visit the milk item to find it

behavior search_for_cereal(cereal: item):
    body:
        achieve_once visited(cereal)
        # Visit the cereal item to find it

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not is_milk_observed(milk):
                search_for_milk(milk)
        
        foreach cereal: item:
            if is_food_cereal(cereal) and not is_cereal_observed(cereal):
                search_for_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_milk_observed(item: item):
    # Function to check if the milk item has been observed
    symbol observed = visited(item)
    return observed

def is_cereal_observed(item: item):
    # Function to check if the cereal item has been observed
    symbol observed = visited(item)
    return observed

behavior search_for_milk(milk: item):
    body:
        achieve_once visited(milk)
        # Visit the milk item to find it

behavior search_for_cereal(cereal: item):
    body:
        achieve_once visited(cereal)
        # Visit the cereal item to find it

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not is_milk_observed(milk):
                search_for_milk(milk)
        
        foreach cereal: item:
            if is_food_cereal(cereal) and not is_cereal_observed(cereal):
                search_for_cereal(cereal)

##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk(milk:item):
    # Function to check if this is milk
    symbol is_actual_milk = is_milk(milk)
    return is_actual_milk

def has_cereal(cereal:item):
    # Function to check if this is cereal
    symbol is_actual_cereal = is_food_cereal(cereal)
    return is_actual_cereal

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

        if exists milk: item : (is_milk(milk) and has_milk(milk)):
            bind milk: item where:
                is_milk(milk) and has_milk(milk)
            # Select actual milk
        
        if exists cereal: item : (is_food_cereal(cereal) and has_cereal(cereal)):
            bind cereal: item where:
                is_food_cereal(cereal) and has_cereal(cereal)
            # Select actual cereal


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_milk(milk:item):
    # Function to check if this is milk
    symbol is_actual_milk = is_milk(milk)
    return is_actual_milk

def has_cereal(cereal:item):
    # Function to check if this is cereal
    symbol is_actual_cereal = is_food_cereal(cereal)
    return is_actual_cereal

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

        if exists milk: item : (is_milk(milk) and has_milk(milk)):
            bind milk: item where:
                is_milk(milk) and has_milk(milk)
            # Select actual milk
        
        if exists cereal: item : (is_food_cereal(cereal) and has_cereal(cereal)):
            bind cereal: item where:
                is_food_cereal(cereal) and has_cereal(cereal)
            # Select actual cereal


##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
def is_target_item_observed(target_item:item):
    # Function to check if the target item (milk or cereal) has been observed
    symbol observed=visited(target_item)
    return observed

behavior search_for_target_item(target_item:item):
    body:
        achieve_once visited(target_item)
        # Visit the target item to find it

behavior __goal__():
    body:
        foreach target_item: item:
            if (is_milk(target_item) or is_food_cereal(target_item)) and not is_target_item_observed(target_item):
                # Check all unvisited items that are either milk or cereal
                search_for_target_item(target_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_target_item_observed(target_item:item):
    # Function to check if the target item (milk or cereal) has been observed
    symbol observed=visited(target_item)
    return observed

behavior search_for_target_item(target_item:item):
    body:
        achieve_once visited(target_item)
        # Visit the target item to find it

behavior __goal__():
    body:
        foreach target_item: item:
            if (is_milk(target_item) or is_food_cereal(target_item)) and not is_target_item_observed(target_item):
                # Check all unvisited items that are either milk or cereal
                search_for_target_item(target_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_milk_and_cereal_around(fridge:item):
    # Function to check if milk and cereal items are in the vicinity of the specified fridge
    symbol has_items=exists o: item : ((is_food_cereal(o) or is_milk(o)) and close(o, fridge))
    return has_items

behavior search_around_fridge(fridge:item):
    body:
        observe(fridge, "Look for milk and cereal items around this fridge")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        # Select the fridge with the specific ID 289

        if has_milk_and_cereal_around(fridge):
            # If milk and cereal are known to be around the fridge
            achieve close_char(char, fridge)
            # Move the character closer to the fridge to possibly take action on milk and cereal

        else:
            # If milk and cereal are not confirmed around the fridge, inspect the area more closely
            search_around_fridge(fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_observed(milk:item):
    # Function to check if the milk has been observed
    symbol observed=visited(milk)
    return observed

def is_cereal_observed(cereal:item):
    # Function to check if the cereal has been observed
    symbol observed=visited(cereal)
    return observed

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)
        # Visit the milk to find it

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)
        # Visit the cereal to find it

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not is_milk_observed(milk):
                search_for_milk(milk)
                
        foreach cereal: item:
            if is_food_cereal(cereal) and not is_cereal_observed(cereal):
                search_for_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_milk_observed(milk:item):
    # Function to check if the milk has been observed
    symbol observed=visited(milk)
    return observed

def is_cereal_observed(cereal:item):
    # Function to check if the cereal has been observed
    symbol observed=visited(cereal)
    return observed

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)
        # Visit the milk to find it

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)
        # Visit the cereal to find it

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not is_milk_observed(milk):
                search_for_milk(milk)
                
        foreach cereal: item:
            if is_food_cereal(cereal) and not is_cereal_observed(cereal):
                search_for_cereal(cereal)

##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

behavior find_hanger_111_around_closetdrawer_377(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed = visited(food_item)
    return observed

behavior search_for_milk_and_cereal(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_food_cereal(food_item) or is_milk(food_item)) and not is_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_milk_and_cereal(food_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed = visited(food_item)
    return observed

behavior search_for_milk_and_cereal(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_food_cereal(food_item) or is_milk(food_item)) and not is_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_milk_and_cereal(food_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior search_for_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk_and_cereal(milk, None)
                
        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_milk_and_cereal(None, cereal)

#goal_representation_end

##############################
Error is:

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

behavior find_towel_2059_around_washing_machine_2007(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(towel,washing_machine_instance)
        else:
            exp(towel,washing_machine_instance)
    eff:
        unknown[towel]=False
        close[towel,washing_machine_instance]=True
        close[washing_machine_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_observed(milk:item):
    # Function to check if the milk has been observed
    symbol observed=visited(milk)
    return observed

def is_cereal_observed(cereal:item):
    # Function to check if the cereal has been observed
    symbol observed=visited(cereal)
    return observed

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)
        # Visit the milk to find it

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)
        # Visit the cereal to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) and not is_milk_observed(item)):
                # Check all unvisited items that are milk
                search_for_milk(item)
            elif (is_food_cereal(item) and not is_cereal_observed(item)):
                # Check all unvisited items that are cereal
                search_for_cereal(item)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5829, column 73.
Expected one of: 
	* SEMICOLON
	* COMMA
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

#goal_representation
 
def is_milk_observed(milk:item):
    # Function to check if the milk has been observed
    symbol observed=visited(milk)
    return observed

def is_cereal_observed(cereal:item):
    # Function to check if the cereal has been observed
    symbol observed=visited(cereal)
    return observed

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)
        # Visit the milk to find it

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)
        # Visit the cereal to find it

behavior __goal__():
    body:
        foreach item: item:
            if is_milk(item) and not is_milk_observed(item):
                # Check all unvisited items that are milk
                search_for_milk(item)
            elif is_food_cereal(item) and not is_cereal_observed(item):
                # Check all unvisited items that are cereal
                search_for_cereal(item)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'is_food_cereal') at line 5847, column 18.
Expected one of: 
	* SEMICOLON
	* NOT_EQ
	* MORETHAN
	* __ANON_7
	* GREATER_EQ
	* LSHIFT
	* AND
	* RSHIFT
	* PLUS
	* LESS_EQ
	* __ANON_5
	* FLOORDIV
	* __ANON_1
	* CIRCUMFLEX
	* AMPERSAND
	* AT
	* SLASH
	* __ANON_2
	* LESSTHAN
	* __ANON_8
	* OR
	* VBAR
	* IF
	* PERCENT
	* __ANON_3
	* __ANON_4
	* __ANON_6
	* _NEWLINE
	* STAR
	* MINUS
	* __ANON_0
	* EQUAL
	* DOUBLE_EQUAL
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_milk_observed(milk:item):
    # Function to check if the milk has been observed
    symbol observed = visited(milk)
    return observed

def is_cereal_observed(cereal:item):
    # Function to check if the cereal has been observed
    symbol observed = visited(cereal)
    return observed

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)
        # Visit the milk to find it

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)
        # Visit the cereal to find it

behavior __goal__():
    body:
        foreach item: item:
            if is_milk(item) and not is_milk_observed(item):
                # Check all unvisited items that are milk
                search_for_milk(item)
            elif is_food_cereal(item) and not is_cereal_observed(item):
                # Check all unvisited items that are cereal
                search_for_cereal(item)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior search_for_milk_and_cereal(item:item):
    body:
        achieve_once visited(item)

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not visited(item):
                search_for_milk_and_cereal(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior search_for_milk_and_cereal(item:item):
    body:
        achieve_once visited(item)

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not visited(item):
                search_for_milk_and_cereal(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_doorjamb_165(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==165
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(bowl,doorjamb_instance)
        else:
            exp(bowl,doorjamb_instance)
    eff:
        unknown[bowl]=False
        close[bowl,doorjamb_instance]=True
        close[doorjamb_instance,bowl]=True
    

behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

behavior find_headset_2062_around_closetdrawer_377(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(headset,closetdrawer_instance)
        else:
            exp(headset,closetdrawer_instance)
    eff:
        unknown[headset]=False
        close[headset,closetdrawer_instance]=True
        close[closetdrawer_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)
        
        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)
        
        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_and_cereal_nearby(milk:item, cereal:item):
    # Function to check if milk and cereal are located near to each other
    symbol close_items= close(milk, cereal)
    return close_items

behavior search_for_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        # Mark milk as visited after finding it
        achieve_once visited(cereal)
        # Mark cereal as visited after finding it

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cereal: item where:
            is_food_cereal(cereal)

        if has_milk_and_cereal_nearby(milk, cereal):
            achieve close_char(char, milk)
            achieve close_char(char, cereal)
        else:
            foreach milk: item:
                if is_milk(milk) and not visited(milk):
                    observe(milk, "Check for proximity to cereal")
                    
            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    observe(cereal, "Check for proximity to milk")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_milk_and_cereal_nearby(milk:item, cereal:item):
    # Function to check if milk and cereal are located near to each other
    symbol close_items= close(milk, cereal)
    return close_items

behavior search_for_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        # Mark milk as visited after finding it
        achieve_once visited(cereal)
        # Mark cereal as visited after finding it

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cereal: item where:
            is_food_cereal(cereal)

        if has_milk_and_cereal_nearby(milk, cereal):
            achieve close_char(char, milk)
            achieve close_char(char, cereal)
        else:
            foreach milk: item:
                if is_milk(milk) and not visited(milk):
                    observe(milk, "Check for proximity to cereal")
                    
            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    observe(cereal, "Check for proximity to milk")

##############################
From agent.py-> find a plan in act()
obs(milk_2043, Check for proximity to cereal)open_executor(food_cereal_2015)obs(food_cereal_2015, Check for proximity to milk)
##############################
From agent.py
obs(milk_2043, Check for proximity to cereal)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_or_cereal_observed(item:item):
    # Function to check if milk or cereal has been observed
    symbol observed = visited(item)
    return observed

behavior search_for_milk_or_cereal(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find milk or cereal

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_milk_or_cereal_observed(item):
                # Check all unvisited items that are milk or cereal
                search_for_milk_or_cereal(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_milk_or_cereal_observed(item:item):
    # Function to check if milk or cereal has been observed
    symbol observed = visited(item)
    return observed

behavior search_for_milk_or_cereal(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find milk or cereal

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_milk_or_cereal_observed(item):
                # Check all unvisited items that are milk or cereal
                search_for_milk_or_cereal(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_pants_2085_around_washing_machine_2007(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_pants,washing_machine_instance)
        else:
            exp(clothes_pants,washing_machine_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,washing_machine_instance]=True
        close[washing_machine_instance,clothes_pants]=True
    

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_cup_2064_around_coffee_table_2068(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cup,coffee_table_instance)
        else:
            exp(cup,coffee_table_instance)
    eff:
        unknown[cup]=False
        close[cup,coffee_table_instance]=True
        close[coffee_table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_or_cereal(x: item):
    # Function to check if the item is milk or cereal
    symbol milk_or_cereal = is_milk(x) or is_food_cereal(x)
    return milk_or_cereal

behavior find_milk_and_cereal(x: item):
    body:
        achieve_once visited(x)

behavior __goal__():
    body:
        foreach x: item:
            if is_milk_or_cereal(x) and not visited(x):
                find_milk_and_cereal(x)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_milk_or_cereal(x: item):
    # Function to check if the item is milk or cereal
    symbol milk_or_cereal = is_milk(x) or is_food_cereal(x)
    return milk_or_cereal

behavior find_milk_and_cereal(x: item):
    body:
        achieve_once visited(x)

behavior __goal__():
    body:
        foreach x: item:
            if is_milk_or_cereal(x) and not visited(x):
                find_milk_and_cereal(x)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior search_for_item(item:item):
    body:
        achieve_once visited(item)

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not visited(item):
                search_for_item(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior search_for_item(item:item):
    body:
        achieve_once visited(item)

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not visited(item):
                search_for_item(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_milk_close_to_cereal(milk:item, cereal:item):
    # Function to check if milk is close to cereal
    symbol milk_cereal_close=exists cereal: item : (is_food_cereal(cereal) and close(milk, cereal))
    return milk_cereal_close

behavior __goal__():
    body:
        if exists milk: item : (is_milk(milk) and has_milk_close_to_cereal(milk, cereal)):
            # If milk is found close to cereal based on available information, bind them
            bind milk: item where:
                is_milk(milk) and has_milk_close_to_cereal(milk, cereal)
            # Select milk and cereal that are close

            bind cereal: item where:
                is_food_cereal(cereal) and close(milk, cereal)
            # Move the character closer to milk and cereal

        else:
            # If milk is not close to cereal, search for both separately
            foreach milk: item:
                if is_milk(milk) and not visited(milk):
                    observe(milk, "Check proximity to cereal")
                    # Observe to check if there is cereal nearby

            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    observe(cereal, "Check proximity to milk")
                    # Observe to check if there is milk nearby

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Variable cereal already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_milk_close_to_cereal(milk:item, cereal:item):
    # Function to check if milk is close to cereal
    symbol milk_cereal_close=exists cereal: item : (is_food_cereal(cereal) and close(milk, cereal))
    return milk_cereal_close

behavior __goal__():
    body:
        if exists milk: item : (is_milk(milk) and exists cereal: item : (is_food_cereal(cereal) and close(milk, cereal))):
            # If milk is found close to cereal based on available information, bind them
            bind milk: item where:
                is_milk(milk) and exists cereal: item : (is_food_cereal(cereal) and close(milk, cereal))
            # Select milk and cereal that are close

            bind cereal: item where:
                is_food_cereal(cereal) and close(milk, cereal)
            # Move the character closer to milk and cereal

        else:
            # If milk is not close to cereal, search for both separately
            foreach milk: item:
                if is_milk(milk) and not visited(milk):
                    observe(milk, "Check proximity to cereal")
                    # Observe to check if there is cereal nearby

            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    observe(cereal, "Check proximity to milk")
                    # Observe to check if there is milk nearby

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cereal') at line 5792, column 58.
Expected one of: 
	* COMMA
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_item_observed(food_item:item):
    # Function to check if the food item (milk or cereal) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_food(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either milk or cereal
                search_for_food(food_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

def milk_near_cereal(milk:item, cereal:item):
    # Function to determine if milk is near cereal
    symbol near=close(milk, cereal)
    return near

behavior search_for_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        # Visit the milk to find it
        achieve_once visited(cereal)
        # Visit the cereal to find it

behavior __goal__():
    body:
        if exists milk: item : (is_milk(milk)) and exists cereal: item : (is_food_cereal(cereal)) and milk_near_cereal(milk, cereal):
            # If milk and cereal are known to be near each other, proceed to investigate
            bind milk: item where:
                is_milk(milk)
            bind cereal: item where:
                is_food_cereal(cereal)
            achieve close_char(char, milk)
            # Approach the milk
            achieve close_char(char, cereal)
            # Approach the cereal
        else:
            # If the milk and cereal havent been found together, search for them
            foreach milk: item:
                if is_milk(milk) and not visited(milk):
                    search_for_milk_and_cereal(milk, cereal)
            foreach cereal: item:
                if is_food_cereal(cereal) and not visited(cereal):
                    search_for_milk_and_cereal(milk, cereal)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cereal') at line 5817, column 59.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_food_item_observed(item:item):
    # Check if the food item (milk or cereal) has been observed
    return visited(item)

behavior search_for_milk_or_cereal(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_food_item_observed(item):
                search_for_milk_or_cereal(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_item_observed(item:item):
    # Check if the food item (milk or cereal) has been observed
    return visited(item)

behavior search_for_milk_or_cereal(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_food_item_observed(item):
                search_for_milk_or_cereal(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def observed_food_item(food_item:item):
    # Function to check if the food item has been visited
    symbol observed=visited(food_item)
    return observed

behavior search_for_food_item(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        # Check all unvisited food items that are either milk or cereal
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not observed_food_item(food_item):
                search_for_food_item(food_item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def observed_food_item(food_item:item):
    # Function to check if the food item has been visited
    symbol observed=visited(food_item)
    return observed

behavior search_for_food_item(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior __goal__():
    body:
        # Check all unvisited food items that are either milk or cereal
        foreach food_item: item:
            if (is_milk(food_item) or is_food_cereal(food_item)) and not observed_food_item(food_item):
                search_for_food_item(food_item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

behavior find_headset_2062_around_closetdrawer_377(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(headset,closetdrawer_instance)
        else:
            exp(headset,closetdrawer_instance)
    eff:
        unknown[headset]=False
        close[headset,closetdrawer_instance]=True
        close[closetdrawer_instance,headset]=True
    

behavior find_tray_296_around_microwave_297(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(tray,microwave_instance)
        else:
            exp(tray,microwave_instance)
    eff:
        unknown[tray]=False
        close[tray,microwave_instance]=True
        close[microwave_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_item_observed(item:item):
    symbol observed=visited(item)
    return observed

behavior search_for_milk_and_cereal(item:item):
    body:
        achieve_once visited(item)

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_food_item_observed(item):
                search_for_milk_and_cereal(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_item_observed(item:item):
    symbol observed=visited(item)
    return observed

behavior search_for_milk_and_cereal(item:item):
    body:
        achieve_once visited(item)

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_food_item_observed(item):
                search_for_milk_and_cereal(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk) # Ensure milk is visited
        achieve_once visited(cereal) # Ensure cereal is visited

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and not visited(milk)
        # Select unvisited milk

        bind cereal: item where:
            is_food_cereal(cereal) and not visited(cereal)
        # Select unvisited cereal

        find_milk_and_cereal(milk, cereal)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_cereal_observed(cereal:item):
    # Function to check if the cereal has been observed
    symbol observed = visited(cereal)
    return observed

def is_milk_observed(milk:item):
    # Function to check if the milk has been observed
    symbol observed = visited(milk)
    return observed

behavior search_for_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not is_milk_observed(milk):
                foreach cereal: item:
                    if is_food_cereal(cereal) and not is_cereal_observed(cereal):
                        search_for_milk_and_cereal(milk, cereal)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_milk_and_cereal():
    # Function to check if there is milk close to a cereal in the known information
    symbol milk_cereal_pair_exists = exists milk: item : (is_milk(milk) and close(milk, cereal) for cereal in (exists cereal: item : is_food_cereal(cereal)))
    return milk_cereal_pair_exists

behavior __goal__():
    body:
        if has_milk_and_cereal():
            # When milk and cereal are found close to each other, approach the milk (where cereal is close)
            bind milk: item where:
                is_milk(milk) and exists cereal: item : (is_food_cereal(cereal) and close(milk, cereal))
            # Approach the milk found near cereal
            achieve close_char(char, milk) 

        else: 
           # Explore the environment to look for milk and cereal
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o)) and not visited(o):
                    observe(o, "Look for milk and check proximity to cereal") 

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'for') at line 5788, column 97.
Expected one of: 
	* COMMA
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_milk_and_cereal():
    # Function to check if there is milk close to a cereal in the known information
    symbol milk_cereal_pair_exists = exists cereal: item : (is_food_cereal(cereal) and exists milk: item : (is_milk(milk) and close(milk, cereal)))
    return milk_cereal_pair_exists

behavior __goal__():
    body:
        if has_milk_and_cereal():
            # When milk and cereal are found close to each other, approach the milk (where cereal is close)
            bind milk: item where:
                is_milk(milk) and exists cereal: item : (is_food_cereal(cereal) and close(milk, cereal))
            # Approach the milk found near cereal
            achieve close_char(char, milk)

        else: 
           # Explore the environment to look for milk and cereal
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o)) and not visited(o):
                    observe(o, "Look for milk and check proximity to cereal")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'milk') at line 5788, column 95.
Expected one of: 
	* COMMA
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_milk_and_cereal():
    # Function to check if there is milk close to a cereal in the known information
    symbol milk_cereal_pair_exists = exists cereal: item : (is_food_cereal(cereal) and exists milk: item : (is_milk(milk) and close(milk, cereal)))
    return milk_cereal_pair_exists

behavior __goal__():
    body:
        if has_milk_and_cereal():
            # When milk and cereal are found close to each other, approach the milk (where cereal is close)
            bind milk: item where:
                is_milk(milk) and exists cereal: item : (is_food_cereal(cereal) and close(milk, cereal))
            # Approach the milk found near cereal
            achieve close_char(char, milk)

        else: 
            # Explore the environment to look for milk and cereal
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o)) and not visited(o):
                    observe(o, "Look for milk and check proximity to cereal")

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the milk and cereal." ?
Answer: Locate the milk in the refrigerator and the cereal in the pantry.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_item(item:item, location_placeholder:string):
    body:
        observe(item, "location_placeholder")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and open(fridge) and is_off(fridge)
        foreach item: item:
            if is_milk(item) and inside(item, fridge):
                find_item(item, Locate the milk inside the fridge)

        bind pantry: item where:
            is_cupboard(pantry)
        foreach item: item:
            if is_food_cereal(item):
                find_item(item, Locate the cereal inside the pantry)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'the') at line 5814, column 40.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#goal_representation
 
behavior find_item(item:item, location_placeholder:string):
    body:
        observe(item, "location_placeholder")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and open(fridge) and is_off(fridge)
        foreach item: item:
            if is_milk(item) and inside(item, fridge):
                find_item(item, Locate the milk inside the fridge)

        bind pantry: item where:
            is_cupboard(pantry)
        foreach item: item:
            if is_food_cereal(item) and inside(item, pantry):
                find_item(item, Locate the cereal inside the pantry)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'the') at line 5814, column 40.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_headset_2076_around_cpuscreen_416(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==416
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(headset,cpuscreen_instance)
        else:
            exp(headset,cpuscreen_instance)
    eff:
        unknown[headset]=False
        close[headset,cpuscreen_instance]=True
        close[cpuscreen_instance,headset]=True
    

#goal_representation
 
behavior find_item(item:item, location_placeholder:string):
    body:
        observe(item, "location_placeholder")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and open(fridge) and is_off(fridge)
        foreach item: item:
            if is_milk(item) and inside(item, fridge):
                find_item(item, Locate the milk inside the fridge)

        bind pantry: item where:
            is_cupboard(pantry)
        foreach item: item:
            if is_food_cereal(item) and inside(item, pantry):
                find_item(item, Locate the cereal inside the pantry)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior locate_milk(milk:item, fridge:item):
    body:
        achieve_once visited(milk)
        # Visit the milk to locate it

behavior locate_cereal(cereal:item, pantry:item):
    body:
        achieve_once visited(cereal)
        # Visit the cereal to locate it

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge to locate the milk

        bind milk: item where:
            is_milk(milk)
        locate_milk(milk, fridge)

        bind pantry: item where:
            is_cupboard(pantry)
        # Select the pantry to locate the cereal

        bind cereal: item where:
            is_food_cereal(cereal)
        locate_cereal(cereal, pantry)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior locate_milk(milk:item, fridge:item):
    body:
        achieve_once visited(milk)
        # Visit the milk to locate it

behavior locate_cereal(cereal:item, pantry:item):
    body:
        achieve_once visited(cereal)
        # Visit the cereal to locate it

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge to locate the milk

        bind milk: item where:
            is_milk(milk)
        locate_milk(milk, fridge)

        bind pantry: item where:
            is_cupboard(pantry)
        # Select the pantry to locate the cereal

        bind cereal: item where:
            is_food_cereal(cereal)
        locate_cereal(cereal, pantry)

##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def find_milk_and_cereal():
    # Function to check if milk and cereal are found
    symbol milk_found = exists milk: item : (is_milk(milk) and visited(milk))
    symbol cereal_found = exists cereal: item : (is_food_cereal(cereal) and visited(cereal))
    return milk_found and cereal_found

behavior search_for_items():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                observe(milk, "Locate the milk in the refrigerator")

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                observe(cereal, "Locate the cereal in the pantry")

behavior __goal__():
    body:
        if not find_milk_and_cereal():
            search_for_items()

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_milk_and_cereal():
    # Function to check if milk and cereal are found
    symbol milk_found = exists milk: item : (is_milk(milk) and visited(milk))
    symbol cereal_found = exists cereal: item : (is_food_cereal(cereal) and visited(cereal))
    return milk_found and cereal_found

behavior search_for_items():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                observe(milk, "Locate the milk in the refrigerator")

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                observe(cereal, "Locate the cereal in the pantry")

behavior __goal__():
    body:
        if not find_milk_and_cereal():
            search_for_items()

##############################
From agent.py-> find a plan in act()
obs(milk_2043, Locate the milk in the refrigerator)open_executor(food_cereal_2015)obs(food_cereal_2015, Locate the cereal in the pantry)
##############################
From agent.py
obs(milk_2043, Locate the milk in the refrigerator)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

behavior find_headset_2076_around_computer_170(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

#exp_behavior_end

#goal_representation

def has_food_cereal(x:item):
    # Check if the item is food_cereal
    return is_food_cereal(x)

def has_milk(x:item):
    # Check if the item is milk
    return is_milk(x)

behavior search_for_item(item:item): 
    body:
        achieve_once visited(item)

behavior __goal__(): 
    body: 
        foreach cereal: item:
            if has_food_cereal(cereal) and not visited(cereal):
                search_for_item(cereal)

        foreach milk: item:
            if has_milk(milk) and not visited(milk):
                search_for_item(milk)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def has_food_cereal(x:item):
    # Check if the item is food_cereal
    return is_food_cereal(x)

def has_milk(x:item):
    # Check if the item is milk
    return is_milk(x)

behavior search_for_item(item:item): 
    body:
        achieve_once visited(item)

behavior __goal__(): 
    body: 
        foreach cereal: item:
            if has_food_cereal(cereal) and not visited(cereal):
                search_for_item(cereal)

        foreach milk: item:
            if has_milk(milk) and not visited(milk):
                search_for_item(milk)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_inside_fridge(milk:item, fridge:item):
    # Function to check if the milk is inside the fridge
    symbol milk_in_fridge = inside(milk, fridge)
    return milk_in_fridge

def is_cereal_in_pantry(cereal:item, pantry:item):
    # Function to check if the cereal is inside the pantry
    symbol cereal_in_pantry = inside(cereal, pantry)
    return cereal_in_pantry

behavior search_for_milk(milk:item):
    body:
        observe(milk, "Locate the milk in the refrigerator")

behavior search_for_cereal(cereal:item):
    body:
        observe(cereal, "Locate the cereal in the pantry")

behavior find_milk(milk:item, fridge:item):
    body:
        if not is_milk_inside_fridge(milk, fridge) and not visited(milk):
            search_for_milk(milk)

behavior find_cereal(cereal:item, pantry:item):
    body:
        if not is_cereal_in_pantry(cereal, pantry) and not visited(cereal):
            search_for_cereal(cereal)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Retrieve an item that is a fridge

        bind pantry: item where:
            is_pantry(pantry)
        # Retrieve an item that is a pantry

        bind milk: item where:
            is_milk(milk)
        # Retrieve an item that is milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Retrieve an item that is cereal

        find_milk(milk, fridge)
        find_cereal(cereal, pantry)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_milk_or_cereal(fridge:item, pantry:item):
    # Function to check if there is milk in the fridge or cereal in the pantry
    symbol has_milk=exists o: item : (is_milk(o) and inside(o, fridge))
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, pantry))
    return has_milk or has_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)

        bind pantry: item where:
            is_cupboard(pantry)

        if has_milk_or_cereal(fridge, pantry):
            observe(fridge,"Check for milk inside the fridge")
            observe(pantry,"Check for cereal inside the pantry")

        else:
            # Check all unvisited cupboards for cereal and fridges for milk
            foreach o: item:
                if is_cupboard(o) and not visited(o):
                    observe(o,"Check is there any cereal inside")
                elif is_fridge(o) and not visited(o):
                    observe(o,"Check is there any milk inside")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'is_fridge') at line 5808, column 22.
Expected one of: 
	* SEMICOLON
	* NOT_EQ
	* MORETHAN
	* __ANON_7
	* GREATER_EQ
	* LSHIFT
	* AND
	* RSHIFT
	* PLUS
	* LESS_EQ
	* __ANON_5
	* FLOORDIV
	* __ANON_1
	* CIRCUMFLEX
	* AMPERSAND
	* AT
	* SLASH
	* __ANON_2
	* LESSTHAN
	* __ANON_8
	* OR
	* VBAR
	* IF
	* PERCENT
	* __ANON_3
	* __ANON_4
	* __ANON_6
	* _NEWLINE
	* STAR
	* MINUS
	* __ANON_0
	* EQUAL
	* DOUBLE_EQUAL
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

#goal_representation
 
def has_milk_or_cereal(fridge:item, pantry:item):
    # Function to check if there is milk in the fridge or cereal in the pantry
    symbol has_milk=exists o: item : (is_milk(o) and inside(o, fridge))
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, pantry))
    return has_milk or has_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)

        bind pantry: item where:
            is_cupboard(pantry)

        if has_milk_or_cereal(fridge, pantry):
            observe(fridge,"Check for milk inside the fridge")
            observe(pantry,"Check for cereal inside the pantry")

        else:
            # Check all unvisited cupboards for cereal and fridges for milk
            foreach o: item:
                if is_cupboard(o) and not visited(o):
                    observe(o,"Check is there any cereal inside")
                elif is_fridge(o) and not visited(o):
                    observe(o,"Check is there any milk inside")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'is_fridge') at line 5826, column 22.
Expected one of: 
	* SEMICOLON
	* NOT_EQ
	* MORETHAN
	* __ANON_7
	* GREATER_EQ
	* LSHIFT
	* AND
	* RSHIFT
	* PLUS
	* LESS_EQ
	* __ANON_5
	* FLOORDIV
	* __ANON_1
	* CIRCUMFLEX
	* AMPERSAND
	* AT
	* SLASH
	* __ANON_2
	* LESSTHAN
	* __ANON_8
	* OR
	* VBAR
	* IF
	* PERCENT
	* __ANON_3
	* __ANON_4
	* __ANON_6
	* _NEWLINE
	* STAR
	* MINUS
	* __ANON_0
	* EQUAL
	* DOUBLE_EQUAL
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
def has_milk_or_cereal(fridge:item, pantry:item):
    # Function to check if there is milk in the fridge or cereal in the pantry
    symbol has_milk=exists o: item : (is_milk(o) and inside(o, fridge))
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, pantry))
    return has_milk or has_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)

        bind pantry: item where:
            is_cupboard(pantry)

        if has_milk_or_cereal(fridge, pantry):
            observe(fridge,"Check for milk inside the fridge")
            observe(pantry,"Check for cereal inside the pantry")

        else:
            # Check all unvisited cupboards for cereal and fridges for milk
            foreach o: item:
                if is_cupboard(o) and not visited(o):
                    observe(o,"Check is there any cereal inside")
                elif is_fridge(o) and not visited(o):
                    observe(o,"Check is there any milk inside")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_pencil_2001_around_closetdrawer_377(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pencil,closetdrawer_instance)
        else:
            exp(pencil,closetdrawer_instance)
    eff:
        unknown[pencil]=False
        close[pencil,closetdrawer_instance]=True
        close[closetdrawer_instance,pencil]=True
    

behavior find_cd_2075_around_closetdrawer_377(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cd,closetdrawer_instance)
        else:
            exp(cd,closetdrawer_instance)
    eff:
        unknown[cd]=False
        close[cd,closetdrawer_instance]=True
        close[closetdrawer_instance,cd]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior locate_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                locate_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                locate_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior locate_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior locate_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                locate_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                locate_cereal(cereal)

##############################
From agent.py-> find a plan in act()
obs(milk_2043, look around this place)open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)
##############################
From agent.py
obs(milk_2043, look around this place)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_headset_2076_around_computer_170(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
def is_item_found(item:item):
    # Function to check if the item (milk or cereal) has been found
    symbol found=visited(item)
    return found

behavior search_for_item(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_item_found(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_item_found(item:item):
    # Function to check if the item (milk or cereal) has been found
    symbol found=visited(item)
    return found

behavior search_for_item(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_item_found(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_found(fridge:item):
    # Function to check if milk is found in the fridge
    symbol milk_found = exists milk: item : (is_milk(milk) and inside(milk, fridge))
    return milk_found

def is_cereal_found(pantry:item):
    # Function to check if cereal is found in the pantry
    symbol cereal_found = exists cereal: item : (is_food_cereal(cereal) and inside(cereal, pantry))
    return cereal_found

behavior __goal__():
    body:
        if exists fridge: item : (is_fridge(fridge) and is_milk_found(fridge)):
            # If milk is found in the fridge, approach the fridge
            bind fridge: item where:
                is_fridge(fridge) and is_milk_found(fridge)
            achieve close_char(char, fridge)
        
        else:
            # If no milk is found, search for milk in all unvisited fridges
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Looking for milk inside the fridge")

        if exists pantry: item : (is_pantry(pantry) and is_cereal_found(pantry)):
            # If cereal is found in the pantry, approach the pantry
            bind pantry: item where:
                is_pantry(pantry) and is_cereal_found(pantry)
            achieve close_char(char, pantry)
        
        else:
            # If no cereal is found, search for cereal in all unvisited pantries
            foreach pantry: item:
                if is_pantry(pantry) and not visited(pantry):
                    observe(pantry, "Looking for cereal in the pantry")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def milk_found():
    # Determine if milk has been found and its location
    symbol found_milk = exists milk: item : (is_milk(milk) and visited(milk))
    return found_milk

def cereal_found():
    # Determine if cereal has been found and its location
    symbol found_cereal = exists cereal: item : (is_food_cereal(cereal) and visited(cereal))
    return found_cereal

behavior find_milk():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                observe(milk, "Check for milk in the refrigerator")

behavior find_cereal():
    body:
        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                observe(cereal, "Check for cereal in the pantry")

behavior __goal__():
    body:
        if not milk_found():
            # If milk is not found, search for it
            find_milk()
        
        if not cereal_found():
            # If cereal is not found, search for it
            find_cereal()


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def milk_found():
    # Determine if milk has been found and its location
    symbol found_milk = exists milk: item : (is_milk(milk) and visited(milk))
    return found_milk

def cereal_found():
    # Determine if cereal has been found and its location
    symbol found_cereal = exists cereal: item : (is_food_cereal(cereal) and visited(cereal))
    return found_cereal

behavior find_milk():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                observe(milk, "Check for milk in the refrigerator")

behavior find_cereal():
    body:
        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                observe(cereal, "Check for cereal in the pantry")

behavior __goal__():
    body:
        if not milk_found():
            # If milk is not found, search for it
            find_milk()
        
        if not cereal_found():
            # If cereal is not found, search for it
            find_cereal()


##############################
From agent.py-> find a plan in act()
obs(milk_2043, Check for milk in the refrigerator)open_executor(food_cereal_2015)obs(food_cereal_2015, Check for cereal in the pantry)
##############################
From agent.py
obs(milk_2043, Check for milk in the refrigerator)
Get this information:  milk_2043 is inside fridge_289. milk_2043 is inside dining_room_201. milk_2043 is close to fridge_289. milk_2043 is close to character_65.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_item_found(item:item):
    # Function to determine if the item (milk or cereal) has been located
    symbol found=visited(item)
    return found

behavior search_for_item(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_item_found(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_item_found(item:item):
    # Function to determine if the item (milk or cereal) has been located
    symbol found=visited(item)
    return found

behavior search_for_item(item:item):
    body:
        achieve_once visited(item)
        # Visit the item to find it

behavior __goal__():
    body:
        foreach item: item:
            if (is_milk(item) or is_food_cereal(item)) and not is_item_found(item):
                # Check all unvisited items that are either milk or cereal
                search_for_item(item)

##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2015)obs(food_cereal_2015, look around this place)obs(milk_2043, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_milk_or_cereal(fridge:item, pantry:item):
    # Function to check if there is milk in the fridge or cereal in the pantry
    symbol has_milk=exists o: item : (is_milk(o) and inside(o, fridge))
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, pantry))
    return has_milk or has_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and is_off(fridge) and open(fridge)
        # Select the fridge that has been turned off and opened

        bind pantry: item where:
            is_cupboard(pantry)
        # Since theres no explicit pantry category, use cupboard as a close alternative based on the functionality described

        if has_milk_or_cereal(fridge, pantry):
            # If milk is found in the fridge or cereal in the pantry, approach the respective location
            if exists o: item : (is_milk(o) and inside(o, fridge)):
                achieve close_char(char, fridge) # Approach the fridge if it contains milk
            elif exists o: item : (is_food_cereal(o) and inside(o, pantry)):
                achieve close_char(char, pantry) # Approach the pantry if it contains cereal
        else:
            # Explore by observing fridge and pantry to locate milk and cereal
            observe(fridge, "Check for milk inside the fridge")
            observe(pantry, "Check for cereal inside the pantry")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EXISTS', 'exists') at line 5805, column 18.
Expected one of: 
	* SEMICOLON
	* NOT_EQ
	* MORETHAN
	* __ANON_7
	* GREATER_EQ
	* LSHIFT
	* AND
	* RSHIFT
	* PLUS
	* LESS_EQ
	* __ANON_5
	* FLOORDIV
	* __ANON_1
	* CIRCUMFLEX
	* AMPERSAND
	* AT
	* SLASH
	* __ANON_2
	* LESSTHAN
	* __ANON_8
	* OR
	* VBAR
	* IF
	* PERCENT
	* __ANON_3
	* __ANON_4
	* __ANON_6
	* _NEWLINE
	* STAR
	* MINUS
	* __ANON_0
	* EQUAL
	* DOUBLE_EQUAL
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#goal_representation
 
def has_milk_or_cereal(fridge:item, pantry:item):
    # Function to check if there is milk in the fridge or cereal in the pantry
    symbol has_milk=exists o: item : (is_milk(o) and inside(o, fridge))
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, pantry))
    return has_milk or has_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and is_off(fridge) and open(fridge)
        # Select the fridge that has been turned off and opened

        bind pantry: item where:
            is_cupboard(pantry)
        # Since theres no explicit pantry category, use cupboard as a close alternative based on the functionality described

        if has_milk_or_cereal(fridge, pantry):
            # If milk is found in the fridge or cereal in the pantry, approach the respective location
            if exists o: item : (is_milk(o) and inside(o, fridge)):
                achieve close_char(char, fridge) # Approach the fridge if it contains milk
            elif exists o: item : (is_food_cereal(o) and inside(o, pantry)):
                achieve close_char(char, pantry) # Approach the pantry if it contains cereal
        else:
            # Explore by observing fridge and pantry to locate milk and cereal
            observe(fridge, "Check for milk inside the fridge")
            observe(pantry, "Check for cereal inside the pantry")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EXISTS', 'exists') at line 5823, column 18.
Expected one of: 
	* SEMICOLON
	* NOT_EQ
	* MORETHAN
	* __ANON_7
	* GREATER_EQ
	* LSHIFT
	* AND
	* RSHIFT
	* PLUS
	* LESS_EQ
	* __ANON_5
	* FLOORDIV
	* __ANON_1
	* CIRCUMFLEX
	* AMPERSAND
	* AT
	* SLASH
	* __ANON_2
	* LESSTHAN
	* __ANON_8
	* OR
	* VBAR
	* IF
	* PERCENT
	* __ANON_3
	* __ANON_4
	* __ANON_6
	* _NEWLINE
	* STAR
	* MINUS
	* __ANON_0
	* EQUAL
	* DOUBLE_EQUAL
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#goal_representation
 
def has_milk_or_cereal(fridge:item, pantry:item):
    # Function to check if there is milk in the fridge or cereal in the pantry
    symbol has_milk=exists o: item : (is_milk(o) and inside(o, fridge))
    symbol has_cereal=exists o: item : (is_food_cereal(o) and inside(o, pantry))
    return has_milk or has_cereal

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and is_off(fridge) and open(fridge)
        # Select the fridge that has been turned off and opened

        bind pantry: item where:
            is_cupboard(pantry)
        # Since there is no explicit pantry category, use cupboard as a close alternative based on the functionality described

        if has_milk_or_cereal(fridge, pantry):
            # If milk is found in the fridge or cereal is found in the pantry, approach the respective location
            if exists o: item : (is_milk(o) and inside(o, fridge)):
                achieve close_char(char, fridge) # Approach the fridge if it contains milk
            elif exists o: item : (is_food_cereal(o) and inside(o, pantry)):
                achieve close_char(char, pantry) # Approach the pantry if it contains cereal
        else:
            # Explore by observing fridge and pantry to locate milk and cereal
            observe(fridge, "Check for milk inside the fridge")
            observe(pantry, "Check for cereal inside the pantry")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_milk_in_fridge(fridge:item):
    # Function to check if milk is in the fridge
    symbol has_milk = exists milk: item : (is_milk(milk) and inside(milk, fridge))
    return has_milk

def is_cereal_in_pantry(pantry:item):
    # Function to check if cereal is in the pantry
    symbol has_cereal = exists cereal: item : (is_food_cereal(cereal) and inside(cereal, pantry))
    return has_cereal

behavior observe_fridge_and_pantry(fridge:item, pantry:item):
    body:
        # Look for milk and cereal in specified locations
        observe(fridge, "Check if milk is in the fridge")
        observe(pantry, "Check if cereal is in the pantry")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        
        bind pantry: item where:
            is_table(pantry) and containers(pantry)
        
        if not is_milk_in_fridge(fridge) or not is_cereal_in_pantry(pantry):
            observe_fridge_and_pantry(fridge, pantry)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_or_cereal(item:item):
    # Function to check if an item is milk or cereal
    symbol is_found= (is_milk(item) or is_food_cereal(item))
    return is_found

behavior search_for_milk(item:item):
    body:
        if not visited(item):
            observe(item, "Locate the milk in the refrigerator")

behavior search_for_cereal(item:item):
    body:
        if not visited(item):
            observe(item, "Locate the cereal in the pantry")

behavior __goal__():
    body:
        foreach item: item:
            if has_milk_or_cereal(item) and not visited(item):
                if is_milk(item):
                    search_for_milk(item)
                elif is_food_cereal(item):
                    search_for_cereal(item)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'is_food_cereal') at line 5824, column 22.
Expected one of: 
	* SEMICOLON
	* NOT_EQ
	* MORETHAN
	* __ANON_7
	* GREATER_EQ
	* LSHIFT
	* AND
	* RSHIFT
	* PLUS
	* LESS_EQ
	* __ANON_5
	* FLOORDIV
	* __ANON_1
	* CIRCUMFLEX
	* AMPERSAND
	* AT
	* SLASH
	* __ANON_2
	* LESSTHAN
	* __ANON_8
	* OR
	* VBAR
	* IF
	* PERCENT
	* __ANON_3
	* __ANON_4
	* __ANON_6
	* _NEWLINE
	* STAR
	* MINUS
	* __ANON_0
	* EQUAL
	* DOUBLE_EQUAL
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_headset_2062_around_closetdrawer_377(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==377
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(headset,closetdrawer_instance)
        else:
            exp(headset,closetdrawer_instance)
    eff:
        unknown[headset]=False
        close[headset,closetdrawer_instance]=True
        close[closetdrawer_instance,headset]=True
    

#goal_representation
 
def has_milk_or_cereal(item: item):
    # Function to check if an item is milk or cereal
    symbol is_found = (is_milk(item) or is_food_cereal(item))
    return is_found

behavior search_for_milk(item: item):
    body:
        if not visited(item):
            observe(item, "Locate the milk in the refrigerator")

behavior search_for_cereal(item: item):
    body:
        if not visited(item):
            observe(item, "Locate the cereal in the pantry")

behavior __goal__():
    body:
        foreach item: item:
            if has_milk_or_cereal(item) and not visited(item):
                if is_milk(item):
                    search_for_milk(item)
                elif is_food_cereal(item):
                    search_for_cereal(item)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'is_food_cereal') at line 5842, column 22.
Expected one of: 
	* SEMICOLON
	* NOT_EQ
	* MORETHAN
	* __ANON_7
	* GREATER_EQ
	* LSHIFT
	* AND
	* RSHIFT
	* PLUS
	* LESS_EQ
	* __ANON_5
	* FLOORDIV
	* __ANON_1
	* CIRCUMFLEX
	* AMPERSAND
	* AT
	* SLASH
	* __ANON_2
	* LESSTHAN
	* __ANON_8
	* OR
	* VBAR
	* IF
	* PERCENT
	* __ANON_3
	* __ANON_4
	* __ANON_6
	* _NEWLINE
	* STAR
	* MINUS
	* __ANON_0
	* EQUAL
	* DOUBLE_EQUAL
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_pot_2069_around_coffee_table_2068(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(pot,coffee_table_instance)
        else:
            exp(pot,coffee_table_instance)
    eff:
        unknown[pot]=False
        close[pot,coffee_table_instance]=True
        close[coffee_table_instance,pot]=True
    

#goal_representation
 
def has_milk_or_cereal(item: item):
    # Function to check if an item is milk or cereal
    symbol is_found = (is_milk(item) or is_food_cereal(item))
    return is_found

behavior search_for_milk(item: item):
    body:
        if not visited(item):
            observe(item, "Locate the milk in the refrigerator")

behavior search_for_cereal(item: item):
    body:
        if not visited(item):
            observe(item, "Locate the cereal in the pantry")

behavior __goal__():
    body:
        foreach item: item:
            if has_milk_or_cereal(item) and not visited(item):
                if is_milk(item):
                    search_for_milk(item)
                elif is_food_cereal(item):
                    search_for_cereal(item)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the milk and cereal." ?
Answer: Find the milk and cereal in their respective storage areas, like the refrigerator for milk and a pantry or cupboard for cereal.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the milk in the refrigerator.', '2. Find the cereal in the pantry or cupboard.', '3. Pour the milk into a pot and heat it.', '4. Add cereal to the hot milk.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior search_for_milk_in_fridge(milk:item, fridge:item):
    body:
        achieve_once visited(fridge)
        # By visiting the fridge, we are searching for the milk inside it

behavior __goal__():
    body:
        foreach fridge: item:
            if is_fridge(fridge) and not visited(fridge):
                search_for_milk_in_fridge(milk, fridge)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: milk; available variables: [Variable<fridge: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_table_355(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation
 
behavior search_for_milk_in_fridge(milk:item, fridge:item):
    body:
        achieve_once visited(fridge)
        # By visiting the fridge, we are searching for the milk inside it

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        foreach fridge: item:
            if is_fridge(fridge) and not visited(fridge):
                search_for_milk_in_fridge(milk, fridge)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior search_for_milk_in_fridge(milk:item, fridge:item):
    body:
        achieve_once visited(fridge)
        # By visiting the fridge, we are searching for the milk inside it

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        foreach fridge: item:
            if is_fridge(fridge) and not visited(fridge):
                search_for_milk_in_fridge(milk, fridge)

##############################
From agent.py-> find a plan in act()
obs(fridge_289, look around this place)
##############################
From agent.py
obs(fridge_289, look around this place)
Get this information:  food_turkey_2040 is inside fridge_289. food_fish_2021 is inside fridge_289. milk_2043 is inside fridge_289. food_onion_2032 is inside fridge_289. food_cake_2013 is inside fridge_289. food_hamburger_2024 is inside fridge_289. food_potato_2035 is inside fridge_289. food_cheese_2016 is inside fridge_289. food_kiwi_2027 is inside fridge_289. food_steak_2008 is inside fridge_289. food_donut_2019 is inside fridge_289. food_snack_2038 is inside fridge_289. food_banana_2011 is inside fridge_289. food_food_2022 is inside fridge_289. food_oatmeal_2030 is inside fridge_289. food_vegetable_2041 is inside fridge_289. fridge_289 is facing drawing_239. food_carrot_2014 is inside fridge_289. food_peanut_butter_2033 is inside fridge_289. food_rice_2036 is inside fridge_289. food_ice_cream_2025 is inside fridge_289. food_chicken_2017 is inside fridge_289. food_lemon_2028 is inside fridge_289. food_sugar_2039 is inside fridge_289. food_apple_2009 is inside fridge_289. food_egg_2020 is inside fridge_289. sauce_2078 is inside fridge_289. food_orange_2031 is inside fridge_289. fridge_289 is close to cupboard_229. fridge_289 is close to floor_6. fridge_289 is close to floor_7. fridge_289 is close to kitchen_counter_230. fridge_289 is close to wall_11. fridge_289 is close to wall_14. fridge_289 is close to ceiling_18. fridge_289 is close to mat_22. fridge_289 is close to sauce_2078. fridge_289 is close to shower_36. fridge_289 is close to toilet_37. fridge_289 is close to microwave_297. fridge_289 is close to door_44. fridge_289 is close to doorjamb_45. fridge_289 is close to drawing_174. fridge_289 is close to drawing_239. fridge_289 is close to drawing_240. fridge_289 is close to ceiling_216. fridge_289 is close to floor_202. fridge_289 is close to floor_203. fridge_289 is close to floor_77. fridge_289 is close to wall_211. fridge_289 is close to wall_85. fridge_289 is close to ceiling_95. fridge_289 is close to food_steak_2008. fridge_289 is close to food_apple_2009. fridge_289 is close to food_bacon_2010. fridge_289 is close to food_banana_2011. fridge_289 is close to food_bread_2012. fridge_289 is close to food_cake_2013. fridge_289 is close to food_carrot_2014. fridge_289 is close to food_cereal_2015. fridge_289 is close to food_cheese_2016. fridge_289 is close to food_chicken_2017. fridge_289 is close to food_dessert_2018. fridge_289 is close to food_donut_2019. fridge_289 is close to food_egg_2020. fridge_289 is close to food_fish_2021. fridge_289 is close to food_food_2022. fridge_289 is close to food_fruit_2023. fridge_289 is close to food_hamburger_2024. fridge_289 is close to food_ice_cream_2025. fridge_289 is close to food_jam_2026. fridge_289 is close to food_kiwi_2027. fridge_289 is close to food_lemon_2028. fridge_289 is close to food_noodles_2029. fridge_289 is close to food_oatmeal_2030. fridge_289 is close to food_orange_2031. fridge_289 is close to food_onion_2032. fridge_289 is close to food_peanut_butter_2033. fridge_289 is close to food_pizza_2034. fridge_289 is close to food_potato_2035. fridge_289 is close to food_rice_2036. fridge_289 is close to food_salt_2037. fridge_289 is close to food_snack_2038. fridge_289 is close to food_sugar_2039. fridge_289 is close to food_turkey_2040. fridge_289 is close to food_vegetable_2041. fridge_289 is close to dry_pasta_2042. fridge_289 is close to milk_2043. fridge_289 is close to trashcan_99. fridge_289 is close to character_65. food_bread_2012 is inside fridge_289. food_fruit_2023 is inside fridge_289. dry_pasta_2042 is inside fridge_289. food_cereal_2015 is inside fridge_289. food_pizza_2034 is inside fridge_289. fridge_289 is on floor_202. fridge_289 is on floor_203. food_dessert_2018 is inside fridge_289. food_jam_2026 is inside fridge_289. food_salt_2037 is inside fridge_289. fridge_289 is inside dining_room_201. food_bacon_2010 is inside fridge_289. food_noodles_2029 is inside fridge_289. fridge_289 is OFF. fridge_289 is OPEN. fridge_289 is PLUGGED_IN. fridge_289 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_cereal_inside(pantry_or_cupboard:item):
    # Function to check if there is cereal inside the specified pantry or cupboard
    symbol has_cereal=exists cereal: item : (is_food_cereal(cereal) and inside(cereal, pantry_or_cupboard))
    return has_cereal

behavior __goal__():
    body:
        if exists pantry_or_cupboard: item : (is_pantry(pantry_or_cupboard) or is_cupboard(pantry_or_cupboard)) and has_cereal_inside(pantry_or_cupboard):
            # Check if there is a pantry or cupboard with cereal based on the available information
            bind pantry_or_cupboard: item where:
                (is_pantry(pantry_or_cupboard) or is_cupboard(pantry_or_cupboard)) and has_cereal_inside(pantry_or_cupboard)
            # Select the storage area that has cereal inside
            achieve close_char(char, pantry_or_cupboard)
            # Move the character closer to the storage area with cereal

        else:
           # If no storage area with cereal is found, initiate exploration to locate one
            foreach pantry_or_cupboard: item:
                if (is_pantry(pantry_or_cupboard) or is_cupboard(pantry_or_cupboard)) and not visited(pantry_or_cupboard):
                    # Check all unvisited pantries or cupboards
                    observe(pantry_or_cupboard,"Check is there any cereal inside")
                    # Observe whether each pantry or cupboard has cereal inside

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_cereal_inside(pantry_or_cupboard:item):
    # Function to check if there is cereal inside the specified pantry or cupboard
    symbol has_cereal=exists cereal: item : (is_food_cereal(cereal) and inside(cereal, pantry_or_cupboard))
    return has_cereal

behavior __goal__():
    body:
        if exists pantry_or_cupboard: item : (is_pantry(pantry_or_cupboard) or is_cupboard(pantry_or_cupboard)) and has_cereal_inside(pantry_or_cupboard):
            # Check if there is a pantry or cupboard with cereal based on the available information
            bind pantry_or_cupboard: item where:
                (is_pantry(pantry_or_cupboard) or is_cupboard(pantry_or_cupboard)) and has_cereal_inside(pantry_or_cupboard)
            # Select the storage area that has cereal inside
            achieve close_char(char, pantry_or_cupboard)
            # Move the character closer to the storage area with cereal

        else:
           # If no storage area with cereal is found, initiate exploration to locate one
            foreach pantry_or_cupboard: item:
                if (is_pantry(pantry_or_cupboard) or is_cupboard(pantry_or_cupboard)) and not visited(pantry_or_cupboard):
                    # Check all unvisited pantries or cupboards
                    observe(pantry_or_cupboard,"Check is there any cereal inside")
                    # Observe whether each pantry or cupboard has cereal inside

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)obs(cupboard_229, Check is there any cereal inside)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
obs(cupboard_229, Check is there any cereal inside)
Get this information:  cupboard_229 is on wall_211. cupboard_229 is inside dining_room_201. cupboard_229 is close to stovefan_288. cupboard_229 is close to fridge_289. cupboard_229 is close to coffe_maker_290. cupboard_229 is close to toaster_292. cupboard_229 is close to shower_36. cupboard_229 is close to kitchen_counter_230. cupboard_229 is close to sink_231. cupboard_229 is close to faucet_232. cupboard_229 is close to microwave_297. cupboard_229 is close to tray_296. cupboard_229 is close to wall_11. cupboard_229 is close to oven_295. cupboard_229 is close to wall_15. cupboard_229 is close to ceiling_18. cupboard_229 is close to wall_211. cupboard_229 is close to wall_212. cupboard_229 is close to ceiling_216. cupboard_229 is close to ceiling_221. cupboard_229 is close to character_65. cupboard_229 is CLEAN. cupboard_229 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_pencil_2001_around_closetdrawer_388(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pencil,closetdrawer_instance)
        else:
            exp(pencil,closetdrawer_instance)
    eff:
        unknown[pencil]=False
        close[pencil,closetdrawer_instance]=True
        close[closetdrawer_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_milk_into_pot(milk:item, pot:item):
    body:
        achieve_once inside(milk, pot)

behavior heat_milk_in_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        pour_milk_into_pot(milk, pot)
        heat_milk_in_pot(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior pour_milk_into_pot(milk:item, pot:item):
    body:
        achieve_once inside(milk, pot)

behavior heat_milk_in_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        pour_milk_into_pot(milk, pot)
        heat_milk_in_pot(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(pot_2069)putin_executor(milk_2043, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(pot_2069)putin_executor(milk_2043, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the fridge_289. Robot is close to the milk_2043. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the fridge_289. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the milk_2043. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(milk_2043, pot_2069)
Robot find: Robot is close to the milk_2043. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. milk_2043 is inside pot_2069. pot_2069 is close milk_2043. milk_2043 is close pot_2069. milk_2043 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the milk_2043. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_milk(cereal:item, milk:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        achieve_once inside(milk, cup)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        
        bind milk: item where:
            is_milk(milk) and inside(milk, pot)

        bind cup: item where:
            is_cup(cup)

        add_cereal_to_milk(cereal, milk, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#goal_representation
 
behavior add_cereal_to_milk(cereal:item, milk:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        achieve_once inside(milk, cup)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        
        bind milk: item where:
            is_milk(milk)

        bind cup: item where:
            is_cup(cup)

        add_cereal_to_milk(cereal, milk, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_cereal_to_milk(cereal:item, milk:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        achieve_once inside(milk, cup)

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        
        bind milk: item where:
            is_milk(milk)

        bind cup: item where:
            is_cup(cup)

        add_cereal_to_milk(cereal, milk, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(food_cereal_2015)grab_executor(food_cereal_2015)walk_executor(cup_2063)putin_executor(food_cereal_2015, cup_2063)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)
##############################
From agent.py
walk_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. 
##############################
From agent.py
grab_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. Grabbing food_cereal_2015 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(food_cereal_2015, cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. cup_2063 is close food_cereal_2015. food_cereal_2015 is inside cup_2063. food_cereal_2015 is close cup_2063. food_cereal_2015 released by right hand. 
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the milk_2043. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the milk_2043. Robot is close to the pot_2069. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. milk_2043 is inside cup_2063. cup_2063 is close milk_2043. milk_2043 is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'open_executor(food_cereal_2015) (Failed)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(kitchen_counter_230)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(pot_2069)', 'putin_executor(milk_2043, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_cereal_2015)', 'grab_executor(food_cereal_2015)', 'walk_executor(cup_2063)', 'putin_executor(food_cereal_2015, cup_2063)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)']
Time info:
Time consume: 1229 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 57
goal generate times: 81
goal correct times: 12
action_num: 82

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
