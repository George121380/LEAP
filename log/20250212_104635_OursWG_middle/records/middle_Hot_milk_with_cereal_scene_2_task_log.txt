From agent.py
Reset goals: The sub-goals are: 
['1. Find milk and cereal.', '2. Heat the milk until hot.', '3. Pour hot milk into a cup and add cereal.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_oatmeal_2063_around_cupboard_131(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_oatmeal,cupboard_instance)
        else:
            exp(food_oatmeal,cupboard_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,cupboard_instance]=True
        close[cupboard_instance,food_oatmeal]=True
    

behavior find_food_cereal_2048_around_cupboard_131(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_item(target:item):
    body:
        achieve_once visited(target)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        # Search for milk
        find_item(milk)
        
        # Search for cereal
        find_item(cereal)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_item(target:item):
    body:
        achieve_once visited(target)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        # Search for milk
        find_item(milk)
        
        # Search for cereal
        find_item(cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_cereal_2048, cupboard_131)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(milk_2074, fridge_140)
Find milk_2074. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_food_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior find_food_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                find_food_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                find_food_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_food_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior find_food_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                find_food_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                find_food_cereal(cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_milk_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cereal: item where:
            is_food_cereal(cereal)

        find_milk_cereal(milk, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_milk_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cereal: item where:
            is_food_cereal(cereal)

        find_milk_cereal(milk, cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior search_for_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        
        bind cereal: item where:
            is_food_cereal(cereal)

        search_for_milk_and_cereal(milk, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior search_for_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        
        bind cereal: item where:
            is_food_cereal(cereal)

        search_for_milk_and_cereal(milk, cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_nearby(place:item):
    # Function to check if milk is nearby a specified place
    symbol has_milk=exists milk: item : (is_milk(milk) and close(milk, place))
    return has_milk

behavior locate_milk_and_cereal():
    body:
        bind refrigerator: item where:
            is_fridge(refrigerator)

        if has_milk_nearby(refrigerator):
            bind milk: item where:
                is_milk(milk) and close(milk, refrigerator)
            achieve close_char(char, milk)

        else:
            observe(refrigerator, "Look for milk around the refrigerator")

        bind food_cereal: item where:
            is_food_cereal(food_cereal)
        
        achieve close_char(char, food_cereal)

behavior __goal__():
    body:
        locate_milk_and_cereal()

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_cup_2006_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_or_cereal_found():
    # Function to check if milk or cereal has been found
    symbol milk_found = exists o: item : (is_milk(o))
    symbol cereal_found = exists o: item : (is_food_cereal(o))
    return milk_found or cereal_found

behavior search_milk_or_cereal(item:item):
    body:
        achieve_once visited(item)

behavior __goal__():
    body:
        if not is_milk_or_cereal_found():
            # If milk or cereal has not been found, search through possible locations
            foreach o: item:
                if (is_milk(o) or is_food_cereal(o)) and not visited(o):
                    search_milk_or_cereal(o)
        # Otherwise, proceed knowing the item has been found

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind cereal: item where:
            is_food_cereal(cereal)
        find_milk_and_cereal(milk, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind cereal: item where:
            is_food_cereal(cereal)
        find_milk_and_cereal(milk, cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_milk(milk:item):
    body:
        achieve_once visited(milk) # Check that the milk has been retrieved or not

behavior find_cereal(cereal:item):
    body:
        achieve_once visited(cereal) # Check that the cereal has been retrieved or not

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                find_milk(milk)
                
        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                find_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_milk(milk:item):
    body:
        achieve_once visited(milk) # Check that the milk has been retrieved or not

behavior find_cereal(cereal:item):
    body:
        achieve_once visited(cereal) # Check that the cereal has been retrieved or not

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                find_milk(milk)
                
        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                find_cereal(cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_juice_2034_around_kitchen_counter_129(juice:item):
    goal: not unknown(juice)
    body:
        assert is_juice(juice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(juice,kitchen_counter_instance)
        else:
            exp(juice,kitchen_counter_instance)
    eff:
        unknown[juice]=False
        close[juice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,juice]=True
    

#exp_behavior_end

#goal_representation

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior search_for_item(item:item):
    body:
        achieve_once visited(item)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_item(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_item(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior search_for_item(item:item):
    body:
        achieve_once visited(item)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_item(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_item(cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def can_open(item:item):
    return can_open(item) 

behavior search_for_item(item:item):
    body:
        observe(item, "Find this item")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        if not visited(milk):
            search_for_item(milk)
        # Search for milk if not already visited

        if not visited(cereal):
            search_for_item(cereal)
        # Search for cereal if not already visited

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def can_open(item:item):
    return can_open(item) 

behavior search_for_item(item:item):
    body:
        observe(item, "Find this item")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        if not visited(milk):
            search_for_item(milk)
        # Search for milk if not already visited

        if not visited(cereal):
            search_for_item(cereal)
        # Search for cereal if not already visited

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, Find this item)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, Find this item)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, Find this item)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def has_found_milk_and_cereal(milk:item, cereal:item):
    symbol found_milk_and_cereal = visited(milk) and visited(cereal)
    return found_milk_and_cereal

behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cereal: item where:
            is_food_cereal(cereal)

        if not has_found_milk_and_cereal(milk, cereal):
            find_milk_and_cereal(milk, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_found_milk_and_cereal(milk:item, cereal:item):
    symbol found_milk_and_cereal = visited(milk) and visited(cereal)
    return found_milk_and_cereal

behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cereal: item where:
            is_food_cereal(cereal)

        if not has_found_milk_and_cereal(milk, cereal):
            find_milk_and_cereal(milk, cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior search_for_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_and_cereal(neighborhood:item):
    # Function to check if there is both milk and cereal in a given neighborhood
    symbol has_milk= exists m: item : (is_milk(m) and close_char(char, neighborhood))
    symbol has_cereal= exists c: item : (is_food_cereal(c) and close_char(char, neighborhood))
    return has_milk and has_cereal

behavior __goal__():
    body:
        if exists neighborhood: item : (has_milk_and_cereal(neighborhood)):
            # Check if milk and cereal are close based on available information
            bind neighborhood: item where:
                has_milk_and_cereal(neighborhood) 
            # Choose a location close to both milk and cereal
            achieve close_char(char, neighborhood) 
            # Move closer to the location with both milk and cereal

        else: 
           # If neither milk nor cereal is found together, initiate stepbystep exploration
            foreach m: item:
                if is_milk(m) and not visited(m):
                    observe(m,"Observe the surrounding area for cereal")
                    # Observe around milk to find cereal
                    
            foreach c: item:
                if is_food_cereal(c) and not visited(c):
                    observe(c,"Observe the surrounding area for milk")
                    # Observe around cereal to find milk

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_sink_307(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_milk(x: item):
    # Check if an item is milk
    return is_milk(x)

def is_food_cereal(x: item):
    # Check if an item is cereal
    return is_cereal(x)

behavior search_for_milk(milk: item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal: item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_food_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_milk(x: item):
    # Check if an item is milk
    return is_milk(x)

def is_food_cereal(x: item):
    # Check if an item is cereal
    return is_cereal(x)

behavior search_for_milk(milk: item):
    body:
        achieve_once visited(milk)

behavior search_for_cereal(cereal: item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_food_milk(milk) and not visited(milk):
                search_for_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_cereal(cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_or_cereal_near(fridge:item):
    # Function to check if milk or cereal is near a specified fridge
    symbol has_milk_or_cereal=exists o: item : ((is_milk(o) or is_food_cereal(o)) and close(o, fridge))
    return has_milk_or_cereal

behavior search_for_milk():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                observe(milk,"Find this item")

behavior search_for_cereal():
    body:
        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                observe(cereal,"Find this item")

behavior __goal__():
    body:
        if exists fridge: item : (is_fridge(fridge) and has_milk_or_cereal_near(fridge)):
            # If there is a fridge with milk or cereal close by, then navigate near it
            bind fridge: item where:
                is_fridge(fridge) and has_milk_or_cereal_near(fridge)
            achieve close_char(char, fridge)

        else:
            # If milk is not found, then look for it
            search_for_milk()
            # If cereal is not found, then look for it
            search_for_cereal()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior find_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior find_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                find_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                find_cereal(cereal)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior find_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior find_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                find_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                find_cereal(cereal)
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select an item identified as milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select an item identified as cereal

        find_milk_and_cereal(milk, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select an item identified as milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select an item identified as cereal

        find_milk_and_cereal(milk, cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior search_for_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk_and_cereal(milk, cereal=None)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_milk_and_cereal(milk=None, cereal=cereal)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cereal; available variables: [Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2097_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_butter_2018_around_kitchen_counter_129(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

#goal_representation
 
behavior search_for_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                search_for_milk_and_cereal(milk, cereal=cereal)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                search_for_milk_and_cereal(milk=milk, cereal=cereal)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cereal; available variables: [Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_bread_2016_around_kitchen_counter_128(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#goal_representation

behavior search_for_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                foreach cereal: item:
                    if is_food_cereal(cereal) and not visited(cereal):
                        search_for_milk_and_cereal(milk, cereal)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_item(item:item, question:string):
    body:
        observe(item, "question")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cereal: item where:
            is_food_cereal(cereal)

        if not visited(milk):
            find_item(milk, Find this item)

        if not visited(cereal):
            find_item(cereal, Find this item)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'this') at line 5869, column 34.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_132(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_butter_2018_around_kitchen_counter_129(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_butter,kitchen_counter_instance)
        else:
            exp(food_butter,kitchen_counter_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_butter]=True
    

behavior find_food_bread_2016_around_sink_133(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_bread,sink_instance)
        else:
            exp(food_bread,sink_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,sink_instance]=True
        close[sink_instance,food_bread]=True
    

behavior find_food_orange_2008_around_cupboard_131(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_orange,cupboard_instance)
        else:
            exp(food_orange,cupboard_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,cupboard_instance]=True
        close[cupboard_instance,food_orange]=True
    

#goal_representation
 
behavior find_item(item:item, question:string):
    body:
        observe(item, "question")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cereal: item where:
            is_food_cereal(cereal)

        if not visited(milk):
            find_item(milk, Find this item)

        if not visited(cereal):
            find_item(cereal, Find this item)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'this') at line 5905, column 34.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2095_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_food_bread_2016_around_kitchen_counter_129(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#goal_representation

behavior find_item(item:item, question:string):
    body:
        observe(item, "question")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind cereal: item where:
            is_food_cereal(cereal)

        if not visited(milk):
            find_item(milk, Find this item)

        if not visited(cereal):
            find_item(cereal, Find this item)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_food_bread_2016_around_kitchen_counter_129(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_food_items(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        
        bind cereal: item where:
            is_food_cereal(cereal)
        
        find_food_items(milk, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_food_items(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        
        bind cereal: item where:
            is_food_cereal(cereal)
        
        find_food_items(milk, cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_plate_2105_around_cupboard_131(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                find_milk_and_cereal(milk, cereal)
        
        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                find_milk_and_cereal(milk, cereal)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cereal; available variables: [Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2095_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#goal_representation
 
behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                foreach cereal: item:
                    if is_food_cereal(cereal) and not visited(cereal):
                        find_milk_and_cereal(milk, cereal)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_kitchen_counter_128(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_cup_2089_around_stove_2090(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(cup,stove_instance)
        else:
            exp(cup,stove_instance)
    eff:
        unknown[cup]=False
        close[cup,stove_instance]=True
        close[stove_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior find_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                find_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                find_cereal(cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_milk(milk:item):
    body:
        achieve_once visited(milk)

behavior find_cereal(cereal:item):
    body:
        achieve_once visited(cereal)

behavior __goal__():
    body:
        foreach milk: item:
            if is_milk(milk) and not visited(milk):
                find_milk(milk)

        foreach cereal: item:
            if is_food_cereal(cereal) and not visited(cereal):
                find_cereal(cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk to find

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal to find

        find_milk_and_cereal(milk, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_milk_and_cereal(milk:item, cereal:item):
    body:
        achieve_once visited(milk)
        achieve_once visited(cereal)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk to find

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal to find

        find_milk_and_cereal(milk, cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)obs(milk_2074, look around this place)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
obs(milk_2074, look around this place)
Get this information:  milk_2074 is close to fridge_140. milk_2074 is close to character_219. milk_2074 is inside dining_room_1. milk_2074 is on fridge_140.
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_sink_307(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_food_bread_2016_around_dishwasher_143(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_bread,dishwasher_instance)
        else:
            exp(food_bread,dishwasher_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,dishwasher_instance]=True
        close[dishwasher_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation

def is_milk_and_cereal_found():
    symbol has_milk=exists item: item : (is_milk(item))
    symbol has_cereal=exists item: item : (is_food_cereal(item))
    return has_milk and has_cereal

behavior __goal__():
    body:
        if is_milk_and_cereal_found():
            bind milk: item where:
                is_milk(milk)
            bind cereal: item where:
                is_food_cereal(cereal)
            achieve_once close_char(char, milk)
            achieve_once close_char(char, cereal)
        else:
            foreach item: item:
                if (is_milk(item) or is_food_cereal(item)) and not visited(item):
                    observe(item, "Find this item")

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_milk_and_cereal_found():
    symbol has_milk=exists item: item : (is_milk(item))
    symbol has_cereal=exists item: item : (is_food_cereal(item))
    return has_milk and has_cereal

behavior __goal__():
    body:
        if is_milk_and_cereal_found():
            bind milk: item where:
                is_milk(milk)
            bind cereal: item where:
                is_food_cereal(cereal)
            achieve_once close_char(char, milk)
            achieve_once close_char(char, cereal)
        else:
            foreach item: item:
                if (is_milk(item) or is_food_cereal(item)) and not visited(item):
                    observe(item, "Find this item")

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)walk_executor(food_cereal_2048)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the fridge_140. Robot is close to the milk_2074. 
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the fridge_140. Robot is close to the food_cereal_2048. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_bowl_2095_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(milk:item, stove:item, pot:item):
    body:
        achieve_once inside(milk, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        heat_milk(milk, stove, pot)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_milk(milk:item, stove:item, pot:item):
    body:
        achieve_once inside(milk, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        heat_milk(milk, stove, pot)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_2093, stove_2090)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(pot_2093)putin_executor(milk_2074, pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(pot_2093, stove_2090)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(pot_2093)putin_executor(milk_2074, pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the fridge_140. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
putin_executor(milk_2074, pot_2093)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. milk_2074 is close pot_2093. milk_2074 is inside pot_2093. pot_2093 is close milk_2074. milk_2074 released by right hand. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. stove_2090 is close pot_2093. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_cup_2089_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation

behavior pour_hot_milk(cup:item, milk:item):
    body:
        achieve_once inside(milk, cup)

behavior add_cereal(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        
        bind milk: item where:
            is_milk(milk) and is_hot(milk) # Assuming is_hot is intended to check the temperature
        
        bind cereal: item where:
            is_food_cereal(cereal)

        pour_hot_milk(cup, milk)
        add_cereal(cereal, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_hot not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2095_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_cup_2006_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation

behavior pour_hot_milk(cup:item, milk:item):
    body:
        achieve_once inside(milk, cup)

behavior add_cereal(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        
        bind milk: item where:
            is_milk(milk) # Removed is_hot check as its not valid
        
        bind cereal: item where:
            is_food_cereal(cereal)

        pour_hot_milk(cup, milk)
        add_cereal(cereal, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior pour_hot_milk(cup:item, milk:item):
    body:
        achieve_once inside(milk, cup)

behavior add_cereal(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        
        bind milk: item where:
            is_milk(milk) # Removed is_hot check as its not valid
        
        bind cereal: item where:
            is_food_cereal(cereal)

        pour_hot_milk(cup, milk)
        add_cereal(cereal, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(cup_2087, cupboard_131)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(cup_2087, cupboard_131)
Fail to find cup_2087 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(cup_2087, cupboard_130)
Fail to find cup_2087 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(cup_2087, kitchen_counter_132)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_132)
Fail to find cup_2087 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(cup_2087, kitchen_counter_128)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_128)
Fail to find cup_2087 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(cup_2087, dishwasher_143)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(cup_2087, dishwasher_143)
Fail to find cup_2087 around dishwasher_143. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_307)exp(cup_2087, sink_307)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(sink_307)
Robot find: detergent_2108, drawing_296, towel_rack_298, Robot is close to the bathroom_counter_306. Robot is close to the sink_307. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2087 ?
Answer: Go to dining_room_1. Look for table_123. You will find cup_2087 on top of table_123.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_1. Look for table_123. You will find cup_2087 on top of table_123.

Trial and Error: You can not open food_cereal_2048You can not open food_cereal_2048You can not open food_cereal_2048You can not open food_cereal_2048You can not open food_cereal_2048You can not open food_cereal_2048You can not open food_cereal_2048You can not open food_cereal_2048You can not open food_cereal_2048You can not open food_cereal_2048You can not open food_cereal_2048You can not open food_cereal_2048You can not open food_cereal_2048You can not open food_cereal_2048You can not open food_cereal_2048You can not open food_cereal_2048You can not open food_cereal_2048You can not open food_cereal_2048
The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for milk_2074 around fridge_140.
Action 5: Walk to milk_2074.
Action 6: Observe around milk_2074 with the question of look around this place.
Action 7: Walk to food_cereal_2048.
Action 8: Walk to milk_2074.
Action 9: Observe around milk_2074 with the question of look around this place.
Action 10: Walk to food_cereal_2048.
Action 11: Walk to milk_2074.
Action 12: Observe around milk_2074 with the question of look around this place.
Action 13: Walk to food_cereal_2048.
Action 14: Walk to milk_2074.
Action 15: Observe around milk_2074 with the question of look around this place.
Action 16: Walk to food_cereal_2048.
Action 17: Walk to milk_2074.
Action 18: Observe around milk_2074 with the question of look around this place.
Action 19: Walk to food_cereal_2048.
Action 20: Walk to milk_2074.
Action 21: Observe around milk_2074 with the question of look around this place.
Action 22: Walk to food_cereal_2048.
Action 23: Walk to milk_2074.
Action 24: Observe around milk_2074 with the question of look around this place.
Action 25: Walk to food_cereal_2048.
Action 26: Walk to milk_2074.
Action 27: Observe around milk_2074 with the question of look around this place.
Action 28: Walk to food_cereal_2048.
Action 29: Walk to milk_2074.
Action 30: Observe around milk_2074 with the question of look around this place.
Action 31: Walk to food_cereal_2048.
Action 32: Walk to milk_2074.
Action 33: Observe around milk_2074 with the question of Find this item.
Action 34: Walk to food_cereal_2048.
Action 35: Walk to milk_2074.
Action 36: Observe around milk_2074 with the question of look around this place.
Action 37: Walk to food_cereal_2048.
Action 38: Walk to milk_2074.
Action 39: Observe around milk_2074 with the question of look around this place.
Action 40: Walk to food_cereal_2048.
Action 41: Walk to milk_2074.
Action 42: Observe around milk_2074 with the question of look around this place.
Action 43: Walk to food_cereal_2048.
Action 44: Walk to milk_2074.
Action 45: Observe around milk_2074 with the question of look around this place.
Action 46: Walk to food_cereal_2048.
Action 47: Walk to milk_2074.
Action 48: Observe around milk_2074 with the question of look around this place.
Action 49: Walk to food_cereal_2048.
Action 50: Walk to milk_2074.
Action 51: Observe around milk_2074 with the question of look around this place.
Action 52: Walk to food_cereal_2048.
Action 53: Walk to milk_2074.
Action 54: Observe around milk_2074 with the question of look around this place.
Action 55: Walk to food_cereal_2048.
Action 56: Walk to milk_2074.
Action 57: Observe around milk_2074 with the question of look around this place.
Action 58: Walk to food_cereal_2048.
Action 59: Walk to milk_2074.
Action 60: Walk to food_cereal_2048.
Action 61: Walk to stove_2090.
Action 62: Open stove_2090.
Action 63: look for pot_2093 around stove_2090.
Action 64: Walk to pot_2093.
Action 65: Open pot_2093.
Action 66: Walk to milk_2074.
Action 67: Grab milk_2074.
Action 68: Walk to pot_2093.
Action 69: Put milk_2074 into pot_2093.
Action 70: Grab pot_2093.
Action 71: Walk to stove_2090.
Action 72: Put pot_2093 on stove_2090.
Action 73: Switch on stove_2090.
Action 74: Walk to cupboard_131.
Action 75: Open cupboard_131.
Action 76: look for cup_2087 around cupboard_131.
Action 77: Walk to cupboard_130.
Action 78: look for cup_2087 around cupboard_130.
Action 79: Walk to kitchen_counter_132.
Action 80: look for cup_2087 around kitchen_counter_132.
Action 81: Walk to kitchen_counter_128.
Action 82: look for cup_2087 around kitchen_counter_128.
Action 83: Walk to dishwasher_143.
Action 84: Open dishwasher_143.
Action 85: look for cup_2087 around dishwasher_143.
Action 86: Walk to sink_307.

##############################
From agent.py
exp(cup_2087, sink_307)
Fail to find cup_2087 around sink_307. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(cup_2087, table_123)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, cup_2006, laptop_2015, cup_2087, bowl_2095, fork_2103, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the pot_2093. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the pot_2093. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
putin_executor(milk_2074, cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the table_123. Robot is close to the cup_2087. milk_2074 is close cup_2087. milk_2074 is inside cup_2087. cup_2087 is close milk_2074. milk_2074 released by right hand. 
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_cereal_2048)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the fridge_140. Grabbing food_cereal_2048 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
putin_executor(food_cereal_2048, cup_2087)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the table_123. Robot is close to the cup_2087. food_cereal_2048 is close cup_2087. cup_2087 is close food_cereal_2048. food_cereal_2048 is inside cup_2087. food_cereal_2048 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(milk_2074)', 'walk_executor(food_cereal_2048)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(pot_2093)', 'open_executor(pot_2093)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(pot_2093)', 'putin_executor(milk_2074, pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(kitchen_counter_132)', 'walk_executor(kitchen_counter_128)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'walk_executor(sink_307)', 'walk_executor(table_123)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(cup_2087)', 'putin_executor(milk_2074, cup_2087)', 'walk_executor(food_cereal_2048)', 'grab_executor(food_cereal_2048)', 'walk_executor(cup_2087)', 'putin_executor(food_cereal_2048, cup_2087)']
Time info:
Time consume: 748 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 22
goal generate times: 28
goal correct times: 1
action_num: 88

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
