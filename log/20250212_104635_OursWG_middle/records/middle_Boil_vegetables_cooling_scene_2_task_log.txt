From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.', '2. Put the boiled vegetables into a bowl to cool.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2047_around_cupboard_131(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_pot_54_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot)
        place_vegetables_in_pot(vegetable, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot)
        place_vegetables_in_pot(vegetable, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(pot_54, cupboard_131)walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(pot_54, cupboard_131)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water first before placing the vegetables in it and boiling them.
##############################
From agent.py
Human Instruction: You need to fill the pot with water first before placing the vegetables in it and boiling them.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_54 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Grab pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for food_vegetable_2072 around fridge_140.
Action 13: Walk to faucet_308.
Action 14: Switch off faucet_308.
Action 15: Walk to food_vegetable_2072.
Action 16: Grab food_vegetable_2072.
Action 17: Walk to pot_54.
Action 18: Put food_vegetable_2072 into pot_54.
Action 19: Walk to stove_2090.
Action 20: Put pot_54 on stove_2090.
Action 21: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_bowl_2096_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_oil_2005_around_kitchen_counter_128(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot)
        place_vegetables_in_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot)
        place_vegetables_in_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill pot_54 with water before placing the vegetables into it and boiling them on the stove.
##############################
From agent.py
Human Instruction: You need to fill pot_54 with water before placing the vegetables into it and boiling them on the stove.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_54 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Grab pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for food_vegetable_2072 around fridge_140.
Action 13: Walk to faucet_308.
Action 14: Switch off faucet_308.
Action 15: Walk to food_vegetable_2072.
Action 16: Grab food_vegetable_2072.
Action 17: Walk to pot_54.
Action 18: Put food_vegetable_2072 into pot_54.
Action 19: Walk to stove_2090.
Action 20: Put pot_54 on stove_2090.
Action 21: Switch on stove_2090.
Action 22: Grab pot_54.
Action 23: Walk to faucet_134.
Action 24: Switch on faucet_134.
Action 25: Switch off faucet_134.
Action 26: Walk to stove_2090.
Action 27: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot)
        place_vegetables_in_pot(vegetable, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_curtain_121(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==121
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(food_onion,curtain_instance)
        else:
            exp(food_onion,curtain_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,curtain_instance]=True
        close[curtain_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54

        bind vegetable: item where:
            is_food_vegetable(vegetable) and id[vegetable] == 2072

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090

        fill_pot_with_water(pot)
        place_vegetables_in_pot(vegetable, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2115_around_basket_for_clothes_2040(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables] == 2072

        fill_pot_with_water(pot)
        place_vegetables_in_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. boil the vegetables." ?
Answer: Wash the vegetables. Fill a pot with water. Put the pot on the stove. Turn on the stove. Put the vegetables in the pot. Then turn off the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetable:item):
    body:
        achieve clean(vegetable)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        wash_vegetables(vegetable)
        fill_pot_with_water(pot)
        place_vegetables_in_pot(vegetable, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_vegetables(vegetable:item):
    body:
        achieve clean(vegetable)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        wash_vegetables(vegetable)
        fill_pot_with_water(pot)
        place_vegetables_in_pot(vegetable, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_vegetable_2072)switchoff_executor(faucet_134)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. food_vegetable_2072 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill pot_54 with water before placing it on the stove. After putting the vegetables in the pot and placing it on the stove, turn on the stove to boil the vegetables.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_boiled_vegetables_to_bowl(vegetable:item, bowl:item):
    body:
        achieve_once inside(vegetable, bowl)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable) and cooked(vegetable)
        # Select the boiled vegetable

        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl

        move_boiled_vegetables_to_bowl(vegetable, bowl)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function cooked not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#goal_representation
 
behavior move_boiled_vegetables_to_bowl(vegetable:item, bowl:item):
    body:
        achieve_once inside(vegetable, bowl)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the boiled vegetable (without using the invalid cooked predicate)

        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl

        move_boiled_vegetables_to_bowl(vegetable, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior move_boiled_vegetables_to_bowl(vegetable:item, bowl:item):
    body:
        achieve_once inside(vegetable, bowl)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the boiled vegetable (without using the invalid cooked predicate)

        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl

        move_boiled_vegetables_to_bowl(vegetable, bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(bowl_2096, dishwasher_143)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py
exp(bowl_2096, dishwasher_143)
Fail to find bowl_2096 around dishwasher_143. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)exp(bowl_2096, sink_133)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
exp(bowl_2096, sink_133)
Fail to find bowl_2096 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(bowl_2096, cupboard_130)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(bowl_2096, cupboard_130)
Fail to find bowl_2096 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(bowl_2096, kitchen_counter_128)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(bowl_2096, kitchen_counter_128)
Fail to find bowl_2096 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(bench_124)exp(bowl_2096, bench_124)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(bench_124)
Robot find: mat_114, drawing_118, Robot is close to the bench_124. 
##############################
From agent.py
exp(bowl_2096, bench_124)
Fail to find bowl_2096 around bench_124. 
##############################
From agent.py-> find a plan in act()
walk_executor(cutting_board_2080)exp(bowl_2096, cutting_board_2080)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2096 ?
Answer: Locate dining_room_1. Once inside, find table_127. You will find the bowl_2096 placed on table_127.
Re-decompose: None

##############################
From agent.py
Human Instruction: You need to fill pot_54 with water before placing the vegetables into it and boiling them on the stove.
Locate dining_room_1. Once inside, find table_127. You will find the bowl_2096 placed on table_127.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_54 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: Grab pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for food_vegetable_2072 around fridge_140.
Action 13: Walk to faucet_308.
Action 14: Switch off faucet_308.
Action 15: Walk to food_vegetable_2072.
Action 16: Grab food_vegetable_2072.
Action 17: Walk to pot_54.
Action 18: Put food_vegetable_2072 into pot_54.
Action 19: Walk to stove_2090.
Action 20: Put pot_54 on stove_2090.
Action 21: Switch on stove_2090.
Action 22: Grab pot_54.
Action 23: Walk to faucet_134.
Action 24: Switch on faucet_134.
Action 25: Switch off faucet_134.
Action 26: Walk to stove_2090.
Action 27: Put pot_54 on stove_2090.
Action 28: Walk to food_vegetable_2072.
Action 29: Grab food_vegetable_2072.
Action 30: Walk to faucet_134.
Action 31: Switch on faucet_134.
Action 32: Wash food_vegetable_2072.
Action 33: Switch off faucet_134.
Action 34: Walk to pot_54.
Action 35: Put food_vegetable_2072 into pot_54.
Action 36: Walk to dishwasher_143.
Action 37: Open dishwasher_143.
Action 38: look for bowl_2096 around dishwasher_143.
Action 39: Walk to sink_133.
Action 40: look for bowl_2096 around sink_133.
Action 41: Walk to cupboard_130.
Action 42: look for bowl_2096 around cupboard_130.
Action 43: Walk to kitchen_counter_128.
Action 44: look for bowl_2096 around kitchen_counter_128.
Action 45: Walk to bench_124.
Action 46: look for bowl_2096 around bench_124.
Action 47: Walk to cutting_board_2080.

##############################
From agent.py
exp(bowl_2096, cutting_board_2080)
Fail to find bowl_2096 around cutting_board_2080. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(bowl_2096, table_127)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(bowl_2096, table_127)
Find bowl_2096. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the pot_54. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(bowl_2096)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the bowl_2096. Robot is close to the table_127. 
##############################
From agent.py
putin_executor(food_vegetable_2072, bowl_2096)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the bowl_2096. Robot is close to the table_127. food_vegetable_2072 is close bowl_2096. bowl_2096 is close food_vegetable_2072. food_vegetable_2072 is inside bowl_2096. food_vegetable_2072 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some vegetables. Then cool them in a bowl.
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(pot_54)', 'putin_executor(food_vegetable_2072, pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'wash_executor(food_vegetable_2072)', 'switchoff_executor(faucet_134)', 'walk_executor(pot_54)', 'putin_executor(food_vegetable_2072, pot_54)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)', 'walk_executor(sink_133)', 'walk_executor(cupboard_130)', 'walk_executor(kitchen_counter_128)', 'walk_executor(bench_124)', 'walk_executor(cutting_board_2080)', 'walk_executor(table_127)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(bowl_2096)', 'putin_executor(food_vegetable_2072, bowl_2096)']
Time info:
Time consume: 485 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 28
goal generate times: 7
goal correct times: 1
action_num: 45

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 10 steps
Keystate: k3 - Requires: 2 steps
Action Completion Rate: 1.0
Scene_id: 2
##############################
