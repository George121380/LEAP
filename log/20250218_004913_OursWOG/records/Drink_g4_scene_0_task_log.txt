From agent.py
Reset goals: The sub-goals are: 
['Cut the apple.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_apple_2009_around_kitchen_counter_230(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_apple,kitchen_counter_instance)
        else:
            exp(food_apple,kitchen_counter_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_apple]=True
    

#exp_behavior_end

#goal_representation
 
def has_cutting_tool():
    # Function to check if there is a cutting tool (knife) available in the scene
    symbol has_knife=exists k: item : (is_knife(k))
    return has_knife

behavior use_cutting_tool(tool:item, target:item):
    body:
        achieve_once cut(target)
        # Use the cutting tool to cut the target item

behavior __goal__():
    body:
        if has_cutting_tool():
            bind knife: item where:
                is_knife(knife)
            # Bind the cutting tool (knife) in the scene
            bind apple: item where:
                is_food_apple(apple)
            # Bind the apple to be cut
            use_cutting_tool(knife, apple)
            # Use the knife to cut the apple

        else:
            foreach obj: item:
                if is_knife(obj) and not visited(obj):
                    observe(obj, "Check if the object is a knife")
            # If no knife is found, search for one by observing unvisited objects

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_cutting_tool():
    # Function to check if there is a cutting tool (knife) available in the scene
    symbol has_knife=exists k: item : (is_knife(k))
    return has_knife

behavior use_cutting_tool(tool:item, target:item):
    body:
        achieve_once cut(target)
        # Use the cutting tool to cut the target item

behavior __goal__():
    body:
        if has_cutting_tool():
            bind knife: item where:
                is_knife(knife)
            # Bind the cutting tool (knife) in the scene
            bind apple: item where:
                is_food_apple(apple)
            # Bind the apple to be cut
            use_cutting_tool(knife, apple)
            # Use the knife to cut the apple

        else:
            foreach obj: item:
                if is_knife(obj) and not visited(obj):
                    observe(obj, "Check if the object is a knife")
            # If no knife is found, search for one by observing unvisited objects

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_apple_2009, kitchen_counter_230)walk_executor(food_apple_2009)grab_executor(food_apple_2009)walk_executor(cutting_board_2051)put_executor(food_apple_2009, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_apple_2009)cut_executor(food_apple_2009)
##############################
