From agent.py
Reset goals: The sub-goals are: 
['Boil some rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_130(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_pot_54_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_cd_player_2084_around_dresser_377(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(cd_player,dresser_instance)
        else:
            exp(cd_player,dresser_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,dresser_instance]=True
        close[dresser_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
def has_required_items(pot:item):
    # Function to check if the pot has rice and water inside
    symbol has_items=exists rice: item : is_food_rice(rice) and inside(rice, pot) and has_water(pot)
    return has_items

behavior boil_rice(pot:item, stove:item):
    body:
        # Ensure the pot is on the stove
        achieve on(pot, stove)
        # Turn the stove on to boil the rice
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        if not has_required_items(pot):
            # If the pot doesnt have rice and water, observe to find them
            observe(pot, "Check if rice and water are inside the pot")
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        boil_rice(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_required_items(pot:item):
    # Function to check if the pot has rice and water inside
    symbol has_items=exists rice: item : is_food_rice(rice) and inside(rice, pot) and has_water(pot)
    return has_items

behavior boil_rice(pot:item, stove:item):
    body:
        # Ensure the pot is on the stove
        achieve on(pot, stove)
        # Turn the stove on to boil the rice
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        if not has_required_items(pot):
            # If the pot doesnt have rice and water, observe to find them
            observe(pot, "Check if rice and water are inside the pot")
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        boil_rice(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(pot_2093, cupboard_130)walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, Check if rice and water are inside the pot)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Find tray_142. Find pot_54. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(pot_2093, cupboard_130)
Failed to find pot_2093 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)exp(pot_2093, pot_54)walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, Check if rice and water are inside the pot)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Find food_butter_2018. Find dough_2021. Find food_onion_2026. Robot is inside dining_room_1. Robot is close oven_141. Robot is close pot_54. Robot is no longer close blender_2032.Robot is no longer close tea_bag_2017.Robot is no longer close cupboard_130.
##############################
From agent.py
open_executor(pot_54)
Robot is inside dining_room_1. Robot is close oven_141. Robot is close pot_54. 
##############################
From agent.py
exp(pot_2093, pot_54)
Failed to find pot_2093 around pot_54. 
##############################
From agent.py-> find a plan in act()
obs(pot_54, Check if rice and water are inside the pot)grab_executor(pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
obs(pot_54, Check if rice and water are inside the pot)
Get this information:  pot_54 is close to ceiling_33. pot_54 is close to wall_2. pot_54 is close to cupboard_130. pot_54 is close to kitchen_counter_132. pot_54 is close to sink_133. pot_54 is close to kitchen_counter_129. pot_54 is close to cupboard_131. pot_54 is close to wall_8. pot_54 is close to stovefan_139. pot_54 is close to oven_141. pot_54 is close to walllamp_46. pot_54 is close to tray_142. pot_54 is close to floor_16. pot_54 is close to knifeblock_52. pot_54 is close to floor_21. pot_54 is close to ceiling_28. pot_54 is close to character_219. pot_54 is on oven_141. pot_54 is inside dining_room_1. pot_54 is OPEN. pot_54 is CLEAN.
##############################
From agent.py
grab_executor(pot_54)
Robot is inside dining_room_1. Robot is close oven_141. Robot is close pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Find oil_2102. Find pot_2093. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close pot_54. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close oven_141.
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot is inside dining_room_1. Robot is close pot_54. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_54. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
Human Instruction: You need to ensure the pot contains both rice and water before boiling. Observe or add rice and water to pot_54, and then switch the stove on to complete the boiling process.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_2093 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: look for pot_2093 around pot_54.
Action 6: Observe around pot_54 with the question of Check if rice and water are inside the pot.
Action 7: Grab pot_54.
Action 8: Walk to stove_2090.
Action 9: Put pot_54 on stove_2090.
Action 10: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_sauce_2101_around_wallshelf_190(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(sauce,wallshelf_instance)
        else:
            exp(sauce,wallshelf_instance)
    eff:
        unknown[sauce]=False
        close[sauce,wallshelf_instance]=True
        close[wallshelf_instance,sauce]=True
    

behavior find_oil_2005_around_cupboard_131(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_rice_and_water_in_pot(pot:item):
    body:
        observe(pot, "Check if rice and water are inside the pot")
        # Observe if the pot contains rice and water

behavior boil_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place pot on the stove

        achieve is_on(stove)
        # Switch on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select pot with ID 54
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090
        
        ensure_rice_and_water_in_pot(pot)
        boil_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior ensure_rice_and_water_in_pot(pot:item):
    body:
        observe(pot, "Check if rice and water are inside the pot")
        # Observe if the pot contains rice and water

behavior boil_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place pot on the stove

        achieve is_on(stove)
        # Switch on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select pot with ID 54
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090
        
        ensure_rice_and_water_in_pot(pot)
        boil_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
obs(pot_54, Check if rice and water are inside the pot)
##############################
From agent.py
obs(pot_54, Check if rice and water are inside the pot)
Get this information:  pot_54 is close to character_219. pot_54 is close to stove_2090. pot_54 is on stove_2090. pot_54 is inside dining_room_1. pot_54 is OPEN. pot_54 is CLEAN.
##############################
From agent.py
Human Instruction: You need to ensure the pot contains both rice and water before boiling. Observe or add rice and water to pot_54, and then switch the stove on to complete the boiling process.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_2093 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: look for pot_2093 around pot_54.
Action 6: Observe around pot_54 with the question of Check if rice and water are inside the pot.
Action 7: Grab pot_54.
Action 8: Walk to stove_2090.
Action 9: Put pot_54 on stove_2090.
Action 10: Switch on stove_2090.
Action 11: Observe around pot_54 with the question of Check if rice and water are inside the pot.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_with_rice_and_water(pot:item):
    # Function to determine if the pot has both rice and water
    symbol has_ingredients=exists rice: item : (is_food_rice(rice) and inside(rice, pot)) and exists water: item : has_water(pot)
    return has_ingredients

behavior boil_rice_in_pot(pot:item, stove:item):
    body:
        if not is_pot_with_rice_and_water(pot):
            observe(pot, "Check if rice and water are inside the pot")
        
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        boil_rice_in_pot(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'water') at line 5905, column 102.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#goal_representation
 
def is_pot_with_rice_and_water(pot:item):
    # Function to determine if the pot has both rice and water
    symbol has_ingredients=exists rice: item : (is_food_rice(rice) and inside(rice, pot)) and has_water(pot)
    return has_ingredients

behavior boil_rice_in_pot(pot:item, stove:item):
    body:
        if not is_pot_with_rice_and_water(pot):
            observe(pot, "Check if rice and water are inside the pot")
        
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        boil_rice_in_pot(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_pot_with_rice_and_water(pot:item):
    # Function to determine if the pot has both rice and water
    symbol has_ingredients=exists rice: item : (is_food_rice(rice) and inside(rice, pot)) and has_water(pot)
    return has_ingredients

behavior boil_rice_in_pot(pot:item, stove:item):
    body:
        if not is_pot_with_rice_and_water(pot):
            observe(pot, "Check if rice and water are inside the pot")
        
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        boil_rice_in_pot(pot, stove)

##############################
From agent.py-> find a plan in act()
obs(pot_54, Check if rice and water are inside the pot)
##############################
From agent.py
obs(pot_54, Check if rice and water are inside the pot)
Get this information:  pot_54 is close to character_219. pot_54 is close to stove_2090. pot_54 is on stove_2090. pot_54 is inside dining_room_1. pot_54 is OPEN. pot_54 is CLEAN.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g1.txt
Checking k1
missed actions: walk_executor(pot_2093);grab_executor(pot_2093);walk_executor(faucet_134);switchoff_executor(faucet_134);walk_executor(pot_2093);open_executor(pot_2093);walk_executor(freezer_140);switchoff_executor(freezer_140);open_executor(freezer_140);walk_executor(food_rice_2067);grab_executor(food_rice_2067);walk_executor(pot_2093);putin_executor(food_rice_2067, pot_2093);walk_executor(stove_2090);put_executor(pot_2093, stove_2090);
missed action num: 15
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g1.txt
Checking k1
missed actions: walk_executor(pot_2093);grab_executor(pot_2093);walk_executor(faucet_134);switchoff_executor(faucet_134);walk_executor(pot_2093);open_executor(pot_2093);walk_executor(freezer_140);switchoff_executor(freezer_140);open_executor(freezer_140);walk_executor(food_rice_2067);grab_executor(food_rice_2067);walk_executor(pot_2093);putin_executor(food_rice_2067, pot_2093);walk_executor(stove_2090);put_executor(pot_2093, stove_2090);
missed action num: 15
##############################
