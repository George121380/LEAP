From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_cup_2063_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior insert_coffee_filter(filter:item, coffee_maker:item):
    body:
        achieve inside(filter, coffee_maker)

behavior add_water_to_coffee_maker(coffee_maker:item, water_source:item):
    body:
        bind container: item where:
            is_pot(container) and inside(container, coffee_maker)
        achieve close(container, water_source)
        achieve_once is_on(water_source)
        achieve has_water(container)
        achieve_once is_off(water_source)
        achieve inside(container, coffee_maker)

behavior start_brew(coffee_maker:item):
    body:
        achieve plugged(coffee_maker) 
        achieve is_on(coffee_maker)
        # Assumes coffee maker to be in a valid setup to brew

behavior pour_coffee(cup:item, coffee_maker:item):
    body:
        bind pot: item where:
            is_pot(pot) and inside(pot, coffee_maker)
        achieve_once inhand(pot)
        achieve has_water(cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        plug_in_coffee_maker(coffee_maker)
        turn_on_coffee_maker(coffee_maker)

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        insert_coffee_filter(coffee_filter, coffee_maker)
        
        bind water_source: item where:
            is_faucet(water_source)
        add_water_to_coffee_maker(coffee_maker, water_source)

        start_brew(coffee_maker)

        bind cup: item where:
            is_cup(cup)
        pour_coffee(cup, coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

behavior add_water_to_coffee_maker(coffee_maker:item, water_source:item):
    body:
        achieve close(coffee_maker, water_source)
        # Ensure the coffee maker is close to the water source to add water
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

behavior add_coffee_filter(coffee_maker:item, coffee_filter:item):
    body:
        achieve inside(coffee_filter, coffee_maker)
        # Place the coffee filter inside the coffee maker

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind water_source: item where:
            is_sink(water_source)
        # Select the sink as the water source

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        # Select a coffee filter

        plug_in_coffee_maker(coffee_maker)
        add_water_to_coffee_maker(coffee_maker, water_source)
        add_coffee_filter(coffee_maker, coffee_filter)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make a cup of coffee using the coffee maker." ?
Answer: Put a cup inside the coffee maker and turn it on.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        achieve on(cup, coffee_maker)
        # Place the cup in the coffee maker
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        prepare_coffee(cup, coffee_maker)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(cup_2063)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close cup_2063. Robot is close coffe_maker_290. 
##############################
