############################################################
When the sub-task is: Turn on the lights in the bedroom, then turn on the lights in the bathroom.
A successful representation:
 
behavior turn_on_light(room:item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room)
        achieve is_on(light)

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        bind bathroom: item where:
            is_bathroom(bathroom)
        turn_on_light(bedroom)
        turn_on_light(bathroom)

############################################################
When the sub-task is: 1. Find the basket that contains clothes.
A successful representation:
 
def has_clothes_in_basket(basket: item):
    # Check if there are clothes in the specified basket
    symbol has_clothes=exists o: item : is_clothes(o) and inside(o, basket)
    return has_clothes

behavior __goal__():
    body:
        if exists basket: item : is_basket_for_clothes(basket) and has_clothes_in_basket(basket):
            # Check if there is a basket with clothes based on the available information
            bind basket: item where:
                is_basket_for_clothes(basket) and has_clothes_in_basket(basket) 
            # Select a basket that has clothes in it
            achieve close_char(char, basket) 
            # Move the character closer to the basket with clothes

        else: 
           # If no basket with clothes is found, initiate exploration to locate one
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket, "Check if there are any clothes in the basket")
                    # Observe whether each basket has any clothes

############################################################
When the sub-task is: 2. Place all clothes from the basket into the washing machine and start the wash cycle.
A successful representation:
 
behavior place_clothes_in_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine) # Place clothes inside the washing machine

behavior start_wash_cycle(washing_machine:item):
    body:
        achieve closed(washing_machine) # Close the washing machine
        achieve is_on(washing_machine) # Start the washing cycle by turning on the washing machine

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket)
        
        bind clothes_pants: item where:
            is_clothes_pants(clothes_pants) and inside(clothes_pants, basket)
        
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and inside(clothes_shirt, basket)
        
        bind clothes_socks: item where:
            is_clothes_socks(clothes_socks) and inside(clothes_socks, basket)
        
        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt) and inside(clothes_skirt, basket)

        bind washing_machine: item where:
            is_washing_machine(washing_machine)

        place_clothes_in_washing_machine(clothes_pants, washing_machine)
        place_clothes_in_washing_machine(clothes_shirt, washing_machine)
        place_clothes_in_washing_machine(clothes_socks, washing_machine)
        place_clothes_in_washing_machine(clothes_skirt, washing_machine)
        
        start_wash_cycle(washing_machine)

############################################################
When the sub-task is: Get a cup of water.
A successful representation:
 
behavior position_cup_under_faucet(cup:item, faucet:item):
    body:
        achieve close(cup, faucet)
        # Position the cup directly under the faucet

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once is_on(faucet)
        # Turn the faucet on temporarily
        achieve has_water(cup)
        # Ensure the cup is filled with water
        achieve_once is_off(faucet)
        # Turn the faucet off once the cup is filled

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Select the cup with ID 2063
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet
        position_cup_under_faucet(cup, faucet)
        fill_cup_with_water(cup, faucet)

