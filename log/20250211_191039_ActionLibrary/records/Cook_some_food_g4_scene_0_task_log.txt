From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables in the pot.', '2. Store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables_in_pot(vegetable:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetable, pot)
        # Place the vegetable inside the pot
        achieve_once has_water(pot)
        # Ensure the pot has water in it
        achieve within(placing_pot, turned_on_stove)
        
behavior placing_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior turned_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove and keep it on to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
            # Select a pot
        bind stove: item where:
            is_stove(stove)
            # Select a stove
        bind vegetable: item where:
            is_food_vegetable(vegetable)
            # Select a vegetable to boil
        boil_vegetables_in_pot(vegetable, pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: placing_pot; available variables: [Variable<vegetable: item>, Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

#goal_representation
 
behavior boil_vegetables_in_pot(vegetable:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetable, pot)
        # Place the vegetable inside the pot
        achieve_once has_water(pot)
        # Ensure the pot has water in it
        achieve within(placing_pot(pot, stove), turned_on_stove(stove))

behavior placing_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

behavior turned_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove and keep it on to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
            # Select a pot
        bind stove: item where:
            is_stove(stove)
            # Select a stove
        bind vegetable: item where:
            is_food_vegetable(vegetable)
            # Select a vegetable to boil
        boil_vegetables_in_pot(vegetable, pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function placing_pot not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_pencil_2001_around_desk_104(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

#goal_representation

behavior boil_vegetables_in_pot(vegetable:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetable, pot)
        # Place the vegetable inside the pot
        achieve_once has_water(pot)
        # Ensure the pot has water in it
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove and keep it on to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
            # Select a pot
        bind stove: item where:
            is_stove(stove)
            # Select a stove
        bind vegetable: item where:
            is_food_vegetable(vegetable)
            # Select a vegetable to boil
        boil_vegetables_in_pot(vegetable, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior boil_vegetables_in_pot(vegetable:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetable, pot)
        # Place the vegetable inside the pot
        achieve_once has_water(pot)
        # Ensure the pot has water in it
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove and keep it on to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
            # Select a pot
        bind stove: item where:
            is_stove(stove)
            # Select a stove
        bind vegetable: item where:
            is_food_vegetable(vegetable)
            # Select a vegetable to boil
        boil_vegetables_in_pot(vegetable, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_vegetable_2041, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_vegetable_2041, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_vegetable_2041, fridge_289)
Find food_vegetable_2041. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_vegetable_2041, pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. food_vegetable_2041 is inside pot_2069. food_vegetable_2041 is close pot_2069. pot_2069 is close food_vegetable_2041. food_vegetable_2041 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot does not have water. Ensure to fill the pot with water before boiling the vegetables.
##############################
From agent.py
Human Instruction: The pot does not have water. Ensure to fill the pot with water before boiling the vegetables.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_vegetable_2041 around fridge_289.
Action 7: Walk to pot_2069.
Action 8: Open pot_2069.
Action 9: Walk to food_vegetable_2041.
Action 10: Grab food_vegetable_2041.
Action 11: Walk to pot_2069.
Action 12: Put food_vegetable_2041 into pot_2069.
Action 13: Grab pot_2069.
Action 14: Walk to faucet_43.
Action 15: Switch on faucet_43.
Action 16: Switch off faucet_43.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2062_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_clothes_hat_2045_around_basket_for_clothes_2006(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_pot_has_water(pot:item, faucet:item):
    # This behavior ensures the pot has water inside
    if not has_water(pot):
        achieve_once on(pot, faucet)
        achieve has_water(pot)
        achieve_once unplugged(pot)

behavior boil_vegetables(pot:item, stove:item, food_vegetable:item):
    # Boil the vegetables in the pot on the stove
    body:
        achieve_once inside(food_vegetable, pot)
        achieve_once on(pot, stove)
        ensure_pot_has_water(pot, faucet_43)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Selecting the pot
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)
        # Selecting the vegetables
        bind stove: item where:
            is_stove(stove)
        # Selecting the stove
        
        boil_vegetables(pot, stove, food_vegetable)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#goal_representation
 
def has_water(pot:item):
    # Checks if the pot contains water 
    return exists x: item : (close(x, pot) and has_water(pot))

behavior ensure_pot_has_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            achieve_once inside(pot, faucet)
            achieve has_water(pot)

behavior boil_vegetables(pot:item, stove:item, food_vegetable:item):
    body:
        achieve_once inside(food_vegetable, pot)
        achieve_once on(pot, stove)
        ensure_pot_has_water(pot, faucet_43)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)
        bind stove: item where:
            is_stove(stove)
        
        boil_vegetables(pot, stove, food_vegetable)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: faucet_43; available variables: [Variable<pot: item>, Variable<stove: item>, Variable<food_vegetable: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_388(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

behavior find_bowl_2071_around_table_355(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation
 
def has_water(pot:item):
    # Checks if the pot contains water 
    return exists x: item : (close(x, pot) and has_water(pot))

behavior ensure_pot_has_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            achieve_once inside(pot, faucet)
            achieve has_water(pot)

behavior boil_vegetables(pot:item, stove:item, food_vegetable:item, faucet:item):
    body:
        achieve_once inside(food_vegetable, pot)
        achieve_once on(pot, stove)
        ensure_pot_has_water(pot, faucet)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        
        boil_vegetables(pot, stove, food_vegetable, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_headset_2062_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve_once inside(vegetables, pot)
        # Vegetables should be inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve_once is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        fill_pot_with_water(pot, faucet)
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
def has_water(obj: item):
    # Function to check if an object has water in it
    symbol has_water_state = has_water(obj)
    return has_water_state

behavior boil_vegetables(pot: item, stove: item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot has water
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn the stove on to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not has_water(pot):  # Ensure the pot has water before boiling
            bind faucet: item where:
                is_faucet(faucet)
            # Assume water source is a faucet
            achieve_once has_water(pot)
            # Fill the pot with water

        boil_vegetables(pot, stove)
        # Execute the boiling behavior

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. boil the vegetables in the pot." ?
Answer: Wash vegetables. Fill a pot with water. Put the pot on the stove. Turn on the stove. Put the vegetables inside the pot. Then turn off the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_vacuum_cleaner_2070_around_washing_machine_2007(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables:item):
    body:
        achieve clean(vegetables) # Wash the vegetables to make them clean

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot) # Achieve filling the pot with water

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve on(pot, stove) # Place pot on the stove
        achieve is_on(stove) # Turn on the stove to start boiling
        achieve_once inside(vegetables, pot) # Place vegetables inside the pot
        achieve clean(vegetables) # Ensure the vegetables are clean before boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to be boiled
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling

        wash_vegetables(vegetables) # First wash the vegetables
        fill_pot_with_water(pot, faucet) # Fill pot with water
        boil_vegetables(pot, stove, vegetables) # Boil the vegetables in the pot

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_vegetables(vegetables:item):
    body:
        achieve clean(vegetables) # Wash the vegetables to make them clean

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot) # Achieve filling the pot with water

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve on(pot, stove) # Place pot on the stove
        achieve is_on(stove) # Turn on the stove to start boiling
        achieve_once inside(vegetables, pot) # Place vegetables inside the pot
        achieve clean(vegetables) # Ensure the vegetables are clean before boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to be boiled
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for water

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling

        wash_vegetables(vegetables) # First wash the vegetables
        fill_pot_with_water(pot, faucet) # Fill pot with water
        boil_vegetables(pot, stove, vegetables) # Boil the vegetables in the pot

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the pot_2069. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the pot_2069. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_vegetable_2041 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the stove_2065. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_vegetable_2041, pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the stove_2065. Robot is close to the pot_2069. food_vegetable_2041 is inside pot_2069. food_vegetable_2041 is close pot_2069. pot_2069 is close food_vegetable_2041. food_vegetable_2041 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before placing it on the stove to boil the vegetables. Ensure that the vegetables are inside the pot filled with water and the stove is turned on. Then, confirm that the boiling process has begun.
##############################
From agent.py
Human Instruction: You need to fill the pot with water before placing it on the stove to boil the vegetables. Ensure that the vegetables are inside the pot filled with water and the stove is turned on. Then, confirm that the boiling process has begun.

Human Guidance: Wash vegetables. Fill a pot with water. Put the pot on the stove. Turn on the stove. Put the vegetables inside the pot. Then turn off the stove.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_vegetable_2041 around fridge_289.
Action 7: Walk to pot_2069.
Action 8: Open pot_2069.
Action 9: Walk to food_vegetable_2041.
Action 10: Grab food_vegetable_2041.
Action 11: Walk to pot_2069.
Action 12: Put food_vegetable_2041 into pot_2069.
Action 13: Grab pot_2069.
Action 14: Walk to faucet_43.
Action 15: Switch on faucet_43.
Action 16: Switch off faucet_43.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to food_vegetable_2041.
Action 21: Grab food_vegetable_2041.
Action 22: Walk to faucet_43.
Action 23: Switch on faucet_43.
Action 24: Wash food_vegetable_2041.
Action 25: Switch off faucet_43.
Action 26: Walk to pot_2069.
Action 27: Put food_vegetable_2041 into pot_2069.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_388(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
def has_vegetables_in_pot(pot:item):
    # Function to check if there are vegetables in the specified pot
    symbol has_vegetables= exists o: item : (is_food_vegetable(o) and inside(o, pot))
    return has_vegetables

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve inside_char(char, stove)
        achieve on(pot, stove)
        achieve is_on(stove)
        # Ensure the pot of vegetables is on the stove and the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot to use

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        if not has_vegetables_in_pot(pot):
            foreach vegetable: item:
                if is_food_vegetable(vegetable) and inside(vegetable, fridge_289):
                    achieve_once inhand(vegetable)
                    achieve_once inside(vegetable, pot)
            # Place all found vegetables from the fridge into the pot

        achieve has_water(pot)
        # Fill the pot with water

        boil_vegetables(pot, stove)
        # Boil the vegetables using the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fridge_289; available variables: [Variable<vegetable: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_clothes_hat_2045_around_basket_for_clothes_2006(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

#goal_representation
 
def has_vegetables_in_pot(pot:item):
    # Function to check if there are vegetables in the specified pot
    symbol has_vegetables= exists o: item : (is_food_vegetable(o) and inside(o, pot))
    return has_vegetables

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve inside_char(char, stove)
        achieve on(pot, stove)
        achieve is_on(stove)
        # Ensure the pot of vegetables is on the stove and the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot to use

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        if not has_vegetables_in_pot(pot):
            foreach vegetable: item:
                if is_food_vegetable(vegetable) and inside(vegetable, fridge):
                    achieve_once inhand(vegetable)
                    achieve_once inside(vegetable, pot)
            # Place all found vegetables from the fridge into the pot

        achieve has_water(pot)
        # Fill the pot with water

        boil_vegetables(pot, stove)
        # Boil the vegetables using the stove

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2062_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_pot(pot:item):
    # Checks if the pot has water
    symbol has_water= exists o: item : (is_pot(o) and has_water(o) and id[o] == id[pot])
    return has_water

def vegetables_are_boiling(pot:item):
    # Check if vegetables are boiling in the pot
    symbol is_boiling= exists o: item : (is_food_vegetable(o) and inside(o, pot) and is_on(id[pot]))
    return is_boiling

behavior fill_pot_with_water(pot:item, faucet:item):
    # Fill the pot with water from a faucet
    body:
        achieve_once has_water(pot)

behavior start_boiling_vegetables(pot:item, stove:item):
    # Place the pot on the stove and turn it on to boil the vegetables
    body:
        achieve inside(food_vegetable_2041, pot)
        achieve has_water(pot)
        achieve is_on(stove)
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)

        if has_water_pot(pot):
            bind stove: item where:
                is_stove(stove)
            
            start_boiling_vegetables(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Error during applying is_on[observation, state](x: item).
  Arguments: id(V::pot)
Argument #0 type does not match: expect item, got int64.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#goal_representation
 
def has_water_pot(pot:item):
    # Checks if the pot has water
    symbol has_water= exists o: item : (is_pot(o) and has_water(o) and id[o] == id[pot])
    return has_water

def vegetables_are_boiling(pot:item):
    # Check if vegetables are boiling in the pot
    symbol is_boiling= exists o: item : (is_food_vegetable(o) and inside(o, pot) and is_on(pot))
    return is_boiling

behavior fill_pot_with_water(pot:item, faucet:item):
    # Fill the pot with water from a faucet
    body:
        achieve_once has_water(pot)

behavior start_boiling_vegetables(pot:item, stove:item):
    # Place the pot on the stove and turn it on to boil the vegetables
    body:
        achieve inside(food_vegetable_2041, pot)
        achieve has_water(pot)
        achieve is_on(stove)
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)

        if has_water_pot(pot):
            bind stove: item where:
                is_stove(stove)
            
            start_boiling_vegetables(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_vegetable_2041; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_headset_2062_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#goal_representation
 
def has_water_pot(pot:item):
    # Checks if the pot has water
    symbol has_water= exists o: item : (is_pot(o) and has_water(o) and id[o] == id[pot])
    return has_water

def vegetables_are_boiling(pot:item):
    # Check if vegetables are boiling in the pot
    symbol is_boiling= exists o: item : (is_food_vegetable(o) and inside(o, pot) and is_on(pot))
    return is_boiling

behavior fill_pot_with_water(pot:item, faucet:item):
    # Fill the pot with water from a faucet
    body:
        achieve_once has_water(pot)

behavior start_boiling_vegetables(pot:item, stove:item, vegetable:item):
    # Place the pot on the stove and turn it on to boil the vegetables
    body:
        achieve inside(vegetable, pot)
        achieve has_water(pot)
        achieve is_on(stove)
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind vegetable: item where:
            is_food_vegetable(vegetable)

        fill_pot_with_water(pot, faucet)

        if has_water_pot(pot):
            bind stove: item where:
                is_stove(stove)
            
            start_boiling_vegetables(pot, stove, vegetable)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_388(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if the pot contains water
    symbol water_in_pot=has_water(pot)
    return water_in_pot

behavior prepare_vegetables(pot:item, vegetables:item):
    body:
        # Ensure the pot is filled with water first
        if not has_water_in_pot(pot):
            achieve has_water(pot) 

        # Place vegetables in the waterfilled pot
        achieve_once inside(vegetables, pot) 

behavior start_boiling(pot:item, stove:item):
    body:
        # Ensure the pot is on the stove
        achieve_once on(pot, stove)

        # Ensure the stove is turned on
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot in the scene

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        prepare_vegetables(pot, vegetables)
        start_boiling(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. boil the vegetables in the pot." ?
Answer: Wash vegetables. Fill a pot with water. Put the pot on the stove. Turn on the stove. Put the vegetables inside the pot. Then turn off the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(pot: item, stove: item, faucet: item, vegetables: item):
    body:
        achieve_once has_water(pot) # Fill the pot with water
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve inside(vegetables, pot) # Ensure vegetables are inside the pot
        achieve is_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        boil_vegetables(pot, stove, faucet, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables_in_pot(pot: item, vegetables: item, stove: item, faucet: item):
    body:
        achieve has_water(pot) # Fill the pot with water
        achieve inside(vegetables, pot) # Vegetables should be inside the pot
        achieve on(pot, stove) # Pot should be on the stove
        achieve is_on(stove) # The stove needs to be on to boil the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        boil_vegetables_in_pot(pot, vegetables, stove, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        observe(faucet, "Check if faucet is lookable and has a free hand") # Ensure faucet is available to use
        achieve_once has_water(pot) # Fill the pot with water

behavior wash_vegetables(vegetables:item, faucet:item):
    body:
        achieve_once clean(vegetables) # Wash the vegetables

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind faucet: item where:
            is_faucet(faucet)
        fill_pot_with_water(pot, faucet)
        wash_vegetables(vegetables, faucet)
        boil_vegetables(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_on not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_headset_2076_around_home_office_319(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(headset,home_office_instance)
        else:
            exp(headset,home_office_instance)
    eff:
        unknown[headset]=False
        close[headset,home_office_instance]=True
        close[home_office_instance,headset]=True
    

behavior find_clothes_scarf_2048_around_basket_for_clothes_2006(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        observe(faucet, "Check if faucet is lookable and has a free hand")
        achieve_once has_water(pot)

behavior wash_vegetables(vegetables:item, faucet:item):
    body:
        achieve_once clean(vegetables)

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind faucet: item where:
            is_faucet(faucet)
        fill_pot_with_water(pot, faucet)
        wash_vegetables(vegetables, faucet)
        boil_vegetables(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        observe(faucet, "Check if faucet is lookable and has a free hand")
        achieve_once has_water(pot)

behavior wash_vegetables(vegetables:item, faucet:item):
    body:
        achieve_once clean(vegetables)

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind faucet: item where:
            is_faucet(faucet)
        fill_pot_with_water(pot, faucet)
        wash_vegetables(vegetables, faucet)
        boil_vegetables(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)obs(faucet_43, Check if faucet is lookable and has a free hand)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
obs(faucet_43, Check if faucet is lookable and has a free hand)
Get this information:  faucet_43 is close to floor_2. faucet_43 is close to floor_3. faucet_43 is close to floor_4. faucet_43 is close to bathroom_cabinet_40. faucet_43 is close to bathroom_counter_41. faucet_43 is close to sink_42. faucet_43 is close to wall_9. faucet_43 is close to wall_12. faucet_43 is close to ceiling_16. faucet_43 is close to ceiling_21. faucet_43 is close to basket_for_clothes_2006. faucet_43 is close to character_65. faucet_43 is on bathroom_counter_41. faucet_43 is inside bathroom_1. faucet_43 is CLEAN. faucet_43 is OFF.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the pot is filled with water before placing it on the stove. The pot was neither filled with water before the vegetables were initially added nor after the vegetables were washed and added again. Fill the pot with water from the faucet to allow the boiling process to commence with vegetables inside.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_table_355(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the pot inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Close the fridge door

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with ID 289

        store_pot_in_fridge(pot, fridge)
        # Store the pot in the fridge

        close_the_fridge_door(fridge)
        # Ensure the fridge door is closed

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve_once inside(pot, fridge)
        # Store the pot inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve_once closed(fridge)
        # Close the fridge door

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with ID 289

        store_pot_in_fridge(pot, fridge)
        # Store the pot in the fridge

        close_the_fridge_door(fridge)
        # Ensure the fridge door is closed

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(fridge_289)putin_executor(pot_2069, fridge_289)close_executor(fridge_289)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the stove_2065. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the pot_2069. Robot is close to the stove_2065. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
putin_executor(pot_2069, fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. pot_2069 is inside fridge_289. pot_2069 is close fridge_289. fridge_289 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
close_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is closed. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some vegetables with pot. Then store the whole pot in the fridge.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(pot_2069)', 'putin_executor(food_vegetable_2041, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_vegetable_2041)', 'switchoff_executor(faucet_43)', 'walk_executor(pot_2069)', 'putin_executor(food_vegetable_2041, pot_2069)', 'walk_executor(faucet_43)', 'walk_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(fridge_289)', 'putin_executor(pot_2069, fridge_289)', 'close_executor(fridge_289)']
Time info:
Time consume: 519 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 23
goal generate times: 12
goal correct times: 3
action_num: 31

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 10 steps
Keystate: k3 - Requires: 2 steps
Action Completion Rate: 1.0
Scene_id: 0
##############################
