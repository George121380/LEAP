From agent.py
Reset goals: The sub-goals are: 
['1. Find the pizza and hamburger.', '2. Put the pizza and hamburger on a plate.', '3. Heat them in the microwave.', '4. Put the plate on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2024_around_table_355(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_hamburger,table_instance)
        else:
            exp(food_hamburger,table_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,table_instance]=True
        close[table_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_pizza_hamburger(pizza:item, hamburger:item):
    body:
        achieve_once visited(pizza)
        # Mark the pizza as visited
        achieve_once visited(hamburger)
        # Mark the hamburger as visited

behavior __goal__():
    body:
        if exists fridge: item : (is_fridge(fridge) and achieve close_char(char, fridge)):
            # Find the fridge close to the character and prepare to check inside it
            bind pizza: item where:
                is_food_pizza(pizza) and inside(pizza, fridge)
            # Bind the pizza found inside the fridge
            bind hamburger: item where:
                is_food_hamburger(hamburger) and inside(hamburger, fridge)
            # Bind the hamburger found inside the fridge
            find_pizza_hamburger(pizza, hamburger)
        else:
            # Explore and check other rooms or places for pizza and hamburger if not found in the fridge
            foreach location: item:
                if not visited(location):
                    observe(location, "Searching for pizza and hamburger")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'close_char') at line 5677, column 65.
Expected one of: 
	* RPAR
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_hamburger_2024_around_oven_295(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_hamburger,oven_instance)
        else:
            exp(food_hamburger,oven_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,oven_instance]=True
        close[oven_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

#goal_representation
behavior find_pizza_hamburger(pizza:item, hamburger:item):
    body:
        achieve_once visited(pizza)
        # Mark the pizza as visited
        achieve_once visited(hamburger)
        # Mark the hamburger as visited

behavior __goal__():
    body:
        if exists fridge: item : (is_fridge(fridge) and close_char(char, fridge)):
            # Find the fridge close to the character
            bind pizza: item where:
                is_food_pizza(pizza) and inside(pizza, fridge)
            # Bind the pizza found inside the fridge
            bind hamburger: item where:
                is_food_hamburger(hamburger) and inside(hamburger, fridge)
            # Bind the hamburger found inside the fridge
            find_pizza_hamburger(pizza, hamburger)
        else:
            # Explore and check other rooms or places for pizza and hamburger if not found in the fridge
            foreach location: item:
                if not visited(location):
                    observe(location, "Searching for pizza and hamburger")
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fridge; available variables: [Variable<pizza: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_hamburger_2024_around_table_355(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_hamburger,table_instance)
        else:
            exp(food_hamburger,table_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,table_instance]=True
        close[table_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

#goal_representation
 
behavior find_pizza_hamburger(pizza:item, hamburger:item):
    body:
        achieve_once visited(pizza)
        achieve_once visited(hamburger)

behavior __goal__():
    body:
        if exists fridge: item : (is_fridge(fridge) and close_char(char, fridge)):
            bind pizza: item where:
                is_food_pizza(pizza) and inside(pizza, fridge)
            bind hamburger: item where:
                is_food_hamburger(hamburger) and inside(hamburger, fridge)
            find_pizza_hamburger(pizza, hamburger)
        else:
            foreach location: item:
                if not visited(location):
                    observe(location, "Searching for pizza and hamburger")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2024_around_oven_295(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_hamburger,oven_instance)
        else:
            exp(food_hamburger,oven_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,oven_instance]=True
        close[oven_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
behavior find_food(item_type: str):
    # A behavior to find an item of a specified type
    body:
        if exists item: item: (item_type(item)):
            bind item: item where:
                item_type(item)
            achieve close_char(char, item)
        else:
            foreach item: item:
                if item_type(item) and not visited(item):
                    observe(item, "fCheck if this is item_type")

behavior __goal__():
    body:
        find_food(is_food_pizza)
        find_food(is_food_hamburger)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "typed_argument":

Unknown type: str, known types are: ['item', 'character', 'id'].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_hamburger_2024_around_oven_295(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_hamburger,oven_instance)
        else:
            exp(food_hamburger,oven_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,oven_instance]=True
        close[oven_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

#goal_representation

behavior find_food(item_type: property):
    # A behavior to find an item of a specified type
    body:
        if exists item: item: (item_type(item)):
            bind item: item where:
                item_type(item)
            achieve close_char(char, item)
        else:
            foreach item: item:
                if item_type(item) and not visited(item):
                    observe(item, "Check if this is item_type")

behavior __goal__():
    body:
        find_food(is_food_pizza)
        find_food(is_food_hamburger)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "typed_argument":

Unknown type: property, known types are: ['item', 'character', 'id'].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_hamburger_2024_around_coffee_table_2068(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(food_hamburger,coffee_table_instance)
        else:
            exp(food_hamburger,coffee_table_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,coffee_table_instance]=True
        close[coffee_table_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

#goal_representation
 
behavior find_food(item_type: item):
    # A behavior to find an item of a specified type
    body:
        if exists item: item: (item_type(item)):
            bind item: item where:
                item_type(item)
            achieve close_char(char, item)
        else:
            foreach item: item:
                if item_type(item) and not visited(item):
                    observe(item, "Check if this is item_type")

behavior __goal__():
    body:
        find_food(is_food_pizza)
        find_food(is_food_hamburger)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2024_around_oven_295(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_hamburger,oven_instance)
        else:
            exp(food_hamburger,oven_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,oven_instance]=True
        close[oven_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
behavior find_food(food:item):
    body:
        achieve_once visited(food)
        # Mark the specified food item as visited to acknowledge its successful identification

behavior __goal__():
    body:
        bind food_hamburger: item where:
            is_food_hamburger(food_hamburger)
        # Select the hamburger as the food item
        
        bind food_pizza: item where:
            is_food_pizza(food_pizza)
        # Select the pizza as the food item
        
        find_food(food_hamburger) 
        find_food(food_pizza)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_food(food:item):
    body:
        achieve_once visited(food)
        # Mark the specified food item as visited to acknowledge its successful identification

behavior __goal__():
    body:
        bind food_hamburger: item where:
            is_food_hamburger(food_hamburger)
        # Select the hamburger as the food item
        
        bind food_pizza: item where:
            is_food_pizza(food_pizza)
        # Select the pizza as the food item
        
        find_food(food_hamburger) 
        find_food(food_pizza)
##############################
From agent.py-> find a plan in act()
walk_executor(oven_295)open_executor(oven_295)exp(food_hamburger_2024, oven_295)walk_executor(food_hamburger_2024)obs(food_hamburger_2024, look around this place)walk_executor(oven_295)exp(food_pizza_2034, oven_295)walk_executor(food_pizza_2034)obs(food_pizza_2034, look around this place)
##############################
From agent.py
walk_executor(oven_295)
Robot find: drawing_240, drawing_238, drawing_239, Robot is close to the oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py
exp(food_hamburger_2024, oven_295)
Fail to find food_hamburger_2024 around oven_295. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_hamburger_2024, fridge_289)walk_executor(food_hamburger_2024)obs(food_hamburger_2024, look around this place)walk_executor(fridge_289)exp(food_pizza_2034, fridge_289)walk_executor(food_pizza_2034)obs(food_pizza_2034, look around this place)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_hamburger_2024, fridge_289)
Find food_hamburger_2024. 
##############################
From agent.py-> find a plan in act()
obs(food_hamburger_2024, look around this place)obs(food_pizza_2034, look around this place)
##############################
From agent.py
obs(food_hamburger_2024, look around this place)
Get this information:  food_hamburger_2024 is inside fridge_289. food_hamburger_2024 is inside dining_room_201. food_hamburger_2024 is close to fridge_289. food_hamburger_2024 is close to character_65. food_hamburger_2024 is CLEAN.
##############################
From agent.py
obs(food_pizza_2034, look around this place)
Get this information:  food_pizza_2034 is inside fridge_289. food_pizza_2034 is inside dining_room_201. food_pizza_2034 is close to fridge_289. food_pizza_2034 is close to character_65. food_pizza_2034 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_plate_1000_around_table_355(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_food_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate)

behavior __goal__():
    body:
        bind food_hamburger: item where:
            is_food_hamburger(food_hamburger)
        # Select hamburger
        
        bind food_pizza: item where:
            is_food_pizza(food_pizza)
        # Select pizza

        bind plate: item where:
            is_plate(plate)
        # Select a plate for the food

        put_food_on_plate(food_hamburger, plate)
        put_food_on_plate(food_pizza, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_food_on_plate(food:item, plate:item):
    body:
        achieve_once on(food, plate)

behavior __goal__():
    body:
        bind food_hamburger: item where:
            is_food_hamburger(food_hamburger)
        # Select hamburger
        
        bind food_pizza: item where:
            is_food_pizza(food_pizza)
        # Select pizza

        bind plate: item where:
            is_plate(plate)
        # Select a plate for the food

        put_food_on_plate(food_hamburger, plate)
        put_food_on_plate(food_pizza, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(table_355)exp(plate_1000, table_355)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)
##############################
From agent.py
walk_executor(table_355)
Robot find: mat_401, headset_2062, spectacles_2082, pillow_406, remote_control_2052, clothes_jacket_2047, pillow_405, cat_2055, drawing_400, drawing_404, hairbrush_2002, vacuum_cleaner_2070, Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
exp(plate_1000, table_355)
Fail to find plate_1000 around table_355. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(plate_1000, kitchen_counter_230)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(plate_1000, kitchen_counter_230)
Fail to find plate_1000 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_107)exp(plate_1000, table_107)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)
##############################
From agent.py
walk_executor(table_107)
Robot find: mat_173, clothes_hat_2045, clothes_gloves_2046, drawing_176, drawing_174, drawing_175, Robot is close to the table_107. 
##############################
From agent.py
exp(plate_1000, table_107)
Fail to find plate_1000 around table_107. 
##############################
From agent.py-> find a plan in act()
walk_executor(microwave_297)open_executor(microwave_297)exp(plate_1000, microwave_297)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is opened. 
##############################
From agent.py
exp(plate_1000, microwave_297)
Fail to find plate_1000 around microwave_297. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: The target item, plate_1000, is located inside dining_room_201. You can find plate_1000 on top of sink_231. Look for sink_231 in the dining room, and the plate will be positioned directly on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, plate_1000, is located inside dining_room_201. You can find plate_1000 on top of sink_231. Look for sink_231 in the dining room, and the plate will be positioned directly on it.

The actions you have taken:
Action 1: Walk to oven_295.
Action 2: Open oven_295.
Action 3: look for food_hamburger_2024 around oven_295.
Action 4: Walk to fridge_289.
Action 5: Switch off fridge_289.
Action 6: Open fridge_289.
Action 7: look for food_hamburger_2024 around fridge_289.
Action 8: Observe around food_hamburger_2024 with the question of look around this place.
Action 9: Observe around food_pizza_2034 with the question of look around this place.
Action 10: Walk to table_355.
Action 11: look for plate_1000 around table_355.
Action 12: Walk to kitchen_counter_230.
Action 13: look for plate_1000 around kitchen_counter_230.
Action 14: Walk to table_107.
Action 15: look for plate_1000 around table_107.
Action 16: Walk to microwave_297.
Action 17: Open microwave_297.
Action 18: look for plate_1000 around microwave_297.
Action 19: Walk to dishwasher_1001.
Action 20: Open dishwasher_1001.

##############################
From agent.py
exp(plate_1000, dishwasher_1001)
Fail to find plate_1000 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Robot find: soap_2054, plate_1000, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_hamburger_2024)grab_executor(food_hamburger_2024)walk_executor(plate_1000)put_executor(food_hamburger_2024, plate_1000)walk_executor(food_pizza_2034)grab_executor(food_pizza_2034)walk_executor(plate_1000)put_executor(food_pizza_2034, plate_1000)
##############################
From agent.py
walk_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_hamburger_2024)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the fridge_289. Grabbing food_hamburger_2024 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_hamburger_2024, plate_1000)
Robot find: Robot is close to the food_hamburger_2024. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_hamburger_2024. food_hamburger_2024 is close plate_1000. food_hamburger_2024 is on plate_1000. food_hamburger_2024 released by right hand. 
##############################
From agent.py
walk_executor(food_pizza_2034)
Robot find: Robot is close to the fridge_289. Robot is close to the food_pizza_2034. 
##############################
From agent.py
grab_executor(food_pizza_2034)
Robot find: Robot is close to the fridge_289. Robot is close to the food_pizza_2034. Grabbing food_pizza_2034 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
put_executor(food_pizza_2034, plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the plate_1000. Robot is close to the sink_231. plate_1000 is close food_pizza_2034. food_pizza_2034 is close plate_1000. food_pizza_2034 is on plate_1000. food_pizza_2034 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffe_maker_290(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(bowl,coffe_maker_instance)
        else:
            exp(bowl,coffe_maker_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffe_maker_instance]=True
        close[coffe_maker_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior load_plate_into_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate inside the microwave

behavior start_heating(microwave:item):
    body:
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave) and open(microwave)
        # Select the microwave that is already open

        bind plate: item where:
            on(food_hamburger_2024, plate) and on(food_pizza_2034, plate)
        # Select the plate with the hamburger and pizza

        load_plate_into_microwave(plate, microwave)
        start_heating(microwave)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_hamburger_2024; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_bowl_2072_around_bookshelf_233(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bowl,bookshelf_instance)
        else:
            exp(bowl,bookshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bookshelf_instance]=True
        close[bookshelf_instance,bowl]=True
    

#goal_representation
 
behavior load_plate_into_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)

behavior start_heating(microwave:item):
    body:
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave) and open(microwave)

        bind plate: item where:
            exists item: item: (is_food_hamburger(item) and on(item, plate)) and
            exists item: item: (is_food_pizza(item) and on(item, plate))

        load_plate_into_microwave(plate, microwave)
        start_heating(microwave)


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n            ') at line 5942, column 81.
Expected one of: 
	* HEX_NUMBER
	* FLOAT_NUMBER
	* IMAG_NUMBER
	* VARNAME
	* PLUS
	* TILDE
	* NOT
	* OCT_NUMBER
	* BIN_NUMBER
	* ELLIPSIS
	* TRUE
	* NONE
	* LPAR
	* FALSE
	* MINUS
	* COLON
	* LONG_STRING
	* DEC_NUMBER
	* STRING
	* DO
	* LSQB

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_stove_2065(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(bowl,stove_instance)
        else:
            exp(bowl,stove_instance)
    eff:
        unknown[bowl]=False
        close[bowl,stove_instance]=True
        close[stove_instance,bowl]=True
    

#goal_representation
 
behavior load_plate_into_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)

behavior start_heating(microwave:item):
    body:
        achieve_once closed(microwave)
        achieve_once is_on(microwave)

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave) and open(microwave)

        bind plate: item where:
            exists hamburger: item: (is_food_hamburger(hamburger) and on(hamburger, plate)) and
            exists pizza: item: (is_food_pizza(pizza) and on(pizza, plate))

        load_plate_into_microwave(plate, microwave)
        start_heating(microwave)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_stove_2065(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(bowl,stove_instance)
        else:
            exp(bowl,stove_instance)
    eff:
        unknown[bowl]=False
        close[bowl,stove_instance]=True
        close[stove_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_in_microwave(plate: item, microwave: item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate with food inside the microwave
        achieve_once closed(microwave)
        # Close the microwave to start heating
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the pizza and hamburger

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_hamburger_2024, plate) and on(food_pizza_2034, plate)
        # Select the plate with pizza and hamburger on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(plate, microwave)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_hamburger_2024; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior heat_in_microwave(plate: item, microwave: item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate with food inside the microwave
        achieve_once closed(microwave)
        # Close the microwave to start heating
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the pizza and hamburger

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_hamburger: item, plate) and on(food_pizza: item, plate)
        # Select the plate with pizza and hamburger on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        heat_in_microwave(plate, microwave)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5903, column 50.
Expected one of: 
	* COMMA
	* RPAR
	* EQUAL

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior heat_in_microwave(plate: item, microwave: item):
    body:
        achieve_once inside(plate, microwave) # Place the plate with food inside the microwave
        achieve_once closed(microwave) # Close the microwave to start heating
        achieve_once is_on(microwave) # Turn on the microwave to heat the pizza and hamburger

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_hamburger: item, plate) and on(food_pizza: item, plate)

        bind microwave: item where:
            is_microwave(microwave)

        heat_in_microwave(plate, microwave)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_bookshelf_233(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(bowl,bookshelf_instance)
        else:
            exp(bowl,bookshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bookshelf_instance]=True
        close[bookshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave) # Put the plate with food inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_hamburger_2024, plate) and on(food_pizza_2034, plate)
        # Select the plate with burger and pizza on it
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave to heat the plate of food
        
        heat_in_microwave(plate, microwave)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_hamburger_2024; available variables: [Variable<plate: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave) # Put the plate with food inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and exists o: item : (on(o, plate) and (is_food_hamburger(o) or is_food_pizza(o)))
        # Select the plate with burger and pizza on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave to heat the plate of food

        heat_in_microwave(plate, microwave)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5900, column 40.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_faucet_232(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==232
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(bowl,faucet_instance)
        else:
            exp(bowl,faucet_instance)
    eff:
        unknown[bowl]=False
        close[bowl,faucet_instance]=True
        close[faucet_instance,bowl]=True
    

#goal_representation
 
behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave) # Put the plate with food inside the microwave
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and exists o: item : (on(o, plate) and (is_food_hamburger(o) or is_food_pizza(o)))
        # Select the plate with burger and pizza on it

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave to heat the plate of food

        heat_in_microwave(plate, microwave)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. heat them in the microwave." ?
Answer: Put the pizza and hamburger on a plate. Then, put the plate in the microwave. Turn on the microwave.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior open_microwave_and_place_plate():
    body:
        bind microwave: item where:
            is_microwave(microwave)
        achieve_once open(microwave) # Open the microwave

behavior load_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave) # Put the plate with food inside the microwave

behavior start_microwave(microwave:item):
    body:
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave to start heating

behavior __goal__():
    body:
        bind plate: item where:
            id[plate] == 1000 # We know the target plate ID
        # Ensure the microwave is open before heating
        open_microwave_and_place_plate()

        bind microwave: item where:
            is_microwave(microwave)
        load_microwave(plate, microwave)
        start_microwave(microwave)


#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior open_microwave_and_place_plate():
    body:
        bind microwave: item where:
            is_microwave(microwave)
        achieve_once open(microwave) # Open the microwave

behavior load_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave) # Put the plate with food inside the microwave

behavior start_microwave(microwave:item):
    body:
        achieve_once closed(microwave) # Close the microwave door
        achieve_once is_on(microwave) # Turn on the microwave to start heating

behavior __goal__():
    body:
        bind plate: item where:
            id[plate] == 1000 # We know the target plate ID
        # Ensure the microwave is open before heating
        open_microwave_and_place_plate()

        bind microwave: item where:
            is_microwave(microwave)
        load_microwave(plate, microwave)
        start_microwave(microwave)


##############################
From agent.py-> find a plan in act()
grab_executor(plate_1000)walk_executor(microwave_297)putin_executor(plate_1000, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the food_pizza_2034. Robot is close to the plate_1000. Robot is close to the sink_231. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(plate_1000, microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is close plate_1000. plate_1000 is inside microwave_297. plate_1000 is close microwave_297. plate_1000 released by right hand. 
##############################
From agent.py
close_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is closed. 
##############################
From agent.py
switchon_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_table(plate: item, table: item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, dining_room_201)
        # Select a table inside the dining room
        
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with ID 1000 which has pizza and hamburger on it

        put_on_table(plate, table)
        # Place the plate on the selected table in the dining room

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room_201; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior put_on_table(plate: item, table: item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind room: item where:
            is_dining_room(room) and id[room] == 201
        # Select the dining room with ID 201
        
        bind table: item where:
            is_table(table) and inside(table, room)
        # Select a table inside the dining room
        
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with ID 1000 which has pizza and hamburger on it

        put_on_table(plate, table)
        # Place the plate on the selected table in the dining room

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_on_table(plate: item, table: item):
    body:
        achieve_once on(plate, table)

behavior __goal__():
    body:
        bind room: item where:
            is_dining_room(room) and id[room] == 201
        # Select the dining room with ID 201
        
        bind table: item where:
            is_table(table) and inside(table, room)
        # Select a table inside the dining room
        
        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the plate with ID 1000 which has pizza and hamburger on it

        put_on_table(plate, table)
        # Place the plate on the selected table in the dining room

##############################
From agent.py-> find a plan in act()
switchoff_executor(microwave_297)open_executor(microwave_297)grab_executor(plate_1000)walk_executor(table_226)put_executor(plate_1000, table_226)
##############################
From agent.py
switchoff_executor(microwave_297)
Robot find: Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is turned off. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. microwave_297 is opened. 
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the microwave_297. Robot is close to the kitchen_counter_230. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the plate_1000. Robot is close to the table_226. 
##############################
From agent.py
put_executor(plate_1000, table_226)
Robot find: Robot is close to the plate_1000. Robot is close to the table_226. plate_1000 is close table_226. plate_1000 is on table_226. table_226 is close plate_1000. plate_1000 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.
Action History:
['walk_executor(oven_295)', 'open_executor(oven_295)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(table_355)', 'walk_executor(kitchen_counter_230)', 'walk_executor(table_107)', 'walk_executor(microwave_297)', 'open_executor(microwave_297)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(sink_231)', 'walk_executor(food_hamburger_2024)', 'grab_executor(food_hamburger_2024)', 'walk_executor(plate_1000)', 'put_executor(food_hamburger_2024, plate_1000)', 'walk_executor(food_pizza_2034)', 'grab_executor(food_pizza_2034)', 'walk_executor(plate_1000)', 'put_executor(food_pizza_2034, plate_1000)', 'grab_executor(plate_1000)', 'walk_executor(microwave_297)', 'putin_executor(plate_1000, microwave_297)', 'close_executor(microwave_297)', 'switchon_executor(microwave_297)', 'switchoff_executor(microwave_297)', 'open_executor(microwave_297)', 'grab_executor(plate_1000)', 'walk_executor(table_226)', 'put_executor(plate_1000, table_226)']
Time info:
Time consume: 528 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 40
goal generate times: 9
goal correct times: 3
action_num: 31

Task complete rate:
1
Scene_id: 0
##############################
