From agent.py
Reset goals: The sub-goals are: 
['1. Find milk and cereal.', '2. Pour the milk into a cup and heat it.', '3. Add cereal to the heated milk in the cup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cereal_2015_around_table_355(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_cereal,table_instance)
        else:
            exp(food_cereal,table_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,table_instance]=True
        close[table_instance,food_cereal]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_and_cereal():
    # Function to check if there is milk and cereal independently in the environment
    symbol has_milk=exists o: item : (is_milk(o))
    symbol has_cereal=exists o: item : (is_food_cereal(o))
    return has_milk and has_cereal

behavior __goal__():
    body:
        if has_milk_and_cereal():
            # If we have already found the milk and cereal, we can directly consider them found
            bind milk: item where:
                is_milk(milk)
            bind cereal: item where:
                is_food_cereal(cereal)
            achieve close_char(char, milk)
            achieve close_char(char, cereal)
        else:
            # Check all items in the scene, especially any unvisited ones to find milk and cereal
            foreach item: item:
                if not visited(item):
                    observe(item, "Check if it is milk or cereal")

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cereal_2015_around_kitchen_counter_230(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        # Bind to a milk item
        bind milk: item where:
            is_milk(milk)

        # Bind to a cereal item
        bind cereal: item where:
            is_food_cereal(cereal)

        # Approach to both milk and cereal
        achieve close_char(char, milk)
        achieve close_char(char, cereal)

        # Check for milk
        if not visited(milk):
            observe(milk, "Check if this object is the milk")

        # Check for cereal
        if not visited(cereal):
            observe(cereal, "Check if this object is the cereal")
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cereal_2015_around_kitchen_counter_230(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_and_cereal(fridge:item):
    # Function to check if there is milk and cereal inside the specified fridge
    symbol has_items=exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside(o, fridge))
    return has_items

behavior __goal__():
    body:
        if exists fridge: item : (is_fridge(fridge) and has_milk_and_cereal(fridge)):
            # If a fridge with milk and cereal is found, move closer to it
            bind fridge: item where:
                is_fridge(fridge) and has_milk_and_cereal(fridge)
            achieve close_char(char, fridge)

        else:
            # Check all fridges in the scene that have not been visited
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge,"Check is there any milk and cereal in the fridge")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_milk_and_cereal(fridge:item):
    # Function to check if there is milk and cereal inside the specified fridge
    symbol has_items=exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside(o, fridge))
    return has_items

behavior __goal__():
    body:
        if exists fridge: item : (is_fridge(fridge) and has_milk_and_cereal(fridge)):
            # If a fridge with milk and cereal is found, move closer to it
            bind fridge: item where:
                is_fridge(fridge) and has_milk_and_cereal(fridge)
            achieve close_char(char, fridge)

        else:
            # Check all fridges in the scene that have not been visited
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge,"Check is there any milk and cereal in the fridge")

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)obs(fridge_289, Check is there any milk and cereal in the fridge)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
obs(fridge_289, Check is there any milk and cereal in the fridge)
Get this information:  food_turkey_2040 is inside fridge_289. food_fish_2021 is inside fridge_289. milk_2043 is inside fridge_289. food_onion_2032 is inside fridge_289. food_cake_2013 is inside fridge_289. food_hamburger_2024 is inside fridge_289. food_potato_2035 is inside fridge_289. food_cheese_2016 is inside fridge_289. food_kiwi_2027 is inside fridge_289. food_steak_2008 is inside fridge_289. food_donut_2019 is inside fridge_289. food_snack_2038 is inside fridge_289. food_banana_2011 is inside fridge_289. food_food_2022 is inside fridge_289. food_oatmeal_2030 is inside fridge_289. food_vegetable_2041 is inside fridge_289. fridge_289 is facing drawing_239. food_carrot_2014 is inside fridge_289. food_peanut_butter_2033 is inside fridge_289. food_rice_2036 is inside fridge_289. food_ice_cream_2025 is inside fridge_289. food_chicken_2017 is inside fridge_289. food_lemon_2028 is inside fridge_289. food_sugar_2039 is inside fridge_289. food_apple_2009 is inside fridge_289. food_egg_2020 is inside fridge_289. sauce_2078 is inside fridge_289. food_orange_2031 is inside fridge_289. fridge_289 is close to cupboard_229. fridge_289 is close to floor_6. fridge_289 is close to floor_7. fridge_289 is close to kitchen_counter_230. fridge_289 is close to wall_11. fridge_289 is close to wall_14. fridge_289 is close to ceiling_18. fridge_289 is close to mat_22. fridge_289 is close to sauce_2078. fridge_289 is close to shower_36. fridge_289 is close to toilet_37. fridge_289 is close to microwave_297. fridge_289 is close to door_44. fridge_289 is close to doorjamb_45. fridge_289 is close to drawing_174. fridge_289 is close to drawing_239. fridge_289 is close to drawing_240. fridge_289 is close to ceiling_216. fridge_289 is close to floor_202. fridge_289 is close to floor_203. fridge_289 is close to floor_77. fridge_289 is close to wall_211. fridge_289 is close to wall_85. fridge_289 is close to ceiling_95. fridge_289 is close to food_steak_2008. fridge_289 is close to food_apple_2009. fridge_289 is close to food_bacon_2010. fridge_289 is close to food_banana_2011. fridge_289 is close to food_bread_2012. fridge_289 is close to food_cake_2013. fridge_289 is close to food_carrot_2014. fridge_289 is close to food_cereal_2015. fridge_289 is close to food_cheese_2016. fridge_289 is close to food_chicken_2017. fridge_289 is close to food_dessert_2018. fridge_289 is close to food_donut_2019. fridge_289 is close to food_egg_2020. fridge_289 is close to food_fish_2021. fridge_289 is close to food_food_2022. fridge_289 is close to food_fruit_2023. fridge_289 is close to food_hamburger_2024. fridge_289 is close to food_ice_cream_2025. fridge_289 is close to food_jam_2026. fridge_289 is close to food_kiwi_2027. fridge_289 is close to food_lemon_2028. fridge_289 is close to food_noodles_2029. fridge_289 is close to food_oatmeal_2030. fridge_289 is close to food_orange_2031. fridge_289 is close to food_onion_2032. fridge_289 is close to food_peanut_butter_2033. fridge_289 is close to food_pizza_2034. fridge_289 is close to food_potato_2035. fridge_289 is close to food_rice_2036. fridge_289 is close to food_salt_2037. fridge_289 is close to food_snack_2038. fridge_289 is close to food_sugar_2039. fridge_289 is close to food_turkey_2040. fridge_289 is close to food_vegetable_2041. fridge_289 is close to dry_pasta_2042. fridge_289 is close to milk_2043. fridge_289 is close to trashcan_99. fridge_289 is close to character_65. food_bread_2012 is inside fridge_289. food_fruit_2023 is inside fridge_289. dry_pasta_2042 is inside fridge_289. food_cereal_2015 is inside fridge_289. food_pizza_2034 is inside fridge_289. fridge_289 is on floor_202. fridge_289 is on floor_203. food_dessert_2018 is inside fridge_289. food_jam_2026 is inside fridge_289. food_salt_2037 is inside fridge_289. fridge_289 is inside dining_room_201. food_bacon_2010 is inside fridge_289. food_noodles_2029 is inside fridge_289. fridge_289 is CLEAN. fridge_289 is OFF. fridge_289 is OPEN. fridge_289 is PLUGGED_IN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior pour_milk_into_cup(milk:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        # Pour the milk into the cup

behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Put the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) 
        # Select the milk
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        
        pour_milk_into_cup(milk, cup)
        # Pour milk into the cup

        heat_milk_in_microwave(cup, microwave) 
        # Heat the milk in the microwave
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior pour_milk_into_cup(milk:item, cup:item):
    body:
        achieve_once inside(milk, cup)
        # Pour the milk into the cup

behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Put the cup with milk inside the microwave
        achieve_once closed(microwave)
        # Close the microwave door
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) 
        # Select the milk
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        
        pour_milk_into_cup(milk, cup)
        # Pour milk into the cup

        heat_milk_in_microwave(cup, microwave) 
        # Heat the milk in the microwave
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(microwave_297)putin_executor(cup_2063, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(microwave_297)open_executor(microwave_297)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(microwave_297)putin_executor(cup_2063, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the fridge_289. Robot is close to the milk_2043. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the fridge_289. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. milk_2043 is inside cup_2063. cup_2063 is close milk_2043. milk_2043 is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. 
##############################
From agent.py
open_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is opened. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the microwave_297. 
##############################
From agent.py
putin_executor(cup_2063, microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the microwave_297. microwave_297 is close cup_2063. cup_2063 is close microwave_297. cup_2063 is inside microwave_297. cup_2063 released by right hand. 
##############################
From agent.py
close_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is closed. 
##############################
From agent.py
switchon_executor(microwave_297)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the microwave_297. microwave_297 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_table_355(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_milk(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        # Add cereal into the cup with milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        bind cup: item where:
            is_cup(cup) and visited(cup)
        # Select the heated cup with milk from previously completed actions
        
        add_cereal_to_milk(cereal, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind cereal: item where:
            is_food_cereal(cereal)
        bind cup: item where:
            is_cup(cup)
        # Assuming cup_2063 dynamically binds to specific cup
        achieve close_char(char, cup)
        achieve inside(milk, cup)
        achieve_once inside(cereal, cup)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior add_cereal_to_milk(cereal:item, milk:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        # Add the cereal into the cup with milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal to add
        
        bind milk: item where:
            is_milk(milk)
        # Select heated milk, which is in the cup

        bind cup: item where:
            is_cup(cup) and inside(milk, cup)
        # Select the cup with the heated milk inside

        add_cereal_to_milk(cereal, milk, cup)
        # Add the cereal to the heated milk in the cup
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior add_cereal_to_milk(cereal:item, milk:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        # Add the cereal into the cup with milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal to add
        
        bind milk: item where:
            is_milk(milk)
        # Select heated milk, which is in the cup

        bind cup: item where:
            is_cup(cup) and inside(milk, cup)
        # Select the cup with the heated milk inside

        add_cereal_to_milk(cereal, milk, cup)
        # Add the cereal to the heated milk in the cup
##############################
From agent.py-> find a plan in act()
walk_executor(food_cereal_2015)grab_executor(food_cereal_2015)walk_executor(cup_2063)putin_executor(food_cereal_2015, cup_2063)
##############################
From agent.py
walk_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. 
##############################
From agent.py
grab_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. Grabbing food_cereal_2015 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the microwave_297. 
##############################
From agent.py
putin_executor(food_cereal_2015, cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the microwave_297. food_cereal_2015 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(kitchen_counter_230)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)', 'walk_executor(microwave_297)', 'open_executor(microwave_297)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(microwave_297)', 'putin_executor(cup_2063, microwave_297)', 'close_executor(microwave_297)', 'switchon_executor(microwave_297)', 'walk_executor(food_cereal_2015)', 'grab_executor(food_cereal_2015)', 'walk_executor(cup_2063)', 'putin_executor(food_cereal_2015, cup_2063)']
Time info:
Time consume: 182 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 23
goal generate times: 7
goal correct times: 0
action_num: 20

Task complete rate:
Keystate: k1 - Requires: 3 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
