From agent.py
Reset goals: The sub-goals are: 
['Fill the bathroom sink with water and add soap to create soapy water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2155_around_bathroom_counter_18(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(detergent,bathroom_counter_instance)
        else:
            exp(detergent,bathroom_counter_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_counter_instance]=True
        close[bathroom_counter_instance,detergent]=True
    

behavior find_shampoo_2019_around_bathroom_counter_18(shampoo:item):
    goal: not unknown(shampoo)
    body:
        assert is_shampoo(shampoo)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(shampoo,bathroom_counter_instance)
        else:
            exp(shampoo,bathroom_counter_instance)
    eff:
        unknown[shampoo]=False
        close[shampoo,bathroom_counter_instance]=True
        close[bathroom_counter_instance,shampoo]=True
    

behavior find_soap_2126_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve open(faucet) # Turn on the faucet
        achieve has_water(sink) # Ensure the sink has water
        achieve_once closed(faucet) # Turn off the faucet after filling the sink

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink) # Add soap to the water in the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink in the scene
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet in the scene
        fill_sink_with_water(sink, faucet) # Fill the sink with water using the faucet
        
        bind soap: item where:
            is_soap(soap)
        # Select a soap in the scene
        add_soap_to_sink(sink, soap) # Add soap to the sink water to create soapy water

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2155_around_bathroom_counter_18(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(detergent,bathroom_counter_instance)
        else:
            exp(detergent,bathroom_counter_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_counter_instance]=True
        close[bathroom_counter_instance,detergent]=True
    

behavior find_shampoo_2019_around_bathroom_counter_18(shampoo:item):
    goal: not unknown(shampoo)
    body:
        assert is_shampoo(shampoo)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(shampoo,bathroom_counter_instance)
        else:
            exp(shampoo,bathroom_counter_instance)
    eff:
        unknown[shampoo]=False
        close[shampoo,bathroom_counter_instance]=True
        close[bathroom_counter_instance,shampoo]=True
    

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2125_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink: item, faucet: item):
    body:
        achieve has_water(sink)

behavior add_soap_to_water(sink: item, soap: item):
    body:
        achieve_once inside(soap, sink)

behavior __goal__():
    body:
        bind bathroom_sink: item where:
            is_sink(bathroom_sink) and inside(bathroom_sink, bathroom)
        # Bind the bathroom sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, bathroom_sink)
        # Bind the faucet near the bathroom sink

        bind soap: item where:
            is_soap(soap)
        # Bind the soap

        fill_sink_with_water(bathroom_sink, faucet)
        # Fill the bathroom sink with water

        add_soap_to_water(bathroom_sink, soap)
        # Add soap to the water in the bathroom sink to create soapy water

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: bathroom; available variables: [Variable<bathroom_sink: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_detergent_2011_around_bathroom_counter_18(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(detergent,bathroom_counter_instance)
        else:
            exp(detergent,bathroom_counter_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_counter_instance]=True
        close[bathroom_counter_instance,detergent]=True
    

behavior find_shampoo_2019_around_bathroom_counter_18(shampoo:item):
    goal: not unknown(shampoo)
    body:
        assert is_shampoo(shampoo)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(shampoo,bathroom_counter_instance)
        else:
            exp(shampoo,bathroom_counter_instance)
    eff:
        unknown[shampoo]=False
        close[shampoo,bathroom_counter_instance]=True
        close[bathroom_counter_instance,shampoo]=True
    

behavior find_soap_2125_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#goal_representation
 
behavior fill_sink_with_water(sink: item, faucet: item):
    body:
        achieve has_water(sink)

behavior add_soap_to_water(sink: item, soap: item):
    body:
        achieve_once inside(soap, sink)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Bind the bathroom

        bind bathroom_sink: item where:
            is_sink(bathroom_sink) and inside(bathroom_sink, bathroom)
        # Bind the bathroom sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, bathroom_sink)
        # Bind the faucet near the bathroom sink

        bind soap: item where:
            is_soap(soap)
        # Bind the soap

        fill_sink_with_water(bathroom_sink, faucet)
        # Fill the bathroom sink with water

        add_soap_to_water(bathroom_sink, soap)
        # Add soap to the water in the bathroom sink to create soapy water

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_sink_with_water(sink: item, faucet: item):
    body:
        achieve has_water(sink)

behavior add_soap_to_water(sink: item, soap: item):
    body:
        achieve_once inside(soap, sink)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Bind the bathroom

        bind bathroom_sink: item where:
            is_sink(bathroom_sink) and inside(bathroom_sink, bathroom)
        # Bind the bathroom sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, bathroom_sink)
        # Bind the faucet near the bathroom sink

        bind soap: item where:
            is_soap(soap)
        # Bind the soap

        fill_sink_with_water(bathroom_sink, faucet)
        # Fill the bathroom sink with water

        add_soap_to_water(bathroom_sink, soap)
        # Add soap to the water in the bathroom sink to create soapy water

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(bathroom_counter_18)exp(soap_2125, bathroom_counter_18)walk_executor(soap_2125)grab_executor(soap_2125)walk_executor(sink_19)putin_executor(soap_2125, sink_19)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(bathroom_counter_18)
Robot find: Robot is close to the bathroom_counter_18. 
##############################
From agent.py
exp(soap_2125, bathroom_counter_18)
Fail to find soap_2125 around bathroom_counter_18. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_17)open_executor(bathroom_cabinet_17)exp(soap_2125, bathroom_cabinet_17)walk_executor(soap_2125)grab_executor(soap_2125)walk_executor(sink_19)putin_executor(soap_2125, sink_19)
##############################
From agent.py
walk_executor(bathroom_cabinet_17)
Robot find: Robot is close to the bathroom_cabinet_17. 
##############################
From agent.py
open_executor(bathroom_cabinet_17)
Robot find: tooth_paste_2059, Robot is close to the bathroom_cabinet_17. Robot is close to the tooth_paste_2059. bathroom_cabinet_17 is opened. 
##############################
From agent.py
exp(soap_2125, bathroom_cabinet_17)
Fail to find soap_2125 around bathroom_cabinet_17. 
##############################
From agent.py-> find a plan in act()
walk_executor(window_191)open_executor(window_191)exp(soap_2125, window_191)walk_executor(soap_2125)grab_executor(soap_2125)walk_executor(sink_19)putin_executor(soap_2125, sink_19)
##############################
From agent.py
walk_executor(window_191)
Robot find: mat_203, drawing_201, Robot is close to the window_191. 
##############################
From agent.py
open_executor(window_191)
Robot find: Robot is close to the window_191. window_191 is opened. 
##############################
From agent.py
exp(soap_2125, window_191)
Fail to find soap_2125 around window_191. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)exp(soap_2125, sink_19)walk_executor(soap_2125)grab_executor(soap_2125)walk_executor(sink_19)putin_executor(soap_2125, sink_19)
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, cleaning_solution_2143, Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
exp(soap_2125, sink_19)
Find soap_2125. 
##############################
From agent.py-> find a plan in act()
walk_executor(soap_2125)grab_executor(soap_2125)walk_executor(sink_19)putin_executor(soap_2125, sink_19)
##############################
From agent.py
walk_executor(soap_2125)
Robot find: Robot is close to the sink_19. Robot is close to the soap_2125. 
##############################
From agent.py
grab_executor(soap_2125)
Robot find: Robot is close to the sink_19. Robot is close to the soap_2125. Grabbing soap_2125 by right hand. 
##############################
From agent.py
walk_executor(sink_19)
Robot find: Robot is close to the sink_19. Robot is close to the soap_2125. Robot is close to the bathroom_counter_18. 
##############################
From agent.py
putin_executor(soap_2125, sink_19)
Robot find: Robot is close to the sink_19. Robot is close to the soap_2125. Robot is close to the bathroom_counter_18. soap_2125 is inside sink_19. soap_2125 is close sink_19. soap_2125 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a sink of soapy water in the bathroom.
Action History:
['walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(bathroom_counter_18)', 'walk_executor(bathroom_cabinet_17)', 'open_executor(bathroom_cabinet_17)', 'walk_executor(window_191)', 'open_executor(window_191)', 'walk_executor(sink_19)', 'walk_executor(soap_2125)', 'grab_executor(soap_2125)', 'walk_executor(sink_19)', 'putin_executor(soap_2125, sink_19)']
Time info:
Time consume: 91 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 13
goal generate times: 2
goal correct times: 1
action_num: 13

Task complete rate:
1
Scene_id: 1
##############################
