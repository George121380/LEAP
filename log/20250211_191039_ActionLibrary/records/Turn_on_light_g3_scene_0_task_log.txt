From agent.py
Reset goals: The sub-goals are: 
['1. Identify the rooms in the household.', '2. Check if there is a light on in each room.', '3. Turn on a light in any room where the lights are off.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_vacuum_cleaner_2070_around_coffee_table_2068(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(vacuum_cleaner,coffee_table_instance)
        else:
            exp(vacuum_cleaner,coffee_table_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,coffee_table_instance]=True
        close[coffee_table_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
def in_room(item: item, room: item):
    # Function to check if an item is in the specified room
    symbol in_room = exists i: item : (inside(i, room) and i == item)
    return in_room

behavior observe_room(room: item):
    body:
        achieve_once visited(room)
        # Mark the room as visited

behavior __goal__():
    body:
        foreach room: item:
            if not visited(room):
                observe(room, "Identify the rooms in the household")

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_toilet_paper_2090_around_toilet_37(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==37
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior identify_rooms_in_household(room:item):
    body:
        observe(room, "Identify the room and its purpose")
        # Observe each room to determine its identity and purpose

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):
                identify_rooms_in_household(room)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior identify_rooms_in_household(room:item):
    body:
        observe(room, "Identify the room and its purpose")
        # Observe each room to determine its identity and purpose

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):
                identify_rooms_in_household(room)

##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_1)obs(bathroom_1, Identify the room and its purpose)walk_executor(bedroom_67)obs(bedroom_67, Identify the room and its purpose)walk_executor(dining_room_201)obs(dining_room_201, Identify the room and its purpose)walk_executor(home_office_319)obs(home_office_319, Identify the room and its purpose)
##############################
From agent.py
walk_executor(bathroom_1)

##############################
From agent.py
obs(bathroom_1, Identify the room and its purpose)
Get this information:  wall_11 is inside bathroom_1. towel_2059 is inside bathroom_1. mat_22 is inside bathroom_1. toilet_paper_2090 is inside bathroom_1. bathroom_counter_41 is inside bathroom_1. floor_3 is inside bathroom_1. wall_14 is inside bathroom_1. towel_rack_33 is inside bathroom_1. door_44 is inside bathroom_1. bathroom_1 is close to ironing_board_2074. window_63 is inside bathroom_1. curtain_25 is inside bathroom_1. floor_6 is inside bathroom_1. detergent_2084 is inside bathroom_1. clothes_pants_2085 is inside bathroom_1. shower_36 is inside bathroom_1. walllamp_28 is inside bathroom_1. towel_2057 is inside bathroom_1. ceiling_17 is inside bathroom_1. clothes_socks_2087 is inside bathroom_1. wall_9 is inside bathroom_1. curtain_39 is inside bathroom_1. ceiling_20 is inside bathroom_1. towel_rack_31 is inside bathroom_1. curtain_23 is inside bathroom_1. wall_12 is inside bathroom_1. sink_42 is inside bathroom_1. floor_4 is inside bathroom_1. basket_for_clothes_2006 is inside bathroom_1. ironing_board_2074 is inside bathroom_1. light_64 is inside bathroom_1. ceilinglamp_26 is inside bathroom_1. wall_15 is inside bathroom_1. doorjamb_45 is inside bathroom_1. towel_rack_34 is inside bathroom_1. floor_7 is inside bathroom_1. ceiling_18 is inside bathroom_1. toilet_37 is inside bathroom_1. towel_2058 is inside bathroom_1. wall_10 is inside bathroom_1. clothes_skirt_2088 is inside bathroom_1. iron_2089 is inside bathroom_1. bathroom_cabinet_40 is inside bathroom_1. walllamp_29 is inside bathroom_1. floor_2 is inside bathroom_1. ceiling_21 is inside bathroom_1. soap_2053 is inside bathroom_1. faucet_43 is inside bathroom_1. towel_rack_32 is inside bathroom_1. floor_5 is inside bathroom_1. cleaning_solution_2073 is inside bathroom_1. curtain_24 is inside bathroom_1. wallshelf_35 is inside bathroom_1. wall_13 is inside bathroom_1. door_44 is between bathroom_1. ceiling_16 is inside bathroom_1. towel_2056 is inside bathroom_1. washing_machine_2007 is inside bathroom_1. clothes_shirt_2086 is inside bathroom_1. character_65 is inside bathroom_1. walllamp_27 is inside bathroom_1. bathtub_30 is inside bathroom_1. floor_8 is inside bathroom_1. ceiling_19 is inside bathroom_1. shower_38 is inside bathroom_1. bathroom_1 is CLEAN.
##############################
From agent.py
walk_executor(bedroom_67)

##############################
From agent.py
obs(bedroom_67, Identify the room and its purpose)
Get this information:  pillow_183 is inside bedroom_67. floor_77 is inside bedroom_67. ceilinglamp_96 is inside bedroom_67. closetdrawer_118 is inside bedroom_67. table_107 is inside bedroom_67. drawing_175 is inside bedroom_67. wall_79 is inside bedroom_67. ceiling_90 is inside bedroom_67. closetdrawer_120 is inside bedroom_67. hanger_109 is inside bedroom_67. closetdrawer_148 is inside bedroom_67. wall_82 is inside bedroom_67. floor_71 is inside bedroom_67. hanger_110 is inside bedroom_67. mousepad_167 is inside bedroom_67. orchid_178 is inside bedroom_67. floor_72 is inside bedroom_67. hanger_140 is inside bedroom_67. ceiling_91 is inside bedroom_67. nightstand_102 is inside bedroom_67. computer_170 is inside bedroom_67. hanger_132 is inside bedroom_67. wall_85 is inside bedroom_67. floor_74 is inside bedroom_67. clothes_gloves_2046 is inside bedroom_67. curtain_181 is inside bedroom_67. hanger_115 is inside bedroom_67. desk_104 is inside bedroom_67. closetdrawer_143 is inside bedroom_67. hanger_134 is inside bedroom_67. mat_173 is inside bedroom_67. hanger_124 is inside bedroom_67. window_86 is inside bedroom_67. tablelamp_97 is inside bedroom_67. clothes_underwear_2049 is inside bedroom_67. closetdrawer_154 is inside bedroom_67. doorjamb_165 is inside bedroom_67. closetdrawer_116 is inside bedroom_67. wall_80 is inside bedroom_67. floor_69 is inside bedroom_67. trashcan_99 is inside bedroom_67. ceiling_88 is inside bedroom_67. keyboard_168 is inside bedroom_67. closetdrawer_119 is inside bedroom_67. drawing_176 is inside bedroom_67. wall_81 is inside bedroom_67. clothes_dress_2044 is inside bedroom_67. closetdrawer_160 is inside bedroom_67. hanger_138 is inside bedroom_67. hanger_111 is inside bedroom_67. curtain_179 is inside bedroom_67. closetdrawer_121 is inside bedroom_67. ceiling_94 is inside bedroom_67. wall_83 is inside bedroom_67. closetdrawer_122 is inside bedroom_67. hanger_113 is inside bedroom_67. hanger_141 is inside bedroom_67. floor_75 is inside bedroom_67. chair_103 is inside bedroom_67. hanger_114 is inside bedroom_67. cpuscreen_171 is inside bedroom_67. pillow_182 is inside bedroom_67. floor_76 is inside bedroom_67. chair_106 is inside bedroom_67. bed_105 is inside bedroom_67. ceiling_89 is inside bedroom_67. wall_78 is inside bedroom_67. closetdrawer_146 is inside bedroom_67. photoframe_185 is inside bedroom_67. drawing_174 is inside bedroom_67. dresser_108 is inside bedroom_67. hanger_136 is inside bedroom_67. floor_70 is inside bedroom_67. tablelamp_98 is inside bedroom_67. mouse_166 is inside bedroom_67. hanger_128 is inside bedroom_67. closetdrawer_117 is inside bedroom_67. bookshelf_101 is inside bedroom_67. closetdrawer_158 is inside bedroom_67. chair_2004 is inside bedroom_67. nightstand_100 is inside bedroom_67. floor_73 is inside bedroom_67. hanger_130 is inside bedroom_67. light_169 is inside bedroom_67. door_44 is between bedroom_67. ceiling_92 is inside bedroom_67. ceiling_93 is inside bedroom_67. clothes_hat_2045 is inside bedroom_67. closetdrawer_150 is inside bedroom_67. hanger_112 is inside bedroom_67. dresser_123 is inside bedroom_67. curtain_180 is inside bedroom_67. character_65 is inside bedroom_67. clothes_scarf_2048 is inside bedroom_67. hanger_142 is inside bedroom_67. ceiling_95 is inside bedroom_67. wall_84 is inside bedroom_67. floor_68 is inside bedroom_67. door_222 is between bedroom_67. ceiling_87 is inside bedroom_67. hanger_126 is inside bedroom_67. bedroom_67 is CLEAN.
##############################
From agent.py
walk_executor(dining_room_201)

##############################
From agent.py
obs(dining_room_201, Identify the room and its purpose)
Get this information:  food_turkey_2040 is inside dining_room_201. wall_213 is inside dining_room_201. ceilinglamp_224 is inside dining_room_201. fork_2081 is inside dining_room_201. food_fish_2021 is inside dining_room_201. milk_2043 is inside dining_room_201. food_onion_2032 is inside dining_room_201. floor_205 is inside dining_room_201. wallshelf_235 is inside dining_room_201. cutting_board_2051 is inside dining_room_201. toaster_292 is inside dining_room_201. food_cake_2013 is inside dining_room_201. ceiling_216 is inside dining_room_201. bench_227 is inside dining_room_201. oven_295 is inside dining_room_201. powersocket_246 is inside dining_room_201. food_hamburger_2024 is inside dining_room_201. food_potato_2035 is inside dining_room_201. floor_208 is inside dining_room_201. soap_2054 is inside dining_room_201. stove_2065 is inside dining_room_201. food_cheese_2016 is inside dining_room_201. food_kiwi_2027 is inside dining_room_201. napkin_2005 is inside dining_room_201. ceiling_219 is inside dining_room_201. food_steak_2008 is inside dining_room_201. wall_clock_249 is inside dining_room_201. drawing_238 is inside dining_room_201. door_222 is inside dining_room_201. wall_211 is inside dining_room_201. drawing_241 is inside dining_room_201. kitchen_counter_230 is inside dining_room_201. food_donut_2019 is inside dining_room_201. floor_203 is inside dining_room_201. doorjamb_346 is between dining_room_201. food_snack_2038 is inside dining_room_201. cd_player_2060 is inside dining_room_201. coffe_maker_290 is inside dining_room_201. food_banana_2011 is inside dining_room_201. food_food_2022 is inside dining_room_201. coffee_filter_2000 is inside dining_room_201. oil_2079 is inside dining_room_201. wall_214 is inside dining_room_201. food_oatmeal_2030 is inside dining_room_201. food_vegetable_2041 is inside dining_room_201. pot_2069 is inside dining_room_201. drawing_2003 is inside dining_room_201. orchid_244 is inside dining_room_201. bookshelf_233 is inside dining_room_201. floor_206 is inside dining_room_201. tvstand_225 is inside dining_room_201. mat_236 is inside dining_room_201. food_carrot_2014 is inside dining_room_201. bowl_2071 is inside dining_room_201. food_peanut_butter_2033 is inside dining_room_201. photoframe_285 is inside dining_room_201. ceiling_217 is inside dining_room_201. plate_1000 is inside dining_room_201. cup_2063 is inside dining_room_201. food_rice_2036 is inside dining_room_201. food_ice_cream_2025 is inside dining_room_201. cup_2064 is inside dining_room_201. drawing_239 is inside dining_room_201. bench_228 is inside dining_room_201. fryingpan_2083 is inside dining_room_201. tray_296 is inside dining_room_201. food_chicken_2017 is inside dining_room_201. phone_247 is inside dining_room_201. ceiling_220 is inside dining_room_201. wall_209 is inside dining_room_201. stovefan_288 is inside dining_room_201. food_lemon_2028 is inside dining_room_201. food_sugar_2039 is inside dining_room_201. sink_231 is inside dining_room_201. food_apple_2009 is inside dining_room_201. food_egg_2020 is inside dining_room_201. ceilinglamp_223 is inside dining_room_201. wall_212 is inside dining_room_201. sauce_2078 is inside dining_room_201. drawing_242 is inside dining_room_201. food_orange_2031 is inside dining_room_201. floor_204 is inside dining_room_201. wall_215 is inside dining_room_201. knife_2050 is inside dining_room_201. bowl_2072 is inside dining_room_201. wallshelf_234 is inside dining_room_201. food_bread_2012 is inside dining_room_201. food_fruit_2023 is inside dining_room_201. fork_2080 is inside dining_room_201. dry_pasta_2042 is inside dining_room_201. food_cereal_2015 is inside dining_room_201. light_245 is inside dining_room_201. floor_207 is inside dining_room_201. ceiling_218 is inside dining_room_201. food_pizza_2034 is inside dining_room_201. dishwasher_1001 is inside dining_room_201. table_226 is inside dining_room_201. television_248 is inside dining_room_201. mat_237 is inside dining_room_201. wall_210 is inside dining_room_201. cupboard_229 is inside dining_room_201. food_dessert_2018 is inside dining_room_201. cd_2075 is inside dining_room_201. character_65 is inside dining_room_201. food_jam_2026 is inside dining_room_201. food_salt_2037 is inside dining_room_201. fridge_289 is inside dining_room_201. food_bacon_2010 is inside dining_room_201. drawing_240 is inside dining_room_201. microwave_297 is inside dining_room_201. floor_202 is inside dining_room_201. door_222 is between dining_room_201. food_noodles_2029 is inside dining_room_201. drawing_243 is inside dining_room_201. faucet_232 is inside dining_room_201. ceiling_221 is inside dining_room_201. dining_room_201 is CLEAN.
##############################
From agent.py
walk_executor(home_office_319)

##############################
From agent.py
obs(home_office_319, Identify the room and its purpose)
Get this information:  curtain_407 is inside home_office_319. hairbrush_2002 is inside home_office_319. ceilinglamp_349 is inside home_office_319. vacuum_cleaner_2070 is inside home_office_319. ceiling_341 is inside home_office_319. couch_352 is inside home_office_319. wall_330 is inside home_office_319. headset_2062 is inside home_office_319. curtain_409 is inside home_office_319. filing_cabinet_399 is inside home_office_319. television_410 is inside home_office_319. floor_322 is inside home_office_319. wall_333 is inside home_office_319. hanger_361 is inside home_office_319. drawing_402 is inside home_office_319. ceiling_344 is inside home_office_319. hanger_363 is inside home_office_319. hanger_374 is inside home_office_319. floor_325 is inside home_office_319. wall_336 is inside home_office_319. drawing_404 is inside home_office_319. table_355 is inside home_office_319. closetdrawer_394 is inside home_office_319. chair_356 is inside home_office_319. mouse_413 is inside home_office_319. headset_2076 is inside home_office_319. doorjamb_346 is between home_office_319. floor_328 is inside home_office_319. ceiling_339 is inside home_office_319. cpuscreen_416 is inside home_office_319. hanger_369 is inside home_office_319. doorjamb_347 is inside home_office_319. dresser_358 is inside home_office_319. wall_331 is inside home_office_319. floor_320 is inside home_office_319. closetdrawer_388 is inside home_office_319. walllamp_350 is inside home_office_319. curtain_408 is inside home_office_319. remote_control_2052 is inside home_office_319. spectacles_2082 is inside home_office_319. floor_323 is inside home_office_319. closetdrawer_380 is inside home_office_319. tvstand_353 is inside home_office_319. ceiling_342 is inside home_office_319. hanger_372 is inside home_office_319. light_411 is inside home_office_319. ceiling_345 is inside home_office_319. wall_334 is inside home_office_319. cat_2055 is inside home_office_319. wall_335 is inside home_office_319. closetdrawer_392 is inside home_office_319. clothes_jacket_2047 is inside home_office_319. drawing_403 is inside home_office_319. floor_326 is inside home_office_319. book_2066 is inside home_office_319. phone_2077 is inside home_office_319. hanger_375 is inside home_office_319. pencil_2001 is inside home_office_319. window_348 is inside home_office_319. ceiling_337 is inside home_office_319. pillow_405 is inside home_office_319. hanger_367 is inside home_office_319. pillow_406 is inside home_office_319. wall_329 is inside home_office_319. ceiling_340 is inside home_office_319. hanger_359 is inside home_office_319. computer_417 is inside home_office_319. dvd_player_2061 is inside home_office_319. home_office_319 is close to coffee_table_2068. floor_321 is inside home_office_319. wall_332 is inside home_office_319. drawing_400 is inside home_office_319. walllamp_351 is inside home_office_319. photoframe_430 is inside home_office_319. floor_324 is inside home_office_319. ceiling_343 is inside home_office_319. closetdrawer_382 is inside home_office_319. mat_401 is inside home_office_319. powersocket_412 is inside home_office_319. bookshelf_354 is inside home_office_319. hanger_365 is inside home_office_319. floor_327 is inside home_office_319. character_65 is inside home_office_319. closetdrawer_384 is inside home_office_319. doorjamb_346 is inside home_office_319. desk_357 is inside home_office_319. book_2067 is inside home_office_319. mousepad_414 is inside home_office_319. hanger_376 is inside home_office_319. coffee_table_2068 is inside home_office_319. keyboard_415 is inside home_office_319. ceiling_338 is inside home_office_319. closetdrawer_377 is inside home_office_319. home_office_319 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_light_on(room: item):
    # Function to check if there is a light on in the specified room
    symbol light_on = exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return light_on

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):
                # Assuming these are the types of rooms identified in the household
                if not has_light_on(room):
                    # If there is no light on in the room, check for a nearby light to switch on
                    foreach light: item:
                        if is_light(light) and not is_on(light) and inside(light, room):
                            achieve_once is_on(light)
                else:
                    # If the light is already on, do nothing
                    continue

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: continue; available variables: [Variable<room: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_light_on(room: item):
    # Function to check if there is a light on in the specified room
    symbol light_on = exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return light_on

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):
                # Assuming these are the types of rooms identified in the household
                if not has_light_on(room):
                    # If there is no light on in the room, check for a nearby light to switch on
                    foreach light: item:
                        if is_light(light) and not is_on(light) and inside(light, room):
                            achieve_once is_on(light)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_light_on(room: item):
    # Function to check if there is a light on in the specified room
    symbol light_on = exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return light_on

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):
                # Assuming these are the types of rooms identified in the household
                if not has_light_on(room):
                    # If there is no light on in the room, check for a nearby light to switch on
                    foreach light: item:
                        if is_light(light) and not is_on(light) and inside(light, room):
                            achieve_once is_on(light)

##############################
From agent.py-> find a plan in act()
walk_executor(light_64)switchon_executor(light_64)walk_executor(light_169)switchon_executor(light_169)walk_executor(light_245)switchon_executor(light_245)walk_executor(light_411)switchon_executor(light_411)
##############################
From agent.py
walk_executor(light_64)
Robot find: towel_rack_32, mat_22, Robot is close to the light_64. 
##############################
From agent.py
switchon_executor(light_64)
Robot find: Robot is close to the light_64. light_64 is turned on. 
##############################
From agent.py
walk_executor(light_169)
Robot find: keyboard_168, drawing_175, chair_103, drawing_174, Robot is close to the light_169. 
##############################
From agent.py
switchon_executor(light_169)
Robot find: Robot is close to the light_169. light_169 is turned on. 
##############################
From agent.py
walk_executor(light_245)
Robot find: drawing_240, drawing_238, wall_clock_249, drawing_241, drawing_242, drawing_243, drawing_239, phone_247, Robot is close to the light_245. 
##############################
From agent.py
switchon_executor(light_245)
Robot find: Robot is close to the light_245. light_245 is turned on. 
##############################
From agent.py
walk_executor(light_411)
Robot find: drawing_404, drawing_402, Robot is close to the light_411. 
##############################
From agent.py
switchon_executor(light_411)
Robot find: Robot is close to the light_411. light_411 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_room_with_light(room:item):
    # Function to check if there is a light on in a specific room
    symbol has_light_on=exists light: item : (is_light(light) and inside(light, room) and is_on(light))
    return has_light_on

behavior turn_on_light_in_room(room:item):
    # Define a behavior to ensure a light is on in the room
    body:
        if not is_room_with_light(room):
            # If the room does not have a light on, turn on a light
            bind light: item where:
                is_light(light) and inside(light, room) and is_off(light)
            achieve_once is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if (is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room)) and not visited(room):
                # Check each unvisited room in the household
                observe(room, "Check if there is a light on in the room")
                # Observe if there is a light on in the room
            turn_on_light_in_room(room)
            # Ensure a light is turned on in the room where needed

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_vacuum_cleaner_2070_around_home_office_319(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(vacuum_cleaner,home_office_instance)
        else:
            exp(vacuum_cleaner,home_office_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,home_office_instance]=True
        close[home_office_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
def has_light_off(room:item):
    # Function to check if there is a light that is off in the specified room
    symbol light_off= not exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return light_off

behavior turn_on_light_in_room(room:item):
    body:
        symbol light=exists light: item : (is_light(light) and is_off(light) and inside(light, room))
        if light:
            bind light_in_room: item where:
                is_light(light_in_room) and is_off(light_in_room) and inside(light_in_room, room)
            achieve_once is_on(light_in_room)

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):
                if has_light_off(room):
                    turn_on_light_in_room(room)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'light') at line 5722, column 34.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2052_around_home_office_319(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(remote_control,home_office_instance)
        else:
            exp(remote_control,home_office_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,home_office_instance]=True
        close[home_office_instance,remote_control]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_phone_247_around_phone_247(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==247
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

#goal_representation
 
def has_light_off(room:item):
    # Function to check if there is a light that is off in the specified room
    symbol light_off= not exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return light_off

behavior turn_on_light_in_room(room:item):
    body:
        if exists light: item : (is_light(light) and is_off(light) and inside(light, room)):
            bind light_in_room: item where:
                is_light(light_in_room) and is_off(light_in_room) and inside(light_in_room, room)
            achieve_once is_on(light_in_room)

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):
                if has_light_off(room):
                    turn_on_light_in_room(room)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'light') at line 5722, column 34.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_light_off(room:item):
    # Function to check if there is a light that is off in the specified room
    symbol light_off= not exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return light_off

behavior turn_on_light_in_room(room:item):
    body:
        if exists light: item : (is_light(light) and is_off(light) and inside(light, room)):
            bind light_in_room: item where:
                is_light(light_in_room) and is_off(light_in_room) and inside(light_in_room, room)
            achieve_once is_on(light_in_room)

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):
                if has_light_off(room):
                    turn_on_light_in_room(room)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_home_office_319(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(remote_control,home_office_instance)
        else:
            exp(remote_control,home_office_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,home_office_instance]=True
        close[home_office_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
def needs_light_on(room: item):
    # Function to check if any light in the room needs to be turned on
    return exists light: item : (inside(light, room) and is_off(light))

behavior turn_on_light_in_room(room: item, light: item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):
                if needs_light_on(room):
                    bind light: item where:
                        is_light(light) and inside(light, room) and is_off(light)
                    turn_on_light_in_room(room, light)


#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. turn on a light in any room where the lights are off." ?
Answer: Turn on a light in any room where the lights are off.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_light_off(room: item):
    # Function to check if there is any light off in the specified room
    symbol light_off= exists item: item : (is_light(item) and inside(item, room) and is_off(item))
    return light_off

behavior turn_on_light(x: item):
    body:
        achieve is_on(x)

behavior __goal__():
    body:
        foreach room: item:
            if (is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room)) and is_light_off(room):
                foreach light: item:
                    if is_light(light) and inside(light, room) and is_off(light):
                        turn_on_light(light)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def light_needs_to_be_turned_on(room: item):
    symbol no_light_on = not exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return no_light_on

behavior turn_on_light_if_needed(room: item):
    body:
        if light_needs_to_be_turned_on(room):
            foreach light: item:
                if is_light(light) and inside(light, room) and is_off(light):
                    achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if exists light: item : (is_light(light) and inside(light, room)):
                turn_on_light_if_needed(room)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'light') at line 5667, column 37.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def light_needs_to_be_turned_on(room: item):
    symbol no_light_on = not exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return no_light_on

behavior turn_on_light_if_needed(room: item):
    body:
        if light_needs_to_be_turned_on(room):
            foreach light: item:
                if is_light(light) and inside(light, room) and is_off(light):
                    achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if exists light: item : (is_light(light) and inside(light, room)):
                turn_on_light_if_needed(room)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'light') at line 5667, column 37.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def light_needs_to_be_turned_on(room: item):
    symbol no_light_on = not exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return no_light_on

behavior turn_on_light_if_needed(room: item):
    body:
        if light_needs_to_be_turned_on(room):
            foreach light: item:
                if is_light(light) and inside(light, room) and is_off(light):
                    achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if exists light: item : (is_light(light) and inside(light, room)):
                turn_on_light_if_needed(room)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind light1: item where:
            is_light(light1) and is_off(light1) and inside(light1, bathroom_1)
        # Select a light that is off in the bathroom_1
        achieve is_on(light1)
        # Turn on the light in bathroom_1

        bind light2: item where:
            is_light(light2) and is_off(light2) and inside(light2, bedroom_67)
        # Select a light that is off in the bedroom_67
        achieve is_on(light2)
        # Turn on the light in bedroom_67

        bind light3: item where:
            is_light(light3) and is_off(light3) and inside(light3, dining_room_201)
        # Select a light that is off in the dining_room_201
        achieve is_on(light3)
        # Turn on the light in dining_room_201

        bind light4: item where:
            is_light(light4) and is_off(light4) and inside(light4, home_office_319)
        # Select a light that is off in the home_office_319
        achieve is_on(light4)
        # Turn on the light in home_office_319

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def lights_off(room:item):
    # Function to check if there is a light turned off inside the room
    symbol is_light_off= exists light: item : (is_light(light) and is_off(light) and inside(light, room))
    return is_light_off

behavior turn_on_lights(room:item):
    body:
        foreach light: item:
            if is_light(light) and is_off(light) and inside(light, room):
                achieve_once is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if (is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room)) and lights_off(room):
                turn_on_lights(room)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_home_office_319(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(remote_control,home_office_instance)
        else:
            exp(remote_control,home_office_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,home_office_instance]=True
        close[home_office_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
def is_light_off(room: item):
    # Function to check if there is no light on in the specified room
    symbol light_off = not exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return light_off

behavior turn_on_light(room: item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room)
        achieve is_on(light)
        # Turn on a light inside the specified room

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):
                # Consider all room types
                if is_light_off(room):
                    turn_on_light(room)
                    # Turn on a light if it is off

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'light') at line 5686, column 35.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_light_off(room: item):
    # Function to check if there is no light on in the specified room
    symbol light_off = not exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return light_off

behavior turn_on_light(room: item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room)
        achieve is_on(light)
        # Turn on a light inside the specified room

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):
                # Consider all room types
                if is_light_off(room):
                    turn_on_light(room)
                    # Turn on a light if it is off

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'light') at line 5668, column 35.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_light_off(room: item):
    # Function to check if there is no light on in the specified room
    symbol light_off = not exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return light_off

behavior turn_on_light(room: item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room)
        achieve is_on(light)
        # Turn on a light inside the specified room

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):
                # Consider all room types
                if is_light_off(room):
                    turn_on_light(room)
                    # Turn on a light if it is off

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_light_needed_in_room(room:item):
    # Function to check if there is any light that needs to be turned on in a room
    symbol is_light_needed=exists l: item : (is_light(l) and is_off(l) and inside(l, room))
    return is_light_needed

behavior turn_on_light_in_room(l:item):
    # Behavior to turn on the light in a room
    body:
        achieve_once is_on(l)

behavior __goal__():
    body:
        foreach room: item:
            if (is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room)) and is_light_needed_in_room(room):
                bind light_to_turn_on: item where:
                    is_light(light_to_turn_on) and is_off(light_to_turn_on) and inside(light_to_turn_on, room)
                # Turn on the light that is off in the room
                turn_on_light_in_room(light_to_turn_on)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. turn on a light in any room where the lights are off." ?
Answer: Turn on a light in any room where the lights are off.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def light_is_off_in_room(room: item):
    # Function to check if all lights in the specified room are off
    symbol no_light_on = not exists light: item : (is_light(light) and inside(light, room) and is_on(light))
    return no_light_on

behavior turn_on_light_in_room(room: item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room) and is_off(light)
        # Select a light that is off within the specified room
        achieve_once is_on(light)
        # Turn on the light in the room
        
behavior __goal__():
    body:
        foreach room: item:
            # Iterate over all rooms
            if not visited(room):
                # Check all rooms that have not been visited
                observe(room,"Identify the room and its purpose")
                # Observe each room to identify it and its purpose

        foreach room: item:
            # Iterate over all rooms to ensure there is a light on
            if light_is_off_in_room(room):
                # If all lights in the room are off, turn one on
                turn_on_light_in_room(room)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'light') at line 5668, column 37.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
def light_is_off_in_room(room: item):
    # Function to check if all lights in the specified room are off
    symbol no_light_on = not exists light: item : (is_light(light) and inside(light, room) and is_on(light))
    return no_light_on

behavior turn_on_light_in_room(room: item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room) and is_off(light)
        # Select a light that is off within the specified room
        achieve_once is_on(light)
        # Turn on the light in the room

behavior __goal__():
    body:
        foreach room: item:
            # Iterate over all rooms
            if not visited(room):
                # Check all rooms that have not been visited
                observe(room, "Identify the room and its purpose")
                # Observe each room to identify it and its purpose

        foreach room: item:
            # Iterate over all rooms to ensure there is a light on
            if light_is_off_in_room(room):
                # If all lights in the room are off, turn one on
                turn_on_light_in_room(room)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'light') at line 5667, column 37.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def light_is_off_in_room(room: item):
    # Function to check if all lights in the specified room are off
    symbol no_light_on = not exists light_in_room: item : (is_light(light_in_room) and inside(light_in_room, room) and is_on(light_in_room))
    return no_light_on

behavior turn_on_light_in_room(room: item):
    body:
        bind light_to_turn_on: item where:
            is_light(light_to_turn_on) and inside(light_to_turn_on, room) and is_off(light_to_turn_on)
        # Select a light that is off within the specified room
        achieve_once is_on(light_to_turn_on)
        # Turn on the light in the room

behavior __goal__():
    body:
        foreach room: item:
            # Iterate over all rooms
            if not visited(room):
                # Check all rooms that have not been visited
                observe(room, "Identify the room and its purpose")
                # Observe each room to identify it and its purpose

        foreach room: item:
            # Iterate over all rooms to ensure there is a light on
            if light_is_off_in_room(room):
                # If all lights in the room are off, turn one on
                turn_on_light_in_room(room)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

def has_lights_off(room:item):
    # Function to check if lights are off in a given room
    symbol has_lights_off= exists light: item : (is_light(light) and inside(light, room) and is_off(light))
    return has_lights_off

behavior turn_on_light(room:item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room) and is_off(light)
        achieve_once is_on(light)
        # This will turn on a light that is off in the specified room

behavior __goal__():
    body:
        foreach room: item:
            # Iterate over all rooms to check the lighting condition
            if exists room: item : (has_lights_off(room)):
                # If there is a room where lights are off, turn the light on
                turn_on_light(room)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable room already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_lights_off(room:item):
    # Function to check if lights are off in a given room
    symbol has_lights_off= exists light: item : (is_light(light) and inside(light, room) and is_off(light))
    return has_lights_off

behavior turn_on_light(room:item):
    body:
        bind light: item where:
            is_light(light) and inside(light, room) and is_off(light)
        achieve_once is_on(light)
        # This will turn on a light that is off in the specified room

behavior __goal__():
    body:
        foreach room: item:
            # Iterate over all rooms to check the lighting condition
            if has_lights_off(room):
                # If there is a room where lights are off, turn the light on
                turn_on_light(room)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior turn_on_light_if_off(light:item):
    body:
        if is_off(light):
            achieve is_on(light)

behavior __goal__():
    body:
        bind bathroom_1: item where:
            is_bathroom(bathroom_1) and id[bathroom_1] == 1
        bind bedroom_67: item where:
            is_bedroom(bedroom_67) and id[bedroom_67] == 67
        bind dining_room_201: item where:
            is_dining_room(dining_room_201) and id[dining_room_201] == 201
        bind home_office_319: item where:
            is_home_office(home_office_319) and id[home_office_319] == 319
        
        foreach light_bathroom: item:
            if is_light(light_bathroom) and inside(light_bathroom, bathroom_1):
                turn_on_light_if_off(light_bathroom)

        foreach light_bedroom: item:
            if is_light(light_bedroom) and inside(light_bedroom, bedroom_67):
                turn_on_light_if_off(light_bedroom)

        foreach light_dining: item:
            if is_light(light_dining) and inside(light_dining, dining_room_201):
                turn_on_light_if_off(light_dining)

        foreach light_office: item:
            if is_light(light_office) and inside(light_office, home_office_319):
                turn_on_light_if_off(light_office)
#goal_representation_end

##############################
