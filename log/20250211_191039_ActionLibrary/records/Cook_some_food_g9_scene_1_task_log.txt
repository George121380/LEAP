From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the potatoes.', '2. Cut the potatoes into strips for fries.', '3. Fry the potato strips until they are golden brown.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2107_around_kitchen_counter_123(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_soap_2125_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_rag_2025_around_sink_19(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(rag,sink_instance)
        else:
            exp(rag,sink_instance)
    eff:
        unknown[rag]=False
        close[rag,sink_instance]=True
        close[sink_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_wash_potatoes(potato: item):
    body:
        if dirty(potato):
            wash(potato)
        # Wash the potato if it is found dirty

def find_dirty_potato():
    # Function to check if there is a dirty potato
    symbol has_dirty_potato = exists o: item : (is_food_potato(o) and dirty(o))
    return has_dirty_potato

behavior __goal__():
    body:
        if find_dirty_potato():
            # If theres a known dirty potato, find it and wash it
            bind potato: item where:
                is_food_potato(potato) and dirty(potato)
            find_and_wash_potatoes(potato)
        else:
            # If no dirty potatoes are known, check all unvisited potatoes
            foreach potato: item:
                if is_food_potato(potato) and not visited(potato):
                    observe(potato, "Check if it is dirty")
                    # Observe whether each potato is dirty and wash if needed

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_wash_potatoes(potato: item):
    body:
        if dirty(potato):
            wash(potato)
        # Wash the potato if it is found dirty

def find_dirty_potato():
    # Function to check if there is a dirty potato
    symbol has_dirty_potato = exists o: item : (is_food_potato(o) and dirty(o))
    return has_dirty_potato

behavior __goal__():
    body:
        if find_dirty_potato():
            # If theres a known dirty potato, find it and wash it
            bind potato: item where:
                is_food_potato(potato) and dirty(potato)
            find_and_wash_potatoes(potato)
        else:
            # If no dirty potatoes are known, check all unvisited potatoes
            foreach potato: item:
                if is_food_potato(potato) and not visited(potato):
                    observe(potato, "Check if it is dirty")
                    # Observe whether each potato is dirty and wash if needed

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(food_potato_2107, kitchen_counter_123)walk_executor(food_potato_2107)obs(food_potato_2107, Check if it is dirty)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(food_potato_2107, kitchen_counter_123)
Fail to find food_potato_2107 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_potato_2107, kitchen_counter_119)walk_executor(food_potato_2107)obs(food_potato_2107, Check if it is dirty)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_potato_2107, kitchen_counter_119)
Fail to find food_potato_2107 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2142)exp(food_potato_2107, bowl_2142)walk_executor(food_potato_2107)obs(food_potato_2107, Check if it is dirty)
##############################
From agent.py
walk_executor(bowl_2142)
Robot find: iron_2161, Robot is close to the kitchen_counter_119. Robot is close to the bowl_2142. 
##############################
From agent.py
exp(food_potato_2107, bowl_2142)
Fail to find food_potato_2107 around bowl_2142. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)exp(food_potato_2107, bowl_2140)walk_executor(food_potato_2107)obs(food_potato_2107, Check if it is dirty)
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the bowl_2140. 
##############################
From agent.py
exp(food_potato_2107, bowl_2140)
Fail to find food_potato_2107 around bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(food_potato_2107, kitchen_counter_122)walk_executor(food_potato_2107)obs(food_potato_2107, Check if it is dirty)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(food_potato_2107, kitchen_counter_122)
Fail to find food_potato_2107 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_potato_2107, cupboard_118)walk_executor(food_potato_2107)obs(food_potato_2107, Check if it is dirty)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find food_potato_2107 ?
Answer: Go to the dining room (dining_room_41) and locate fridge_126. Inside fridge_126, you will find the target item, food_potato_2107.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the dining room (dining_room_41) and locate fridge_126. Inside fridge_126, you will find the target item, food_potato_2107.

The actions you have taken:
Action 1: Walk to kitchen_counter_123.
Action 2: look for food_potato_2107 around kitchen_counter_123.
Action 3: Walk to kitchen_counter_119.
Action 4: look for food_potato_2107 around kitchen_counter_119.
Action 5: Walk to bowl_2142.
Action 6: look for food_potato_2107 around bowl_2142.
Action 7: Walk to bowl_2140.
Action 8: look for food_potato_2107 around bowl_2140.
Action 9: Walk to kitchen_counter_122.
Action 10: look for food_potato_2107 around kitchen_counter_122.
Action 11: Walk to cupboard_118.
Action 12: Open cupboard_118.

##############################
From agent.py
exp(food_potato_2107, cupboard_118)
Fail to find food_potato_2107 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_potato_2107, fridge_126)walk_executor(food_potato_2107)obs(food_potato_2107, Check if it is dirty)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_potato_2107, fridge_126)
Find food_potato_2107. 
##############################
From agent.py-> find a plan in act()
obs(food_potato_2107, Check if it is dirty)
##############################
From agent.py
obs(food_potato_2107, Check if it is dirty)
Get this information:  food_potato_2107 is close to fridge_126. food_potato_2107 is close to character_240. food_potato_2107 is inside dining_room_41. food_potato_2107 is inside fridge_126. food_potato_2107 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_clean(potato:item):
    # Function to check if the potato is clean
    return clean(potato)

behavior cut_potatoes_for_fries(potato:item, knife:item, cutting_board:item):
    body:
        achieve_once on(potato, cutting_board)
        # Place the potato on the cutting board
        achieve_once inhand(knife)
        # Hold the knife in hand temporarily
        achieve cut(potato)
        # Cut the potato into strips for fries

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Select the fridge with ID 126
        bind potato: item where:
            is_food_potato(potato) and close_char(char, fridge)
        # Select a potato that is close to the fridge
        if not is_clean(potato):
            observe(potato, "Check if it is dirty")
            # Observe the potato to check if it is dirty

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_potatoes_for_fries(potato, knife, cutting_board)
        # Cut the potatoes into strips for fries

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_clean(potato:item):
    # Function to check if the potato is clean
    return clean(potato)

behavior cut_potatoes_for_fries(potato:item, knife:item, cutting_board:item):
    body:
        achieve_once on(potato, cutting_board)
        # Place the potato on the cutting board
        achieve_once inhand(knife)
        # Hold the knife in hand temporarily
        achieve cut(potato)
        # Cut the potato into strips for fries

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Select the fridge with ID 126
        bind potato: item where:
            is_food_potato(potato) and close_char(char, fridge)
        # Select a potato that is close to the fridge
        if not is_clean(potato):
            observe(potato, "Check if it is dirty")
            # Observe the potato to check if it is dirty

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_potatoes_for_fries(potato, knife, cutting_board)
        # Cut the potatoes into strips for fries

##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_potato_2107 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_potato_2107, cutting_board_2123)
Robot find: Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_potato_2107. food_potato_2107 is close cutting_board_2123. food_potato_2107 is on cutting_board_2123. food_potato_2107 released by right hand. 
##############################
From agent.py
walk_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. 
##############################
From agent.py
grab_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. Grabbing knife_2035 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
cut_executor(food_potato_2107)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_213_around_mousepad_279(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==279
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2013_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan(x: item):
    # Function to check if an item is a frying pan
    return is_fryingpan(x)

def is_stove(x: item):
    # Function to check if an item is a stove
    return is_stove(x)

def on_stove(x: item, stove: item):
    # Function to check if an item is on the stove
    return on(x, stove)

def fry_potatoes(potatoes: item, fryingpan: item):
    body:
        achieve_once inside(potatoes, fryingpan) 
        # Place the potatoes into the frying pan

behavior heat_fryingpan(fryingpan: item):
    body:
        bind stove: item where:
            is_stove(stove)
        achieve_once is_on(stove)

behavior fry_to_golden_brown(potatoes: item, fryingpan: item):
    body:
        fry_potatoes(potatoes, fryingpan)
        heat_fryingpan(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)

        fry_to_golden_brown(potatoes, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5435, column 9.
Expected one of: 
	* DOUBLE_EQUAL
	* GREATER_EQ
	* STAR
	* LESS_EQ
	* __ANON_3
	* __ANON_2
	* MORETHAN
	* _NEWLINE
	* AND
	* __ANON_5
	* AT
	* __ANON_8
	* SLASH
	* LSHIFT
	* PLUS
	* __ANON_1
	* __ANON_6
	* LESSTHAN
	* OR
	* IF
	* __ANON_0
	* __ANON_4
	* NOT_EQ
	* VBAR
	* FLOORDIV
	* MINUS
	* AMPERSAND
	* __ANON_7
	* RSHIFT
	* EQUAL
	* PERCENT
	* SEMICOLON
	* CIRCUMFLEX
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_280_around_mousepad_279(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==279
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_wooden_spoon_2000_around_knifeblock_76(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(wooden_spoon,knifeblock_instance)
        else:
            exp(wooden_spoon,knifeblock_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,knifeblock_instance]=True
        close[knifeblock_instance,wooden_spoon]=True
    

behavior find_oil_2149_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

#goal_representation
 
def is_fryingpan(x: item):
    # Function to check if an item is a frying pan
    return is_fryingpan(x)

def is_stove(x: item):
    # Function to check if an item is a stove
    return is_stove(x)

def fry_potatoes(potatoes: item, fryingpan: item):
    body:
        achieve_once inside(potatoes, fryingpan) 
        # Place the potatoes into the frying pan

behavior heat_fryingpan(fryingpan: item):
    body:
        bind stove: item where:
            is_stove(stove)
        achieve_once on(fryingpan, stove)
        achieve is_on(stove)

behavior fry_to_golden_brown(potatoes: item, fryingpan: item):
    body:
        fry_potatoes(potatoes, fryingpan)
        heat_fryingpan(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)

        fry_to_golden_brown(potatoes, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5413, column 9.
Expected one of: 
	* DOUBLE_EQUAL
	* GREATER_EQ
	* STAR
	* LESS_EQ
	* __ANON_3
	* __ANON_2
	* MORETHAN
	* _NEWLINE
	* AND
	* __ANON_5
	* AT
	* __ANON_8
	* SLASH
	* LSHIFT
	* PLUS
	* __ANON_1
	* __ANON_6
	* LESSTHAN
	* OR
	* IF
	* __ANON_0
	* __ANON_4
	* NOT_EQ
	* VBAR
	* FLOORDIV
	* MINUS
	* AMPERSAND
	* __ANON_7
	* RSHIFT
	* EQUAL
	* PERCENT
	* SEMICOLON
	* CIRCUMFLEX
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_280_around_computer_209(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==209
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2149_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

#goal_representation
 
def is_fryingpan(x: item):
    # Function to check if an item is a frying pan
    return is_fryingpan(x)

def is_stove(x: item):
    # Function to check if an item is a stove
    return is_stove(x)

def fry_potatoes(potatoes: item, fryingpan: item):
    # Function to place potatoes in the frying pan
    achieve_once inside(potatoes, fryingpan) 

behavior heat_fryingpan(fryingpan: item):
    body:
        bind stove: item where:
            is_stove(stove)
        achieve_once on(fryingpan, stove)
        achieve is_on(stove)

behavior fry_to_golden_brown(potatoes: item, fryingpan: item):
    body:
        fry_potatoes(potatoes, fryingpan)
        heat_fryingpan(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)

        fry_to_golden_brown(potatoes, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_280_around_mousepad_279(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==279
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_glue_2045_around_desk_272(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(glue,desk_instance)
        else:
            exp(glue,desk_instance)
    eff:
        unknown[glue]=False
        close[glue,desk_instance]=True
        close[desk_instance,glue]=True
    

behavior find_oil_2149_around_fryingpan_2154(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2154
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(oil,fryingpan_instance)
        else:
            exp(oil,fryingpan_instance)
    eff:
        unknown[oil]=False
        close[oil,fryingpan_instance]=True
        close[fryingpan_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior fry_potato_strips(stove:item, fryingpan:item, potato_strips:item):
    body:
        achieve_once inside(potato_strips, fryingpan) # Place the potato strips inside the fryingpan
        achieve_once on(fryingpan, stove) # Place the fryingpan on the stove
        achieve is_on(stove) # Turn on the stove to heat the fryingpan
        # Continuously fry until potato strips are done
        observe(potato_strips, "Check if they are golden brown") 

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a fryingpan
        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select the cut potato strips
        fry_potato_strips(stove, fryingpan, potato_strips)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_213_around_mousepad_279(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==279
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_clothes_scarf_2120_around_basket_for_clothes_2078(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_scarf,basket_for_clothes_instance)
        else:
            exp(clothes_scarf,basket_for_clothes_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_scarf]=True
    

behavior find_oil_2149_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_wooden_spoon_2000_around_knifeblock_76(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(wooden_spoon,knifeblock_instance)
        else:
            exp(wooden_spoon,knifeblock_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,knifeblock_instance]=True
        close[knifeblock_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potato_strips(potato_strips: item, fryingpan: item, stove: item):
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        achieve_once inside(potato_strips, fryingpan)
        # Put the potato strips inside the frying pan
        
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        
        achieve is_on(stove)
        # Turn on the stove

        achieve close_char(char, fryingpan)
        # Stay close to the frying pan

behavior __goal__():
    body:
        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select the cut potato strips to fry

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind stove: item where:
            is_stove(stove)
        
        fry_potato_strips(potato_strips, fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable fryingpan already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_wooden_spoon_2000_around_knifeblock_76(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(wooden_spoon,knifeblock_instance)
        else:
            exp(wooden_spoon,knifeblock_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,knifeblock_instance]=True
        close[knifeblock_instance,wooden_spoon]=True
    

behavior find_oil_2013_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_mouse_213_around_mousepad_279(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==279
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#goal_representation
 
behavior fry_potato_strips(potato_strips: item, fryingpan: item, stove: item):
    body:
        achieve_once inside(potato_strips, fryingpan)
        # Put the potato strips inside the frying pan
        
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove
        
        achieve is_on(stove)
        # Turn on the stove

        achieve close_char(char, fryingpan)
        # Stay close to the frying pan

behavior __goal__():
    body:
        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select the cut potato strips to fry

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind stove: item where:
            is_stove(stove)
        
        fry_potato_strips(potato_strips, fryingpan, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. fry the potato strips until they are golden brown." ?
Answer: Turn on the stove and add some oil. Put the potato pieces in the frying pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Turn on the stove, add some oil, and put the potato pieces in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_213_around_mousepad_279(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==279
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_clothes_scarf_2120_around_couch_198(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(clothes_scarf,couch_instance)
        else:
            exp(clothes_scarf,couch_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,couch_instance]=True
        close[couch_instance,clothes_scarf]=True
    

behavior find_glue_2045_around_computer_276(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(glue,computer_instance)
        else:
            exp(glue,computer_instance)
    eff:
        unknown[glue]=False
        close[glue,computer_instance]=True
        close[computer_instance,glue]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_oil_to_fryingpan(oil:item, fryingpan:item):
    body:
        achieve_once inside(oil, fryingpan)
        # Add oil into the frying pan

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior put_potato_in_fryingpan(potato:item, fryingpan:item):
    body:
        achieve_once inside(potato, fryingpan)
        # Place the potato pieces into the frying pan

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Bind potato item
        
        bind oil: item where:
            is_oil(oil)
        # Bind oil item
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind frying pan item

        bind stove: item where:
            is_stove(stove)
        # Bind stove item

        add_oil_to_fryingpan(oil, fryingpan)
        turn_on_stove(stove)
        put_potato_in_fryingpan(potato, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_oil_to_fryingpan(oil:item, fryingpan:item):
    body:
        achieve_once inside(oil, fryingpan)
        # Add oil into the frying pan

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior put_potato_in_fryingpan(potato:item, fryingpan:item):
    body:
        achieve_once inside(potato, fryingpan)
        # Place the potato pieces into the frying pan

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Bind potato item
        
        bind oil: item where:
            is_oil(oil)
        # Bind oil item
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind frying pan item

        bind stove: item where:
            is_stove(stove)
        # Bind stove item

        add_oil_to_fryingpan(oil, fryingpan)
        turn_on_stove(stove)
        put_potato_in_fryingpan(potato, fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(fryingpan_2154)putin_executor(food_potato_2107, fryingpan_2154)
##############################
From agent.py
walk_executor(oil_2149)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. 
##############################
From agent.py
grab_executor(oil_2149)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_123. Robot is close to the oil_2149. Grabbing oil_2149 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(oil_2149, fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the oil_2149. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. oil_2149 is inside fryingpan_2154. fryingpan_2154 is close oil_2149. oil_2149 is close fryingpan_2154. oil_2149 released by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Grabbing food_potato_2107 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the food_potato_2107. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(food_potato_2107, fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the food_potato_2107. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. food_potato_2107 is close fryingpan_2154. fryingpan_2154 is close food_potato_2107. food_potato_2107 is inside fryingpan_2154. food_potato_2107 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make some French fries.
Action History:
['walk_executor(kitchen_counter_123)', 'walk_executor(kitchen_counter_119)', 'walk_executor(bowl_2142)', 'walk_executor(bowl_2140)', 'walk_executor(kitchen_counter_122)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_potato_2107)', 'walk_executor(cutting_board_2123)', 'put_executor(food_potato_2107, cutting_board_2123)', 'walk_executor(knife_2035)', 'grab_executor(knife_2035)', 'walk_executor(food_potato_2107)', 'cut_executor(food_potato_2107)', 'walk_executor(oil_2149)', 'grab_executor(oil_2149)', 'walk_executor(fryingpan_2154)', 'putin_executor(oil_2149, fryingpan_2154)', 'walk_executor(stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_potato_2107)', 'grab_executor(food_potato_2107)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_potato_2107, fryingpan_2154)']
Time info:
Time consume: 312 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 9
goal generate times: 6
goal correct times: 1
action_num: 27

Task complete rate:
Keystate: k1 - Requires: 13 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
