Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
cdl_dataset/dataset/Cook_some_food/g4.txt,k1,"missed actions: walk_executor(pot_2069);open_executor(pot_2069);walk_executor(fridge_289);switchoff_
executor(fridge_289);open_executor(fridge_289);walk_executor(food_vegetable_2041);grab_executor(food
_vegetable_2041);walk_executor(pot_2069);putin_executor(food_vegetable_2041, pot_2069);grab_executor
(pot_2069);walk_executor(stove_2065);put_executor(pot_2069, stove_2065);switchon_executor(stove_2065
);",missed action num: 386,,
cdl_dataset/dataset/Cook_some_food/g4.txt,k2,"missed actions: walk_executor(pot_2069);open_executor(pot_2069);walk_executor(fridge_289);switchoff_
executor(fridge_289);open_executor(fridge_289);walk_executor(food_vegetable_2041);grab_executor(food
_vegetable_2041);walk_executor(pot_2069);putin_executor(food_vegetable_2041, pot_2069);walk_executor
(stove_2065);open_executor(stove_2065);walk_executor(pot_2069);grab_executor(pot_2069);walk_executor
(stove_2065);putin_executor(pot_2069, stove_2065);close_executor(stove_2065);switchon_executor(stove
_2065);",missed action num: 491,,
cdl_dataset/dataset/Cook_some_food/g4.txt,k3,"missed actions: walk_executor(fridge_289);switchoff_executor(fridge_289);open_executor(fridge_289);w
alk_executor(pot_2069);grab_executor(pot_2069);walk_executor(fridge_289);putin_executor(pot_2069, fr
idge_289);",missed action num: 194,,
"Reset goals: The sub-goals are: 
['1. Wash all the vegetables.', '2. Put the vegetables in a pot and boil them on the stove.', '3. St
ore the whole pot in the fridge.']",,,,,
" 
def is_sink_with_vegetables(sink:item):
    # Function to check if there are vegetables in a specified sink
    symbol has_vegetables=exists o: item : is_food_vegetable(o) and inside(o, sink)
    return has_vegetables

behavior clean_vegetables(o:item, sink:item):
    body:
        achieve inside(o, sink) # Place the vegetable inside the sink
        wash(o) # Wash the vegetable

behavior __goal__():
    body:
        if exists sink: item : is_sink(sink) and is_sink_with_vegetables(sink):
            # Check if a sink with vegetables is known based on available information
            bind sink: item where:
                is_sink(sink) and is_sink_with_vegetables(sink)
            # Select the sink with vegetables
            foreach vegetable: item:
                if is_food_vegetable(vegetable) and inside(vegetable, sink):
                    clean_vegetables(vegetable, sink)

        else:
            # If no sink with vegetables is confirmed, inspect all unvisited sinks
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, ""Check is there any vegetables in the sink"")
",From function reset_goal,,,,
,,,,,"(CrowControllerApplier<walk_executor(sink_42)>, CrowControllerApplier<obs(sink_42, Check is there an
y vegetables in the sink)>, CrowControllerApplier<walk_executor(sink_231)>, CrowControllerApplier<ob
s(sink_231, Check is there any vegetables in the sink)>)"
" 
def can_use_sink_42(sink:item):
    symbol can_use=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return can_use

behavior clean_vegetables(vegetable:item, sink:item):
    body:
        achieve inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink

        if can_use_sink_42(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If sink_42 has a faucet, turn it on for washing

        wash(vegetable) # Wash the vegetable

        if can_use_sink_42(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # If sink_42 has a faucet, turn it off after washing

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select sink with ID 42
        
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and dirty(vegetable):
                clean_vegetables(vegetable, sink)
",From function reset_sub_goal,,,,
cdl_dataset/dataset/Cook_some_food/g4.txt,k1,"missed actions: walk_executor(pot_2069);open_executor(pot_2069);walk_executor(fridge_289);switchoff_
executor(fridge_289);open_executor(fridge_289);walk_executor(food_vegetable_2041);grab_executor(food
_vegetable_2041);walk_executor(pot_2069);putin_executor(food_vegetable_2041, pot_2069);grab_executor
(pot_2069);walk_executor(stove_2065);put_executor(pot_2069, stove_2065);switchon_executor(stove_2065
);",missed action num: 386,,
cdl_dataset/dataset/Cook_some_food/g4.txt,k2,"missed actions: walk_executor(pot_2069);open_executor(pot_2069);walk_executor(fridge_289);switchoff_
executor(fridge_289);open_executor(fridge_289);walk_executor(food_vegetable_2041);grab_executor(food
_vegetable_2041);walk_executor(pot_2069);putin_executor(food_vegetable_2041, pot_2069);walk_executor
(stove_2065);open_executor(stove_2065);walk_executor(pot_2069);grab_executor(pot_2069);walk_executor
(stove_2065);putin_executor(pot_2069, stove_2065);close_executor(stove_2065);switchon_executor(stove
_2065);",missed action num: 491,,
"Reset goals: The sub-goals are: 
['1. Wash all the vegetables.', '2. Put the washed vegetables in a pot and boil them on the stove.',
 '3. Store the whole pot in the fridge.']",,,,,
" 
behavior wash_vegetables(vegetable:item, sink:item):
    body:
        achieve inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink

        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            wash(vegetable) # This is the key step of the behavior, used for washing vegetables
            achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink with ID 42
        
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and dirty(vegetable):
                # For each vegetable that is dirty, wash it in the sink
                wash_vegetables(vegetable, sink)
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Wash all the vegetables.', '2. Put the vegetables in a pot and boil them on the stove.', '3. St
ore the pot in the fridge.']",,,,,
" 
behavior clean_vegetable_in_sink(vegetable:item, sink:item):
    body:
        achieve inside(vegetable, sink)
        # Place the vegetable inside the sink for washing

        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet if it is close to the sink

            wash(vegetable)
            # Wash the vegetable using the faucets water

            achieve_once is_off(faucet)
            # Turn off the faucet after washing

        else:
            wash(vegetable)
            # Perform washing even if there is no faucet

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable) and dirty(vegetable)
        # Select the dirty vegetable

        bind sink: item where:
            is_sink(sink)
        # Select the sink for washing

        clean_vegetable_in_sink(vegetable, sink)
        # Execute the cleaning behavior
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Wash all the vegetables.', '2. Put the vegetables in a pot and boil them on the stove.', '3. St
ore the pot in the fridge.']",,,,,
" 
behavior wash_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is in the sink
        
        if exists faucet: item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            wash(vegetable)
            achieve_once is_off(faucet)
        else:
            wash(vegetable)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select sink with ID 42

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and dirty(vegetable):
                wash_vegetable(vegetable, sink)
",From function reset_goal,,,,
cdl_dataset/dataset/Cook_some_food/g4.txt,k1,"missed actions: walk_executor(pot_2069);open_executor(pot_2069);walk_executor(fridge_289);switchoff_
executor(fridge_289);open_executor(fridge_289);walk_executor(food_vegetable_2041);grab_executor(food
_vegetable_2041);walk_executor(pot_2069);putin_executor(food_vegetable_2041, pot_2069);grab_executor
(pot_2069);walk_executor(stove_2065);put_executor(pot_2069, stove_2065);switchon_executor(stove_2065
);",missed action num: 386,,
cdl_dataset/dataset/Cook_some_food/g4.txt,k2,"missed actions: walk_executor(pot_2069);open_executor(pot_2069);walk_executor(fridge_289);switchoff_
executor(fridge_289);open_executor(fridge_289);walk_executor(food_vegetable_2041);grab_executor(food
_vegetable_2041);walk_executor(pot_2069);putin_executor(food_vegetable_2041, pot_2069);walk_executor
(stove_2065);open_executor(stove_2065);walk_executor(pot_2069);grab_executor(pot_2069);walk_executor
(stove_2065);putin_executor(pot_2069, stove_2065);close_executor(stove_2065);switchon_executor(stove
_2065);",missed action num: 491,,
cdl_dataset/dataset/Cook_some_food/g4.txt,k1,"missed actions: walk_executor(pot_2069);open_executor(pot_2069);walk_executor(fridge_289);switchoff_
executor(fridge_289);open_executor(fridge_289);walk_executor(food_vegetable_2041);grab_executor(food
_vegetable_2041);walk_executor(pot_2069);putin_executor(food_vegetable_2041, pot_2069);grab_executor
(pot_2069);walk_executor(stove_2065);put_executor(pot_2069, stove_2065);switchon_executor(stove_2065
);",missed action num: 386,,
cdl_dataset/dataset/Cook_some_food/g4.txt,k2,"missed actions: walk_executor(pot_2069);open_executor(pot_2069);walk_executor(fridge_289);switchoff_
executor(fridge_289);open_executor(fridge_289);walk_executor(food_vegetable_2041);grab_executor(food
_vegetable_2041);walk_executor(pot_2069);putin_executor(food_vegetable_2041, pot_2069);walk_executor
(stove_2065);open_executor(stove_2065);walk_executor(pot_2069);grab_executor(pot_2069);walk_executor
(stove_2065);putin_executor(pot_2069, stove_2065);close_executor(stove_2065);switchon_executor(stove
_2065);",missed action num: 491,,
cdl_dataset/dataset/Cook_some_food/g4.txt,k3,"missed actions: walk_executor(fridge_289);switchoff_executor(fridge_289);open_executor(fridge_289);w
alk_executor(pot_2069);grab_executor(pot_2069);walk_executor(fridge_289);putin_executor(pot_2069, fr
idge_289);",missed action num: 194,,
