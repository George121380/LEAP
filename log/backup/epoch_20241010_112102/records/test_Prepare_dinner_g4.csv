Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
k1,"missed actions: walk_executor(pot_2069);grab_executor(pot_2069);walk_executor(faucet_43);switchon_ex
ecutor(faucet_43);switchoff_executor(faucet_43);walk_executor(pot_2069);open_executor(pot_2069);walk
_executor(fridge_289);switchoff_executor(fridge_289);open_executor(fridge_289);walk_executor(food_ri
ce_2036);grab_executor(food_rice_2036);walk_executor(pot_2069);putin_executor(food_rice_2036, pot_20
69);walk_executor(stove_2065);put_executor(pot_2069, stove_2065);switchon_executor(stove_2065);",,,,
k2,"missed actions: walk_executor(fridge_289);switchoff_executor(fridge_289);open_executor(fridge_289);w
alk_executor(food_egg_2020);grab_executor(food_egg_2020);walk_executor(fryingpan_2083);putin_executo
r(food_egg_2020, fryingpan_2083);walk_executor(oil_2079);grab_executor(oil_2079);walk_executor(fryin
gpan_2083);putin_executor(oil_2079, fryingpan_2083);walk_executor(food_rice_2036);grab_executor(food
_rice_2036);walk_executor(fryingpan_2083);putin_executor(food_rice_2036, fryingpan_2083);grab_execut
or(fryingpan_2083);walk_executor(stove_2065);put_executor(fryingpan_2083, stove_2065);switchon_execu
tor(stove_2065);",,,,
"Reset goals: The sub-goals are: 
['1. Cook the rice.', '2. Scramble the eggs.', '3. Combine rice and eggs, mixing and seasoning to ta
ste.']",,,,,
" 
behavior cook_rice(rice:item, water:item, pot:item, stove:item):
    body:
        achieve_once inside(rice, pot)
        achieve_once inside(water, pot)
        # Ensure that both rice and water are inside the pot

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve plugged(stove)
        # Plug in the stove before using it

        achieve is_on(stove)
        # Turn on the stove to cook the rice

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice for cooking

        bind water: item where:
            has_water(water)
        # Select water for cooking

        bind pot: item where:
            is_pot(pot)
        # Select a pot for cooking

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking

        cook_rice(rice, water, pot, stove)
",From function reset_goal,,,,
,,,,"Record from func query_human in agent.py
Question: Can you tell me how to cook the rice.
Answer: I don't know.
",
,,,,"Record from func query_human in agent.py
Question: Can you tell me how to scramble the eggs.
Answer: I don't know.
",
,,,,"Record from func query_human in agent.py
Question: Can you tell me how to combine rice and eggs, mixing and seasoning to taste.
Answer: I don't know.
",
"Reset goals: The sub-goals are: 
['1. Cook the rice.', '2. Scramble the egg.', '3. Combine the rice and egg in a pan and stir-fry.']",,,,,
" 
def has_water_in_pot(pot:item):
    # Function to check if a pot has water
    symbol water_in_pot=has_water(pot)
    return water_in_pot

def is_pot_ready_for_cooking(pot:item):
    # Function to see if a pot is clean, has water, and is closed
    symbol is_ready=(clean(pot) and has_water_in_pot(pot))
    return is_ready

behavior clean_pot(pot:item):
    body:
        if dirty(pot):
            wash(pot)

behavior fill_pot_with_water(pot:item):
    body:
        if not has_water_in_pot(pot):
            achieve has_water(pot)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind pot: item where:
            is_pot(pot)

        if not visited(pot):
            observe(pot, ""Check if the pot is clean and has water"")

        if not is_pot_ready_for_cooking(pot):
            clean_pot(pot)
            fill_pot_with_water(pot)
        
        achieve inside(rice, pot)        
",From function reset_goal,,,,
,,,,,"(CrowControllerApplier<walk_executor(kitchen_counter_230)>, CrowControllerApplier<exp(pot_2069, kitc
hen_counter_230)>, CrowControllerApplier<walk_executor(pot_2069)>, CrowControllerApplier<open_execut
or(pot_2069)>, CrowControllerApplier<obs(pot_2069, Check if the pot is clean and has water)>, CrowCo
ntrollerApplier<grab_executor(pot_2069)>, CrowControllerApplier<walk_executor(faucet_43)>, CrowContr
ollerApplier<switchon_executor(faucet_43)>, CrowControllerApplier<switchoff_executor(faucet_43)>, Cr
owControllerApplier<walk_executor(kitchen_counter_230)>, CrowControllerApplier<exp(food_rice_2036, k
itchen_counter_230)>, CrowControllerApplier<walk_executor(food_rice_2036)>, CrowControllerApplier<gr
ab_executor(food_rice_2036)>, CrowControllerApplier<walk_executor(pot_2069)>, CrowControllerApplier<
putin_executor(food_rice_2036, pot_2069)>)"
,,walk_executor(kitchen_counter_230),"Find remote_control_2052. Find napkin_2005. Find knife_2050. Find cutting_board_2051. Find cup_2063.
 Find cup_2064. Find pot_2069. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. 
Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is i
nside dining_room_201. Robot is close remote_control_2052. Robot is close kitchen_counter_230. Grabb
ing remote_control_2052 by right hand. Robot is on couch_352. Grabbing remote_control_2052 by left h
and. ",,
Checking k1,Evaluator failed to find a plan,,,,
,,"exp(pot_2069, kitchen_counter_230)",Find pot_2069. ,,
Checking k1,Evaluator failed to find a plan,,,,
"Reset goals: The sub-goals are: 
['1. Prepare the egg and rice separately.', '2. Cook the rice with the egg.', '3. Serve the fried ri
ce with egg on a plate.']",,,,,
" 
def is_kitchen_counter_with_items(counter:item):
    # Function to check if the kitchen counter has items needed for preparation
    symbol has_items=exists o: item : (is_pot(o) or is_fryingpan(o) or is_food_egg(o) or is_food_ric
e(o)) and close(o, counter)
    return has_items

behavior gather_preparation_items(pot:item, fryingpan:item, egg:item, rice:item):
    body:
        if not close_char(char, pot):
            achieve close_char(char, pot)
        if not close_char(char, fryingpan):
            achieve close_char(char, fryingpan)
        if not close_char(char, egg):
            achieve close_char(char, egg)
        if not close_char(char, rice):
            achieve close_char(char, rice)

behavior __goal__():
    body:
        if exists counter: item : is_kitchen_counter(counter) and is_kitchen_counter_with_items(coun
ter):
            # Locate the kitchen counter with necessary items based on the known information
            bind counter: item where:
                is_kitchen_counter(counter) and is_kitchen_counter_with_items(counter)
            # Gather items for preparation
            bind pot: item where:
                is_pot(pot) and close(pot, counter)
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and close(fryingpan, counter)
            bind egg: item where:
                is_food_egg(egg) and close(egg, counter)
            bind rice: item where:
                is_food_rice(rice) and close(rice, counter)
            gather_preparation_items(pot, fryingpan, egg, rice)

        else:
            # If no counter with necessary items is found, search and gather items manually
            foreach counter: item:
                if is_kitchen_counter(counter) and not visited(counter):
                    observe(counter, ""Gather necessary items for egg and rice preparation"")
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Cook the rice and scramble the eggs.  ', '2. Combine the cooked rice and scrambled eggs, and st
ir-fry together.']",,,,,
" 
def has_food_on_counter(kitchen_counter: item):
    # Function to check if there is food on the kitchen counter
    symbol has_food=exists o: item : is_food(o) and on(o, kitchen_counter)
    return has_food

behavior cook_rice_and_scramble_eggs(pot: item, fryingpan: item):
    # Behavior to cook the rice in a pot and scramble eggs in a frying pan
    body:
        achieve clean(pot)
        achieve has_water(pot)
        # Pot should be cleaned and filled with water for cooking rice
        bind stove: item where:
            is_stove(stove)
        # Find a stove for cooking

        achieve on(pot, stove)
        # Place the pot with water on the stove
        achieve is_on(stove)
        # Turn the stove on to start cooking rice
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg for scrambling
        
        achieve_once inhand(egg)
        # Temporarily hold the egg to crack it
        
        achieve on(fryingpan, stove)
        # Place a frying pan on the stove
        achieve clean(fryingpan)
        # Ensure the frying pan is clean
        
        achieve inhand(fryingpan)
        # Hold the frying pan to scramble the eggs

        achieve is_off(stove)
        # Turn off the stove when done cooking

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and has_food_on_counter(kitchen_counter)
        # Find a kitchen counter with food
        
        bind pot: item where:
            is_pot(pot) and close(pot, kitchen_counter)
        # Select a pot close to the kitchen counter
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and close(fryingpan, kitchen_counter)
        # Select a frying pan close to the kitchen counter
        
        cook_rice_and_scramble_eggs(pot, fryingpan)
",From function reset_goal,,,,
,,,,"Record from func query_human in agent.py
Question: Can you teach me how to ""1. cook the rice and scramble the eggs.  "" ?
Answer: I don't know.
",
" 
def has_rice_inside(pot:item):
    # Function to check if there is rice inside the pot
    symbol has_rice = exists o: item : is_food_rice(o) and inside(o, pot)
    return has_rice

def has_egg_nearby(fryingpan:item):
    # Function to check if there is an egg near the frying pan
    symbol has_egg = exists o: item : is_food_egg(o) and close(o, fryingpan)
    return has_egg

behavior cook_rice(pot:item, stove:item):
    body:
        if has_rice_inside(pot):
            achieve inside(pot, stove) # Place the pot on the stove
            achieve is_on(stove) # Turn on the stove

behavior scramble_eggs(fryingpan:item, stove:item):
    body:
        if has_egg_nearby(fryingpan):
            achieve inside(fryingpan, stove) # Place the frying pan on the stove
            achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_rice_inside(pot)
        bind stove: item where:
            is_stove(stove)
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and has_egg_nearby(fryingpan)

        cook_rice(pot, stove)
        scramble_eggs(fryingpan, stove)
",From function reset_sub_goal,,,,
"Reset goals: The sub-goals are: 
['1. Cook the rice with egg.  ', '2. Combine the cooked rice and egg in a pan and mix until evenly c
ooked.']",,,,,
" 
def is_food_rice_or_egg(item:item):
    # Function to check if an item is rice or egg
    return is_food_rice(item) or is_food_egg(item)

def is_fryingpan_prepared(fryingpan:item):
    # Function to check if the frying pan is prepared for cooking
    symbol has_rice_or_egg=exists o: item : is_food_rice_or_egg(o) and inside(o, fryingpan)
    return has_rice_or_egg

behavior prepare_fryingpan(fryingpan:item, pot:item):
    body:
        # Ensure rice is transferred from pot to frying pan
        foreach rice: item:
            if is_food_rice(rice) and inside(rice, pot):
                achieve inside(rice, fryingpan)

        # Ensure egg is placed in frying pan
        foreach egg: item:
            if is_food_egg(egg) and inside(egg, pot):
                achieve inside(egg, fryingpan)
                
behavior cook_rice_with_egg(fryingpan:item):
    body:
        achieve is_on(fryingpan) # Turn on the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        if not is_fryingpan_prepared(fryingpan):
            prepare_fryingpan(fryingpan, pot)
        # Prepare the frying pan with rice and egg from the pot
        
        cook_rice_with_egg(fryingpan)
        # Cook rice with egg in the frying pan
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Cook the rice.', '2. Scramble the eggs.', '3. Combine the cooked rice and scrambled eggs, and f
ry them together.']",,,,,
" 
behavior cook_rice(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Select the found pot

        cook_rice(pot)
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Cook the rice.', '2. Prepare the ingredients for fried rice with egg (including eggs, vegetable
s, and seasoning).', '3. Fry the rice with the prepared ingredients.', '4. Serve the fried rice.']",,,,,
" 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        
behavior boil_water_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)
        
behavior add_rice_to_pot(pot:item, rice:item):
    body:
        achieve inside(rice, pot)
        
behavior cook_rice(pot:item, stove:item, rice:item):
    body:
        fill_pot_with_water(pot)
        boil_water_on_stove(pot, stove)
        add_rice_to_pot(pot, rice)
        # Further conditions to ensure rice is cooked can be added based on additional details known
    
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind rice: item where:
            is_food_rice(rice)
        cook_rice(pot, stove, rice)
",From function reset_goal,,,,
Checking k1,Evaluator failed to find a plan,,,,
Checking k1,Evaluator failed to find a plan,,,,
Checking k2,Evaluator failed to find a plan,,,,
