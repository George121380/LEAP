Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
cdl_dataset/dataset/Make_coffee/g1.txt,k1,"missed actions: walk_executor(coffe_maker_290);open_executor(coffe_maker_290);walk_executor(cup_2063
);grab_executor(cup_2063);walk_executor(coffe_maker_290);putin_executor(cup_2063, coffe_maker_290);c
lose_executor(coffe_maker_290);switchon_executor(coffe_maker_290);",missed action num: 250,,
"Reset goals: The sub-goals are: 
['1. Fill the coffee maker with water and coffee grounds.', '2. Turn on the coffee maker to brew the
 coffee.', '3. Pour the brewed coffee into a cup.']",,,,,
" 
behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        observe(coffee_maker, ""Is it open"")
        # Verify if the coffee maker is open to receive water
        if not open(coffee_maker):
            achieve open(coffee_maker)
            # Open the coffee maker if it is not open
        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

behavior add_coffee_grounds_to_coffee_maker(coffee_maker:item, coffee_grounds:item):
    body:
        achieve_once inhand(coffee_grounds)
        # Temporarily hold coffee grounds
        achieve close(coffee_maker, coffee_grounds)
        # Ensure the coffee grounds are near the coffee maker
        achieve open(coffee_maker)
        # Open the coffee maker if its not open for placing grounds
        achieve close(coffee_grounds, coffee_maker)
        # Add the coffee grounds to the coffee maker
  
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the available coffee maker

        bind coffee_grounds: item where:
            is_coffee_filter(coffee_grounds)
        # Select the coffee grounds

        fill_coffee_maker_with_water(coffee_maker)
        # Fill the coffee maker with water

        add_coffee_grounds_to_coffee_maker(coffee_maker, coffee_grounds)
        # Add coffee grounds to the coffee maker
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Add water to the coffee maker reservoir.', '2. Insert a coffee filter and add coffee grounds to
 the filter basket.', '3. Turn on the coffee maker to start the brewing process.', '4. Pour the brew
ed coffee into a cup.']",,,,,
" 
behavior add_water_to_reservoir(coffee_maker:item):
    body:
        achieve open(coffee_maker)
        # Open the coffee makers reservoir to fill it with water
        achieve has_water(coffee_maker)
        # Ensure the coffee makers reservoir is filled with water
        achieve closed(coffee_maker)
        # Close the coffee makers reservoir after filling it with water

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        add_water_to_reservoir(coffee_maker)
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Add water and coffee grounds to the coffee maker.', '2. Start the coffee maker and wait for bre
wing to complete.', '3. Pour the brewed coffee into a cup.']",,,,,
" 
behavior add_water_to_coffee_maker(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)

behavior add_coffee_grounds_to_coffee_maker(coffee_maker:item, coffee_grounds:item):
    body:
        achieve inside(coffee_grounds, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        
        bind coffee_grounds: item where:
            is_food_food(coffee_grounds) # Assuming coffee grounds have a similar categorization

        add_water_to_coffee_maker(coffee_maker)
        add_coffee_grounds_to_coffee_maker(coffee_maker, coffee_grounds)
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Add water to the coffee maker.', '2. Place coffee grounds in the filter.', '3. Start the coffee
 maker to brew coffee.', '4. Pour the brewed coffee into a cup.']",,,,,
" 
def has_water_tank(coffee_maker:item):
    # Determine if a coffee maker has a water tank that can be filled
    symbol has_water_tank=exists tank: item : is_cup(tank) and inside(tank, coffee_maker)
    return has_water_tank

behavior fill_water_in_coffee_maker(water_tank:item):
    body:
        achieve has_water(water_tank)
        # Ensure the water tank of the coffee maker has water

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        
        if has_water_tank(coffee_maker):
            bind tank: item where:
                is_cup(tank) and inside(tank, coffee_maker)
            fill_water_in_coffee_maker(tank)
        else:
            observe(coffee_maker, ""Check if there is a water tank to fill"")
",From function reset_goal,,,,
cdl_dataset/dataset/Make_coffee/g1.txt,k1,"missed actions: walk_executor(coffe_maker_290);open_executor(coffe_maker_290);walk_executor(cup_2063
);grab_executor(cup_2063);walk_executor(coffe_maker_290);putin_executor(cup_2063, coffe_maker_290);c
lose_executor(coffe_maker_290);switchon_executor(coffe_maker_290);",missed action num: 250,,
cdl_dataset/dataset/Make_coffee/g1.txt,k1,"missed actions: walk_executor(coffe_maker_290);open_executor(coffe_maker_290);walk_executor(cup_2063
);grab_executor(cup_2063);walk_executor(coffe_maker_290);putin_executor(cup_2063, coffe_maker_290);c
lose_executor(coffe_maker_290);switchon_executor(coffe_maker_290);",missed action num: 250,,
