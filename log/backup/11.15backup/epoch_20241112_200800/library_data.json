{
    "behavior_data": {
        "Clean the bathroom": [
            {
                "usage_description": "",
                "cdl": "behavior fill_sink_with_water(sink:item):\n    body:\n        achieve has_water(sink)\n",
                "source_sub_task": "2. Fill the sink with water.",
                "functions": []
            }
        ],
        "Listen to music": [
            {
                "usage_description": "",
                "cdl": "behavior check_proximity(remote_control:item, dvd_player:item):\n    body:\n        observe(remote_control, \"Check if the remote control is close to the DVD player\")\n",
                "source_sub_task": "Turn on the DVD player using the remote control.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior move_remote(remote_control:item, dvd_player:item):\n    body:\n        achieve close(remote_control, dvd_player)\n",
                "source_sub_task": "Turn on the DVD player using the remote control.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior turn_on_dvd(dvd_player:item):\n    body:\n        achieve is_on(dvd_player)\n",
                "source_sub_task": "Turn on the DVD player using the remote control.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior turn_on_cd_player(cd_player: item):\n    body:\n        if has_switch_cd_1(cd_player):\n            achieve is_on(cd_player)\n",
                "source_sub_task": "Turn on the CD player.",
                "functions": [
                    "def has_switch_cd_1(cd_player:item):\n    # Check if the CD player has a switch\n    symbol switch_available = has_switch(cd_player)\n    return switch_available\n"
                ]
            }
        ],
        "Wash dishes with dishwasher": [
            {
                "usage_description": "",
                "cdl": "behavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n",
                "source_sub_task": "1. Load the bowls and plates into the dishwasher and start it.",
                "functions": [
                    "def in_dishwasher_1(o:item):\n    # Function to check if an item is in the dishwasher\n    symbol in_dishwasher=exists dishwasher: item : is_dishwasher(dishwasher) and inside(o, dishwasher)\n    return in_dishwasher\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher) # Close the dishwasher door\n        achieve is_on(dishwasher) # Turn on the dishwasher\n",
                "source_sub_task": "1. Load the bowls and plates into the dishwasher and start it.",
                "functions": [
                    "def in_dishwasher_1(o:item):\n    # Function to check if an item is in the dishwasher\n    symbol in_dishwasher=exists dishwasher: item : is_dishwasher(dishwasher) and inside(o, dishwasher)\n    return in_dishwasher\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior find_plates():\n    body:\n        foreach o: item:\n            if is_plate(o) and not visited(o):\n                observe(o, \"Check if the plate needs washing\")\n",
                "source_sub_task": "1. Identify the bowls and plates that need washing.",
                "functions": [
                    "def has_bowls_in_dishwasher_1(dishwasher:item):\n    # Function to check if bowls are in the dishwasher\n    symbol has_bowls=exists o: item : is_bowl(o) and inside(o, dishwasher)\n    return has_bowls\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior load_plates_into_dishwasher(plate:item, dishwasher:item):\n    body:\n        achieve inside(plate, dishwasher)\n",
                "source_sub_task": "1. Identify the bowls and plates that need washing.",
                "functions": [
                    "def has_bowls_in_dishwasher_1(dishwasher:item):\n    # Function to check if bowls are in the dishwasher\n    symbol has_bowls=exists o: item : is_bowl(o) and inside(o, dishwasher)\n    return has_bowls\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n",
                "source_sub_task": "2. Load the bowls and plates into the dishwasher.",
                "functions": []
            }
        ],
        "Change TV channel": [
            {
                "usage_description": "",
                "cdl": "behavior turn_on_tv(remote_control:item, television:item):\n    body:\n        achieve is_on(television)\n",
                "source_sub_task": "Turn on the TV with the remote control.",
                "functions": [
                    "def is_near_television_1(remote_control:item, television:item):\n    # Function to check if the remote control is near the television\n    symbol near_tv=close(remote_control, television)\n    return near_tv\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior sit_on_couch(couch:item):\n    body:\n        achieve on_char(char, couch)\n",
                "source_sub_task": "1. Find the couch and sit on it.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior grab_item(item: item):\n    body:\n        if not is_within_reach_1(item):\n            achieve close_char(char, item)\n        achieve_once inhand(item)\n",
                "source_sub_task": "2. Find the remote control and use it to turn on the TV.",
                "functions": [
                    "def is_within_reach_1(obj: item):\n    # Function to check if an item is within reach(close) to char\n    symbol close_to_char=close_char(char, obj)\n    return close_to_char\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior activate_device(device:item, remote_control:item):\n    body:\n        if has_switch(device):\n            achieve_once close_char(char, device)\n            achieve is_on(device)\n",
                "source_sub_task": "2. Find the remote control and use it to turn on the TV.",
                "functions": [
                    "def is_within_reach_1(obj: item):\n    # Function to check if an item is within reach(close) to char\n    symbol close_to_char=close_char(char, obj)\n    return close_to_char\n"
                ]
            }
        ],
        "Make coffee": [
            {
                "usage_description": "",
                "cdl": "behavior add_milk_or_sugar_to_coffee(cup:item, milk:item, sugar:item):\n    body:\n        if is_milk(milk):\n            achieve inside(milk, cup)\n        if is_food_sugar(sugar):\n            achieve inside(sugar, cup)\n",
                "source_sub_task": "2. Add milk and sugar to the brewed coffee.",
                "functions": [
                    "def is_milk_or_sugar_1(item:item):\n    # Determine whether an item is milk or sugar\n    return is_milk(item) or is_food_sugar(item)\n",
                    "def needs_milk_or_sugar_1(cup:item, milk:item, sugar:item):\n    # Check if a cup needs milk or sugar to be added\n    symbol needs_milk_or_sugar=not(inside(milk, cup) or inside(sugar, cup))\n    return needs_milk_or_sugar\n"
                ]
            }
        ],
        "Cook some food": [
            {
                "usage_description": "",
                "cdl": "behavior wash_vegetable(vegetable:item):\n    body:\n        achieve clean(vegetable) \n        # The goal is to ensure the vegetable is clean\n",
                "source_sub_task": "1. Wash all the vegetables.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior put_vegetables_in_pot(vegetable:item, pot:item):\n    body:\n        achieve inside(vegetable, pot)\n        # Place the vegetable inside the pot\n",
                "source_sub_task": "2. Put the vegetables in a pot and boil them on the stove.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior start_boiling(pot:item, stove:item):\n    body:\n        achieve on(pot, stove)\n        # Place the pot on the stove\n        achieve is_on(stove)\n        # Turn on the stove to start boiling the vegetables\n",
                "source_sub_task": "2. Put the vegetables in a pot and boil them on the stove.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior transfer_vegetables_to_bowl(boiled_vegetables: item, bowl: item):\n    body:\n        achieve inside(boiled_vegetables, bowl)\n        # Transfer the boiled vegetables from the pot to the bowl\n",
                "source_sub_task": "3. Transfer the boiled vegetables to a bowl to cool.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior place_vegetables_in_pot(vegetable:item, pot:item):\n    body:\n        achieve inside(vegetable, pot) # Place the vegetable inside the pot\n",
                "source_sub_task": "1. Place the vegetables in a pot.",
                "functions": [
                    "def has_vegetables_in_pot_1(pot:item):\n    # Function to check if there are vegetables in a specified pot\n    symbol has_vegetables=exists v: item : is_food_vegetable(v) and inside(v, pot)\n    return has_vegetables\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior boil_pot_on_stove(pot:item, stove:item):\n    body:\n        achieve on(pot, stove)\n        # Ensure that the pot is placed on the stove\n\n        if has_stovefan_1(stove):\n            bind stovefan: item where:\n                is_stovefan(stovefan) and close(stove, stovefan)\n            achieve_once is_on(stovefan)\n            # If the stove has a stovefan, turn it on\n\n        achieve is_on(stove)\n        # Turn on the stove to boil the vegetables\n",
                "source_sub_task": "2. Boil the pot with vegetables on the stove.",
                "functions": [
                    "def has_stovefan_1(stove:item):\n    # Determine if the stove has a stovefan\n    symbol has_stovefan=exists stovefan:item: is_stovefan(stovefan) and close(stove, stovefan)\n    return has_stovefan\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior clean_vegetables(vegetable:item, sink:item):\n    body:\n        achieve_once inside(vegetable, sink)\n        # Ensure the vegetable is inside the sink for washing\n\n        if exists faucet: item: is_faucet(faucet) and close(faucet, sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_on(faucet)\n            # If the sink has a faucet close by, turn it on\n\n        wash(vegetable)\n        # Wash the vegetable\n\n        if exists faucet: item: is_faucet(faucet) and close(faucet, sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_off(faucet)\n            # If the sink has a faucet close by, turn it off after washing\n",
                "source_sub_task": "1. Wash all the vegetables.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior add_vegetables_to_pot(vegetables:item, pot:item):\n    body:\n        achieve inside(vegetables, pot)\n",
                "source_sub_task": "2. Put the vegetables in a pot and boil them on the stove.",
                "functions": [
                    "def is_food_vegetable_2041_1(item:item):\n    return is_food_vegetable(item) and id[item] == 2041\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior start_boiling(pot:item, stove:item):\n    body:\n        achieve on(pot, stove)\n        achieve is_on(stove)\n",
                "source_sub_task": "2. Put the vegetables in a pot and boil them on the stove.",
                "functions": [
                    "def is_food_vegetable_2041_1(item:item):\n    return is_food_vegetable(item) and id[item] == 2041\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior store_pot_in_fridge(pot:item, fridge:item):\n    body:\n        achieve inside(pot, fridge) # Place the pot inside the fridge\n        achieve closed(fridge) # Close the fridge door\n",
                "source_sub_task": "3. Store the pot in the fridge.",
                "functions": []
            }
        ],
        "Prepare breakfast": [
            {
                "usage_description": "",
                "cdl": "behavior cook_chicken_and_pasta(chicken:item, pasta:item, pot:item, stove:item):\n    body:\n        achieve inside(chicken, pot) \n        achieve inside(pasta, pot) \n        achieve is_on(stove)\n",
                "source_sub_task": "1. Cook the chicken and pasta together.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior transfer_pasta_contents(pasta:item, plate:item):\n    body:\n        achieve on(pasta, plate) \n        # Transfer the pasta onto the plate\n",
                "source_sub_task": "2. Put the cooked chicken pasta on a plate.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior remove_pot_from_plate(pot:item, plate:item):\n    body:\n        move(pot) \n        # Move the pot off the plate\n",
                "source_sub_task": "2. Put the cooked chicken pasta on a plate.",
                "functions": []
            }
        ],
        "Pet cat": [
            {
                "usage_description": "",
                "cdl": "behavior cut_chicken(chicken:item):\n    body:\n        assert on_cutting_board_1(chicken)\n        achieve cut(chicken)\n",
                "source_sub_task": "2. Slice the chicken.",
                "functions": [
                    "def on_cutting_board_1(x:item):\n    symbol on_cutting_board=exists board: item : is_cutting_board(board) and on(x, board)\n    return on_cutting_board\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior place_on_cutting_board(chicken:item, board:item):\n    body:\n        achieve on(chicken, board)\n",
                "source_sub_task": "2. Slice the chicken.",
                "functions": [
                    "def on_cutting_board_1(x:item):\n    symbol on_cutting_board=exists board: item : is_cutting_board(board) and on(x, board)\n    return on_cutting_board\n"
                ]
            }
        ]
    },
    "function_name_mapping": {
        "locate_bathroom": "locate_bathroom_1",
        "has_switch_cd": "has_switch_cd_1",
        "in_dishwasher": "in_dishwasher_1",
        "has_bowls_in_dishwasher": "has_bowls_in_dishwasher_1",
        "is_near_television": "is_near_television_1",
        "is_within_reach": "is_within_reach_1",
        "is_milk_or_sugar": "is_milk_or_sugar_1",
        "needs_milk_or_sugar": "needs_milk_or_sugar_1",
        "has_vegetables_in_pot": "has_vegetables_in_pot_1",
        "has_stovefan": "has_stovefan_1",
        "is_food_vegetable_2041": "is_food_vegetable_2041_1",
        "on_cutting_board": "on_cutting_board_1"
    },
    "function_name_counts": {
        "locate_bathroom": 2,
        "has_switch_cd": 2,
        "in_dishwasher": 2,
        "has_bowls_in_dishwasher": 2,
        "is_near_television": 2,
        "is_within_reach": 2,
        "is_milk_or_sugar": 2,
        "needs_milk_or_sugar": 2,
        "has_vegetables_in_pot": 2,
        "has_stovefan": 2,
        "is_food_vegetable_2041": 2,
        "on_cutting_board": 2
    }
}