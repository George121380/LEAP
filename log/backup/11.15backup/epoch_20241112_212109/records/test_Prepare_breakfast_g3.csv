Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
"Reset goals: The sub-goals are: 
['Boil the egg.']",,,,,
"
def has_boiling_device(device:item):
    # Function to determine if a device is a suitable boiling device (eg, stove or microwave)
    symbol is_boiling_device=is_stove(device) or is_microwave(device)
    return is_boiling_device

behavior prepare_for_boiling(pot:item, water:item, egg:item, device:item):
    body:
        achieve is_food_egg(egg)
        achieve is_pot(pot)
        achieve has_water(water)
        # Ensure that the items are classified as needed
        
        achieve inside(water, pot)
        achieve inside(egg, pot)
        # Place the water and egg inside the pot
        
        achieve on(pot, device)
        # Place the pot on the boiling device

behavior start_boiling(device:item):
    body:
        achieve is_on(device) 
        # Turn on the boiling device

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an item that is classified as a food egg
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling
        
        bind water: item where:
            is_water(water)
        # Select water for the boiling process

        bind device: item where:
            has_boiling_device(device)
        # Bind a suitable boiling device
        
        prepare_for_boiling(pot, water, egg, device)
        start_boiling(device)
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['Boil the egg.']",,,,,
" 
def has_water(egg: item):
    # Function to check if an egg is food and has water
    return is_food_egg(egg) and has_water(egg)

def plugged_and_on(stove: item):
    # Function to check if a stove is plugged and turned on
    return plugged(stove) and is_on(stove)

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        # Ensure the egg is inside the pot
        achieve inside(egg, pot)
        # Ensure the pot has water
        achieve has_water(pot)
        # Ensure the pot is on the stove
        achieve on(pot, stove)
        # Ensure the stove is plugged and turned on
        achieve plugged_and_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        foreach egg: item:
            if is_food_egg(egg) and not has_water(egg):
                # For each egg that is a food egg and lacks water
                boil_egg(egg, pot, stove)
",From function reset_goal,,,,
,,,,,"(CrowControllerApplier<walk_executor(stove_2065)>, CrowControllerApplier<open_executor(stove_2065)>,
 CrowControllerApplier<exp(pot_2069, stove_2065)>, CrowControllerApplier<walk_executor(fridge_289)>,
 CrowControllerApplier<switchoff_executor(fridge_289)>, CrowControllerApplier<open_executor(fridge_2
89)>, CrowControllerApplier<exp(food_egg_2020, fridge_289)>, CrowControllerApplier<walk_executor(pot
_2069)>, CrowControllerApplier<open_executor(pot_2069)>, CrowControllerApplier<walk_executor(food_eg
g_2020)>, CrowControllerApplier<grab_executor(food_egg_2020)>, CrowControllerApplier<walk_executor(p
ot_2069)>, CrowControllerApplier<putin_executor(food_egg_2020, pot_2069)>, CrowControllerApplier<gra
b_executor(pot_2069)>, CrowControllerApplier<walk_executor(faucet_43)>, CrowControllerApplier<switch
on_executor(faucet_43)>, CrowControllerApplier<switchoff_executor(faucet_43)>, CrowControllerApplier
<walk_executor(oven_295)>, CrowControllerApplier<put_executor(pot_2069, oven_295)>)"
,,walk_executor(stove_2065),"Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2
051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find dra
wing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Rob
ot is close stove_2065. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.",,
