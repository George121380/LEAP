Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
"Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta.', '2. Mix the chicken with the pasta.', '3. Put the chicken pasta o
n a plate.']",,,,,
Goal representation," 
def has_water_inside(pot:item):
    # Check if the pot has water inside
    symbol has_water=has_water(pot)
    return has_water

behavior cook_chicken(chicken:item, pan:item, stove:item):
    body:
        achieve inside(chicken, pan) # Place the chicken inside the pan
        achieve on(pan, stove) # Place the pan on the stove
        achieve is_on(stove) # Turn on the stove to cook the chicken

behavior boil_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot) # Place the pasta inside the pot
        assert is_pot(pot) # Ensure the pot is a valid boiling container
        if not has_water_inside(pot):
            achieve has_water(pot) # Ensure the pot has water for boiling
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken element
        
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select a dry pasta element
        
        bind pan: item where:
            is_fryingpan(pan) 
        # Select a frying pan
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        cook_chicken(chicken, pan, stove)
        boil_pasta(pasta, pot, stove)
",,,,
" 
def has_water_inside(pot:item):
    # Check if the pot has water inside
    symbol has_water=has_water(pot)
    return has_water

behavior cook_chicken(chicken:item, pan:item, stove:item):
    body:
        achieve inside(chicken, pan) # Place the chicken inside the pan
        achieve on(pan, stove) # Place the pan on the stove
        achieve is_on(stove) # Turn on the stove to cook the chicken

behavior boil_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot) # Place the pasta inside the pot
        assert is_pot(pot) # Ensure the pot is a valid boiling container
        if not has_water_inside(pot):
            achieve has_water(pot) # Ensure the pot has water for boiling
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken element
        
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select a dry pasta element
        
        bind pan: item where:
            is_fryingpan(pan) 
        # Select a frying pan
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        cook_chicken(chicken, pan, stove)
        boil_pasta(pasta, pot, stove)
",From function reset_goal,,,,
,,,,"Record from func query_LLM_human in agent.py
Question: Can you tell me how to cook the chicken and pasta.
Answer: Need to replan: No  
Guidance: Boil some pasta. Cook some chicken.
",
,,,,"Record from func query_LLM_human in agent.py
Question: Can you tell me how to mix the chicken with the pasta.
Answer: Need to replan: Yes  
Guidance: Cook the chicken and pasta first before you mix them.
",
,,,,"Record from func query_LLM_human in agent.py
Question: Can you tell me how to put the chicken pasta on a plate.
Answer: Need to replan: No  
Guidance: Put the cooked chicken and boiled pasta on a plate.
",
"Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta.', '2. Combine the cooked chicken and pasta, and put them on a plate
.']",,,,,
Goal representation," 
behavior cook_chicken(chicken:item, stove:item, fryingpan:item):
    body:
        assert is_food_chicken(chicken) # Ensure the item is chicken
        achieve inside(chicken, fryingpan) # Place the chicken inside the fryingpan

        assert is_fryingpan(fryingpan) # Ensure the fryingpan is a valid cooking container
        achieve on(fryingpan, stove) # Place the fryingpan on the stove for cooking
        
        assert is_stove(stove) # Ensure the stove is available for use
        achieve is_on(stove) # Turn on the stove to cook the chicken

behavior cook_pasta(dry_pasta:item, pot:item, stove:item):
    body:
        assert is_dry_pasta(dry_pasta) # Ensure the item is dry pasta
        achieve inside(dry_pasta, pot) # Place the dry pasta inside the pot
        
        assert is_pot(pot) # Ensure the pot is a valid cooking container
        achieve has_water(pot) # Ensure the pot has water for boiling

        assert is_stove(stove) # Ensure the stove is available for use
        achieve on(pot, stove) # Place the pot on the stove for cooking pasta
        achieve is_on(stove) # Turn on the stove to cook the pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken as the item to be cooked
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a fryingpan for cooking chicken
        
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select dry pasta to cook
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot for cooking pasta
        
        cook_chicken(chicken, stove, fryingpan) # Cook the chicken
        cook_pasta(dry_pasta, pot, stove) # Cook the pasta
",,,,
" 
behavior cook_chicken(chicken:item, stove:item, fryingpan:item):
    body:
        assert is_food_chicken(chicken) # Ensure the item is chicken
        achieve inside(chicken, fryingpan) # Place the chicken inside the fryingpan

        assert is_fryingpan(fryingpan) # Ensure the fryingpan is a valid cooking container
        achieve on(fryingpan, stove) # Place the fryingpan on the stove for cooking
        
        assert is_stove(stove) # Ensure the stove is available for use
        achieve is_on(stove) # Turn on the stove to cook the chicken

behavior cook_pasta(dry_pasta:item, pot:item, stove:item):
    body:
        assert is_dry_pasta(dry_pasta) # Ensure the item is dry pasta
        achieve inside(dry_pasta, pot) # Place the dry pasta inside the pot
        
        assert is_pot(pot) # Ensure the pot is a valid cooking container
        achieve has_water(pot) # Ensure the pot has water for boiling

        assert is_stove(stove) # Ensure the stove is available for use
        achieve on(pot, stove) # Place the pot on the stove for cooking pasta
        achieve is_on(stove) # Turn on the stove to cook the pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken as the item to be cooked
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a fryingpan for cooking chicken
        
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select dry pasta to cook
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot for cooking pasta
        
        cook_chicken(chicken, stove, fryingpan) # Cook the chicken
        cook_pasta(dry_pasta, pot, stove) # Cook the pasta
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta separately.', '2. Combine the chicken and pasta together.', '3. Put 
the chicken pasta on a plate.']",,,,,
Goal representation," 
behavior cook_chicken(chicken:item, pot:item, stove:item):
    body:
        assert is_food_chicken(chicken)
        achieve inside(chicken, pot)
        # Chicken should be inside the pot before cooking

        assert is_pot(pot)
        achieve has_water(pot)
        # Ensure the pot has water before cooking

        assert is_stove(stove)
        achieve on(pot, stove)
        achieve is_on(stove)
        # Ensure the stove is on to cook the chicken

behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        assert is_dry_pasta(pasta)
        achieve inside(pasta, pot)
        # Pasta should be inside the pot for cooking

        assert is_pot(pot)
        achieve has_water(pot)
        # Ensure the pot has water for cooking pasta

        assert is_stove(stove)
        achieve on(pot, stove)
        achieve is_on(stove)
        # Ensure the stove is on to cook the pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind pasta: item where:
            is_dry_pasta(pasta)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        cook_chicken(chicken, pot, stove)
        cook_pasta(pasta, pot, stove)
",,,,
" 
behavior cook_chicken(chicken:item, pot:item, stove:item):
    body:
        assert is_food_chicken(chicken)
        achieve inside(chicken, pot)
        # Chicken should be inside the pot before cooking

        assert is_pot(pot)
        achieve has_water(pot)
        # Ensure the pot has water before cooking

        assert is_stove(stove)
        achieve on(pot, stove)
        achieve is_on(stove)
        # Ensure the stove is on to cook the chicken

behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        assert is_dry_pasta(pasta)
        achieve inside(pasta, pot)
        # Pasta should be inside the pot for cooking

        assert is_pot(pot)
        achieve has_water(pot)
        # Ensure the pot has water for cooking pasta

        assert is_stove(stove)
        achieve on(pot, stove)
        achieve is_on(stove)
        # Ensure the stove is on to cook the pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind pasta: item where:
            is_dry_pasta(pasta)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        cook_chicken(chicken, pot, stove)
        cook_pasta(pasta, pot, stove)
",From function reset_goal,,,,
cdl_dataset/dataset/Prepare_breakfast/g4.txt,k1,"missed actions: walk_executor(pot_2069);grab_executor(pot_2069);walk_executor(faucet_43);switchon_ex
ecutor(faucet_43);switchoff_executor(faucet_43);walk_executor(pot_2069);open_executor(pot_2069);walk
_executor(fridge_289);switchoff_executor(fridge_289);open_executor(fridge_289);walk_executor(dry_pas
ta_2042);grab_executor(dry_pasta_2042);walk_executor(pot_2069);putin_executor(dry_pasta_2042, pot_20
69);walk_executor(stove_2065);put_executor(pot_2069, stove_2065);switchon_executor(stove_2065);",missed action num: 17,,
cdl_dataset/dataset/Prepare_breakfast/g4.txt,k2,"missed actions: walk_executor(oil_2079);grab_executor(oil_2079);walk_executor(fryingpan_2083);putin_
executor(oil_2079, fryingpan_2083);walk_executor(fridge_289);switchoff_executor(fridge_289);open_exe
cutor(fridge_289);walk_executor(food_chicken_2017);grab_executor(food_chicken_2017);walk_executor(fr
yingpan_2083);putin_executor(food_chicken_2017, fryingpan_2083);grab_executor(fryingpan_2083);walk_e
xecutor(stove_2065);put_executor(fryingpan_2083, stove_2065);switchon_executor(stove_2065);",missed action num: 15,,
cdl_dataset/dataset/Prepare_breakfast/g4.txt,k1,"missed actions: walk_executor(pot_2069);grab_executor(pot_2069);walk_executor(faucet_43);switchon_ex
ecutor(faucet_43);switchoff_executor(faucet_43);walk_executor(pot_2069);open_executor(pot_2069);walk
_executor(fridge_289);switchoff_executor(fridge_289);open_executor(fridge_289);walk_executor(dry_pas
ta_2042);grab_executor(dry_pasta_2042);walk_executor(pot_2069);putin_executor(dry_pasta_2042, pot_20
69);walk_executor(stove_2065);put_executor(pot_2069, stove_2065);switchon_executor(stove_2065);",missed action num: 17,,
cdl_dataset/dataset/Prepare_breakfast/g4.txt,k2,"missed actions: walk_executor(oil_2079);grab_executor(oil_2079);walk_executor(fryingpan_2083);putin_
executor(oil_2079, fryingpan_2083);walk_executor(fridge_289);switchoff_executor(fridge_289);open_exe
cutor(fridge_289);walk_executor(food_chicken_2017);grab_executor(food_chicken_2017);walk_executor(fr
yingpan_2083);putin_executor(food_chicken_2017, fryingpan_2083);grab_executor(fryingpan_2083);walk_e
xecutor(stove_2065);put_executor(fryingpan_2083, stove_2065);switchon_executor(stove_2065);",missed action num: 15,,
cdl_dataset/dataset/Prepare_breakfast/g4.txt,k3,"missed actions: walk_executor(fridge_289);switchoff_executor(fridge_289);open_executor(fridge_289);w
alk_executor(dry_pasta_2042);grab_executor(dry_pasta_2042);walk_executor(plate_1000);putin_executor(
dry_pasta_2042, plate_1000);walk_executor(food_chicken_2017);grab_executor(food_chicken_2017);walk_e
xecutor(plate_1000);putin_executor(food_chicken_2017, plate_1000);",missed action num: 11,,
cdl_dataset/dataset/Prepare_breakfast/g4.txt,k4,"missed actions: walk_executor(fridge_289);switchoff_executor(fridge_289);open_executor(fridge_289);w
alk_executor(dry_pasta_2042);grab_executor(dry_pasta_2042);walk_executor(plate_1000);put_executor(dr
y_pasta_2042, plate_1000);walk_executor(food_chicken_2017);grab_executor(food_chicken_2017);walk_exe
cutor(plate_1000);put_executor(food_chicken_2017, plate_1000);",missed action num: 11,,
