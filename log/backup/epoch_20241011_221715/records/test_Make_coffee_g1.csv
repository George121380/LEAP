Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
cdl_dataset/dataset/Make_coffee/g1.txt,k1,"missed actions: walk_executor(coffe_maker_290);open_executor(coffe_maker_290);walk_executor(cup_2063
);grab_executor(cup_2063);walk_executor(coffe_maker_290);putin_executor(cup_2063, coffe_maker_290);c
lose_executor(coffe_maker_290);switchon_executor(coffe_maker_290);",missed action num: 250,,
"Reset goals: The sub-goals are: 
['1. Find the coffee maker and ensure it has water and coffee grounds.', '2. Turn on the coffee make
r to start brewing.', '3. Once brewed, pour the coffee into a cup.']",,,,,
"
behavior find_coffee_maker(coffee_maker:item):
    body:
        achieve visited(coffee_maker)
        # Ensure the coffee maker is visited to check its state

behavior check_water_and_coffee_grounds(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water
        achieve is_food_food(coffee_maker)
        # Ensure the coffee maker has coffee grounds

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind to a coffee maker instance

        if not visited(coffee_maker):
            observe(coffee_maker, ""Check if it has water and coffee grounds"")
            # Observe the coffee maker if it has not been visited

        find_coffee_maker(coffee_maker)
        check_water_and_coffee_grounds(coffee_maker)
        # Perform the final check for water and coffee grounds
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Fill the water reservoir in the coffee maker.', '2. Place a coffee filter and add coffee ground
s into the basket.', '3. Start the coffee maker to brew the coffee.', '4. Pour the brewed coffee int
o a cup.']",,,,,
" 
behavior fill_water_reservoir(reservoir:item): 
    body: 
        achieve clean(reservoir) 
        achieve has_water(reservoir) 

behavior __goal__(): 
    body: 
        bind coffee_maker: item where: 
            is_coffe_maker(coffee_maker) 
        # Select the coffee maker
        
        if not visited(coffee_maker): 
            observe(coffee_maker,""Locate the water reservoir in the coffee maker"") 
        # Observe the coffee maker to locate the water reservoir
        
        bind reservoir: item where: 
            inside(reservoir, coffee_maker) and is_cleaning_solution(reservoir) 
        # Select the clean water reservoir inside the coffee maker
        
        fill_water_reservoir(reservoir) 
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Add coffee grounds and water to the coffee maker.', '2. Turn on the coffee maker and brew the c
offee.', '3. Pour the brewed coffee into a cup.']",,,,,
" 
def has_coffee_and_water_inside(coffee_maker:item):
    # Function to check if there are coffee grounds and water inside a specified coffee maker
    symbol has_coffee_and_water=exists ground: item : is_coffee_filter(ground) and inside(ground, co
ffee_maker) and has_water(coffee_maker)
    return has_coffee_and_water

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if not has_coffee_and_water_inside(coffee_maker):
            bind coffee_grounds: item where:
                is_coffee_filter(coffee_grounds)
            # Select coffee grounds
            
            bind water: item where:
                has_water(water) and is_pot(water)
            # Select water item
            
            achieve_once inside(coffee_grounds, coffee_maker)
            # Add coffee grounds to the coffee maker
            
            achieve_once inside(water, coffee_maker)
            # Add water to the coffee maker
",From function reset_goal,,,,
"Reset goals: The sub-goals are: 
['1. Identify and prepare the coffee maker for use.', '2. Add coffee grounds and water to the coffee
 maker.', '3. Start the coffee maker to brew the coffee.', '4. Pour the brewed coffee into a cup.']",,,,,
" 
def has_feature_x(coffee_maker:item):
    # Insert any condition that characterizes the coffee maker youre looking for
    # This is just an example function template
    symbol has_feature=exists feature: item : is_napkin(feature) and close(feature, coffee_maker)
    return has_feature

behavior __goal__():
    body:
        if exists coffee_maker: item : is_coffe_maker(coffee_maker) and has_feature_x(coffee_maker):
        # If you already have information about the coffee maker you need, you can directly face it
            bind coffee_maker: item where:
                is_coffe_maker(coffee_maker) and has_feature_x(coffee_maker)
            achieve facing_char(char, coffee_maker)

        else:
            # If no definitive coffee maker is identified, check all unvisited ones
            foreach coffee_maker: item:
                if is_coffe_maker(coffee_maker) and not visited(coffee_maker):
                    observe(coffee_maker, ""Determine readiness and status"")
",From function reset_goal,,,,
cdl_dataset/dataset/Make_coffee/g1.txt,k1,"missed actions: walk_executor(coffe_maker_290);open_executor(coffe_maker_290);walk_executor(cup_2063
);grab_executor(cup_2063);walk_executor(coffe_maker_290);putin_executor(cup_2063, coffe_maker_290);c
lose_executor(coffe_maker_290);switchon_executor(coffe_maker_290);",missed action num: 250,,
cdl_dataset/dataset/Make_coffee/g1.txt,k1,"missed actions: walk_executor(coffe_maker_290);open_executor(coffe_maker_290);walk_executor(cup_2063
);grab_executor(cup_2063);walk_executor(coffe_maker_290);putin_executor(cup_2063, coffe_maker_290);c
lose_executor(coffe_maker_290);switchon_executor(coffe_maker_290);",missed action num: 250,,
