Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
"['1. Find the chicken.', '2. Put the chicken into the pot.', '3. Grab the pot.']",,,,,
"
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and not visited(chicken)
        # Assuming the goal is to locate a chicken item based on the subtask description

        exist chicken_item: item : is_food_chicken(chicken_item) and has_plates_or_cups_inside(chick
en_item)
        # Actual task since its to find any chicken as food available in the scene

        foreach chicken: item:
            if is_food_chicken(chicken) and not visited(chicken):
                observe(chicken, ""Check if this is the chicken you are looking for"")
                # This observes any chicken in the scene
","Unexpected token Token('VARNAME', 'chicken_item') at line 2598, column 15.
Expected one of: 
	* AT
	* _NEWLINE
	* FLOORDIV
	* MINUS
	* AMPERSAND
	* MORETHAN
	* SLASH
	* COMMA
	* SEMICOLON
	* VBAR
	* OR
	* STAR
	* __ANON_6
	* CIRCUMFLEX
	* __ANON_0
	* EQUAL
	* GREATER_EQ
	* PLUS
	* DOUBLE_EQUAL
	* PERCENT
	* __ANON_3
	* LESS_EQ
	* __ANON_8
	* AND
	* LSHIFT
	* __ANON_1
	* LESSTHAN
	* __ANON_5
	* __ANON_4
	* __ANON_2
	* IF
	* NOT_EQ
	* __ANON_7
	* RSHIFT
",,,,
" 
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and not visited(chicken)
        if exists chicken_item: item : is_food_chicken(chicken_item) and has_plates_or_cups_inside(c
hicken_item):
            observe(chicken_item, ""Check if there is a chicken item with plates or cups inside"")
        else:
            foreach chicken: item:
                if is_food_chicken(chicken) and not visited(chicken):
                    observe(chicken, ""Check if this is the chicken you are looking for"")
","Error trying to process rule ""behavior_definition"":

'Function has_plates_or_cups_inside not found. Note that recursive function calls are not supported 
in the current version.'",,,,
"
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and not visited(chicken)
        if exists chicken_item: item : is_food_chicken(chicken_item) and is_food_food(chicken_item):
            observe(chicken_item, ""Check if there is a chicken item with plates or cups inside"")
        else:
            foreach chicken: item:
                if is_food_chicken(chicken) and not visited(chicken):
                    observe(chicken, ""Check if this is the chicken you are looking for"")
","Error trying to process rule ""behavior_definition"":

Unknown variable: chicken_item; available variables: [].",,,,
" 
behavior __goal__():
    body:
        foreach item: item:
            if not visited(item) and is_food_chicken(item):
                # Check all unvisited items to find the chicken
                observe(item, ""Check if it is chicken"")
                # Observe each item to see if it is a chicken
",,,,,"['walk_executor(fridge_289); switchoff_executor(fridge_289); open_executor(fridge_289); exp(food_chi
cken_2017, fridge_289); close_executor(fridge_289); walk_executor(food_chicken_2017); obs(food_chick
en_2017, Check if it is chicken)']"
,,,,,"(CrowControllerApplier<walk_executor(fridge_289)>, CrowControllerApplier<switchoff_executor(fridge_2
89)>, CrowControllerApplier<open_executor(fridge_289)>, CrowControllerApplier<exp(food_chicken_2017,
 fridge_289)>, CrowControllerApplier<close_executor(fridge_289)>, CrowControllerApplier<walk_executo
r(food_chicken_2017)>, CrowControllerApplier<obs(food_chicken_2017, Check if it is chicken)>)"
,,walk_executor(fridge_289),"Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_
2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find 
food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_eg
g_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Fi
nd food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noo
dles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_but
ter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Fin
d food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_p
asta_2042. Find milk_2043. Find drawing_240. Find drawing_239. Robot is inside dining_room_201. Robo
t is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203
. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Ro
bot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot 
is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot i
s close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot i
s close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close 
food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is cl
ose food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close foo
d_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close fo
od_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is clos
e food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close foo
d_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_v
egetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer inside ba
throom_1.",,
