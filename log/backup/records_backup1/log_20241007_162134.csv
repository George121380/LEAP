Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
"['1. Fill the pot with water.', '2. Place the pot on the stove and turn on the heat.', '3. Monitor t
he pot until the water boils.']",,,,,
" 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        fill_pot_with_water(pot)
",,,,,"['walk_executor(table_107); exp(pot_2069, table_107); walk_executor(pot_2069); grab_executor(pot_206
9); walk_executor(faucet_43); switchon_executor(faucet_43); switchoff_executor(faucet_43)']"
,,,,,"(CrowControllerApplier<walk_executor(table_107)>, CrowControllerApplier<exp(pot_2069, table_107)>, C
rowControllerApplier<walk_executor(pot_2069)>, CrowControllerApplier<grab_executor(pot_2069)>, CrowC
ontrollerApplier<walk_executor(faucet_43)>, CrowControllerApplier<switchon_executor(faucet_43)>, Cro
wControllerApplier<switchoff_executor(faucet_43)>)"
,,walk_executor(table_107),"Find mat_173. Find clothes_hat_2045. Find clothes_gloves_2046. Find drawing_176. Find drawing_174. F
ind drawing_175. Robot is inside bedroom_67. Robot is close floor_73. Robot is close table_107. Robo
t is no longer inside bathroom_1.",,
,,"exp(pot_2069, table_107)",Failed to find pot_2069 around table_107. ,,
,,,,,"(CrowControllerApplier<walk_executor(stove_2065)>, CrowControllerApplier<open_executor(stove_2065)>,
 CrowControllerApplier<exp(pot_2069, stove_2065)>, CrowControllerApplier<walk_executor(pot_2069)>, C
rowControllerApplier<grab_executor(pot_2069)>, CrowControllerApplier<walk_executor(faucet_43)>, Crow
ControllerApplier<switchon_executor(faucet_43)>, CrowControllerApplier<switchoff_executor(faucet_43)
>)"
,,walk_executor(stove_2065),"Find pot_2069. Find oil_2079. Find knife_2050. Find cutting_board_2051. Find cup_2064. Find cup_2063
. Find napkin_2005. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawin
g_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close stove_206
5. Robot is close kitchen_counter_230. Robot is no longer inside bedroom_67.Robot is no longer close
 floor_73.Robot is no longer close table_107.",,
,,open_executor(stove_2065),Robot is inside dining_room_201. Robot is close stove_2065. Robot is close kitchen_counter_230. ,,
,,"exp(pot_2069, stove_2065)",Find pot_2069. ,,
,,walk_executor(pot_2069),"Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Robot 
is no longer close stove_2065.",,
,,grab_executor(pot_2069),"Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Grabbi
ng pot_2069 by right hand. ",,
,,walk_executor(faucet_43),"Find towel_rack_31. Find towel_rack_34. Find towel_rack_32. Robot is inside bathroom_1. Robot is clo
se pot_2069. Robot is close bathroom_counter_41. Robot is close faucet_43. Robot is no longer inside
 dining_room_201.Robot is no longer close kitchen_counter_230.",,
,,switchon_executor(faucet_43),"Robot is inside bathroom_1. Robot is close pot_2069. Robot is close bathroom_counter_41. Robot is cl
ose faucet_43. ",,
,,switchoff_executor(faucet_43),"Robot is inside bathroom_1. Robot is close pot_2069. Robot is close bathroom_counter_41. Robot is cl
ose faucet_43. ",,
,,,,"- Sub-Task Completed: Yes
- Next Steps: You successfully filled the pot with water by finding the pot, walking to a faucet, an
d turning the faucet on and off.",
" 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove in the dining room where the pot is located
        
        bind pot: item where:
            is_pot(pot) and close_char(char, pot)
        # Select pot being close to the character

        put_pot_on_stove(pot, stove)
        # Place the pot on the stove
        
        turn_on_stove(stove)
        # Turn on the stove to boil the water in the pot
",,,,,"['grab_executor(pot_2069); walk_executor(stove_2065); put_executor(pot_2069, stove_2065); close_exec
utor(stove_2065); switchon_executor(stove_2065)']"
,,,,,"(CrowControllerApplier<grab_executor(pot_2069)>, CrowControllerApplier<walk_executor(stove_2065)>, C
rowControllerApplier<put_executor(pot_2069, stove_2065)>, CrowControllerApplier<close_executor(stove
_2065)>, CrowControllerApplier<switchon_executor(stove_2065)>)"
,,grab_executor(pot_2069),"Robot is inside bathroom_1. Robot is close pot_2069. Robot is close bathroom_counter_41. Robot is cl
ose faucet_43. Robot is close char. Grabbing pot_2069 by left hand. ",,
,,walk_executor(stove_2065),"Robot is inside dining_room_201. Robot is close pot_2069. Robot is close stove_2065. Robot is close 
kitchen_counter_230. Robot is no longer inside bathroom_1.Robot is no longer close char.Robot is no 
longer close bathroom_counter_41.Robot is no longer close faucet_43.",,
,,"put_executor(pot_2069, stove_2065)","Robot is inside dining_room_201. Robot is close pot_2069. Robot is close stove_2065. Robot is close 
kitchen_counter_230. pot_2069 released by left hand. pot_2069 released by right hand. ",,
,,close_executor(stove_2065),"Robot is inside dining_room_201. Robot is close pot_2069. Robot is close stove_2065. Robot is close 
kitchen_counter_230. ",,
,,switchon_executor(stove_2065),"Robot is inside dining_room_201. Robot is close pot_2069. Robot is close stove_2065. Robot is close 
kitchen_counter_230. ",,
,,,,"- Sub-Task Completed: Yes
- Next Steps: You successfully placed the pot on the stove and turned on the heat.",
" 
behavior watch_pot_until_boiling(pot:item):
    body:
        watch(pot) # Monitor the pot for boiling

def is_boiling(pot:item):
    symbol boiling=exists state:state: is_on(state) and close(state, pot)
    return boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        if not is_boiling(pot):
            watch_pot_until_boiling(pot)
","Error trying to process rule ""typed_argument"":

Unknown type: state, known types are: ['item', 'character', 'id'].",,,,
" 
behavior observe_boiling(pot:item):
    body:
        watch(pot)
        # Watch the pot to monitor for when the water has boiled

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot for boiling
        observe_boiling(pot)
        # Monitor the pot until the water boils

",,,,,[]
" 
behavior observe_pot_boiling(pot:item):
    body:
        watch(pot)
        # Keep watching the pot to check if the water is boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and close_char(char, pot)
        # Bind the pot that is close to the character
        
        observe_pot_boiling(pot)
        # Observe the pot until the water boils
",,,,,[]
" 
behavior watch_water_boiling(pot: item):
    body:
        watch(pot)
        achieve has_water(pot)
        # Observe the pot for the boiling process and ensure it contains water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and close_char(char, pot)
        # Select the pot that is close to the character
        watch_water_boiling(pot)
        # Monitor the pot until the water boils
",,,,,[]
" 
behavior monitor_pot_until_boil(pot: item):
    # Define the behavior to monitor the pot until the water boils
    body:
        achieve is_on(pot) # The pot is on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        monitor_pot_until_boil(pot)

","Error trying to process rule ""behavior_definition"":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].",,,,
"
behavior monitor_pot_until_boil(pot: item):
    # Define the behavior to monitor the pot until the water boils
    body:
        achieve is_on(pot) # The pot is on the stove

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        monitor_pot_until_boil(pot)
",,,,,[]
,,,,I don't know.,
" 
behavior monitor_water_boiling(pot:item):
    body:
        watch(pot) # Observe the pot to monitor the water boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and close_char(char, pot)
        # Bind to the pot that is close to the character
        monitor_water_boiling(pot) # Monitor the pot until the water boils
",,,,,[]
" 
def is_boiling(pot: item):
    # Function to check if the pot is boiling
    symbol boiling = exists water: item : has_water(water) and on(water, pot) and is_on_stove(pot)
    return boiling

behavior monitor_for_boiling(pot:item):
    body:
        if not is_boiling(pot):
            watch(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        monitor_for_boiling(pot)
","Error trying to process rule ""function_definition"":

'Function is_on_stove not found. Note that recursive function calls are not supported in the current
 version.'",,,,
" 
def is_boiling(pot: item):
    # Function to check if the pot is boiling
    symbol boiling = exists water: item : has_water(water) and on(water, pot) and is_stove(pot)
    return boiling

behavior monitor_for_boiling(pot:item):
    body:
        if not is_boiling(pot):
            watch(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        monitor_for_boiling(pot)
",,,,,[]
" 
behavior monitor_boiling_water(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)
        watch(pot)
        # Continuously observe the pot to monitor the boiling process

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        monitor_boiling_water(pot, stove)
        # Monitor the water in the pot until it boils
",,,,,[]
" 
behavior observe_pot_boiling(pot:item):
    body:
        observe(pot, ""Check if the water is boiling"") # Observe the pot to see if the water has boil
ed

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and close_char(char, pot)
        # Bind the pot that is currently near the character
        observe_pot_boiling(pot) # Observe the pot to determine if the water is boiling
",,,,,"['open_executor(pot_2069); obs(pot_2069, Check if the water is boiling)']"
13,walk_executor(table_107),,,,
13,walk_executor(stove_2065),,,,
13,open_executor(stove_2065),,,,
13,walk_executor(pot_2069),,,,
13,grab_executor(pot_2069),,,,
13,walk_executor(faucet_43),,,,
13,switchon_executor(faucet_43),,,,
13,switchoff_executor(faucet_43),,,,
13,grab_executor(pot_2069),,,,
13,walk_executor(stove_2065),,,,
13,"put_executor(pot_2069, stove_2065)",,,,
13,close_executor(stove_2065),,,,
13,switchon_executor(stove_2065),,,,
