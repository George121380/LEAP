From agent.py
Reset goals: The sub-goals are: 
['1. Boil the egg.', '2. Wash and cut the vegetables and lemon.', '3. Mix the boiled egg, vegetables, and lemon in a bowl to make the salad.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_napkin_2005_around_nightstand_102(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(napkin,nightstand_instance)
        else:
            exp(napkin,nightstand_instance)
    eff:
        unknown[napkin]=False
        close[napkin,nightstand_instance]=True
        close[nightstand_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        achieve inside(egg, pot) 
        # Place the egg inside the pot
        achieve has_water(pot)
        # Fill the pot with water
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve plugged(stove)
        # Ensure the stove is plugged in
        achieve is_on(stove)
        # Turn on the stove to boil the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        boil_egg(egg, pot, stove)
        # Boil the egg

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_napkin_2005_around_cupboard_229(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(napkin,cupboard_instance)
        else:
            exp(napkin,cupboard_instance)
    eff:
        unknown[napkin]=False
        close[napkin,cupboard_instance]=True
        close[cupboard_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg(pot:item, egg:item):
    body:
        achieve inside(egg, pot)
        achieve has_water(pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg for boiling
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the egg
        
        boil_egg(pot, egg)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>, Variable<egg: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_napkin_2005_around_nightstand_102(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(napkin,nightstand_instance)
        else:
            exp(napkin,nightstand_instance)
    eff:
        unknown[napkin]=False
        close[napkin,nightstand_instance]=True
        close[nightstand_instance,napkin]=True
    

#goal_representation
 
behavior boil_egg(pot:item, egg:item, stove:item):
    body:
        achieve inside(egg, pot)
        achieve has_water(pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg for boiling
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the egg
        
        boil_egg(pot, egg, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_egg(pot:item, egg:item, stove:item):
    body:
        achieve inside(egg, pot)
        achieve has_water(pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg for boiling
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the egg
        
        boil_egg(pot, egg, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(pot_2069, cupboard_229)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(pot_2069, cupboard_229)
Fail to find pot_2069 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_295)open_executor(oven_295)exp(pot_2069, oven_295)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(oven_295)
Robot find: drawing_240, drawing_238, drawing_239, Robot is close to the oven_295. 
##############################
