From agent.py
Reset goals: The sub-goals are: 
['1. Find the bathroom sink.  ', '2. Fill the sink with water and add soap to create soapy water.']
##############################
Use behavior from library:

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#behaviors_from_library

#behaviors_from_library_end

#goal_representation
 
behavior find_and_approach_bathroom_sink(sink:item):
    body:
        achieve close_char(char, sink)

behavior __goal__():
    body:
        if exists sink: item : is_sink(sink) and is_bathroom(sink):
            bind sink: item where:
                is_sink(sink) and is_bathroom(sink)
            achieve close_char(char, sink)
        else:
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check is this the bathroom sink")


#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_approach_bathroom_sink(sink:item):
    body:
        achieve close_char(char, sink)

behavior __goal__():
    body:
        if exists sink: item : is_sink(sink) and is_bathroom(sink):
            bind sink: item where:
                is_sink(sink) and is_bathroom(sink)
            achieve close_char(char, sink)
        else:
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check is this the bathroom sink")


##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you tell me how to find the bathroom sink.  
Answer: Need to replan: Yes  
Guidance: Your current plan does not include directions to locate the bathroom sink. Please consider finding the bathroom sink before proceeding with creating soapy water by adding soap and filling it with water.

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you tell me how to fill the sink with water and add soap to create soapy water.
Answer: Need to replan: No  
Guidance: Put soap in the sink, then turn on the faucet to fill the sink with water.

##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)obs(sink_42, Check is this the bathroom sink)walk_executor(sink_231)obs(sink_231, Check is this the bathroom sink)
##############################
From agent.py
walk_executor(sink_42)
Find basket_for_clothes_2006. Find towel_rack_34. Find detergent_2084. Find soap_2053. Find cleaning_solution_2073. Find towel_rack_32. Find towel_rack_31. Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close sink_42. 
##############################
From agent.py
obs(sink_42, Check is this the bathroom sink)
Get this information:  sink_42 is close to floor_2. sink_42 is close to floor_3. sink_42 is close to detergent_2084. sink_42 is close to soap_2053. sink_42 is close to floor_4. sink_42 is close to bathroom_cabinet_40. sink_42 is close to bathroom_counter_41. sink_42 is close to wall_9. sink_42 is close to faucet_43. sink_42 is close to wall_12. sink_42 is close to basket_for_clothes_2006. sink_42 is close to washing_machine_2007. sink_42 is close to cleaning_solution_2073. sink_42 is close to character_65. sink_42 is inside bathroom_1. sink_42 is inside bathroom_counter_41. soap_2053 is on sink_42. cleaning_solution_2073 is on sink_42. detergent_2084 is on sink_42. sink_42 is DIRTY.
##############################
From agent.py
walk_executor(sink_231)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find plate_1000. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find soap_2054. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close sink_231. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_41.Robot is no longer close sink_42.
##############################
From agent.py
obs(sink_231, Check is this the bathroom sink)
Get this information:  plate_1000 is on sink_231. sink_231 is close to soap_2054. sink_231 is close to floor_7. sink_231 is close to wall_11. sink_231 is close to wall_15. sink_231 is close to coffe_maker_290. sink_231 is close to toaster_292. sink_231 is close to toilet_37. sink_231 is close to shower_36. sink_231 is close to microwave_297. sink_231 is close to floor_202. sink_231 is close to floor_203. sink_231 is close to floor_204. sink_231 is close to wall_211. sink_231 is close to wall_212. sink_231 is close to cupboard_229. sink_231 is close to kitchen_counter_230. sink_231 is close to faucet_232. sink_231 is close to plate_1000. sink_231 is close to dishwasher_1001. sink_231 is close to character_65. soap_2054 is on sink_231. sink_231 is inside dining_room_201. sink_231 is inside kitchen_counter_230. sink_231 is DIRTY.
##############################
Use behavior from library:
def has_faucet_1(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior add_soap_to_sink(soap:item, sink:item):
    body:
        achieve inside(soap, sink)

behavior fill_sink_with_water(sink:item, water_source:item):
    body:
        if has_faucet_1(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            achieve has_water(sink)
            achieve_once is_off(faucet)
        else:
            fill_sink(sink, water_source)

behavior fill_sink(sink:item, water_source:item):
    body:
        achieve has_water(sink)


##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2037_around_cupboard_229(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_salt,cupboard_instance)
        else:
            exp(food_salt,cupboard_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,cupboard_instance]=True
        close[cupboard_instance,food_salt]=True
    

behavior find_oil_2079_around_oil_2079(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2079
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#behaviors_from_library
def has_faucet_1(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior add_soap_to_sink(soap:item, sink:item):
    body:
        achieve inside(soap, sink)

behavior fill_sink_with_water(sink:item, water_source:item):
    body:
        if has_faucet_1(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            achieve has_water(sink)
            achieve_once is_off(faucet)
        else:
            fill_sink(sink, water_source)

behavior fill_sink(sink:item, water_source:item):
    body:
        achieve has_water(sink)


#behaviors_from_library_end

#goal_representation

behavior fill_sink_with_soap_and_water(sink:item, soap:item, water_source:item):
    body:
        fill_sink_with_water(sink, water_source)
        add_soap_to_sink(soap, sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==231 # assuming 231 is the discovered bathroom sink
        bind soap: item where:
            is_soap(soap)
        bind water_source: item where:
            is_faucet(water_source) and close(water_source, sink)
        fill_sink_with_soap_and_water(sink, soap, water_source)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function fill_sink not found. Note that recursive function calls are not supported in the current version.'
##############################
Use behavior from library:
def has_faucet_1(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior add_soap_to_sink(soap:item, sink:item):
    body:
        achieve inside(soap, sink)

behavior fill_sink_with_water(sink:item, water_source:item):
    body:
        if has_faucet_1(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            achieve has_water(sink)
            achieve_once is_off(faucet)
        else:
            fill_sink(sink, water_source)

behavior fill_sink(sink:item, water_source:item):
    body:
        achieve has_water(sink)


##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_salt_2037_around_kitchen_counter_230(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

#exp_behavior_end

#behaviors_from_library
def has_faucet_1(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior add_soap_to_sink(soap:item, sink:item):
    body:
        achieve inside(soap, sink)

behavior fill_sink_with_water(sink:item, water_source:item):
    body:
        if has_faucet_1(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            achieve has_water(sink)
            achieve_once is_off(faucet)
        else:
            fill_sink(sink, water_source)

behavior fill_sink(sink:item, water_source:item):
    body:
        achieve has_water(sink)


#behaviors_from_library_end

#goal_representation
 
behavior fill_sink_with_soap_and_water(sink:item, soap:item, water_source:item):
    body:
        fill_sink_with_water(sink, water_source)
        add_soap_to_sink(soap, sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==231 # assuming 231 is the discovered bathroom sink
        bind soap: item where:
            is_soap(soap)
        bind water_source: item where:
            is_faucet(water_source) and close(water_source, sink)
        behavior fill_sink_with_water(sink, water_source)
        behavior add_soap_to_sink(soap, sink)

#goal_representation_end

##############################
Use behavior from library:
def has_faucet_1(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_sink_with_water(sink:item, water_source:item):
    body:
        if has_faucet_1(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            achieve has_water(sink)
            achieve_once is_off(faucet)
        else:
            fill_sink(sink, water_source)

behavior fill_sink(sink:item, water_source:item):
    body:
        achieve has_water(sink)


##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2037_around_kitchen_counter_230(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

#exp_behavior_end

#behaviors_from_library
def has_faucet_1(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_sink_with_water(sink:item, water_source:item):
    body:
        if has_faucet_1(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            achieve has_water(sink)
            achieve_once is_off(faucet)
        else:
            fill_sink(sink, water_source)

behavior fill_sink(sink:item, water_source:item):
    body:
        achieve has_water(sink)


#behaviors_from_library_end

#goal_representation

behavior fill_sink_with_soap(sink:item, soap:item):
    body:
        achieve inside(soap, sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==231
        bind water_source: item where:
            is_faucet(water_source)
        bind soap: item where:
            is_soap(soap)
        fill_sink_with_water(sink, water_source)
        fill_sink_with_soap(sink, soap)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function fill_sink not found. Note that recursive function calls are not supported in the current version.'
##############################
