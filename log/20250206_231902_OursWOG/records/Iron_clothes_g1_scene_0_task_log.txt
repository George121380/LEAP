From agent.py
Reset goals: The sub-goals are: 
['Iron the pair of skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_skirt_2088_around_dresser_358(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_skirt,dresser_instance)
        else:
            exp(clothes_skirt,dresser_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,dresser_instance]=True
        close[dresser_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_iron(iron: item, board: item):
    body:
        achieve plugged(iron)
        achieve has_water(iron)
        achieve close_char(char, board)

behavior iron_skirt(skirt: item, board: item, iron: item):
    body:
        achieve on(skirt, board)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind board: item where:
            is_ironing_board(board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select a skirt

        prepare_iron(iron, board)
        iron_skirt(skirt, board, iron)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_skirt_2088_around_closetdrawer_394(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def is_skirt_iron_ready(iron:item, skirt:item):
    # This function checks if the iron is ready to iron the skirt
    return plugged(iron) and is_on(iron) and close_char(char, skirt)

def is_skirt_on_ironing_board(skirt:item, ironing_board:item):
    # Function to check if the skirt is on the ironing board
    return on(skirt, ironing_board)

behavior iron_skirt(skirt:item, iron:item, ironing_board:item):
    body:
        if not plugged(iron):
            achieve plugged(iron)
        if not is_on(iron):
            achieve is_on(iron)
        if not is_skirt_iron_ready(iron, skirt):
            # Ensure iron is ready and close to the skirt
            achieve close_char(char, skirt)
        ensure_skirt_on_board(skirt, ironing_board)
        # At this point, both the iron is ready, and skirt is placed properly

behavior ensure_skirt_on_board(skirt:item, ironing_board:item):
    body:
        if not is_skirt_on_ironing_board(skirt, ironing_board):
            achieve on(skirt, ironing_board)
        # Ensure the skirt is on the ironing board

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        bind skirt: item where:
            is_clothes_skirt(skirt)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        
        iron_skirt(skirt, iron, ironing_board)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function ensure_skirt_on_board not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_skirt_2088_around_closetdrawer_394(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#goal_representation
 
def is_skirt_iron_ready(iron:item, skirt:item):
    # This function checks if the iron is ready to iron the skirt
    return plugged(iron) and is_on(iron) and close_char(char, skirt)

def is_skirt_on_ironing_board(skirt:item, ironing_board:item):
    # Function to check if the skirt is on the ironing board
    return on(skirt, ironing_board)

behavior ensure_skirt_on_ironing_board(skirt:item, ironing_board:item):
    body:
        if not is_skirt_on_ironing_board(skirt, ironing_board):
            achieve on(skirt, ironing_board)
        # Ensure the skirt is on the ironing board

behavior iron_skirt(skirt:item, iron:item, ironing_board:item):
    body:
        if not plugged(iron):
            achieve plugged(iron)
        if not is_on(iron):
            achieve is_on(iron)
        if not is_skirt_iron_ready(iron, skirt):
            # Ensure iron is ready and close to the skirt
            achieve close_char(char, skirt)
        ensure_skirt_on_ironing_board(skirt, ironing_board)
        # At this point, both the iron is ready, and skirt is placed properly

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        bind skirt: item where:
            is_clothes_skirt(skirt)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        
        iron_skirt(skirt, iron, ironing_board)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_skirt_2088_around_closetdrawer_394(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_wall_clock_249_around_light_245(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==245
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(wall_clock,light_instance)
        else:
            exp(wall_clock,light_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,light_instance]=True
        close[light_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_iron(iron:item):
    body:
        achieve plugged(iron)

behavior fill_iron_with_water(iron:item):
    body:
        achieve has_water(iron)

behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior iron_clothes(clothes:item, ironing_board:item):
    body:
        achieve on(clothes, ironing_board) # Place clothes on the ironing board
        # Here assumes the action of ironing as an achievement 

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select a skirt to iron

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        plug_in_iron(iron)
        fill_iron_with_water(iron)
        turn_on_iron(iron)
        iron_clothes(skirt, ironing_board)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior plug_in_iron(iron:item):
    body:
        achieve plugged(iron)

behavior fill_iron_with_water(iron:item):
    body:
        achieve has_water(iron)

behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior iron_clothes(clothes:item, ironing_board:item):
    body:
        achieve on(clothes, ironing_board) # Place clothes on the ironing board
        # Here assumes the action of ironing as an achievement 

behavior __goal__():
    body:
        bind skirt: item where:
            is_clothes_skirt(skirt)
        # Select a skirt to iron

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        plug_in_iron(iron)
        fill_iron_with_water(iron)
        turn_on_iron(iron)
        iron_clothes(skirt, ironing_board)

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2074)exp(iron_2089, ironing_board_2074)walk_executor(iron_2089)plugin_executor(iron_2089)grab_executor(iron_2089)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(iron_2089)switchon_executor(iron_2089)walk_executor(closetdrawer_394)exp(clothes_skirt_2088, closetdrawer_394)walk_executor(clothes_skirt_2088)grab_executor(clothes_skirt_2088)walk_executor(ironing_board_2074)put_executor(clothes_skirt_2088, ironing_board_2074)
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot find: iron_2089, Robot is close to the ironing_board_2074. 
##############################
