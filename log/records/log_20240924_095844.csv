Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
wash the bowls and the plates with dishwasher,,,,,
"['1. Find the bowls and plates that need washing.', '2. Load the bowls and plates into the dishwashe
r.', '3. Run the dishwasher.']",,,,,
"
def has_dirty_plates_or_bowls(item:item):
    symbol has_dirty=exists o: item : (is_plate(o) or is_bowl(o)) and dirty(o) and inside(o, item)
    return has_dirty

behavior __goal__():
    body:
        if exists item: item : has_dirty_plates_or_bowls(item):
            bind item: item where:
                has_dirty_plates_or_bowls(item)
            achieve close_char(char, item)
        else:
            foreach item: item:
                if not visited(item):
                    observe(item, ""Check is there any dirty bowls or plates"")
",,,,,[]
"['1. Identify the bowls and plates that need washing.', '2. Load the identified bowls and plates int
o the dishwasher.', '3. Run the dishwasher to clean the bowls and plates.']",,,,,
"def is_bowl_or_plate(item:item):
    # Function to check if the item is a bowl or a plate
    symbol result = is_bowl(item) or is_plate(item)
    return result

behavior __goal__():
    body:
        foreach sink: item:
            if is_sink(sink) and not visited(sink):
                observe(sink, ""Check if there are bowls or plates in the sink"")",,,,,"['walk_executor(sink_42); obs(sink_42, Check if there are bowls or plates in the sink); walk_executo
r(sink_231); obs(sink_231, Check if there are bowls or plates in the sink)']"
,,,,,"(CrowControllerApplier<walk_executor(sink_42)>, CrowControllerApplier<obs(sink_42, Check if there ar
e bowls or plates in the sink)>, CrowControllerApplier<walk_executor(sink_231)>, CrowControllerAppli
er<obs(sink_231, Check if there are bowls or plates in the sink)>)"
,,walk_executor(sink_42),"Find soap_2053. Find towel_rack_31. Find basket_for_clothes_2006. Find towel_rack_34. Find towel_rac
k_32. Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close sink_42. ",,
