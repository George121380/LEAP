Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
wash the bowls and the plates with dishwasher,,,,,
"['1. Find all bowls and plates that need to be washed.', '2. Load the bowls and plates into the dish
washer.', '3. Wash the bowls and plates using the dishwasher.']",,,,,
" 
def is_bowl_or_plate(item: item):
    # Function to check if an item is a bowl or a plate
    return is_bowl(item) or is_plate(item)

behavior __goal__():
    body:
        # Check all items in the scene to find bowls or plates
        foreach item: item:
            if is_bowl_or_plate(item) and dirty(item):
                observe(item, ""Check if the bowl or plate is dirty and needs washing"")
",,,,,['']
"['1. Find the bowls and plates that need washing.', '2. Wash the bowls and plates using the dishwash
er.']",,,,,
"def check_has_needed_item(item:item):
    symbol has_needed_item= exists o: item : (is_plate(o) or is_bowl(o)) and inside(o, item)
    return has_needed_item

behavior __goal__():
    body:
        if exists item: item : is_item(item) and check_has_needed_item(item):
            bind item: item where:
                (is_bowl(item) or is_plate(item)) and dirty(item)
            # Approaching the dirty bowl or plate
            achieve close_char(char, item)
        else:
            # If no item found, initiate exploration to locate one
            foreach item: item:
                if is_bowl(item) or is_plate(item) and not visited(item):
                    observe(item,""Check if the item is dirty and in need of washing"")","Error trying to process rule ""behavior_definition"":

'Function is_item not found. Note that recursive function calls are not supported in the current ver
sion.'",,,,
"
def check_has_needed_item(item:item):
    symbol has_needed_item= exists o: item : (is_plate(o) or is_bowl(o)) and inside(o, item)
    return has_needed_item

behavior __goal__():
    body:
        if exists item: item : (is_plate(item) or is_bowl(item)) and check_has_needed_item(item):
            bind item: item where:
                (is_bowl(item) or is_plate(item)) and dirty(item)
            achieve close_char(char, item)
        else:
            foreach item: item:
                if is_bowl(item) or is_plate(item) and not visited(item):
                    observe(item,""Check if the item is dirty and in need of washing"")",,,,,"['walk_executor(sink_231); exp(bowl_2071, sink_231); walk_executor(bowl_2071); obs(bowl_2071, Check 
if the item is dirty and in need of washing); walk_executor(sink_231); exp(bowl_2072, sink_231); wal
k_executor(bowl_2072); obs(bowl_2072, Check if the item is dirty and in need of washing); walk_execu
tor(dishwasher_1001); open_executor(dishwasher_1001); exp(plate_1000, dishwasher_1001); close_execut
or(dishwasher_1001); walk_executor(plate_1000); obs(plate_1000, Check if the item is dirty and in ne
ed of washing)']"
,,,,,"(CrowControllerApplier<walk_executor(sink_231)>, CrowControllerApplier<exp(bowl_2071, sink_231)>, Cr
owControllerApplier<walk_executor(bowl_2071)>, CrowControllerApplier<obs(bowl_2071, Check if the ite
m is dirty and in need of washing)>, CrowControllerApplier<walk_executor(sink_231)>, CrowControllerA
pplier<exp(bowl_2072, sink_231)>, CrowControllerApplier<walk_executor(bowl_2072)>, CrowControllerApp
lier<obs(bowl_2072, Check if the item is dirty and in need of washing)>, CrowControllerApplier<walk_
executor(dishwasher_1001)>, CrowControllerApplier<open_executor(dishwasher_1001)>, CrowControllerApp
lier<exp(plate_1000, dishwasher_1001)>, CrowControllerApplier<close_executor(dishwasher_1001)>, Crow
ControllerApplier<walk_executor(plate_1000)>, CrowControllerApplier<obs(plate_1000, Check if the ite
m is dirty and in need of washing)>)"
,,walk_executor(sink_231),"Find napkin_2005. Find pot_2069. Find knife_2050. Find cutting_board_2051. Find cup_2063. Find cup_2
064. Find bowl_2071. Find bowl_2072. Find tray_296. Find drawing_239. Find drawing_238. Find drawing
_240. Find drawing_241. Find drawing_242. Find drawing_243. Find plate_1000. Find soap_2054. Robot i
s inside dining_room_201. Robot is close kitchen_counter_230. Robot is close sink_231. Robot is no l
onger inside bathroom_1.",,
,,"exp(bowl_2071, sink_231)",Find bowl_2071. ,,
,,walk_executor(bowl_2071),"Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close bowl_2071. Robot
 is no longer close sink_231.",,
,,,,The observation does not mention if bowl_2071 is dirty and in need of washing.,
