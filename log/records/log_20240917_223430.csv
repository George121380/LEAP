Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
Put vegetables in a pot and boil them on the stove.,,,,,
"['1. Find and gather the vegetables.', '2. Put the vegetables in a pot.', '3. Boil the vegetables on
 the stove.']",,,,,
"def is_vegetable(v:item):
    # Determine whether the item is a vegetable
    symbol is_veg=is_food_vegetable(v)
    return is_veg

behavior observe_if_not_visited(obj:item, question:string):
    body:
        if not visited(obj):
            observe(obj, ""question"")

behavior __goal__():
    body:
        foreach v: item:
            if is_vegetable(v) and not visited(v):
                observe_if_not_visited(v, Is this a vegetable)","Unexpected token Token('VARNAME', 'this') at line 5815, column 46.
Expected one of: 
	* EQUAL
	* RPAR
	* COMMA
",,,,
"def is_vegetable(v:item):
    # Determine whether the item is a vegetable
    symbol is_veg=is_food_vegetable(v)
    return is_veg

behavior observe_if_not_visited(obj:item, question:string):
    body:
        if not visited(obj):
            observe(obj, ""question"")

behavior __goal__():
    body:
        foreach v: item:
            if is_vegetable(v) and not visited(v):
                observe_if_not_visited(v, Is this a vegetable)","Unexpected token Token('VARNAME', 'this') at line 5815, column 46.
Expected one of: 
	* EQUAL
	* RPAR
	* COMMA
",,,,
"
def is_vegetable(v:item):
    # Determine whether the item is a vegetable
    symbol is_veg=is_food_vegetable(v)
    return is_veg

behavior observe_if_not_visited(obj:item, question:string):
    body:
        if not visited(obj):
            observe(obj, ""question"")

behavior __goal__():
    body:
        foreach v: item:
            if is_vegetable(v) and not visited(v):
                observe_if_not_visited(v, Is this a vegetable)
","Unexpected token Token('VARNAME', 'this') at line 5816, column 46.
Expected one of: 
	* EQUAL
	* RPAR
	* COMMA
",,,,
"## Output:
def is_vegetable(v:item):
    symbol is_veg=is_food_vegetable(v)
    return is_veg

behavior observe_if_not_visited(obj:item, question:string):
    body:
        if not visited(obj):
            observe(obj, ""question"")

behavior __goal__():
    body:
        foreach v: item:
            if is_vegetable(v) and not visited(v):
                observe_if_not_visited(v, Is this a vegetable)","Unexpected token Token('VARNAME', 'this') at line 5815, column 46.
Expected one of: 
	* EQUAL
	* RPAR
	* COMMA
",,,,
"Output:
 
def is_vegetable(v:item):
    symbol is_veg=is_food_vegetable(v)
    return is_veg

behavior observe_if_not_visited(obj:item, question:string):
    body:
        if not visited(obj):
            observe(obj, ""question"")

behavior __goal__():
    body:
        foreach v: item:
            if is_vegetable(v) and not visited(v):
                observe_if_not_visited(v, Is this a vegetable)
","Unexpected token Token('BASIC_TYPENAME', 'Output') at line 5801, column 1.
Expected one of: 
	* OBJECTS
	* DOMAIN
	* _PRAGMA_KEYWORD
	* FEATURE
	* CONTROLLER
	* TYPEDEF
	* UNDIRECTED_GENERATOR
	* INIT
	* $END
	* GENERATOR
	* BEHAVIOR
	* ACTION
	* DEF
	* GOAL
	* IMPORT
	* _NEWLINE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]
",,,,
"def is_vegetable(x:item):
    # Function to determine if an item is a vegetable
    return is_food_vegetable(x)

def has_vegetables(kitchen_counter:item):
    # Function to check if there are vegetables on a kitchen counter
    symbol have_vegetables=exists v: item : is_vegetable(v) and on(v, kitchen_counter)
    return have_vegetables

behavior __goal__():
    body:
        if exists kitchen_counter: item : is_kitchen_counter(kitchen_counter) and has_vegetables(kit
chen_counter):
            # If there is a kitchen counter with vegetables already found, approach it
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter) and has_vegetables(kitchen_counter)
            achieve close_char(char, kitchen_counter)
        else:
            # If no such kitchen counter is known, observe all unvisited kitchen counters
            foreach kitchen_counter: item:
                if is_kitchen_counter(kitchen_counter) and not visited(kitchen_counter):
                    observe(kitchen_counter, ""check if there are vegetables on the kitchen counter"")",,,,,"['walk_executor(kitchen_counter_230); obs(kitchen_counter_230, check if there are vegetables on the 
kitchen counter)']"
,,,,,"(CrowControllerApplier<walk_executor(kitchen_counter_230)>, CrowControllerApplier<obs(kitchen_counte
r_230, check if there are vegetables on the kitchen counter)>)"
,,walk_executor(kitchen_counter_230),"Find cup_2064. Find cup_2063. Find drawing_239. Find tray_296. Find cutting_board_2051. Find knife_2
050. Find pot_2069. Find napkin_2005. Find drawing_238. Find drawing_240. Find drawing_241. Find dra
wing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Rob
ot is no longer inside bathroom_1.",,
,,,,There are no vegetables on kitchen_counter_230.,
,,"obs(kitchen_counter_230, check if there are vegetables on the kitchen counter)","Get this information: There are no vegetables on kitchen_counter_230.
",,
,,,,"- Sub-Task Completed: No
- Next Steps: You need to continue searching for and gathering vegetables. There were no vegetables 
found on kitchen_counter_230, so you should move to another location where vegetables might be prese
nt and check there.",
,,,"Human Instruction: You need to continue searching for and gathering vegetables. There were no vegeta
bles found on kitchen_counter_230, so you should move to another location where vegetables might be 
present and check there.

The actions you have taken:
Action 1: Walk to kitchen_counter_230. -> effect: Find cup_2064. Find cup_2063. Find drawing_239. Fi
nd tray_296. Find cutting_board_2051. Find knife_2050. Find pot_2069. Find napkin_2005. Find drawing
_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining
_room_201. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
Action 2: Observe around kitchen_counter_230 with the question of check if there are vegetables on t
he kitchen counter. -> effect: Get this information: There are no vegetables on kitchen_counter_230.

",,
"def possible_vegetable_location(location:item):
    symbol can_have_vegetables = is_kitchen_counter(location) or is_fridge(location) or is_cabinet(l
ocation) or is_basket_for_clothes(location)
    return can_have_vegetables

behavior __goal__():
    body:
        foreach location: item:
            if possible_vegetable_location(location) and not visited(location):
                observe(location, ""Check if there are vegetables in the location"")",,,,,[]
"['1. Find the vegetables.', '2. Put the vegetables in a pot.', '3. Boil the vegetables on the stove.
']",,,,,
"def vegetable_location(vegetable: item):
    symbol location=exists loc: item : inside(vegetable, loc)
    return location

behavior __goal__():
    body:
        if exists vegetable: item : is_food_vegetable(vegetable) and vegetable_location(vegetable):
            # If vegetable found and location is known, move close to it
            bind vegetable: item where:
                is_food_vegetable(vegetable) and vegetable_location(vegetable)
            bind loc: item where:
                inside(vegetable, loc)
            achieve close_char(char, loc)
        else:
            # If no vegetables are found, check other potential locations
            foreach loc: item:
                if not visited(loc):
                    observe(loc,""Check if there are vegetables at this location"")",,,,,[]
"['1. Find the vegetables.', '2. Put the vegetables in a pot.', '3. Boil the vegetables on the stove.
']",,,,,
"def search_for_vegetables():
    body:
        foreach location: item:
            if not visited(location) and not inside_char(char, location):
                observe(location, ""Check if there are vegetables in this location"")

behavior __goal__():
    body:
        if exists vegetable: item : is_food_vegetable(vegetable):
            achieve close_char(char, vegetable)
        else:
            search_for_vegetables()","Unexpected token Token('COLON', ':') at line 5817, column 9.
Expected one of: 
	* __ANON_5
	* SLASH
	* NOT_EQ
	* __ANON_2
	* DOUBLE_EQUAL
	* __ANON_0
	* MORETHAN
	* __ANON_3
	* AND
	* PLUS
	* _NEWLINE
	* __ANON_6
	* IF
	* __ANON_8
	* LESSTHAN
	* __ANON_7
	* LESS_EQ
	* COMMA
	* FLOORDIV
	* OR
	* SEMICOLON
	* __ANON_4
	* RSHIFT
	* VBAR
	* AMPERSAND
	* LSHIFT
	* STAR
	* AT
	* GREATER_EQ
	* __ANON_1
	* CIRCUMFLEX
	* MINUS
	* EQUAL
	* PERCENT
",,,,
" 
def search_for_vegetables():
    body:
        foreach location: item:
            if not visited(location) and not inside_char(char, location):
                observe(location, ""Check if there are vegetables in this location"")

behavior __goal__():
    body:
        if exists vegetable: item : is_food_vegetable(vegetable):
            achieve close_char(char, vegetable)
        else:
            search_for_vegetables()
","Unexpected token Token('COLON', ':') at line 5803, column 9.
Expected one of: 
	* __ANON_5
	* SLASH
	* NOT_EQ
	* __ANON_2
	* DOUBLE_EQUAL
	* __ANON_0
	* MORETHAN
	* __ANON_3
	* AND
	* PLUS
	* _NEWLINE
	* __ANON_6
	* IF
	* __ANON_8
	* LESSTHAN
	* __ANON_7
	* LESS_EQ
	* COMMA
	* FLOORDIV
	* OR
	* SEMICOLON
	* __ANON_4
	* RSHIFT
	* VBAR
	* AMPERSAND
	* LSHIFT
	* STAR
	* AT
	* GREATER_EQ
	* __ANON_1
	* CIRCUMFLEX
	* MINUS
	* EQUAL
	* PERCENT
",,,,
" 
def search_for_vegetables():
    body:
        foreach location: item:
            if not visited(location) and not inside_char(char, location):
                observe(location, ""Check if there are vegetables in this location"")

behavior __goal__():
    body:
        if exists vegetable: item : is_food_vegetable(vegetable):
            achieve close_char(char, vegetable)
        else:
            search_for_vegetables()
","Unexpected token Token('COLON', ':') at line 5803, column 9.
Expected one of: 
	* __ANON_5
	* SLASH
	* NOT_EQ
	* __ANON_2
	* DOUBLE_EQUAL
	* __ANON_0
	* MORETHAN
	* __ANON_3
	* AND
	* PLUS
	* _NEWLINE
	* __ANON_6
	* IF
	* __ANON_8
	* LESSTHAN
	* __ANON_7
	* LESS_EQ
	* COMMA
	* FLOORDIV
	* OR
	* SEMICOLON
	* __ANON_4
	* RSHIFT
	* VBAR
	* AMPERSAND
	* LSHIFT
	* STAR
	* AT
	* GREATER_EQ
	* __ANON_1
	* CIRCUMFLEX
	* MINUS
	* EQUAL
	* PERCENT
",,,,
"Output:
 
def search_for_vegetables():
    body:
        foreach location: item:
            if not visited(location) and not inside_char(char, location):
                observe(location, ""Check if there are vegetables in this location"")

behavior __goal__():
    body:
        if exists vegetable: item : is_food_vegetable(vegetable):
            achieve close_char(char, vegetable)
        else:
            search_for_vegetables()
","Unexpected token Token('BASIC_TYPENAME', 'Output') at line 5801, column 1.
Expected one of: 
	* OBJECTS
	* DOMAIN
	* _PRAGMA_KEYWORD
	* FEATURE
	* CONTROLLER
	* TYPEDEF
	* UNDIRECTED_GENERATOR
	* INIT
	* $END
	* GENERATOR
	* BEHAVIOR
	* ACTION
	* DEF
	* GOAL
	* IMPORT
	* _NEWLINE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]
",,,,
" 
def search_for_vegetables():
    body:
        foreach location: item:
            if not visited(location) and not inside_char(char, location):
                observe(location, ""Check if there are vegetables in this location"")

behavior __goal__():
    body:
        if exists vegetable: item : is_food_vegetable(vegetable):
            achieve close_char(char, vegetable)
        else:
            search_for_vegetables()
","Unexpected token Token('COLON', ':') at line 5803, column 9.
Expected one of: 
	* __ANON_5
	* SLASH
	* NOT_EQ
	* __ANON_2
	* DOUBLE_EQUAL
	* __ANON_0
	* MORETHAN
	* __ANON_3
	* AND
	* PLUS
	* _NEWLINE
	* __ANON_6
	* IF
	* __ANON_8
	* LESSTHAN
	* __ANON_7
	* LESS_EQ
	* COMMA
	* FLOORDIV
	* OR
	* SEMICOLON
	* __ANON_4
	* RSHIFT
	* VBAR
	* AMPERSAND
	* LSHIFT
	* STAR
	* AT
	* GREATER_EQ
	* __ANON_1
	* CIRCUMFLEX
	* MINUS
	* EQUAL
	* PERCENT
",,,,
"behavior __goal__():
    body:
        if exists veg: item : is_food_vegetable(veg) and not visited(veg):
            # If we have already found the vegetables, we can directly approach them
            bind veg: item where:
                is_food_vegetable(veg) and not visited(veg)
            achieve close_char(char, veg)

        else:
            # Check all possible locations for vegetables that have not been visited
            foreach loc: item:
                if is_kitchen_counter(loc) or is_fridge(loc) or is_table(loc) and not visited(loc):
                    observe(loc,""Check if there are vegetables at this location"")",,,,,"['walk_executor(fridge_289); exp(food_vegetable_2041, fridge_289); walk_executor(food_vegetable_2041
)']"
,,,,,"(CrowControllerApplier<walk_executor(fridge_289)>, CrowControllerApplier<exp(food_vegetable_2041, fr
idge_289)>, CrowControllerApplier<walk_executor(food_vegetable_2041)>)"
,,walk_executor(fridge_289),"Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_b
read_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016.
 Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food
_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream
_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find f
ood_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find fo
od_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038
. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find m
ilk_2043. Robot is inside dining_room_201. Robot is close fridge_289. Robot is close floor_202. Robo
t is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close
 food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close fo
od_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_
cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food
_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2
022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cre
am_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028
. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_203
1. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza
_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037
. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. R
obot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is
 no longer close kitchen_counter_230.",,
,,"exp(food_vegetable_2041, fridge_289)",Find food_vegetable_2041. ,,
,,walk_executor(food_vegetable_2041),"Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_vegetable_2041. Robo
t is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_stea
k_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no
 longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close foo
d_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robo
t is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer 
close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2
020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no long
er close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_
ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot 
is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer clo
se food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2
032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot 
is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close
 food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Ro
bot is no longer close food_turkey_2040.Robot is no longer close dry_pasta_2042.Robot is no longer c
lose milk_2043.",,
,,,,"- Sub-Task Completed: Yes
- Next Steps: You successfully found the vegetables by checking the kitchen counter and then locatin
g them in the fridge. Now you need to proceed to the next sub-task, which is to put the vegetables i
n a pot.",
"behavior place_vegetable_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot) # Place the vegetable inside the pot

behavior __goal__():
    body:
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable) and id[food_vegetable] == 2041
        # Select the vegetable with ID 2041
        
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069
        
        place_vegetable_in_pot(food_vegetable, pot) # Place the vegetable in the pot",,,,,"['walk_executor(kitchen_counter_230); exp(pot_2069, kitchen_counter_230); walk_executor(fridge_289);
 exp(food_vegetable_2041, fridge_289); walk_executor(pot_2069); open_executor(pot_2069); walk_execut
or(food_vegetable_2041); grab_executor(food_vegetable_2041); walk_executor(pot_2069); putin_executor
(food_vegetable_2041, pot_2069)']"
,,,,,"(CrowControllerApplier<walk_executor(pot_2069)>, CrowControllerApplier<open_executor(pot_2069)>, Cro
wControllerApplier<walk_executor(food_vegetable_2041)>, CrowControllerApplier<grab_executor(food_veg
etable_2041)>, CrowControllerApplier<walk_executor(pot_2069)>, CrowControllerApplier<putin_executor(
food_vegetable_2041, pot_2069)>)"
,,walk_executor(pot_2069),"Robot is inside dining_room_201. Robot is close pot_2069. Robot is close kitchen_counter_230. Robot 
is no longer close food_vegetable_2041.Robot is no longer close fridge_289.",,
,,open_executor(pot_2069),Robot is inside dining_room_201. Robot is close pot_2069. Robot is close kitchen_counter_230. ,,
,,walk_executor(food_vegetable_2041),"Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_vegetable_2041. Robo
t is no longer close pot_2069.Robot is no longer close kitchen_counter_230.",,
,,grab_executor(food_vegetable_2041),"Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_vegetable_2041. Grab
bing food_vegetable_2041 by right hand. ",,
,,walk_executor(pot_2069),"Robot is inside dining_room_201. Robot is close food_vegetable_2041. Robot is close pot_2069. Robot 
is close kitchen_counter_230. Robot is no longer close fridge_289.",,
,,"putin_executor(food_vegetable_2041, pot_2069)","Robot is inside dining_room_201. Robot is close food_vegetable_2041. Robot is close pot_2069. Robot 
is close kitchen_counter_230. food_vegetable_2041 released by right hand. ",,
,,,,"- Sub-Task Completed: Yes
- Next Steps: You successfully placed the vegetable (food_vegetable_2041) into the pot (pot_2069). P
roceed to the next sub-task of boiling the vegetables on the stove.",
" 
behavior plug_stove(stove: item):
    body:
        achieve plugged(stove)

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior put_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

def in_kitchen(item: item):
    symbol in_kitchen=exists room: item : is_kitchen(room) and inside(item, room)
    return in_kitchen
    
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and in_kitchen(stove)
        
        bind pot: item where:
            is_pot(pot) and close_char(char, pot)
        
        plug_stove(stove)
        turn_on_stove(stove)
        put_pot_on_stove(pot, stove)
",,,,,[]
" 
def has_stoveburner(stove:item):
    # Determine whether this stove has a stoveburner
    symbol has_stoveburner=exists stoveburner:item: is_stoveburner(stoveburner) and close(stoveburne
r,stove)
    return has_stoveburner

behavior turn_on_stove(stove:item):
    body:
        if has_stoveburner(stove):
            bind stoveburner: item where:
                is_stoveburner(stoveburner) and close(stoveburner,stove)
            achieve_once is_on(stoveburner)
        
behavior boil_vegetables(pot:item):
    body:
        achieve is_on(pot)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind pot: item where:
            is_pot(pot)
        achieve inside(pot, stove)
        turn_on_stove(stove)
        boil_vegetables(pot)
","Error trying to process rule ""function_definition"":

'Function is_stoveburner not found. Note that recursive function calls are not supported in the curr
ent version.'",,,,
"def has_stovefan(stove:item):
    # Determine whether this stove has a stovefan
    symbol has_stovefan=exists stovefan:item: is_stovefan(stovefan) and close(stovefan,stove)
    return has_stovefan

behavior turn_on_stove(stove:item):
    body:
        if has_stovefan(stove):
            bind stovefan: item where:
                is_stovefan(stovefan) and close(stovefan,stove)
            achieve_once is_on(stovefan)
        
behavior boil_vegetables(pot:item):
    body:
        achieve is_on(pot)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind pot: item where:
            is_pot(pot)
        achieve inside(pot, stove)
        turn_on_stove(stove)
        boil_vegetables(pot)",,,,,[]
,,,,I don't know.,
"plaintext
behavior ensure_stove_is_on(stove:item):
    body:
        achieve is_on(stove)

behavior ensure_pot_boiling(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind pot: item where:
            is_pot(pot)
        ensure_stove_is_on(stove)
        ensure_pot_boiling(pot, stove)
","Unexpected token Token('BASIC_TYPENAME', 'plaintext') at line 5756, column 1.
Expected one of: 
	* OBJECTS
	* DOMAIN
	* _PRAGMA_KEYWORD
	* FEATURE
	* CONTROLLER
	* TYPEDEF
	* UNDIRECTED_GENERATOR
	* INIT
	* $END
	* GENERATOR
	* BEHAVIOR
	* ACTION
	* DEF
	* GOAL
	* IMPORT
	* _NEWLINE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]
",,,,
"behavior ensure_stove_is_on(stove:item):
    body:
        achieve is_on(stove)

behavior ensure_pot_boiling(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind pot: item where:
            is_pot(pot)
        ensure_stove_is_on(stove)
        ensure_pot_boiling(pot, stove)",,,,,[]
,,,,,"(CrowControllerApplier<walk_executor(stove_2065)>, CrowControllerApplier<close_executor(stove_2065)>
, CrowControllerApplier<switchon_executor(stove_2065)>, CrowControllerApplier<walk_executor(pot_2069
)>, CrowControllerApplier<grab_executor(pot_2069)>, CrowControllerApplier<walk_executor(stove_2065)>
, CrowControllerApplier<put_executor(pot_2069, stove_2065)>)"
,,walk_executor(stove_2065),"Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close stove_2065. Robo
t is no longer close food_vegetable_2041.Robot is no longer close pot_2069.",,
"behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        turn_on_stove(stove)",,,,,['walk_executor(stove_2065); close_executor(stove_2065); switchon_executor(stove_2065)']
,,switchon_executor(stove_2065),Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close stove_2065. ,,
,,walk_executor(pot_2069),"Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close food_vegetable_2
041. Robot is close pot_2069. Robot is no longer close stove_2065.",,
,,grab_executor(pot_2069),"Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close food_vegetable_2
041. Robot is close pot_2069. Grabbing pot_2069 by right hand. ",,
,,walk_executor(stove_2065),"Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Robot 
is close stove_2065. Robot is no longer close food_vegetable_2041.",,
,,"put_executor(pot_2069, stove_2065)","Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Robot 
is close stove_2065. pot_2069 released by right hand. ",,
,,,,"- Sub-Task Completed: Yes
- Next Steps: You walked to the kitchen counter and confirmed there were no vegetables there. You th
en proceeded to the fridge, found and grabbed the vegetables. Next, you located and opened the pot, 
placed the vegetables inside, and moved the pot to the stove. Finally, you turned on the stove to bo
il the vegetables.",
16,walk_executor(kitchen_counter_230),,,,
16,walk_executor(fridge_289),,,,
16,walk_executor(food_vegetable_2041),,,,
16,walk_executor(pot_2069),,,,
16,open_executor(pot_2069),,,,
16,walk_executor(food_vegetable_2041),,,,
16,grab_executor(food_vegetable_2041),,,,
16,walk_executor(pot_2069),,,,
16,"putin_executor(food_vegetable_2041, pot_2069)",,,,
16,walk_executor(stove_2065),,,,
16,close_executor(stove_2065) (Failed),,,,
16,switchon_executor(stove_2065),,,,
16,walk_executor(pot_2069),,,,
16,grab_executor(pot_2069),,,,
16,walk_executor(stove_2065),,,,
16,"put_executor(pot_2069, stove_2065)",,,,
