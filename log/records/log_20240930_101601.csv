Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
"['1. Prepare the chicken and onions.', '2. Season the chicken and onions.', '3. Roast the chicken an
d onions in the oven.']",,,,,
" 
def is_food_instance(x: item):
    return is_food_chicken(x) or is_food_onion(x)

behavior wash_item(item: item):
    body:
        bind sink: item where:
            is_sink(sink)
        achieve once inside(item, sink)
        wash(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        wash_item(chicken)
        wash_item(onion)
","Unexpected token Token('VARNAME', 'inside') at line 2605, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
",,,,
" 
behavior wash_item(item: item, sink: item):
    body:
        achieve_once inside(item, sink)
        wash(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind sink: item where:
            is_sink(sink)
        wash_item(chicken, sink)
        wash_item(onion, sink)
",,,,,"['walk_executor(kitchen_counter_230); exp(food_chicken_2017, kitchen_counter_230); walk_executor(foo
d_chicken_2017); grab_executor(food_chicken_2017); walk_executor(sink_42); putin_executor(food_chick
en_2017, sink_42); walk_executor(food_chicken_2017); wash_executor(food_chicken_2017); walk_executor
(kitchen_counter_230); exp(food_onion_2032, kitchen_counter_230); walk_executor(food_onion_2032); gr
ab_executor(food_onion_2032); walk_executor(sink_42); putin_executor(food_onion_2032, sink_42); walk
_executor(food_onion_2032); wash_executor(food_onion_2032)']"
,,,,,"(CrowControllerApplier<walk_executor(kitchen_counter_230)>, CrowControllerApplier<exp(food_chicken_2
017, kitchen_counter_230)>, CrowControllerApplier<walk_executor(food_chicken_2017)>, CrowControllerA
pplier<grab_executor(food_chicken_2017)>, CrowControllerApplier<walk_executor(sink_42)>, CrowControl
lerApplier<putin_executor(food_chicken_2017, sink_42)>, CrowControllerApplier<walk_executor(food_chi
cken_2017)>, CrowControllerApplier<wash_executor(food_chicken_2017)>, CrowControllerApplier<walk_exe
cutor(kitchen_counter_230)>, CrowControllerApplier<exp(food_onion_2032, kitchen_counter_230)>, CrowC
ontrollerApplier<walk_executor(food_onion_2032)>, CrowControllerApplier<grab_executor(food_onion_203
2)>, CrowControllerApplier<walk_executor(sink_42)>, CrowControllerApplier<putin_executor(food_onion_
2032, sink_42)>, CrowControllerApplier<walk_executor(food_onion_2032)>, CrowControllerApplier<wash_e
xecutor(food_onion_2032)>)"
,,walk_executor(kitchen_counter_230),"Find oil_2079. Find cutting_board_2051. Find bowl_2071. Find napkin_2005. Find knife_2050. Find cup_
2063. Find cup_2064. Find pot_2069. Find bowl_2072. Find tray_296. Find drawing_239. Find drawing_23
8. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_ro
om_201. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.",,
,,"exp(food_chicken_2017, kitchen_counter_230)",Failed to find food_chicken_2017 around kitchen_counter_230. ,,
"['1. Prepare the chicken and onions.', '2. Season the chicken and onions.', '3. Roast the chicken an
d onions in the oven.']",,,,,
" 
behavior clean_food(food:item, sink:item):
    body:
        achieve_once inside(food, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
        wash(food)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)

behavior cut_food(food:item):
    body:
        achieve cut(food)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind sink: item where:
            is_sink(sink)
        clean_food(chicken, sink)
        clean_food(onion, sink)
        achieve on(cutting_board, sink)  # Move the cutting board close to the sink
        cut_food(chicken)
        cut_food(onion)
","Error trying to process rule ""behavior_definition"":

'Function has_faucet not found. Note that recursive function calls are not supported in the current 
version.'",,,,
"behavior clean_food(food:item, sink:item):
    body:
        achieve_once inside(food, sink)
        if is_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
        wash(food)
        if is_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)

behavior cut_food(food:item):
    body:
        achieve cut(food)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind sink: item where:
            is_sink(sink)
        clean_food(chicken, sink)
        clean_food(onion, sink)
        achieve on(cutting_board, sink)  # Move the cutting board close to the sink
        cut_food(chicken)
        cut_food(onion)",,,,,[]
"['1. Prepare the chicken and onion.', '2. Season the chicken and onion.', '3. Roast the chicken and 
onion in the oven.']",,,,,
"behavior observe_item_oil_208(item:item): 
    body:
        observe(item, ""Check is oil on the kitchen_counter"")
        
behavior observe_item_cutting_board_2051(item:item): 
    body:
        observe(item, ""Check is cutting_board on the kitchen_counter"")
        
behavior observe_item_bowl_2071(item:item): 
    body:
        observe(item, ""Check is bowl on the kitchen_counter"")
        
behavior observe_item_napkin_2005(item:item): 
    body:
        observe(item, ""Check is napkin on the kitchen_counter"")

behavior observe_item_knife_2050(item:item): 
    body:
        observe(item, ""Check is knife on the kitchen_counter"")

behavior observe_item_food_chicken_2017(item:item): 
    body:
        observe(item, ""look for chicken"")
        
behavior check_food_onion_in_freezer(): 
    body:
        foreach food_vegetable:item:
            if is_food_onion(food_vegetable):
                observe(food_vegetable, ""Check is food_onion inside the fridge"")
                
behavior observe_items_in_fridge(): 
    body:
        observe(fridge, ""Check the items inside fridge"")

behavior __goal__():
    body:
        if not exists food_chicken: item : is_food_chicken(food_chicken) and on(food_chicken, kitche
n_counter):
            observe_item_food_chicken_2017(kitchen_counter)
            
        if not exists food_onion: item : is_food_onion(food_onion):
            check_food_onion_in_freezer()
            
        if not exists onion: item : is_food_onion(onion) and inside(onion, kitchen_counter):
            observe_item_onion(kitchen_counter)
        
        bind oil: item where:
            is_oil(oil)
        observe_item_oil_208(oil)
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        observe_item_cutting_board_2051(cutting_board)
        
        bind bowl: item where:
            is_bowl(bowl)
        observe_item_bowl_2071(bowl)
        
        bind napkin: item where:
            is_napkin(napkin)
        observe_item_napkin_2005(napkin)
        
        bind knife: item where:
            is_knife(knife)
        observe_item_knife_2050(knife)
","Unexpected token Token('VARNAME', 'food_chicken') at line 2704, column 23.
Expected one of: 
	* COLON
",,,,
" 
behavior __goal__():
    body:
        if not exists food_chicken: item : is_food_chicken(food_chicken) and on(food_chicken, kitche
n_counter):
            observe_item_food_chicken_2017(kitchen_counter)
            
        if not exists food_onion: item : is_food_onion(food_onion):
            check_food_onion_in_freezer()
            
        if not exists onion: item : is_food_onion(onion) and inside(onion, kitchen_counter):
            observe_item_onion(kitchen_counter)
        
        bind oil: item where:
            is_oil(oil)
        observe_item_oil_208(oil)
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        observe_item_cutting_board_2051(cutting_board)
        
        bind bowl: item where:
            is_bowl(bowl)
        observe_item_bowl_2071(bowl)
        
        bind napkin: item where:
            is_napkin(napkin)
        observe_item_napkin_2005(napkin)
        
        bind knife: item where:
            is_knife(knife)
        observe_item_knife_2050(knife)
","Unexpected token Token('VARNAME', 'food_chicken') at line 2709, column 23.
Expected one of: 
	* COLON
",,,,
"behavior __goal__():
    body:
        if not exists food_chicken: item : is_food_chicken(food_chicken):
            observe(kitchen_counter_230, ""Find food_chicken_2017"")
            if exists food_chicken: item : is_food_chicken(food_chicken) and on(food_chicken, kitche
n_counter_230):
                achieve on(food_chicken, kitchen_counter_230)
            
        if not exists food_onion: item : is_food_onion(food_onion):
            check_food_onion_in_freezer()
            
        if not exists onion: item : is_food_onion(onion):
            observe(kitchen_counter_230, ""Find processed onions"")
            if exists onion: item : is_food_onion(onion) and inside(onion, kitchen_counter_230):
                achieve inside(onion, kitchen_counter_230)
        
        bind oil: item where:
            is_oil(oil)
        observe_item(Find oil instance)
        observe_item_oil_208(oil)
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        observe_item(cutting_board, Find cutting board instance)
        observe_item_cutting_board_2051(cutting_board)
        
        bind bowl: item where:
            is_bowl(bowl)
        observe_item(bowl, Find bowl instance)
        observe_item_bowl_2071(bowl)
        
        bind napkin: item where:
            is_napkin(napkin)
        observe_item(napkin, Find napkin instance)
        observe_item_napkin_2005(napkin)
        
        bind knife: item where:
            is_knife(knife)
        observe_item(knife, Find knife instance)
        observe_item_knife_2050(knife)","Unexpected token Token('VARNAME', 'food_chicken') at line 2689, column 23.
Expected one of: 
	* COLON
",,,,
"behavior wash_food(food:item, sink:item):
    body:
        achieve_once inside(food, sink)
        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            achieve_once is_on(faucet)
        wash(food)
        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            achieve_once is_off(faucet)

behavior cut_food(food:item):
    body:
        bind knife: item where:
            is_knife(knife)
        achieve_once inhand(knife)
        achieve cut(food)

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        achieve close_char(char, cutting_board)
        bind onion: item where:
            is_food_onion(onion) and not visited(onion)
        observe(onion, ""Check the state of onion"")
        bind chicken: item where:
            is_food_chicken(chicken) and not visited(chicken)
        observe(chicken, ""Check the state of chicken"")","Error trying to process rule ""behavior_definition"":

Unknown variable: faucet; available variables: [Variable<food: item>, Variable<sink: item>].",,,,
"behavior wash_food(food:item, sink:item):
    body:
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        achieve_once is_on(faucet)
        wash(food)
        achieve_once is_off(faucet)

behavior cut_food(food:item):
    body:
        bind knife: item where:
            is_knife(knife)
        achieve_once inhand(knife)
        achieve cut(food)

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        achieve close_char(char, cutting_board)
        bind onion: item where:
            is_food_onion(onion) and not visited(onion)
        observe(onion, ""Check the state of onion"")
        bind chicken: item where:
            is_food_chicken(chicken) and not visited(chicken)
        observe(chicken, ""Check the state of chicken"")",,,,,[]
"['1. Prepare the chicken and onion for roasting.', '2. Roast the chicken and onion in the oven.']",,,,,
"behavior find_and_prepare_chicken(chicken:item):
    body:
        if not visited(chicken):
            observe(chicken, ""Locate and inspect chicken"")
        achieve close_char(char, chicken)
        achieve clean(chicken)

behavior find_and_prepare_onion(onion:item):
    body:
        if not visited(onion):
            observe(onion, ""Locate and inspect onion"")
        achieve close_char(char, onion)
        achieve clean(onion)

behavior cut_on_board(item:item):
    body:
        bind board: item where:
            is_cutting_board(board) and close_char(char, board)
        achieve on(item, board)
        achieve cut(item)

behavior oil_item(item:item):
    body:
        bind oil: item where:
            is_oil(oil) and close_char(char, oil)
        achieve oil(item)

behavior place_on_tray(item:item, tray:item):
    body:
        achieve on(item, tray)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        find_and_prepare_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        find_and_prepare_onion(onion)
        cut_on_board(onion)
        bind tray: item where:
            is_tray(tray) and close_char(char, tray)
        oil_item(chicken)
        place_on_tray(chicken, tray)
        place_on_tray(onion, tray)","Error trying to process rule ""behavior_definition"":

'Function oil not found. Note that recursive function calls are not supported in the current version
.'",,,,
"behavior find_and_prepare_chicken(chicken:item):
    body:
        if not visited(chicken):
            observe(chicken, ""Locate and inspect chicken"")
        achieve close_char(char, chicken)
        achieve clean(chicken)

behavior find_and_prepare_onion(onion:item):
    body:
        if not visited(onion):
            observe(onion, ""Locate and inspect onion"")
        achieve close_char(char, onion)
        achieve clean(onion)

behavior cut_on_board(item:item):
    body:
        bind board: item where:
            is_cutting_board(board) and close_char(char, board)
        achieve on(item, board)
        achieve cut(item)

behavior oil_item(item:item):
    body:
        bind oil: item where:
            is_cleaning_solution(oil) and close_char(char, oil)
        achieve oil(item)

behavior place_on_tray(item:item, tray:item):
    body:
        achieve on(item, tray)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        find_and_prepare_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        find_and_prepare_onion(onion)
        cut_on_board(onion)
        bind tray: item where:
            is_tray(tray) and close_char(char, tray)
        oil_item(chicken)
        place_on_tray(chicken, tray)
        place_on_tray(onion, tray)","Error trying to process rule ""behavior_definition"":

'Function oil not found. Note that recursive function calls are not supported in the current version
.'",,,,
"
behavior find_and_prepare_chicken(chicken:item):
    body:
        if not visited(chicken):
            observe(chicken, ""Locate and inspect chicken"")
        achieve close_char(char, chicken)
        achieve clean(chicken)

behavior find_and_prepare_onion(onion:item):
    body:
        if not visited(onion):
            observe(onion, ""Locate and inspect onion"")
        achieve close_char(char, onion)
        achieve clean(onion)

behavior cut_on_board(item:item):
    body:
        bind board: item where:
            is_cutting_board(board) and close_char(char, board)
        achieve on(item, board)
        achieve cut(item)

behavior oil_item(item:item):
    body:
        bind oil: item where:
            is_oil(oil) and close_char(char, oil)
        achieve oil(item)

behavior place_on_tray(item:item, tray:item):
    body:
        achieve on(item, tray)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        find_and_prepare_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        find_and_prepare_onion(onion)
        cut_on_board(onion)
        bind tray: item where:
            is_tray(tray) and close_char(char, tray)
        oil_item(chicken)
        place_on_tray(chicken, tray)
        place_on_tray(onion, tray)
","Error trying to process rule ""behavior_definition"":

'Function oil not found. Note that recursive function calls are not supported in the current version
.'",,,,
"plaintext
def is_food_chicken_bound_to_preparation_goal(chicken: item):
    return is_food_chicken(chicken)

def is_food_onion_bound_to_preparation_goal(onion: item):
    return is_food_onion(onion)

def is_cutting_board_bound_to_preparation_goal(cutting_board: item):
    return is_cutting_board(cutting_board)

def is_knife_bound_to_preparation_goal(knife: item):
    return is_knife(knife)

behavior prepare_food_for_roasting(food1: item, food2: item, cutting_board: item, knife: item):
    body:
        achieve inside(food1, kitchen_counter_230)
        achieve inside(food2, kitchen_counter_230)
        achieve on(food1, cutting_board)
        achieve on(food2, cutting_board)
        achieve cut(food1)
        achieve cut(food2)
        
behavior __goal__():
    body:
        bind food_chicken: item where:
            is_food_chicken_bound_to_preparation_goal(food_chicken)
        bind food_onion: item where:
            is_food_onion_bound_to_preparation_goal(food_onion)
        bind cutting_board: item where:
            is_cutting_board_bound_to_preparation_goal(cutting_board)
        bind knife: item where:
            is_knife_bound_to_preparation_goal(knife)
        prepare_food_for_roasting(food_chicken, food_onion, cutting_board, knife)
","Unexpected token Token('BASIC_TYPENAME', 'plaintext') at line 2687, column 1.
Expected one of: 
	* GENERATOR
	* TYPEDEF
	* BEHAVIOR
	* ACTION
	* CONTROLLER
	* _PRAGMA_KEYWORD
	* INIT
	* DOMAIN
	* FEATURE
	* OBJECTS
	* IMPORT
	* GOAL
	* UNDIRECTED_GENERATOR
	* DEF
	* _NEWLINE
	* $END
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]
",,,,
