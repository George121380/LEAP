Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
Get a cup of water from the faucet in the dining room.,,,,,
"['1. Find a cup.', '2. Fill the cup with water from the faucet in the dining room.']",,,,,
"def is_cup(x: item):
    # Function to check if an item is a cup
    return is_cup(x)

behavior __goal__():
    body:
        foreach item: item:
            if is_cup(item):
                achieve visited(item)",,,,,"['walk_executor(coffee_table_2068); exp(cup_2063, coffee_table_2068); walk_executor(cup_2063); obs(c
up_2063, look around this place); walk_executor(coffee_table_2068); exp(cup_2064, coffee_table_2068)
; walk_executor(cup_2064); obs(cup_2064, look around this place)']"
,,,,,"(CrowControllerApplier<walk_executor(coffee_table_2068)>, CrowControllerApplier<exp(cup_2063, coffee
_table_2068)>, CrowControllerApplier<walk_executor(cup_2063)>, CrowControllerApplier<obs(cup_2063, l
ook around this place)>, CrowControllerApplier<walk_executor(coffee_table_2068)>, CrowControllerAppl
ier<exp(cup_2064, coffee_table_2068)>, CrowControllerApplier<walk_executor(cup_2064)>, CrowControlle
rApplier<obs(cup_2064, look around this place)>)"
,,walk_executor(coffee_table_2068),"Robot is inside home_office_319. Robot is close coffee_table_2068. Robot is no longer inside bathroo
m_1.",,
,,"exp(cup_2063, coffee_table_2068)",Failed to find cup_2063 around coffee_table_2068. ,,
,,,,,"(CrowControllerApplier<walk_executor(kitchen_counter_230)>, CrowControllerApplier<exp(cup_2063, kitc
hen_counter_230)>, CrowControllerApplier<walk_executor(cup_2063)>, CrowControllerApplier<obs(cup_206
3, look around this place)>, CrowControllerApplier<walk_executor(kitchen_counter_230)>, CrowControll
erApplier<exp(cup_2064, kitchen_counter_230)>, CrowControllerApplier<walk_executor(cup_2064)>, CrowC
ontrollerApplier<obs(cup_2064, look around this place)>)"
,,walk_executor(kitchen_counter_230),"Find cup_2064. Find cup_2063. Find drawing_239. Find tray_296. Find cutting_board_2051. Find knife_2
050. Find pot_2069. Find napkin_2005. Find drawing_238. Find drawing_240. Find drawing_241. Find dra
wing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Rob
ot is no longer inside home_office_319.Robot is no longer close coffee_table_2068.",,
,,"exp(cup_2063, kitchen_counter_230)",Find cup_2063. ,,
,,walk_executor(cup_2063),Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close cup_2063. ,,
,,,,cup_2063,
,,"obs(cup_2063, look around this place)","Get this information: cup_2063
",,
,,walk_executor(kitchen_counter_230),"Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer close cup_20
63.",,
,,"exp(cup_2064, kitchen_counter_230)",Find cup_2064. ,,
,,walk_executor(cup_2064),Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close cup_2064. ,,
,,,,cup_2064 is inside dining_room_201,
,,"obs(cup_2064, look around this place)","Get this information: cup_2064 is inside dining_room_201
",,
,,,,"- Sub-Task Completed: Yes
- Next Steps: You successfully found a cup. You located two cups, cup_2063 and cup_2064, around the 
kitchen_counter_230 in the dining_room_201. You are ready to proceed to the next sub-task of filling
 the cup with water from the faucet in the dining room.",
"behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve close_char(char, cup)
        observe(faucet, ""Is the faucet providing water"")
        achieve is_on(faucet)
        achieve filled(cup)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        bind cup: item where:
            is_cup(cup) and close(cup, kitchen_counter_230)
        fill_cup_with_water(cup, faucet)","Error trying to process rule ""behavior_definition"":

'Function filled not found. Note that recursive function calls are not supported in the current vers
ion.'",,,,
"behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve close_char(char, cup)
        observe(faucet, ""Is the faucet providing water"")
        achieve is_on(faucet)
        achieve is_filled(cup)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        bind cup: item where:
            is_cup(cup) and close(cup, kitchen_counter_230)
        fill_cup_with_water(cup, faucet)","Error trying to process rule ""behavior_definition"":

'Function is_filled not found. Note that recursive function calls are not supported in the current v
ersion.'",,,,
"behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve close_char(char, cup)
        observe(faucet, ""Is the faucet providing water"")
        achieve is_on(faucet)
        achieve is_cup(cup)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        bind cup: item where:
            is_cup(cup) and close(cup, kitchen_counter_230)
        fill_cup_with_water(cup, faucet)","Error trying to process rule ""behavior_definition"":

Unknown variable: kitchen_counter_230; available variables: [Variable<cup: item>].",,,,
"behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        achieve close_char(char, faucet)
        achieve close_char(char, cup)
        observe(faucet, ""Is the faucet providing water"")
        achieve is_on(faucet)
        achieve is_cup(cup)

behavior __goal__():
    body:
        bind kitchen_counter_230: item where:
            is_kitchen_counter(kitchen_counter_230)
        bind faucet: item where:
            is_faucet(faucet)
        bind cup: item where:
            is_cup(cup) and close(cup, kitchen_counter_230)
        fill_cup_with_water(cup, faucet)",,,,,[]
"def is_faucet_close_to_item(faucet: item, item: item):
    # Check if a faucet is close to a given item
    symbol close_faucet = close(faucet, item)
    return close_faucet

behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        achieve_once inhand(cup) # Temporarily hold the cup to fill it with water
        if is_faucet(faucet) and is_faucet_close_to_item(faucet, cup):
            bind f: item where:
                is_faucet(f) and close(f, cup)
            achieve_once is_on(f)
            achieve inside(cup, sink)
            achieve drinkable(cup)
            achieve_once is_off(f)
        else:
            observe(faucet, ""Check if the faucet is close to the cup"")

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inside(cup, dining_room)
        # Select the cup inside the dining room
        bind faucet: item where:
            is_faucet(faucet) and inside(faucet, dining_room)
        # Select the faucet inside the dining room
        fill_cup_with_water(cup, faucet)","Error trying to process rule ""behavior_definition"":

Unknown variable: sink; available variables: [Variable<cup: item>, Variable<faucet: item>].",,,,
"def is_faucet_close_to_item(faucet: item, item: item):
    # Check if a faucet is close to a given item
    symbol close_faucet = close(faucet, item)
    return close_faucet

behavior fill_cup_with_water(cup: item, faucet: item, sink: item):
    body:
        achieve_once inhand(cup) # Temporarily hold the cup to fill it with water
        if is_faucet(faucet) and is_faucet_close_to_item(faucet, cup):
            bind f: item where:
                is_faucet(f) and close(f, cup)
            achieve_once is_on(f)
            achieve inside(cup, sink)
            achieve drinkable(cup)
            achieve_once is_off(f)
        else:
            observe(faucet, ""Check if the faucet is close to the cup"")

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inside(cup, dining_room)
        # Select the cup inside the dining room
        bind faucet: item where:
            is_faucet(faucet) and inside(faucet, dining_room)
        # Select the faucet inside the dining room
        bind sink: item where:
            is_sink(sink) and inside(sink, dining_room)
        # Select the sink inside the dining room
        fill_cup_with_water(cup, faucet, sink)","Error trying to process rule ""behavior_definition"":

Unknown variable: dining_room; available variables: [Variable<cup: item>].",,,,
"def is_faucet_close_to_item(faucet: item, item: item):
    # Check if a faucet is close to a given item
    symbol close_faucet = close(faucet, item)
    return close_faucet

behavior fill_cup_with_water(cup: item, faucet: item, sink: item):
    body:
        achieve_once inhand(cup) # Temporarily hold the cup to fill it with water
        if is_faucet(faucet) and is_faucet_close_to_item(faucet, cup):
            bind f: item where:
                is_faucet(f) and close(f, cup)
            achieve_once is_on(f)
            achieve inside(cup, sink)
            achieve drinkable(cup)
            achieve_once is_off(f)
        else:
            observe(faucet, ""Check if the faucet is close to the cup"")

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        bind cup: item where:
            is_cup(cup) and inside(cup, dining_room)
        # Select the cup inside the dining room
        bind faucet: item where:
            is_faucet(faucet) and inside(faucet, dining_room)
        # Select the faucet inside the dining room
        bind sink: item where:
            is_sink(sink) and inside(sink, dining_room)
        # Select the sink inside the dining room
        fill_cup_with_water(cup, faucet, sink)",,,,,[]
"behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve inside_char(char, dining_room_201)
        achieve_once inhand(cup)
        achieve close_char(char, faucet)
        achieve_once is_on(faucet)

        # Fill the cup with water
        effect:
            achieve filled(cup)

        achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2064
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, kitchen_counter_230)
        fill_cup_with_water(cup, faucet)","Unexpected token Token('COLON', ':') at line 5749, column 15.
Expected one of: 
	* LSHIFT
	* PLUS
	* AND
	* __ANON_0
	* CIRCUMFLEX
	* __ANON_7
	* __ANON_1
	* RSHIFT
	* __ANON_6
	* __ANON_2
	* VBAR
	* DOUBLE_EQUAL
	* COMMA
	* OR
	* __ANON_3
	* _NEWLINE
	* __ANON_5
	* NOT_EQ
	* AT
	* __ANON_8
	* IF
	* LESSTHAN
	* SEMICOLON
	* EQUAL
	* FLOORDIV
	* AMPERSAND
	* MINUS
	* __ANON_4
	* PERCENT
	* STAR
	* MORETHAN
	* SLASH
	* LESS_EQ
	* GREATER_EQ
",,,,
"behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        achieve inside_char(char, dining_room_201)
        achieve_once inhand(cup)
        achieve close_char(char, faucet)
        achieve_once is_on(faucet)

        # Fill the cup with water
        achieve filled(cup)

        achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2064
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, kitchen_counter_230)
        fill_cup_with_water(cup, faucet)","Error trying to process rule ""behavior_definition"":

Unknown variable: dining_room_201; available variables: [Variable<cup: item>, Variable<faucet: item>
].",,,,
"behavior fill_cup_with_water(cup: item, faucet: item, dining_room: item):
    body:
        achieve inside_char(char, dining_room)
        achieve_once inhand(cup)
        achieve close_char(char, faucet)
        achieve_once is_on(faucet)

        # Fill the cup with water
        achieve filled(cup)

        achieve_once is_off(faucet)

behavior __goal__():
    bind cup: item where:
        is_cup(cup) and id[cup]==2064
    bind faucet: item where:
        is_faucet(faucet) and close(faucet, kitchen_counter_230)
    bind dining_room: item where:
        is_dining_room(dining_room)
    fill_cup_with_water(cup, faucet, dining_room)","Unexpected token Token('BIND', 'bind') at line 5769, column 5.
Expected one of: 
	* PRE
	* GOAL
	* EFF
	* BODY
Previous tokens: [Token('_NEWLINE', '\n    ')]
",,,,
"
behavior fill_cup_with_water(cup: item, faucet: item, dining_room: item):
    body:
        achieve inside_char(char, dining_room)
        achieve_once inhand(cup)
        achieve close_char(char, faucet)
        achieve_once is_on(faucet)

        # Fill the cup with water
        achieve filled(cup)

        achieve_once is_off(faucet)

behavior __goal__():
    bind cup: item where:
        is_cup(cup) and id[cup]==2064
    bind faucet: item where:
        is_faucet(faucet) and close(faucet, kitchen_counter_230)
    bind dining_room: item where:
        is_dining_room(dining_room)
    fill_cup_with_water(cup, faucet, dining_room)
","Unexpected token Token('BIND', 'bind') at line 5770, column 5.
Expected one of: 
	* PRE
	* GOAL
	* EFF
	* BODY
Previous tokens: [Token('_NEWLINE', '\n    ')]
",,,,
"behavior fill_cup_with_water(cup: item, faucet: item, dining_room: item):
    body:
        achieve inside_char(char, dining_room)
        achieve_once inhand(cup)
        achieve close_char(char, faucet)
        achieve_once is_on(faucet)

        # Fill the cup with water
        achieve filled(cup)

        achieve_once is_off(faucet)

behavior __goal__():
    bind cup: item where:
        is_cup(cup) and id[cup]==2064
    bind faucet: item where:
        is_faucet(faucet) and close(faucet, kitchen_counter_230)
    bind dining_room: item where:
        is_dining_room(dining_room)
    fill_cup_with_water(cup, faucet, dining_room)
","Unexpected token Token('BIND', 'bind') at line 5769, column 5.
Expected one of: 
	* PRE
	* GOAL
	* EFF
	* BODY
Previous tokens: [Token('_NEWLINE', '\n    ')]
",,,,
"behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        achieve close_char(char, faucet)
        achieve open(cup)

behavior ensure_faucet_closed(faucet: item):
    body:
        achieve closed(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        bind faucet: item where:
            is_faucet(faucet)
        fill_cup_with_water(cup, faucet)
        ensure_faucet_closed(faucet)",,,,,[]
"def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior approach_faucet_in_dining_room():
    body:
        bind faucet: item where:
            is_faucet(faucet) and inside(faucet, dining_room)
        achieve close_char(char, faucet)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        if has_faucet(faucet):
            achieve_once inhand(cup)
            observe(faucet, ""Check if water is running"")

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inside(cup, dining_room_201)
        approach_faucet_in_dining_room()
        fill_cup_with_water(cup, faucet)","Error trying to process rule ""behavior_definition"":

Unknown variable: dining_room; available variables: [Variable<faucet: item>].",,,,
"def has_faucet(sink:item):
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior approach_faucet_in_dining_room(faucet:item):
    body:
        achieve close_char(char, faucet)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        if has_faucet(faucet):
            achieve_once inhand(cup)
            observe(faucet, ""Check if water is running"")

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inside(cup, dining_room_201)
        bind faucet: item where:
            is_faucet(faucet) and inside(faucet, dining_room_201)
        approach_faucet_in_dining_room(faucet)
        fill_cup_with_water(cup, faucet)","Error trying to process rule ""behavior_definition"":

Unknown variable: dining_room_201; available variables: [Variable<cup: item>].",,,,
"def has_faucet(sink:item):
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior approach_faucet_in_dining_room(faucet:item):
    body:
        achieve close_char(char, faucet)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        if has_faucet(faucet):
            achieve_once inhand(cup)
            observe(faucet, ""Check if water is running"")

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inside(cup, dining_room)
        bind faucet: item where:
            is_faucet(faucet) and inside(faucet, dining_room)
        approach_faucet_in_dining_room(faucet)
        fill_cup_with_water(cup, faucet)

bind dining_room: item where:
    is_dining_room(dining_room)","Unexpected token Token('BIND', 'bind') at line 5780, column 1.
Expected one of: 
	* CONTROLLER
	* _NEWLINE
	* UNDIRECTED_GENERATOR
	* GOAL
	* GENERATOR
	* IMPORT
	* INIT
	* _PRAGMA_KEYWORD
	* $END
	* FEATURE
	* DEF
	* OBJECTS
	* TYPEDEF
	* DOMAIN
	* BEHAVIOR
	* ACTION
Previous tokens: [Token('_NEWLINE', '\n\n')]
",,,,
" 
def has_faucet(sink:item):
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior approach_faucet_in_dining_room(faucet:item):
    body:
        achieve close_char(char, faucet)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        if has_faucet(faucet):
            achieve_once inhand(cup)
            observe(faucet, ""Check if water is running"")

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inside(cup, dining_room)
        bind faucet: item where:
            is_faucet(faucet) and inside(faucet, dining_room)
        approach_faucet_in_dining_room(faucet)
        fill_cup_with_water(cup, faucet)

","Error trying to process rule ""behavior_definition"":

Unknown variable: dining_room; available variables: [Variable<cup: item>].",,,,
"def has_faucet(sink:item):
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior approach_faucet_in_dining_room(faucet:item):
    body:
        achieve close_char(char, faucet)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        if has_faucet(faucet):
            achieve_once inhand(cup)
            observe(faucet, ""Check if water is running"")

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inside(cup, dining_room)
        bind faucet: item where:
            is_faucet(faucet) and inside(faucet, dining_room)
        bind dining_room: item where:
            is_dining_room(dining_room)
        approach_faucet_in_dining_room(faucet)
        fill_cup_with_water(cup, faucet)","Error trying to process rule ""behavior_definition"":

Unknown variable: dining_room; available variables: [Variable<cup: item>].",,,,
"def in_dining_room(faucet:item):
    # Determine whether the faucet is in the dining room
    symbol in_dining_room=exists room: item : is_dining_room(room) and close(faucet, room)
    return in_dining_room

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        assert is_faucet(faucet) and in_dining_room(faucet)
        assert close_char(char, cup)
        achieve inside(cup, faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and close_char(char, cup)
        bind faucet: item where:
            is_faucet(faucet)
        fill_cup_with_water(cup, faucet)",,,,,[]
,,,,"To fill the cup with water from the faucet in the dining room, first find a cup. Take the cup and pu
t it in the sink. Then, turn on the faucet that is close to the sink to let the water flow and fill 
the cup. Once the cup is filled with water, turn off the faucet. Finally, take out the cup from the 
sink.",
"behavior clean_food(food: item, sink: item):
    body:
        achieve_once inside(food, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
        wash(food)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            
behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        achieve inside(cup, sink)
        achieve_once is_on(faucet)
        observe(cup, ""check cup filled with water"")
        achieve_once is_off(faucet)
        achieve close_char(char, cup)
        
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2064
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        bind sink: item where:
            is_sink(sink) and id[sink]==230
        
        clean_food(cup, sink)
        fill_cup_with_water(cup, faucet)","Error trying to process rule ""behavior_definition"":

'Function has_faucet not found. Note that recursive function calls are not supported in the current 
version.'",,,,
"behavior clean_food(food: item, sink: item):
    body:
        achieve_once inside(food, sink)
        if is_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
        wash(food)
        if is_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            
behavior fill_cup_with_water(cup: item, faucet: item):
    body:
        achieve inside(cup, sink)
        achieve_once is_on(faucet)
        observe(cup, ""check cup filled with water"")
        achieve_once is_off(faucet)
        achieve close_char(char, cup)
        
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2064
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        bind sink: item where:
            is_sink(sink) and id[sink]==230
        
        clean_food(cup, sink)
        fill_cup_with_water(cup, faucet)","Error trying to process rule ""behavior_definition"":

Unknown variable: sink; available variables: [Variable<cup: item>, Variable<faucet: item>].",,,,
"behavior clean_food(food: item, sink: item):
    body:
        achieve_once inside(food, sink)
        if is_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
        wash(food)
        if is_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            
behavior fill_cup_with_water(cup: item, faucet: item, sink: item):
    body:
        achieve inside(cup, sink)
        achieve_once is_on(faucet)
        observe(cup, ""check cup filled with water"")
        achieve_once is_off(faucet)
        achieve close_char(char, cup)
        
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2064
        bind sink: item where:
            is_sink(sink) and id[sink]==230
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        
        clean_food(cup, sink)
        fill_cup_with_water(cup, faucet, sink)",,,,,[]
"def has_faucet(sink:item):
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior turn_on_faucet(faucet:item):
    body:
        achieve is_on(faucet)

behavior turn_off_faucet(faucet:item):
    body:
        achieve is_off(faucet)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve inside(cup, sink)

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            turn_on_faucet(faucet)
            achieve recipient(cup)
            turn_off_faucet(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        
        bind sink: item where:
            is_sink(sink) and inside(cup, sink)
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            fill_cup_with_water(cup, faucet)","Error trying to process rule ""behavior_definition"":

Unknown variable: sink; available variables: [Variable<cup: item>, Variable<faucet: item>].",,,,
"def has_faucet(sink:item):
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior turn_on_faucet(faucet:item):
    body:
        achieve is_on(faucet)

behavior turn_off_faucet(faucet:item):
    body:
        achieve is_off(faucet)

behavior fill_cup_with_water(cup:item, sink:item, faucet:item):
    body:
        achieve inside(cup, sink)

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            turn_on_faucet(faucet)
            achieve recipient(cup)
            turn_off_faucet(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        
        bind sink: item where:
            is_sink(sink) and inside(cup, sink)
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            fill_cup_with_water(cup, sink, faucet)","Error trying to process rule ""behavior_definition"":

Variable faucet already exists.",,,,
" 
def has_faucet(sink:item):
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior turn_on_faucet(faucet:item):
    body:
        achieve is_on(faucet)

behavior turn_off_faucet(faucet:item):
    body:
        achieve is_off(faucet)

behavior fill_cup_with_water(cup:item, sink:item, faucet:item):
    body:
        achieve inside(cup, sink)

        if has_faucet(sink):
            turn_on_faucet(faucet)
            achieve recipient(cup)
            turn_off_faucet(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        
        bind sink: item where:
            is_sink(sink)
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve inside(cup, sink)
            fill_cup_with_water(cup, sink, faucet)
",,,,,"['walk_executor(kitchen_counter_230); exp(cup_2063, kitchen_counter_230); walk_executor(cup_2063); g
rab_executor(cup_2063); walk_executor(sink_42); putin_executor(cup_2063, sink_42); walk_executor(fau
cet_43); switchon_executor(faucet_43); switchoff_executor(faucet_43)']"
"behavior put_cup_in_sink(cup:item, sink:item):
    body:
        achieve inside(cup, sink)

behavior turn_on_faucet(faucet:item):
    body:
        achieve is_on(faucet)

behavior turn_off_faucet(faucet:item):
    body:
        achieve is_off(faucet)

behavior fill_cup(cup:item, sink:item, faucet:item):
    body:
        put_cup_in_sink(cup, sink)
        turn_on_faucet(faucet)
        achieve filled(cup)
        turn_off_faucet(faucet)
        
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind sink: item where:
            is_sink(sink) and inside_char(char, sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        fill_cup(cup, sink, faucet)","Error trying to process rule ""behavior_definition"":

'Function filled not found. Note that recursive function calls are not supported in the current vers
ion.'",,,,
"behavior put_cup_in_sink(cup:item, sink:item):
    body:
        achieve inside(cup, sink)

behavior turn_on_faucet(faucet:item):
    body:
        achieve is_on(faucet)

behavior turn_off_faucet(faucet:item):
    body:
        achieve is_off(faucet)

behavior fill_cup(cup:item, sink:item, faucet:item):
    body:
        put_cup_in_sink(cup, sink)
        turn_on_faucet(faucet)
        achieve is_food_food(cup)
        turn_off_faucet(faucet)
        
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind sink: item where:
            is_sink(sink) and inside_char(char, sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        fill_cup(cup, sink, faucet)",,,,,[]
"def has_faucet(sink:item):
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior clean_cup_in_sink(cup:item):
    body:
        achieve inside(cup, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            wash(cup)
            achieve_once is_off(faucet)
        else:
            wash(cup)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once inhand(cup)
        achieve close_char(char, sink)
        if is_faucet(faucet):
            achieve_once is_on(faucet)
            observe(cup, ""fill with water"")
            achieve_once is_off(faucet)
            achieve inside(cup, sink)
        observe(sink, ""return"")

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        bind faucet: item where:
            is_faucet(faucet)  and close(faucet,sink)
        bind sink: item where:
            is_sink(sink)
        clean_cup_in_sink(cup)
        fill_cup_with_water(cup, faucet)
","Error trying to process rule ""behavior_definition"":

Unknown variable: sink; available variables: [Variable<cup: item>].",,,,
"def has_faucet(sink:item):
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior clean_cup_in_sink(cup:item, sink:item):
    body:
        achieve inside(cup, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            wash(cup)
            achieve_once is_off(faucet)
        else:
            wash(cup)

behavior fill_cup_with_water(cup:item, faucet:item, sink:item):
    body:
        achieve_once inhand(cup)
        achieve close_char(char, sink)
        if is_faucet(faucet):
            achieve_once is_on(faucet)
            observe(cup, ""fill with water"")
            achieve_once is_off(faucet)
            achieve inside(cup, sink)
        observe(sink, ""return"")

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet,sink)
        clean_cup_in_sink(cup, sink)
        fill_cup_with_water(cup, faucet, sink)",,,,,[]
5,walk_executor(coffee_table_2068),,,,
5,walk_executor(kitchen_counter_230),,,,
5,walk_executor(cup_2063),,,,
5,walk_executor(kitchen_counter_230),,,,
5,walk_executor(cup_2064),,,,
