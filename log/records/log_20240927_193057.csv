Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
"['1. Identify the type and location of the stubborn stains in the bathtub.', '2. Gather appropriate 
cleaning supplies for removing the identified stains.', '3. Apply the cleaning supplies and clean th
e stains from the bathtub.', '4. Rinse and wipe down the bathtub to ensure all residues are removed.
']",,,,,
"def find_stains(bathtub:item):
    # Function to find stains in the bathtub
    observe(bathtub, ""What type and where are the stains in the bathtub"")

behavior __goal__():
    body:
        bind bathtub: item where:
            is_bathtub(bathtub)
        # Select the bathtub
        find_stains(bathtub)",,,,,['']
"['1. Identify the stubborn stains in the bathtub.', '2. Gather appropriate cleaning supplies for rem
oving stubborn stains.', '3. Clean the stubborn stains from the bathtub.']",,,,,
"def identify_stains(bathtub:item):
    foreach stain: item:
        if on(stain, bathtub) and dirty(stain):
            return True
    return False

behavior __goal__():
    body:
        bind bathtub: item where:
            is_bathtub(bathtub)
        
        foreach bathtub: item:
            if not visited(bathtub):
                observe(bathtub, ""Check for stubborn stains on the bathtub"")
                if identify_stains(bathtub):
                    achieve visited(bathtub) ",,,,,[]
"['1. Identify the stubborn stains in the bathtub.', '2. Gather appropriate cleaning supplies for rem
oving stains.', '3. Apply cleaning supplies and scrub the stains.', '4. Rinse the bathtub to remove 
cleaning residues.']",,,,,
"
behavior __goal__():
    body:
        if exists bathtub: item : is_bathtub(bathtub):
            bind bathtub: item where:
                is_bathtub(bathtub)
            achieve close_char(char, bathtub)
            observe(bathtub, ""Identify the stubborn stains in the bathtub"")
        else:
            # Check all the potential bathtubs in the scene that have not been visited
            foreach bathtub: item:
                if is_bathtub(bathtub) and not visited(bathtub):
                    observe(bathtub,""Identify the stubborn stains in the bathtub"")
",,,,,"['walk_executor(bathtub_30); obs(bathtub_30, Identify the stubborn stains in the bathtub)']"
,,,,,"(CrowControllerApplier<walk_executor(bathtub_30)>, CrowControllerApplier<obs(bathtub_30, Identify th
e stubborn stains in the bathtub)>)"
,,walk_executor(bathtub_30),"Find basket_for_clothes_2006. Find towel_rack_33. Robot is inside bathroom_1. Robot is close floor_5
. Robot is close bathtub_30. ",,
