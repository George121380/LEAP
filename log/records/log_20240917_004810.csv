Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
Put vegetables in a pot and boil them on the stove.,,,,,
"['1. Gather the vegetables and a suitable pot.', '2. Fill the pot with water and place the vegetable
s inside.', '3. Boil the pot on the stove.']",,,,,
"def find_vegetable_and_pot():
    # This function checks if there are vegetables or pots
    symbol has_veggie = exists v: item : is_food_vegetable(v)
    symbol has_pot = exists p: item : is_pot(p)
    return has_veggie and has_pot

behavior gather_items(veggie:item, pot:item):
    body:
        achieve_once inhand(veggie)
        achieve_once inhand(pot)

behavior __goal__():
    body:
        if find_vegetable_and_pot():
            bind veggie: item where:
                is_food_vegetable(veggie)
            bind pot: item where:
                is_pot(pot)
            gather_items(veggie, pot)
        else:
            # If no vegetables or pot are found, initiate exploration to locate them
            foreach item: item:
                if (is_food_vegetable(item) or is_pot(item)) and not visited(item):
                    if is_food_vegetable(item):
                        observe(item, ""Check if its a vegetable suitable for cooking"")
                    else:
                        observe(item, ""Check if its a suitable pot to use"")",,,,,"['walk_executor(fridge_289); exp(food_vegetable_2041, fridge_289); walk_executor(food_vegetable_2041
); grab_executor(food_vegetable_2041); walk_executor(stove_2065); exp(pot_2069, stove_2065); walk_ex
ecutor(pot_2069); grab_executor(pot_2069)']"
,,,,,"(CrowControllerApplier<walk_executor(fridge_289)>, CrowControllerApplier<exp(food_vegetable_2041, fr
idge_289)>, CrowControllerApplier<walk_executor(food_vegetable_2041)>, CrowControllerApplier<grab_ex
ecutor(food_vegetable_2041)>, CrowControllerApplier<walk_executor(stove_2065)>, CrowControllerApplie
r<exp(pot_2069, stove_2065)>, CrowControllerApplier<walk_executor(pot_2069)>, CrowControllerApplier<
grab_executor(pot_2069)>)"
,,walk_executor(fridge_289),"Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_b
read_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016.
 Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food
_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream
_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find f
ood_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find fo
od_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038
. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find m
ilk_2043. Find drawing_239. Find drawing_240. Robot is inside dining_room_201. Robot is close fridge
_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is c
lose food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is clos
e food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close fo
od_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close fo
od_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_f
ish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburg
er_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_
2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_
2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_bu
tter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice
_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039
. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042
. Robot is close milk_2043. Robot is no longer inside bathroom_1.",,
,,"exp(food_vegetable_2041, fridge_289)",Find food_vegetable_2041. ,,
,,walk_executor(food_vegetable_2041),"Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_vegetable_2041. Robo
t is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_stea
k_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no
 longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close foo
d_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robo
t is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer 
close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2
020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no long
er close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_
ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot 
is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer clo
se food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2
032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot 
is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close
 food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Ro
bot is no longer close food_turkey_2040.Robot is no longer close dry_pasta_2042.Robot is no longer c
lose milk_2043.",,
,,grab_executor(food_vegetable_2041),"Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_vegetable_2041. Grab
bing food_vegetable_2041 by right hand. ",,
,,walk_executor(stove_2065),"Find cup_2064. Find cup_2063. Find tray_296. Find cutting_board_2051. Find knife_2050. Find pot_2069
. Find napkin_2005. Find drawing_238. Find drawing_241. Find drawing_242. Find drawing_243. Robot is
 inside dining_room_201. Robot is close food_vegetable_2041. Robot is close stove_2065. Robot is clo
se kitchen_counter_230. Robot is no longer close fridge_289.",,
,,"exp(pot_2069, stove_2065)",Find pot_2069. ,,
,,walk_executor(pot_2069),"Robot is inside dining_room_201. Robot is close food_vegetable_2041. Robot is close kitchen_counter_
230. Robot is close pot_2069. Robot is no longer close stove_2065.",,
,,grab_executor(pot_2069),"Robot is inside dining_room_201. Robot is close food_vegetable_2041. Robot is close kitchen_counter_
230. Robot is close pot_2069. Grabbing pot_2069 by left hand. ",,
,,,,"- Sub-Task Completed: Yes
- Next Steps: You gathered the vegetables and a suitable pot. You started by locating the vegetables
 in the fridge, grabbing them, and then proceeded to find and grab a pot around the stove area. You 
are now ready to fill the pot with water and place the vegetables inside.",
"behavior fill_pot_with_water_and_veg(pot:item, vegetables:item, faucet:item):
    body:
        achieve_once inhand(pot)
        achieve close_char(char, faucet)
        achieve is_on(faucet)
        observe(pot, ""Check if pot has water"")
        achieve is_off(faucet)
        achieve_once inhand(vegetables)
        achieve inside(vegetables, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inhand(pot)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and inhand(vegetables)

        bind faucet: item where:
            is_faucet(faucet)
        
        fill_pot_with_water_and_veg(pot, vegetables, faucet)",,,,,[]
"
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve_once is_on(faucet)
        achieve close(pot, faucet)
        achieve clean(pot)
        achieve is_off(faucet)
        achieve inside(food_vegetable_2041, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        bind faucet: item where:
            is_faucet(faucet)
        fill_pot_with_water(pot, faucet)
","Error trying to process rule ""behavior_definition"":

Unknown variable: food_vegetable_2041; available variables: [Variable<pot: item>, Variable<faucet: i
tem>].",,,,
"behavior fill_pot_with_water(pot:item, faucet:item, food_vegetable:item):
    body:
        achieve_once close_char(char, faucet)
        achieve_once is_on(faucet)
        achieve close(pot, faucet)
        achieve clean(pot)
        achieve is_off(faucet)
        achieve inside(food_vegetable, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        bind faucet: item where:
            is_faucet(faucet)
        bind food_vegetable: item where:
            id[food_vegetable]==2041
        fill_pot_with_water(pot, faucet, food_vegetable)",,,,,[]
"
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve inside(pot, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            observe(pot, ""fill with water"")
            achieve_once is_off(faucet)

behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inhand(pot)
        bind sink: item where:
            is_sink(sink)
        bind vegetable: item where:
            is_food_vegetable(vegetable) and inhand(vegetable)
        
        fill_pot_with_water(pot, sink)
        put_vegetables_in_pot(vegetable, pot)
","Error trying to process rule ""behavior_definition"":

'Function has_faucet not found. Note that recursive function calls are not supported in the current 
version.'",,,,
"behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve inside(pot, sink)
        if is_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            observe(pot, ""fill with water"")
            achieve_once is_off(faucet)

behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inhand(pot)
        bind sink: item where:
            is_sink(sink)
        bind vegetable: item where:
            is_food_vegetable(vegetable) and inhand(vegetable)
        
        fill_pot_with_water(pot, sink)
        put_vegetables_in_pot(vegetable, pot)",,,,,[]
" 
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once inside(pot, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
        achieve inside(pot, water)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)

behavior place_vegetables_in_pot(food_vegetable:item, pot:item):
    body:
        achieve inside(food_vegetable, pot)

def has_faucet(sink:item):
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        bind pot: item where:
            is_pot(pot)
        fill_pot_with_water(pot, sink)
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)
        place_vegetables_in_pot(food_vegetable, pot)
","Error trying to process rule ""behavior_definition"":

'Function has_faucet not found. Note that recursive function calls are not supported in the current 
version.'",,,,
"
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once inside(pot, sink)
        if is_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
        achieve inside(pot, water)
        if is_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)

behavior place_vegetables_in_pot(food_vegetable:item, pot:item):
    body:
        achieve inside(food_vegetable, pot)

def is_faucet(sink:item):
    symbol is_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return is_faucet

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        bind pot: item where:
            is_pot(pot)
        fill_pot_with_water(pot, sink)
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)
        place_vegetables_in_pot(food_vegetable, pot)
","Error trying to process rule ""behavior_definition"":

Unknown variable: water; available variables: [Variable<pot: item>, Variable<sink: item>].",,,,
"behavior fill_pot_with_water(pot:item, sink:item, water:item):
    body:
        achieve_once inside(pot, sink)
        if is_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
        achieve inside(pot, water)
        if is_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)

behavior place_vegetables_in_pot(food_vegetable:item, pot:item):
    body:
        achieve inside(food_vegetable, pot)

def is_faucet(sink:item):
    symbol is_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return is_faucet

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        bind pot: item where:
            is_pot(pot)
        bind water: item where:
            is_water(water)
        fill_pot_with_water(pot, sink, water)
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)
        place_vegetables_in_pot(food_vegetable, pot)",,,,,[]
,,,,"To fill the pot with water and place the vegetables inside, start by finding a pot and putting it in
 the sink. Turn on the faucet close to the sink to fill the pot with water, and once the pot is fill
ed, turn off the faucet. Then, take the vegetables and place them inside the pot of water.",
"behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve close_char(char, sink)
        achieve close(pot, sink)
        if exists faucet:item: is_faucet(faucet) and close(faucet,sink):
            achieve_once is_on(faucet)
            # Fill the pot with water using the faucet
            achieve inside(pot, sink)
            achieve_once is_off(faucet)
        
behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot filled with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind sink: item where:
            is_sink(sink)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        
        fill_pot_with_water(pot, sink)
        place_vegetables_in_pot(vegetables, pot)","Error trying to process rule ""behavior_definition"":

Unknown variable: faucet; available variables: [Variable<pot: item>, Variable<sink: item>].",,,,
"behavior fill_pot_with_water(pot:item, sink:item, faucet:item):
    body:
        achieve close_char(char, sink)
        achieve close(pot, sink)
        if exists faucet:item: is_faucet(faucet) and close(faucet,sink):
            achieve_once is_on(faucet)
            # Fill the pot with water using the faucet
            achieve inside(pot, sink)
            achieve_once is_off(faucet)
        
behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot filled with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind sink: item where:
            is_sink(sink)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind faucet: item where:
            is_faucet(faucet)
        
        fill_pot_with_water(pot, sink, faucet)
        place_vegetables_in_pot(vegetables, pot)","Error trying to process rule ""behavior_definition"":

Variable faucet already exists.",,,,
"behavior
fill_pot_with_water(pot:item, sink:item, faucet:item):
    body:
        achieve close_char(char, sink)
        achieve close(pot, sink)
        if exists faucet:item: is_faucet(faucet) and close(faucet,sink):
            achieve_once is_on(faucet)
            achieve inside(pot, sink)
            achieve_once is_off(faucet)

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve inside(vegetables, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind sink: item where:
            is_sink(sink)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind faucet: item where:
            is_faucet(faucet)
        
        fill_pot_with_water(pot, sink, faucet)
        place_vegetables_in_pot(vegetables, pot)
","Unexpected token Token('_NEWLINE', '\n') at line 5756, column 9.
Expected one of: 
	* VARNAME
	* _LLSQB
",,,,
" 
behavior fill_pot_with_water(pot:item, sink:item, faucet:item):
    body:
        achieve close_char(char, sink)
        achieve close(pot, sink)
        if exists faucet: item: is_faucet(faucet) and close(faucet, sink):
            achieve_once is_on(faucet)
            achieve inside(pot, sink)
            achieve_once is_off(faucet)

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve inside(vegetables, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind sink: item where:
            is_sink(sink)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        bind faucet: item where:
            is_faucet(faucet)
        
        fill_pot_with_water(pot, sink, faucet)
        place_vegetables_in_pot(vegetables, pot)
","Error trying to process rule ""behavior_definition"":

Variable faucet already exists.",,,,
"def has_faucet_near_sink(sink:item):
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, sink)
    return has_faucet
 
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve close(pot, sink)
        if has_faucet_near_sink(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            achieve inside(pot, sink)
            achieve_once is_off(faucet)

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve inside(vegetables, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind sink: item where:
            is_sink(sink)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        fill_pot_with_water(pot, sink)
        place_vegetables_in_pot(vegetables, pot)
",,,,,[]
"behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve close_char(char, sink)
        achieve_once inside(pot, sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        achieve_once is_on(faucet)
        observe(pot, ""check if pot is filled with water"")
        achieve_once is_off(faucet)

behavior place_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inhand(pot)
        bind sink: item where:
            is_sink(sink)
        bind vegetable: item where:
            is_food_vegetable(vegetable) and inhand(vegetable)

        fill_pot_with_water(pot, sink)
        place_vegetables_in_pot(vegetable, pot)",,,,,[]
"behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve once close(pot, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            achieve inside(pot, water)
            achieve_once is_off(faucet)

behavior place_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inhand(pot)
        bind sink: item where:
            is_sink(sink)
        bind vegetable: item where:
            is_food_vegetable(vegetable) and inhand(vegetable)
        fill_pot_with_water(pot, sink)
        place_vegetables_in_pot(vegetable, pot)","Unexpected token Token('VARNAME', 'close') at line 5758, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
",,,,
" 
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once close(pot, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            achieve inside(pot, water)
            achieve_once is_off(faucet)

behavior place_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inhand(pot)
        bind sink: item where:
            is_sink(sink)
        bind vegetable: item where:
            is_food_vegetable(vegetable) and inhand(vegetable)
        fill_pot_with_water(pot, sink)
        place_vegetables_in_pot(vegetable, pot)
","Error trying to process rule ""behavior_definition"":

'Function has_faucet not found. Note that recursive function calls are not supported in the current 
version.'",,,,
"behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once close(pot, sink)
        if is_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            achieve inside(pot, water)
            achieve_once is_off(faucet)

behavior place_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inhand(pot)
        bind sink: item where:
            is_sink(sink)
        bind vegetable: item where:
            is_food_vegetable(vegetable) and inhand(vegetable)
        fill_pot_with_water(pot, sink)
        place_vegetables_in_pot(vegetable, pot)","Error trying to process rule ""behavior_definition"":

Unknown variable: water; available variables: [Variable<pot: item>, Variable<sink: item>].",,,,
"behavior fill_pot_with_water(pot:item, sink:item, water:item):
    body:
        achieve_once close(pot, sink)
        if is_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            achieve inside(pot, water)
            achieve_once is_off(faucet)

behavior place_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inhand(pot)
        bind sink: item where:
            is_sink(sink)
        bind vegetable: item where:
            is_food_vegetable(vegetable) and inhand(vegetable)
        bind water: item where:
            is_water(water)
        fill_pot_with_water(pot, sink, water)
        place_vegetables_in_pot(vegetable, pot)",,,,,[]
"behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve close_char(char, faucet)
        achieve_once is_on(faucet)
        achieve_once inside(pot, sink)
        achieve is_off(faucet)

behavior place_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        fill_pot_with_water(pot, faucet)
        place_vegetables_in_pot(vegetables, pot)","Error trying to process rule ""behavior_definition"":

Unknown variable: sink; available variables: [Variable<pot: item>, Variable<faucet: item>].",,,,
"behavior fill_pot_with_water(pot: item, faucet: item, sink: item):
    body:
        achieve close_char(char, faucet)
        achieve_once is_on(faucet)
        achieve_once inside(pot, sink)
        achieve is_off(faucet)

behavior place_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind sink: item where:
            is_sink(sink)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        fill_pot_with_water(pot, faucet, sink)
        place_vegetables_in_pot(vegetables, pot)",,,,,[]
6,walk_executor(fridge_289),,,,
6,walk_executor(food_vegetable_2041),,,,
6,grab_executor(food_vegetable_2041),,,,
6,walk_executor(stove_2065),,,,
6,walk_executor(pot_2069),,,,
6,grab_executor(pot_2069),,,,
