Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
Turn on the lights in the bathroom.,,,,,
"['1. Find the bathroom.', '2. Locate the light switch in the bathroom.', '3. Turn on the light switc
h.']",,,,,
"def is_bathroom_found(bathroom: item):
    # Function to check if a room is the bathroom and has been visited
    symbol is_found = exists room: item : is_bathroom(room) and visited(room)
    return is_found

behavior __goal__():
    body:
        if exists room: item : is_bathroom(room) and visited(room):
            # If the bathroom has already been located, move towards it
            bind bathroom: item where:
                is_bathroom(bathroom) and visited(bathroom)
            achieve close_char(char, bathroom)
        else:
            # Check all unvisited rooms to find the bathroom
            foreach room: item:
                if is_bathroom(room) and not visited(room):
                    observe(room,""Check if this is the bathroom"")",,,,,"['walk_executor(bathroom_1); obs(bathroom_1, Check if this is the bathroom)']"
,,,,,"(CrowControllerApplier<walk_executor(bathroom_1)>, CrowControllerApplier<obs(bathroom_1, Check if th
is is the bathroom)>)"
,,walk_executor(bathroom_1),Robot is inside bathroom_1. ,,
,,,,"Yes, the target item is the bathroom.",
,,"obs(bathroom_1, Check if this is the bathroom)","Get this information: Yes, the target item is the bathroom.
",,
,,,,"- Sub-Task Completed: Yes
- Next Steps: You walked to bathroom_1 and confirmed that it is indeed the bathroom. Proceed to the 
next sub-task to locate the light switch in the bathroom.",
"def has_switch(bathroom:item):
    # Function to check if a bathroom has a light switch
    symbol has_switch=exists switch: item : has_switch(switch) and close_char(char, switch) and insi
de(switch, bathroom)
    return has_switch

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom) and visited(bathroom)
        # Select bathroom that has been visited
        
        if has_switch(bathroom):
            bind switch: item where:
                has_switch(switch) and close_char(char, switch) and inside(switch, bathroom)
            achieve close_char(char, switch) # Move towards the light switch
            
        else:
            foreach item: item:
                if has_switch(item) and not visited(item):
                    observe(item, ""Locate the light switch in the bathroom"")
                    # Observe to check for a light switch in the bathroom",,,,,[]
"behavior locate_light_switch(bathroom: item):
    body:
        foreach switch: item:
            if has_switch(switch) and inside(switch, bathroom) and not visited(switch):
                observe(switch, ""Check if this is the light switch in the bathroom"")
          
behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom) and inside_char(char, bathroom)
        locate_light_switch(bathroom)",,,,,"['walk_executor(washing_machine_2007); obs(washing_machine_2007, Check if this is the light switch i
n the bathroom); walk_executor(faucet_43); obs(faucet_43, Check if this is the light switch in the b
athroom); walk_executor(light_64); obs(light_64, Check if this is the light switch in the bathroom)'
]"
"behavior locate_light_switch_in_bathroom(bathroom:item):
    body:
        foreach switch: item:
            if has_switch(switch) and close(switch, bathroom):
                achieve visited(switch)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom) and inside_char(char, bathroom)
        locate_light_switch_in_bathroom(bathroom)",,,,,['']
"behavior locate_light_switch(bathroom:item):
    body:
        foreach obj: item:
            if is_light(obj) and inside(obj, bathroom):
                achieve visited(obj)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom) and id[bathroom]==1
        locate_light_switch(bathroom)",,,,,"['walk_executor(light_64); obs(light_64, look around this place)']"
,,,,"To locate the light switch in the bathroom, you should search for the control that operates one of t
he bathroom lights. Look specifically for the switches that control ceilinglamp_26 or walllamps numb
ered 27 through 29, as these are the lights installed in our bathroom. The light switch is usually n
ear the entrance or by the door frame, around the waist or shoulder height. Check along the walls ne
ar these areas until you find the switches that correspond to these lights.",
"behavior locate_light_switch(light_switch: item):
    body:
        observe(light_switch, ""Check if this is the light switch for ceilinglamp_26 or walllamps 27 
through 29"")

def is_bathroom_light_switch(light_switch: item):
    symbol is_bathroom_light = exists light: item : (is_ceilinglamp(light) and id[light]==26) or (is
_walllamp(light) and (id[light] == 27 or id[light] == 28 or id[light] == 29)) and close(light_switch
, light)
    return is_bathroom_light

behavior __goal__():
    body:
        foreach light_switch: item:
            if has_switch(light_switch) and not visited(light_switch):
                locate_light_switch(light_switch)
        
        assert exists light_switch: item: has_switch(light_switch) and is_bathroom_light_switch(ligh
t_switch) and visited(light_switch)",,,,,[]
" 
def locate_light_switch(bathroom: item):
    # Function to check if there is a light switch that controls the ceilinglamp_26 or walllamps 272
9 in the bathroom
    symbol has_light_switch=exists s: item : has_switch(s) and close_char(char, s)
    return has_light_switch

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom) and id[bathroom] == 1
        if exists s: item : has_switch(s) and close_char(char, s) and (is_ceilinglamp(lamp) and id[l
amp]==26) or (is_walllamp(lamp) and id[lamp] in [27, 28, 29]):
            bind switch: item where:
                has_switch(switch) and close_char(char, switch) and ((is_ceilinglamp(lamp) and id[la
mp]==26) or (is_walllamp(lamp) and id[lamp] in [27, 28, 29]))    
            achieve close_char(char, switch)
        else:
            foreach s: item:
                if has_switch(s) and not visited(s):
                    observe(s, ""Check if this switch controls ceilinglamp_26 or walllamps numbered 2
7 through 29"")
","Unexpected token Token('VARNAME', 'in') at line 5796, column 146.
Expected one of: 
	* COMMA
	* RPAR
",,,,
" 
def locate_light_switch(bathroom: item):
    # Function to check if there is a light switch that controls the ceilinglamp_26 or walllamps 27 
through 29 in the bathroom
    symbol has_light_switch=exists s: item : has_switch(s) and close_char(char, s) and ((is_ceilingl
amp(l) and id[l]==26) or (is_walllamp(l) and id[l] in [27, 28, 29]))
    return has_light_switch

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom) and id[bathroom] == 1
        if exists s: item : has_switch(s) and close_char(char, s) and ((is_ceilinglamp(l) and id[l]=
=26) or (is_walllamp(l) and id[l] in [27, 28, 29])):
            bind switch: item where:
                has_switch(switch) and close_char(char, switch) and ((is_ceilinglamp(l) and id[l]==2
6) or (is_walllamp(l) and id[l] in [27, 28, 29]))    
            achieve close_char(char, switch)
        else:
            foreach s: item:
                if has_switch(s) and not visited(s):
                    observe(s, ""Check if this switch controls ceilinglamp_26 or walllamps numbered 2
7 through 29"")
","Unexpected token Token('VARNAME', 'in') at line 5759, column 152.
Expected one of: 
	* COMMA
	* RPAR
",,,,
"Output:

def locate_light_switch(bathroom: item):
    symbol has_light_switch = exists s: item : has_switch(s) and close_char(char, s) and ((is_ceilin
glamp(l) and id[l] == 26) or (is_walllamp(l) and id[l] in [27, 28, 29]))
    return has_light_switch

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom) and id[bathroom] == 1
        if locate_light_switch(bathroom):
            bind switch: item where:
                has_switch(switch) and close_char(char, switch) and ((is_ceilinglamp(l) and id[l] ==
 26) or (is_walllamp(l) and id[l] in [27, 28, 29]))
            achieve close_char(char, switch)
        else:
            foreach s: item:
                if has_switch(s) and not visited(s):
                    observe(s, ""Check if this switch controls ceilinglamp_26 or walllamps numbered 2
7 through 29"")","Unexpected token Token('BASIC_TYPENAME', 'Output') at line 5786, column 1.
Expected one of: 
	* DEF
	* INIT
	* IMPORT
	* TYPEDEF
	* GENERATOR
	* FEATURE
	* ACTION
	* UNDIRECTED_GENERATOR
	* GOAL
	* CONTROLLER
	* BEHAVIOR
	* _PRAGMA_KEYWORD
	* DOMAIN
	* OBJECTS
	* $END
	* _NEWLINE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]
",,,,
" 
def has_light_switch_near(bathroom: item):
    symbol has_light_switch = exists s: item : has_switch(s) and close_char(char, s) and ((is_ceilin
glamp(l) and id[l] == 26) or (is_walllamp(l) and id[l] in [27, 28, 29]))
    return has_light_switch

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom) and id[bathroom] == 1
        if has_light_switch_near(bathroom):
            bind switch: item where:
                has_switch(switch) and close_char(char, switch) and ((is_ceilinglamp(l) and id[l] ==
 26) or (is_walllamp(l) and id[l] in [27, 28, 29]))
            achieve close_char(char, switch)
        else:
            foreach s: item:
                if has_switch(s) and not visited(s):
                    observe(s, ""Check if this switch controls ceilinglamp_26 or walllamps numbered 2
7 through 29"")
","Unexpected token Token('VARNAME', 'in') at line 5728, column 156.
Expected one of: 
	* COMMA
	* RPAR
",,,,
" 
def has_light_switch_near(bathroom: item):
    symbol has_light_switch = exists s: item : has_switch(s) and close_char(char, s) and ((is_ceilin
glamp(l) and id[l] == 26) or (is_walllamp(l) and id[l] in [27, 28, 29]))
    return has_light_switch

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom) and id[bathroom] == 1
        if has_light_switch_near(bathroom):
            bind switch: item where:
                has_switch(switch) and close_char(char, switch) and ((is_ceilinglamp(l) and id[l] ==
 26) or (is_walllamp(l) and id[l] in [27, 28, 29]))
            achieve close_char(char, switch)
        else:
            foreach s: item:
                if has_switch(s) and not visited(s):
                    observe(s, ""Check if this switch controls ceilinglamp_26 or walllamps numbered 2
7 through 29"")
","Unexpected token Token('VARNAME', 'in') at line 5728, column 156.
Expected one of: 
	* COMMA
	* RPAR
",,,,
"def has_switch(obj:item):
    # Determines if the object is a light switch by checking if it can control any relevant lights (
ceilinglamp_26 or walllamps 2729)
    symbol controls_light=exists light: item : (id[light]==26 or id[light]==27 or id[light]==28 or i
d[light]==29) and has_switch(obj)
    return controls_light

behavior __goal__():
    body:
        # Locate the light switch in the bathroom based on available indicators (control of specific
 lights and typical switch locations)
        if exists switch: item : has_switch(switch) and (close(switch, doorjamb) or close(switch, en
trance)):
            bind switch: item where:
                has_switch(switch) and (close(switch, doorjamb) or close(switch, entrance))
            achieve close_char(char, switch)
        else:
            # If no such switches found, observe the bathroom to locate them
            foreach switch: item:
                if has_switch(switch) and not visited(switch):
                    observe(switch, ""Locate the light switch controlling ceilinglamp_26 or walllamps
 27 through 29"")
","Error trying to process rule ""behavior_definition"":

Unknown variable: doorjamb; available variables: [Variable<switch: item>].",,,,
"def has_switch(obj:item):
    # Determines if the object is a light switch by checking if it can control any relevant lights (
ceilinglamp_26 or walllamps 2729)
    symbol controls_light=exists light: item : (id[light]==26 or id[light]==27 or id[light]==28 or i
d[light]==29) and has_switch(obj)
    return controls_light

behavior __goal__():
    body:
        # Locate the light switch in the bathroom based on available indicators (control of specific
 lights and typical switch locations)
        if exists switch: item : has_switch(switch) and (close(switch, doorjamb) or close(switch, en
trance)):
            bind switch: item where:
                has_switch(switch) and (close(switch, doorjamb) or close(switch, entrance))
            achieve close_char(char, switch)
        else:
            # If no such switches found, observe the bathroom to locate them
            foreach switch: item:
                if has_switch(switch) and not visited(switch):
                    observe(switch, ""Locate the light switch controlling ceilinglamp_26 or walllamps
 27 through 29"")

behavior locate_doorjamb():
    body:
        bind doorjamb: item where:
            is_doorjamb(doorjamb)
        achieve close_char(char, doorjamb)","Error trying to process rule ""behavior_definition"":

Unknown variable: doorjamb; available variables: [Variable<switch: item>].",,,,
"def has_switch(obj: item):
    # Determines if the object is a light switch by checking if it can control any relevant lights (
ceilinglamp_26 or walllamps 2729)
    symbol controls_light = exists light: item : (id[light] == 26 or id[light] == 27 or id[light] ==
 28 or id[light] == 29) and has_switch(obj)
    return controls_light

behavior __goal__():
    body:
        # Locate the light switch in the bathroom based on available indicators (control of specific
 lights and typical switch locations)
        if exists switch: item : has_switch(switch) and (close(switch, doorjamb) or close(switch, en
trance)):
            bind switch: item where:
                has_switch(switch) and (close(switch, doorjamb) or close(switch, entrance))
            achieve close_char(char, switch)
        else:
            # If no such switches found, observe the bathroom to locate them
            foreach switch: item:
                if has_switch(switch) and not visited(switch):
                    observe(switch, ""Locate the light switch controlling ceilinglamp_26 or walllamps
 27 through 29"")

behavior locate_doorjamb():
    body:
        bind doorjamb: item where:
            is_doorjamb(doorjamb)
        achieve close_char(char, doorjamb)","Error trying to process rule ""behavior_definition"":

Unknown variable: doorjamb; available variables: [Variable<switch: item>].",,,,
"def has_switch(obj: item):
    # Determines if the object is a light switch by checking if it can control any relevant lights (
ceilinglamp_26 or walllamps 2729)
    symbol controls_light = exists light: item : (id[light] == 26 or id[light] == 27 or id[light] ==
 28 or id[light] == 29) and has_switch(obj)
    return controls_light

behavior __goal__():
    body:
        # Locate the light switch in the bathroom based on available indicators (control of specific
 lights and typical switch locations)
        if exists switch: item : has_switch(switch) and (close(switch, doorjamb) or close(switch, en
trance)):
            bind switch: item where:
                has_switch(switch) and (close(switch, doorjamb) or close(switch, entrance))
            achieve close_char(char, switch)
        else:
            # If no such switches found, observe the bathroom to locate them
            foreach switch: item:
                if has_switch(switch) and not visited(switch):
                    observe(switch, ""Locate the light switch controlling ceilinglamp_26 or walllamps
 27 through 29"")

behavior locate_doorjamb():
    body:
        bind doorjamb: item where:
            is_doorjamb(doorjamb)
        achieve close_char(char, doorjamb)","Error trying to process rule ""behavior_definition"":

Unknown variable: doorjamb; available variables: [Variable<switch: item>].",,,,
"def has_switch(obj: item):
    # Determines if the object is a light switch by checking if it can control any relevant lights (
ceilinglamp_26 or walllamps 2729)
    symbol controls_light = exists light: item : (id[light] == 26 or id[light] == 27 or id[light] ==
 28 or id[light] == 29) and has_switch(obj)
    return controls_light

behavior __goal__():
    body:
        # Locate the light switch in the bathroom based on available indicators (control of specific
 lights and typical switch locations)
        bind doorjamb: item where:
            is_doorjamb(doorjamb)
        if exists switch: item : has_switch(switch) and (close(switch, doorjamb) or close(switch, en
trance)):
            bind switch: item where:
                has_switch(switch) and (close(switch, doorjamb) or close(switch, entrance))
            achieve close_char(char, switch)
        else:
            # If no such switches found, observe the bathroom to locate them
            foreach switch: item:
                if has_switch(switch) and not visited(switch):
                    observe(switch, ""Locate the light switch controlling ceilinglamp_26 or walllamps
 27 through 29"")

behavior locate_doorjamb():
    body:
        bind doorjamb: item where:
            is_doorjamb(doorjamb)
        achieve close_char(char, doorjamb)","Error trying to process rule ""behavior_definition"":

Unknown variable: entrance; available variables: [Variable<switch: item>].",,,,
"def find_light_switch(switch:item):
    # Determines if the switch controls the lights specified
    symbol controls_known_lights=exists l: item : (is_ceilinglamp(l) and id[l]==26 or is_walllamp(l)
 and (id[l]==27 or id[l]==28 or id[l]==29)) and has_switch(switch)
    return controls_known_lights

def near_entrance_or_doorframe(switch:item):
    # Checks if the switch is near the entrance or doorframe at waist or shoulder height
    symbol near_entrance=exists door: item : is_door(door) and close(switch, door)
    return near_entrance

behavior __goal__():
    body:
        if exists switch: item : has_switch(switch) and near_entrance_or_doorframe(switch) and find_
light_switch(switch):
            # If the light switch is found based on known conditions, approach it
            bind switch: item where:
                has_switch(switch) and near_entrance_or_doorframe(switch) and find_light_switch(swit
ch)
            achieve close_char(char, switch)

        else:
            # Check all unvisited switches in the bathroom
            foreach switch: item:
                if has_switch(switch) and not visited(switch):
                    observe(switch,""Check if this is the light switch in the bathroom"")",,,,,['walk_executor(light_64)']
"def is_bathroom_switch(switch:item):
    return is_light(switch) and (id[switch] == 26 or id[switch] == 27 or id[switch] == 28 or id[swit
ch] == 29)

behavior __goal__():
    body:
        foreach switch: item:
            if is_light(switch) and not visited(switch):
                observe(switch, ""Check if this switch controls a bathroom light"")",,,,,"['walk_executor(light_64); obs(light_64, Check if this switch controls a bathroom light); walk_execu
tor(light_169); obs(light_169, Check if this switch controls a bathroom light); walk_executor(light_
245); obs(light_245, Check if this switch controls a bathroom light); walk_executor(light_411); obs(
light_411, Check if this switch controls a bathroom light)']"
,,,,,"(CrowControllerApplier<walk_executor(light_64)>, CrowControllerApplier<obs(light_64, Check if this s
witch controls a bathroom light)>, CrowControllerApplier<walk_executor(light_169)>, CrowControllerAp
plier<obs(light_169, Check if this switch controls a bathroom light)>, CrowControllerApplier<walk_ex
ecutor(light_245)>, CrowControllerApplier<obs(light_245, Check if this switch controls a bathroom li
ght)>, CrowControllerApplier<walk_executor(light_411)>, CrowControllerApplier<obs(light_411, Check i
f this switch controls a bathroom light)>)"
,,walk_executor(light_64),Find towel_rack_32. Find mat_22. Robot is inside bathroom_1. Robot is close light_64. ,,
,,,,"The switch controls a bathroom light as the target item, light_64, is inside bathroom_1.",
,,"obs(light_64, Check if this switch controls a bathroom light)","Get this information: The switch controls a bathroom light as the target item, light_64, is inside b
athroom_1.
",,
,,walk_executor(light_169),"Find drawing_175. Find keyboard_168. Find chair_103. Find drawing_174. Robot is inside bedroom_67. R
obot is close light_169. Robot is no longer inside bathroom_1.Robot is no longer close light_64.",,
,,,,The switch does not control a bathroom light.,
,,"obs(light_169, Check if this switch controls a bathroom light)","Get this information: The switch does not control a bathroom light.
",,
,,walk_executor(light_245),"Find drawing_239. Find phone_247. Find drawing_238. Find drawing_240. Find wall_clock_249. Find draw
ing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close light_2
45. Robot is no longer inside bedroom_67.Robot is no longer close light_169.",,
,,,,The switch does not control a bathroom light since light_245 is inside dining_room_201.,
,,"obs(light_245, Check if this switch controls a bathroom light)","Get this information: The switch does not control a bathroom light since light_245 is inside dining_
room_201.
",,
,,walk_executor(light_411),"Find drawing_402. Find drawing_404. Robot is inside home_office_319. Robot is close light_411. Robot
 is no longer inside dining_room_201.Robot is no longer close light_245.",,
,,,,The switch does not control a bathroom light.,
,,"obs(light_411, Check if this switch controls a bathroom light)","Get this information: The switch does not control a bathroom light.
",,
,,,,"- Sub-Task Completed: Yes
- Next Steps: You searched for and located the light switch in the bathroom, specifically identifyin
g that light_64 is inside bathroom_1 and controls a bathroom light. Proceed to turning on the identi
fied bathroom light switch.",
"behavior turn_on_light_switch(light_switch:item):
    body:
        achieve is_on(light_switch)
        # Ensure the light switch is turned on

behavior __goal__():
    body:
        # Find a light switch inside bathroom_1
        foreach switch: item:
            if has_switch(switch) and inside(switch, bathroom_1):
                observe(switch, ""Check if this switch controls the bathroom light"")
                if visited(switch):
                    bind light_switch: item where:
                        close_char(char, switch)
                    turn_on_light_switch(light_switch)","Error trying to process rule ""behavior_definition"":

Unknown variable: bathroom_1; available variables: [Variable<switch: item>].",,,,
"behavior turn_on_light_switch(light_switch:item):
    body:
        achieve is_on(light_switch)
        # Ensure the light switch is turned on

behavior __goal__():
    body:
        # Find a light switch inside bathroom_1
        bind bathroom_1: item where:
            is_bathroom(bathroom_1)
        foreach switch: item:
            if has_switch(switch) and inside(switch, bathroom_1):
                observe(switch, ""Check if this switch controls the bathroom light"")
                if visited(switch):
                    bind light_switch: item where:
                        close_char(char, switch)
                    turn_on_light_switch(light_switch)",,,,,['']
"behavior turn_on_light_switch():
    body:
        # ensure the robot is in the bathroom
        bind bathroom: item where:
            is_bathroom(bathroom)
        achieve inside_char(char, bathroom)

        # Ensure robot is close to the light switch that controls a bathroom light
        foreach switch: item:
            if has_switch(switch) and is_light(switch) and close_char(char, switch) and visited(swit
ch):
                # Check if the switch controls a bathroom light
                observe(switch, ""Check if this switch controls a bathroom light"")

        # ensure the switch is on
        foreach switch: item:
            if has_switch(switch) and is_light(switch) and close_char(char, switch) and visited(swit
ch):
                achieve is_on(switch)

behavior __goal__():
    body:
        turn_on_light_switch()",,,,,['']
,,,,"To turn on the light switch, you'll need to locate the switch first. The switches for the lights are
 usually found on the walls near the entrance of the room. For instance, in the bathroom, you have s
everal lights like ceilinglamp_26 and walllamp_27, which will have switches near the door. Similarly
, in the bedroom, you have ceilinglamp_96 and tablelamp_97, and their switches are typically near th
e entrance or sometimes, for table lamps, directly on the lamp itself. You should also check for swi
tches near the dining room entrance for ceilinglamp_223 and light_245, and for ceilinglamp_349 and w
alllamp_350 near the home office entrance. Simply locate the switch, and gently flip it to the 'on' 
position. The light should illuminate once you have done this.",
" 
def is_light_switch(x: item):
    symbol switch=has_switch(x)
    return switch

behavior turn_on_light(switch:item):
    body:
        achieve is_on(switch)

behavior __goal__():
    body:
        bind switch: item where:
            is_light_switch(switch) and inside_char(char, bathroom_1) and close_char(char, switch)
        achieve close_char(char, switch)
        turn_on_light(switch)
","Error trying to process rule ""behavior_definition"":

Unknown variable: bathroom_1; available variables: [Variable<switch: item>].",,,,
"def is_light_switch(x: item):
    symbol switch=has_switch(x)
    return switch

behavior turn_on_light(switch:item):
    body:
        achieve is_on(switch)

behavior __goal__():
    body:
        bind switch: item where:
            is_light_switch(switch) and inside_char(char, bathroom_1) and close_char(char, switch)
        achieve close_char(char, switch)
        turn_on_light(switch)

 correct version:
def is_light_switch(x: item):
    symbol switch=has_switch(x)
    return switch

behavior turn_on_light(switch:item):
    body:
        achieve is_on(switch)

behavior __goal__():
    body:
        bind bathroom_1: item where:
            is_bathroom(bathroom_1)
        bind switch: item where:
            is_light_switch(switch) and inside_char(char, bathroom_1) and close_char(char, switch)
        achieve close_char(char, switch)
        turn_on_light(switch)",Unexpected dedent to column 1. Expected dedent to 0,,,,
" 
def is_light_switch(x: item):
    symbol switch=has_switch(x)
    return switch

behavior turn_on_light(switch:item):
    body:
        achieve is_on(switch)

behavior __goal__():
    body:
        bind bathroom_1: item where:
            is_bathroom(bathroom_1)
        bind switch: item where:
            is_light_switch(switch) and inside_char(char, bathroom_1) and close_char(char, switch)
        achieve close_char(char, switch)
        turn_on_light(switch)
",,,,,[]
"behavior turn_on_light_switch(switch:item):
    body:
        achieve is_on(switch)

behavior __goal__():
    body:
        bind switch: item where:
            is_light(switch) and inside(switch, bathroom_1) and close_char(char, switch)
        turn_on_light_switch(switch)","Error trying to process rule ""behavior_definition"":

Unknown variable: bathroom_1; available variables: [Variable<switch: item>].",,,,
"behavior turn_on_light_switch(switch:item):
    body:
        achieve is_on(switch)

behavior __goal__():
    body:
        bind bathroom_1: item where:
            is_bathroom(bathroom_1)
        bind switch: item where:
            is_light(switch) and inside(switch, bathroom_1) and close_char(char, switch)
        turn_on_light_switch(switch)",,,,,[]
