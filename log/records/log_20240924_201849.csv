Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
wash the bowls and the plates with dishwasher,,,,,
"['1. Find the bowls and plates that need to be washed.', '2. Place the bowls and plates in the dishw
asher.', '3. Run the dishwasher to wash the bowls and plates.']",,,,,
"def is_bowl_or_plate(item: item):
    symbol is_bowl_or_plate = is_bowl(item) or is_plate(item)
    return is_bowl_or_plate

behavior __goal__():
    body:
        foreach item: item:
            if is_bowl_or_plate(item) and dirty(item) and not visited(item):
                observe(item, ""Check if this item needs to be washed"")
",,,,,['']
"['1. Find the bowls and plates that need to be washed.', '2. Wash the bowls and plates using the dis
hwasher.']",,,,,
" 
def has_bowl_or_plate_that_is_dirty(item:item):
    # Function to check if an item is a dirty bowl or plate
    symbol is_dirty_bowl_or_plate=exists o: item : (is_bowl(o) or is_plate(o)) and dirty(o)
    return is_dirty_bowl_or_plate

behavior __goal__():
    body:
        if exists item: item : (is_bowl(item) or is_plate(item)) and is_dirty_bowl_or_plate(item):
            # Check if there are any dirty bowls or plates based on the available information
            bind item: item where:
                (is_bowl(item) or is_plate(item)) and is_dirty_bowl_or_plate(item)
            # Select a dirty bowl or plate
            achieve close_char(char, item) 
            # Move the character closer to the dirty bowl or plate

        else: 
           # If no dirty bowls or plates are found, initiate exploration to locate one
            foreach item: item:
                if (is_bowl(item) or is_plate(item)) and not visited(item):
                    observe(item, ""Check is the bowl or plate dirty"")
                    # Observe whether the bowl or plate is dirty
","Error trying to process rule ""behavior_definition"":

'Function is_dirty_bowl_or_plate not found. Note that recursive function calls are not supported in 
the current version.'",,,,
"def has_bowl_or_plate_that_is_dirty(item:item):
    # Function to check if an item is a dirty bowl or plate
    symbol is_dirty_bowl_or_plate=exists o: item : (is_bowl(o) or is_plate(o)) and dirty(o)
    return is_dirty_bowl_or_plate

behavior __goal__():
    body:
        if exists item: item : (is_bowl(item) or is_plate(item)) and (is_bowl(item) or is_plate(item
)) and dirty(item):
            # Check if there are any dirty bowls or plates based on the available information
            bind item: item where:
                (is_bowl(item) or is_plate(item)) and (is_bowl(item) or is_plate(item)) and dirty(it
em)
            # Select a dirty bowl or plate
            achieve close_char(char, item) 
            # Move the character closer to the dirty bowl or plate

        else: 
           # If no dirty bowls or plates are found, initiate exploration to locate one
            foreach item: item:
                if (is_bowl(item) or is_plate(item)) and not visited(item):
                    observe(item, ""Check is the bowl or plate dirty"")
                    # Observe whether the bowl or plate is dirty",,,,,"['walk_executor(sink_42); exp(bowl_2071, sink_42); walk_executor(bowl_2071); obs(bowl_2071, Check is
 the bowl or plate dirty); walk_executor(sink_42); exp(bowl_2072, sink_42); walk_executor(bowl_2072)
; obs(bowl_2072, Check is the bowl or plate dirty); walk_executor(sink_42); exp(plate_1000, sink_42)
; walk_executor(plate_1000); obs(plate_1000, Check is the bowl or plate dirty)']"
,,,,,"(CrowControllerApplier<walk_executor(sink_42)>, CrowControllerApplier<exp(bowl_2071, sink_42)>, Crow
ControllerApplier<walk_executor(bowl_2071)>, CrowControllerApplier<obs(bowl_2071, Check is the bowl 
or plate dirty)>, CrowControllerApplier<walk_executor(sink_42)>, CrowControllerApplier<exp(bowl_2072
, sink_42)>, CrowControllerApplier<walk_executor(bowl_2072)>, CrowControllerApplier<obs(bowl_2072, C
heck is the bowl or plate dirty)>, CrowControllerApplier<walk_executor(sink_42)>, CrowControllerAppl
ier<exp(plate_1000, sink_42)>, CrowControllerApplier<walk_executor(plate_1000)>, CrowControllerAppli
er<obs(plate_1000, Check is the bowl or plate dirty)>)"
,,walk_executor(sink_42),"Find soap_2053. Find towel_rack_31. Find basket_for_clothes_2006. Find towel_rack_34. Find towel_rac
k_32. Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close sink_42. ",,
