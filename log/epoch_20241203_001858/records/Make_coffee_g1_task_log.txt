From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_table_107(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffe_maker_on(coffee_maker:item):
    # Function to check if the coffee maker is on
    symbol is_on_state=exists cm: item : is_coffe_maker(cm) and is_on(cm)
    return is_on_state

def has_water_and_coffee_filter(coffee_maker:item):
    # Function to check if the coffee maker has water and coffee filter
    symbol has_water_and_filter=has_water(coffee_maker) and exists f: item : is_coffee_filter(f) and inside(f, coffee_maker)
    return has_water_and_filter

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker) # Start the coffee maker

behavior make_coffee(cup:item, coffee_maker:item):
    body:
        achieve inside(cup, coffee_maker) # Ensure the cup is placed correctly for coffee making

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if not is_coffe_maker_on(coffee_maker):
            start_coffee_maker(coffee_maker) # Start the coffee maker if its not on

        assert has_water_and_coffee_filter(coffee_maker)
        assert_hold is_on(coffee_maker) # Ensure the coffee maker stays on while coffee is being made
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        make_coffee(cup, coffee_maker)
        # Make coffee using the selected cup and coffee maker

#goal_representation_end

##############################
