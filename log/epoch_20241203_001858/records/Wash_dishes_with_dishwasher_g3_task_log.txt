From agent.py
Reset goals: The sub-goals are: 
['1. Load the bowls and plates into the dishwasher and start it.', '2. Wash the forks by hand.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_plate_1000_around_kitchen_counter_230(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_into_dishwasher(item:item, dishwasher:item):
    body:
        achieve inside(item, dishwasher)
        # Load the item into the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Ensure the dishwasher is closed before starting
        achieve is_on(dishwasher) # Turn on the dishwasher to start it

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher instance

        foreach item: item:
            if is_bowl(item) or is_plate(item):
                # Load bowls and plates into the dishwasher
                load_into_dishwasher(item, dishwasher)
        
        start_dishwasher(dishwasher) # Start the dishwasher

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior load_into_dishwasher(item:item, dishwasher:item):
    body:
        achieve inside(item, dishwasher)
        # Load the item into the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Ensure the dishwasher is closed before starting
        achieve is_on(dishwasher) # Turn on the dishwasher to start it

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher instance

        foreach item: item:
            if is_bowl(item) or is_plate(item):
                # Load bowls and plates into the dishwasher
                load_into_dishwasher(item, dishwasher)
        
        start_dishwasher(dishwasher) # Start the dishwasher

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you tell me how to load the bowls and plates into the dishwasher and start it.
Answer: Need to replan: No  
Guidance: Put all the bowls and plates into the dishwasher. Turn on the dishwasher.

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you tell me how to wash the forks by hand.
Answer: Need to replan: No  
Guidance: Wash the forks by hand.

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(bowl_2071, kitchen_counter_230)walk_executor(dishwasher_1001)open_executor(dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(kitchen_counter_230)exp(bowl_2072, kitchen_counter_230)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)walk_executor(kitchen_counter_230)exp(plate_1000, kitchen_counter_230)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(bowl_2071, kitchen_counter_230)
Failed to find bowl_2071 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
exp(bowl_2071, kitchen_counter_230)walk_executor(dishwasher_1001)open_executor(dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(kitchen_counter_230)exp(bowl_2072, kitchen_counter_230)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)walk_executor(kitchen_counter_230)exp(plate_1000, kitchen_counter_230)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
exp(bowl_2071, kitchen_counter_230)
Failed to find bowl_2071 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
exp(bowl_2071, kitchen_counter_230)walk_executor(dishwasher_1001)open_executor(dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(kitchen_counter_230)exp(bowl_2072, kitchen_counter_230)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)walk_executor(kitchen_counter_230)exp(plate_1000, kitchen_counter_230)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
exp(bowl_2071, kitchen_counter_230)
Failed to find bowl_2071 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
exp(bowl_2071, kitchen_counter_230)walk_executor(dishwasher_1001)open_executor(dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(kitchen_counter_230)exp(bowl_2072, kitchen_counter_230)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
exp(bowl_2071, kitchen_counter_230)
Failed to find bowl_2071 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
exp(bowl_2071, kitchen_counter_230)walk_executor(dishwasher_1001)open_executor(dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(kitchen_counter_230)exp(bowl_2072, kitchen_counter_230)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
exp(bowl_2071, kitchen_counter_230)
Failed to find bowl_2071 around kitchen_counter_230. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Use the dishwasher to wash the bowls and plates.', '2. Hand wash the forks.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_plate_1000_around_kitchen_counter_230(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher)
        achieve is_on(dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        
        foreach o: item:
            if is_bowl(o) or is_plate(o) and close(o, kitchen_counter):
                load_dishwasher(o, dishwasher)
        
        start_dishwasher(dishwasher)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher)
        achieve is_on(dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        
        foreach o: item:
            if is_bowl(o) or is_plate(o) and close(o, kitchen_counter):
                load_dishwasher(o, dishwasher)
        
        start_dishwasher(dishwasher)

##############################
From agent.py-> find a plan in act()
exp(bowl_2071, kitchen_counter_230)walk_executor(dishwasher_1001)open_executor(dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(kitchen_counter_230)exp(bowl_2072, kitchen_counter_230)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2071 ?
Answer: The target item, bowl_2071, can be found inside dining_room_201. It is located on top of table_226. To assist in identifying the correct item, note that the bowl is in close proximity to table_226.

##############################
From agent.py
Human Instruction: The target item, bowl_2071, can be found inside dining_room_201. It is located on top of table_226. To assist in identifying the correct item, note that the bowl is in close proximity to table_226.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: look for bowl_2071 around kitchen_counter_230.
Action 4: look for bowl_2071 around kitchen_counter_230.
Action 5: look for bowl_2071 around kitchen_counter_230.
Action 6: look for bowl_2071 around kitchen_counter_230.

##############################
From agent.py
exp(bowl_2071, kitchen_counter_230)
Failed to find bowl_2071 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(bowl_2071, dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)exp(bowl_2072, dishwasher_1001)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot is inside dining_room_201. Robot is close dishwasher_1001. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
open_executor(dishwasher_1001)
Robot is inside dining_room_201. Robot is close dishwasher_1001. 
##############################
From agent.py
exp(bowl_2071, dishwasher_1001)
Failed to find bowl_2071 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(bowl_2071, table_226)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(table_226)exp(bowl_2072, table_226)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(table_226)
Find coffee_filter_2000. Find bowl_2071. Find drawing_2003. Find bowl_2072. Find mat_236. Find fork_2080. Find fork_2081. Find mat_237. Robot is inside dining_room_201. Robot is close table_226. Robot is no longer close dishwasher_1001.
##############################
From agent.py
exp(bowl_2071, table_226)
Find bowl_2071. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(bowl_2071)
Robot is inside dining_room_201. Robot is close table_226. Robot is close bowl_2071. 
##############################
From agent.py
grab_executor(bowl_2071)
Robot is inside dining_room_201. Robot is close table_226. Robot is close bowl_2071. Grabbing bowl_2071 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot is inside dining_room_201. Robot is close bowl_2071. Robot is close dishwasher_1001. Robot is no longer close table_226.
##############################
From agent.py
putin_executor(bowl_2071, dishwasher_1001)
Robot is inside dining_room_201. Robot is close bowl_2071. Robot is close dishwasher_1001. bowl_2071 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot is inside dining_room_201. Robot is close bowl_2072. Robot is close table_226. Robot is no longer close dishwasher_1001.Robot is no longer close bowl_2071.
##############################
From agent.py
grab_executor(bowl_2072)
Robot is inside dining_room_201. Robot is close bowl_2072. Robot is close table_226. Grabbing bowl_2072 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot is inside dining_room_201. Robot is close bowl_2072. Robot is close dishwasher_1001. Robot is close bowl_2071. Robot is no longer close table_226.
##############################
From agent.py
putin_executor(bowl_2072, dishwasher_1001)
Robot is inside dining_room_201. Robot is close bowl_2072. Robot is close dishwasher_1001. Robot is close bowl_2071. bowl_2072 released by right hand. 
##############################
From agent.py
close_executor(dishwasher_1001)
Robot is inside dining_room_201. Robot is close bowl_2072. Robot is close dishwasher_1001. Robot is close bowl_2071. 
##############################
From agent.py
switchon_executor(dishwasher_1001)
Robot is inside dining_room_201. Robot is close bowl_2072. Robot is close dishwasher_1001. Robot is close bowl_2071. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_forks():
    body:
        bind fork: item where:
            is_fork(fork) and dirty(fork) and grabbable(fork)
        # Select a dirty and grabbable fork

        wash(fork)  # Wash the selected fork by hand

behavior __goal__():
    body:
        clean_forks() 
        # Clean the forks

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior clean_forks():
    body:
        bind fork: item where:
            is_fork(fork) and dirty(fork) and grabbable(fork)
        # Select a dirty and grabbable fork

        wash(fork)  # Wash the selected fork by hand

behavior __goal__():
    body:
        clean_forks() 
        # Clean the forks

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def has_forks(kitchen_counter:item):
    # Function to check if there are forks on the kitchen counter
    symbol has_forks=exists o: item : is_fork(o) and on(o, kitchen_counter)
    return has_forks

behavior wash_fork(fork:item):
    # Define the behavior to wash a fork
    body:
        wash(fork)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        foreach fork: item:
            if is_fork(fork) and has_forks(kitchen_counter) and on(fork, kitchen_counter):
                wash_fork(fork)
                # Wash all forks that are on the kitchen counter

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_forks(kitchen_counter:item):
    # Function to check if there are forks on the kitchen counter
    symbol has_forks=exists o: item : is_fork(o) and on(o, kitchen_counter)
    return has_forks

behavior wash_fork(fork:item):
    # Define the behavior to wash a fork
    body:
        wash(fork)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        foreach fork: item:
            if is_fork(fork) and has_forks(kitchen_counter) and on(fork, kitchen_counter):
                wash_fork(fork)
                # Wash all forks that are on the kitchen counter

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2048_around_closetdrawer_154(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_forks(fork: item, sink: item):
    body:
        achieve_once inside(fork, sink)
        
        if exists faucet: item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            wash(fork)
            achieve_once is_off(faucet)
        else:
            wash(fork)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        
        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                clean_forks(fork, sink)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior clean_forks(fork: item, sink: item):
    body:
        achieve_once inside(fork, sink)
        
        if exists faucet: item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            wash(fork)
            achieve_once is_off(faucet)
        else:
            wash(fork)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        
        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                clean_forks(fork, sink)

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_forks_in_hand():
    # Function to check if there are forks in hand
    symbol has_fork=exists o: item : is_fork(o) and inhand(o)
    return has_fork

behavior hand_wash_fork(fork:item):
    body:
        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        if not has_forks_in_hand():
            # First, ensure to identify and grab the forks
            foreach fork: item:
                if is_fork(fork) and not visited(fork):
                    observe(fork, "Identify fork for washing")
        foreach fork: item:
            if is_fork(fork) and inhand(fork):
                hand_wash_fork(fork)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_forks_in_hand():
    # Function to check if there are forks in hand
    symbol has_fork=exists o: item : is_fork(o) and inhand(o)
    return has_fork

behavior hand_wash_fork(fork:item):
    body:
        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        if not has_forks_in_hand():
            # First, ensure to identify and grab the forks
            foreach fork: item:
                if is_fork(fork) and not visited(fork):
                    observe(fork, "Identify fork for washing")
        foreach fork: item:
            if is_fork(fork) and inhand(fork):
                hand_wash_fork(fork)

##############################
From agent.py-> find a plan in act()
walk_executor(fork_2080)obs(fork_2080, Identify fork for washing)walk_executor(fork_2081)obs(fork_2081, Identify fork for washing)
##############################
From agent.py
walk_executor(fork_2080)
Robot is inside dining_room_201. Robot is close fork_2080. Robot is close table_226. Robot is no longer close bowl_2072.Robot is no longer close dishwasher_1001.Robot is no longer close bowl_2071.
##############################
From agent.py
obs(fork_2080, Identify fork for washing)
Get this information:  fork_2080 is on table_226. fork_2080 is close to table_226. fork_2080 is close to character_65. fork_2080 is inside dining_room_201.
##############################
From agent.py
walk_executor(fork_2081)
Robot is inside dining_room_201. Robot is close table_226. Robot is close fork_2081. Robot is no longer close fork_2080.
##############################
From agent.py
obs(fork_2081, Identify fork for washing)
Get this information:  fork_2081 is inside dining_room_201. fork_2081 is on table_226. fork_2081 is close to table_226. fork_2081 is close to character_65.
##############################
From agent.py
Human Instruction: You need to grab the identified forks, fork_2080 and fork_2081, and wash them by hand.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: look for bowl_2071 around kitchen_counter_230.
Action 4: look for bowl_2071 around kitchen_counter_230.
Action 5: look for bowl_2071 around kitchen_counter_230.
Action 6: look for bowl_2071 around kitchen_counter_230.
Action 7: look for bowl_2071 around kitchen_counter_230.
Action 8: Walk to dishwasher_1001.
Action 9: Open dishwasher_1001.
Action 10: look for bowl_2071 around dishwasher_1001.
Action 11: Walk to table_226.
Action 12: look for bowl_2071 around table_226.
Action 13: Walk to bowl_2071.
Action 14: Grab bowl_2071.
Action 15: Walk to dishwasher_1001.
Action 16: Put bowl_2071 into dishwasher_1001.
Action 17: Walk to bowl_2072.
Action 18: Grab bowl_2072.
Action 19: Walk to dishwasher_1001.
Action 20: Put bowl_2072 into dishwasher_1001.
Action 21: Close dishwasher_1001.
Action 22: Switch on dishwasher_1001.
Action 23: Walk to fork_2080.
Action 24: Observe around fork_2080 with the question of Identify fork for washing.
Action 25: Walk to fork_2081.
Action 26: Observe around fork_2081 with the question of Identify fork for washing.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_sink_231(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior hand_wash_forks(fork:item):
    body:
        wash(fork)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink for washing

        bind fork_2080: item where:
            is_fork(fork_2080)
        # Bind fork_2080 for washing

        bind fork_2081: item where:
            is_fork(fork_2081)
        # Bind fork_2081 for washing

        foreach fork: item:
            if fork == fork_2080 or fork == fork_2081:
                hand_wash_forks(fork)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior hand_wash_forks(fork:item):
    body:
        wash(fork)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink for washing

        bind fork_2080: item where:
            is_fork(fork_2080)
        # Bind fork_2080 for washing

        bind fork_2081: item where:
            is_fork(fork_2081)
        # Bind fork_2081 for washing

        foreach fork: item:
            if fork == fork_2080 or fork == fork_2081:
                hand_wash_forks(fork)

##############################
From agent.py-> find a plan in act()
walk_executor(fork_2080)wash_executor(fork_2080)
##############################
From agent.py
walk_executor(fork_2080)
Robot is inside dining_room_201. Robot is close table_226. Robot is close fork_2080. Robot is no longer close fork_2081.
##############################
From agent.py
wash_executor(fork_2080)
Robot is inside dining_room_201. Robot is close table_226. Robot is close fork_2080. 
##############################
From agent.py
Human Instruction: You need to hand wash the second fork, fork_2081, which has been identified but not yet washed.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: look for bowl_2071 around kitchen_counter_230.
Action 4: look for bowl_2071 around kitchen_counter_230.
Action 5: look for bowl_2071 around kitchen_counter_230.
Action 6: look for bowl_2071 around kitchen_counter_230.
Action 7: look for bowl_2071 around kitchen_counter_230.
Action 8: Walk to dishwasher_1001.
Action 9: Open dishwasher_1001.
Action 10: look for bowl_2071 around dishwasher_1001.
Action 11: Walk to table_226.
Action 12: look for bowl_2071 around table_226.
Action 13: Walk to bowl_2071.
Action 14: Grab bowl_2071.
Action 15: Walk to dishwasher_1001.
Action 16: Put bowl_2071 into dishwasher_1001.
Action 17: Walk to bowl_2072.
Action 18: Grab bowl_2072.
Action 19: Walk to dishwasher_1001.
Action 20: Put bowl_2072 into dishwasher_1001.
Action 21: Close dishwasher_1001.
Action 22: Switch on dishwasher_1001.
Action 23: Walk to fork_2080.
Action 24: Observe around fork_2080 with the question of Identify fork for washing.
Action 25: Walk to fork_2081.
Action 26: Observe around fork_2081 with the question of Identify fork for washing.
Action 27: Walk to fork_2080.
Action 28: Wash fork_2080.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_sink_231(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation

behavior wash_fork(fork:item):
    body:
        achieve clean(fork)

behavior __goal__():
    body:
        bind fork: item where:
            is_fork(fork) and id[fork]==2081
        # Select fork with ID 2081

        wash_fork(fork)
        # Wash the fork by hand

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior wash_fork(fork:item):
    body:
        achieve clean(fork)

behavior __goal__():
    body:
        bind fork: item where:
            is_fork(fork) and id[fork]==2081
        # Select fork with ID 2081

        wash_fork(fork)
        # Wash the fork by hand

##############################
From agent.py-> find a plan in act()
walk_executor(fork_2081)wash_executor(fork_2081)
##############################
From agent.py
walk_executor(fork_2081)
Robot is inside dining_room_201. Robot is close table_226. Robot is close fork_2081. Robot is no longer close fork_2080.
##############################
From agent.py
wash_executor(fork_2081)
Robot is inside dining_room_201. Robot is close table_226. Robot is close fork_2081. 
##############################
From evaluation.py
cdl_dataset/dataset/Wash_dishes_with_dishwasher/g3.txt
Checking k1
missed actions: walk_executor(dishwasher_1001);switchoff_executor(dishwasher_1001);open_executor(dishwasher_1001);walk_executor(plate_1000);grab_executor(plate_1000);walk_executor(dishwasher_1001);putin_executor(plate_1000, dishwasher_1001);close_executor(dishwasher_1001);switchon_executor(dishwasher_1001);
missed action num: 9
##############################
From evaluation.py
cdl_dataset/dataset/Wash_dishes_with_dishwasher/g3.txt
Checking k1
missed actions: walk_executor(dishwasher_1001);switchoff_executor(dishwasher_1001);open_executor(dishwasher_1001);walk_executor(plate_1000);grab_executor(plate_1000);walk_executor(dishwasher_1001);putin_executor(plate_1000, dishwasher_1001);close_executor(dishwasher_1001);switchon_executor(dishwasher_1001);
missed action num: 9
##############################
