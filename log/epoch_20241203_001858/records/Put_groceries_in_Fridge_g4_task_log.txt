From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces and put it back in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def is_sliced_chicken(chicken: item):
    # Check if the chicken has been sliced
    symbol sliced = is_food_chicken(chicken) and cut(chicken)
    return sliced

behavior store_chicken_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)
        # Place the sliced chicken inside the fridge

        achieve closed(fridge)
        # Ensure the fridge is closed after storing the chicken

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind fridge: item where:
            is_fridge(fridge)

        if not is_sliced_chicken(chicken):
            achieve cut(chicken)

        store_chicken_in_fridge(chicken, fridge)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_sliced_chicken(chicken: item):
    # Check if the chicken has been sliced
    symbol sliced = is_food_chicken(chicken) and cut(chicken)
    return sliced

behavior store_chicken_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)
        # Place the sliced chicken inside the fridge

        achieve closed(fridge)
        # Ensure the fridge is closed after storing the chicken

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind fridge: item where:
            is_fridge(fridge)

        if not is_sliced_chicken(chicken):
            achieve cut(chicken)

        store_chicken_in_fridge(chicken, fridge)

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you tell me how to cut the chicken into pieces and put it back in the fridge.
Answer: Need to replan: No  
Guidance: Cut the chicken into pieces, then put it back in the fridge.

##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces and put it back in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
behavior cut_the_chicken(chicken:item):
    body:
        achieve cut(chicken)
        # Cut the chicken into pieces

behavior store_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge)
        # Put the chicken back in the fridge

behavior close_the_fridge(fridge:item):
    body:
        achieve closed(fridge)
        # Close the fridge door

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        cut_the_chicken(chicken)
        store_in_fridge(chicken, fridge)
        close_the_fridge(fridge)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior cut_the_chicken(chicken:item):
    body:
        achieve cut(chicken)
        # Cut the chicken into pieces

behavior store_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge)
        # Put the chicken back in the fridge

behavior close_the_fridge(fridge:item):
    body:
        achieve closed(fridge)
        # Close the fridge door

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        cut_the_chicken(chicken)
        store_in_fridge(chicken, fridge)
        close_the_fridge(fridge)
##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces, then put it back in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_cutting_board_close_to_chicken(cutting_board: item, chicken: item):
    # Check if the cutting board is placed close to the chicken
    symbol close_to_chicken = close(cutting_board, chicken)
    return close_to_chicken

def is_fridge_available():
    # Check if the fridge is available
    symbol available_fridge = exists fridge: item : is_fridge(fridge)
    return available_fridge

behavior cut_chicken_on_board(chicken: item, cutting_board: item):
    body:
        if not is_cut(chicken):
            achieve cuttable(chicken)
            # Ensure the chicken is cuttable
            achieve inside(chicken, cutting_board)
            # Place the chicken on the cutting board
            achieve cut(chicken)
            # Achieve the state where the chicken is cut

behavior store_chicken_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)
        # Store the chicken in the fridge

behavior close_fridge(fridge: item):
    body:
        achieve closed(fridge)
        # Close the fridge door

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        if not is_cutting_board_close_to_chicken(cutting_board, chicken):
            observe(cutting_board, "Bring the cutting board close to the chicken")
            # Position the cutting board close to the chicken

        cut_chicken_on_board(chicken, cutting_board)
        # Cut the chicken on the cutting board

        if is_fridge_available():
            store_chicken_in_fridge(chicken, fridge)
            # Store the cut chicken pieces in the fridge
            close_fridge(fridge)
            # Ensure the fridge is closed

#goal_representation_end

##############################
