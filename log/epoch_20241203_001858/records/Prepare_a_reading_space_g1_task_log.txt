From agent.py
Reset goals: The sub-goals are: 
['1. Locate the book you need.', '2. Place the book on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_home_office(table:item):
    # Check if the table is located inside the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(table, room)
    return in_home_office

behavior find_and_put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)
        # Place the book on the specified coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_table_in_home_office(coffee_table)
        # Select the coffee table located in the home office

        find_and_put_book_on_coffee_table(book, coffee_table)
        # Perform action to find the book and place it on the coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_table_in_home_office(table:item):
    # Check if the table is located inside the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(table, room)
    return in_home_office

behavior find_and_put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)
        # Place the book on the specified coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_table_in_home_office(coffee_table)
        # Select the coffee table located in the home office

        find_and_put_book_on_coffee_table(book, coffee_table)
        # Perform action to find the book and place it on the coffee table in the home office

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you tell me how to locate the book you need.
Answer: Need to replan: Yes  
Guidance: Find the book on the bookshelf_354.

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you tell me how to place the book on the coffee table in the home office.
Answer: Need to replan: No  
Guidance: Place the book on the coffee table in the home office.

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_101)open_executor(bookshelf_101)exp(book_2066, bookshelf_101)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_101)
Find drawing_174. Find drawing_176. Robot is inside bedroom_67. Robot is close floor_72. Robot is close photoframe_185. Robot is close bookshelf_101. Robot is no longer inside bathroom_1.
##############################
From agent.py
open_executor(bookshelf_101)
Find towel_rack_32. Find towel_rack_31. Robot is inside bedroom_67. Robot is close floor_72. Robot is close photoframe_185. Robot is close bookshelf_101. 
##############################
From agent.py
exp(book_2066, bookshelf_101)
Failed to find book_2066 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
exp(book_2066, bookshelf_101)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
exp(book_2066, bookshelf_101)
Failed to find book_2066 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
exp(book_2066, bookshelf_101)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
exp(book_2066, bookshelf_101)
Failed to find book_2066 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
exp(book_2066, bookshelf_101)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
exp(book_2066, bookshelf_101)
Failed to find book_2066 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
exp(book_2066, bookshelf_101)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
exp(book_2066, bookshelf_101)
Failed to find book_2066 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
exp(book_2066, bookshelf_101)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find book_2066 ?
Answer: Go to the home office, which is designated as home_office_319. Inside, locate bookshelf_354. Book_2066 is on this bookshelf. Look carefully on the shelves to find it.

##############################
From agent.py
Human Instruction: Go to the home office, which is designated as home_office_319. Inside, locate bookshelf_354. Book_2066 is on this bookshelf. Look carefully on the shelves to find it.

The actions you have taken:
Action 1: Walk to bookshelf_101.
Action 2: Open bookshelf_101.
Action 3: look for book_2066 around bookshelf_101.
Action 4: look for book_2066 around bookshelf_101.
Action 5: look for book_2066 around bookshelf_101.
Action 6: look for book_2066 around bookshelf_101.
Action 7: look for book_2066 around bookshelf_101.

##############################
From agent.py
exp(book_2066, bookshelf_101)
Failed to find book_2066 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_354)
Find drawing_402. Find drawing_403. Find drawing_404. Find book_2066. Find book_2067. Robot is inside home_office_319. Robot is close floor_320. Robot is close bookshelf_354. Robot is close photoframe_430. Robot is no longer inside bedroom_67.Robot is no longer close floor_72.Robot is no longer close photoframe_185.Robot is no longer close bookshelf_101.
##############################
From agent.py
open_executor(bookshelf_354)
Find vacuum_cleaner_2070. Find headset_2062. Find mat_401. Find hanger_363. Find hanger_374. Find drawing_241. Find keyboard_415. Find headset_2076. Find hanger_369. Find remote_control_2052. Find drawing_243. Find hanger_361. Find spectacles_2082. Find hanger_372. Find drawing_242. Find cat_2055. Find clothes_jacket_2047. Find chair_356. Find phone_2077. Find mouse_413. Find hanger_375. Find pencil_2001. Find pillow_405. Find hanger_367. Find hanger_359. Find dvd_player_2061. Find drawing_400. Find hanger_365. Find hanger_376. Find pillow_406. Find hairbrush_2002. Robot is inside home_office_319. Robot is close floor_320. Robot is close bookshelf_354. Robot is close photoframe_430. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(book_2066)
Robot is inside home_office_319. Robot is close bookshelf_354. Robot is close book_2066. Robot is no longer close floor_320.Robot is no longer close photoframe_430.
##############################
From agent.py
grab_executor(book_2066)
Robot is inside home_office_319. Robot is close bookshelf_354. Robot is close book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot is inside home_office_319. Robot is close book_2066. Robot is close coffee_table_2068. Robot is no longer close bookshelf_354.
##############################
From agent.py
put_executor(book_2066, coffee_table_2068)
Robot is inside home_office_319. Robot is close book_2066. Robot is close coffee_table_2068. book_2066 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)
        # Ensure the book is placed on the coffee table

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table] == 2068
        # Select the coffee table in the home office with ID 2068

        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the book with ID 2066

        place_book_on_coffee_table(book, coffee_table)
        # Perform the action of placing the book on the coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)
        # Ensure the book is placed on the coffee table

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table] == 2068
        # Select the coffee table in the home office with ID 2068

        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the book with ID 2066

        place_book_on_coffee_table(book, coffee_table)
        # Perform the action of placing the book on the coffee table in the home office

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)
        # Ensure the book is placed on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the specific book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table] == 2068
        # Select the specific coffee table with ID 2068

        place_book_on_coffee_table(book, coffee_table)
        # Place the book on the specified coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)
        # Ensure the book is placed on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the specific book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table] == 2068
        # Select the specific coffee table with ID 2068

        place_book_on_coffee_table(book, coffee_table)
        # Place the book on the specified coffee table in the home office

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_wallshelf_234(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(plate,wallshelf_instance)
        else:
            exp(plate,wallshelf_instance)
    eff:
        unknown[plate]=False
        close[plate,wallshelf_instance]=True
        close[wallshelf_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2066
        # Select book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table]==2068 
        # Select coffee table with ID 2068

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2066
        # Select book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table]==2068 
        # Select coffee table with ID 2068

        achieve on(book, coffee_table)
        # Place the book on the coffee table

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)
        # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table

        place_book_on_coffee_table(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)
        # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table

        place_book_on_coffee_table(book, coffee_table)
        # Place the book on the coffee table

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_home_office(table:item):
    # Check if the table is located inside the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(table, room)
    return in_home_office

behavior find_and_put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)
        # Place the book on the specified coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the specific book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_table_in_home_office(coffee_table)
        # Select the coffee table located in the home office

        find_and_put_book_on_coffee_table(book, coffee_table)
        # Perform action to find the book and place it on the coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_table_in_home_office(table:item):
    # Check if the table is located inside the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(table, room)
    return in_home_office

behavior find_and_put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)
        # Place the book on the specified coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the specific book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_table_in_home_office(coffee_table)
        # Select the coffee table located in the home office

        find_and_put_book_on_coffee_table(book, coffee_table)
        # Perform action to find the book and place it on the coffee table in the home office

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_the_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)
        # Place the book on the specified coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and inside(book, bookshelf_354)
        # Select the book located on bookshelf_354

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table] == 2068
        # Select the coffee table with ID 2068 in the home office

        place_the_book_on_coffee_table(book, coffee_table)
        # Place the book on the coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_the_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)
        # Place the book on the specified coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and inside(book, bookshelf_354)
        # Select the book located on bookshelf_354

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table] == 2068
        # Select the coffee table with ID 2068 in the home office

        place_the_book_on_coffee_table(book, coffee_table)
        # Place the book on the coffee table in the home office

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_wallshelf_234(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(plate,wallshelf_instance)
        else:
            exp(plate,wallshelf_instance)
    eff:
        unknown[plate]=False
        close[plate,wallshelf_instance]=True
        close[wallshelf_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)
        # Place the book on the specified coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2066
        # Select the book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table]==2068
        # Select the coffee table with ID 2068

        place_book_on_coffee_table(book, coffee_table)
        # Perform action to place the book on the coffee table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)
        # Place the book on the specified coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2066
        # Select the book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table]==2068
        # Select the coffee table with ID 2068

        place_book_on_coffee_table(book, coffee_table)
        # Perform action to place the book on the coffee table

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the specific book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table] == 2068
        # Select the specific coffee table with ID 2068

        place_book_on_coffee_table(book, coffee_table)
        # Execute the action to place the book on the coffee table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the specific book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table] == 2068
        # Select the specific coffee table with ID 2068

        place_book_on_coffee_table(book, coffee_table)
        # Execute the action to place the book on the coffee table

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2066
        # Select the book with ID 2066

        bind home_office: item where:
            is_home_office(home_office) and id[home_office]==319
        # Select the home office with ID 319

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table located in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2066
        # Select the book with ID 2066

        bind home_office: item where:
            is_home_office(home_office) and id[home_office]==319
        # Select the home office with ID 319

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table located in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table in the home office

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2066
        # Select the book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table]==2068
        # Select the coffee table with ID 2068

        place_book_on_coffee_table(book, coffee_table)
        # Place the book on the coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2066
        # Select the book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table]==2068
        # Select the coffee table with ID 2068

        place_book_on_coffee_table(book, coffee_table)
        # Place the book on the coffee table in the home office

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)
        # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the specific book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table] == 2068
        # Select the specific coffee table with ID 2068

        place_book_on_coffee_table(book, coffee_table)
        # Perform the action to place the book on the coffee table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)
        # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the specific book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table] == 2068
        # Select the specific coffee table with ID 2068

        place_book_on_coffee_table(book, coffee_table)
        # Perform the action to place the book on the coffee table

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table]==2068
        # Select coffee table with ID 2068

        bind book: item where:
            is_book(book) and id[book]==2066
        # Select book with ID 2066

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table]==2068
        # Select coffee table with ID 2068

        bind book: item where:
            is_book(book) and id[book]==2066
        # Select book with ID 2066

        achieve on(book, coffee_table)
        # Place the book on the coffee table

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_kitchen_counter_230(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2066
        # Select the specific book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table]==2068
        # Select the specific coffee table with ID 2068

        achieve on(book, coffee_table)
        # Place the book on the coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2066
        # Select the specific book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table]==2068
        # Select the specific coffee table with ID 2068

        achieve on(book, coffee_table)
        # Place the book on the coffee table in the home office

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is located inside the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(coffee_table, room)
    return in_home_office

behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)
        # Place the book on the specified coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_coffee_table_in_home_office(coffee_table) and id[coffee_table] == 2068
        # Select the coffee table with ID 2068 located in the home office

        place_book_on_coffee_table(book, coffee_table)
        # Perform action to place the book on the coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is located inside the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(coffee_table, room)
    return in_home_office

behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)
        # Place the book on the specified coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2066
        # Select the book with ID 2066

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_coffee_table_in_home_office(coffee_table) and id[coffee_table] == 2068
        # Select the coffee table with ID 2068 located in the home office

        place_book_on_coffee_table(book, coffee_table)
        # Perform action to place the book on the coffee table in the home office

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_kitchen_counter_230(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)
        # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2066
        # Select the book with ID 2066
        
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table]==2068
        # Select the coffee table with ID 2068
        
        place_book_on_coffee_table(book, coffee_table)
        # Perform action to place the book on the coffee table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)
        # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2066
        # Select the book with ID 2066
        
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table]==2068
        # Select the coffee table with ID 2068
        
        place_book_on_coffee_table(book, coffee_table)
        # Perform action to place the book on the coffee table

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office_319)
        # Select the coffee table inside the home office

        place_book_on_coffee_table(book, coffee_table)
        # Place the book on the coffee table in the home office

#goal_representation_end

##############################
