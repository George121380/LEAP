From agent.py
Reset goals: The sub-goals are: 
['1. Find the chair in front of the computer in the home office and sit on it.', '2. Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_table_107(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_keyboard_168_around_table_107(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(keyboard,table_instance)
        else:
            exp(keyboard,table_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,table_instance]=True
        close[table_instance,keyboard]=True
    

behavior find_mouse_166_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
behavior find_chair_and_sit(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select the chair located in the home office, in front of the computer

        if not visited(chair):
            observe(chair, "Finding the chair in front of the computer")
            # Observe to locate the chair in front of the computer

        find_chair_and_sit(chair)
        # Sit on the chair in front of the computer in the home office
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_chair_and_sit(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select the chair located in the home office, in front of the computer

        if not visited(chair):
            observe(chair, "Finding the chair in front of the computer")
            # Observe to locate the chair in front of the computer

        find_chair_and_sit(chair)
        # Sit on the chair in front of the computer in the home office
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you tell me how to find the chair in front of the computer in the home office and sit on it.
Answer: Need to replan: No  
Guidance: Get close to the computer in the home office. Then sit on the chair in front of the computer.

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you tell me how to touch the mouse near the computer to turn it on.
Answer: Need to replan: Yes  
Guidance: Get close to the computer in the home office. Touch the mouse to turn on the computer.

##############################
From agent.py
Reset goals: The sub-goals are: 
['Sit on the chair in front of the computer in the home office and touch the mouse to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_table_107(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_mouse_413_around_table_107(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mouse,table_instance)
        else:
            exp(mouse,table_instance)
    eff:
        unknown[mouse]=False
        close[mouse,table_instance]=True
        close[table_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
behavior achieve_sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior touch_to_turn_on_mouse(mouse:item):
    body:
        touch(mouse)
        # Touch the mouse to turn it on

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair)
        # Select the chair

        bind mouse: item where:
            is_mouse(mouse)
        # Select the mouse

        achieve_sit_on_chair(chair)
        touch_to_turn_on_mouse(mouse)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior achieve_sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior touch_to_turn_on_mouse(mouse:item):
    body:
        touch(mouse)
        # Touch the mouse to turn it on

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair)
        # Select the chair

        bind mouse: item where:
            is_mouse(mouse)
        # Select the mouse

        achieve_sit_on_chair(chair)
        touch_to_turn_on_mouse(mouse)
##############################
From agent.py-> find a plan in act()
walk_executor(table_107)exp(chair_103, table_107)walk_executor(chair_103)sit_executor(chair_103)walk_executor(table_107)exp(mouse_166, table_107)walk_executor(mouse_166)touch_executor(mouse_166)
##############################
From agent.py
walk_executor(table_107)
Find mat_173. Find clothes_hat_2045. Find drawing_176. Find drawing_174. Find drawing_175. Find clothes_gloves_2046. Robot is inside bedroom_67. Robot is close floor_73. Robot is close table_107. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(chair_103, table_107)
Failed to find chair_103 around table_107. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_355)exp(chair_103, table_355)walk_executor(chair_103)sit_executor(chair_103)walk_executor(table_107)exp(mouse_166, table_107)walk_executor(mouse_166)touch_executor(mouse_166)
##############################
From agent.py
walk_executor(table_355)
Find mat_401. Find remote_control_2052. Find spectacles_2082. Find clothes_jacket_2047. Find cat_2055. Find pillow_405. Find drawing_400. Find pillow_406. Find drawing_404. Find hairbrush_2002. Find vacuum_cleaner_2070. Find headset_2062. Robot is inside home_office_319. Robot is close couch_352. Robot is close mat_401. Robot is close table_355. Robot is no longer inside bedroom_67.Robot is no longer close floor_73.Robot is no longer close table_107.
##############################
From agent.py
exp(chair_103, table_355)
Failed to find chair_103 around table_355. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_104)exp(chair_103, desk_104)walk_executor(chair_103)sit_executor(chair_103)walk_executor(table_107)exp(mouse_166, table_107)walk_executor(mouse_166)touch_executor(mouse_166)
##############################
From agent.py
walk_executor(desk_104)
Find keyboard_168. Find mouse_166. Find chair_103. Robot is inside bedroom_67. Robot is close desk_104. Robot is close floor_75. Robot is no longer inside home_office_319.Robot is no longer close couch_352.Robot is no longer close mat_401.Robot is no longer close table_355.
##############################
From agent.py
exp(chair_103, desk_104)
Find chair_103. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_103)sit_executor(chair_103)walk_executor(mouse_166)touch_executor(mouse_166)
##############################
From agent.py
walk_executor(chair_103)
Robot is inside bedroom_67. Robot is close chair_103. Robot is no longer close desk_104.Robot is no longer close floor_75.
##############################
From agent.py
sit_executor(chair_103)
Robot is inside bedroom_67. Robot is close chair_103. Robot is on chair_103. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_table_107(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)

behavior touch_mouse(mouse:item):
    body:
        achieve is_on(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select the chair in the home office
        
        bind mouse: item where:
            is_mouse(mouse) and close(mouse, chair)
        # Select the mouse close to the chair

        sit_on_chair(chair)
        touch_mouse(mouse)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)

behavior touch_mouse(mouse:item):
    body:
        achieve is_on(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select the chair in the home office
        
        bind mouse: item where:
            is_mouse(mouse) and close(mouse, chair)
        # Select the mouse close to the chair

        sit_on_chair(chair)
        touch_mouse(mouse)

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the chair in front of the computer in the home office and sit on it.', '2. Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_chair_356(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==356
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_chair_in_front_of_computer(chair: item, computer: item):
    # Determine whether the chair is in front of the computer
    symbol in_front_of_computer = is_chair(chair) and close(chair, computer) and facing(chair, computer)
    return in_front_of_computer

behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)
        # Sit on the specified chair

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind chair: item where:
            is_chair(chair) and is_chair_in_front_of_computer(chair, computer)
        # Select the chair that is in front of the computer

        sit_on_chair(chair)
        # Perform the action of sitting on the chair in front of the computer

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_chair_in_front_of_computer(chair: item, computer: item):
    # Determine whether the chair is in front of the computer
    symbol in_front_of_computer = is_chair(chair) and close(chair, computer) and facing(chair, computer)
    return in_front_of_computer

behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)
        # Sit on the specified chair

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind chair: item where:
            is_chair(chair) and is_chair_in_front_of_computer(chair, computer)
        # Select the chair that is in front of the computer

        sit_on_chair(chair)
        # Perform the action of sitting on the chair in front of the computer

##############################
From evaluation.py
cdl_dataset/dataset/Write_an_email/g2.txt
Checking k1
missed actions: standup_executor(char);walk_executor(chair_356);sit_executor(chair_356);
missed action num: 3
##############################
From evaluation.py
cdl_dataset/dataset/Write_an_email/g2.txt
Checking k1
missed actions: standup_executor(char);walk_executor(chair_356);sit_executor(chair_356);
missed action num: 3
##############################
