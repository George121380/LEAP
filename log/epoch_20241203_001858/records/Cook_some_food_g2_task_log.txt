From agent.py
Reset goals: The sub-goals are: 
['Slice the chicken.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_chicken_2017_around_kitchen_counter_230(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
def is_chicken_cuttable(chicken:item):
    # Determine whether the chicken can be cut
    assert is_food_chicken(chicken) and cuttable(chicken)
    return True

behavior slice_chicken(chicken: item, knife: item, cutting_board: item):
    body:
        achieve_once inhand(knife)
        # Hold the knife in hand for slicing
        
        achieve cut(chicken)
        # Slice the chicken

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and not cut(chicken) and is_chicken_cuttable(chicken)
        # Bind the chicken item that is cuttable and not yet cut

        bind knife: item where:
            is_knife(knife)
        # Bind the knife to be used for slicing

        bind cutting_board: item where:
            is_cutting_board(cutting_board) and surfaces(cutting_board)
        # Bind a cutting board with a surface

        achieve on(chicken, cutting_board)
        # Ensure the chicken is on the cutting board

        slice_chicken(chicken, knife, cutting_board)

#goal_representation_end

##############################
