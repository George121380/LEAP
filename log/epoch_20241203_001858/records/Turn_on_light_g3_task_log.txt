From agent.py
Reset goals: The sub-goals are: 
['1. Identify all the rooms in the house.', '2. Check if at least one light is on in each room and turn on a light in rooms where all lights are off.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior identify_rooms(room:item):
    body:
        achieve visited(room)
        # Mark the room as identified by visiting

behavior __goal__():
    body:
        foreach room: item:
            if not visited(room):
                observe(room, "Identify all the rooms in the house")
                # Observe to find and identify all rooms in the house

#goal_representation_end

##############################
From agent.py->reset_goal

behavior identify_rooms(room:item):
    body:
        achieve visited(room)
        # Mark the room as identified by visiting

behavior __goal__():
    body:
        foreach room: item:
            if not visited(room):
                observe(room, "Identify all the rooms in the house")
                # Observe to find and identify all rooms in the house

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you tell me how to identify all the rooms in the house.
Answer: Need to replan: No  
Guidance: Proceed by identifying all the rooms in the house.

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you tell me how to check if at least one light is on in each room and turn on a light in rooms where all lights are off.
Answer: Need to replan: No  
Guidance: Check if at least one light is on in each room and turn on a light in rooms where all lights are off.

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Identify all the rooms in the household.', '2. Turn on a light in each room that currently has no lights on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_table_107(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_vacuum_cleaner_2070_around_washing_machine_2007(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

behavior find_pillow_182_around_couch_352(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(pillow,couch_instance)
        else:
            exp(pillow,couch_instance)
    eff:
        unknown[pillow]=False
        close[pillow,couch_instance]=True
        close[couch_instance,pillow]=True
    

behavior find_mat_237_around_bench_228(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==228
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(mat,bench_instance)
        else:
            exp(mat,bench_instance)
    eff:
        unknown[mat]=False
        close[mat,bench_instance]=True
        close[bench_instance,mat]=True
    

behavior find_mat_173_around_table_107(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

behavior find_towel_rack_33_around_bathroom_counter_41(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel_rack,bathroom_counter_instance)
        else:
            exp(towel_rack,bathroom_counter_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
behavior identify_rooms():
    body:
        foreach room: item:
            if not visited(room):
                observe(room, "Identify this room in the household")

behavior __goal__():
    body:
        identify_rooms()
        # Complete the task of identifying all rooms in the household
#goal_representation_end

##############################
From agent.py->reset_goal
behavior identify_rooms():
    body:
        foreach room: item:
            if not visited(room):
                observe(room, "Identify this room in the household")

behavior __goal__():
    body:
        identify_rooms()
        # Complete the task of identifying all rooms in the household
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Identify all the rooms in the house.', '2. Ensure there is at least one light on in each room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_vacuum_cleaner_2070_around_washing_machine_2007(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

behavior find_mat_22_around_table_107(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def has_light_on_inside(room:item):
    # Function to check if there is a light on in a specified room
    symbol light_on_inside=exists light: item : is_light(light) and is_on(light) and inside(light, room)
    return light_on_inside

behavior __goal__():
    body:
        if exists room: item : has_light_on_inside(room):
            # If we have already identified the room with a light on inside
            bind room: item where:
                has_light_on_inside(room)
            # Select the room with a light on

        else:
            foreach room: item:
                if not visited(room):
                    observe(room, "Identify all the rooms in the house")
                    # Observe to identify each room in the house

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_light_on_inside(room:item):
    # Function to check if there is a light on in a specified room
    symbol light_on_inside=exists light: item : is_light(light) and is_on(light) and inside(light, room)
    return light_on_inside

behavior __goal__():
    body:
        if exists room: item : has_light_on_inside(room):
            # If we have already identified the room with a light on inside
            bind room: item where:
                has_light_on_inside(room)
            # Select the room with a light on

        else:
            foreach room: item:
                if not visited(room):
                    observe(room, "Identify all the rooms in the house")
                    # Observe to identify each room in the house

##############################
From evaluation.py
cdl_dataset/dataset/Turn_on_light/g3.txt
Checking k1
missed actions: walk_executor(light_64);switchon_executor(light_64);walk_executor(light_169);switchon_executor(light_169);walk_executor(light_245);switchon_executor(light_245);walk_executor(light_411);switchon_executor(light_411);
missed action num: 8
##############################
From evaluation.py
cdl_dataset/dataset/Turn_on_light/g3.txt
Checking k1
missed actions: walk_executor(light_64);switchon_executor(light_64);walk_executor(light_169);switchon_executor(light_169);walk_executor(light_245);switchon_executor(light_245);walk_executor(light_411);switchon_executor(light_411);
missed action num: 8
##############################
