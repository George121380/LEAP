From agent.py
Reset goals: The sub-goals are: 
['1. Identify and locate the book you need.', '2. Place the book on the table in the home office.', '3. Turn on the light in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_136(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def has_book_inside(location:item):
    # Function to check if there is a book in the specified location
    symbol has_book=exists o: item: (is_book(o) and inside(o, location))
    return has_book

behavior __goal__():
    body:
        if exists location: item : (has_book_inside(location)):
            # Check if there is a location with a book based on the available information
            bind location: item where:
                has_book_inside(location)
            # Select a location that contains a book
            achieve close_char(char, location)
            # Move the character closer to the location with the book

        else: 
            # If no location with the book is found, initiate exploration to locate one
            foreach location: item:
                if not visited(location):
                    # Check all unvisited locations
                    observe(location, "Check if there is a book inside")
                    # Observe whether each location contains a book

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_136(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def is_needed_book(book:item):
    # Function to determine if the item is the book needed based on known criteria
    symbol needed= is_readable(book) and is_book(book)
    return needed

behavior __goal__():
    body:
        # Check if there is a book matching the needed criteria
        if exists book: item : (is_book(book) and is_needed_book(book)):
            # If book is already identified based on the available information
            bind book: item where:
                is_book(book) and is_needed_book(book)
            achieve close_char(char, book)
            # Approach the identified book

        else:
            # Inspect unvisited books to find the needed one
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book, "Check if its the book needed")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

'Function is_readable not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_136(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#goal_representation
 
def is_needed_book(book:item):
    # Function to determine if the item is the book needed based on known criteria
    symbol needed= readable(book) and is_book(book)
    return needed

behavior __goal__():
    body:
        # Check if there is a book matching the needed criteria
        if exists book: item : (is_book(book) and is_needed_book(book)):
            # If book is already identified based on the available information
            bind book: item where:
                is_book(book) and is_needed_book(book)
            achieve close_char(char, book)
            # Approach the identified book

        else:
            # Inspect unvisited books to find the needed one
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book, "Check if its the book needed")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_needed_book(book:item):
    # Function to determine if the item is the book needed based on known criteria
    symbol needed= readable(book) and is_book(book)
    return needed

behavior __goal__():
    body:
        # Check if there is a book matching the needed criteria
        if exists book: item : (is_book(book) and is_needed_book(book)):
            # If book is already identified based on the available information
            bind book: item where:
                is_book(book) and is_needed_book(book)
            achieve close_char(char, book)
            # Approach the identified book

        else:
            # Inspect unvisited books to find the needed one
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book, "Check if its the book needed")

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)
##############################
From agent.py
walk_executor(bookshelf_136)
Robot find: book_2091, Robot is close to the bookshelf_136. 
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)
##############################
From agent.py
walk_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_chair_2119_around_table_123(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) 

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the specific book with ID 2091
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office
        
        put_book_on_table(book, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) 

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the specific book with ID 2091
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office
        
        put_book_on_table(book, table)

##############################
From agent.py-> find a plan in act()
grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
grab_executor(book_2091)
Robot find: Robot is close to the bookshelf_136. Robot is close to the book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the book_2091. Robot is close to the table_193. 
##############################
From agent.py
put_executor(book_2091, table_193)
Robot find: Robot is close to the book_2091. Robot is close to the table_193. book_2091 is on table_193. table_193 is close book_2091. book_2091 is close table_193. book_2091 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation

behavior turn_on_light(light:item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind light: item where:
            is_light(light) and inside(light, home_office)
        turn_on_light(light)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior turn_on_light(light:item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind light: item where:
            is_light(light) and inside(light, home_office)
        turn_on_light(light)

##############################
From agent.py-> find a plan in act()
walk_executor(light_217)switchon_executor(light_217)
##############################
From agent.py
walk_executor(light_217)
Robot find: Robot is close to the light_217. 
##############################
From agent.py
switchon_executor(light_217)
Robot find: Robot is close to the light_217. light_217 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the table in home office. Then turn on the light in the home office.
Action History:
['walk_executor(bookshelf_136)', 'walk_executor(book_2091)', 'grab_executor(book_2091)', 'walk_executor(table_193)', 'put_executor(book_2091, table_193)', 'walk_executor(light_217)', 'switchon_executor(light_217)']
Time info:
Time consume: 97 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 1
action_num: 7

Task complete rate:
1
Scene_id: 2
##############################
