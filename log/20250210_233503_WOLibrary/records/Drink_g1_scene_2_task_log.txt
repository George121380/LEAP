From agent.py
Reset goals: The sub-goals are: 
['Get a cup and fill it with water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_drawing_118_around_orchid_200(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind orchid_instance:item where:
            is_orchid(orchid_instance) and id[orchid_instance]==200
        achieve close_char(char,orchid_instance)
        if can_open(orchid_instance):
            achieve_once open(orchid_instance)
            exp(drawing,orchid_instance)
        else:
            exp(drawing,orchid_instance)
    eff:
        unknown[drawing]=False
        close[drawing,orchid_instance]=True
        close[orchid_instance,drawing]=True
    

behavior find_cup_2087_around_kitchen_counter_129(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior get_and_fill_cup(cup:item, water_source:item):
    body:
        achieve_once inhand(cup)
        # Hold the cup in your hand
        achieve close_char(char, water_source)
        # Move close to the water source
        achieve has_water(cup)
        # Fill the cup with water from the water source

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and grabbable(cup)
        # Select a grabbable cup
        bind water_source: item where:
            is_sink(water_source) or is_faucet(water_source)
        # Select a water source that can be a sink or faucet
        get_and_fill_cup(cup, water_source)
        # Execute the behavior to get and fill the cup with water


#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior get_and_fill_cup(cup:item, water_source:item):
    body:
        achieve_once inhand(cup)
        # Hold the cup in your hand
        achieve close_char(char, water_source)
        # Move close to the water source
        achieve has_water(cup)
        # Fill the cup with water from the water source

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and grabbable(cup)
        # Select a grabbable cup
        bind water_source: item where:
            is_sink(water_source) or is_faucet(water_source)
        # Select a water source that can be a sink or faucet
        get_and_fill_cup(cup, water_source)
        # Execute the behavior to get and fill the cup with water


##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(cup_2087, kitchen_counter_129)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_129)
Fail to find cup_2087 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(cup_2087, kitchen_counter_128)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_128)
Fail to find cup_2087 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)exp(cup_2087, sink_133)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
exp(cup_2087, sink_133)
Fail to find cup_2087 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(cup_2087, cupboard_130)
Fail to find cup_2087 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(cup_2087, cupboard_131)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(cup_2087, cupboard_131)
Fail to find cup_2087 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_301)exp(cup_2087, wallshelf_301)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(wallshelf_301)
Robot find: towel_rack_299, towel_rack_300, drawing_296, Robot is close to the wallshelf_301. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2087 ?
Answer: Go to dining_room_1, and locate table_123. You will find cup_2087 resting on table_123. The cup is near the center of the table, easily identifiable due to its position on top of the surface.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_1, and locate table_123. You will find cup_2087 resting on table_123. The cup is near the center of the table, easily identifiable due to its position on top of the surface.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for cup_2087 around kitchen_counter_129.
Action 3: Walk to kitchen_counter_128.
Action 4: look for cup_2087 around kitchen_counter_128.
Action 5: Walk to sink_133.
Action 6: look for cup_2087 around sink_133.
Action 7: Walk to cupboard_130.
Action 8: look for cup_2087 around cupboard_130.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for cup_2087 around cupboard_131.
Action 12: Walk to wallshelf_301.

##############################
From agent.py
exp(cup_2087, wallshelf_301)
Fail to find cup_2087 around wallshelf_301. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(cup_2087, table_123)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
grab_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You have successfully found and grabbed cup_2087 and moved close to the faucet_134. However, you need to turn on the faucet to fill the cup with water and then turn it off after filling.
##############################
From agent.py
Human Instruction: You have successfully found and grabbed cup_2087 and moved close to the faucet_134. However, you need to turn on the faucet to fill the cup with water and then turn it off after filling.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for cup_2087 around kitchen_counter_129.
Action 3: Walk to kitchen_counter_128.
Action 4: look for cup_2087 around kitchen_counter_128.
Action 5: Walk to sink_133.
Action 6: look for cup_2087 around sink_133.
Action 7: Walk to cupboard_130.
Action 8: look for cup_2087 around cupboard_130.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for cup_2087 around cupboard_131.
Action 12: Walk to wallshelf_301.
Action 13: look for cup_2087 around wallshelf_301.
Action 14: Walk to table_123.
Action 15: look for cup_2087 around table_123.
Action 16: Walk to cup_2087.
Action 17: Grab cup_2087.
Action 18: Walk to faucet_134.
Action 19: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_crayon_2020_around_drawing_296(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(crayon,drawing_instance)
        else:
            exp(crayon,drawing_instance)
    eff:
        unknown[crayon]=False
        close[crayon,drawing_instance]=True
        close[drawing_instance,crayon]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once has_water(cup) # Fill the cup with water

behavior close_faucet(faucet:item):
    body:
        achieve_once is_off(faucet) # Ensure the faucet is turned off

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and inhand(cup) # Select the cup that is in hand
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, cup) # Select the faucet close to the cup
        fill_cup_with_water(cup, faucet)
        close_faucet(faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_crayon_2020_around_bookshelf_372(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(crayon,bookshelf_instance)
        else:
            exp(crayon,bookshelf_instance)
    eff:
        unknown[crayon]=False
        close[crayon,bookshelf_instance]=True
        close[bookshelf_instance,crayon]=True
    

behavior find_cup_2006_around_bowl_2095(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2095
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(cup,bowl_instance)
        else:
            exp(cup,bowl_instance)
    eff:
        unknown[cup]=False
        close[cup,bowl_instance]=True
        close[bowl_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the cup with water
        achieve has_water(cup)
        # Ensure the cup is filled with water
        achieve_once is_off(faucet)
        # Turn off the faucet after filling

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select cup with ID 2087

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        fill_cup_with_water(cup, faucet)
        # Execute the behavior to fill the cup with water using the faucet

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the cup with water
        achieve has_water(cup)
        # Ensure the cup is filled with water
        achieve_once is_off(faucet)
        # Turn off the faucet after filling

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select cup with ID 2087

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        fill_cup_with_water(cup, faucet)
        # Execute the behavior to fill the cup with water using the faucet

##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to switch on the faucet with cup_2087 positioned to collect the water, ensuring that the cup is actually filled with water before switching off the faucet again.
##############################
From agent.py
Human Instruction: You need to switch on the faucet with cup_2087 positioned to collect the water, ensuring that the cup is actually filled with water before switching off the faucet again.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for cup_2087 around kitchen_counter_129.
Action 3: Walk to kitchen_counter_128.
Action 4: look for cup_2087 around kitchen_counter_128.
Action 5: Walk to sink_133.
Action 6: look for cup_2087 around sink_133.
Action 7: Walk to cupboard_130.
Action 8: look for cup_2087 around cupboard_130.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for cup_2087 around cupboard_131.
Action 12: Walk to wallshelf_301.
Action 13: look for cup_2087 around wallshelf_301.
Action 14: Walk to table_123.
Action 15: look for cup_2087 around table_123.
Action 16: Walk to cup_2087.
Action 17: Grab cup_2087.
Action 18: Walk to faucet_134.
Action 19: Switch off faucet_134.
Action 20: Switch on faucet_134.
Action 21: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_inside(cup:item):
    # Function to check if the the cup has water inside
    symbol has_water_status=has_water(cup)
    return has_water_status 

behavior fill_with_water(cup:item, faucet:item):
    body:
        achieve_once is_on(faucet) # Turn the faucet on temporarily
        achieve has_water(cup) # Fill the cup with water from the faucet
        achieve_once is_off(faucet) # Turn off the faucet temporarily

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select cup with ID 2087

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        if not has_water_inside(cup):
            fill_with_water(cup, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_crayon_2020_around_trashcan_360(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==360
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(crayon,trashcan_instance)
        else:
            exp(crayon,trashcan_instance)
    eff:
        unknown[crayon]=False
        close[crayon,trashcan_instance]=True
        close[trashcan_instance,crayon]=True
    

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Ensure the cup is close to the faucet
        bind faucet: item where:
            is_faucet(faucet)
        # Turn on the faucet to fill the cup with water
        achieve_once has_water(cup)
        # Ensure the faucet is turned off after filling the cup
        achieve_once is_off(faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once has_water(cup)
        achieve is_off(faucet)
        
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select cup with ID 2087
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134
        achieve_once inhand(cup)
        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "get a cup and fill it with water." ?
Answer: Grab a cup and get close to a faucet. Then turn on the faucet to fill the cup with water.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_powersocket_48(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==48
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(cup,powersocket_instance)
        else:
            exp(cup,powersocket_instance)
    eff:
        unknown[cup]=False
        close[cup,powersocket_instance]=True
        close[powersocket_instance,cup]=True
    

behavior find_crayon_2030_around_bowl_2095(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2095
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(crayon,bowl_instance)
        else:
            exp(crayon,bowl_instance)
    eff:
        unknown[crayon]=False
        close[crayon,bowl_instance]=True
        close[bowl_instance,crayon]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select the faucet with ID 134

        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_crayon_2020_around_bowl_2095(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2095
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(crayon,bowl_instance)
        else:
            exp(crayon,bowl_instance)
    eff:
        unknown[crayon]=False
        close[crayon,bowl_instance]=True
        close[bowl_instance,crayon]=True
    

behavior find_cup_2087_around_powersocket_48(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==48
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(cup,powersocket_instance)
        else:
            exp(cup,powersocket_instance)
    eff:
        unknown[cup]=False
        close[cup,powersocket_instance]=True
        close[powersocket_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) # Approach the faucet
        achieve_once is_on(faucet)
        # Ensure the faucet is switched on
        achieve has_water(cup)
        # Make sure the cup is filled with water
        achieve_once is_off(faucet)
        # Turn off the faucet once the cup is filled

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select cup with ID 2087
        
        bind faucet: item where:
            is_faucet(faucet)
        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) # Approach the faucet
        achieve_once is_on(faucet)
        # Ensure the faucet is switched on
        achieve has_water(cup)
        # Make sure the cup is filled with water
        achieve_once is_off(faucet)
        # Turn off the faucet once the cup is filled

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select cup with ID 2087
        
        bind faucet: item where:
            is_faucet(faucet)
        fill_cup_with_water(cup, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: towel_rack_298, Robot is close to the cup_2087. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the cup_2087. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that cup_2087 is actually filled with water. You have already positioned the cup near faucet_134 and turned the faucet on, but the information does not confirm that the cup was filled before the faucet was turned off again. Please make sure the cup is filled with water at faucet_134.
##############################
Task Summary:
Task Goal:
Get a cup of water.
Action History:
['walk_executor(kitchen_counter_129)', 'walk_executor(kitchen_counter_128)', 'walk_executor(sink_133)', 'walk_executor(cupboard_130)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(wallshelf_301)', 'walk_executor(table_123)', 'walk_executor(cup_2087)', 'grab_executor(cup_2087)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)']
Time info:
Time consume: 195 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 0
goal generate times: 8
goal correct times: 0
action_num: 16

Task complete rate:
1
Scene_id: 2
##############################
