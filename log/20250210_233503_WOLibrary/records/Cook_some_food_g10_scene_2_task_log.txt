From agent.py
Reset goals: The sub-goals are: 
['1. Find and clean the chicken.', '2. Boil the noodles and chicken together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_kitchen_counter_128(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cleaning_solution,kitchen_counter_instance)
        else:
            exp(cleaning_solution,kitchen_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cleaning_solution]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_chicken(chicken:item):
    body:
        wash(chicken)
        # Wash the chicken to ensure its clean

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item
        clean_chicken(chicken)
        # Clean the chicken as the current subtask goal

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior clean_chicken(chicken:item):
    body:
        wash(chicken)
        # Wash the chicken to ensure its clean

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item
        clean_chicken(chicken)
        # Clean the chicken as the current subtask goal

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
wash_executor(food_chicken_2050)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: pot_54, Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_crayon_2030_around_wallshelf_301(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(crayon,wallshelf_instance)
        else:
            exp(crayon,wallshelf_instance)
    eff:
        unknown[crayon]=False
        close[crayon,wallshelf_instance]=True
        close[wallshelf_instance,crayon]=True
    

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and clean(chicken)
        # Select the clean chicken

        bind noodles: item where:
            is_dry_pasta(noodles)
        # Select dry noodles

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select pot with water

        achieve_once inside(chicken, pot)
        # Put the chicken inside the pot

        achieve_once inside(noodles, pot)
        # Put the noodles inside the pot

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_mouse_2112_around_computer_2110(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_noodles_with_chicken(noodles:item, chicken:item, pot:item):
    body:
        achieve_once inside(noodles, pot)
        # Place the noodles inside the pot
        achieve_once inside(chicken, pot)
        # Place the chicken inside the pot
        achieve has_water(pot)
        # Ensure the pot has water

behavior switch_on_stove(stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind noodles: item where:
            is_dry_pasta(noodles)
        # Select noodles
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        boil_noodles_with_chicken(noodles, chicken, pot)
        switch_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_noodles_with_chicken(noodles:item, chicken:item, pot:item):
    body:
        achieve_once inside(noodles, pot)
        # Place the noodles inside the pot
        achieve_once inside(chicken, pot)
        # Place the chicken inside the pot
        achieve has_water(pot)
        # Ensure the pot has water

behavior switch_on_stove(stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind noodles: item where:
            is_dry_pasta(noodles)
        # Select noodles
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        boil_noodles_with_chicken(noodles, chicken, pot)
        switch_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)putin_executor(food_chicken_2050, pot_54)grab_executor(pot_54)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
walk_executor(dry_pasta_2073)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the dry_pasta_2073. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(dry_pasta_2073)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the dry_pasta_2073. Robot is close to the fridge_140. Grabbing dry_pasta_2073 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the dry_pasta_2073. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(dry_pasta_2073, pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the dry_pasta_2073. Robot is close to the oven_141. Robot is close to the pot_54. dry_pasta_2073 is inside pot_54. dry_pasta_2073 is close pot_54. pot_54 is close dry_pasta_2073. dry_pasta_2073 released by left hand. 
##############################
From agent.py
putin_executor(food_chicken_2050, pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the dry_pasta_2073. Robot is close to the oven_141. Robot is close to the pot_54. food_chicken_2050 is close pot_54. pot_54 is close food_chicken_2050. food_chicken_2050 is inside pot_54. food_chicken_2050 released by right hand. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the dry_pasta_2073. Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot needs to have water added to it before boiling the noodles and chicken. Add water to the pot to complete the sub-task.
##############################
From agent.py
Human Instruction: The pot needs to have water added to it before boiling the noodles and chicken. Add water to the pot to complete the sub-task.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_chicken_2050 around fridge_140.
Action 5: Grab food_chicken_2050.
Action 6: Wash food_chicken_2050.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to pot_54.
Action 10: Open pot_54.
Action 11: Walk to dry_pasta_2073.
Action 12: Grab dry_pasta_2073.
Action 13: Walk to pot_54.
Action 14: Put dry_pasta_2073 into pot_54.
Action 15: Put food_chicken_2050 into pot_54.
Action 16: Grab pot_54.
Action 17: Walk to faucet_308.
Action 18: Switch off faucet_308.
Action 19: Walk to stove_2090.
Action 20: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coin_2004_around_kitchen_counter_128(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coin,kitchen_counter_instance)
        else:
            exp(coin,kitchen_counter_instance)
    eff:
        unknown[coin]=False
        close[coin,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coin]=True
    

behavior find_mouse_380_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_to_pot(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_contents(pot:item, stove:item):
    body:
        achieve_once inside(dry_pasta, pot) # Ensure the pasta is inside the pot
        achieve_once inside(food_chicken, pot) # Ensure the chicken is inside the pot
        achieve_once is_on(stove) # Turn on the stove to boil the contents

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and open(pot)
        # Select an open pot
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and inside(dry_pasta, pot)
        # Select dry pasta that is already in the pot
        bind food_chicken: item where:
            is_food_chicken(food_chicken) and inside(food_chicken, pot)
        # Select the chicken already in the pot
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select a stove that is on
        add_water_to_pot(pot, faucet)
        boil_contents(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dry_pasta; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior add_water_to_pot(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior boil_contents(pot:item, stove:item, dry_pasta:item, food_chicken:item):
    body:
        achieve_once inside(dry_pasta, pot)
        achieve_once inside(food_chicken, pot)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and open(pot)
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and inside(dry_pasta, pot)
        bind food_chicken: item where:
            is_food_chicken(food_chicken) and inside(food_chicken, pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        
        add_water_to_pot(pot, faucet)
        boil_contents(pot, stove, dry_pasta, food_chicken)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_water_to_pot(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior boil_contents(pot:item, stove:item, dry_pasta:item, food_chicken:item):
    body:
        achieve_once inside(dry_pasta, pot)
        achieve_once inside(food_chicken, pot)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and open(pot)
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and inside(dry_pasta, pot)
        bind food_chicken: item where:
            is_food_chicken(food_chicken) and inside(food_chicken, pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        
        add_water_to_pot(pot, faucet)
        boil_contents(pot, stove, dry_pasta, food_chicken)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Add water to the pot before proceeding to boil the noodles and chicken.
##############################
From agent.py
Human Instruction: Add water to the pot before proceeding to boil the noodles and chicken.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_chicken_2050 around fridge_140.
Action 5: Grab food_chicken_2050.
Action 6: Wash food_chicken_2050.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to pot_54.
Action 10: Open pot_54.
Action 11: Walk to dry_pasta_2073.
Action 12: Grab dry_pasta_2073.
Action 13: Walk to pot_54.
Action 14: Put dry_pasta_2073 into pot_54.
Action 15: Put food_chicken_2050 into pot_54.
Action 16: Grab pot_54.
Action 17: Walk to faucet_308.
Action 18: Switch off faucet_308.
Action 19: Walk to stove_2090.
Action 20: Switch on stove_2090.
Action 21: Walk to faucet_134.
Action 22: Switch on faucet_134.
Action 23: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_wallshelf_191(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(coffee_filter,wallshelf_instance)
        else:
            exp(coffee_filter,wallshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,wallshelf_instance]=True
        close[wallshelf_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_to_pot(faucet:item, pot:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_items(pot:item, stove:item):
    body:
        achieve_once inside(dry_pasta_2073, pot)
        achieve_once inside(food_chicken_2050, pot)
        achieve_once is_on(stove)
        # Boil the items in the pot on the stove

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090

        add_water_to_pot(faucet, pot)
        boil_items(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dry_pasta_2073; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

def is_dry_pasta(dry_pasta:item):
    # Function to check if an item is dry pasta
    return id[dry_pasta] == 2073
    
behavior add_water_to_pot(faucet:item, pot:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_items(dry_pasta:item, chicken:item, pot:item, stove:item):
    body:
        achieve_once inside(dry_pasta, pot)
        achieve_once inside(chicken, pot)
        achieve_once is_on(stove)
        # Boil the items in the pot on the stove

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090
        
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select dry pasta with ID 2073

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2050
        # Select chicken with ID 2050

        add_water_to_pot(faucet, pot)
        boil_items(dry_pasta, chicken, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior add_water_to_pot(pot:item, faucet:item):
    body:
        achieve_once has_water(pot) # Fill the pot with water

behavior boil_items_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the contents

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot) # Select a pot that can be filled with water
        bind stove: item where:
            is_stove(stove) # Select the stove
        bind faucet: item where:
            is_faucet(faucet) # Select the faucet to fill the pot with water
        add_water_to_pot(pot, faucet)
        boil_items_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior add_water_to_pot(pot:item, faucet:item):
    body:
        achieve_once has_water(pot) # Fill the pot with water

behavior boil_items_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the contents

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot) # Select a pot that can be filled with water
        bind stove: item where:
            is_stove(stove) # Select the stove
        bind faucet: item where:
            is_faucet(faucet) # Select the faucet to fill the pot with water
        add_water_to_pot(pot, faucet)
        boil_items_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure the pot has water. The actions involve adding water to the pot, but there is no explicit indication that the pot was filled with water before placing it on the stove. Make sure you add water to the pot using an appropriate faucet before proceeding to boil the contents.
##############################
Task Summary:
Task Goal:
Boil some noodles with chicken.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_chicken_2050)', 'wash_executor(food_chicken_2050)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'walk_executor(dry_pasta_2073)', 'grab_executor(dry_pasta_2073)', 'walk_executor(pot_54)', 'putin_executor(dry_pasta_2073, pot_54)', 'putin_executor(food_chicken_2050, pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)']
Time info:
Time consume: 161 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 1
action_num: 24

Task complete rate:
Keystate: k1 - Requires: 17 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
