From agent.py
Reset goals: The sub-goals are: 
['Cook the bacon in a pan or oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_oven_295(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

behavior find_food_bacon_2010_around_fridge_289(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

#exp_behavior_end

#goal_representation
 
def check_cooking_device(pan: item, oven: item):
    # Function to check if a pan is on the stove or an oven is available
    symbol stove_ready = is_fryingpan(pan) and close_char(char, pan)
    symbol oven_ready = is_oven(oven) and close_char(char, oven)
    return stove_ready, oven_ready

behavior cook_bacon(bacon: item, pan: item, oven: item):
    body:
        stove_ready, oven_ready = check_cooking_device(pan, oven)
        
        if stove_ready:
            achieve inside(bacon, pan)
            bind stove: item where:
                is_stove(stove) and close(pan, stove)
            achieve is_on(stove)
        elif oven_ready:
            achieve inside(bacon, oven)
            achieve is_on(oven)

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        bind pan: item where:
            is_fryingpan(pan)
        bind oven: item where:
            is_oven(oven)
        
        cook_bacon(bacon, pan, oven)


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COMMA', ',') at line 5843, column 23.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_food_bacon_2010_around_fridge_289(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

#goal_representation
 
def check_cooking_device(pan: item, oven: item):
    # Function to check if a pan is on the stove or an oven is available
    symbol stove_ready = is_fryingpan(pan) and close_char(char, pan)
    symbol oven_ready = is_oven(oven) and close_char(char, oven)
    return stove_ready, oven_ready

behavior cook_bacon(bacon: item, pan: item, oven: item):
    body:
        stove_ready, oven_ready = check_cooking_device(pan, oven)
        
        if stove_ready:
            achieve inside(bacon, pan)
            bind stove: item where:
                is_stove(stove) and close(pan, stove)
            achieve is_on(stove)
        elif oven_ready:
            achieve inside(bacon, oven)
            achieve is_on(oven)

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        bind pan: item where:
            is_fryingpan(pan)
        bind oven: item where:
            is_oven(oven)
        
        cook_bacon(bacon, pan, oven)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COMMA', ',') at line 5843, column 23.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fryingpan_2083_around_oven_295(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

behavior find_food_bacon_2010_around_fridge_289(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

#goal_representation
 
def check_cooking_device(pan: item, oven: item):
    # Function to check if a pan is on the stove or an oven is available
    symbol stove_ready = is_fryingpan(pan) and close_char(char, pan)
    symbol oven_ready = is_oven(oven) and close_char(char, oven)
    return stove_ready, oven_ready

behavior cook_bacon(bacon: item, pan: item, oven: item):
    body:
        stove_ready, oven_ready = check_cooking_device(pan, oven)
        
        if stove_ready:
            achieve inside(bacon, pan)
            bind stove: item where:
                is_stove(stove) and close(pan, stove)
            achieve is_on(stove)
        elif oven_ready:
            achieve inside(bacon, oven)
            achieve is_on(oven)

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        bind pan: item where:
            is_fryingpan(pan)
        bind oven: item where:
            is_oven(oven)
        
        cook_bacon(bacon, pan, oven)

#goal_representation_end

##############################
