From agent.py
Reset goals: The sub-goals are: 
['1. Find a pot and fill it with water.', '2. Place the pot on the stove and turn on the heat.', '3. Add the vegetables to the pot and boil them.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_fridge_140(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fruit,fridge_instance)
        else:
            exp(food_fruit,fridge_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,fridge_instance]=True
        close[fridge_instance,food_fruit]=True
    

behavior find_pot_2093_around_kitchen_counter_128(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def in_kitchen(pot:item):
    # Function to check if the pot is in the kitchen
    symbol in_kitchen=exists location: item : is_kitchen(location) and inside(pot, location)
    return in_kitchen

behavior find_and_fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, pot)
        achieve_once inhand(pot)
        achieve close(faucet, pot)
        water(pot)
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and grabbable(pot) and in_kitchen(pot)
        bind faucet: item where:
            is_faucet(faucet)
        find_and_fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_apple_2043_around_fridge_140(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

behavior find_pot_2093_around_kitchen_counter_128(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#goal_representation
 
def in_kitchen(pot:item):
    # Function to check if the pot is in the kitchen
    symbol in_kitchen=exists location: item : is_kitchen(location) and inside(pot, location)
    return in_kitchen

behavior find_and_fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, pot)
        achieve_once inhand(pot)
        achieve close(faucet, pot)
        is_food_water(pot)
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and grabbable(pot) and in_kitchen(pot)
        bind faucet: item where:
            is_faucet(faucet)
        find_and_fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_food_water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2093_around_kitchen_counter_128(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_apple_2043_around_fridge_140(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

#goal_representation
 
def in_kitchen(pot:item):
    # Function to check if the pot is in the kitchen
    symbol in_kitchen=exists location: item : is_kitchen(location) and inside(pot, location)
    return in_kitchen

behavior find_and_fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, pot)
        achieve_once inhand(pot)
        achieve close(faucet, pot)
        is_food_water(pot)
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and grabbable(pot) and in_kitchen(pot)
        bind faucet: item where:
            is_faucet(faucet)
        find_and_fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
