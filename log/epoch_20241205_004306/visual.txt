############################################################
When the sub-task is: 1. Put the cleaning solution in the dishwasher.
A successful representation:
 
behavior put_cleaning_solution(dishwasher: item, cleaning_solution: item):
    body:
        achieve inside(cleaning_solution, dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        bind cleaning_solution: item where:
            is_cleaning_solution(cleaning_solution)
        put_cleaning_solution(dishwasher, cleaning_solution)

############################################################
When the sub-task is: 2. Wash the bowls and plates with the dishwasher.
A successful representation:
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher
        foreach o: item:
        # Load all plates and bowls into the dishwasher
            if is_plate(o) or is_bowl(o):
                load_dishwasher(o, dishwasher)
        start_dishwasher(dishwasher) # Start the dishwasher

############################################################
When the sub-task is: 1. Locate the book.
A successful representation:
 
def is_book_found(book:item):
    symbol book_found=exists b: item : is_book(b) and visited(b)
    return book_found

behavior __goal__():
    body:
        if exists book: item : is_book(book) and visited(book):
            # If the book has already been located, no need to search further
            bind book: item where:
                is_book(book) and visited(book)
            achieve close_char(char, book)
            # Move the character closer to the located book

        else:
            # Check all items in the scene categorized as books for possible missing visits
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book, "Check if this is the book youre looking for")
                    # Inspect whether the item is indeed the book to be located

############################################################
When the sub-task is: 2. Put the book on the coffee table in the home office.
A successful representation:
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select an item that is a home office
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table in the home office with a surface
        bind book: item where:
            is_book(book) and id[book] == 2136
        # Select book with ID 2136
        put_book_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: Put all the bowls and plates into the dishwasher to wash them.
A successful representation:
 
def contains_bowls_or_plates(dishwasher:item):
    # Function to check if there are bowls or plates inside a specified dishwasher
    symbol contains_items=exists o: item : (is_plate(o) or is_bowl(o)) and inside(o, dishwasher)
    return contains_items

behavior load_items_into_dishwasher(dishwasher:item):
    body:
        foreach o: item:
            # Load all bowls and plates into the dishwasher
            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):
                achieve inside(o, dishwasher)

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher]==129
        # Select dishwasher with ID 129

        if not contains_bowls_or_plates(dishwasher):
            observe(dishwasher, "Check is there any bowl or plate in the dishwasher")

        load_items_into_dishwasher(dishwasher)
        start_dishwasher(dishwasher) # Start the dishwasher

############################################################
When the sub-task is: 1. Find the table in the dining room and put the milk and egg on it.
A successful representation:
 
behavior place_on_table(milk:item, egg:item, table:item):
    body:
        achieve on(milk, table)
        achieve on(egg, table)

def find_table_in_dining_room(table:item):
    symbol is_in_dining=exists room: item : is_dining_room(room) and inside(table, room)
    return is_in_dining

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind egg: item where:
            is_food_egg(egg)
        bind table: item where:
            is_table(table) and find_table_in_dining_room(table)
        place_on_table(milk, egg, table)

############################################################
When the sub-task is: 2. Throw all the items in the fridge into the trashcan.
A successful representation:
 
def has_items_in_fridge(fridge: item):
    # Function to check if there are items in the fridge
    symbol has_items=exists o: item : inside(o, fridge)
    return has_items

behavior throw_items_in_trash(fridge: item, trashcan: item):
    body:
        foreach item: item:
            # Throw all items from the fridge into the trashcan
            if inside(item, fridge):
                achieve inside(item, trashcan)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Select the fridge with ID 126

        bind trashcan: item where:
            is_trashcan(trashcan) and id[trashcan] == 99
        # Select the trashcan with ID 99

        if not has_items_in_fridge(fridge):
            observe(fridge, "Check is there any item in the fridge")

        throw_items_in_trash(fridge, trashcan)

############################################################
When the sub-task is: 3. Put the milk and eggs back in the fridge.
A successful representation:
 
behavior put_in_fridge(item: item, fridge: item):
    body:
        achieve inside(item, fridge)
        # Place the item inside the fridge

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114
        # Select table with ID 114
        
        bind milk: item where:
            is_milk(milk) and on(milk, table)
        # Select the milk on the table
        
        bind egg: item where:
            is_food_egg(egg) and on(egg, table)
        # Select the egg on the table
        
        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        put_in_fridge(milk, fridge)
        put_in_fridge(egg, fridge)

############################################################
When the sub-task is: 1. Find the basket with clothes in it.
A successful representation:
 
def find_basket_with_clothes(basket:item):
    symbol has_clothes=exists o: item : is_clothes(o) and inside(o, basket)
    return has_clothes

behavior __goal__():
    body:
        if exists basket: item : is_basket_for_clothes(basket) and find_basket_with_clothes(basket):
            # If a basket with clothes is found, proceed to approach it
            bind basket: item where:
                is_basket_for_clothes(basket) and find_basket_with_clothes(basket)
            achieve close_char(char, basket)

        else:
            # If basket with clothes is not found, check all unvisited baskets
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket, "Check if there are clothes in the basket")

############################################################
When the sub-task is: 2. Add the clothes and soap to the washing machine.
A successful representation:
 
behavior add_clothes_and_soap_to_washing_machine(clothes:item, washing_machine:item, soap:item):
    body:
        achieve inside(clothes, washing_machine)
        achieve inside(soap, washing_machine)

def has_clothes_in_basket(basket:item):
    symbol has_clothes=exists o: item : is_clothes(o) and inside(o, basket)
    return has_clothes

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket) and id[basket] == 2078
        # Select basket with ID 2078

        if not has_clothes_in_basket(basket):
            observe(basket, "Check if there are clothes in the basket")

        bind washing_machine: item where:
            is_washing_machine(washing_machine) and id[washing_machine]==2079
        # Select washing machine with ID 2079

        foreach clothes: item:
            if is_clothes(clothes) and inside(clothes, basket):
                bind soap: item where:
                    is_soap(soap)
                add_clothes_and_soap_to_washing_machine(clothes, washing_machine, soap)

############################################################
When the sub-task is: 3. Run the washing machine.
A successful representation:
 
behavior run_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine) # Close the washing machine door
        achieve plugged(washing_machine) # Ensure the washing machine is plugged in
        achieve is_on(washing_machine) # Turn on the washing machine

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine) and id[washing_machine]==2079
        # Select the washing machine with ID 2079
       
        run_washing_machine(washing_machine)

############################################################
When the sub-task is: 1. Find the book and place it on the coffee table in the home office.
A successful representation:
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table in the home office
        bind book: item where:
            is_book(book)
        # Select the book
        place_book_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: 2. Open the window in the home office.
A successful representation:

behavior open_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select an item that is a home office
        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select a window inside the home office
        open_window(window)

############################################################
When the sub-task is: Turn on the lights in the bathroom.
A successful representation:
 
behavior turn_on_light(light:item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom
        
        bind light: item where:
            is_light(light) and inside(light, bathroom)
        # Select the light inside the bathroom
        
        turn_on_light(light)

############################################################
When the sub-task is: Make a cup of coffee using the coffee maker.
A successful representation:
 
behavior make_coffee(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup)
        make_coffee(cup, coffee_maker)

############################################################
When the sub-task is: 1. Find a cup suitable for microwaving and fill it with milk.  
A successful representation:
behavior find_cup_for_milk(cup:item):
    body:
        if not visited(cup):
            observe(cup, "Check if this cup is suitable for microwaving and if it is clean")

behavior fill_cup_with_milk(cup:item, milk:item):
    body:
        achieve inside(milk, cup)

behavior __goal__():
    body:
        foreach cup: item:
            if is_cup(cup) and not visited(cup):
                find_cup_for_milk(cup)

        bind milk: item where:
            is_milk(milk)

        bind suitable_cup: item where:
            is_cup(suitable_cup) and visited(suitable_cup) 

        fill_cup_with_milk(suitable_cup, milk)
############################################################
When the sub-task is: 2. Heat the cup of milk in the microwave.
A successful representation:
 
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave)
        # Place the cup inside the microwave
        achieve is_on(microwave)
        # Turn on the microwave

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave) and id[microwave] == 135
        # Select the microwave with ID 135

        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select the cup with ID 2132

        heat_milk_in_microwave(cup, microwave)

############################################################
When the sub-task is: 1. Identify all the rooms in the house.
A successful representation:
 
def identify_rooms(room: item):
    symbol is_a_room = exists room_type: item: (is_bedroom(room_type) or is_bathroom(room_type) or is_dining_room(room_type) or is_home_office(room_type)) and inside(room, room_type)
    return is_a_room

behavior observe_unvisited_rooms():
    body:
        foreach room: item:
            if (is_bedroom(room) or is_bathroom(room) or is_dining_room(room) or is_home_office(room)) and not visited(room):
                observe(room, "Check if this is a room")

behavior __goal__():
    body:
        if exists room: item: (is_bedroom(room) or is_bathroom(room) or is_dining_room(room) or is_home_office(room)) and not visited(room):
            # Check all rooms that havent been visited
            foreach room: item:
                if (is_bedroom(room) or is_bathroom(room) or is_dining_room(room) or is_home_office(room)) and not visited(room):
                    observe(room, "Check if this is a room")
        else:
            observe_unvisited_rooms()

############################################################
When the sub-task is: 2. Turn on at least one light in each room.
A successful representation:
 
def has_unlit_light_in_room(room: item):
    # Function to check if there is a light in a specified room that is off
    symbol unlit_light=exists light: item : is_light(light) and inside(light, room) and is_off(light)
    return unlit_light

behavior turn_on_light_in_room(room: item):
    body:
        foreach light: item:
            if is_light(light) and inside(light, room) and is_off(light):
                achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if (is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room)) and has_unlit_light_in_room(room):
                turn_on_light_in_room(room)

############################################################
When the sub-task is: Open the windows in the bathroom.
A successful representation:
 
behavior open_window(window: item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Identify the bathroom
        
        bind window: item where:
            is_window(window) and inside(window, bathroom)
        # Identify the window inside the bathroom
        
        open_window(window)

############################################################
When the sub-task is: Turn on the lights in the bedroom, then turn on the lights in the bathroom.
A successful representation:
 
behavior turn_on_light(light:item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind bedroom_light: item where:
            is_light(bedroom_light) and inside(bedroom_light, bedroom)
        # Select the light inside the bedroom

        bind bathroom_light: item where:
            is_light(bathroom_light) and inside(bathroom_light, bathroom)
        # Select the light inside the bathroom

        turn_on_light(bedroom_light)
        turn_on_light(bathroom_light)

############################################################
When the sub-task is: 1. Find your spectacles and put them on the coffee table in the home office.
A successful representation:
 
behavior find_and_place_spectacles(spectacles: item, coffee_table: item):
    body:
        achieve on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)
        # Identify the coffee table inside the home office
        
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        find_and_place_spectacles(spectacles, coffee_table)

############################################################
When the sub-task is: 2. Find the book and put it on the coffee table in the home office.
A successful representation:
 
behavior find_book(book: item):
    body:
        if not visited(book): 
            observe(book, "Check if this is the book to be found")
            
behavior place_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        find_book(book)
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table in the home office

        place_book_on_coffee_table(book, coffee_table)

