[
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Put the cleaning solution in the dishwasher.",
        "cdl": " \nbehavior put_cleaning_solution(dishwasher: item, cleaning_solution: item):\n    body:\n        achieve inside(cleaning_solution, dishwasher)\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        put_cleaning_solution(dishwasher, cleaning_solution)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the bowls and plates with the dishwasher.",
        "cdl": " \nbehavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher) # Close the dishwasher door\n        achieve is_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n        foreach o: item:\n        # Load all plates and bowls into the dishwasher\n            if is_plate(o) or is_bowl(o):\n                load_dishwasher(o, dishwasher)\n        start_dishwasher(dishwasher) # Start the dishwasher\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the book.",
        "cdl": " \ndef is_book_found(book:item):\n    symbol book_found=exists b: item : is_book(b) and visited(b)\n    return book_found\n\nbehavior __goal__():\n    body:\n        if exists book: item : is_book(book) and visited(book):\n            # If the book has already been located, no need to search further\n            bind book: item where:\n                is_book(book) and visited(book)\n            achieve close_char(char, book)\n            # Move the character closer to the located book\n\n        else:\n            # Check all items in the scene categorized as books for possible missing visits\n            foreach book: item:\n                if is_book(book) and not visited(book):\n                    observe(book, \"Check if this is the book youre looking for\")\n                    # Inspect whether the item is indeed the book to be located\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Put the book on the coffee table in the home office.",
        "cdl": " \nbehavior put_book_on_coffee_table(book:item, coffee_table:item):\n    body:\n        achieve on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select an item that is a home office\n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)\n        # Select a coffee table in the home office with a surface\n        bind book: item where:\n            is_book(book) and id[book] == 2136\n        # Select book with ID 2136\n        put_book_on_coffee_table(book, coffee_table)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "Put all the bowls and plates into the dishwasher to wash them.",
        "cdl": " \ndef contains_bowls_or_plates(dishwasher:item):\n    # Function to check if there are bowls or plates inside a specified dishwasher\n    symbol contains_items=exists o: item : (is_plate(o) or is_bowl(o)) and inside(o, dishwasher)\n    return contains_items\n\nbehavior load_items_into_dishwasher(dishwasher:item):\n    body:\n        foreach o: item:\n            # Load all bowls and plates into the dishwasher\n            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):\n                achieve inside(o, dishwasher)\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher) # Close the dishwasher door\n        achieve is_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher) and id[dishwasher]==129\n        # Select dishwasher with ID 129\n\n        if not contains_bowls_or_plates(dishwasher):\n            observe(dishwasher, \"Check is there any bowl or plate in the dishwasher\")\n\n        load_items_into_dishwasher(dishwasher)\n        start_dishwasher(dishwasher) # Start the dishwasher\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find the table in the dining room and put the milk and egg on it.",
        "cdl": " \nbehavior place_on_table(milk:item, egg:item, table:item):\n    body:\n        achieve on(milk, table)\n        achieve on(egg, table)\n\ndef find_table_in_dining_room(table:item):\n    symbol is_in_dining=exists room: item : is_dining_room(room) and inside(table, room)\n    return is_in_dining\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        bind egg: item where:\n            is_food_egg(egg)\n        bind table: item where:\n            is_table(table) and find_table_in_dining_room(table)\n        place_on_table(milk, egg, table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items in the fridge into the trashcan.",
        "cdl": " \ndef has_items_in_fridge(fridge: item):\n    # Function to check if there are items in the fridge\n    symbol has_items=exists o: item : inside(o, fridge)\n    return has_items\n\nbehavior throw_items_in_trash(fridge: item, trashcan: item):\n    body:\n        foreach item: item:\n            # Throw all items from the fridge into the trashcan\n            if inside(item, fridge):\n                achieve inside(item, trashcan)\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 126\n        # Select the fridge with ID 126\n\n        bind trashcan: item where:\n            is_trashcan(trashcan) and id[trashcan] == 99\n        # Select the trashcan with ID 99\n\n        if not has_items_in_fridge(fridge):\n            observe(fridge, \"Check is there any item in the fridge\")\n\n        throw_items_in_trash(fridge, trashcan)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put the milk and eggs back in the fridge.",
        "cdl": " \nbehavior put_in_fridge(item: item, fridge: item):\n    body:\n        achieve inside(item, fridge)\n        # Place the item inside the fridge\n\nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table) and id[table] == 114\n        # Select table with ID 114\n        \n        bind milk: item where:\n            is_milk(milk) and on(milk, table)\n        # Select the milk on the table\n        \n        bind egg: item where:\n            is_food_egg(egg) and on(egg, table)\n        # Select the egg on the table\n        \n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select a fridge\n\n        put_in_fridge(milk, fridge)\n        put_in_fridge(egg, fridge)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket with clothes in it.",
        "cdl": " \ndef find_basket_with_clothes(basket:item):\n    symbol has_clothes=exists o: item : is_clothes(o) and inside(o, basket)\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : is_basket_for_clothes(basket) and find_basket_with_clothes(basket):\n            # If a basket with clothes is found, proceed to approach it\n            bind basket: item where:\n                is_basket_for_clothes(basket) and find_basket_with_clothes(basket)\n            achieve close_char(char, basket)\n\n        else:\n            # If basket with clothes is not found, check all unvisited baskets\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Check if there are clothes in the basket\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add the clothes and soap to the washing machine.",
        "cdl": " \nbehavior add_clothes_and_soap_to_washing_machine(clothes:item, washing_machine:item, soap:item):\n    body:\n        achieve inside(clothes, washing_machine)\n        achieve inside(soap, washing_machine)\n\ndef has_clothes_in_basket(basket:item):\n    symbol has_clothes=exists o: item : is_clothes(o) and inside(o, basket)\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket) and id[basket] == 2078\n        # Select basket with ID 2078\n\n        if not has_clothes_in_basket(basket):\n            observe(basket, \"Check if there are clothes in the basket\")\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine]==2079\n        # Select washing machine with ID 2079\n\n        foreach clothes: item:\n            if is_clothes(clothes) and inside(clothes, basket):\n                bind soap: item where:\n                    is_soap(soap)\n                add_clothes_and_soap_to_washing_machine(clothes, washing_machine, soap)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Run the washing machine.",
        "cdl": " \nbehavior run_washing_machine(washing_machine:item):\n    body:\n        achieve closed(washing_machine) # Close the washing machine door\n        achieve plugged(washing_machine) # Ensure the washing machine is plugged in\n        achieve is_on(washing_machine) # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine]==2079\n        # Select the washing machine with ID 2079\n       \n        run_washing_machine(washing_machine)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and place it on the coffee table in the home office.",
        "cdl": " \nbehavior place_book_on_coffee_table(book:item, coffee_table:item):\n    body:\n        achieve on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)\n        # Select a coffee table in the home office\n        bind book: item where:\n            is_book(book)\n        # Select the book\n        place_book_on_coffee_table(book, coffee_table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Open the window in the home office.",
        "cdl": "\nbehavior open_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select an item that is a home office\n        bind window: item where:\n            is_window(window) and inside(window, home_office)\n        # Select a window inside the home office\n        open_window(window)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": " \nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n        \n        bind light: item where:\n            is_light(light) and inside(light, bathroom)\n        # Select the light inside the bathroom\n        \n        turn_on_light(light)\n"
    },
    {
        "task_name": "Make coffee",
        "source_sub_task": "Make a cup of coffee using the coffee maker.",
        "cdl": " \nbehavior make_coffee(cup: item, coffee_maker: item):\n    body:\n        achieve inside(cup, coffee_maker)\n        achieve is_on(coffee_maker)\n\nbehavior __goal__():\n    body:\n        bind coffee_maker: item where:\n            is_coffe_maker(coffee_maker)\n        bind cup: item where:\n            is_cup(cup)\n        make_coffee(cup, coffee_maker)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup suitable for microwaving and fill it with milk.  ",
        "cdl": "behavior find_cup_for_milk(cup:item):\n    body:\n        if not visited(cup):\n            observe(cup, \"Check if this cup is suitable for microwaving and if it is clean\")\n\nbehavior fill_cup_with_milk(cup:item, milk:item):\n    body:\n        achieve inside(milk, cup)\n\nbehavior __goal__():\n    body:\n        foreach cup: item:\n            if is_cup(cup) and not visited(cup):\n                find_cup_for_milk(cup)\n\n        bind milk: item where:\n            is_milk(milk)\n\n        bind suitable_cup: item where:\n            is_cup(suitable_cup) and visited(suitable_cup) \n\n        fill_cup_with_milk(suitable_cup, milk)"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk in the microwave.",
        "cdl": " \nbehavior heat_milk_in_microwave(cup:item, microwave:item):\n    body:\n        achieve inside(cup, microwave)\n        # Place the cup inside the microwave\n        achieve is_on(microwave)\n        # Turn on the microwave\n\nbehavior __goal__():\n    body:\n        bind microwave: item where:\n            is_microwave(microwave) and id[microwave] == 135\n        # Select the microwave with ID 135\n\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2132\n        # Select the cup with ID 2132\n\n        heat_milk_in_microwave(cup, microwave)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all the rooms in the house.",
        "cdl": " \ndef identify_rooms(room: item):\n    symbol is_a_room = exists room_type: item: (is_bedroom(room_type) or is_bathroom(room_type) or is_dining_room(room_type) or is_home_office(room_type)) and inside(room, room_type)\n    return is_a_room\n\nbehavior observe_unvisited_rooms():\n    body:\n        foreach room: item:\n            if (is_bedroom(room) or is_bathroom(room) or is_dining_room(room) or is_home_office(room)) and not visited(room):\n                observe(room, \"Check if this is a room\")\n\nbehavior __goal__():\n    body:\n        if exists room: item: (is_bedroom(room) or is_bathroom(room) or is_dining_room(room) or is_home_office(room)) and not visited(room):\n            # Check all rooms that havent been visited\n            foreach room: item:\n                if (is_bedroom(room) or is_bathroom(room) or is_dining_room(room) or is_home_office(room)) and not visited(room):\n                    observe(room, \"Check if this is a room\")\n        else:\n            observe_unvisited_rooms()\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Turn on at least one light in each room.",
        "cdl": " \ndef has_unlit_light_in_room(room: item):\n    # Function to check if there is a light in a specified room that is off\n    symbol unlit_light=exists light: item : is_light(light) and inside(light, room) and is_off(light)\n    return unlit_light\n\nbehavior turn_on_light_in_room(room: item):\n    body:\n        foreach light: item:\n            if is_light(light) and inside(light, room) and is_off(light):\n                achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if (is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room)) and has_unlit_light_in_room(room):\n                turn_on_light_in_room(room)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \nbehavior open_window(window: item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Identify the bathroom\n        \n        bind window: item where:\n            is_window(window) and inside(window, bathroom)\n        # Identify the window inside the bathroom\n        \n        open_window(window)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bedroom, then turn on the lights in the bathroom.",
        "cdl": " \nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bedroom: item where:\n            is_bedroom(bedroom)\n        # Select the bedroom\n\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        bind bedroom_light: item where:\n            is_light(bedroom_light) and inside(bedroom_light, bedroom)\n        # Select the light inside the bedroom\n\n        bind bathroom_light: item where:\n            is_light(bathroom_light) and inside(bathroom_light, bathroom)\n        # Select the light inside the bathroom\n\n        turn_on_light(bedroom_light)\n        turn_on_light(bathroom_light)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find your spectacles and put them on the coffee table in the home office.",
        "cdl": " \nbehavior find_and_place_spectacles(spectacles: item, coffee_table: item):\n    body:\n        achieve on(spectacles, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Identify the home office\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)\n        # Identify the coffee table inside the home office\n        \n        bind spectacles: item where:\n            is_spectacles(spectacles)\n        # Select the spectacles\n\n        find_and_place_spectacles(spectacles, coffee_table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior find_book(book: item):\n    body:\n        if not visited(book): \n            observe(book, \"Check if this is the book to be found\")\n            \nbehavior place_book_on_coffee_table(book: item, coffee_table: item):\n    body:\n        achieve on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        find_book(book)\n        \n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n        \n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)\n        # Select a coffee table in the home office\n\n        place_book_on_coffee_table(book, coffee_table)\n"
    }
]