From agent.py
Reset goals: The sub-goals are: 
['Sit on the chair in front of the computer in the home office and touch the mouse to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_213_around_mousepad_214(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==214
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_chair_194_around_desk_193(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)

behavior touch_mouse(mouse:item):
    body:
        achieve is_on(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select an item that is a home office
        
        bind chair: item where:
            is_chair(chair) and close_char(char, chair) and inside(chair, home_office)
        # Select a chair close to the character in the home office

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, chair) and inside(mouse, home_office)
        # Select a mouse close to the chair in the home office

        sit_on_chair(chair)
        touch_mouse(mouse)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_280_around_computer_276(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_chair_194_around_desk_193(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)

behavior touch_mouse(mouse:item):
    body:
        achieve close_char(char, mouse)
        touch(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select a chair in the home office

        bind mouse: item where:
            is_mouse(mouse) and inside(mouse, home_office)
        # Select a mouse in the home office

        sit_on_chair(chair)
        touch_mouse(mouse)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "sit on the chair in front of the computer in the home office and touch the mouse to turn it on." ?
Answer: Get close to the computer in the home office. Sit on the chair in front of the computer. Touch the mouse to turn on the computer.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_213_around_mousepad_214(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==214
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_chair_271_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior approach_and_sit(chair:item, computer:item):
    body:
        achieve close_char(char, chair)
        achieve on_char(char, chair)
        achieve close_char(char, computer)

behavior activate_computer(mouse:item):
    body:
        achieve is_on(mouse)
        touch(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer) and inside(mouse, home_office)

        approach_and_sit(chair, computer)
        activate_computer(mouse)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_213_around_mousepad_214(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==214
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_chair_2003_around_computer_276(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(chair,computer_instance)
        else:
            exp(chair,computer_instance)
    eff:
        unknown[chair]=False
        close[chair,computer_instance]=True
        close[computer_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)

behavior touch_mouse(mouse:item):
    body:
        achieve close_char(char, mouse)
        touch(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        bind chair: item where:
            is_chair(chair) and sittable(chair) and inside(chair, home_office)
        # Select a sittable chair inside the home office
        
        bind mouse: item where:
            is_mouse(mouse) and has_switch(mouse) and inside(mouse, home_office)
        # Select a mouse with a switch inside the home office
        
        sit_on_chair(chair)
        touch_mouse(mouse)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Get close to the computer in the home office, sit on the chair in front of the computer, and touch the mouse to turn on the computer.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_213_around_computer_276(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_chair_2003_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior approach_computer_and_turn_on(home_office:item, chair:item, computer:item, mouse:item):
    body:
        achieve close_char(char, computer)
        achieve on_char(char, chair)
        touch(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select a chair inside the home office
        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer in the home office
        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse near the computer
        approach_computer_and_turn_on(home_office, chair, computer, mouse)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_213_around_mousepad_214(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==214
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_chair_2003_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair_and_turn_on_computer(chair:item, mouse:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair in front of the computer
        touch(mouse)
        # Touch the mouse to turn on the computer

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select the chair in the home office

        bind mouse: item where:
            is_mouse(mouse) and inside(mouse, home_office)
        # Select the mouse close to the computer in the home office

        sit_on_chair_and_turn_on_computer(chair, mouse)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Sit on the chair in front of the computer in the home office and touch the mouse to turn on the computer.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_280_around_computer_276(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_chair_2003_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)

behavior touch_mouse(mouse:item):
    body:
        touch(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select a chair inside the home office

        bind mouse: item where:
            is_mouse(mouse) and inside(mouse, home_office)
        # Select a mouse near the computer in the home office

        sit_on_chair(chair)
        touch_mouse(mouse)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_280_around_computer_276(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_chair_2003_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair_and_turn_on_computer(char: character, chair: item, computer: item, mouse: item):
    body:
        achieve on_char(char, chair) # Sit on the chair
        achieve close_char(char, mouse) # Be close to the mouse
        touch(mouse) # Touch the mouse

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select a chair in the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select a computer in the home office

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select a mouse close to the computer

        sit_on_chair_and_turn_on_computer(char, chair, computer, mouse)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From evaluation.py
cdl_dataset/dataset/Write_an_email/g2.txt
Checking k1
missed actions: walk_executor(chair_271);sit_executor(chair_271);
missed action num: 2
##############################
From evaluation.py
cdl_dataset/dataset/Write_an_email/g2.txt
Checking k1
missed actions: walk_executor(chair_271);sit_executor(chair_271);
missed action num: 2
##############################
