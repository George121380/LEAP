From agent.py
Reset goals: The sub-goals are: 
['Boil some rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2108_around_kitchen_counter_119(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_pot_2138_around_kitchen_counter_119(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_phone_2016_around_kitchen_counter_119(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(phone,kitchen_counter_instance)
        else:
            exp(phone,kitchen_counter_instance)
    eff:
        unknown[phone]=False
        close[phone,kitchen_counter_instance]=True
        close[kitchen_counter_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_in_pot(pot:item):
    # Function to check if there is rice in the pot
    symbol has_rice=exists o: item : is_food_rice(o) and inside(o, pot)
    return has_rice

def has_water_in_pot(pot:item):
    # Function to check if there is water in the pot
    symbol has_water=has_water(pot)
    return has_water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        if not has_rice_in_pot(pot):
            observe(pot, "Check if there is rice in the pot")
        
        if not has_water_in_pot(pot):
            observe(pot, "Check if there is water in the pot")

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the rice

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_rice_in_pot(pot:item):
    # Function to check if there is rice in the pot
    symbol has_rice=exists o: item : is_food_rice(o) and inside(o, pot)
    return has_rice

def has_water_in_pot(pot:item):
    # Function to check if there is water in the pot
    symbol has_water=has_water(pot)
    return has_water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        if not has_rice_in_pot(pot):
            observe(pot, "Check if there is rice in the pot")
        
        if not has_water_in_pot(pot):
            observe(pot, "Check if there is water in the pot")

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the rice

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(pot_2138, kitchen_counter_119)walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Check if there is rice in the pot)obs(pot_2138, Check if there is water in the pot)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. 
##############################
From agent.py
exp(pot_2138, kitchen_counter_119)
Find pot_2138. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Check if there is rice in the pot)obs(pot_2138, Check if there is water in the pot)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. 
##############################
From agent.py
open_executor(pot_2138)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. 
##############################
From agent.py
obs(pot_2138, Check if there is rice in the pot)
Get this information:  pot_2138 is on kitchen_counter_119. pot_2138 is close to kitchen_counter_119. pot_2138 is close to character_240. pot_2138 is inside dining_room_41. pot_2138 is OPEN.
##############################
From agent.py
obs(pot_2138, Check if there is water in the pot)
Get this information:  pot_2138 is on kitchen_counter_119. pot_2138 is close to kitchen_counter_119. pot_2138 is close to character_240. pot_2138 is inside dining_room_41. pot_2138 is OPEN.
##############################
From agent.py
grab_executor(pot_2138)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. Robot is close stove_2135. 
##############################
From agent.py
put_executor(pot_2138, stove_2135)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. Robot is close stove_2135. pot_2138 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. Robot is close stove_2135. 
##############################
From agent.py
Human Instruction: You need to ensure that there is rice and water in the pot before boiling. First, check if there is rice in the pot and fill it with rice if there isn't. Then, check if there is water in the pot and fill it with water if necessary. After ensuring both rice and water are in the pot, place it on the stove and then turn on the stove to boil the rice.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for pot_2138 around kitchen_counter_119.
Action 3: Walk to pot_2138.
Action 4: Open pot_2138.
Action 5: Observe around pot_2138 with the question of Check if there is rice in the pot.
Action 6: Observe around pot_2138 with the question of Check if there is water in the pot.
Action 7: Grab pot_2138.
Action 8: Walk to stove_2135.
Action 9: Put pot_2138 on stove_2135.
Action 10: Switch on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2033_around_washing_machine_2079(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(shoes,washing_machine_instance)
        else:
            exp(shoes,washing_machine_instance)
    eff:
        unknown[shoes]=False
        close[shoes,washing_machine_instance]=True
        close[washing_machine_instance,shoes]=True
    

behavior find_phone_2016_around_computer_276(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_pot_2138_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_in_pot(pot:item):
    # Function to check if there is rice in the pot
    symbol has_rice=exists o: item : is_food_rice(o) and inside(o, pot)
    return has_rice

def has_water_in_pot(pot:item):
    # Function to check if there is water in the pot
    symbol has_water=exists w: item : has_water(w) and inside(w, pot)
    return has_water

behavior fill_pot_with_rice(pot: item):
    body:
        bind rice: item where:
            is_food_rice(rice)
        achieve inside(rice, pot)

behavior fill_pot_with_water(pot: item):
    body:
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, pot)
        achieve_once is_on(faucet)
        water(pot)
        achieve_once is_off(faucet)

behavior boil_rice_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        if not has_rice_in_pot(pot):
            fill_pot_with_rice(pot)
        # Ensure theres rice in the pot

        if not has_water_in_pot(pot):
            fill_pot_with_water(pot)
        # Ensure theres water in the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        boil_rice_on_stove(pot, stove)
        # Start boiling the rice

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_shoes_2033_around_washing_machine_2079(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(shoes,washing_machine_instance)
        else:
            exp(shoes,washing_machine_instance)
    eff:
        unknown[shoes]=False
        close[shoes,washing_machine_instance]=True
        close[washing_machine_instance,shoes]=True
    

behavior find_phone_71_around_computer_209(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==209
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#goal_representation
 
def has_rice_in_pot(pot:item):
    # Function to check if there is rice in the pot
    symbol has_rice=exists o: item : is_food_rice(o) and inside(o, pot)
    return has_rice

def has_water_in_pot(pot:item):
    # Function to check if there is water in the pot
    symbol has_water=exists w: item : is_ice(w) and inside(w, pot)
    return has_water

behavior fill_pot_with_rice(pot: item):
    body:
        bind rice: item where:
            is_food_rice(rice)
        achieve inside(rice, pot)

behavior fill_pot_with_water(pot: item):
    body:
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, pot)
        achieve_once is_on(faucet)
        ice(pot)
        achieve_once is_off(faucet)

behavior boil_rice_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        if not has_rice_in_pot(pot):
            fill_pot_with_rice(pot)
        # Ensure theres rice in the pot

        if not has_water_in_pot(pot):
            fill_pot_with_water(pot)
        # Ensure theres water in the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        boil_rice_on_stove(pot, stove)
        # Start boiling the rice

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function ice not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_ice_2024_around_fridge_126(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(ice,fridge_instance)
        else:
            exp(ice,fridge_instance)
    eff:
        unknown[ice]=False
        close[ice,fridge_instance]=True
        close[fridge_instance,ice]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#goal_representation
 
def has_rice_in_pot(pot:item):
    # Function to check if there is rice in the pot
    symbol has_rice=exists o: item : is_food_rice(o) and inside(o, pot)
    return has_rice

def has_water_in_pot(pot:item):
    # Function to check if there is water in the pot
    symbol has_water=exists w: item : is_ice(w) and inside(w, pot)
    return has_water

behavior fill_pot_with_rice(pot: item):
    body:
        bind rice: item where:
            is_food_rice(rice)
        achieve inside(rice, pot)

behavior fill_pot_with_water(pot: item):
    body:
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, pot)
        achieve_once is_on(faucet)
        achieve_once is_off(faucet)

behavior boil_rice_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        if not has_rice_in_pot(pot):
            fill_pot_with_rice(pot)
        # Ensure theres rice in the pot

        if not has_water_in_pot(pot):
            fill_pot_with_water(pot)
        # Ensure theres water in the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        boil_rice_on_stove(pot, stove)
        # Start boiling the rice

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_cup_2132_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_or_water_in_pot(pot:item):
    # Function to check if theres rice or water in the pot
    symbol has_rice_or_water=exists o: item : (is_food_rice(o) or has_water(pot)) and inside(o, pot)
    return has_rice_or_water

behavior ensure_rice_or_water_in_pot(pot:item):
    body:
        if not has_rice_or_water_in_pot(pot):
            observe(pot, "Ensure rice and water are in the pot")

behavior start_boiling(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135 
        # Select the stove with ID 2135
        
        ensure_rice_or_water_in_pot(pot)
        start_boiling(pot, stove) 

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_rice_or_water_in_pot(pot:item):
    # Function to check if theres rice or water in the pot
    symbol has_rice_or_water=exists o: item : (is_food_rice(o) or has_water(pot)) and inside(o, pot)
    return has_rice_or_water

behavior ensure_rice_or_water_in_pot(pot:item):
    body:
        if not has_rice_or_water_in_pot(pot):
            observe(pot, "Ensure rice and water are in the pot")

behavior start_boiling(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135 
        # Select the stove with ID 2135
        
        ensure_rice_or_water_in_pot(pot)
        start_boiling(pot, stove) 

##############################
From agent.py-> find a plan in act()
obs(pot_2138, Ensure rice and water are in the pot)
##############################
From agent.py
obs(pot_2138, Ensure rice and water are in the pot)
Get this information:  pot_2138 is on stove_2135. pot_2138 is close to character_240. pot_2138 is close to stove_2135. pot_2138 is inside dining_room_41. pot_2138 is OPEN.
##############################
From agent.py
Human Instruction: You need to ensure that there is rice and water in pot_2138 before placing it on the stove and turning it on. You haven't confirmed or added rice and water to the pot. Double-check the contents and add rice and water if necessary.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for pot_2138 around kitchen_counter_119.
Action 3: Walk to pot_2138.
Action 4: Open pot_2138.
Action 5: Observe around pot_2138 with the question of Check if there is rice in the pot.
Action 6: Observe around pot_2138 with the question of Check if there is water in the pot.
Action 7: Grab pot_2138.
Action 8: Walk to stove_2135.
Action 9: Put pot_2138 on stove_2135.
Action 10: Switch on stove_2135.
Action 11: Observe around pot_2138 with the question of Ensure rice and water are in the pot.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_cup_2134_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_and_water(pot:item):
    # Determine if there is rice and water in the pot
    symbol has_contents=exists o: item : (is_food_rice(o) and inside(o, pot)) and has_water(pot)
    return has_contents

behavior ensure_switch_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2138

        if not has_rice_and_water(pot):
            observe(pot, "Ensure rice and water are in the pot")

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135

        ensure_switch_on_stove(stove)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_rice_and_water(pot:item):
    # Determine if there is rice and water in the pot
    symbol has_contents=exists o: item : (is_food_rice(o) and inside(o, pot)) and has_water(pot)
    return has_contents

behavior ensure_switch_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2138

        if not has_rice_and_water(pot):
            observe(pot, "Ensure rice and water are in the pot")

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135

        ensure_switch_on_stove(stove)


##############################
From agent.py-> find a plan in act()
obs(pot_2138, Ensure rice and water are in the pot)
##############################
From agent.py
obs(pot_2138, Ensure rice and water are in the pot)
Get this information:  pot_2138 is on stove_2135. pot_2138 is close to character_240. pot_2138 is close to stove_2135. pot_2138 is inside dining_room_41. pot_2138 is OPEN.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g1.txt
Checking k1
missed actions: grab_executor(pot_2138);walk_executor(faucet_20);switchon_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(fridge_126);switchoff_executor(fridge_126);open_executor(fridge_126);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);
missed action num: 13
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g1.txt
Checking k1
missed actions: grab_executor(pot_2138);walk_executor(faucet_20);switchon_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(fridge_126);switchoff_executor(fridge_126);open_executor(fridge_126);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);
missed action num: 13
##############################
