From agent.py
Reset goals: The sub-goals are: 
['1. Find the frying pan and place it on the stove.', '2. Crack and beat the eggs.', '3. Heat the frying pan, and scramble the eggs until cooked.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2017_around_computer_209(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==209
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_119(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def find_fryingpan_and_stove(fryingpan: item, stove: item):
    # Function to check if there is a fryingpan on the stove
    symbol fryingpan_found=exists f: item : is_fryingpan(f) and on(f, stove)
    return fryingpan_found

behavior __goal__():
    body:
        if exists fryingpan: item : is_fryingpan(fryingpan) and not visited(fryingpan):
            # If the fryingpan has not been located and is not visited
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and not visited(fryingpan)
            observe(fryingpan, "Check if this fryingpan can be placed on the stove")
            # Inspect the fryingpan

        if exists stove: item : is_stove(stove) and not visited(stove):
            # If the stove is not visited
            bind stove: item where:
                is_stove(stove) and not visited(stove)
            observe(stove, "Check if this is the stove")

        # Attempt to check if the fryingpan can be placed on the stove
        if find_fryingpan_and_stove(fryingpan, stove):
            achieve on(fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fryingpan; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_phone_2029_around_computer_209(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==209
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_119(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#goal_representation
 
def find_fryingpan_and_stove(fryingpan: item, stove: item):
    # Function to check if there is a fryingpan on the stove
    symbol fryingpan_found=exists f: item : is_fryingpan(f) and on(f, stove)
    return fryingpan_found

behavior __goal__():
    body:
        if exists fryingpan: item : is_fryingpan(fryingpan) and not visited(fryingpan):
            # If the fryingpan has not been located and is not visited
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and not visited(fryingpan)
            observe(fryingpan, "Check if this fryingpan can be placed on the stove")
            # Inspect the fryingpan

        if exists stove: item : is_stove(stove) and not visited(stove):
            # If the stove is not visited
            bind stove: item where:
                is_stove(stove) and not visited(stove)
            observe(stove, "Check if this is the stove")

        # Attempt to check if the fryingpan can be placed on the stove
        if find_fryingpan_and_stove(fryingpan, stove):
            achieve on(fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fryingpan; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_phone_71_around_kitchen_counter_119(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(phone,kitchen_counter_instance)
        else:
            exp(phone,kitchen_counter_instance)
    eff:
        unknown[phone]=False
        close[phone,kitchen_counter_instance]=True
        close[kitchen_counter_instance,phone]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_119(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#goal_representation
 
def find_fryingpan_and_stove(fryingpan: item, stove: item):
    # Function to check if there is a fryingpan on the stove
    symbol fryingpan_found = exists f: item : is_fryingpan(f) and on(f, stove)
    return fryingpan_found

behavior __goal__():
    body:
        if exists fryingpan: item : is_fryingpan(fryingpan) and not visited(fryingpan):
            # If the fryingpan has not been located and is not visited
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and not visited(fryingpan)
            observe(fryingpan, "Check if this fryingpan can be placed on the stove")
            # Inspect the fryingpan

        if exists stove: item : is_stove(stove) and not visited(stove):
            # If the stove is not visited
            bind stove: item where:
                is_stove(stove) and not visited(stove)
            observe(stove, "Check if this is the stove")

        # Attempt to check if the fryingpan can be placed on the stove
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and not visited(fryingpan)
        bind stove: item where:
            is_stove(stove) and not visited(stove)
        if find_fryingpan_and_stove(fryingpan, stove):
            achieve on(fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2017_around_kitchen_counter_119(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(phone,kitchen_counter_instance)
        else:
            exp(phone,kitchen_counter_instance)
    eff:
        unknown[phone]=False
        close[phone,kitchen_counter_instance]=True
        close[kitchen_counter_instance,phone]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_119(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation

def can_use_fryingpan(fryingpan:item):
    # Determine if there is a frying pan available
    symbol is_usable=exists o: item : is_fryingpan(o) and visited(o)
    return is_usable

behavior place_fryingpan_on_stove(fryingpan: item, stove: item):
    body:
        achieve on(fryingpan, stove)

behavior __goal__():
    body:
        if exists fryingpan: item : is_fryingpan(fryingpan) and visited(fryingpan):
            # If the frying pan has already been located, use it
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and visited(fryingpan)
            bind stove: item where:
                is_stove(stove)
            place_fryingpan_on_stove(fryingpan, stove)

        else:
            # If the frying pan is not found, check all unvisited items labelled as frying pans
            foreach fryingpan: item:
                if is_fryingpan(fryingpan) and not visited(fryingpan):
                    observe(fryingpan, "Check if this frying pan can be used")
                    # Observe whether this pan is suitable for use

#goal_representation_end

##############################
From agent.py->reset_goal

def can_use_fryingpan(fryingpan:item):
    # Determine if there is a frying pan available
    symbol is_usable=exists o: item : is_fryingpan(o) and visited(o)
    return is_usable

behavior place_fryingpan_on_stove(fryingpan: item, stove: item):
    body:
        achieve on(fryingpan, stove)

behavior __goal__():
    body:
        if exists fryingpan: item : is_fryingpan(fryingpan) and visited(fryingpan):
            # If the frying pan has already been located, use it
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and visited(fryingpan)
            bind stove: item where:
                is_stove(stove)
            place_fryingpan_on_stove(fryingpan, stove)

        else:
            # If the frying pan is not found, check all unvisited items labelled as frying pans
            foreach fryingpan: item:
                if is_fryingpan(fryingpan) and not visited(fryingpan):
                    observe(fryingpan, "Check if this frying pan can be used")
                    # Observe whether this pan is suitable for use

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(fryingpan_2154, kitchen_counter_119)walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if this frying pan can be used)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_119)
Failed to find fryingpan_2154 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(fryingpan_2154, kitchen_counter_123)walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if this frying pan can be used)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Find oil_2149. Find knife_2035. Find food_kiwi_2054. Find food_orange_2027. Find tray_2068. Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close floor_45. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_123)
Failed to find fryingpan_2154 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(fryingpan_2154, cupboard_118)walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if this frying pan can be used)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close kitchen_counter_123.Robot is no longer close floor_45.
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_118)
Failed to find fryingpan_2154 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(fryingpan_2154, cupboard_117)walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if this frying pan can be used)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(fryingpan_2154, cupboard_117)
Failed to find fryingpan_2154 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(fryingpan_2154, fridge_126)walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if this frying pan can be used)
##############################
From agent.py
walk_executor(fridge_126)
Find food_onion_2048. Find food_food_2046. Find food_food_2073. Find food_steak_2080. Find food_apple_2081. Find food_bacon_2082. Find food_banana_2083. Find food_cake_2085. Find food_carrot_2086. Find food_cereal_2087. Find food_cheese_2088. Find food_chicken_2089. Find food_dessert_2090. Find food_donut_2091. Find food_egg_2092. Find food_fish_2093. Find food_food_2094. Find food_fruit_2095. Find food_hamburger_2096. Find food_ice_cream_2097. Find food_jam_2098. Find food_kiwi_2099. Find food_lemon_2100. Find food_noodles_2101. Find food_oatmeal_2102. Find food_orange_2103. Find food_onion_2104. Find food_peanut_butter_2105. Find food_pizza_2106. Find food_potato_2107. Find food_rice_2108. Find food_salt_2109. Find food_snack_2110. Find food_sugar_2111. Find food_turkey_2112. Find food_vegetable_2113. Find food_food_2001. Find sauce_2148. Find basket_for_clothes_2078. Find food_food_1000. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
switchoff_executor(fridge_126)
Find mouse_213. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
open_executor(fridge_126)
Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
exp(fryingpan_2154, fridge_126)
Failed to find fryingpan_2154 around fridge_126. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Scramble the egg using the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_oven_127(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

behavior find_blow_dryer_2057_around_bathroom_cabinet_17(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(blow_dryer,bathroom_cabinet_instance)
        else:
            exp(blow_dryer,bathroom_cabinet_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,blow_dryer]=True
    

behavior find_remote_control_2124_around_nightstand_195(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==195
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(remote_control,nightstand_instance)
        else:
            exp(remote_control,nightstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,nightstand_instance]=True
        close[nightstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
def find_fryingpan_on_kitchen_counter(kitchen_counter:item):
    # Function to check if there is a frying pan on the specified kitchen counter
    symbol has_fryingpan=exists o: item : is_fryingpan(o) and on(o, kitchen_counter)
    return has_fryingpan

def find_stove_top_fryingpan(fryingpan:item):
    # Function to check if the frying pan is on the stove top
    symbol on_stove_top=exists stove: item : is_stove(stove) and on(fryingpan, stove)
    return on_stove_top

behavior scramble_egg(egg:item, stove:item, fryingpan:item):
    body:
        achieve inside(egg, fryingpan) # Place the egg inside the frying pan
        achieve is_on(stove) # Ensure the stove is turned on
        # Additional goal for cooking
        # (No actual action needed to scramble here as it is assumed handled automatically)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select a kitchen counter
        
        if exists fryingpan: item : is_fryingpan(fryingpan) and on(fryingpan, kitchen_counter):
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and find_fryingpan_on_kitchen_counter(kitchen_counter)
            # Select the frying pan on the kitchen counter
        
        else:
            foreach counter: item:
                if is_kitchen_counter(counter) and not visited(counter):
                    observe(counter, "Check if there is a frying pan on the kitchen counter")
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind stove: item where:
            is_stove(stove) and find_stove_top_fryingpan(fryingpan)
        # Select the stove
        
        scramble_egg(egg, stove, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fryingpan; available variables: [Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_phone_2029_around_home_office_241(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(phone,home_office_instance)
        else:
            exp(phone,home_office_instance)
    eff:
        unknown[phone]=False
        close[phone,home_office_instance]=True
        close[home_office_instance,phone]=True
    

behavior find_fryingpan_2154_around_oven_127(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

behavior find_remote_control_2124_around_nightstand_195(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==195
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(remote_control,nightstand_instance)
        else:
            exp(remote_control,nightstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,nightstand_instance]=True
        close[nightstand_instance,remote_control]=True
    

behavior find_food_onion_2048_around_cutting_board_2123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_milk_2115_around_tray_2068(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(milk,tray_instance)
        else:
            exp(milk,tray_instance)
    eff:
        unknown[milk]=False
        close[milk,tray_instance]=True
        close[tray_instance,milk]=True
    

#goal_representation
 
def find_fryingpan_on_kitchen_counter(kitchen_counter:item):
    # Function to check if there is a frying pan on the specified kitchen counter
    symbol has_fryingpan=exists o: item : is_fryingpan(o) and on(o, kitchen_counter)
    return has_fryingpan

def find_stove_top_fryingpan(fryingpan:item):
    # Function to check if the frying pan is on the stove top
    symbol on_stove_top=exists stove: item : is_stove(stove) and on(fryingpan, stove)
    return on_stove_top

behavior scramble_egg(egg:item, stove:item, fryingpan:item):
    body:
        achieve inside(egg, fryingpan) # Place the egg inside the frying pan
        achieve is_on(stove) # Ensure the stove is turned on
        # Additional goal for cooking
        # (No actual action needed to scramble here as it is assumed handled automatically)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select a kitchen counter

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind the frying pan

        if exists fryingpan: item : is_fryingpan(fryingpan) and on(fryingpan, kitchen_counter):
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and find_fryingpan_on_kitchen_counter(kitchen_counter)
            # Select the frying pan on the kitchen counter
        
        else:
            foreach counter: item:
                if is_kitchen_counter(counter) and not visited(counter):
                    observe(counter, "Check if there is a frying pan on the kitchen counter")
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind stove: item where:
            is_stove(stove) and find_stove_top_fryingpan(fryingpan)
        # Select the stove
        
        scramble_egg(egg, stove, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_oven_127(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_food,oven_instance)
        else:
            exp(food_food,oven_instance)
    eff:
        unknown[food_food]=False
        close[food_food,oven_instance]=True
        close[oven_instance,food_food]=True
    

behavior find_food_carrot_2015_around_cutting_board_2123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_carrot,cutting_board_instance)
        else:
            exp(food_carrot,cutting_board_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cutting_board_instance]=True
        close[cutting_board_instance,food_carrot]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def find_fryingpan(fryingpan:item):
    symbol found_fryingpan = exists location: item : (is_kitchen_counter(location) or is_cupboard(location) or is_fridge(location)) and close(fryingpan, location)
    return found_fryingpan

def find_stove(stove:item):
    symbol found_stove = exists loc: item : is_kitchen_counter(loc) and close(stove, loc)
    return found_stove

def has_egg_ready_for_scramble(egg:item, fryingpan: item):
    symbol egg_ready = is_food_egg(egg) and inhand(egg)
    return egg_ready

behavior scramble_egg(egg:item, fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)
        achieve is_on(stove)
        # Assuming the frying pan should be on the stove and the stove turned on
        achieve_once inhand(egg)
        achieve inside(egg, fryingpan)
        # Crack the egg into the frying pan to prepare for scrambling

behavior __goal__():
    body:
        if not exists fryingpan: item : is_fryingpan(fryingpan) and find_fryingpan(fryingpan):
            observe(kitchen_counter_119, "Look for fryingpan")
            observe(kitchen_counter_123, "Look for fryingpan")
            observe(cupboard_118, "Look for fryingpan")
            observe(fridge_126, "Look for fryingpan")

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and find_fryingpan(fryingpan)

        if not exists stove: item : is_stove(stove) and find_stove(stove):
            observe(kitchen_counter_119, "Look for stove")
            observe(kitchen_counter_123, "Look for stove")

        bind stove: item where:
            is_stove(stove) and find_stove(stove)

        foreach egg: item:
            if is_food_egg(egg):
                if has_egg_ready_for_scramble(egg, fryingpan):
                    scramble_egg(egg, fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'fryingpan') at line 5862, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_cabinet_17(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(blow_dryer,bathroom_cabinet_instance)
        else:
            exp(blow_dryer,bathroom_cabinet_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,blow_dryer]=True
    

behavior find_remote_control_2124_around_tvstand_116(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_fryingpan_2154_around_oven_127(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

#goal_representation
 
behavior scramble_egg(egg:item, fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)
        achieve is_on(stove)
        # Assuming the frying pan should be on the stove and the stove turned on
        achieve_once inhand(egg)
        achieve inside(egg, fryingpan)
        # Crack the egg into the frying pan to prepare for scrambling

behavior __goal__():
    body:
        if not exists fryingpan: item : is_fryingpan(fryingpan) and find_fryingpan(fryingpan):
            observe(kitchen_counter_119, "Look for fryingpan")
            observe(kitchen_counter_123, "Look for fryingpan")
            observe(cupboard_118, "Look for fryingpan")
            observe(fridge_126, "Look for fryingpan")

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and find_fryingpan(fryingpan)

        if not exists stove: item : is_stove(stove) and find_stove(stove):
            observe(kitchen_counter_119, "Look for stove")
            observe(kitchen_counter_123, "Look for stove")

        bind stove: item where:
            is_stove(stove) and find_stove(stove)

        foreach egg: item:
            if is_food_egg(egg):
                if has_egg_ready_for_scramble(egg, fryingpan):
                    scramble_egg(egg, fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'fryingpan') at line 5832, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_cabinet_17(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(blow_dryer,bathroom_cabinet_instance)
        else:
            exp(blow_dryer,bathroom_cabinet_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,blow_dryer]=True
    

behavior find_fryingpan_2154_around_oven_127(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

behavior find_remote_control_2124_around_tvstand_273(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==273
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#goal_representation
 
behavior scramble_egg(egg:item, fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)
        achieve is_on(stove) 
        achieve_once inhand(egg)
        achieve inside(egg, fryingpan)

behavior __goal__():
    body:
        if not exists fryingpan: item : is_fryingpan(fryingpan):
            observe(kitchen_counter_119, "Look for fryingpan")
            observe(kitchen_counter_123, "Look for fryingpan")
            observe(cupboard_118, "Look for fryingpan")
            observe(fridge_126, "Look for fryingpan")

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        if not exists stove: item : is_stove(stove) and find_stove(stove):
            observe(kitchen_counter_119, "Look for stove")
            observe(kitchen_counter_123, "Look for stove")

        bind stove: item where:
            is_stove(stove) and find_stove(stove)

        foreach egg: item:
            if is_food_egg(egg):
                scramble_egg(egg, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "scramble the egg using the frying pan." ?
Answer: Put the pan on the stove. Turn on the stove. Put oil in the pan. Put the egg in the pan.

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put the pan on the stove.', '2. Turn on the stove.', '3. Put oil in the pan.', '4. Crack and put the egg in the pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_oven_127(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

behavior find_remote_control_2124_around_tvstand_273(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==273
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_blow_dryer_2057_around_bathroom_cabinet_17(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(blow_dryer,bathroom_cabinet_instance)
        else:
            exp(blow_dryer,bathroom_cabinet_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pan_on_stove(pan: item, stove: item):
    body:
        achieve on(pan, stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
            
        bind stove: item where:
            is_stove(stove)
        
        place_pan_on_stove(pan, stove)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(oven_127)open_executor(oven_127)exp(fryingpan_2154, oven_127)walk_executor(fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(oven_127)
Find food_cheese_2072. Find oil_2013. Find food_carrot_2015. Find food_food_2064. Robot is inside dining_room_41. Robot is close tray_128. Robot is close food_cheese_2072. Robot is close oven_127. Robot is close oil_2013. Robot is close food_carrot_2015. Robot is no longer close food_onion_2048.Robot is no longer close food_food_2046.Robot is no longer close food_food_2073.Robot is no longer close food_steak_2080.Robot is no longer close food_apple_2081.Robot is no longer close food_bacon_2082.Robot is no longer close food_banana_2083.Robot is no longer close food_cake_2085.Robot is no longer close food_carrot_2086.Robot is no longer close food_cereal_2087.Robot is no longer close food_cheese_2088.Robot is no longer close food_chicken_2089.Robot is no longer close food_dessert_2090.Robot is no longer close food_donut_2091.Robot is no longer close food_egg_2092.Robot is no longer close food_fish_2093.Robot is no longer close food_food_2094.Robot is no longer close food_fruit_2095.Robot is no longer close food_hamburger_2096.Robot is no longer close food_ice_cream_2097.Robot is no longer close food_jam_2098.Robot is no longer close food_kiwi_2099.Robot is no longer close food_lemon_2100.Robot is no longer close food_noodles_2101.Robot is no longer close food_oatmeal_2102.Robot is no longer close food_orange_2103.Robot is no longer close food_onion_2104.Robot is no longer close food_peanut_butter_2105.Robot is no longer close food_pizza_2106.Robot is no longer close food_potato_2107.Robot is no longer close food_rice_2108.Robot is no longer close food_salt_2109.Robot is no longer close food_snack_2110.Robot is no longer close food_sugar_2111.Robot is no longer close food_turkey_2112.Robot is no longer close food_vegetable_2113.Robot is no longer close food_food_2001.Robot is no longer close floor_44.Robot is no longer close sauce_2148.Robot is no longer close fridge_126.
##############################
From agent.py
open_executor(oven_127)
Robot is inside dining_room_41. Robot is close tray_128. Robot is close food_cheese_2072. Robot is close oven_127. Robot is close oil_2013. Robot is close food_carrot_2015. 
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find fryingpan_2154 ?
Answer: The fryingpan_2154 is located in dining_room_41. You can find it on kitchen_counter_122. Look for the kitchen counter in the dining room area, and you'll see fryingpan_2154 placed on it.

##############################
From agent.py
Human Instruction: The fryingpan_2154 is located in dining_room_41. You can find it on kitchen_counter_122. Look for the kitchen counter in the dining room area, and you'll see fryingpan_2154 placed on it.

Human Guidance: Put the pan on the stove. Turn on the stove. Put oil in the pan. Put the egg in the pan.
The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for fryingpan_2154 around kitchen_counter_119.
Action 3: Walk to kitchen_counter_123.
Action 4: look for fryingpan_2154 around kitchen_counter_123.
Action 5: Walk to cupboard_118.
Action 6: Open cupboard_118.
Action 7: look for fryingpan_2154 around cupboard_118.
Action 8: Walk to cupboard_117.
Action 9: look for fryingpan_2154 around cupboard_117.
Action 10: Walk to fridge_126.
Action 11: Switch off fridge_126.
Action 12: Open fridge_126.
Action 13: look for fryingpan_2154 around fridge_126.
Action 14: Walk to oven_127.
Action 15: Open oven_127.

##############################
From agent.py
exp(fryingpan_2154, oven_127)
Failed to find fryingpan_2154 around oven_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Find spectacles_2153. Find fryingpan_2154. Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is no longer close tray_128.Robot is no longer close food_cheese_2072.Robot is no longer close oven_127.Robot is no longer close oil_2013.Robot is no longer close food_carrot_2015.
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is close fryingpan_2154. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is close fryingpan_2154. Grabbing fryingpan_2154 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot is inside dining_room_41. Robot is close fryingpan_2154. Robot is close kitchen_counter_119. Robot is close stove_2135. Robot is no longer close kitchen_counter_122.
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot is inside dining_room_41. Robot is close fryingpan_2154. Robot is close kitchen_counter_119. Robot is close stove_2135. fryingpan_2154 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_lighter_2039_around_ceilinglamp_138(lighter:item):
    goal: not unknown(lighter)
    body:
        assert is_lighter(lighter)
        bind ceilinglamp_instance:item where:
            is_ceilinglamp(ceilinglamp_instance) and id[ceilinglamp_instance]==138
        achieve close_char(char,ceilinglamp_instance)
        if can_open(ceilinglamp_instance):
            achieve_once open(ceilinglamp_instance)
            exp(lighter,ceilinglamp_instance)
        else:
            exp(lighter,ceilinglamp_instance)
    eff:
        unknown[lighter]=False
        close[lighter,ceilinglamp_instance]=True
        close[ceilinglamp_instance,lighter]=True
    

behavior find_pencil_2020_around_bookshelf_196(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pencil,bookshelf_instance)
        else:
            exp(pencil,bookshelf_instance)
    eff:
        unknown[pencil]=False
        close[pencil,bookshelf_instance]=True
        close[bookshelf_instance,pencil]=True
    

behavior find_blow_dryer_2057_around_bathroom_cabinet_17(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(blow_dryer,bathroom_cabinet_instance)
        else:
            exp(blow_dryer,bathroom_cabinet_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
switchon_executor(stove_2135)
##############################
From agent.py
switchon_executor(stove_2135)
Robot is inside dining_room_41. Robot is close fryingpan_2154. Robot is close kitchen_counter_119. Robot is close stove_2135. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2014_around_bookshelf_196(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pencil,bookshelf_instance)
        else:
            exp(pencil,bookshelf_instance)
    eff:
        unknown[pencil]=False
        close[pencil,bookshelf_instance]=True
        close[bookshelf_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2154
        # Select the frying pan with ID 2154

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 122
        # Select the kitchen counter with ID 122

        achieve close_char(char, kitchen_counter)
        # Approach the kitchen counter where the frying pan is located

        bind oil: item where:
            is_oil(oil)
        # Select an item that is oil

        achieve inhand(oil)
        # Achieve holding the oil in hand

        achieve on(oil, fryingpan)
        # Put the oil into the frying pan

        achieve_once not inhand(oil)
        # Release the oil after putting it in the pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2020_around_desk_272(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(pencil,desk_instance)
        else:
            exp(pencil,desk_instance)
    eff:
        unknown[pencil]=False
        close[pencil,desk_instance]=True
        close[desk_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
def has_oil(oil:item):
    # Function to check if there is oil 
    symbol has_oil=exists o: item : is_oil(o)
    return has_oil

behavior pour_oil_in_pan(oil:item, fryingpan:item):
    body:
        achieve inside(oil, fryingpan)
        # Pour oil into the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        # Select frying pan on the stove

        if not has_oil(fryingpan):
            foreach oil: item:
                if is_oil(oil) and not visited(oil):
                    observe(oil, "Check where is the oil")
        
        bind oil: item where:
            is_oil(oil)
        pour_oil_in_pan(oil, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pencil_2020_around_nightstand_195(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==195
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(pencil,nightstand_instance)
        else:
            exp(pencil,nightstand_instance)
    eff:
        unknown[pencil]=False
        close[pencil,nightstand_instance]=True
        close[nightstand_instance,pencil]=True
    

#goal_representation
 
def has_oil(oil:item):
    # Function to check if there is oil 
    symbol has_oil=exists o: item : is_oil(o)
    return has_oil

behavior pour_oil_in_pan(oil:item, fryingpan:item):
    body:
        achieve inside(oil, fryingpan)
        # Pour oil into the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        # Select frying pan on the stove

        bind stove_2135: item where:
            is_stove(stove_2135)
        # Select stove with ID 2135

        if not has_oil(fryingpan):
            foreach oil: item:
                if is_oil(oil) and not visited(oil):
                    observe(oil, "Check where is the oil")
        
        bind oil: item where:
            is_oil(oil)
        pour_oil_in_pan(oil, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2115_around_curtain_204(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==204
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(milk,curtain_instance)
        else:
            exp(milk,curtain_instance)
    eff:
        unknown[milk]=False
        close[milk,curtain_instance]=True
        close[curtain_instance,milk]=True
    

behavior find_wooden_spoon_2000_around_tray_2068(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(wooden_spoon,tray_instance)
        else:
            exp(wooden_spoon,tray_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,tray_instance]=True
        close[tray_instance,wooden_spoon]=True
    

behavior find_shampoo_2019_around_bathroom_cabinet_17(shampoo:item):
    goal: not unknown(shampoo)
    body:
        assert is_shampoo(shampoo)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(shampoo,bathroom_cabinet_instance)
        else:
            exp(shampoo,bathroom_cabinet_instance)
    eff:
        unknown[shampoo]=False
        close[shampoo,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,shampoo]=True
    

#goal_representation
 
def has_oil(oil:item):
    # Function to check if there is oil 
    symbol has_oil=exists o: item : is_oil(o)
    return has_oil

behavior pour_oil_in_pan(oil:item, fryingpan:item):
    body:
        achieve inside(oil, fryingpan)
        # Pour oil into the frying pan

behavior __goal__():
    body:
        bind stove_2135: item where:
            is_stove(stove_2135)
        # Select stove with ID 2135

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        # Select frying pan on the stove

        if not has_oil(fryingpan):
            foreach oil: item:
                if is_oil(oil) and not visited(oil):
                    observe(oil, "Check where is the oil")
        
        bind oil: item where:
            is_oil(oil)
        pour_oil_in_pan(oil, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_oil(oil:item):
    # Function to check if there is oil 
    symbol has_oil=exists o: item : is_oil(o)
    return has_oil

behavior pour_oil_in_pan(oil:item, fryingpan:item):
    body:
        achieve inside(oil, fryingpan)
        # Pour oil into the frying pan

behavior __goal__():
    body:
        bind stove_2135: item where:
            is_stove(stove_2135)
        # Select stove with ID 2135

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2135)
        # Select frying pan on the stove

        if not has_oil(fryingpan):
            foreach oil: item:
                if is_oil(oil) and not visited(oil):
                    observe(oil, "Check where is the oil")
        
        bind oil: item where:
            is_oil(oil)
        pour_oil_in_pan(oil, fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(oil_2149)
Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close oil_2149. Robot is no longer close fryingpan_2154.Robot is no longer close kitchen_counter_119.Robot is no longer close stove_2135.
##############################
From agent.py
grab_executor(oil_2149)
Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close oil_2149. Grabbing oil_2149 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close oil_2149. Robot is close fryingpan_2154. Robot is close stove_2135. Robot is no longer close kitchen_counter_123.
##############################
From agent.py
putin_executor(oil_2149, fryingpan_2154)
Robot is inside dining_room_41. Robot is close oil_2149. Robot is close fryingpan_2154. Robot is close stove_2135. oil_2149 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

def find_egg_in_kitchen(egg:item):
    symbol is_in_kitchen=exists room: item : is_dining_room(room) and inside(egg, room)
    return is_in_kitchen

behavior crack_and_put_egg_in_pan(egg:item, pan:item):
    body:
        achieve cut(egg)
        achieve inside(egg, pan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and find_egg_in_kitchen(egg)
        # Select the egg in the kitchen area

        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan

        crack_and_put_egg_in_pan(egg, pan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def find_egg_in_kitchen(egg:item):
    symbol is_in_kitchen=exists room: item : is_dining_room(room) and inside(egg, room)
    return is_in_kitchen

behavior crack_and_put_egg_in_pan(egg:item, pan:item):
    body:
        achieve cut(egg)
        achieve inside(egg, pan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and find_egg_in_kitchen(egg)
        # Select the egg in the kitchen area

        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan

        crack_and_put_egg_in_pan(egg, pan)

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(cutting_board_2123)put_executor(food_egg_2092, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_egg_2092)cut_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close fridge_126. Robot is no longer close fryingpan_2154.Robot is no longer close oil_2149.Robot is no longer close stove_2135.
##############################
From agent.py
grab_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close cutting_board_2123. Robot is close kitchen_counter_119. Robot is no longer close fridge_126.
##############################
From agent.py
put_executor(food_egg_2092, cutting_board_2123)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close cutting_board_2123. Robot is close kitchen_counter_119. food_egg_2092 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_76)
Robot is inside dining_room_41. Robot is close wall_64. Robot is close knifeblock_76. Robot is no longer close cutting_board_2123.Robot is no longer close food_egg_2092.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
exp(knife_2122, knifeblock_76)
Failed to find knife_2122 around knifeblock_76. 
##############################
From agent.py-> find a plan in act()
walk_executor(door_38)exp(knife_2122, door_38)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_egg_2092)cut_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(door_38)
Robot is inside bathroom_1. Robot is close floor_12. Robot is close door_38. Robot is no longer inside dining_room_41.Robot is no longer close wall_64.Robot is no longer close knifeblock_76.
##############################
From agent.py
exp(knife_2122, door_38)
Failed to find knife_2122 around door_38. 
##############################
From agent.py-> find a plan in act()
walk_executor(stovefan_125)exp(knife_2122, stovefan_125)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_egg_2092)cut_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(stovefan_125)
Robot is inside dining_room_41. Robot is close stovefan_125. Robot is no longer inside bathroom_1.Robot is no longer close floor_12.Robot is no longer close door_38.
##############################
From agent.py
exp(knife_2122, stovefan_125)
Failed to find knife_2122 around stovefan_125. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2035)exp(knife_2122, knife_2035)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_egg_2092)cut_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(knife_2035)
Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close knife_2035. Robot is no longer close stovefan_125.
##############################
From agent.py
exp(knife_2122, knife_2035)
Failed to find knife_2122 around knife_2035. 
##############################
From agent.py-> find a plan in act()
walk_executor(ceilinglamp_237)exp(knife_2122, ceilinglamp_237)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_egg_2092)cut_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(ceilinglamp_237)
Find drawing_201. Find drawing_202. Robot is inside bedroom_162. Robot is close ceilinglamp_237. Robot is no longer inside dining_room_41.Robot is no longer close kitchen_counter_123.Robot is no longer close knife_2035.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find knife_2122 ?
Answer: Go to dining_room_41. Once there, locate table_114. Knife_2122 is on this table. Look for the object that matches the profile of a knife on table_114 to find knife_2122.

##############################
From agent.py
Human Instruction: The fryingpan_2154 is located in dining_room_41. You can find it on kitchen_counter_122. Look for the kitchen counter in the dining room area, and you'll see fryingpan_2154 placed on it.
Go to dining_room_41. Once there, locate table_114. Knife_2122 is on this table. Look for the object that matches the profile of a knife on table_114 to find knife_2122.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for fryingpan_2154 around kitchen_counter_119.
Action 3: Walk to kitchen_counter_123.
Action 4: look for fryingpan_2154 around kitchen_counter_123.
Action 5: Walk to cupboard_118.
Action 6: Open cupboard_118.
Action 7: look for fryingpan_2154 around cupboard_118.
Action 8: Walk to cupboard_117.
Action 9: look for fryingpan_2154 around cupboard_117.
Action 10: Walk to fridge_126.
Action 11: Switch off fridge_126.
Action 12: Open fridge_126.
Action 13: look for fryingpan_2154 around fridge_126.
Action 14: Walk to oven_127.
Action 15: Open oven_127.
Action 16: look for fryingpan_2154 around oven_127.
Action 17: Walk to kitchen_counter_122.
Action 18: look for fryingpan_2154 around kitchen_counter_122.
Action 19: Walk to fryingpan_2154.
Action 20: Grab fryingpan_2154.
Action 21: Walk to stove_2135.
Action 22: Put fryingpan_2154 on stove_2135.
Action 23: Switch on stove_2135.
Action 24: Walk to oil_2149.
Action 25: Grab oil_2149.
Action 26: Walk to fryingpan_2154.
Action 27: Put oil_2149 into fryingpan_2154.
Action 28: Walk to food_egg_2092.
Action 29: Grab food_egg_2092.
Action 30: Walk to cutting_board_2123.
Action 31: Put food_egg_2092 on cutting_board_2123.
Action 32: Walk to knifeblock_76.
Action 33: look for knife_2122 around knifeblock_76.
Action 34: Walk to door_38.
Action 35: look for knife_2122 around door_38.
Action 36: Walk to stovefan_125.
Action 37: look for knife_2122 around stovefan_125.
Action 38: Walk to knife_2035.
Action 39: look for knife_2122 around knife_2035.
Action 40: Walk to ceilinglamp_237.

##############################
From agent.py
exp(knife_2122, ceilinglamp_237)
Failed to find knife_2122 around ceilinglamp_237. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(knife_2122, table_114)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_egg_2092)cut_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(table_114)
Find mat_102. Find dry_pasta_2114. Find food_food_2021. Find drawing_111. Find knife_2122. Find cup_2133. Find table_cloth_2005. Find food_bread_2084. Find pillow_104. Find cup_2049. Find box_2038. Find clothes_hat_2117. Find clothes_gloves_2118. Find milk_2115. Find pillow_103. Find pillow_105. Find pillow_106. Find lighter_2004. Find lighter_2039. Find cup_2134. Find check_2058. Find cup_2132. Robot is inside dining_room_41. Robot is close table_114. Robot is close mat_102. Robot is close floor_47. Robot is no longer inside bedroom_162.Robot is no longer close ceilinglamp_237.
##############################
From agent.py
exp(knife_2122, table_114)
Find knife_2122. 
##############################
From agent.py-> find a plan in act()
walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_egg_2092)cut_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(knife_2122)
Robot is inside dining_room_41. Robot is close table_114. Robot is close knife_2122. Robot is no longer close mat_102.Robot is no longer close floor_47.
##############################
From agent.py
grab_executor(knife_2122)
Robot is inside dining_room_41. Robot is close table_114. Robot is close knife_2122. Grabbing knife_2122 by right hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close knife_2122. Robot is close cutting_board_2123. Robot is close food_egg_2092. Robot is no longer close table_114.
##############################
