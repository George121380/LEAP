From agent.py
Reset goals: The sub-goals are: 
['Iron the shirt and put it on the bed.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_washing_machine_2079(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_shirt,washing_machine_instance)
        else:
            exp(clothes_shirt,washing_machine_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,washing_machine_instance]=True
        close[washing_machine_instance,clothes_shirt]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)
        achieve clean(shirt) # Ensure the shirt is clean before ironing

behavior place_shirt_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        
        bind iron: item where:
            is_iron(iron)
        
        bind bed: item where:
            is_bed(bed)
        
        iron_shirt(shirt, iron) # Iron the shirt first
        place_shirt_on_bed(shirt, bed) # Place the ironed shirt on the bed

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior iron_shirt(shirt:item, iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)
        achieve clean(shirt) # Ensure the shirt is clean before ironing

behavior place_shirt_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        
        bind iron: item where:
            is_iron(iron)
        
        bind bed: item where:
            is_bed(bed)
        
        iron_shirt(shirt, iron) # Iron the shirt first
        place_shirt_on_bed(shirt, bed) # Place the ironed shirt on the bed

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2144)exp(iron_2161, ironing_board_2144)walk_executor(iron_2161)plugin_executor(iron_2161)switchon_executor(iron_2161)walk_executor(washing_machine_2079)open_executor(washing_machine_2079)exp(clothes_shirt_2158, washing_machine_2079)walk_executor(clothes_shirt_2158)wash_executor(clothes_shirt_2158)grab_executor(clothes_shirt_2158)walk_executor(bed_197)put_executor(clothes_shirt_2158, bed_197)
##############################
From agent.py
walk_executor(ironing_board_2144)
Robot is inside dining_room_41. Robot is close ironing_board_2144. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From agent.py
exp(iron_2161, ironing_board_2144)
Failed to find iron_2161 around ironing_board_2144. 
##############################
From agent.py-> find a plan in act()
walk_executor(washing_machine_2079)open_executor(washing_machine_2079)exp(iron_2161, washing_machine_2079)walk_executor(iron_2161)plugin_executor(iron_2161)switchon_executor(iron_2161)walk_executor(washing_machine_2079)exp(clothes_shirt_2158, washing_machine_2079)walk_executor(clothes_shirt_2158)wash_executor(clothes_shirt_2158)grab_executor(clothes_shirt_2158)walk_executor(bed_197)put_executor(clothes_shirt_2158, bed_197)
##############################
From agent.py
walk_executor(washing_machine_2079)
Robot is inside dining_room_41. Robot is close washing_machine_2079. Robot is no longer close ironing_board_2144.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From agent.py
open_executor(washing_machine_2079)
Robot is inside dining_room_41. Robot is close washing_machine_2079. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From agent.py
exp(iron_2161, washing_machine_2079)
Failed to find iron_2161 around washing_machine_2079. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(iron_2161, fridge_126)walk_executor(iron_2161)plugin_executor(iron_2161)switchon_executor(iron_2161)walk_executor(walllamp_307)exp(clothes_shirt_2158, walllamp_307)walk_executor(clothes_shirt_2158)wash_executor(clothes_shirt_2158)grab_executor(clothes_shirt_2158)walk_executor(bed_197)put_executor(clothes_shirt_2158, bed_197)
##############################
From agent.py
walk_executor(fridge_126)
Find food_onion_2048. Find food_food_2046. Find food_food_2073. Find food_steak_2080. Find food_apple_2081. Find food_bacon_2082. Find food_banana_2083. Find food_cake_2085. Find food_carrot_2086. Find food_cereal_2087. Find food_cheese_2088. Find food_chicken_2089. Find food_dessert_2090. Find food_donut_2091. Find food_egg_2092. Find food_fish_2093. Find food_food_2094. Find food_fruit_2095. Find food_hamburger_2096. Find food_ice_cream_2097. Find food_jam_2098. Find food_kiwi_2099. Find food_lemon_2100. Find food_noodles_2101. Find food_oatmeal_2102. Find food_orange_2103. Find food_onion_2104. Find food_peanut_butter_2105. Find food_pizza_2106. Find food_potato_2107. Find food_rice_2108. Find food_salt_2109. Find food_snack_2110. Find food_sugar_2111. Find food_turkey_2112. Find food_vegetable_2113. Find food_food_2001. Find sauce_2148. Find basket_for_clothes_2078. Find food_food_1000. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. Robot is no longer close washing_machine_2079.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From agent.py
switchoff_executor(fridge_126)
Find keyboard_211. Find mouse_213. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From agent.py
open_executor(fridge_126)
Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From agent.py
exp(iron_2161, fridge_126)
Failed to find iron_2161 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(iron_2161, cupboard_118)walk_executor(iron_2161)plugin_executor(iron_2161)switchon_executor(iron_2161)walk_executor(basket_for_clothes_2078)exp(clothes_shirt_2158, basket_for_clothes_2078)walk_executor(clothes_shirt_2158)wash_executor(clothes_shirt_2158)grab_executor(clothes_shirt_2158)walk_executor(bed_197)put_executor(clothes_shirt_2158, bed_197)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Find tray_128. Find pot_78. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close food_onion_2048.Robot is no longer close food_food_2046.Robot is no longer close food_food_2073.Robot is no longer close food_steak_2080.Robot is no longer close food_apple_2081.Robot is no longer close food_bacon_2082.Robot is no longer close food_banana_2083.Robot is no longer close food_cake_2085.Robot is no longer close food_carrot_2086.Robot is no longer close food_cereal_2087.Robot is no longer close food_cheese_2088.Robot is no longer close food_chicken_2089.Robot is no longer close food_dessert_2090.Robot is no longer close food_donut_2091.Robot is no longer close food_egg_2092.Robot is no longer close food_fish_2093.Robot is no longer close food_food_2094.Robot is no longer close food_fruit_2095.Robot is no longer close food_hamburger_2096.Robot is no longer close food_ice_cream_2097.Robot is no longer close food_jam_2098.Robot is no longer close food_kiwi_2099.Robot is no longer close food_lemon_2100.Robot is no longer close food_noodles_2101.Robot is no longer close food_oatmeal_2102.Robot is no longer close food_orange_2103.Robot is no longer close food_onion_2104.Robot is no longer close food_peanut_butter_2105.Robot is no longer close food_pizza_2106.Robot is no longer close food_potato_2107.Robot is no longer close food_rice_2108.Robot is no longer close food_salt_2109.Robot is no longer close food_snack_2110.Robot is no longer close food_sugar_2111.Robot is no longer close food_turkey_2112.Robot is no longer close food_vegetable_2113.Robot is no longer close food_food_2001.Robot is no longer close floor_44.Robot is no longer close sauce_2148.Robot is no longer close fridge_126.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From agent.py
exp(iron_2161, cupboard_118)
Failed to find iron_2161 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(iron_2161, kitchen_counter_119)walk_executor(iron_2161)plugin_executor(iron_2161)switchon_executor(iron_2161)walk_executor(basket_for_clothes_2078)exp(clothes_shirt_2158, basket_for_clothes_2078)walk_executor(clothes_shirt_2158)wash_executor(clothes_shirt_2158)grab_executor(clothes_shirt_2158)walk_executor(bed_197)put_executor(clothes_shirt_2158, bed_197)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From agent.py
exp(iron_2161, kitchen_counter_119)
Failed to find iron_2161 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(iron_2161, cupboard_117)walk_executor(iron_2161)plugin_executor(iron_2161)switchon_executor(iron_2161)walk_executor(basket_for_clothes_2078)exp(clothes_shirt_2158, basket_for_clothes_2078)walk_executor(clothes_shirt_2158)wash_executor(clothes_shirt_2158)grab_executor(clothes_shirt_2158)walk_executor(bed_197)put_executor(clothes_shirt_2158, bed_197)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close kitchen_counter_119.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find iron_2161 ?
Answer: Robot, you can find the iron_2161 inside dining_room_41. It is placed on top of bowl_2142. Look around for the bowl, as the iron is directly on it.

##############################
From agent.py
Human Instruction: Robot, you can find the iron_2161 inside dining_room_41. It is placed on top of bowl_2142. Look around for the bowl, as the iron is directly on it.

The actions you have taken:
Action 1: Walk to ironing_board_2144.
Action 2: look for iron_2161 around ironing_board_2144.
Action 3: Walk to washing_machine_2079.
Action 4: Open washing_machine_2079.
Action 5: look for iron_2161 around washing_machine_2079.
Action 6: Walk to fridge_126.
Action 7: Switch off fridge_126.
Action 8: Open fridge_126.
Action 9: look for iron_2161 around fridge_126.
Action 10: Walk to cupboard_118.
Action 11: Open cupboard_118.
Action 12: look for iron_2161 around cupboard_118.
Action 13: Walk to kitchen_counter_119.
Action 14: look for iron_2161 around kitchen_counter_119.
Action 15: Walk to cupboard_117.

##############################
From agent.py
exp(iron_2161, cupboard_117)
Failed to find iron_2161 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2142)exp(iron_2161, bowl_2142)walk_executor(iron_2161)plugin_executor(iron_2161)switchon_executor(iron_2161)walk_executor(basket_for_clothes_2078)exp(clothes_shirt_2158, basket_for_clothes_2078)walk_executor(clothes_shirt_2158)wash_executor(clothes_shirt_2158)grab_executor(clothes_shirt_2158)walk_executor(bed_197)put_executor(clothes_shirt_2158, bed_197)
##############################
From agent.py
walk_executor(bowl_2142)
Find iron_2161. Robot is inside dining_room_41. Robot is close bowl_2142. Robot is close kitchen_counter_119. Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From agent.py
exp(iron_2161, bowl_2142)
Find iron_2161. 
##############################
From agent.py-> find a plan in act()
walk_executor(iron_2161)plugin_executor(iron_2161)switchon_executor(iron_2161)walk_executor(basket_for_clothes_2078)exp(clothes_shirt_2158, basket_for_clothes_2078)walk_executor(clothes_shirt_2158)wash_executor(clothes_shirt_2158)grab_executor(clothes_shirt_2158)walk_executor(bed_197)put_executor(clothes_shirt_2158, bed_197)
##############################
From agent.py
walk_executor(iron_2161)
Robot is inside dining_room_41. Robot is close bowl_2142. Robot is close iron_2161. Robot is no longer close kitchen_counter_119.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From agent.py
plugin_executor(iron_2161)
Robot is inside dining_room_41. Robot is close bowl_2142. Robot is close iron_2161. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 10
##############################
From agent.py
switchon_executor(iron_2161)
Robot is inside dining_room_41. Robot is close bowl_2142. Robot is close iron_2161. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);
missed action num: 8
##############################
From agent.py
walk_executor(basket_for_clothes_2078)
Find clothes_pants_2157. Find clothes_shirt_2158. Find clothes_socks_2159. Find clothes_skirt_2160. Robot is inside dining_room_41. Robot is close clothes_pants_2157. Robot is close clothes_shirt_2158. Robot is close clothes_socks_2159. Robot is close clothes_skirt_2160. Robot is close basket_for_clothes_2078. Robot is no longer close iron_2161.Robot is no longer close bowl_2142.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);
missed action num: 7
##############################
From agent.py
exp(clothes_shirt_2158, basket_for_clothes_2078)
Find clothes_shirt_2158. 
##############################
From agent.py-> find a plan in act()
wash_executor(clothes_shirt_2158)grab_executor(clothes_shirt_2158)walk_executor(bed_197)put_executor(clothes_shirt_2158, bed_197)
##############################
From agent.py
wash_executor(clothes_shirt_2158)
Robot is inside dining_room_41. Robot is close clothes_pants_2157. Robot is close clothes_shirt_2158. Robot is close clothes_socks_2159. Robot is close clothes_skirt_2160. Robot is close basket_for_clothes_2078. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);
missed action num: 7
##############################
From agent.py
grab_executor(clothes_shirt_2158)
Robot is inside dining_room_41. Robot is close clothes_pants_2157. Robot is close clothes_shirt_2158. Robot is close clothes_socks_2159. Robot is close clothes_skirt_2160. Robot is close basket_for_clothes_2078. Grabbing clothes_shirt_2158 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);
missed action num: 6
##############################
From agent.py
walk_executor(bed_197)
Find clothes_dress_2116. Find clothes_scarf_2120. Find clothes_underwear_2121. Find drawing_201. Find pillow_207. Find pillow_208. Robot is inside bedroom_162. Robot is close clothes_shirt_2158. Robot is close bed_197. Robot is no longer inside dining_room_41.Robot is no longer close clothes_pants_2157.Robot is no longer close clothes_socks_2159.Robot is no longer close clothes_skirt_2160.Robot is no longer close basket_for_clothes_2078.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);
missed action num: 6
##############################
From agent.py
put_executor(clothes_shirt_2158, bed_197)
Robot is inside bedroom_162. Robot is close clothes_shirt_2158. Robot is close bed_197. clothes_shirt_2158 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);
missed action num: 7
##############################
From agent.py
Human Instruction: The sub-task requires you to iron the shirt. You found the iron and placed the shirt on the bed, but you didn't mention using the iron to iron the shirt. Ensure the shirt is ironed before placing it on the bed.

The actions you have taken:
Action 1: Walk to ironing_board_2144.
Action 2: look for iron_2161 around ironing_board_2144.
Action 3: Walk to washing_machine_2079.
Action 4: Open washing_machine_2079.
Action 5: look for iron_2161 around washing_machine_2079.
Action 6: Walk to fridge_126.
Action 7: Switch off fridge_126.
Action 8: Open fridge_126.
Action 9: look for iron_2161 around fridge_126.
Action 10: Walk to cupboard_118.
Action 11: Open cupboard_118.
Action 12: look for iron_2161 around cupboard_118.
Action 13: Walk to kitchen_counter_119.
Action 14: look for iron_2161 around kitchen_counter_119.
Action 15: Walk to cupboard_117.
Action 16: look for iron_2161 around cupboard_117.
Action 17: Walk to bowl_2142.
Action 18: look for iron_2161 around bowl_2142.
Action 19: Walk to iron_2161.
Action 20: Plug in iron_2161.
Action 21: Switch on iron_2161.
Action 22: Walk to basket_for_clothes_2078.
Action 23: look for clothes_shirt_2158 around basket_for_clothes_2078.
Action 24: Wash clothes_shirt_2158.
Action 25: Grab clothes_shirt_2158.
Action 26: Walk to bed_197.
Action 27: Put clothes_shirt_2158 on bed_197.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

behavior find_detergent_2155_around_dishwasher_129(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(detergent,dishwasher_instance)
        else:
            exp(detergent,dishwasher_instance)
    eff:
        unknown[detergent]=False
        close[detergent,dishwasher_instance]=True
        close[dishwasher_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(clothes_shirt: item, iron: item, ironing_board: item):
    body:
        achieve close(iron, clothes_shirt)
        achieve plugged(iron)
        achieve is_on(iron)
        # Once youre close to the clothes_shirt, make sure iron is ready and then proceed to iron
        achieve_once inhand(clothes_shirt)
        # Temporarily grasp the shirt to iron properly
        achieve close(clothes_shirt, ironing_board)
        # The ironing action is inferred as happening while close to ironing_board
        achieve clean(clothes_shirt)
        # Consider the shirt ironed by cleaning it off wrinkles

behavior place_shirt_on_bed(clothes_shirt: item, bed: item):
    body:
        achieve on(clothes_shirt, bed)
        # Place the shirt on the bed

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        # Select the specific iron with ID 2161
        
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and id[clothes_shirt] == 2158
        # Select the specific shirt with ID 2158
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2144
        # Select the specific ironing board with ID 2144
        
        bind bed: item where:
            is_bed(bed) and id[bed] == 197
        # Select the specific bed with ID 197
        
        iron_shirt(clothes_shirt, iron, ironing_board)
        place_shirt_on_bed(clothes_shirt, bed)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_cabinet_17(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(blow_dryer,bathroom_cabinet_instance)
        else:
            exp(blow_dryer,bathroom_cabinet_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
def has_ironed_shirt():
    # Function to check if there is an ironed shirt on the bed
    symbol ironed_shirt_exists=exists o: item : is_clothes(o) and is_clothes_shirt(o) and on(o, bed)
    return ironed_shirt_exists

behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve close_char(char, ironing_board)
        achieve plugged(iron)
        achieve is_on(iron)
        # Assuming the shirt is already on the ironing_board
        observe(shirt, "Check if the shirt is ironed")
        achieve clean(shirt)

behavior place_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind iron: item where:
            is_iron(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind bed: item where:
            is_bed(bed) and id[bed] == 197

        if not has_ironed_shirt():
            iron_shirt(shirt, iron, ironing_board)
            place_on_bed(shirt, bed)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: bed; available variables: [Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_pants_2157_around_nightstand_195(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==195
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(clothes_pants,nightstand_instance)
        else:
            exp(clothes_pants,nightstand_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,nightstand_instance]=True
        close[nightstand_instance,clothes_pants]=True
    

#goal_representation
 
def has_ironed_shirt():
    # Function to check if there is an ironed shirt on the bed
    symbol ironed_shirt_exists=exists o: item : is_clothes(o) and is_clothes_shirt(o) and on(o, bed)
    return ironed_shirt_exists

behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve close_char(char, ironing_board)
        achieve plugged(iron)
        achieve is_on(iron)
        # Assuming the shirt is already on the ironing_board
        observe(shirt, "Check if the shirt is ironed")
        achieve clean(shirt)

behavior place_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind iron: item where:
            is_iron(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind bed: item where:
            is_bed(bed) and id[bed] == 197

        if not has_ironed_shirt():
            iron_shirt(shirt, iron, ironing_board)
            place_on_bed(shirt, bed)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: bed; available variables: [Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

behavior find_clothes_pants_2157_around_dresser_274(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_pants,dresser_instance)
        else:
            exp(clothes_pants,dresser_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,dresser_instance]=True
        close[dresser_instance,clothes_pants]=True
    

#goal_representation
 
def has_ironed_shirt():
    # Function to check if there is an ironed shirt on the bed
    symbol ironed_shirt_exists=exists o: item : is_clothes(o) and is_clothes_shirt(o) and on(o, bed)
    return ironed_shirt_exists

behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve close_char(char, ironing_board)
        achieve plugged(iron)
        achieve is_on(iron)
        # Assuming the shirt is already on the ironing_board
        observe(shirt, "Check if the shirt is ironed")
        achieve clean(shirt)

behavior place_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        bind iron: item where:
            is_iron(iron)
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind bed: item where:
            is_bed(bed) and id[bed] == 197

        if not has_ironed_shirt():
            iron_shirt(shirt, iron, ironing_board)
            place_on_bed(shirt, bed)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "iron the shirt and put it on the bed." ?
Answer: Put the shirt on the ironing board. Turn on the iron. Put the iron on the shirt, push and pull it on the shirt. Finally, place the shirt on the bed.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_pants_2157_around_dresser_274(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_pants,dresser_instance)
        else:
            exp(clothes_pants,dresser_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,dresser_instance]=True
        close[dresser_instance,clothes_pants]=True
    

behavior find_hanger_294_around_dresser_274(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(hanger,dresser_instance)
        else:
            exp(hanger,dresser_instance)
    eff:
        unknown[hanger]=False
        close[hanger,dresser_instance]=True
        close[dresser_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
def has_free_iron_and_shirt(iron:item, shirt:item, board:item, bed:item):
    symbol free_iron_and_shirt=achieve is_on(iron) and plugged(iron) and on(shirt, board) and surfaces(board) and surfaces(bed)
    return free_iron_and_shirt

behavior iron_and_place_shirt_on_bed(shirt:item, ironing_board:item, bed:item):
    body:
        achieve clean(shirt) # Ensure the shirt is ironed out and clean
        achieve on(shirt, bed) # Place the ironed shirt on the bed

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        # Select the iron with ID 2161
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2158
        # Select the shirt with ID 2158

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board
             
        bind bed: item where:
            is_bed(bed) and id[bed] == 197
        # Select the bed with ID 197
        
        if has_free_iron_and_shirt(iron, shirt, ironing_board, bed):
            iron_and_place_shirt_on_bed(shirt, ironing_board, bed)
        # Iron the shirt and place it on the bed

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'is_on') at line 5796, column 40.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

behavior find_clothes_pants_2157_around_nightstand_195(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==195
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(clothes_pants,nightstand_instance)
        else:
            exp(clothes_pants,nightstand_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,nightstand_instance]=True
        close[nightstand_instance,clothes_pants]=True
    

behavior find_clothes_gloves_2118_around_dresser_274(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_gloves,dresser_instance)
        else:
            exp(clothes_gloves,dresser_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,dresser_instance]=True
        close[dresser_instance,clothes_gloves]=True
    

#goal_representation
 
def has_free_iron_and_shirt(iron:item, shirt:item, board:item, bed:item):
    symbol free_iron_and_shirt=plugged(iron) and on(shirt, board) and surfaces(board) and surfaces(bed)
    return free_iron_and_shirt

behavior iron_and_place_shirt_on_bed(shirt:item, board:item, bed:item):
    body:
        achieve clean(shirt) # Ensure the shirt is ironed out and clean
        achieve on(shirt, bed) # Place the ironed shirt on the bed

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        # Select the iron with ID 2161
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2158
        # Select the shirt with ID 2158

        bind board: item where:
            is_ironing_board(board)
        # Select an ironing board

        bind bed: item where:
            is_bed(bed) and id[bed] == 197
        # Select the bed with ID 197

        if has_free_iron_and_shirt(iron, shirt, board, bed):
            iron_and_place_shirt_on_bed(shirt, board, bed)
        # Iron the shirt and place it on the bed

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve close_char(char, ironing_board) 
        # Move the character close to the ironing board
        
        achieve on(shirt, ironing_board) 
        # Ensure the shirt is placed on the ironing board

        achieve_once inhand(iron) 
        # Grasp the iron to perform the task

        achieve plugged(iron) 
        # Ensure the iron is plugged in

        achieve is_on(iron) 
        # Turn on the iron

        # The actual ironing process can be considered as implicitly included at this point

        achieve_once is_off(iron)
        # Turn off the iron after use

behavior place_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed) 
        # Place the ironed shirt on the bed

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        # Select the iron with ID 2161

        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2158
        # Select the shirt with ID 2158

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board] == 2144
        # Select the ironing board with ID 2144

        bind bed: item where:
            is_bed(bed) and id[bed] == 197
        # Select the bed with ID 197

        iron_shirt(shirt, iron, ironing_board)
        place_on_bed(shirt, bed)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Place the shirt on the ironing board.', '2. Turn on the iron.', '3. Push and pull the iron on the shirt.', '4. Place the shirt on the bed.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_pants_2036_around_nightstand_195(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==195
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(clothes_pants,nightstand_instance)
        else:
            exp(clothes_pants,nightstand_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,nightstand_instance]=True
        close[nightstand_instance,clothes_pants]=True
    

behavior find_clothes_hat_2117_around_cutting_board_2123(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(clothes_hat,cutting_board_instance)
        else:
            exp(clothes_hat,cutting_board_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,cutting_board_instance]=True
        close[cutting_board_instance,clothes_hat]=True
    

behavior find_clothes_jacket_2119_around_dresser_274(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_jacket,dresser_instance)
        else:
            exp(clothes_jacket,dresser_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,dresser_instance]=True
        close[dresser_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_shirt_on_ironing_board(shirt:item, ironing_board:item):
    body:
        achieve on(shirt, ironing_board)

behavior iron_shirt(shirt:item, iron:item):
    body:
        achieve is_on(iron)
        # Assume the ironing process takes place here with iron and shirt interaction

behavior place_shirt_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Bind the shirt item

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Bind the ironing board

        bind iron: item where:
            is_iron(iron)
        # Bind the iron

        bind bed: item where:
            is_bed(bed)
        # Bind the bed

        place_shirt_on_ironing_board(shirt, ironing_board)
        iron_shirt(shirt, iron)
        place_shirt_on_bed(shirt, bed)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior place_shirt_on_ironing_board(shirt:item, ironing_board:item):
    body:
        achieve on(shirt, ironing_board)

behavior iron_shirt(shirt:item, iron:item):
    body:
        achieve is_on(iron)
        # Assume the ironing process takes place here with iron and shirt interaction

behavior place_shirt_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Bind the shirt item

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Bind the ironing board

        bind iron: item where:
            is_iron(iron)
        # Bind the iron

        bind bed: item where:
            is_bed(bed)
        # Bind the bed

        place_shirt_on_ironing_board(shirt, ironing_board)
        iron_shirt(shirt, iron)
        place_shirt_on_bed(shirt, bed)

##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2158)walk_executor(ironing_board_2144)put_executor(clothes_shirt_2158, ironing_board_2144)walk_executor(clothes_shirt_2158)grab_executor(clothes_shirt_2158)walk_executor(bed_197)put_executor(clothes_shirt_2158, bed_197)
##############################
From agent.py
grab_executor(clothes_shirt_2158)
Robot is inside bedroom_162. Robot is close clothes_shirt_2158. Robot is close bed_197. Grabbing clothes_shirt_2158 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);
missed action num: 6
##############################
From agent.py
walk_executor(ironing_board_2144)
Robot is inside dining_room_41. Robot is close clothes_shirt_2158. Robot is close ironing_board_2144. Robot is no longer inside bedroom_162.Robot is no longer close bed_197.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);
missed action num: 5
##############################
From agent.py
put_executor(clothes_shirt_2158, ironing_board_2144)
Robot is inside dining_room_41. Robot is close clothes_shirt_2158. Robot is close ironing_board_2144. clothes_shirt_2158 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);
missed action num: 4
##############################
From agent.py
walk_executor(clothes_shirt_2158)
Robot is inside bedroom_162. Robot is close clothes_shirt_2158. Robot is close ironing_board_2144. Robot is no longer inside dining_room_41.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);
missed action num: 4
##############################
From agent.py
grab_executor(clothes_shirt_2158)
Robot is inside bedroom_162. Robot is close clothes_shirt_2158. Robot is close ironing_board_2144. Grabbing clothes_shirt_2158 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);
missed action num: 5
##############################
From agent.py
walk_executor(bed_197)
Robot is inside bedroom_162. Robot is close clothes_shirt_2158. Robot is close bed_197. Robot is no longer close ironing_board_2144.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);
missed action num: 6
##############################
From agent.py
put_executor(clothes_shirt_2158, bed_197)
Robot is inside bedroom_162. Robot is close clothes_shirt_2158. Robot is close bed_197. clothes_shirt_2158 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g4.txt
Checking k1
missed actions: grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);
missed action num: 7
##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_cabinet_17(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(blow_dryer,bathroom_cabinet_instance)
        else:
            exp(blow_dryer,bathroom_cabinet_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,blow_dryer]=True
    

behavior find_clothes_pants_2157_around_nightstand_195(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==195
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(clothes_pants,nightstand_instance)
        else:
            exp(clothes_pants,nightstand_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,nightstand_instance]=True
        close[nightstand_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve is_on(iron) # Turn on the iron
              
behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        # Select the iron with ID 2161
        
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)
        # Turn on the iron

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. turn on the iron." ?
Answer: Press the power button on the iron.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        achieve is_on(iron)
        # Ensure the iron is turned on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron) 
        # Ensure the iron is plugged in
        achieve is_on(iron) 
        # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron identified as iron_2161
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)
        # Ensure the iron is turned on

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve is_on(iron) # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        # Select the iron with ID 2161

        turn_on_iron(iron) # Turn on the iron

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve plugged(iron)
        # Plug in the iron

        achieve is_on(iron)
        # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        # Select the iron with ID 2161

        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_cabinet_17(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(blow_dryer,bathroom_cabinet_instance)
        else:
            exp(blow_dryer,bathroom_cabinet_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron) 

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Turn the iron on

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve is_on(iron) # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron]==2161
        # Select iron with ID 2161
       
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        
        turn_on_iron(iron) # Turn on the iron

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron]==2161
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and has_switch(iron)
        # Select the iron that has a switch
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_cabinet_17(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(blow_dryer,bathroom_cabinet_instance)
        else:
            exp(blow_dryer,bathroom_cabinet_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        achieve is_on(iron)
        # Ensure the iron is turned on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        bind iron: item where:
            is_iron(iron) and close(iron, ironing_board)
        # Select the iron close to the ironing board
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation

behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        # Select the iron with ID 2161
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron]==2161
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve is_on(iron) # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron]==2161
        # Select the iron with ID 2161
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

behavior find_clothes_pants_2036_around_dresser_274(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_pants,dresser_instance)
        else:
            exp(clothes_pants,dresser_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,dresser_instance]=True
        close[dresser_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve is_on(iron) # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        
        turn_on_iron(iron) # Execute the behavior to turn on the iron

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron]==2161
        # Select iron with ID 2161
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_cabinet_17(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(blow_dryer,bathroom_cabinet_instance)
        else:
            exp(blow_dryer,bathroom_cabinet_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        # Select the iron with ID 2161
        turn_on_iron(iron)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve is_on(iron)
        # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        achieve plugged(iron) 
        # Ensure the iron is plugged in
        achieve is_on(iron) 
        # Turn on the iron

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
            # Ensure the item is an iron
        achieve plugged(iron)
        # Ensure the iron is plugged in
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

behavior find_detergent_2155_around_dishwasher_129(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(detergent,dishwasher_instance)
        else:
            exp(detergent,dishwasher_instance)
    eff:
        unknown[detergent]=False
        close[detergent,dishwasher_instance]=True
        close[dishwasher_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        # Select the iron with ID 2161
        achieve plugged(iron) # Ensure the iron is plugged in
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and has_switch(iron)
        # Select the iron with a switch
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

behavior find_detergent_2155_around_dishwasher_129(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(detergent,dishwasher_instance)
        else:
            exp(detergent,dishwasher_instance)
    eff:
        unknown[detergent]=False
        close[detergent,dishwasher_instance]=True
        close[dishwasher_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and has_switch(iron)
        # Select the iron with the switch
        
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve is_on(iron)
        # Ensure the iron is turned on

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and has_switch(iron)
        # Select an iron that has a switch to turn it on
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Ensure the iron is turned on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select an iron
       
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_cabinet_17(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(blow_dryer,bathroom_cabinet_instance)
        else:
            exp(blow_dryer,bathroom_cabinet_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and has_switch(iron)
        # Select the iron with a switch
        
        achieve plugged(iron) 
        # Ensure the iron is plugged in
        
        achieve is_on(iron)
        # Turn on the iron

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron]==2161
        # Select the iron with ID 2161
        
        assert plugged(iron)
        # Ensure that the iron is plugged in

        achieve is_on(iron)
        # Turn on the iron
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation

behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron]==2161
        # Select iron with ID 2161

        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_tray_2068_around_tray_128(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==128
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(tray,tray_instance)
        else:
            exp(tray,tray_instance)
    eff:
        unknown[tray]=False
        close[tray,tray_instance]=True
        close[tray_instance,tray]=True
    

behavior find_phone_2016_around_computer_276(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        # Select the iron with ID 2161
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation

behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)
        
behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        bind iron: item where:
            is_iron(iron) and close(iron, ironing_board)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve is_on(iron) # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron item

        achieve is_on(iron)
        # Turn on the iron

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_cabinet_17(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(blow_dryer,bathroom_cabinet_instance)
        else:
            exp(blow_dryer,bathroom_cabinet_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        # Select the iron with ID 2161

        turn_on_iron(iron) # Turn on the iron

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_cabinet_17(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(blow_dryer,bathroom_cabinet_instance)
        else:
            exp(blow_dryer,bathroom_cabinet_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation

behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and has_switch(iron) and plugged(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        assert plugged(iron) 
        achieve is_on(iron)
        
behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2144
        bind iron: item where:
            is_iron(iron) and close(iron, ironing_board)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation

behavior turn_on_iron(iron: item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

behavior find_clothes_pants_2036_around_trashcan_99(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(clothes_pants,trashcan_instance)
        else:
            exp(clothes_pants,trashcan_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,trashcan_instance]=True
        close[trashcan_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation

behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        # Select the iron with ID 2161
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select an iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve is_on(iron)
        # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron item
        turn_on_iron(iron) # Turn on the iron

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve is_on(iron) # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select an iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_cabinet_17(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(blow_dryer,bathroom_cabinet_instance)
        else:
            exp(blow_dryer,bathroom_cabinet_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,blow_dryer]=True
    

behavior find_towel_2128_around_bathroom_cabinet_17(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

behavior find_hanger_292_around_dresser_274(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(hanger,dresser_instance)
        else:
            exp(hanger,dresser_instance)
    eff:
        unknown[hanger]=False
        close[hanger,dresser_instance]=True
        close[dresser_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron) # Ensure the iron is plugged in
        achieve is_on(iron) # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron instance

        achieve is_on(iron)
        # Turn on the iron

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron) 
        # Ensure the iron is plugged in
        achieve is_on(iron) 
        # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron instance

        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Ensure the iron is turned on

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)
        # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and has_plug(iron)
        # Ensure the iron is the correct item with a plug
        
        achieve plugged(iron)
        # Ensure the iron is plugged in before turning it on
        
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior switch_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron]==2161
        # Select the iron with ID 2161
       
        switch_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron) 
        # Ensure the iron is plugged in
        achieve is_on(iron) 
        # Turn on the iron

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
       
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron: item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        turn_on_iron(iron)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2117_around_dresser_274(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_hat,dresser_instance)
        else:
            exp(clothes_hat,dresser_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,dresser_instance]=True
        close[dresser_instance,clothes_hat]=True
    

behavior find_detergent_2155_around_dishwasher_129(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(detergent,dishwasher_instance)
        else:
            exp(detergent,dishwasher_instance)
    eff:
        unknown[detergent]=False
        close[detergent,dishwasher_instance]=True
        close[dishwasher_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and has_switch(iron)
        # Select the iron with a switch
        achieve plugged(iron)
        # Ensure the iron is plugged in
        achieve is_on(iron)
        # Turn on the iron

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior activate_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron] == 2161
        activate_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_cabinet_17(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(blow_dryer,bathroom_cabinet_instance)
        else:
            exp(blow_dryer,bathroom_cabinet_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        achieve plugged(iron)
        # Ensure the iron is plugged in
        turn_on_iron(iron)
        # Turn on the iron

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and has_switch(iron)
        # Select the iron that has a switch
        
        achieve plugged(iron)
        # Ensure the iron is plugged in
        
        achieve is_on(iron)
        # Ensure the iron is turned on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2139_around_couch_269(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(vacuum_cleaner,couch_instance)
        else:
            exp(vacuum_cleaner,couch_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,couch_instance]=True
        close[couch_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron)
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_lighter_2039_around_nightstand_195(lighter:item):
    goal: not unknown(lighter)
    body:
        assert is_lighter(lighter)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==195
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(lighter,nightstand_instance)
        else:
            exp(lighter,nightstand_instance)
    eff:
        unknown[lighter]=False
        close[lighter,nightstand_instance]=True
        close[nightstand_instance,lighter]=True
    

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind iron: item where:
            is_iron(iron) and id[iron]==2161
        turn_on_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board_2144)
        # Ensure the shirt is on the ironing board

        bind iron: item where:
            is_iron(iron) and plugged(iron)
        # Select the pluggedin iron

        turn_on_iron(iron)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: ironing_board_2144; available variables: [Variable<shirt: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#goal_representation
plain
behavior turn_on_iron(iron: item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board

        bind iron: item where:
            is_iron(iron) and plugged(iron)
        # Select the plugged in iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Ensure it is recognized as an ironing board

        turn_on_iron(iron)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'plain') at line 5777, column 1.
Expected one of: 
	* _NEWLINE
	* DEF
	* UNDIRECTED_GENERATOR
	* TYPEDEF
	* CONTROLLER
	* BEHAVIOR
	* INCLUDE
	* INIT
	* GOAL
	* $END
	* OBJECTS
	* _PRAGMA_KEYWORD
	* GENERATOR
	* FEATURE
	* IMPORT
	* DOMAIN
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_blow_dryer_2057_around_bathroom_counter_18(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(blow_dryer,bathroom_counter_instance)
        else:
            exp(blow_dryer,bathroom_counter_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_counter_instance]=True
        close[bathroom_counter_instance,blow_dryer]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and on(shirt, ironing_board)
        # Ensure the shirt is on the ironing board

        bind iron: item where:
            is_iron(iron) and plugged(iron)
        # Select the pluggedin iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Ensure it is recognized as an ironing board

        turn_on_iron(iron)
 
#goal_representation_end

##############################
