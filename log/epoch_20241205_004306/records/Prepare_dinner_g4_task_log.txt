From agent.py
Reset goals: The sub-goals are: 
['1. Find the ingredients for fried rice with egg and wash them if necessary.', '2. Fry the egg and set it aside.', '3. Cook the rice.', '4. Combine the cooked rice with the fried egg in a pan and stir-fry until well mixed.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2127_around_fridge_126(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(cat,fridge_instance)
        else:
            exp(cat,fridge_instance)
    eff:
        unknown[cat]=False
        close[cat,fridge_instance]=True
        close[fridge_instance,cat]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_onion_2104_around_kitchen_counter_119(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_shoes_2033_around_ironing_board_2144(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(shoes,ironing_board_instance)
        else:
            exp(shoes,ironing_board_instance)
    eff:
        unknown[shoes]=False
        close[shoes,ironing_board_instance]=True
        close[ironing_board_instance,shoes]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_ingredient(ingredient:item, sink:item):
    body:
        achieve_once inside(ingredient, sink)
        # Ensure the ingredient is inside the sink

        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to wash the ingredient

        wash(ingredient)
        # Wash the ingredient

        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        foreach ingredient: item:
            if is_food_rice(ingredient) or is_food_egg(ingredient) or is_food_onion(ingredient):
                bind sink: item where:
                    is_sink(sink)
                clean_ingredient(ingredient, sink)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior clean_ingredient(ingredient:item, sink:item):
    body:
        achieve_once inside(ingredient, sink)
        # Ensure the ingredient is inside the sink

        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to wash the ingredient

        wash(ingredient)
        # Wash the ingredient

        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        foreach ingredient: item:
            if is_food_rice(ingredient) or is_food_egg(ingredient) or is_food_onion(ingredient):
                bind sink: item where:
                    is_sink(sink)
                clean_ingredient(ingredient, sink)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(sink_19)putin_executor(food_egg_2092, sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(food_egg_2092)wash_executor(food_egg_2092)walk_executor(kitchen_counter_119)exp(food_onion_2104, kitchen_counter_119)walk_executor(food_onion_2104)grab_executor(food_onion_2104)walk_executor(sink_19)putin_executor(food_onion_2104, sink_19)walk_executor(food_onion_2104)wash_executor(food_onion_2104)walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_rice_2108, cupboard_118)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(sink_19)putin_executor(food_rice_2108, sink_19)walk_executor(food_rice_2108)wash_executor(food_rice_2108)walk_executor(kitchen_counter_119)exp(food_onion_2009, kitchen_counter_119)walk_executor(food_onion_2009)grab_executor(food_onion_2009)walk_executor(sink_19)putin_executor(food_onion_2009, sink_19)walk_executor(food_onion_2009)wash_executor(food_onion_2009)walk_executor(kitchen_counter_119)exp(food_onion_2048, kitchen_counter_119)walk_executor(food_onion_2048)grab_executor(food_onion_2048)walk_executor(sink_19)putin_executor(food_onion_2048, sink_19)walk_executor(food_onion_2048)wash_executor(food_onion_2048)
##############################
From agent.py
walk_executor(fridge_126)
Find food_onion_2048. Find food_food_2046. Find food_food_2073. Find food_steak_2080. Find food_apple_2081. Find food_bacon_2082. Find food_banana_2083. Find food_cake_2085. Find food_carrot_2086. Find food_cereal_2087. Find food_cheese_2088. Find food_chicken_2089. Find food_dessert_2090. Find food_donut_2091. Find food_egg_2092. Find food_fish_2093. Find food_food_2094. Find food_fruit_2095. Find food_hamburger_2096. Find food_ice_cream_2097. Find food_jam_2098. Find food_kiwi_2099. Find food_lemon_2100. Find food_noodles_2101. Find food_oatmeal_2102. Find food_orange_2103. Find food_onion_2104. Find food_peanut_butter_2105. Find food_pizza_2106. Find food_potato_2107. Find food_rice_2108. Find food_salt_2109. Find food_snack_2110. Find food_sugar_2111. Find food_turkey_2112. Find food_vegetable_2113. Find food_food_2001. Find sauce_2148. Find basket_for_clothes_2078. Find food_food_1000. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchon_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(fridge_126);switchoff_executor(fridge_126);open_executor(fridge_126);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 17
##############################
From agent.py
switchoff_executor(fridge_126)
Find keyboard_211. Find mouse_213. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchon_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(fridge_126);open_executor(fridge_126);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 16
##############################
From agent.py
open_executor(fridge_126)
Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchon_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 14
##############################
From agent.py
exp(food_egg_2092, fridge_126)
Find food_egg_2092. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)walk_executor(sink_19)putin_executor(food_egg_2092, sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(food_egg_2092)wash_executor(food_egg_2092)walk_executor(food_onion_2104)grab_executor(food_onion_2104)walk_executor(sink_19)putin_executor(food_onion_2104, sink_19)walk_executor(food_onion_2104)wash_executor(food_onion_2104)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(sink_19)putin_executor(food_rice_2108, sink_19)walk_executor(food_rice_2108)wash_executor(food_rice_2108)walk_executor(kitchen_counter_119)exp(food_onion_2009, kitchen_counter_119)walk_executor(food_onion_2009)grab_executor(food_onion_2009)walk_executor(sink_19)putin_executor(food_onion_2009, sink_19)walk_executor(food_onion_2009)wash_executor(food_onion_2009)walk_executor(food_onion_2048)grab_executor(food_onion_2048)walk_executor(sink_19)putin_executor(food_onion_2048, sink_19)walk_executor(food_onion_2048)wash_executor(food_onion_2048)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchon_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 14
##############################
From agent.py
walk_executor(sink_19)
Find mat_32. Find detergent_2155. Find soap_2125. Find after_shave_2063. Find cleaning_solution_2143. Find drawing_33. Find phone_2029. Robot is inside bathroom_1. Robot is close food_egg_2092. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.Robot is no longer close food_onion_2048.Robot is no longer close food_food_2046.Robot is no longer close food_food_2073.Robot is no longer close food_steak_2080.Robot is no longer close food_apple_2081.Robot is no longer close food_bacon_2082.Robot is no longer close food_banana_2083.Robot is no longer close food_cake_2085.Robot is no longer close food_carrot_2086.Robot is no longer close food_cereal_2087.Robot is no longer close food_cheese_2088.Robot is no longer close food_chicken_2089.Robot is no longer close food_dessert_2090.Robot is no longer close food_donut_2091.Robot is no longer close food_fish_2093.Robot is no longer close food_food_2094.Robot is no longer close food_fruit_2095.Robot is no longer close food_hamburger_2096.Robot is no longer close food_ice_cream_2097.Robot is no longer close food_jam_2098.Robot is no longer close food_kiwi_2099.Robot is no longer close food_lemon_2100.Robot is no longer close food_noodles_2101.Robot is no longer close food_oatmeal_2102.Robot is no longer close food_orange_2103.Robot is no longer close food_onion_2104.Robot is no longer close food_peanut_butter_2105.Robot is no longer close food_pizza_2106.Robot is no longer close food_potato_2107.Robot is no longer close food_rice_2108.Robot is no longer close food_salt_2109.Robot is no longer close food_snack_2110.Robot is no longer close food_sugar_2111.Robot is no longer close food_turkey_2112.Robot is no longer close food_vegetable_2113.Robot is no longer close food_food_2001.Robot is no longer close floor_44.Robot is no longer close sauce_2148.Robot is no longer close fridge_126.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchon_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 14
##############################
From agent.py
putin_executor(food_egg_2092, sink_19)
Robot is inside bathroom_1. Robot is close food_egg_2092. Robot is close bathroom_counter_18. Robot is close sink_19. food_egg_2092 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchon_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 14
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer close sink_19.Robot is no longer close food_egg_2092.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchon_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 14
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
walk_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close sink_19. Robot is close food_egg_2092. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
wash_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close sink_19. Robot is close food_egg_2092. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
walk_executor(food_onion_2104)
Robot is inside dining_room_41. Robot is close food_onion_2104. Robot is close fridge_126. Robot is no longer close sink_19.Robot is no longer close food_egg_2092.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
grab_executor(food_onion_2104)
Robot is inside dining_room_41. Robot is close food_onion_2104. Robot is close fridge_126. Grabbing food_onion_2104 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
walk_executor(sink_19)
Robot is inside bathroom_1. Robot is close food_onion_2104. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.Robot is no longer close fridge_126.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
putin_executor(food_onion_2104, sink_19)
Robot is inside bathroom_1. Robot is close food_onion_2104. Robot is close bathroom_counter_18. Robot is close sink_19. food_onion_2104 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
walk_executor(food_onion_2104)
Robot is inside dining_room_41. Robot is close food_onion_2104. Robot is close sink_19. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
wash_executor(food_onion_2104)
Robot is inside dining_room_41. Robot is close food_onion_2104. Robot is close sink_19. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
walk_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close food_rice_2108. Robot is close fridge_126. Robot is no longer close food_onion_2104.Robot is no longer close sink_19.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
grab_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close food_rice_2108. Robot is close fridge_126. Grabbing food_rice_2108 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 10
##############################
From agent.py
walk_executor(sink_19)
Robot is inside bathroom_1. Robot is close food_rice_2108. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.Robot is no longer close fridge_126.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 10
##############################
From agent.py
putin_executor(food_rice_2108, sink_19)
Robot is inside bathroom_1. Robot is close food_rice_2108. Robot is close bathroom_counter_18. Robot is close sink_19. food_rice_2108 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
walk_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close food_rice_2108. Robot is close sink_19. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
wash_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close food_rice_2108. Robot is close sink_19. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is no longer close sink_19.Robot is no longer close food_rice_2108.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
exp(food_onion_2009, kitchen_counter_119)
Failed to find food_onion_2009 around kitchen_counter_119. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the ingredients needed for fried rice with egg.', '2. Cook the rice and scramble the eggs together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_around_item(item:item):
    # This function checks if there is any food around a specified item
    symbol has_food=exists o: item : is_food(o) and close(o, item)
    return has_food

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Select fridge with ID 126

        if not is_food_around_item(fridge):
            observe(fridge, "Check if there are any food items around the fridge") 

        bind egg: item where:
            is_food_egg(egg) and close(egg, fridge)
        bind rice: item where:
            is_food_rice(rice) and close(rice, fridge)
        bind onion: item where:
            is_food_onion(onion) and close(onion, fridge)
  
        achieve clean(egg)
        achieve clean(rice)
        achieve clean(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_fridge_open(fridge:item):
    # Determine if the fridge is open
    symbol is_open=exists fridge123: item : is_fridge(fridge123) and open(fridge123)
    return is_open

def check_for_ingredients(fridge: item):
    # Check if fried rice ingredients are in the fridge
    symbol has_ingredients=exists food: item : (is_food_egg(food) or is_food_onion(food) or is_food_rice(food)) and close(food, fridge)
    return has_ingredients

behavior find_ingredients_in_fridge(fridge: item):
    body:
        if not visited(fridge):
            observe(fridge, "Check for ingredients needed for fried rice with egg")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        
        if not is_fridge_open(fridge):
            achieve open(fridge)
        
        if not check_for_ingredients(fridge):
            find_ingredients_in_fridge(fridge)


#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the ingredients needed for fried rice with egg." ?
Answer: Your current plan is not aligned with the necessary steps. Please replan by focusing on first locating rice, eggs, and cooking oil in the kitchen as initial ingredients for fried rice with egg.

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate rice, eggs, and cooking oil in the kitchen.', '2. Cook the rice.', '3. Scramble the eggs.', '4. Fry the cooked rice with the scrambled eggs and cooking oil.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2046_around_cupboard_117(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_food,cupboard_instance)
        else:
            exp(food_food,cupboard_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cupboard_instance]=True
        close[cupboard_instance,food_food]=True
    

behavior find_book_2136_around_bookshelf_196(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def locate_ingredients(item: item):
    # Function to check if the item is rice, eggs, or cooking oil
    symbol is_ingredient = is_food_rice(item) or is_food_egg(item) or is_oil(item)
    return is_ingredient

behavior check_kitchen_for_ingredients():
    # Check all unvisited items in the kitchen for rice, eggs, or cooking oil
    body:
        foreach item: item:
            if not visited(item):
                observe(item, "Check if this is rice, eggs, or cooking oil")

behavior __goal__():
    body:
        if exists item: item : locate_ingredients(item):
            # If ingredients have been found, no need to search further
            bind item: item where:
                locate_ingredients(item)
            achieve close_char(char, item)
        else:
            # Check all unvisited items in the kitchen
            check_kitchen_for_ingredients()

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close sink_19. Robot is close food_egg_2092. Robot is no longer close kitchen_counter_119.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
Human Instruction: You need to locate cooking oil in the kitchen. You have already found the rice and eggs, but have not yet identified the cooking oil, which is also required to complete the sub-task.

Human Guidance: Your current plan is not aligned with the necessary steps. Please replan by focusing on first locating rice, eggs, and cooking oil in the kitchen as initial ingredients for fried rice with egg.
The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_egg_2092 around fridge_126.
Action 5: Grab food_egg_2092.
Action 6: Walk to sink_19.
Action 7: Put food_egg_2092 into sink_19.
Action 8: Walk to faucet_20.
Action 9: Switch on faucet_20.
Action 10: Walk to food_egg_2092.
Action 11: Wash food_egg_2092.
Action 12: Walk to food_onion_2104.
Action 13: Grab food_onion_2104.
Action 14: Walk to sink_19.
Action 15: Put food_onion_2104 into sink_19.
Action 16: Walk to food_onion_2104.
Action 17: Wash food_onion_2104.
Action 18: Walk to food_rice_2108.
Action 19: Grab food_rice_2108.
Action 20: Walk to sink_19.
Action 21: Put food_rice_2108 into sink_19.
Action 22: Walk to food_rice_2108.
Action 23: Wash food_rice_2108.
Action 24: Walk to kitchen_counter_119.
Action 25: look for food_onion_2009 around kitchen_counter_119.
Action 26: Walk to food_egg_2092.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior locate_cooking_oil(cooking_oil:item):
    body:
        observe(cooking_oil, "Locate the cooking oil in the kitchen")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice item

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind cooking_oil: item where:
            is_oil(cooking_oil)
        # Select the cooking oil item

        if not visited(cooking_oil):
            locate_cooking_oil(cooking_oil)
            # Observe the cooking oil to ensure it has been located in the kitchen
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior locate_cooking_oil(cooking_oil:item):
    body:
        observe(cooking_oil, "Locate the cooking oil in the kitchen")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice item

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind cooking_oil: item where:
            is_oil(cooking_oil)
        # Select the cooking oil item

        if not visited(cooking_oil):
            locate_cooking_oil(cooking_oil)
            # Observe the cooking oil to ensure it has been located in the kitchen
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(oil_2149, cupboard_117)walk_executor(oil_2149)obs(oil_2149, Locate the cooking oil in the kitchen)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close sink_19.Robot is no longer close food_egg_2092.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
exp(oil_2149, cupboard_117)
Failed to find oil_2149 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(oil_2149, cupboard_118)walk_executor(oil_2149)obs(oil_2149, Locate the cooking oil in the kitchen)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
exp(oil_2149, cupboard_118)
Failed to find oil_2149 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(doorjamb_190)exp(oil_2149, doorjamb_190)walk_executor(oil_2149)obs(oil_2149, Locate the cooking oil in the kitchen)
##############################
From agent.py
walk_executor(doorjamb_190)
Find drawing_202. Robot is inside bedroom_162. Robot is close doorjamb_190. Robot is no longer inside dining_room_41.Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
exp(oil_2149, doorjamb_190)
Failed to find oil_2149 around doorjamb_190. 
##############################
From agent.py-> find a plan in act()
walk_executor(stovefan_125)exp(oil_2149, stovefan_125)walk_executor(oil_2149)obs(oil_2149, Locate the cooking oil in the kitchen)
##############################
From agent.py
walk_executor(stovefan_125)
Robot is inside dining_room_41. Robot is close stovefan_125. Robot is no longer inside bedroom_162.Robot is no longer close doorjamb_190.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
exp(oil_2149, stovefan_125)
Failed to find oil_2149 around stovefan_125. 
##############################
From agent.py-> find a plan in act()
walk_executor(ceilinglamp_237)exp(oil_2149, ceilinglamp_237)walk_executor(oil_2149)obs(oil_2149, Locate the cooking oil in the kitchen)
##############################
From agent.py
walk_executor(ceilinglamp_237)
Find drawing_201. Robot is inside bedroom_162. Robot is close ceilinglamp_237. Robot is no longer inside dining_room_41.Robot is no longer close stovefan_125.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find oil_2149 ?
Answer: Go to dining_room_41 and locate kitchen_counter_123. You will find oil_2149 on kitchen_counter_123.

##############################
From agent.py
Human Instruction: You need to locate cooking oil in the kitchen. You have already found the rice and eggs, but have not yet identified the cooking oil, which is also required to complete the sub-task.
Go to dining_room_41 and locate kitchen_counter_123. You will find oil_2149 on kitchen_counter_123.

Human Guidance: Your current plan is not aligned with the necessary steps. Please replan by focusing on first locating rice, eggs, and cooking oil in the kitchen as initial ingredients for fried rice with egg.
The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_egg_2092 around fridge_126.
Action 5: Grab food_egg_2092.
Action 6: Walk to sink_19.
Action 7: Put food_egg_2092 into sink_19.
Action 8: Walk to faucet_20.
Action 9: Switch on faucet_20.
Action 10: Walk to food_egg_2092.
Action 11: Wash food_egg_2092.
Action 12: Walk to food_onion_2104.
Action 13: Grab food_onion_2104.
Action 14: Walk to sink_19.
Action 15: Put food_onion_2104 into sink_19.
Action 16: Walk to food_onion_2104.
Action 17: Wash food_onion_2104.
Action 18: Walk to food_rice_2108.
Action 19: Grab food_rice_2108.
Action 20: Walk to sink_19.
Action 21: Put food_rice_2108 into sink_19.
Action 22: Walk to food_rice_2108.
Action 23: Wash food_rice_2108.
Action 24: Walk to kitchen_counter_119.
Action 25: look for food_onion_2009 around kitchen_counter_119.
Action 26: Walk to food_egg_2092.
Action 27: Walk to cupboard_117.
Action 28: look for oil_2149 around cupboard_117.
Action 29: Walk to cupboard_118.
Action 30: Open cupboard_118.
Action 31: look for oil_2149 around cupboard_118.
Action 32: Walk to doorjamb_190.
Action 33: look for oil_2149 around doorjamb_190.
Action 34: Walk to stovefan_125.
Action 35: look for oil_2149 around stovefan_125.
Action 36: Walk to ceilinglamp_237.

##############################
From agent.py
exp(oil_2149, ceilinglamp_237)
Failed to find oil_2149 around ceilinglamp_237. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(oil_2149, kitchen_counter_123)walk_executor(oil_2149)obs(oil_2149, Locate the cooking oil in the kitchen)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Find oil_2149. Find knife_2035. Find food_kiwi_2054. Find food_orange_2027. Find tray_2068. Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close floor_45. Robot is no longer inside bedroom_162.Robot is no longer close ceilinglamp_237.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
exp(oil_2149, kitchen_counter_123)
Find oil_2149. 
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2149)obs(oil_2149, Locate the cooking oil in the kitchen)
##############################
From agent.py
walk_executor(oil_2149)
Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close oil_2149. Robot is no longer close floor_45.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From agent.py
obs(oil_2149, Locate the cooking oil in the kitchen)
Get this information:  oil_2149 is on kitchen_counter_123. oil_2149 is close to kitchen_counter_123. oil_2149 is close to character_240. oil_2149 is inside dining_room_41.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2016_around_computer_276(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_remote_control_2124_around_table_199(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(remote_control,table_instance)
        else:
            exp(remote_control,table_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,table_instance]=True
        close[table_instance,remote_control]=True
    

behavior find_pot_2040_around_oven_127(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(pot,oven_instance)
        else:
            exp(pot,oven_instance)
    eff:
        unknown[pot]=False
        close[pot,oven_instance]=True
        close[oven_instance,pot]=True
    

behavior find_oil_2149_around_window_191(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind window_instance:item where:
            is_window(window_instance) and id[window_instance]==191
        achieve close_char(char,window_instance)
        if can_open(window_instance):
            achieve_once open(window_instance)
            exp(oil,window_instance)
        else:
            exp(oil,window_instance)
    eff:
        unknown[oil]=False
        close[oil,window_instance]=True
        close[window_instance,oil]=True
    

#exp_behavior_end

#goal_representation

def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior cook_rice(pot:item, sink:item, stove:item):
    body:
        achieve inside(pot, sink)
        # Fill the pot with water from the sink
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            achieve has_water(pot)
            achieve_once is_off(faucet)
        
        achieve close_char(char, stove)
        # Place the pot onto the stove and start cooking the rice
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)

        cook_rice(pot, sink, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def can_cook_rice(cooker:item):
    symbol can_cook=exists stove: item : is_stove(stove) and close(stove, cooker)
    return can_cook

behavior wash_rice(rice:item, sink:item):
    body:
        achieve_once inside(rice, sink)
        # Ensure rice is placed inside the sink
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to clean
        
        wash(rice)
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior cook_rice(rice:item, oil:item, pot:item, cooker:item):
    body:
        achieve inside(rice, pot)
        achieve inside(oil, pot)
        achieve can_cook_rice(cooker)
        achieve on(pot, cooker)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and clean(rice)
        # Select clean rice
        
        bind oil: item where:
            is_oil(oil)
        # Select cooking oil
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink for washing rice if needed
        
        bind pot: item where:
            is_pot(pot)
        # Select a cooking pot
        
        bind cooker: item where:
            is_stove(cooker)
        # Select a stove for cooking

        # Ensure rice is clean before cooking
        if not clean(rice):
            wash_rice(rice, sink)
        
        cook_rice(rice, oil, pot, cooker)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function has_faucet not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_lighter_2039_around_walllamp_141(lighter:item):
    goal: not unknown(lighter)
    body:
        assert is_lighter(lighter)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==141
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(lighter,walllamp_instance)
        else:
            exp(lighter,walllamp_instance)
    eff:
        unknown[lighter]=False
        close[lighter,walllamp_instance]=True
        close[walllamp_instance,lighter]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#goal_representation
 
def can_cook_rice(cooker:item):
    symbol can_cook=exists stove: item : is_stove(stove) and close(stove, cooker)
    return can_cook

behavior wash_rice(rice:item, sink:item):
    body:
        achieve_once inside(rice, sink)
        # Ensure rice is placed inside the sink
        
        if is_faucet_item(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to clean
        
        wash(rice)
        
        if is_faucet_item(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior cook_rice(rice:item, oil:item, pot:item, cooker:item):
    body:
        achieve inside(rice, pot)
        achieve inside(oil, pot)
        achieve can_cook_rice(cooker)
        achieve on(pot, cooker)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and clean(rice)
        # Select clean rice
        
        bind oil: item where:
            is_oil(oil)
        # Select cooking oil
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink for washing rice if needed
        
        bind pot: item where:
            is_pot(pot)
        # Select a cooking pot
        
        bind cooker: item where:
            is_stove(cooker)
        # Select a stove for cooking

        # Ensure rice is clean before cooking
        if not clean(rice):
            wash_rice(rice, sink)
        
        cook_rice(rice, oil, pot, cooker)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_faucet_item not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2064_around_mouse_213(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==213
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(food_food,mouse_instance)
        else:
            exp(food_food,mouse_instance)
    eff:
        unknown[food_food]=False
        close[food_food,mouse_instance]=True
        close[mouse_instance,food_food]=True
    

behavior find_remote_control_2124_around_walllamp_306(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==306
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(remote_control,walllamp_instance)
        else:
            exp(remote_control,walllamp_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,walllamp_instance]=True
        close[walllamp_instance,remote_control]=True
    

behavior find_oil_2149_around_window_191(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind window_instance:item where:
            is_window(window_instance) and id[window_instance]==191
        achieve close_char(char,window_instance)
        if can_open(window_instance):
            achieve_once open(window_instance)
            exp(oil,window_instance)
        else:
            exp(oil,window_instance)
    eff:
        unknown[oil]=False
        close[oil,window_instance]=True
        close[window_instance,oil]=True
    

#goal_representation
 
def can_cook_rice(cooker:item):
    symbol can_cook=exists stove: item : is_stove(stove) and close(stove, cooker)
    return can_cook

behavior wash_rice(rice:item, sink:item):
    body:
        achieve_once inside(rice, sink)
        # Ensure rice is placed inside the sink
        
        if is_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to clean
        
        wash(rice)
        
        if is_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior cook_rice(rice:item, oil:item, pot:item, cooker:item):
    body:
        achieve inside(rice, pot)
        achieve inside(oil, pot)
        achieve can_cook_rice(cooker)
        achieve on(pot, cooker)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and clean(rice)
        # Select clean rice
        
        bind oil: item where:
            is_oil(oil)
        # Select cooking oil
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink for washing rice if needed
        
        bind pot: item where:
            is_pot(pot)
        # Select a cooking pot
        
        bind cooker: item where:
            is_stove(cooker)
        # Select a stove for cooking

        # Ensure rice is clean before cooking
        if not clean(rice):
            wash_rice(rice, sink)
        
        cook_rice(rice, oil, pot, cooker)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. cook the rice." ?
Answer: Boil some rice by pot.

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the rice using a pot.', '2. Fry the boiled rice with eggs using cooking oil.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2149_around_food_kiwi_2054(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind food_kiwi_instance:item where:
            is_food_kiwi(food_kiwi_instance) and id[food_kiwi_instance]==2054
        achieve close_char(char,food_kiwi_instance)
        if can_open(food_kiwi_instance):
            achieve_once open(food_kiwi_instance)
            exp(oil,food_kiwi_instance)
        else:
            exp(oil,food_kiwi_instance)
    eff:
        unknown[oil]=False
        close[oil,food_kiwi_instance]=True
        close[food_kiwi_instance,oil]=True
    

#exp_behavior_end

#goal_representation

def is_pot_empty(pot:item):
    # Determines if the specified pot is empty
    symbol empty=not exists o: item : inside(o, pot)
    return empty

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve inside(pot, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the pool has a faucet, turn it on to fill the pot with water
            achieve has_water(pot)
            # Fill the pot with water
            achieve_once is_off(faucet)
            # Turn off the faucet after filling

behavior start_boiling(pot:item):
    body:
        bind stove: item where:
            is_stove(stove)
        achieve on(pot, stove)
        # Place the pot on the stove for boiling

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) 
        # Select the rice
        
        achieve clean(rice)
        # Ensure the rice is clean
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind sink: item where:
            is_sink(sink)
        if is_pot_empty(pot):
            fill_pot_with_water(pot, sink)
        
        achieve inside(rice, pot)
        # Put rice into pot
        
        start_boiling(pot)
        # Begin boiling the rice

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'o') at line 5807, column 29.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_remote_control_2124_around_pot_78(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(remote_control,pot_instance)
        else:
            exp(remote_control,pot_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,pot_instance]=True
        close[pot_instance,remote_control]=True
    

behavior find_phone_2029_around_phone_2029(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==2029
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

#goal_representation
 
def is_pot_empty(pot:item):
    # Determines if the specified pot is empty
    symbol empty=not exists obj: item : inside(obj, pot)
    return empty

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve inside(pot, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            achieve has_water(pot)
            achieve_once is_off(faucet)

behavior start_boiling(pot:item):
    body:
        bind stove: item where:
            is_stove(stove)
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        achieve clean(rice)
        
        bind pot: item where:
            is_pot(pot)
        
        bind sink: item where:
            is_sink(sink)
        if is_pot_empty(pot):
            fill_pot_with_water(pot, sink)
        
        achieve inside(rice, pot)
        start_boiling(pot)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'obj') at line 5825, column 29.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_remote_control_2124_around_television_281(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==281
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(remote_control,television_instance)
        else:
            exp(remote_control,television_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,television_instance]=True
        close[television_instance,remote_control]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
def is_pot_empty(pot:item):
    # Determines if the specified pot is empty
    symbol empty=not exists obj: item : inside(obj, pot)
    return empty

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve inside(pot, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            achieve has_water(pot)
            achieve_once is_off(faucet)

behavior start_boiling(pot:item):
    body:
        bind stove: item where:
            is_stove(stove)
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        achieve clean(rice)
        
        bind pot: item where:
            is_pot(pot)
        
        bind sink: item where:
            is_sink(sink)
        if is_pot_empty(pot):
            fill_pot_with_water(pot, sink)
        
        achieve inside(rice, pot)
        start_boiling(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2149_around_food_kiwi_2054(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind food_kiwi_instance:item where:
            is_food_kiwi(food_kiwi_instance) and id[food_kiwi_instance]==2054
        achieve close_char(char,food_kiwi_instance)
        if can_open(food_kiwi_instance):
            achieve_once open(food_kiwi_instance)
            exp(oil,food_kiwi_instance)
        else:
            exp(oil,food_kiwi_instance)
    eff:
        unknown[oil]=False
        close[oil,food_kiwi_instance]=True
        close[food_kiwi_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_character_near_pot(pot: item):
    # Function to check if the character is near the pot
    symbol near_pot = close_char(char, pot)
    return near_pot

behavior find_and_fill_pot(pot: item, rice: item):
    body:
        if is_character_near_pot(pot):
            observe(pot, "Check if pot is on the stove")
            achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind rice: item where:
            is_food_rice(rice)
        find_and_fill_pot(pot, rice)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the rice in a pot.', '2. Fry the boiled rice and egg together using cooking oil.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2124_around_tvstand_116(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_pot_2040_around_oven_127(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(pot,oven_instance)
        else:
            exp(pot,oven_instance)
    eff:
        unknown[pot]=False
        close[pot,oven_instance]=True
        close[oven_instance,pot]=True
    

behavior find_fryingpan_2154_around_toaster_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==132
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(fryingpan,toaster_instance)
        else:
            exp(fryingpan,toaster_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,toaster_instance]=True
        close[toaster_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def find_pot_for_boiling_rice(pot:item):
    symbol is_for_rice = exists pot_type: item: is_pot(pot_type) and inside(pot, pot_type)
    return is_for_rice

behavior boil_rice(pot: item, rice: item, stove: item):
    body:
        achieve inside(rice, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior store_oil_near_stove(oil: item, kitchen_counter: item):
    body:
        achieve on(oil, kitchen_counter)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and find_pot_for_boiling_rice(pot)
        # Select a pot suitable for boiling rice

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 123
        # Select the kitchen counter with ID 123

        bind oil: item where:
            is_oil(oil) and on(oil, kitchen_counter)
        # Select the oil on the kitchen counter

        store_oil_near_stove(oil, kitchen_counter)
        boil_rice(pot, rice, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_oil_2149_around_food_kiwi_2054(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind food_kiwi_instance:item where:
            is_food_kiwi(food_kiwi_instance) and id[food_kiwi_instance]==2054
        achieve close_char(char,food_kiwi_instance)
        if can_open(food_kiwi_instance):
            achieve_once open(food_kiwi_instance)
            exp(oil,food_kiwi_instance)
        else:
            exp(oil,food_kiwi_instance)
    eff:
        unknown[oil]=False
        close[oil,food_kiwi_instance]=True
        close[food_kiwi_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def find_pot_in_kitchen(pot:item):
    symbol in_kitchen=exists room: item : is_dining_room(room) and inside(pot, room)
    return in_kitchen

behavior boil_rice_in_pot(rice:item, pot:item):
    body:
        achieve inside(rice, pot)
        # Ensure the rice is placed inside the pot
        if exists stove: item : is_stove(stove) and inside(stove, pot):
            bind stove: item where:
                is_stove(stove) and inside(stove, pot)
            achieve is_on(stove)
            # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice
        
        bind pot: item where:
            is_pot(pot) and find_pot_in_kitchen(pot)
        # Select a pot in the kitchen
        
        boil_rice_in_pot(rice, pot)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the rice in a pot.', '2. Cook the egg and mix it with the boiled rice.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2013_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def has_required_items(pot: item):
    # Function to check if required items for boiling, such as rice and water, are inside the pot
    symbol has_items=exists o: item : (is_food_rice(o) or has_water(o)) and inside(o, pot)
    return has_items

behavior fill_pot_with_water_and_rice(pot: item):
    body:
        bind sink: item where:
            is_sink(sink)
        # Identify the sink
        if not has_water(pot):
            achieve close_char(char, sink)  # Move close to the sink to fill water
            achieve has_water(pot)         # Ensure pot has water inside before boiling

        bind rice: item where:
            is_food_rice(rice) and not inside(rice, pot)
        # Bind the rice item
        achieve inside(rice, pot)
        # Place rice inside the pot

behavior boil_rice_in_pot(pot:item):
    body:
        achieve is_on(pot)
        # Turn on the pot to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        
        if not has_required_items(pot):
            fill_pot_with_water_and_rice(pot)

        boil_rice_in_pot(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2013_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_rice_in_pot(rice: item, pot: item, oil: item, sink: item, faucet: item):
    body:
        achieve_once inhand(rice)
        achieve close_char(char, sink)
        achieve_once is_on(faucet)
        wash(rice)
        achieve_once inside(rice, pot)
        achieve close_char(char, pot)
        observe(pot, "Check it has water and is located on the stove")
        achieve close_char(char, oil)
        achieve_once inhand(oil)
        observe(pot, "Check to ensure it has oil and is ready to boil")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind pot: item where:
            is_pot(pot)
        bind oil: item where:
            is_oil(oil) and id[oil] == 2149
            # The identified oil on the kitchen counter
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)

        boil_rice_in_pot(rice, pot, oil, sink, faucet)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 13
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k2
missed actions: walk_executor(food_egg_2092);grab_executor(food_egg_2092);walk_executor(fryingpan_2154);putin_executor(food_egg_2092, fryingpan_2154);walk_executor(oil_2149);grab_executor(oil_2149);walk_executor(fryingpan_2154);putin_executor(oil_2149, fryingpan_2154);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(fryingpan_2154);putin_executor(food_rice_2108, fryingpan_2154);grab_executor(fryingpan_2154);walk_executor(stove_2135);put_executor(fryingpan_2154, stove_2135);switchon_executor(stove_2135);
missed action num: 16
##############################
