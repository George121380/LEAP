From agent.py
Reset goals: The sub-goals are: 
['1. Sit on the chair in front of the computer in the home office.', '2. Touch the mouse near the computer to turn it on.', '3. Type on the keyboard to send an email.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_desk_193(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select a chair inside the home office

        sit_on_chair(chair)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_213_around_computer_276(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_chair_2003_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_computer_in_home_office(computer: item):
    # Function to check if the computer is in the home office
    symbol is_in_office = exists room: item : is_home_office(room) and inside(computer, room)
    return is_in_office

behavior sit_on_chair(chair: item, computer: item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair)
        # Select a chair to sit on

        bind computer: item where:
            is_computer(computer) and is_computer_in_home_office(computer)
        # Select a computer located in the home office

        sit_on_chair(chair, computer)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_computer_in_home_office(computer: item):
    # Function to check if the computer is in the home office
    symbol is_in_office = exists room: item : is_home_office(room) and inside(computer, room)
    return is_in_office

behavior sit_on_chair(chair: item, computer: item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair)
        # Select a chair to sit on

        bind computer: item where:
            is_computer(computer) and is_computer_in_home_office(computer)
        # Select a computer located in the home office

        sit_on_chair(chair, computer)

##############################
From agent.py-> find a plan in act()
walk_executor(desk_272)exp(chair_194, desk_272)walk_executor(chair_194)sit_executor(chair_194)
##############################
From agent.py
walk_executor(desk_272)
Find headset_2146. Find stamp_2043. Find stamp_2022. Find chair_271. Find phone_2147. Find mouse_280. Find keyboard_278. Robot is inside home_office_241. Robot is close desk_272. Robot is close floor_263. Robot is no longer inside dining_room_41.
##############################
From agent.py
exp(chair_194, desk_272)
Failed to find chair_194 around desk_272. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_193)exp(chair_194, desk_193)walk_executor(chair_194)sit_executor(chair_194)
##############################
From agent.py
walk_executor(desk_193)
Find chair_194. Find mouse_213. Find keyboard_211. Find check_2026. Find laser_pointer_2034. Robot is inside bedroom_162. Robot is close desk_193. Robot is close floor_163. Robot is close floor_164. Robot is no longer inside home_office_241.Robot is no longer close desk_272.Robot is no longer close floor_263.
##############################
From agent.py
exp(chair_194, desk_193)
Find chair_194. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_194)sit_executor(chair_194)
##############################
From agent.py
walk_executor(chair_194)
Robot is inside bedroom_162. Robot is close chair_194. Robot is no longer close desk_193.Robot is no longer close floor_163.Robot is no longer close floor_164.
##############################
From agent.py
sit_executor(chair_194)
Robot is inside bedroom_162. Robot is close chair_194. Robot is on chair_194. Robot is facing computer_209. 
##############################
From agent.py
Human Instruction: You need to locate and sit on the chair in front of the computer in the home office. Currently, you are sitting on a chair in the bedroom instead of the home office. Return to the home office and find the appropriate chair to complete this sub-task.

The actions you have taken:
Action 1: Walk to desk_272.
Action 2: look for chair_194 around desk_272.
Action 3: Walk to desk_193.
Action 4: look for chair_194 around desk_193.
Action 5: Walk to chair_194.
Action 6: Sit on chair_194.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2016_around_computer_276(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
behavior sit_on_office_chair(chair:item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select an item that represents the home office
        
        bind chair: item where:
            is_chair(chair) and inside(chair, home_office) and id[chair]==194
        # Select the chair with ID 194 located inside the home office
        
        sit_on_office_chair(chair) 
        # Execute the behavior to sit on the chair
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_71_around_computer_276(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_chair_194_around_computer_276(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(chair,computer_instance)
        else:
            exp(chair,computer_instance)
    eff:
        unknown[chair]=False
        close[chair,computer_instance]=True
        close[computer_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind office: item where:
            is_home_office(office)
        # Select the home office
        
        bind computer: item where:
            is_computer(computer) and inside(computer, office)
        # Select the computer inside the home office
        
        bind chair: item where:
            is_chair(chair) and close(computer, chair)
        # Select the chair close to the computer in the home office
        
        sit_on_chair(chair)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. sit on the chair in front of the computer in the home office." ?
Answer: Get close to the computer in the home office. Then sit on the chair in front of the computer.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_chair_271(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==271
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior find_chair_and_sit(chair:item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and sittable(chair) and inside(chair, home_office)
        # Select a sittable chair inside the home office

        find_chair_and_sit(chair)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2147_around_phone_2147(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==2147
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

behavior find_chair_194_around_computer_276(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(chair,computer_instance)
        else:
            exp(chair,computer_instance)
    eff:
        unknown[chair]=False
        close[chair,computer_instance]=True
        close[computer_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior achieve_sit_on_chair_in_home_office(chair: item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        bind chair: item where:
            is_chair(chair) and sittable(chair) and close(chair, home_office)
        # Select the chair close to the home office
        
        achieve_sit_on_chair_in_home_office(chair)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Go to the computer in the home office.', '2. Sit on the chair in front of the computer.', '3. Touch the mouse near the computer to turn it on.', '4. Type on the keyboard to send an email.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_computer_276(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(chair,computer_instance)
        else:
            exp(chair,computer_instance)
    eff:
        unknown[chair]=False
        close[chair,computer_instance]=True
        close[computer_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior go_to_computer(home_office: item, desk: item):
    body:
        achieve close_char(char, desk)
        # Approach the desk with the computer in the home office

behavior sit_on_chair(desk: item, chair: item):
    body:
        achieve close_char(char, chair)
        achieve on_char(char, chair)
        # Approach and sit on the chair near the computer desk

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office

        bind desk: item where:
            is_desk(desk) and inside(desk, home_office)
        # Select the desk inside the home office

        bind chair: item where:
            is_chair(chair) and close(chair, desk)
        # Select a chair close to the desk

        go_to_computer(home_office, desk)
        sit_on_chair(desk, chair)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior go_to_computer(home_office: item, desk: item):
    body:
        achieve close_char(char, desk)
        # Approach the desk with the computer in the home office

behavior sit_on_chair(desk: item, chair: item):
    body:
        achieve close_char(char, chair)
        achieve on_char(char, chair)
        # Approach and sit on the chair near the computer desk

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office

        bind desk: item where:
            is_desk(desk) and inside(desk, home_office)
        # Select the desk inside the home office

        bind chair: item where:
            is_chair(chair) and close(chair, desk)
        # Select a chair close to the desk

        go_to_computer(home_office, desk)
        sit_on_chair(desk, chair)

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(desk_272)standup_executor(char)walk_executor(chair_271)sit_executor(chair_271)
##############################
From agent.py
standup_executor(char)
Robot is inside bedroom_162. Robot is close chair_194. Robot is on chair_194. Robot is facing computer_209. 
##############################
From agent.py
walk_executor(desk_272)
Robot is inside home_office_241. Robot is close desk_272. Robot is close floor_263. Robot is on chair_194. Robot is no longer inside bedroom_162.Robot is no longer close chair_194.Robot is no longer facing computer_209.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_computer_276(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(chair,computer_instance)
        else:
            exp(chair,computer_instance)
    eff:
        unknown[chair]=False
        close[chair,computer_instance]=True
        close[computer_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior go_to_computer(computer: item):
    body:
        achieve close_char(char, computer)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer in the home office

        go_to_computer(computer)
        # Approach the computer in the home office
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior go_to_computer(computer: item):
    body:
        achieve close_char(char, computer)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer in the home office

        go_to_computer(computer)
        # Approach the computer in the home office
##############################
From agent.py-> find a plan in act()
walk_executor(computer_276)
##############################
From agent.py
walk_executor(computer_276)
Robot is inside home_office_241. Robot is close computer_276. Robot is on chair_194. Robot is no longer close desk_272.Robot is no longer close floor_263.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_chair_271(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==271
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_computer_chair(char: character, chair:item):
    body:
        assert is_chair(chair) and sittable(chair)
        achieve close_char(char, chair)
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select home office
        
        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select a chair located in the home office
        
        locate_computer_chair(char, chair)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2029_around_phone_2147(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==2147
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

behavior find_chair_194_around_bookshelf_196(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(chair,bookshelf_instance)
        else:
            exp(chair,bookshelf_instance)
    eff:
        unknown[chair]=False
        close[chair,bookshelf_instance]=True
        close[bookshelf_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind chair: item where:
            is_chair(chair) and close(chair, computer) and sittable(chair)
        # Select a chair close to the computer and can be sat on

        sit_on_chair(chair)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind chair: item where:
            is_chair(chair) and close(chair, computer) and sittable(chair)
        # Select a chair close to the computer and can be sat on

        sit_on_chair(chair)

##############################
From agent.py-> find a plan in act()
walk_executor(chair_271)sit_executor(chair_271)
##############################
From agent.py
walk_executor(chair_271)
Robot is inside home_office_241. Robot is close chair_271. Robot is on chair_194. Robot is no longer close computer_276.
##############################
From agent.py
sit_executor(chair_271)
Robot is inside home_office_241. Robot is close chair_271. Robot is on chair_194. Robot is on chair_271. Robot is facing computer_276. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2029_around_mouse_213(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==213
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(phone,mouse_instance)
        else:
            exp(phone,mouse_instance)
    eff:
        unknown[phone]=False
        close[phone,mouse_instance]=True
        close[mouse_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_mouse(mouse:item):
    body:
        achieve is_on(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer
        
        turn_on_mouse(mouse)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2029_around_mouse_213(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==213
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(phone,mouse_instance)
        else:
            exp(phone,mouse_instance)
    eff:
        unknown[phone]=False
        close[phone,mouse_instance]=True
        close[mouse_instance,phone]=True
    

behavior find_chair_271_around_table_270(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior touch_mouse(mouse:item):
    body:
        achieve is_on(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office
        
        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Identify the computer inside the home office
        
        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Identify the mouse close to the computer
        
        touch_mouse(mouse)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. touch the mouse near the computer to turn it on." ?
Answer: Get close to the computer in the home office, then touch the mouse to turn on the computer.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_hanger_294(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==294
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(chair,hanger_instance)
        else:
            exp(chair,hanger_instance)
    eff:
        unknown[chair]=False
        close[chair,hanger_instance]=True
        close[hanger_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior touch_mouse_and_turn_on(mouse: item):
    body:
        touch(mouse)
        achieve is_on(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)

        touch_mouse_and_turn_on(mouse)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_curtain_204(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==204
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(chair,curtain_instance)
        else:
            exp(chair,curtain_instance)
    eff:
        unknown[chair]=False
        close[chair,curtain_instance]=True
        close[curtain_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_computer_with_mouse(mouse:item):
    body:
        achieve is_on(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        turn_on_computer_with_mouse(mouse)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_curtain_204(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==204
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(chair,curtain_instance)
        else:
            exp(chair,curtain_instance)
    eff:
        unknown[chair]=False
        close[chair,curtain_instance]=True
        close[curtain_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office
        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer
        achieve close_char(char, mouse) 
        # Move close to the mouse
        touch(mouse) 
        # Touch the mouse to turn on the computer

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office
        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer
        achieve close_char(char, mouse) 
        # Move close to the mouse
        touch(mouse) 
        # Touch the mouse to turn on the computer

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(mouse_280)touch_executor(mouse_280)
##############################
From agent.py
standup_executor(char)
Robot is inside home_office_241. Robot is close chair_271. Robot is on chair_194. Robot is on chair_271. Robot is facing computer_276. 
##############################
From agent.py
walk_executor(mouse_280)
Robot is inside home_office_241. Robot is close mouse_280. Robot is close desk_272. Robot is close mousepad_279. Robot is on chair_194. Robot is on chair_271. Robot is no longer close chair_271.Robot is no longer facing computer_276.
##############################
From agent.py
touch_executor(mouse_280)
Robot is inside home_office_241. Robot is close mouse_280. Robot is close desk_272. Robot is close mousepad_279. Robot is on chair_194. Robot is on chair_271. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_table_199(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior send_email_via_keyboard(keyboard:item):
    body:
        achieve is_on(keyboard)
        type(keyboard)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select a computer

        bind keyboard: item where:
            is_keyboard(keyboard) and close(keyboard, computer)
        # Select a keyboard close to the computer

        send_email_via_keyboard(keyboard)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_curtain_204(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==204
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(chair,curtain_instance)
        else:
            exp(chair,curtain_instance)
    eff:
        unknown[chair]=False
        close[chair,curtain_instance]=True
        close[curtain_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior type_on_keyboard_to_send_email(keyboard:item):
    body:
        achieve is_on(keyboard)
        type(keyboard)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and is_on(computer)
        # The computer must be on

        bind keyboard: item where:
            is_keyboard(keyboard) and close(keyboard, computer)
        type_on_keyboard_to_send_email(keyboard)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "4. type on the keyboard to send an email." ?
Answer: Type on the keyboard to send an email.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_table_270(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior type_keyboard_to_send_email(keyboard:item):
    body:
        achieve is_on(keyboard) # Ensure the keyboard is turned on before typing
        type(keyboard) # Type on the keyboard to send the email

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office) 
        # Select the home office

        bind chair: item where:
            is_chair(chair) and sittable(chair) and inside(chair, home_office)
        # Select a chair in the home office

        bind keyboard: item where:
            is_keyboard(keyboard) and inside(keyboard, home_office)
        # Select the keyboard

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

        type_keyboard_to_send_email(keyboard)
        # Proceed to type on the keyboard

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior type_email_on_keyboard(keyboard:item):
    body:
        achieve is_on(keyboard)
        type(keyboard)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind keyboard: item where:
            is_keyboard(keyboard) and close(keyboard, computer)
        # Select the keyboard close to the computer

        type_email_on_keyboard(keyboard)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior type_on_keyboard_to_send_email(keyboard:item):
    body:
        achieve is_on(computer) # Ensure the computer is on
        achieve close(keyboard, computer) # Ensure the keyboard is close to the computer
        type(keyboard) # Type on the keyboard to send an email

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer item
        bind keyboard: item where:
            is_keyboard(keyboard)
        # Select the keyboard item
        
        achieve close_char(char, keyboard) # Ensure character is close to the keyboard
        type_on_keyboard_to_send_email(keyboard) # Perform the action to send an email
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: computer; available variables: [Variable<keyboard: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2133_around_coffe_maker_130(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==130
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

behavior find_food_onion_2104_around_kitchen_counter_119(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#goal_representation
behavior type_on_keyboard_to_send_email(keyboard:item, computer:item):
    body:
        achieve is_on(computer) # Ensure the computer is on
        achieve close(keyboard, computer) # Ensure the keyboard is close to the computer
        type(keyboard) # Type on the keyboard to send an email

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer item
        bind keyboard: item where:
            is_keyboard(keyboard)
        # Select the keyboard item
        
        achieve close_char(char, keyboard) # Ensure character is close to the keyboard
        type_on_keyboard_to_send_email(keyboard, computer) # Perform the action to send an email
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior send_email_with_keyboard(keyboard: item):
    body:
        achieve is_on(keyboard) # Ensure the keyboard is turned on
        type(keyboard) # Type on the keyboard to send an email

behavior __goal__():
    body:
        bind keyboard: item where:
            is_keyboard(keyboard)
        # Select an item that is a keyboard
        send_email_with_keyboard(keyboard)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_dresser_274(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(chair,dresser_instance)
        else:
            exp(chair,dresser_instance)
    eff:
        unknown[chair]=False
        close[chair,dresser_instance]=True
        close[dresser_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_keyboard_or_computer_on(item: item):
    # Function to check if a keyboard or computer is on
    symbol is_on_state = exists device: item : (is_keyboard(device) or is_computer(device)) and is_on(device)
    return is_on_state

behavior ensure_keyboard_and_computer_are_on(keyboard: item, computer: item):
    body:
        if not is_on(keyboard):
            achieve is_on(keyboard)
        if not is_on(computer):
            achieve is_on(computer)

behavior type_on_keyboard_to_send_email(keyboard: item):
    body:
        achieve on_char(char, keyboard)
        type(keyboard)

behavior __goal__():
    body:
        bind keyboard: item where:
            is_keyboard(keyboard)
        # Select an item that is a keyboard
        
        bind computer: item where:
            is_computer(computer)
        # Select an item that is a computer
        
        ensure_keyboard_and_computer_are_on(keyboard, computer)
        type_on_keyboard_to_send_email(keyboard)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_table_199(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_email_ready(computer: item):
    # Check if the computer is on and ready for email
    symbol ready=exists computer: item: is_computer(computer) and is_on(computer)
    return ready

behavior type_email_on_keyboard(keyboard: item):
    body:
        achieve is_on(keyboard)
        type(keyboard)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer in the home office

        if not is_email_ready(computer):
            observe(computer, "Check if the computer is on and ready for email")

        bind keyboard: item where:
            is_keyboard(keyboard) and close(keyboard, computer)
        # Select the keyboard close to the computer

        type_email_on_keyboard(keyboard)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Variable computer already exists.
##############################
