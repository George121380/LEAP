From agent.py
Reset goals: The sub-goals are: 
['1. Find a pot.', '2. Fill the pot with water.', '3. Boil the water using the pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_kitchen_counter_119(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_pot_available():
    # Function to check if there is a pot available in the environment
    symbol pot_available = exists x: item : is_pot(x) and visited(x)
    return pot_available

behavior __goal__():
    body:
        if exists pot: item : is_pot(pot) and visited(pot):
            # If a pot has already been found, simply get close to it
            bind pot: item where:
                is_pot(pot) and visited(pot)
            achieve close_char(char, pot)

        else:
            # If no pot has been found, inspect all unvisited items that could potentially be a pot
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Check if this is the pot youre looking for")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_pot_available():
    # Function to check if there is a pot available in the environment
    symbol pot_available = exists x: item : is_pot(x) and visited(x)
    return pot_available

behavior __goal__():
    body:
        if exists pot: item : is_pot(pot) and visited(pot):
            # If a pot has already been found, simply get close to it
            bind pot: item where:
                is_pot(pot) and visited(pot)
            achieve close_char(char, pot)

        else:
            # If no pot has been found, inspect all unvisited items that could potentially be a pot
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Check if this is the pot youre looking for")

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(pot_2138, kitchen_counter_119)walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Check if this is the pot youre looking for)walk_executor(kitchen_counter_119)exp(pot_78, kitchen_counter_119)walk_executor(pot_78)open_executor(pot_78)obs(pot_78, Check if this is the pot youre looking for)walk_executor(kitchen_counter_119)exp(pot_2040, kitchen_counter_119)walk_executor(pot_2040)open_executor(pot_2040)obs(pot_2040, Check if this is the pot youre looking for)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. 
##############################
From agent.py
exp(pot_2138, kitchen_counter_119)
Find pot_2138. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Check if this is the pot youre looking for)walk_executor(pot_78)obs(pot_78, Check if this is the pot youre looking for)walk_executor(kitchen_counter_119)exp(pot_2040, kitchen_counter_119)walk_executor(pot_2040)open_executor(pot_2040)obs(pot_2040, Check if this is the pot youre looking for)
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. 
##############################
From agent.py
open_executor(pot_2138)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. 
##############################
From agent.py
obs(pot_2138, Check if this is the pot youre looking for)
Get this information:  pot_2138 is on kitchen_counter_119. pot_2138 is close to kitchen_counter_119. pot_2138 is close to character_240. pot_2138 is inside dining_room_41. pot_2138 is OPEN.
##############################
From agent.py
walk_executor(pot_78)
Find oil_2013. Find food_cheese_2072. Find food_food_2064. Find food_carrot_2015. Robot is inside dining_room_41. Robot is close pot_78. Robot is close oven_127. Robot is no longer close pot_2138.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
obs(pot_78, Check if this is the pot youre looking for)
Get this information:  pot_78 is on oven_127. pot_78 is close to tray_128. pot_78 is close to wall_64. pot_78 is close to wall_67. pot_78 is close to toaster_132. pot_78 is close to wall_68. pot_78 is close to knifeblock_76. pot_78 is close to walllamp_141. pot_78 is close to floor_46. pot_78 is close to cupboard_117. pot_78 is close to cupboard_118. pot_78 is close to kitchen_counter_119. pot_78 is close to ceiling_55. pot_78 is close to kitchen_counter_122. pot_78 is close to sink_120. pot_78 is close to stovefan_125. pot_78 is close to oven_127. pot_78 is close to character_240. pot_78 is inside dining_room_41. pot_78 is CLEAN. pot_78 is OPEN.
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is no longer close pot_78.Robot is no longer close oven_127.
##############################
From agent.py
exp(pot_2040, kitchen_counter_119)
Failed to find pot_2040 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2033_around_dresser_274(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve has_water(pot)

def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior open_the_faucet(faucet:item):
    body:
        achieve is_on(faucet)

behavior close_the_faucet(faucet:item):
    body:
        achieve is_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2138
        # Select pot with ID 2138
        
        if not open(pot):
            achieve open(pot) 

        if not has_water(pot):
            bind sink: item where:
                is_sink(sink)
            # Select a sink

            if has_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet, sink)
                open_the_faucet(faucet)
                fill_pot_with_water(pot, sink)
                close_the_faucet(faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve has_water(pot)

def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior open_the_faucet(faucet:item):
    body:
        achieve is_on(faucet)

behavior close_the_faucet(faucet:item):
    body:
        achieve is_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2138
        # Select pot with ID 2138
        
        if not open(pot):
            achieve open(pot) 

        if not has_water(pot):
            bind sink: item where:
                is_sink(sink)
            # Select a sink

            if has_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet, sink)
                open_the_faucet(faucet)
                fill_pot_with_water(pot, sink)
                close_the_faucet(faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(faucet_20)
Find drawing_33. Find mat_32. Find phone_2029. Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer inside dining_room_41.Robot is no longer close pot_2138.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
grab_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer inside dining_room_41.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
Human Instruction: The pot needs to be filled with water. Ensure pot_2138 is positioned properly under the faucet so it can collect water before turning the faucet off.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for pot_2138 around kitchen_counter_119.
Action 3: Walk to pot_2138.
Action 4: Open pot_2138.
Action 5: Observe around pot_2138 with the question of Check if this is the pot youre looking for.
Action 6: Walk to pot_78.
Action 7: Observe around pot_78 with the question of Check if this is the pot youre looking for.
Action 8: Walk to kitchen_counter_119.
Action 9: look for pot_2040 around kitchen_counter_119.
Action 10: Walk to pot_2138.
Action 11: Walk to faucet_20.
Action 12: Switch on faucet_20.
Action 13: Walk to pot_2138.
Action 14: Grab pot_2138.
Action 15: Walk to faucet_20.
Action 16: Switch off faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2033_around_washing_machine_2079(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(shoes,washing_machine_instance)
        else:
            exp(shoes,washing_machine_instance)
    eff:
        unknown[shoes]=False
        close[shoes,washing_machine_instance]=True
        close[washing_machine_instance,shoes]=True
    

behavior find_food_dessert_2090_around_fridge_126(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_dessert,fridge_instance)
        else:
            exp(food_dessert,fridge_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,fridge_instance]=True
        close[fridge_instance,food_dessert]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(faucet:item):
    symbol is_faucet_present=exists f: item : is_faucet(f) and close(f, faucet)
    return is_faucet_present

behavior move_pot_to_faucet(pot:item, faucet:item):
    body:
        achieve close(pot, faucet)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if has_faucet(faucet):
            achieve open(faucet)
            achieve has_water(pot)
            achieve closed(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot) 
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        move_pot_to_faucet(pot, faucet)
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2033_around_ironing_board_2144(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(shoes,ironing_board_instance)
        else:
            exp(shoes,ironing_board_instance)
    eff:
        unknown[shoes]=False
        close[shoes,ironing_board_instance]=True
        close[ironing_board_instance,shoes]=True
    

behavior find_food_dessert_2090_around_cupboard_118(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_dessert,cupboard_instance)
        else:
            exp(food_dessert,cupboard_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,cupboard_instance]=True
        close[cupboard_instance,food_dessert]=True
    

#exp_behavior_end

#goal_representation
 
behavior position_pot_under_faucet(pot: item, faucet: item):
    body:
        achieve close(pot, faucet)
        # Ensure the pot is positioned under the faucet

behavior fill_pot_with_water(pot: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2138
        # Select pot with ID 2138

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        position_pot_under_faucet(pot, faucet)
        fill_pot_with_water(pot)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior position_pot_under_faucet(pot: item, faucet: item):
    body:
        achieve close(pot, faucet)
        # Ensure the pot is positioned under the faucet

behavior fill_pot_with_water(pot: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2138
        # Select pot with ID 2138

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        position_pot_under_faucet(pot, faucet)
        fill_pot_with_water(pot)

##############################
From agent.py-> find a plan in act()
put_executor(pot_2138, faucet_20)grab_executor(pot_2138)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
put_executor(pot_2138, faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. pot_2138 released by right hand. 
##############################
From agent.py
grab_executor(pot_2138)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. Grabbing pot_2138 by right hand. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
Human Instruction: Ensure the pot_2138 is filled with water. The pot should be positioned under the faucet when it is switched on, and left there until it is filled. There is no information or action indicating that pot_2138 has successfully been filled with water in the current task.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for pot_2138 around kitchen_counter_119.
Action 3: Walk to pot_2138.
Action 4: Open pot_2138.
Action 5: Observe around pot_2138 with the question of Check if this is the pot youre looking for.
Action 6: Walk to pot_78.
Action 7: Observe around pot_78 with the question of Check if this is the pot youre looking for.
Action 8: Walk to kitchen_counter_119.
Action 9: look for pot_2040 around kitchen_counter_119.
Action 10: Walk to pot_2138.
Action 11: Walk to faucet_20.
Action 12: Switch on faucet_20.
Action 13: Walk to pot_2138.
Action 14: Grab pot_2138.
Action 15: Walk to faucet_20.
Action 16: Switch off faucet_20.
Action 17: Put pot_2138 on faucet_20.
Action 18: Grab pot_2138.
Action 19: Switch on faucet_20.
Action 20: Switch off faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2033_around_washing_machine_2079(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(shoes,washing_machine_instance)
        else:
            exp(shoes,washing_machine_instance)
    eff:
        unknown[shoes]=False
        close[shoes,washing_machine_instance]=True
        close[washing_machine_instance,shoes]=True
    

behavior find_food_dessert_2090_around_fridge_126(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_dessert,fridge_instance)
        else:
            exp(food_dessert,fridge_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,fridge_instance]=True
        close[fridge_instance,food_dessert]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve on(pot, faucet)
        # Ensure the pot is positioned on the faucet
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the pot with water
        water(pot) 
        # Fill the pot with water

def has_pot_with_no_water(pot:item):
    symbol no_water=not has_water(pot)
    return no_water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2138
        # Select pot with ID 2138
        
        if has_pot_with_no_water(pot):
            observe(pot, "Check if there is any water in the pot")
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_shoes_2033_around_washing_machine_2079(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(shoes,washing_machine_instance)
        else:
            exp(shoes,washing_machine_instance)
    eff:
        unknown[shoes]=False
        close[shoes,washing_machine_instance]=True
        close[washing_machine_instance,shoes]=True
    

behavior find_food_dessert_2090_around_fridge_126(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_dessert,fridge_instance)
        else:
            exp(food_dessert,fridge_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,fridge_instance]=True
        close[fridge_instance,food_dessert]=True
    

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve on(pot, faucet)
        # Ensure the pot is positioned on the faucet
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the pot with water
        is_kitchen_counter(pot) 
        # Fill the pot with water

def has_pot_with_no_water(pot:item):
    symbol no_water=not has_water(pot)
    return no_water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2138
        # Select pot with ID 2138
        
        if has_pot_with_no_water(pot):
            observe(pot, "Check if there is any water in the pot")
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Expr statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
