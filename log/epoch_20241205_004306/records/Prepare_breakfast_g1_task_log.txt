From agent.py
Reset goals: The sub-goals are: 
['Slice the bread and toast it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_kitchen_counter_119(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_kitchen_counter_119(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def is_bread_sliced(bread: item):
    symbol sliced=exists part: item : is_food(bread) and cut(part) and inside(part, bread)
    return sliced

behavior slice_bread(bread:item, knife:item):
    body:
        achieve_once inhand(knife)
        achieve cut(bread)

behavior toast_sliced_bread(bread:item, toaster:item):
    body:
        achieve_once is_on(toaster)
        achieve inside(bread, toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        bind knife: item where:
            is_knife(knife)
        if not is_bread_sliced(bread):
            slice_bread(bread, knife)
        
        bind toaster: item where:
            is_toaster(toaster)
        
        toast_sliced_bread(bread, toaster)
        achieve is_off(toaster)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_kitchen_counter_119(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def is_cut_supported(item:item):
    # Function to check if an item can be cut
    symbol can_cut = exists i: item : is_knife(i) and close(i, item)
    return can_cut

def is_toasted(item:item):
    # Function to check if an item can be toasted in a toaster
    symbol can_toast = exists t: item : is_toaster(t) and close(t, item)
    return can_toast

behavior slice_bread(bread:item):
    body:
        if is_cut_supported(bread):
            achieve cut(bread)
        else:
            observe(bread, "Check if there is a knife to cut the bread")

behavior toast_bread(bread_slice:item, toaster:item):
    body:
        achieve inside(bread_slice, toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        if not is_cut(bread):
            slice_bread(bread)
        
        if is_cut(bread):
            bind toaster: item where:
                is_toaster(toaster)
            foreach bread_slice: item:
                if is_food_bread(bread_slice) and cut(bread_slice):
                    toast_bread(bread_slice, toaster)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_cut not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2122_around_kitchen_counter_119(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_bread_2084_around_kitchen_counter_119(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#goal_representation
 
def is_cut_supported(item:item):
    # Function to check if an item can be cut
    symbol can_cut = exists i: item : is_knife(i) and close(i, item)
    return can_cut

def is_toasted(item:item):
    # Function to check if an item can be toasted in a toaster
    symbol can_toast = exists t: item : is_toaster(t) and close(t, item)
    return can_toast

behavior slice_bread(bread:item):
    body:
        if is_cut_supported(bread):
            achieve cut(bread)
        else:
            observe(bread, "Check if there is a knife to cut the bread")

behavior toast_bread(bread_slice:item, toaster:item):
    body:
        achieve inside(bread_slice, toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        if not is_check(bread):
            slice_bread(bread)
        
        if is_check(bread):
            bind toaster: item where:
                is_toaster(toaster)
            foreach bread_slice: item:
                if is_food_bread(bread_slice) and cut(bread_slice):
                    toast_bread(bread_slice, toaster)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_cut_supported(item:item):
    # Function to check if an item can be cut
    symbol can_cut = exists i: item : is_knife(i) and close(i, item)
    return can_cut

def is_toasted(item:item):
    # Function to check if an item can be toasted in a toaster
    symbol can_toast = exists t: item : is_toaster(t) and close(t, item)
    return can_toast

behavior slice_bread(bread:item):
    body:
        if is_cut_supported(bread):
            achieve cut(bread)
        else:
            observe(bread, "Check if there is a knife to cut the bread")

behavior toast_bread(bread_slice:item, toaster:item):
    body:
        achieve inside(bread_slice, toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        if not is_check(bread):
            slice_bread(bread)
        
        if is_check(bread):
            bind toaster: item where:
                is_toaster(toaster)
            foreach bread_slice: item:
                if is_food_bread(bread_slice) and cut(bread_slice):
                    toast_bread(bread_slice, toaster)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_bread_2084, kitchen_counter_119)walk_executor(food_bread_2084)obs(food_bread_2084, Check if there is a knife to cut the bread)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. 
##############################
From agent.py
exp(food_bread_2084, kitchen_counter_119)
Failed to find food_bread_2084 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_bread_2084, cupboard_118)walk_executor(food_bread_2084)obs(food_bread_2084, Check if there is a knife to cut the bread)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(food_bread_2084, cupboard_118)
Failed to find food_bread_2084 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(food_bread_2084, cupboard_117)walk_executor(food_bread_2084)obs(food_bread_2084, Check if there is a knife to cut the bread)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(food_bread_2084, cupboard_117)
Failed to find food_bread_2084 around cupboard_117. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Slice and toast the bread.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_cutting_board_2123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_bread,cutting_board_instance)
        else:
            exp(food_bread,cutting_board_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cutting_board_instance]=True
        close[cutting_board_instance,food_bread]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_bread_found(bread:item):
    symbol bread_found=exists b: item : is_food_bread(b) and visited(b)
    return bread_found

def is_cutting_board_found(board:item):
    symbol cutting_board_found=exists b: item : is_cutting_board(b) and visited(b)
    return cutting_board_found

def is_toaster_found(toaster:item):
    symbol toaster_found=exists t: item : is_toaster(t) and visited(t)
    return toaster_found

behavior slice_bread(bread:item, board:item, knife:item):
    body:
        achieve on(bread, board)
        achieve_once inhand(knife)
        achieve cut(bread)

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        if not exists bread: item : is_food_bread(bread) and visited(bread):
            foreach bread: item:
                if is_food_bread(bread) and not visited(bread):
                    observe(bread, "Check this is the desired bread")

        if not exists board: item : is_cutting_board(board) and visited(board):
            foreach board: item:
                if is_cutting_board(board) and not visited(board):
                    observe(board, "Check if this is the cutting board suitable for use")

        if not exists toaster: item : is_toaster(toaster) and visited(toaster):
            foreach toaster: item:
                if is_toaster(toaster) and not visited(toaster):
                    observe(toaster, "Check if this is the toaster to be used")

        bind bread: item where:
            is_food_bread(bread) and visited(bread)
        
        bind board: item where:
            is_cutting_board(board) and visited(board)
        
        bind toaster: item where:
            is_toaster(toaster) and visited(toaster)
        
        bind knife: item where:
            is_knife(knife)
        
        slice_bread(bread, board, knife)
        toast_bread(bread, toaster)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'bread') at line 5634, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_cutting_board_2123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_bread,cutting_board_instance)
        else:
            exp(food_bread,cutting_board_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cutting_board_instance]=True
        close[cutting_board_instance,food_bread]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior find_utilized_items():
    body:
        if not exists bread: item : is_food_bread(bread) and visited(bread):
            foreach bread: item:
                if is_food_bread(bread) and not visited(bread):
                    observe(bread, "Check this is the desired bread")

        if not exists board: item : is_cutting_board(board) and visited(board):
            foreach board: item:
                if is_cutting_board(board) and not visited(board):
                    observe(board, "Check if this is the cutting board suitable for use")

        if not exists toaster: item : is_toaster(toaster) and visited(toaster):
            foreach toaster: item:
                if is_toaster(toaster) and not visited(toaster):
                    observe(toaster, "Check if this is the toaster to be used")

behavior slice_bread(bread:item, board:item, knife:item):
    body:
        achieve on(bread, board)
        achieve_once inhand(knife)
        achieve cut(bread)

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread) and visited(bread)
        
        bind board: item where:
            is_cutting_board(board) and visited(board)
        
        bind toaster: item where:
            is_toaster(toaster) and visited(toaster)
        
        bind knife: item where:
            is_knife(knife)
        
        slice_bread(bread, board, knife)
        toast_bread(bread, toaster)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'bread') at line 5629, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bread_2084_around_cutting_board_2123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_bread,cutting_board_instance)
        else:
            exp(food_bread,cutting_board_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cutting_board_instance]=True
        close[cutting_board_instance,food_bread]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
behavior find_utilized_items():
    body:
        if not exists bread: item : is_food_bread(bread) and visited(bread):
            foreach bread: item:
                if is_food_bread(bread) and not visited(bread):
                    observe(bread, "Check this is the desired bread")

        if not exists board: item : is_cutting_board(board) and visited(board):
            foreach board: item:
                if is_cutting_board(board) and not visited(board):
                    observe(board, "Check if this is the cutting board suitable for use")

        if not exists toaster: item : is_toaster(toaster) and visited(toaster):
            foreach toaster: item:
                if is_toaster(toaster) and not visited(toaster):
                    observe(toaster, "Check if this is the toaster to be used")

behavior slice_bread(bread:item, board:item, knife:item):
    body:
        achieve on(bread, board)
        achieve_once inhand(knife)
        achieve cut(bread)

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread) and visited(bread)
        
        bind board: item where:
            is_cutting_board(board) and visited(board)
        
        bind toaster: item where:
            is_toaster(toaster) and visited(toaster)
        
        bind knife: item where:
            is_knife(knife)
        
        slice_bread(bread, board, knife)
        toast_bread(bread, toaster)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_found_food_bread(food_bread: item):
    # Checks if the specified type of bread has been visited
    symbol found_bread=exists b: item : is_food_bread(b) and visited(b)
    return found_bread

behavior find_food_bread():
    body:
        if exists food_bread: item : is_food_bread(food_bread) and visited(food_bread):
            # If the bread has already been located, no need to search further
            bind food_bread: item where:
                is_food_bread(food_bread) and visited(food_bread)
            achieve close_char(char, food_bread)
            # Move character closer to the located food_bread

        else:
            # If food_bread not found, observe all locations you have visited
            foreach location: item:
                if is_cupboard(location) or is_kitchen_counter(location):
                    observe(location, "Check if food_bread is present")

def is_toaster_found(toaster:item):
    # Determine whether the toaster has been found
    symbol found_toaster=exists t: item : is_toaster(t) and visited(t)
    return found_toaster

behavior find_toaster():
    body:
        if exists toaster: item : is_toaster(toaster) and visited(toaster):
            # If the toaster has already been located, no need to search further
            bind toaster: item where:
                is_toaster(toaster) and visited(toaster)
            achieve close_char(char, toaster)
            # Move the character closer to the located toaster

        else:
            # Check all items categorized as toasters that have not been visited
            foreach toaster: item:
                if is_toaster(toaster) and not visited(toaster):
                    observe(toaster, "Check if this is the toaster")

behavior __goal__():
    body:
        find_food_bread()

        if has_found_food_bread(food_bread):
            bind food_bread: item where:
                is_food_bread(food_bread) and visited(food_bread)
            achieve_once inhand(food_bread)
            # Take the bread after its found

            find_toaster()
            if is_toaster_found(toaster):
                bind toaster: item where:
                    is_toaster(toaster) and visited(toaster)
                achieve inside(food_bread, toaster) # Place the bread inside the toaster
                achieve is_on(toaster) # Turn on the toaster

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_bread; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_cutting_board_2123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_bread,cutting_board_instance)
        else:
            exp(food_bread,cutting_board_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cutting_board_instance]=True
        close[cutting_board_instance,food_bread]=True
    

#goal_representation
 
def has_found_food_bread(food_bread: item):
    # Checks if the specified type of bread has been visited
    symbol found_bread=exists b: item : is_food_bread(b) and visited(b)
    return found_bread

behavior find_food_bread():
    body:
        if exists food_bread: item : is_food_bread(food_bread) and visited(food_bread):
            # If the bread has already been located, no need to search further
            bind food_bread: item where:
                is_food_bread(food_bread) and visited(food_bread)
            achieve close_char(char, food_bread)
            # Move character closer to the located food_bread

        else:
            # If food_bread not found, observe all locations you have visited
            foreach location: item:
                if is_cupboard(location) or is_kitchen_counter(location):
                    observe(location, "Check if food_bread is present")

def is_toaster_found(toaster:item):
    # Determine whether the toaster has been found
    symbol found_toaster=exists t: item : is_toaster(t) and visited(t)
    return found_toaster

behavior find_toaster():
    body:
        if exists toaster: item : is_toaster(toaster) and visited(toaster):
            # If the toaster has already been located, no need to search further
            bind toaster: item where:
                is_toaster(toaster) and visited(toaster)
            achieve close_char(char, toaster)
            # Move the character closer to the located toaster

        else:
            # Check all items categorized as toasters that have not been visited
            foreach toaster: item:
                if is_toaster(toaster) and not visited(toaster):
                    observe(toaster, "Check if this is the toaster")

behavior __goal__():
    body:
        find_food_bread()

        if has_found_food_bread(food_bread: item):
            bind food_bread: item where:
                is_food_bread(food_bread) and visited(food_bread)
            achieve_once inhand(food_bread)
            # Take the bread after its found

            find_toaster()
            if is_toaster_found(toaster: item):
                bind toaster: item where:
                    is_toaster(toaster) and visited(toaster)
                achieve inside(food_bread, toaster) # Place the bread inside the toaster
                achieve is_on(toaster) # Turn on the toaster

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5653, column 43.
Expected one of: 
	* RPAR
	* COMMA
	* EQUAL

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bread_2084_around_cutting_board_2123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_bread,cutting_board_instance)
        else:
            exp(food_bread,cutting_board_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cutting_board_instance]=True
        close[cutting_board_instance,food_bread]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior toast_bread(food_bread: item, toaster: item):
    body:
        achieve inside(food_bread, toaster) # Place the bread inside the toaster
        achieve is_on(toaster) # Turn on the toaster

behavior __goal__():
    body:
        if exists food_bread: item : is_food_bread(food_bread) and visited(food_bread):
            bind food_bread: item where:
                is_food_bread(food_bread) and visited(food_bread)
            achieve_once inhand(food_bread) # Take the bread after its found

            bind toaster: item where:
                is_toaster(toaster) and visited(toaster)
            toast_bread(food_bread, toaster)

        else:
            foreach location: item:
                # If food_bread is not found, observe all locations you have visited
                if is_cupboard(location) or is_kitchen_counter(location):
                    observe(location, "Check if food_bread is present")

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior toast_bread(food_bread: item, toaster: item):
    body:
        achieve inside(food_bread, toaster) # Place the bread inside the toaster
        achieve is_on(toaster) # Turn on the toaster

behavior __goal__():
    body:
        if exists food_bread: item : is_food_bread(food_bread) and visited(food_bread):
            bind food_bread: item where:
                is_food_bread(food_bread) and visited(food_bread)
            achieve_once inhand(food_bread) # Take the bread after its found

            bind toaster: item where:
                is_toaster(toaster) and visited(toaster)
            toast_bread(food_bread, toaster)

        else:
            foreach location: item:
                # If food_bread is not found, observe all locations you have visited
                if is_cupboard(location) or is_kitchen_counter(location):
                    observe(location, "Check if food_bread is present")

##############################
From agent.py-> find a plan in act()
obs(cupboard_117, Check if food_bread is present)walk_executor(cupboard_118)obs(cupboard_118, Check if food_bread is present)walk_executor(kitchen_counter_119)obs(kitchen_counter_119, Check if food_bread is present)walk_executor(kitchen_counter_122)obs(kitchen_counter_122, Check if food_bread is present)walk_executor(kitchen_counter_123)obs(kitchen_counter_123, Check if food_bread is present)
##############################
From agent.py
obs(cupboard_117, Check if food_bread is present)
Get this information:  cupboard_117 is on wall_67. cupboard_117 is close to wall_64. cupboard_117 is close to tray_128. cupboard_117 is close to wall_67. cupboard_117 is close to coffee_filter_2053. cupboard_117 is close to walllamp_140. cupboard_117 is close to knifeblock_76. cupboard_117 is close to pot_78. cupboard_117 is close to walllamp_141. cupboard_117 is close to ceiling_55. cupboard_117 is close to ceiling_54. cupboard_117 is close to kitchen_counter_119. cupboard_117 is close to sink_120. cupboard_117 is close to faucet_121. cupboard_117 is close to kitchen_counter_123. cupboard_117 is close to stovefan_125. cupboard_117 is close to oven_127. cupboard_117 is close to character_240. cupboard_117 is inside dining_room_41. coffee_filter_2053 is inside cupboard_117. cupboard_117 is CLEAN. cupboard_117 is OPEN.
##############################
From agent.py
walk_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
obs(cupboard_118, Check if food_bread is present)
Get this information:  knife_2037 is inside cupboard_118. cupboard_118 is inside dining_room_41. cupboard_118 is on wall_68. cupboard_118 is close to wall_64. cupboard_118 is close to dishwasher_129. cupboard_118 is close to coffe_maker_130. cupboard_118 is close to tray_128. cupboard_118 is close to toaster_132. cupboard_118 is close to wall_68. cupboard_118 is close to microwave_135. cupboard_118 is close to walllamp_139. cupboard_118 is close to walllamp_141. cupboard_118 is close to pot_78. cupboard_118 is close to tea_2066. cupboard_118 is close to food_peanut_butter_2077. cupboard_118 is close to knife_2037. cupboard_118 is close to ceiling_55. cupboard_118 is close to kitchen_counter_122. cupboard_118 is close to ceiling_60. cupboard_118 is close to stovefan_125. cupboard_118 is close to oven_127. cupboard_118 is close to character_240. food_peanut_butter_2077 is inside cupboard_118. tea_2066 is inside cupboard_118. cupboard_118 is CLEAN. cupboard_118 is OPEN.
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
obs(kitchen_counter_119, Check if food_bread is present)
Get this information:  pot_2138 is on kitchen_counter_119. bowl_2141 is on kitchen_counter_119. plate_2152 is on kitchen_counter_119. food_salt_2041 is on kitchen_counter_119. fork_2150 is on kitchen_counter_119. faucet_121 is on kitchen_counter_119. cutting_board_2123 is on kitchen_counter_119. kitchen_counter_119 is inside dining_room_41. bowl_2142 is on kitchen_counter_119. kitchen_counter_119 is close to tray_128. kitchen_counter_119 is close to walllamp_140. kitchen_counter_119 is close to walllamp_141. kitchen_counter_119 is close to food_salt_2041. kitchen_counter_119 is close to floor_45. kitchen_counter_119 is close to floor_46. kitchen_counter_119 is close to wall_64. kitchen_counter_119 is close to desk_193. kitchen_counter_119 is close to wall_67. kitchen_counter_119 is close to cutting_board_2123. kitchen_counter_119 is close to knifeblock_76. kitchen_counter_119 is close to pot_78. kitchen_counter_119 is close to cpuscreen_210. kitchen_counter_119 is close to stove_2135. kitchen_counter_119 is close to pot_2138. kitchen_counter_119 is close to bowl_2140. kitchen_counter_119 is close to bowl_2141. kitchen_counter_119 is close to bowl_2142. kitchen_counter_119 is close to fork_2150. kitchen_counter_119 is close to fork_2151. kitchen_counter_119 is close to plate_2152. kitchen_counter_119 is close to cupboard_117. kitchen_counter_119 is close to sink_120. kitchen_counter_119 is close to faucet_121. kitchen_counter_119 is close to kitchen_counter_123. kitchen_counter_119 is close to stovefan_125. kitchen_counter_119 is close to oven_127. kitchen_counter_119 is close to character_240. bowl_2140 is on kitchen_counter_119. fork_2151 is on kitchen_counter_119. sink_120 is inside kitchen_counter_119. stove_2135 is on kitchen_counter_119. kitchen_counter_119 is CLEAN. kitchen_counter_119 is OPEN.
##############################
From agent.py
walk_executor(kitchen_counter_122)
Find spectacles_2153. Find fryingpan_2154. Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
obs(kitchen_counter_122, Check if food_bread is present)
Get this information:  fryingpan_2154 is on kitchen_counter_122. toaster_132 is on kitchen_counter_122. kitchen_counter_122 is close to tray_128. kitchen_counter_122 is close to dishwasher_129. kitchen_counter_122 is close to coffe_maker_130. kitchen_counter_122 is close to trashcan_99. kitchen_counter_122 is close to toaster_132. kitchen_counter_122 is close to wall_68. kitchen_counter_122 is close to wall_64. kitchen_counter_122 is close to microwave_135. kitchen_counter_122 is close to spectacles_2153. kitchen_counter_122 is close to fryingpan_2154. kitchen_counter_122 is close to walllamp_139. kitchen_counter_122 is close to walllamp_141. kitchen_counter_122 is close to floor_46. kitchen_counter_122 is close to pot_78. kitchen_counter_122 is close to floor_51. kitchen_counter_122 is close to cupboard_118. kitchen_counter_122 is close to stovefan_125. kitchen_counter_122 is close to oven_127. kitchen_counter_122 is close to character_240. spectacles_2153 is on kitchen_counter_122. microwave_135 is on kitchen_counter_122. kitchen_counter_122 is inside dining_room_41. coffe_maker_130 is on kitchen_counter_122. kitchen_counter_122 is CLOSED. kitchen_counter_122 is DIRTY.
##############################
From agent.py
walk_executor(kitchen_counter_123)
Find oil_2149. Find knife_2035. Find food_kiwi_2054. Find food_orange_2027. Find tray_2068. Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close floor_45. Robot is no longer close kitchen_counter_122.
##############################
From agent.py
obs(kitchen_counter_123, Check if food_bread is present)
Get this information:  kitchen_counter_123 is inside dining_room_41. oil_2149 is on kitchen_counter_123. knife_2035 is on kitchen_counter_123. food_kiwi_2054 is on kitchen_counter_123. food_orange_2027 is on kitchen_counter_123. kitchen_counter_123 is on floor_45. kitchen_counter_123 is close to desk_193. kitchen_counter_123 is close to floor_163. kitchen_counter_123 is close to wall_67. kitchen_counter_123 is close to floor_164. kitchen_counter_123 is close to oil_2149. kitchen_counter_123 is close to food_kiwi_2054. kitchen_counter_123 is close to food_orange_2027. kitchen_counter_123 is close to floor_45. kitchen_counter_123 is close to wall_175. kitchen_counter_123 is close to cpuscreen_210. kitchen_counter_123 is close to keyboard_211. kitchen_counter_123 is close to knife_2035. kitchen_counter_123 is close to cupboard_117. kitchen_counter_123 is close to tray_2068. kitchen_counter_123 is close to kitchen_counter_119. kitchen_counter_123 is close to sink_120. kitchen_counter_123 is close to character_240. tray_2068 is on kitchen_counter_123. kitchen_counter_123 is CLEAN. kitchen_counter_123 is CLOSED.
##############################
From agent.py
Human Instruction: You need to find the food_bread item before you can slice and toast it. Continue searching for the bread in potential locations not yet observed, or consider reassessing previously checked locations to ensure bread presence wasn't missed.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_bread_2084 around kitchen_counter_119.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for food_bread_2084 around cupboard_118.
Action 6: Walk to cupboard_117.
Action 7: look for food_bread_2084 around cupboard_117.
Action 8: Observe around cupboard_117 with the question of Check if food_bread is present.
Action 9: Walk to cupboard_118.
Action 10: Observe around cupboard_118 with the question of Check if food_bread is present.
Action 11: Walk to kitchen_counter_119.
Action 12: Observe around kitchen_counter_119 with the question of Check if food_bread is present.
Action 13: Walk to kitchen_counter_122.
Action 14: Observe around kitchen_counter_122 with the question of Check if food_bread is present.
Action 15: Walk to kitchen_counter_123.
Action 16: Observe around kitchen_counter_123 with the question of Check if food_bread is present.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_fridge_126(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def has_bread(character: character):
    # Function to check if there is bread near the character
    symbol bread_found = exists b: item : is_food_bread(b) and close_char(character, b)
    return bread_found

behavior find_bread():
    body:
        if not has_bread(char):
            foreach location: item:
                if is_kitchen_counter(location) or is_cupboard(location) and not visited(location):
                    observe(location, "Check if food_bread is present nearby")

behavior slice_and_toast_bread(bread: item, toaster: item, cutting_board: item, knife: item):
    body:
        achieve_once inhand(knife)
        achieve on(bread, cutting_board)
        achieve cut(bread)
        achieve inside(bread, toaster)

behavior __goal__():
    body:
        if not has_bread(char):
            find_bread()

        bind bread: item where:
            is_food_bread(bread) and close_char(char, bread)
        bind toaster: item where:
            is_toaster(toaster)
        bind knife: item where:
            is_knife(knife)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        
        slice_and_toast_bread(bread, toaster, cutting_board, knife)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_fridge_126(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_bread(kitchen:item):
    # Function to check if there is bread on a specified kitchen counter
    symbol contains_bread=exists bread: item : is_food_bread(bread) and close(bread, kitchen)
    return contains_bread

behavior slice_bread(bread:item, knife:item):
    body:
        achieve cut(bread)

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind food_bread: item where:
            is_food_bread(food_bread)
        # Select the bread
        bind knife: item where:
            is_knife(knife) and close_char(char, knife)
        # Select a knife which is close
        
        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster
        
        if not has_bread(kitchen_counter_123):
            observe(kitchen_counter_123, "Check if there is any food bread on this kitchen counter")

        slice_bread(food_bread, knife)
        toast_bread(food_bread, toaster)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter_123; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bread_2084_around_fridge_126(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation

def has_bread(kitchen:item):
    # Function to check if there is bread on a specified kitchen counter
    symbol contains_bread=exists bread: item : is_food_bread(bread) and close(bread, kitchen)
    return contains_bread

behavior slice_bread(bread:item, knife:item):
    body:
        achieve cut(bread)

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind food_bread: item where:
            is_food_bread(food_bread)
        # Select the bread
        bind knife: item where:
            is_knife(knife) and close_char(char, knife)
        # Select a knife which is close
        
        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster

        bind kitchen_counter_123: item where:
            is_kitchen_counter(kitchen_counter_123)
        # Select kitchen counter 123
        
        if not has_bread(kitchen_counter_123):
            observe(kitchen_counter_123, "Check if there is any food bread on this kitchen counter")

        slice_bread(food_bread, knife)
        toast_bread(food_bread, toaster)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "slice and toast the bread." ?
Answer: Cut the bread and put it in the toaster.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_fridge_126(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def find_location_of_bread(bread: item):
    symbol is_found = exists loc: item: close(loc, bread) and visited(loc)
    return is_found

def is_toaster_functional(toaster: item):
    symbol is_functional = is_on(toaster) and plugged(toaster)
    return is_functional

behavior prepare_bread_for_toasting(bread:item, knife:item, toaster:item, location:item):
    body:
        achieve close_char(char, location)
        achieve_once inhand(bread)
        achieve_once inhand(knife)
        achieve cut(bread)
        achieve inside(bread, toaster)

behavior ensure_toaster_is_ready(toaster: item):
    body:
        if not is_toaster_functional(toaster):
            if exists plug: item: has_plug(plug) and close(plug, toaster):
                achieve plugged(toaster)
            achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)

        if not find_location_of_bread(bread):
            foreach location: item:
                if (is_kitchen_counter(location) or is_cupboard(location)) and not visited(location):
                    observe(location, "Check if food_bread is present")

        bind knife: item where:
            is_knife(knife)
        
        bind toaster: item where:
            is_toaster(toaster)

        if not visited(toaster):
            observe(toaster, "Check if the toaster is is on and plugged")

        ensure_toaster_is_ready(toaster)
        prepare_bread_for_toasting(bread, knife, toaster, location)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: location; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bread_2084_around_fridge_126(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
def find_location_of_bread(bread: item):
    symbol is_found = exists loc: item: close(loc, bread) and visited(loc)
    return is_found

def is_toaster_functional(toaster: item):
    symbol is_functional = is_on(toaster) and plugged(toaster)
    return is_functional

behavior prepare_bread_for_toasting(bread:item, knife:item, toaster:item, location:item):
    body:
        achieve close_char(char, location)
        achieve_once inhand(bread)
        achieve_once inhand(knife)
        achieve cut(bread)
        achieve inside(bread, toaster)

behavior ensure_toaster_is_ready(toaster: item):
    body:
        if not is_toaster_functional(toaster):
            if exists plug: item: has_plug(plug) and close(plug, toaster):
                achieve plugged(toaster)
            achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)

        if not find_location_of_bread(bread):
            foreach location: item:
                if (is_kitchen_counter(location) or is_cupboard(location)) and not visited(location):
                    observe(location, "Check if food_bread is present")

        bind knife: item where:
            is_knife(knife)
        
        bind toaster: item where:
            is_toaster(toaster)
        
        bind location: item where:
            is_kitchen_counter(location) or is_cupboard(location)
        
        if not visited(toaster):
            observe(toaster, "Check if the toaster is is on and plugged")

        ensure_toaster_is_ready(toaster)
        prepare_bread_for_toasting(bread, knife, toaster, location)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_fridge_126(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior cut_bread(bread:item, knife:item):
    body:
        achieve cut(bread)

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        bind knife: item where:
            is_knife(knife)
        bind toaster: item where:
            is_toaster(toaster)

        cut_bread(bread, knife)
        toast_bread(bread, toaster)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior cut_bread(bread:item, knife:item):
    body:
        achieve cut(bread)

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        bind knife: item where:
            is_knife(knife)
        bind toaster: item where:
            is_toaster(toaster)

        cut_bread(bread, knife)
        toast_bread(bread, toaster)
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bread_2084, fridge_126)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_bread_2084)cut_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)
##############################
From agent.py
walk_executor(fridge_126)
Find food_onion_2048. Find food_food_2046. Find food_food_2073. Find food_steak_2080. Find food_apple_2081. Find food_bacon_2082. Find food_banana_2083. Find food_cake_2085. Find food_carrot_2086. Find food_cereal_2087. Find food_cheese_2088. Find food_chicken_2089. Find food_dessert_2090. Find food_donut_2091. Find food_egg_2092. Find food_fish_2093. Find food_food_2094. Find food_fruit_2095. Find food_hamburger_2096. Find food_ice_cream_2097. Find food_jam_2098. Find food_kiwi_2099. Find food_lemon_2100. Find food_noodles_2101. Find food_oatmeal_2102. Find food_orange_2103. Find food_onion_2104. Find food_peanut_butter_2105. Find food_pizza_2106. Find food_potato_2107. Find food_rice_2108. Find food_salt_2109. Find food_snack_2110. Find food_sugar_2111. Find food_turkey_2112. Find food_vegetable_2113. Find food_food_2001. Find sauce_2148. Find basket_for_clothes_2078. Find food_food_1000. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. Robot is no longer close kitchen_counter_123.Robot is no longer close floor_45.
##############################
From agent.py
switchoff_executor(fridge_126)
Find mouse_213. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
open_executor(fridge_126)
Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
exp(food_bread_2084, fridge_126)
Failed to find food_bread_2084 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(toaster_132)exp(food_bread_2084, toaster_132)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)exp(knife_2122, cutting_board_2123)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_bread_2084)cut_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)
##############################
From agent.py
walk_executor(toaster_132)
Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is close toaster_132. Robot is no longer close food_onion_2048.Robot is no longer close food_food_2046.Robot is no longer close food_food_2073.Robot is no longer close food_steak_2080.Robot is no longer close food_apple_2081.Robot is no longer close food_bacon_2082.Robot is no longer close food_banana_2083.Robot is no longer close food_cake_2085.Robot is no longer close food_carrot_2086.Robot is no longer close food_cereal_2087.Robot is no longer close food_cheese_2088.Robot is no longer close food_chicken_2089.Robot is no longer close food_dessert_2090.Robot is no longer close food_donut_2091.Robot is no longer close food_egg_2092.Robot is no longer close food_fish_2093.Robot is no longer close food_food_2094.Robot is no longer close food_fruit_2095.Robot is no longer close food_hamburger_2096.Robot is no longer close food_ice_cream_2097.Robot is no longer close food_jam_2098.Robot is no longer close food_kiwi_2099.Robot is no longer close food_lemon_2100.Robot is no longer close food_noodles_2101.Robot is no longer close food_oatmeal_2102.Robot is no longer close food_orange_2103.Robot is no longer close food_onion_2104.Robot is no longer close food_peanut_butter_2105.Robot is no longer close food_pizza_2106.Robot is no longer close food_potato_2107.Robot is no longer close food_rice_2108.Robot is no longer close food_salt_2109.Robot is no longer close food_snack_2110.Robot is no longer close food_sugar_2111.Robot is no longer close food_turkey_2112.Robot is no longer close food_vegetable_2113.Robot is no longer close food_food_2001.Robot is no longer close floor_44.Robot is no longer close sauce_2148.Robot is no longer close fridge_126.
##############################
From agent.py
exp(food_bread_2084, toaster_132)
Failed to find food_bread_2084 around toaster_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_120)exp(food_bread_2084, sink_120)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_bread_2084)cut_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)
##############################
From agent.py
walk_executor(sink_120)
Find soap_2010. Find ice_2024. Find soap_2126. Robot is inside dining_room_41. Robot is close sink_120. Robot is close kitchen_counter_119. Robot is no longer close kitchen_counter_122.Robot is no longer close toaster_132.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find food_bread_2084 ?
Answer: Robot, locate the dining_room_41 and identify table_114 inside it. The target item, food_bread_2084, is inside table_114. Please retrieve it from there.

##############################
From agent.py
Human Instruction: You need to find the food_bread item before you can slice and toast it. Continue searching for the bread in potential locations not yet observed, or consider reassessing previously checked locations to ensure bread presence wasn't missed.
Robot, locate the dining_room_41 and identify table_114 inside it. The target item, food_bread_2084, is inside table_114. Please retrieve it from there.

Human Guidance: Cut the bread and put it in the toaster.
The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_bread_2084 around kitchen_counter_119.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for food_bread_2084 around cupboard_118.
Action 6: Walk to cupboard_117.
Action 7: look for food_bread_2084 around cupboard_117.
Action 8: Observe around cupboard_117 with the question of Check if food_bread is present.
Action 9: Walk to cupboard_118.
Action 10: Observe around cupboard_118 with the question of Check if food_bread is present.
Action 11: Walk to kitchen_counter_119.
Action 12: Observe around kitchen_counter_119 with the question of Check if food_bread is present.
Action 13: Walk to kitchen_counter_122.
Action 14: Observe around kitchen_counter_122 with the question of Check if food_bread is present.
Action 15: Walk to kitchen_counter_123.
Action 16: Observe around kitchen_counter_123 with the question of Check if food_bread is present.
Action 17: Walk to fridge_126.
Action 18: Switch off fridge_126.
Action 19: Open fridge_126.
Action 20: look for food_bread_2084 around fridge_126.
Action 21: Walk to toaster_132.
Action 22: look for food_bread_2084 around toaster_132.
Action 23: Walk to sink_120.

##############################
From agent.py
exp(food_bread_2084, sink_120)
Failed to find food_bread_2084 around sink_120. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(food_bread_2084, table_114)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)exp(knife_2122, cutting_board_2123)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_bread_2084)cut_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)
##############################
From agent.py
walk_executor(table_114)
Find mat_102. Find dry_pasta_2114. Find food_food_2021. Find drawing_110. Find drawing_111. Find knife_2122. Find cup_2133. Find table_cloth_2005. Find food_bread_2084. Find pillow_104. Find cup_2049. Find box_2038. Find clothes_hat_2117. Find clothes_gloves_2118. Find milk_2115. Find pillow_103. Find pillow_105. Find pillow_106. Find lighter_2004. Find lighter_2039. Find cup_2134. Find check_2058. Find cup_2132. Robot is inside dining_room_41. Robot is close table_114. Robot is close mat_102. Robot is close floor_47. Robot is no longer close sink_120.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
exp(food_bread_2084, table_114)
Find food_bread_2084. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_bread_2084)cut_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)
##############################
From agent.py
walk_executor(food_bread_2084)
Robot is inside dining_room_41. Robot is close table_114. Robot is close food_bread_2084. Robot is no longer close mat_102.Robot is no longer close floor_47.
##############################
From agent.py
grab_executor(food_bread_2084)
Robot is inside dining_room_41. Robot is close table_114. Robot is close food_bread_2084. Grabbing food_bread_2084 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot is inside dining_room_41. Robot is close food_bread_2084. Robot is close cutting_board_2123. Robot is close kitchen_counter_119. Robot is no longer close table_114.
##############################
From agent.py
put_executor(food_bread_2084, cutting_board_2123)
Robot is inside dining_room_41. Robot is close food_bread_2084. Robot is close cutting_board_2123. Robot is close kitchen_counter_119. food_bread_2084 released by right hand. 
##############################
From agent.py
walk_executor(knife_2122)
Robot is inside dining_room_41. Robot is close knife_2122. Robot is close table_114. Robot is no longer close cutting_board_2123.Robot is no longer close food_bread_2084.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
grab_executor(knife_2122)
Robot is inside dining_room_41. Robot is close knife_2122. Robot is close table_114. Grabbing knife_2122 by right hand. 
##############################
From agent.py
walk_executor(food_bread_2084)
Robot is inside dining_room_41. Robot is close knife_2122. Robot is close cutting_board_2123. Robot is close food_bread_2084. Robot is no longer close table_114.
##############################
