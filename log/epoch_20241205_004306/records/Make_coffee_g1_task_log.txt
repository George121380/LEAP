From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_kitchen_counter_119(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2134_around_kitchen_counter_119(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee_with_coffee_maker(coffee_maker:item, coffee:item):
    body:
        achieve plugged(coffee_maker)
        achieve is_on(coffee_maker)
        achieve inside(coffee, coffee_maker)
        # Ensure the coffee is being made

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        bind coffee: item where:
            is_food_coffee(coffee) # Assuming theres a category for coffee
        # Select the coffee
        make_coffee_with_coffee_maker(coffee_maker, coffee)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_food_coffee not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2065_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2134_around_kitchen_counter_119(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#goal_representation
 
behavior make_coffee_with_coffee_maker(coffee_maker:item, coffee:item):
    body:
        achieve plugged(coffee_maker)
        achieve is_on(coffee_maker)
        achieve inside(coffee, coffee_maker)
        # Ensure the coffee is being made

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        bind coffee: item where:
            is_food_food(coffee) # Assuming theres a category for coffee
        # Select the coffee
        make_coffee_with_coffee_maker(coffee_maker, coffee)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2049_around_kitchen_counter_119(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2053_around_kitchen_counter_119(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2134_around_kitchen_counter_119(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_ready(coffee_maker: item):
    # Check if the coffee maker is ready to make coffee
    return plugged(coffee_maker) and has_water(coffee_maker) and is_clean(coffee_maker) and not is_on(coffee_maker)

behavior plug_in_coffee_maker(coffee_maker: item):
    body:
        achieve plugged(coffee_maker)

behavior add_water_to_coffee_maker(coffee_maker: item):
    body:
        achieve has_water(coffee_maker)

behavior clean_coffee_maker(coffee_maker: item):
    body:
        achieve clean(coffee_maker)

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind the coffee maker

        if not plugged(coffee_maker):
            plug_in_coffee_maker(coffee_maker)
            # Ensure the coffee maker is plugged in
            
        if not has_water(coffee_maker):
            add_water_to_coffee_maker(coffee_maker)
            # Add water to the coffee maker
            
        if not clean(coffee_maker):
            clean_coffee_maker(coffee_maker)
            # Clean the coffee maker if it is dirty
        
        if not is_coffee_maker_ready(coffee_maker):
            observe(coffee_maker, "Check whether the coffee maker is ready for use")

        start_coffee_maker(coffee_maker)
        # Start the coffee maker to make coffee

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

'Function is_clean not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2134_around_kitchen_counter_119(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2053_around_kitchen_counter_119(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#goal_representation
 
def is_coffee_maker_ready(coffee_maker: item):
    # Check if the coffee maker is ready to make coffee
    return plugged(coffee_maker) and has_water(coffee_maker) and is_cleaning_solution(coffee_maker) and not is_on(coffee_maker)

behavior plug_in_coffee_maker(coffee_maker: item):
    body:
        achieve plugged(coffee_maker)

behavior add_water_to_coffee_maker(coffee_maker: item):
    body:
        achieve has_water(coffee_maker)

behavior clean_coffee_maker(coffee_maker: item):
    body:
        achieve cleaning_solution(coffee_maker)

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind the coffee maker

        if not plugged(coffee_maker):
            plug_in_coffee_maker(coffee_maker)
            # Ensure the coffee maker is plugged in
            
        if not has_water(coffee_maker):
            add_water_to_coffee_maker(coffee_maker)
            # Add water to the coffee maker
            
        if not clean(coffee_maker):
            clean_coffee_maker(coffee_maker)
            # Clean the coffee maker if it is dirty
        
        if not is_coffee_maker_ready(coffee_maker):
            observe(coffee_maker, "Check whether the coffee maker is ready for use")

        start_coffee_maker(coffee_maker)
        # Start the coffee maker to make coffee

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function cleaning_solution not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2049_around_kitchen_counter_119(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_coffee_filter_2065_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
 
def is_coffee_maker_ready(coffee_maker: item):
    # Check if the coffee maker is ready to make coffee
    return plugged(coffee_maker) and has_water(coffee_maker) and is_cleaning_solution(coffee_maker) and not is_on(coffee_maker)

behavior plug_in_coffee_maker(coffee_maker: item):
    body:
        achieve plugged(coffee_maker)

behavior add_water_to_coffee_maker(coffee_maker: item):
    body:
        achieve has_water(coffee_maker)

behavior clean_coffee_maker(coffee_maker: item):
    body:
        achieve is_cleaning_solution(coffee_maker)

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind the coffee maker

        if not plugged(coffee_maker):
            plug_in_coffee_maker(coffee_maker)
            # Ensure the coffee maker is plugged in

        if not has_water(coffee_maker):
            add_water_to_coffee_maker(coffee_maker)
            # Add water to the coffee maker

        if not is_cleaning_solution(coffee_maker):
            clean_coffee_maker(coffee_maker)
            # Clean the coffee maker if it is dirty

        if not is_coffee_maker_ready(coffee_maker):
            observe(coffee_maker, "Check whether the coffee maker is ready for use")

        start_coffee_maker(coffee_maker)
        # Start the coffee maker to make coffee

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make a cup of coffee using the coffee maker." ?
Answer: Put a cup inside the coffee maker and turn it on.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2133_around_kitchen_counter_119(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_cup_2134_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_coffee_filter_2053_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup)
        make_coffee(cup, coffee_maker)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(cup_2132, kitchen_counter_119)walk_executor(coffe_maker_130)open_executor(coffe_maker_130)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)putin_executor(cup_2132, coffe_maker_130)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_119)
Failed to find cup_2132 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(cup_2132, cupboard_118)walk_executor(coffe_maker_130)open_executor(coffe_maker_130)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)putin_executor(cup_2132, coffe_maker_130)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(cup_2132, cupboard_118)
Failed to find cup_2132 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(cup_2132, cupboard_117)walk_executor(coffe_maker_130)open_executor(coffe_maker_130)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)putin_executor(cup_2132, coffe_maker_130)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(cup_2132, cupboard_117)
Failed to find cup_2132 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)open_executor(coffe_maker_130)exp(cup_2132, coffe_maker_130)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)putin_executor(cup_2132, coffe_maker_130)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(coffe_maker_130)
Find coffee_filter_2065. Find spectacles_2153. Find fryingpan_2154. Robot is inside dining_room_41. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
open_executor(coffe_maker_130)
Robot is inside dining_room_41. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. 
##############################
From agent.py
exp(cup_2132, coffe_maker_130)
Failed to find cup_2132 around coffe_maker_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(computer_276)exp(cup_2132, computer_276)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)putin_executor(cup_2132, coffe_maker_130)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(computer_276)
Find chair_271. Find keyboard_278. Find mouse_280. Find mat_284. Robot is inside home_office_241. Robot is close computer_276. Robot is no longer inside dining_room_41.Robot is no longer close coffee_filter_2065.Robot is no longer close kitchen_counter_122.Robot is no longer close coffe_maker_130.
##############################
From agent.py
exp(cup_2132, computer_276)
Failed to find cup_2132 around computer_276. 
##############################
From agent.py-> find a plan in act()
walk_executor(curtain_289)exp(cup_2132, curtain_289)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)putin_executor(cup_2132, coffe_maker_130)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(curtain_289)
Robot is inside home_office_241. Robot is close curtain_289. Robot is close curtain_290. Robot is no longer close computer_276.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2132 ?
Answer: Cup_2132 is located in dining_room_41. It is on top of table_114. Look for table_114, and you will find cup_2132 positioned on it.

##############################
From agent.py
Human Instruction: Cup_2132 is located in dining_room_41. It is on top of table_114. Look for table_114, and you will find cup_2132 positioned on it.

Human Guidance: Put a cup inside the coffee maker and turn it on.
The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for cup_2132 around kitchen_counter_119.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for cup_2132 around cupboard_118.
Action 6: Walk to cupboard_117.
Action 7: look for cup_2132 around cupboard_117.
Action 8: Walk to coffe_maker_130.
Action 9: Open coffe_maker_130.
Action 10: look for cup_2132 around coffe_maker_130.
Action 11: Walk to computer_276.
Action 12: look for cup_2132 around computer_276.
Action 13: Walk to curtain_289.

##############################
From agent.py
exp(cup_2132, curtain_289)
Failed to find cup_2132 around curtain_289. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2132, table_114)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)putin_executor(cup_2132, coffe_maker_130)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(table_114)
Find mat_102. Find dry_pasta_2114. Find food_food_2021. Find drawing_110. Find drawing_111. Find knife_2122. Find cup_2133. Find table_cloth_2005. Find food_bread_2084. Find pillow_104. Find cup_2049. Find box_2038. Find clothes_hat_2117. Find clothes_gloves_2118. Find milk_2115. Find pillow_103. Find pillow_105. Find pillow_106. Find lighter_2004. Find lighter_2039. Find cup_2134. Find check_2058. Find cup_2132. Robot is inside dining_room_41. Robot is close table_114. Robot is close mat_102. Robot is close floor_47. Robot is no longer inside home_office_241.Robot is no longer close curtain_289.Robot is no longer close curtain_290.
##############################
From agent.py
exp(cup_2132, table_114)
Find cup_2132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)putin_executor(cup_2132, coffe_maker_130)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(cup_2132)
Robot is inside dining_room_41. Robot is close table_114. Robot is close cup_2132. Robot is no longer close mat_102.Robot is no longer close floor_47.
##############################
From agent.py
grab_executor(cup_2132)
Robot is inside dining_room_41. Robot is close table_114. Robot is close cup_2132. Grabbing cup_2132 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot is inside dining_room_41. Robot is close cup_2132. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. Robot is no longer close table_114.
##############################
From agent.py
putin_executor(cup_2132, coffe_maker_130)
Robot is inside dining_room_41. Robot is close cup_2132. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. cup_2132 released by right hand. 
##############################
From agent.py
close_executor(coffe_maker_130)
Robot is inside dining_room_41. Robot is close cup_2132. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. 
##############################
From agent.py
switchon_executor(coffe_maker_130)
Robot is inside dining_room_41. Robot is close cup_2132. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. 
##############################
From evaluation.py
cdl_dataset/dataset/Make_coffee/g1.txt
Checking k1
missed actions: 
missed action num: 0
##############################
