From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_kitchen_counter_119(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_pot_2138_around_kitchen_counter_119(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_phone_2029_around_kitchen_counter_119(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(phone,kitchen_counter_instance)
        else:
            exp(phone,kitchen_counter_instance)
    eff:
        unknown[phone]=False
        close[phone,kitchen_counter_instance]=True
        close[kitchen_counter_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_water(pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve is_on(stove)

behavior boil_egg(pot:item):
    body:
        achieve inside(egg, pot)
        # We assume egg is already placed inside the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select an available stove

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        boil_water(pot, stove)
        boil_egg(pot)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: egg; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2092_around_kitchen_counter_119(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_pot_2040_around_kitchen_counter_119(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_phone_2147_around_kitchen_counter_119(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(phone,kitchen_counter_instance)
        else:
            exp(phone,kitchen_counter_instance)
    eff:
        unknown[phone]=False
        close[phone,kitchen_counter_instance]=True
        close[kitchen_counter_instance,phone]=True
    

#goal_representation
 
behavior boil_water(pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve is_on(stove)

behavior boil_egg(pot:item, egg:item):
    body:
        achieve inside(egg, pot)
        # We assume egg is already placed inside the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select an available stove

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        boil_water(pot, stove)
        boil_egg(pot, egg)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_water(pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve is_on(stove)

behavior boil_egg(pot:item, egg:item):
    body:
        achieve inside(egg, pot)
        # We assume egg is already placed inside the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select an available stove

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        boil_water(pot, stove)
        boil_egg(pot, egg)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(pot_2138, kitchen_counter_119)walk_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(kitchen_counter_119)exp(food_egg_2092, kitchen_counter_119)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_2138)putin_executor(food_egg_2092, pot_2138)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. 
##############################
From agent.py
exp(pot_2138, kitchen_counter_119)
Find pot_2138. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(kitchen_counter_119)exp(food_egg_2092, kitchen_counter_119)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_2138)putin_executor(food_egg_2092, pot_2138)
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. 
##############################
From agent.py
grab_executor(pot_2138)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Find drawing_33. Find mat_32. Find phone_2029. Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer inside dining_room_41.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(stove_2135)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is close stove_2135. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
switchon_executor(stove_2135)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is close stove_2135. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is no longer close stove_2135.
##############################
From agent.py
exp(food_egg_2092, kitchen_counter_119)
Failed to find food_egg_2092 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_egg_2092, cupboard_118)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_2138)putin_executor(food_egg_2092, pot_2138)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Robot is inside dining_room_41. Robot is close pot_2138. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(food_egg_2092, cupboard_118)
Failed to find food_egg_2092 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(food_egg_2092, cupboard_117)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_2138)putin_executor(food_egg_2092, pot_2138)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close pot_2138. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(food_egg_2092, cupboard_117)
Failed to find food_egg_2092 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_2138)putin_executor(food_egg_2092, pot_2138)
##############################
From agent.py
walk_executor(fridge_126)
Find food_onion_2048. Find food_food_2046. Find food_food_2073. Find food_steak_2080. Find food_apple_2081. Find food_bacon_2082. Find food_banana_2083. Find food_cake_2085. Find food_carrot_2086. Find food_cereal_2087. Find food_cheese_2088. Find food_chicken_2089. Find food_dessert_2090. Find food_donut_2091. Find food_egg_2092. Find food_fish_2093. Find food_food_2094. Find food_fruit_2095. Find food_hamburger_2096. Find food_ice_cream_2097. Find food_jam_2098. Find food_kiwi_2099. Find food_lemon_2100. Find food_noodles_2101. Find food_oatmeal_2102. Find food_orange_2103. Find food_onion_2104. Find food_peanut_butter_2105. Find food_pizza_2106. Find food_potato_2107. Find food_rice_2108. Find food_salt_2109. Find food_snack_2110. Find food_sugar_2111. Find food_turkey_2112. Find food_vegetable_2113. Find food_food_2001. Find sauce_2148. Find basket_for_clothes_2078. Find food_food_1000. Robot is inside dining_room_41. Robot is close pot_2138. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
switchoff_executor(fridge_126)
Find keyboard_211. Find mouse_213. Robot is inside dining_room_41. Robot is close pot_2138. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
open_executor(fridge_126)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
exp(food_egg_2092, fridge_126)
Find food_egg_2092. 
##############################
From agent.py-> find a plan in act()
open_executor(pot_2138)grab_executor(food_egg_2092)putin_executor(food_egg_2092, pot_2138)
##############################
From agent.py
open_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
putin_executor(food_egg_2092, pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. food_egg_2092 released by left hand. 
##############################
From agent.py
Human Instruction: The robot needs to let the pot stay on the stove until the egg is fully boiled. The egg was placed inside the pot, and the stove was turned on, but there is no indication that the boiling process has been completed.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for pot_2138 around kitchen_counter_119.
Action 3: Walk to pot_2138.
Action 4: Grab pot_2138.
Action 5: Walk to faucet_20.
Action 6: Switch on faucet_20.
Action 7: Switch off faucet_20.
Action 8: Walk to stove_2135.
Action 9: Switch on stove_2135.
Action 10: Walk to kitchen_counter_119.
Action 11: look for food_egg_2092 around kitchen_counter_119.
Action 12: Walk to cupboard_118.
Action 13: Open cupboard_118.
Action 14: look for food_egg_2092 around cupboard_118.
Action 15: Walk to cupboard_117.
Action 16: look for food_egg_2092 around cupboard_117.
Action 17: Walk to fridge_126.
Action 18: Switch off fridge_126.
Action 19: Open fridge_126.
Action 20: look for food_egg_2092 around fridge_126.
Action 21: Open pot_2138.
Action 22: Grab food_egg_2092.
Action 23: Put food_egg_2092 into pot_2138.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior monitor_boiling_process(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Ensure the stove is on for the boiling process
        observe(pot, "Check if the egg is fully boiled")  
        # Observe the pot to determine the boiling status of the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Select the pot that has been located
        
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is on

        monitor_boiling_process(pot, stove)
        # Monitor the boiling process to check if it is completed

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_71_around_nightstand_195(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==195
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(phone,nightstand_instance)
        else:
            exp(phone,nightstand_instance)
    eff:
        unknown[phone]=False
        close[phone,nightstand_instance]=True
        close[nightstand_instance,phone]=True
    

behavior find_remote_control_2124_around_couch_269(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(remote_control,couch_instance)
        else:
            exp(remote_control,couch_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,couch_instance]=True
        close[couch_instance,remote_control]=True
    

behavior find_check_2026_around_computer_276(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(check,computer_instance)
        else:
            exp(check,computer_instance)
    eff:
        unknown[check]=False
        close[check,computer_instance]=True
        close[computer_instance,check]=True
    

#exp_behavior_end

#goal_representation
 
def is_fullt_boiled_egg(pot: item):
    # Function to check if the egg in the pot is boiled
    symbol is_boiled=exists egg: item : is_food_egg(egg) and inside(egg, pot) and is_off(stove)
    return is_boiled

behavior ensure_stove_on(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
            # Select a pot
        bind stove: item where:
            is_stove(stove)
            # Select a stove
        if not is_fullt_boiled_egg(pot):
            ensure_stove_on(stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: stove; available variables: [Variable<pot: item>, Variable<egg: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2124_around_couch_269(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(remote_control,couch_instance)
        else:
            exp(remote_control,couch_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,couch_instance]=True
        close[couch_instance,remote_control]=True
    

#goal_representation
 
def is_fullt_boiled_egg(pot: item, stove: item):
    # Function to check if the egg in the pot is boiled
    symbol is_boiled = exists egg: item : is_food_egg(egg) and inside(egg, pot) and is_off(stove)
    return is_boiled

behavior ensure_stove_on(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
            # Select a pot
        bind stove: item where:
            is_stove(stove)
            # Select a stove
        if not is_fullt_boiled_egg(pot, stove):
            ensure_stove_on(stove)


#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil the egg." ?
Answer: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_boiling(pot:item):
    # Function to check if the pot is on the stove and the water is boiling
    symbol is_on_stove=exists stove: item : is_stove(stove) and on(pot, stove) and is_on(stove)
    return is_on_stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2138
        # Select pot with ID 2138

        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select stove with ID 2135

        assert has_water(pot)
        # Ensure the pot has water

        assert inside(food_egg_2092, pot)
        # Ensure the egg is inside the pot

        if is_pot_boiling(pot):
            achieve close_char(char, pot)
            # Stay close to the pot until the egg is fully boiled

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_egg_2092; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
def is_pot_boiling(pot:item):
    # Function to check if the pot is on the stove and the water is boiling
    symbol is_on_stove=exists stove: item : is_stove(stove) and on(pot, stove) and is_on(stove)
    return is_on_stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2138
        # Select pot with ID 2138

        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select stove with ID 2135

        bind egg: item where:
            is_food_egg(egg) and id[egg]==2092
        # Define egg with ID 2092

        assert has_water(pot)
        # Ensure the pot has water

        assert inside(egg, pot)
        # Ensure the egg is inside the pot

        if is_pot_boiling(pot):
            achieve close_char(char, pot)
            # Stay close to the pot until the egg is fully boiled

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2138_around_stovefan_125(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==125
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(pot,stovefan_instance)
        else:
            exp(pot,stovefan_instance)
    eff:
        unknown[pot]=False
        close[pot,stovefan_instance]=True
        close[stovefan_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_boiling_complete(pot:item):
    # Function to determine if the egg is boiling complete
    # This can be a placeholder for further confirmation logic
    return False

behavior wait_for_boiling_completion(pot:item):
    body:
        observe(pot, "Is the egg fully boiled")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2138
        # Select pot with ID 2138 (based on actions taken)
        
        if not is_boiling_complete(pot):
            wait_for_boiling_completion(pot)
            # Wait for the boiling process to be completed

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_boiling_complete(pot:item):
    # Function to determine if the egg is boiling complete
    # This can be a placeholder for further confirmation logic
    return False

behavior wait_for_boiling_completion(pot:item):
    body:
        observe(pot, "Is the egg fully boiled")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2138
        # Select pot with ID 2138 (based on actions taken)
        
        if not is_boiling_complete(pot):
            wait_for_boiling_completion(pot)
            # Wait for the boiling process to be completed

##############################
From agent.py-> find a plan in act()
obs(pot_2138, Is the egg fully boiled)
##############################
From agent.py
obs(pot_2138, Is the egg fully boiled)
Get this information:  pot_2138 is close to character_240. pot_2138 is close to food_egg_2092. pot_2138 is inside dining_room_41. food_egg_2092 is inside pot_2138. pot_2138 is OPEN.
##############################
From agent.py
Human Instruction: The robot needs to wait for the egg to be fully boiled before completing the task. The process has not been confirmed as complete, so the robot should continue monitoring until the egg is fully boiled.

Human Guidance: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for pot_2138 around kitchen_counter_119.
Action 3: Walk to pot_2138.
Action 4: Grab pot_2138.
Action 5: Walk to faucet_20.
Action 6: Switch on faucet_20.
Action 7: Switch off faucet_20.
Action 8: Walk to stove_2135.
Action 9: Switch on stove_2135.
Action 10: Walk to kitchen_counter_119.
Action 11: look for food_egg_2092 around kitchen_counter_119.
Action 12: Walk to cupboard_118.
Action 13: Open cupboard_118.
Action 14: look for food_egg_2092 around cupboard_118.
Action 15: Walk to cupboard_117.
Action 16: look for food_egg_2092 around cupboard_117.
Action 17: Walk to fridge_126.
Action 18: Switch off fridge_126.
Action 19: Open fridge_126.
Action 20: look for food_egg_2092 around fridge_126.
Action 21: Open pot_2138.
Action 22: Grab food_egg_2092.
Action 23: Put food_egg_2092 into pot_2138.
Action 24: Observe around pot_2138 with the question of Is the egg fully boiled.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_egg_fully_boiled(pot:item):
    # Function to check if the egg is fully boiled in the pot
    symbol fully_boiled=exists egg: item : is_food_egg(egg) and inside(egg, pot) and visited(pot)
    return fully_boiled

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot) and on(pot, stove_2135)
        # Bind the pot which has water and is on the stove with the id 2135

        repeat: 
            observe(pot, "Is the egg fully boiled")
            # Continue to observe until the egg is confirmed fully boiled
        until is_egg_fully_boiled(pot)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5797, column 15.
Expected one of: 
	* AND
	* __ANON_8
	* AMPERSAND
	* VBAR
	* __ANON_1
	* OR
	* IF
	* RSHIFT
	* PLUS
	* _NEWLINE
	* MINUS
	* CIRCUMFLEX
	* LESSTHAN
	* __ANON_5
	* LSHIFT
	* __ANON_6
	* __ANON_4
	* AT
	* NOT_EQ
	* __ANON_3
	* SEMICOLON
	* GREATER_EQ
	* LESS_EQ
	* DOUBLE_EQUAL
	* PERCENT
	* __ANON_7
	* __ANON_2
	* FLOORDIV
	* COMMA
	* STAR
	* __ANON_0
	* MORETHAN
	* SLASH
	* EQUAL

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2138_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#goal_representation
 
def is_egg_fully_boiled(pot:item):
    # Function to check if the egg is fully boiled in the pot
    symbol fully_boiled=exists egg: item : is_food_egg(egg) and inside(egg, pot) and visited(pot)
    return fully_boiled

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot) and on(pot, stove_2135)
        # Bind the pot which has water and is on the stove with the id 2135

        repeat: 
            observe(pot, "Is the egg fully boiled")
            # Continue to observe until the egg is confirmed fully boiled
        until is_egg_fully_boiled(pot)


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5797, column 15.
Expected one of: 
	* AND
	* __ANON_8
	* AMPERSAND
	* VBAR
	* __ANON_1
	* OR
	* IF
	* RSHIFT
	* PLUS
	* _NEWLINE
	* MINUS
	* CIRCUMFLEX
	* LESSTHAN
	* __ANON_5
	* LSHIFT
	* __ANON_6
	* __ANON_4
	* AT
	* NOT_EQ
	* __ANON_3
	* SEMICOLON
	* GREATER_EQ
	* LESS_EQ
	* DOUBLE_EQUAL
	* PERCENT
	* __ANON_7
	* __ANON_2
	* FLOORDIV
	* COMMA
	* STAR
	* __ANON_0
	* MORETHAN
	* SLASH
	* EQUAL

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#goal_representation
 
def is_egg_fully_boiled(pot:item):
    # Function to check if the egg is fully boiled in the pot
    symbol fully_boiled=exists egg: item : is_food_egg(egg) and inside(egg, pot) and visited(pot)
    return fully_boiled

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot) and on(pot, stove_2135)
        # Bind the pot which has water and is on the stove with the id 2135

        repeat: 
            observe(pot, "Is the egg fully boiled")
            # Continue to observe until the egg is confirmed fully boiled
        until is_egg_fully_boiled(pot)


The error was due to the misuse of the symbol declaration within the is_egg_fully_boiled function The symbol should be used to define and assign the result of a condition within a function, not to introduce a new keyword or syntax symbol The corrected approach uses symbol fully_boiled to define the condition check result
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_on_stove_with_egg_boil_ready(pot:item, stove:item, egg:item):
    # Function to check if the pot is on the stove and has an egg ready for boiling
    symbol pot_on_stove=on(pot, stove)
    symbol egg_inside_pot=inside(egg, pot)
    return pot_on_stove and egg_inside_pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select stove with ID 2135
        
        bind pot: item where:
            is_pot(pot) and id[pot] == 2138
        # Select pot with ID 2138

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        # Select egg with ID 2092

        if not is_pot_on_stove_with_egg_boil_ready(pot, stove, egg):
            observe(pot, "Check is the pot on the stove and does it have an egg inside")
        
        if is_pot_on_stove_with_egg_boil_ready(pot, stove, egg):
            achieve is_on(stove)
            observe(pot, "Is the egg fully boiled")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_pot_on_stove_with_egg_boil_ready(pot:item, stove:item, egg:item):
    # Function to check if the pot is on the stove and has an egg ready for boiling
    symbol pot_on_stove=on(pot, stove)
    symbol egg_inside_pot=inside(egg, pot)
    return pot_on_stove and egg_inside_pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select stove with ID 2135
        
        bind pot: item where:
            is_pot(pot) and id[pot] == 2138
        # Select pot with ID 2138

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        # Select egg with ID 2092

        if not is_pot_on_stove_with_egg_boil_ready(pot, stove, egg):
            observe(pot, "Check is the pot on the stove and does it have an egg inside")
        
        if is_pot_on_stove_with_egg_boil_ready(pot, stove, egg):
            achieve is_on(stove)
            observe(pot, "Is the egg fully boiled")

##############################
From agent.py-> find a plan in act()
obs(pot_2138, Check is the pot on the stove and does it have an egg inside)
##############################
From agent.py
obs(pot_2138, Check is the pot on the stove and does it have an egg inside)
Get this information:  pot_2138 is close to character_240. pot_2138 is close to food_egg_2092. pot_2138 is inside dining_room_41. food_egg_2092 is inside pot_2138. pot_2138 is OPEN.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_breakfast/g3.txt
Checking k1
missed actions: walk_executor(stove_2135);put_executor(pot_2138, stove_2135);
missed action num: 2
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_breakfast/g3.txt
Checking k1
missed actions: walk_executor(stove_2135);put_executor(pot_2138, stove_2135);
missed action num: 2
##############################
