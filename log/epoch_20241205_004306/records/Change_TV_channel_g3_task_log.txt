From agent.py
Reset goals: The sub-goals are: 
['1. Find the couch and sit on it.', '2. Find the remote control and turn on the TV.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_couch_269(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_couch_sittable(couch: item):
    symbol is_sittable = sittable(couch)
    return is_sittable

behavior sit_on_couch(couch:item):
    body:
        if is_couch_sittable(couch):
            achieve on_char(char, couch)

behavior __goal__():
    body:
        if exists couch: item : is_couch(couch) and not visited(couch):
            bind couch: item where:
                is_couch(couch) and not visited(couch)
            observe(couch, "Check if this is the desired couch to sit")
            if is_couch_sittable(couch):
                sit_on_couch(couch)
        else:
            if exists couch: item : is_couch(couch):
                bind couch: item where:
                    is_couch(couch)
                sit_on_couch(couch)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_couch_sittable(couch: item):
    symbol is_sittable = sittable(couch)
    return is_sittable

behavior sit_on_couch(couch:item):
    body:
        if is_couch_sittable(couch):
            achieve on_char(char, couch)

behavior __goal__():
    body:
        if exists couch: item : is_couch(couch) and not visited(couch):
            bind couch: item where:
                is_couch(couch) and not visited(couch)
            observe(couch, "Check if this is the desired couch to sit")
            if is_couch_sittable(couch):
                sit_on_couch(couch)
        else:
            if exists couch: item : is_couch(couch):
                bind couch: item where:
                    is_couch(couch)
                sit_on_couch(couch)

##############################
From agent.py-> find a plan in act()
walk_executor(couch_198)obs(couch_198, Check if this is the desired couch to sit)sit_executor(couch_198)
##############################
From agent.py
walk_executor(couch_198)
Find cat_2127. Find clothes_jacket_2119. Find phone_2016. Find mat_203. Find chair_2003. Find rag_2052. Find instrument_guitar_2028. Robot is inside bedroom_162. Robot is close couch_198. Robot is no longer inside dining_room_41.
##############################
From agent.py
obs(couch_198, Check if this is the desired couch to sit)
Get this information:  cat_2127 is on couch_198. clothes_jacket_2119 is on couch_198. phone_2016 is on couch_198. chair_2003 is on couch_198. rag_2052 is on couch_198. couch_198 is close to phone_2016. couch_198 is close to rag_2052. couch_198 is close to table_199. couch_198 is close to clothes_jacket_2119. couch_198 is close to mat_203. couch_198 is close to floor_172. couch_198 is close to floor_171. couch_198 is close to wall_174. couch_198 is close to cat_2127. couch_198 is close to instrument_guitar_2028. couch_198 is close to wall_177. couch_198 is close to chair_2003. couch_198 is close to character_240. couch_198 is inside bedroom_162. instrument_guitar_2028 is on couch_198. couch_198 is CLEAN.
##############################
From agent.py
sit_executor(couch_198)
Robot is inside bedroom_162. Robot is close couch_198. Robot is on couch_198. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2124_around_couch_269(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(remote_control,couch_instance)
        else:
            exp(remote_control,couch_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,couch_instance]=True
        close[couch_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
def has_remote_control_and_tv_close(remote_control:item, tv:item):
    symbol is_close=exists rc: item : is_remote_control(rc) and exists television: item : is_television(television) and close(rc, television)
    return is_close

behavior turn_on_television(remote_control: item, tv: item):
    body:
        achieve is_on(tv)

behavior __goal__():
    body:
        if exists rc: item : is_remote_control(rc) and exists tv: item : is_television(tv) and has_remote_control_and_tv_close(rc, tv):
            bind remote_control: item where:
                is_remote_control(remote_control) and has_remote_control_and_tv_close(remote_control, tv)
            bind tv: item where:
                is_television(tv) and close(remote_control, tv)
            # Select remote control and TV that are close to each other
            achieve inhand(remote_control)
            turn_on_television(remote_control, tv)
        
        else:
            # Check all locations to identify the remote control and TV, and ensure they are close by
            foreach remote_control: item:
                if is_remote_control(remote_control) and not visited(remote_control):
                    observe(remote_control, "Check if the remote control can be used to turn on the TV")
            foreach tv: item:
                if is_television(tv) and not visited(tv):
                    observe(tv, "Check if the TV can be turned on with a remote control")


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'television') at line 5540, column 72.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2124_around_couch_269(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(remote_control,couch_instance)
        else:
            exp(remote_control,couch_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,couch_instance]=True
        close[couch_instance,remote_control]=True
    

#goal_representation
 
def has_remote_control_and_tv_close(remote_control:item, tv:item):
    symbol is_close=exists rc: item : is_remote_control(rc) and exists tv: item : is_television(tv) and close(rc, tv)
    return is_close

behavior turn_on_television(remote_control: item, tv: item):
    body:
        achieve is_on(tv)

behavior __goal__():
    body:
        if exists rc: item : is_remote_control(rc) and exists tv: item : is_television(tv) and has_remote_control_and_tv_close(rc, tv):
            bind remote_control: item where:
                is_remote_control(remote_control) and has_remote_control_and_tv_close(remote_control, tv)
            bind tv: item where:
                is_television(tv) and close(remote_control, tv)
            # Select remote control and TV that are close to each other
            achieve_once inhand(remote_control)
            turn_on_television(remote_control, tv)
        
        else:
            # Check all locations to identify the remote control and TV, and ensure they are close by
            foreach remote_control: item:
                if is_remote_control(remote_control) and not visited(remote_control):
                    observe(remote_control, "Check if the remote control can be used to turn on the TV")
            foreach tv: item:
                if is_television(tv) and not visited(tv):
                    observe(tv, "Check if the TV can be turned on with a remote control")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'tv') at line 5540, column 72.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2124_around_couch_269(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(remote_control,couch_instance)
        else:
            exp(remote_control,couch_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,couch_instance]=True
        close[couch_instance,remote_control]=True
    

behavior find_dvd_player_2130_around_tvstand_273(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==273
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

#goal_representation
 
def has_remote_control_and_tv_close(remote_control: item, tv: item):
    symbol is_close=exists rc: item : is_remote_control(rc) and exists tv: item : is_television(tv) and close(rc, tv)
    return is_close

behavior turn_on_television(remote_control: item, tv: item):
    body:
        achieve is_on(tv)

behavior __goal__():
    body:
        if exists remote_control: item : is_remote_control(remote_control) and exists tv: item : is_television(tv) and has_remote_control_and_tv_close(remote_control, tv):
            bind rc: item where:
                is_remote_control(rc) and has_remote_control_and_tv_close(rc, tv)
            bind tv: item where:
                is_television(tv) and close(rc, tv)
            # Select remote control and TV that are close to each other
            achieve_once inhand(rc)
            turn_on_television(rc, tv)
        
        else:
            # Check all locations to identify the remote control and TV, and ensure they are close by
            foreach rc: item:
                if is_remote_control(rc) and not visited(rc):
                    observe(rc, "Check if the remote control can be used to turn on the TV")
            foreach tv: item:
                if is_television(tv) and not visited(tv):
                    observe(tv, "Check if the TV can be turned on with a remote control")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2124_around_couch_269(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(remote_control,couch_instance)
        else:
            exp(remote_control,couch_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,couch_instance]=True
        close[couch_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
def find_remote_control(remote:item):
    # Determine if this is a remote control by check if this is the desired remote
    symbol is_remote=exists r: item : is_remote_control(r) and visited(remote)
    return is_remote

behavior turn_on_television(tv:item, remote:item):
    # Define behavior to turn on the television
    body:
        achieve is_on(tv)

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and on_char(char, couch)
        # Select the couch which you are sitting on

        foreach remote: item:
            if is_remote_control(remote) and not visited(remote):
                observe(remote, "Check if this is the desired remote to turn on the TV")
        # Search and check for the remote control
        
        bind tv: item where:
            is_television(tv)
        # Select the television
        
        bind remote: item where:
            is_remote_control(remote) and find_remote_control(remote)
        # Select the remote control that has been found and visited
        
        turn_on_television(tv, remote)
        # Use the remote to turn on the television

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_remote_control(remote:item):
    # Determine if this is a remote control by check if this is the desired remote
    symbol is_remote=exists r: item : is_remote_control(r) and visited(remote)
    return is_remote

behavior turn_on_television(tv:item, remote:item):
    # Define behavior to turn on the television
    body:
        achieve is_on(tv)

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and on_char(char, couch)
        # Select the couch which you are sitting on

        foreach remote: item:
            if is_remote_control(remote) and not visited(remote):
                observe(remote, "Check if this is the desired remote to turn on the TV")
        # Search and check for the remote control
        
        bind tv: item where:
            is_television(tv)
        # Select the television
        
        bind remote: item where:
            is_remote_control(remote) and find_remote_control(remote)
        # Select the remote control that has been found and visited
        
        turn_on_television(tv, remote)
        # Use the remote to turn on the television

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(couch_269)exp(remote_control_2124, couch_269)standup_executor(char)walk_executor(remote_control_2124)obs(remote_control_2124, Check if this is the desired remote to turn on the TV)standup_executor(char)walk_executor(television_281)switchon_executor(television_281)
##############################
From agent.py
standup_executor(char)
Robot is inside bedroom_162. Robot is close couch_198. Robot is on couch_198. 
##############################
From agent.py
walk_executor(couch_269)
Find brush_2002. Find drawing_288. Find pillow_287. Find shoes_2033. Find phone_2017. Find pillow_286. Robot is inside home_office_241. Robot is close couch_269. Robot is on couch_198. Robot is no longer inside bedroom_162.Robot is no longer close couch_198.
##############################
From agent.py
exp(remote_control_2124, couch_269)
Find remote_control_2124. 
##############################
From agent.py-> find a plan in act()
walk_executor(remote_control_2124)obs(remote_control_2124, Check if this is the desired remote to turn on the TV)walk_executor(television_281)switchon_executor(television_281)
##############################
From agent.py
walk_executor(remote_control_2124)
Robot is inside home_office_241. Robot is close tvstand_273. Robot is close remote_control_2124. Robot is on couch_198. Robot is no longer close couch_269.
##############################
From agent.py
obs(remote_control_2124, Check if this is the desired remote to turn on the TV)
Get this information:  remote_control_2124 is inside home_office_241. remote_control_2124 is on tvstand_273. remote_control_2124 is close to tvstand_273. remote_control_2124 is close to character_240. remote_control_2124 is OFF.
##############################
From agent.py
walk_executor(television_281)
Robot is inside home_office_241. Robot is close tvstand_273. Robot is close television_281. Robot is on couch_198. Robot is no longer close remote_control_2124.
##############################
From agent.py
switchon_executor(television_281)
Robot is inside home_office_241. Robot is close tvstand_273. Robot is close television_281. Robot is on couch_198. 
##############################
From agent.py
Human Instruction: You found the remote control and approached the television, but you did not use the remote control to turn on the TV. Please ensure you use the remote control to complete the action of turning on the TV.

The actions you have taken:
Action 1: Walk to couch_198.
Action 2: Observe around couch_198 with the question of Check if this is the desired couch to sit.
Action 3: Sit on couch_198.
Action 4: char stand up.
Action 5: Walk to couch_269.
Action 6: look for remote_control_2124 around couch_269.
Action 7: Walk to remote_control_2124.
Action 8: Observe around remote_control_2124 with the question of Check if this is the desired remote to turn on the TV.
Action 9: Walk to television_281.
Action 10: Switch on television_281.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_280_around_computer_276(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_phone_2147_around_phone_2147(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==2147
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior use_remote_to_turn_on_tv(remote_control:item, television:item):
    body:
        achieve is_on(television)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control) and id[remote_control] == 2124
        # Select the remote control with ID 2124
        
        bind television: item where:
            is_television(television) and id[television] == 281
        # Select the television with ID 281

        use_remote_to_turn_on_tv(remote_control, television)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_remote_control(object:item):
    symbol has_remote=exists remote: item : is_remote_control(remote) and close(remote, object)
    return has_remote

behavior use_remote_control(remote:item, tv:item):
    body:
        achieve inhand(remote)
        assert has_switch(tv)
        achieve is_on(tv)

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch] == 269
        # Select the couch with ID 269

        if not has_remote_control(couch):
            observe(couch, "Check if there is a remote control around the couch")

        bind remote_control: item where:
            is_remote_control(remote_control) and close(remote_control, couch)
        
        bind tv: item where:
            is_television(tv)
        
        use_remote_control(remote_control, tv)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. find the remote control and turn on the tv." ?
Answer: Touch the remote control to turn on the TV.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_213_around_computer_276(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_phone_71_around_phone_2016(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==2016
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_remote(remote_control:item, tv:item):
    body:
        if not visited(remote_control):
            observe(remote_control, "Check if this is the desired remote to turn on the TV")
        if not visited(tv):
            observe(tv, "Check if this is the desired TV to be turned on")

behavior use_remote_to_turn_on_tv(remote_control:item, tv:item):
    body:
        achieve close_char(char, remote_control)
        touch(remote_control)
        achieve is_on(tv)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control) and id[remote_control] == 2124
        # Select remote control with ID 2124

        bind tv: item where:
            is_television(tv) and id[tv] == 281
        # Select television with ID 281

        observe_remote(remote_control, tv)
        use_remote_to_turn_on_tv(remote_control, tv)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior observe_remote(remote_control:item, tv:item):
    body:
        if not visited(remote_control):
            observe(remote_control, "Check if this is the desired remote to turn on the TV")
        if not visited(tv):
            observe(tv, "Check if this is the desired TV to be turned on")

behavior use_remote_to_turn_on_tv(remote_control:item, tv:item):
    body:
        achieve close_char(char, remote_control)
        touch(remote_control)
        achieve is_on(tv)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control) and id[remote_control] == 2124
        # Select remote control with ID 2124

        bind tv: item where:
            is_television(tv) and id[tv] == 281
        # Select television with ID 281

        observe_remote(remote_control, tv)
        use_remote_to_turn_on_tv(remote_control, tv)

##############################
From agent.py-> find a plan in act()
walk_executor(remote_control_2124)obs(remote_control_2124, Check if this is the desired remote to turn on the TV)walk_executor(television_281)obs(television_281, Check if this is the desired TV to be turned on)walk_executor(remote_control_2124)touch_executor(remote_control_2124)
##############################
From agent.py
walk_executor(remote_control_2124)
Robot is inside home_office_241. Robot is close tvstand_273. Robot is close remote_control_2124. Robot is on couch_198. Robot is no longer close television_281.
##############################
From agent.py
obs(remote_control_2124, Check if this is the desired remote to turn on the TV)
Get this information:  remote_control_2124 is inside home_office_241. remote_control_2124 is on tvstand_273. remote_control_2124 is close to tvstand_273. remote_control_2124 is close to character_240. remote_control_2124 is OFF.
##############################
From agent.py
walk_executor(television_281)
Robot is inside home_office_241. Robot is close tvstand_273. Robot is close television_281. Robot is on couch_198. Robot is no longer close remote_control_2124.
##############################
From agent.py
obs(television_281, Check if this is the desired TV to be turned on)
Get this information:  television_281 is close to floor_259. television_281 is close to floor_260. television_281 is close to floor_261. television_281 is close to wall_69. television_281 is close to powersocket_282. television_281 is close to tvstand_273. television_281 is close to wall_244. television_281 is close to doorjamb_309. television_281 is close to wall_247. television_281 is close to ceiling_250. television_281 is close to door_62. television_281 is close to character_240. ceiling_255 is facing television_281. orchid_285 is facing television_281. television_281 is inside home_office_241. walllamp_307 is facing television_281. wall_247 is facing television_281. drawing_288 is facing television_281. ceiling_250 is facing television_281. floor_261 is facing television_281. wall_242 is facing television_281. floor_264 is facing television_281. television_281 is facing drawing_288. table_270 is facing television_281. floor_259 is facing television_281. ceiling_251 is facing television_281. tvstand_273 is facing television_281. ceilinglamp_303 is facing television_281. floor_265 is facing television_281. ceiling_254 is facing television_281. mat_284 is facing television_281. walllamp_306 is facing television_281. floor_260 is facing television_281. television_281 is on tvstand_273. television_281 is CLEAN. television_281 is ON. television_281 is PLUGGED_IN.
##############################
From agent.py
walk_executor(remote_control_2124)
Robot is inside home_office_241. Robot is close tvstand_273. Robot is close remote_control_2124. Robot is on couch_198. Robot is no longer close television_281.
##############################
From agent.py
touch_executor(remote_control_2124)
Robot is inside home_office_241. Robot is close tvstand_273. Robot is close remote_control_2124. Robot is on couch_198. 
##############################
From agent.py
Human Instruction: You need to use the remote control to turn on the TV, as you have only touched the remote control but not used it to turn on the TV in accordance with the original instruction.

Human Guidance: Touch the remote control to turn on the TV.
The actions you have taken:
Action 1: Walk to couch_198.
Action 2: Observe around couch_198 with the question of Check if this is the desired couch to sit.
Action 3: Sit on couch_198.
Action 4: char stand up.
Action 5: Walk to couch_269.
Action 6: look for remote_control_2124 around couch_269.
Action 7: Walk to remote_control_2124.
Action 8: Observe around remote_control_2124 with the question of Check if this is the desired remote to turn on the TV.
Action 9: Walk to television_281.
Action 10: Switch on television_281.
Action 11: Walk to remote_control_2124.
Action 12: Observe around remote_control_2124 with the question of Check if this is the desired remote to turn on the TV.
Action 13: Walk to television_281.
Action 14: Observe around television_281 with the question of Check if this is the desired TV to be turned on.
Action 15: Walk to remote_control_2124.
Action 16: Touch remote_control_2124.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2029_around_phone_2017(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==2017
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_use_remote_control(remote_control:item, tv:item):
    body:
        achieve_once inhand(remote_control)
        achieve is_on(tv)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control
        
        bind tv: item where:
            is_television(tv)
        # Select the television

        find_and_use_remote_control(remote_control, tv)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_and_use_remote_control(remote_control:item, tv:item):
    body:
        achieve_once inhand(remote_control)
        achieve is_on(tv)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control
        
        bind tv: item where:
            is_television(tv)
        # Select the television

        find_and_use_remote_control(remote_control, tv)

##############################
From agent.py-> find a plan in act()
grab_executor(remote_control_2124)
##############################
From agent.py
grab_executor(remote_control_2124)
Robot is inside home_office_241. Robot is close tvstand_273. Robot is close remote_control_2124. Robot is on couch_198. Grabbing remote_control_2124 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Change_TV_channel/g3.txt
Checking k1
missed actions: 
missed action num: 0
##############################
