From agent.py
Reset goals: The sub-goals are: 
['Slice some chicken and give it to the cat.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2032_around_kitchen_counter_119(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cat,kitchen_counter_instance)
        else:
            exp(cat,kitchen_counter_instance)
    eff:
        unknown[cat]=False
        close[cat,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cat]=True
    

behavior find_food_chicken_2089_around_kitchen_counter_119(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_food_food_2064_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_knife_2122_around_kitchen_counter_119(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_chicken(chicken:item):
    body:
        achieve cut(chicken)

behavior give_to_cat(chicken:item, cat:item):
    body:
        achieve close(chicken, cat)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an item classified as chicken
        
        bind cat: item where:
            is_cat(cat)
        # Select an item classified as the cat
        
        slice_chicken(chicken)
        # Slice the selected chicken
        
        give_to_cat(chicken, cat)
        # Give the sliced chicken to the cat

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_kitchen_counter_119(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cat,kitchen_counter_instance)
        else:
            exp(cat,kitchen_counter_instance)
    eff:
        unknown[cat]=False
        close[cat,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cat]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_chicken_2089_around_kitchen_counter_119(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def is_chicken_cut(chicken:item):
    # Check if the chicken is cut
    symbol chicken_cut = cut(chicken)
    return chicken_cut

behavior cut_chicken(chicken:item, knife:item):
    body:
        achieve_once inhand(knife)
        # Temporarily hold the knife
        achieve cut(chicken)
        # Cut the chicken

behavior give_chicken_to_cat(chicken:item, cat:item):
    body:
        achieve close(chicken, cat)
        # Place the cut chicken near the cat

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind cat: item where:
            is_cat(cat)
        # Select the cat

        if not is_chicken_cut(chicken):
            cut_chicken(chicken, knife)
            # Cut the chicken if its not already cut

        give_chicken_to_cat(chicken, cat)
        # Give the cut chicken to the cat

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "slice some chicken and give it to the cat." ?
Answer: Cut some chicken, and put the chicken close to the cat.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2032_around_kitchen_counter_119(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cat,kitchen_counter_instance)
        else:
            exp(cat,kitchen_counter_instance)
    eff:
        unknown[cat]=False
        close[cat,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cat]=True
    

behavior find_food_chicken_2089_around_kitchen_counter_119(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_knife_2035_around_kitchen_counter_119(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_chicken(chicken:item):
    body:
        achieve cut(chicken)

behavior give_to_cat(chicken:item, cat:item):
    body:
        achieve close(chicken, cat)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind cat: item where:
            is_cat(cat)
        slice_chicken(chicken)
        give_to_cat(chicken, cat)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2032_around_kitchen_counter_119(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cat,kitchen_counter_instance)
        else:
            exp(cat,kitchen_counter_instance)
    eff:
        unknown[cat]=False
        close[cat,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cat]=True
    

behavior find_food_chicken_2089_around_kitchen_counter_119(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_food_turkey_2112_around_kitchen_counter_123(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_turkey,kitchen_counter_instance)
        else:
            exp(food_turkey,kitchen_counter_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_turkey]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cutting_board_2123_around_kitchen_counter_119(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_chicken(chicken:item):
    body:
        achieve cut(chicken)
        # Slice the chicken

behavior give_to_cat(chicken:item, cat:item):
    body:
        achieve close(chicken, cat)
        # Put the chicken close to the cat

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken item

        bind cat: item where:
            is_cat(cat)
        # Select a cat item

        slice_chicken(chicken)
        give_to_cat(chicken, cat)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_chicken_2089, kitchen_counter_119)exp(cutting_board_2123, kitchen_counter_119)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(cutting_board_2123)put_executor(food_chicken_2089, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_chicken_2089)cut_executor(food_chicken_2089)walk_executor(kitchen_counter_119)exp(cat_2127, kitchen_counter_119)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(cat_2127)put_executor(food_chicken_2089, cat_2127)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g2.txt
Checking k1
missed actions: walk_executor(fridge_126);switchoff_executor(fridge_126);open_executor(fridge_126);walk_executor(food_chicken_2089);grab_executor(food_chicken_2089);walk_executor(cutting_board_2123);put_executor(food_chicken_2089, cutting_board_2123);walk_executor(knife_2122);grab_executor(knife_2122);walk_executor(food_chicken_2089);cut_executor(food_chicken_2089);
missed action num: 11
##############################
From agent.py
exp(food_chicken_2089, kitchen_counter_119)
Failed to find food_chicken_2089 around kitchen_counter_119. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut some chicken and put it close to the cat.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2032_around_couch_269(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_chicken_2089_around_cutting_board_2123(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_chicken,cutting_board_instance)
        else:
            exp(food_chicken,cutting_board_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,cutting_board_instance]=True
        close[cutting_board_instance,food_chicken]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_food_2094_around_cutting_board_2123(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_food,cutting_board_instance)
        else:
            exp(food_food,cutting_board_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cutting_board_instance]=True
        close[cutting_board_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
def has_chicken_in_kitchen_counter(kitchen_counter:item):
    # Function to check if there is chicken on a specified kitchen counter
    symbol has_chicken=exists o: item : is_food_chicken(o) and on(o, kitchen_counter)
    return has_chicken

behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken)
        # Cut the chicken

behavior place_chicken_for_cat(chicken:item, cat:item):
    body:
        achieve close(chicken, cat)
        # Place the chicken close to the cat

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter] == 119
        # Select the kitchen counter with ID 119

        bind chicken: item where:
            is_food_chicken(chicken) and on(chicken, kitchen_counter)
        # Select chicken on the kitchen counter

        bind cat: item where:
            is_cat(cat)
        # Select the cat

        cut_chicken(chicken)
        place_chicken_for_cat(chicken, cat)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2032_around_couch_269(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_food_2073_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
def is_cat_close(cat:item, target:item):
    # Function to check if the cat is close to a specific target
    symbol cat_is_close=exists t: item : close(cat, t) and t==target
    return cat_is_close

behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Bind the item recognized as chicken
    
        cut_chicken(chicken)
        # Cut the chicken
        
        bind cat: item where:
            is_cat(cat)
        # Bind the item recognized as a cat
        
        observe(cat, "Observe the location of the cat")
        # Observe to get the location of the cat so we know where to place the chicken

        if not is_cat_close(cat, chicken):
            achieve close(chicken, cat)
        # Ensure the chicken is placed close to the cat

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut some chicken and put it close to the cat.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_couch_269(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_food_chicken_2089_around_cutting_board_2123(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_chicken,cutting_board_instance)
        else:
            exp(food_chicken,cutting_board_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,cutting_board_instance]=True
        close[cutting_board_instance,food_chicken]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken) # Achieve the state of the chicken being cut

behavior place_close_to_cat(chicken:item, cat:item):
    body:
        achieve close(chicken, cat) # Place the chicken close to the cat

def is_cat_in_vicinity(cat:item):
    # Function to ensure the item is a cat
    symbol cat_present=exists c: item : is_cat(c)
    return cat_present

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and visited(chicken)
        # Identifying the chicken based on being visited and food status

        if not cut(chicken):
            cut_chicken(chicken) 
            # Cutting the chicken if not already cut

        if exists cat: item : is_cat(cat) and is_cat_in_vicinity(cat):
            bind cat: item where:
                is_cat(cat)
            place_close_to_cat(chicken, cat)
            # Place the cut chicken close to the cat if cat is confirmed to be in vicinity

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2032_around_couch_269(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_cup_2132_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_kitchen_counter_accessible(item: item):
    # Determine if an item is on a kitchen counter and grabbable
    symbol accessible = is_kitchen_counter(kitchen_counter_119) and on(item, kitchen_counter_119) and grabbable(item)
    return accessible

behavior place_on_floor(chicken:item, cat:item):
    body:
        achieve close(chicken, cat)
        
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and not cut(chicken) and on(chicken, kitchen_counter_119)
        # Select an uncutted chicken on the kitchen counter
        
        observe(kitchen_counter_119, "Check if there is a knife on the kitchen counter to cut chicken")
        # Observe the kitchen counter to locate a knife
        
        if not is_kitchen_counter_accessible(chicken):
            observe(kitchen_counter_119, "Check if you can access the chicken on the kitchen counter")
        
        # Use a knife to cut the chicken
        achieve cut(chicken)
        
        bind cat: item where:
            is_cat(cat)
        # Select cat item in the scene
        
        place_on_floor(chicken, cat)
        # Place the cut chicken close to the cat

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: kitchen_counter_119; available variables: [Variable<item: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cat_2069_around_couch_269(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_chicken_2089_around_cutting_board_2123(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_chicken,cutting_board_instance)
        else:
            exp(food_chicken,cutting_board_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,cutting_board_instance]=True
        close[cutting_board_instance,food_chicken]=True
    

#goal_representation
 
def is_kitchen_counter_accessible(item: item, kitchen_counter_119: item):
    # Determine if an item is on a kitchen counter and grabbable
    symbol accessible = is_kitchen_counter(kitchen_counter_119) and on(item, kitchen_counter_119) and grabbable(item)
    return accessible

behavior place_on_floor(chicken: item, cat: item):
    body:
        achieve close(chicken, cat)

behavior __goal__():
    body:
        bind kitchen_counter_119: item where:
            is_kitchen_counter(kitchen_counter_119)
        # Bind to the kitchen counter
        
        bind chicken: item where:
            is_food_chicken(chicken) and not cut(chicken) and on(chicken, kitchen_counter_119)
        # Select an uncutted chicken on the kitchen counter
        
        observe(kitchen_counter_119, "Check if there is a knife on the kitchen counter to cut chicken")
        # Observe the kitchen counter to locate a knife
        
        if not is_kitchen_counter_accessible(chicken, kitchen_counter_119):
            observe(kitchen_counter_119, "Check if you can access the chicken on the kitchen counter")
        
        # Use a knife to cut the chicken
        achieve cut(chicken)
        
        bind cat: item where:
            is_cat(cat)
        # Select cat item in the scene
        
        place_on_floor(chicken, cat)
        # Place the cut chicken close to the cat

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g2.txt
Checking k1
missed actions: walk_executor(fridge_126);switchoff_executor(fridge_126);open_executor(fridge_126);walk_executor(food_chicken_2089);grab_executor(food_chicken_2089);walk_executor(cutting_board_2123);put_executor(food_chicken_2089, cutting_board_2123);walk_executor(knife_2122);grab_executor(knife_2122);walk_executor(food_chicken_2089);cut_executor(food_chicken_2089);
missed action num: 11
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g2.txt
Checking k1
missed actions: walk_executor(fridge_126);switchoff_executor(fridge_126);open_executor(fridge_126);walk_executor(food_chicken_2089);grab_executor(food_chicken_2089);walk_executor(cutting_board_2123);put_executor(food_chicken_2089, cutting_board_2123);walk_executor(knife_2122);grab_executor(knife_2122);walk_executor(food_chicken_2089);cut_executor(food_chicken_2089);
missed action num: 11
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g2.txt
Checking k2
missed actions: walk_executor(fridge_126);switchoff_executor(fridge_126);open_executor(fridge_126);walk_executor(food_chicken_2089);grab_executor(food_chicken_2089);walk_executor(cat_2127);put_executor(food_chicken_2089, cat_2127);
missed action num: 7
##############################
