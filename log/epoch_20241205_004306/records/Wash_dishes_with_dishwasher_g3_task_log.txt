From agent.py
Reset goals: The sub-goals are: 
['1. Identify the bowls and plates that need to be washed and load them into the dishwasher.', '2. Wash the forks by hand.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2140_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_plate_2152_around_cupboard_118(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_bowl_2141_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

def has_dirty_bowls_and_plates(dishwasher:item):
    # Function to check if there are dirty bowls or plates that need washing
    symbol has_items=exists o: item : (is_bowl(o) or is_plate(o)) and dirty(o)
    return has_items

behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher
        foreach o: item:
            # Load all dirty bowls and plates into the dishwasher
            if (is_bowl(o) or is_plate(o)) and dirty(o):
                load_dishwasher(o, dishwasher)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2140_around_dishwasher_129(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_plate_2152_around_cupboard_118(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def has_dirty_dishwasher(x: item):
    # Function to check if dishwasher has dirty bowls or plates inside
    symbol has_dirty_items=exists o: item : (is_plate(o) or is_bowl(o)) and dirty(o) and inside(o, x)
    return has_dirty_items

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        if not has_dirty_dishwasher(dishwasher):
            observe(dishwasher, "Check if there are dirty bowls or plates in the dishwasher")
        
        foreach o: item:
            # Load all dirty bowls and plates into the dishwasher
            if (is_plate(o) or is_bowl(o)) and dirty(o) and not inside(o, dishwasher):
                achieve inside(o, dishwasher)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_dirty_dishwasher(x: item):
    # Function to check if dishwasher has dirty bowls or plates inside
    symbol has_dirty_items=exists o: item : (is_plate(o) or is_bowl(o)) and dirty(o) and inside(o, x)
    return has_dirty_items

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        if not has_dirty_dishwasher(dishwasher):
            observe(dishwasher, "Check if there are dirty bowls or plates in the dishwasher")
        
        foreach o: item:
            # Load all dirty bowls and plates into the dishwasher
            if (is_plate(o) or is_bowl(o)) and dirty(o) and not inside(o, dishwasher):
                achieve inside(o, dishwasher)

##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_129)open_executor(dishwasher_129)obs(dishwasher_129, Check if there are dirty bowls or plates in the dishwasher)
##############################
From agent.py
walk_executor(dishwasher_129)
Find detergent_2011. Find measuring_cup_2012. Robot is inside dining_room_41. Robot is close dishwasher_129. Robot is close detergent_2011. Robot is close measuring_cup_2012. 
##############################
From agent.py
open_executor(dishwasher_129)
Robot is inside dining_room_41. Robot is close dishwasher_129. Robot is close detergent_2011. Robot is close measuring_cup_2012. 
##############################
From agent.py
obs(dishwasher_129, Check if there are dirty bowls or plates in the dishwasher)
Get this information:  dishwasher_129 is inside dining_room_41. detergent_2011 is inside dishwasher_129. dishwasher_129 is close to wall_64. dishwasher_129 is close to coffe_maker_130. dishwasher_129 is close to trashcan_99. dishwasher_129 is close to toaster_132. dishwasher_129 is close to wall_68. dishwasher_129 is close to microwave_135. dishwasher_129 is close to walllamp_139. dishwasher_129 is close to floor_46. dishwasher_129 is close to floor_51. dishwasher_129 is close to cupboard_118. dishwasher_129 is close to kitchen_counter_122. dishwasher_129 is close to detergent_2011. dishwasher_129 is close to measuring_cup_2012. dishwasher_129 is close to character_240. measuring_cup_2012 is inside dishwasher_129. dishwasher_129 is OFF. dishwasher_129 is CLEAN. dishwasher_129 is PLUGGED_IN. dishwasher_129 is OPEN.
##############################
From agent.py
Human Instruction: You need to identify and load dirty bowls and plates into the dishwasher. Ensure you check for dirty items around the dishwasher or in the surrounding area and place them inside the dishwasher before proceeding to the next sub-task.

The actions you have taken:
Action 1: Walk to dishwasher_129.
Action 2: Open dishwasher_129.
Action 3: Observe around dishwasher_129 with the question of Check if there are dirty bowls or plates in the dishwasher.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2140_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_plate_2152_around_kitchen_counter_119(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_bowl_2141_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(o:item, dishwasher:item):
    # Define the behavior to load an item into the dishwasher
    body:
        achieve inside(o, dishwasher)

behavior __goal__():
    # Current subtask is to identify bowls and plates that need to be washed and load them into the dishwasher
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher] == 129
        # Select dishwasher with ID 129

        foreach o: item:
            # Look for any dirty bowls or plates in the environment
            if is_bowl(o) or is_plate(o):
                observe(o, "Check if this bowl or plate is dirty")
                if dirty(o):
                    load_dishwasher(o, dishwasher)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior load_dishwasher(o:item, dishwasher:item):
    # Define the behavior to load an item into the dishwasher
    body:
        achieve inside(o, dishwasher)

behavior __goal__():
    # Current subtask is to identify bowls and plates that need to be washed and load them into the dishwasher
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher] == 129
        # Select dishwasher with ID 129

        foreach o: item:
            # Look for any dirty bowls or plates in the environment
            if is_bowl(o) or is_plate(o):
                observe(o, "Check if this bowl or plate is dirty")
                if dirty(o):
                    load_dishwasher(o, dishwasher)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(bowl_2140, kitchen_counter_119)walk_executor(bowl_2140)obs(bowl_2140, Check if this bowl or plate is dirty)walk_executor(kitchen_counter_119)exp(bowl_2141, kitchen_counter_119)walk_executor(bowl_2141)obs(bowl_2141, Check if this bowl or plate is dirty)walk_executor(kitchen_counter_119)exp(bowl_2142, kitchen_counter_119)walk_executor(bowl_2142)obs(bowl_2142, Check if this bowl or plate is dirty)walk_executor(kitchen_counter_119)exp(plate_2152, kitchen_counter_119)walk_executor(plate_2152)obs(plate_2152, Check if this bowl or plate is dirty)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is no longer close dishwasher_129.Robot is no longer close detergent_2011.Robot is no longer close measuring_cup_2012.
##############################
From agent.py
exp(bowl_2140, kitchen_counter_119)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)obs(bowl_2140, Check if this bowl or plate is dirty)grab_executor(bowl_2140)walk_executor(dishwasher_129)putin_executor(bowl_2140, dishwasher_129)walk_executor(bowl_2141)obs(bowl_2141, Check if this bowl or plate is dirty)grab_executor(bowl_2141)walk_executor(dishwasher_129)putin_executor(bowl_2141, dishwasher_129)walk_executor(bowl_2142)obs(bowl_2142, Check if this bowl or plate is dirty)grab_executor(bowl_2142)walk_executor(dishwasher_129)putin_executor(bowl_2142, dishwasher_129)walk_executor(plate_2152)obs(plate_2152, Check if this bowl or plate is dirty)grab_executor(plate_2152)walk_executor(dishwasher_129)putin_executor(plate_2152, dishwasher_129)
##############################
From agent.py
walk_executor(bowl_2140)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close bowl_2140. 
##############################
From agent.py
obs(bowl_2140, Check if this bowl or plate is dirty)
Get this information:  bowl_2140 is close to kitchen_counter_119. bowl_2140 is close to character_240. bowl_2140 is inside dining_room_41. bowl_2140 is on kitchen_counter_119. bowl_2140 is DIRTY.
##############################
From agent.py
grab_executor(bowl_2140)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close bowl_2140. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot is inside dining_room_41. Robot is close bowl_2140. Robot is close dishwasher_129. Robot is close detergent_2011. Robot is close measuring_cup_2012. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
putin_executor(bowl_2140, dishwasher_129)
Robot is inside dining_room_41. Robot is close bowl_2140. Robot is close dishwasher_129. Robot is close detergent_2011. Robot is close measuring_cup_2012. bowl_2140 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2141)
Robot is inside dining_room_41. Robot is close bowl_2141. Robot is close kitchen_counter_119. Robot is no longer close dishwasher_129.Robot is no longer close detergent_2011.Robot is no longer close bowl_2140.Robot is no longer close measuring_cup_2012.
##############################
From agent.py
obs(bowl_2141, Check if this bowl or plate is dirty)
Get this information:  bowl_2141 is on kitchen_counter_119. bowl_2141 is close to kitchen_counter_119. bowl_2141 is close to character_240. bowl_2141 is inside dining_room_41. bowl_2141 is DIRTY.
##############################
From agent.py
grab_executor(bowl_2141)
Robot is inside dining_room_41. Robot is close bowl_2141. Robot is close kitchen_counter_119. Grabbing bowl_2141 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot is inside dining_room_41. Robot is close bowl_2141. Robot is close dishwasher_129. Robot is close detergent_2011. Robot is close bowl_2140. Robot is close measuring_cup_2012. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
putin_executor(bowl_2141, dishwasher_129)
Robot is inside dining_room_41. Robot is close bowl_2141. Robot is close dishwasher_129. Robot is close detergent_2011. Robot is close bowl_2140. Robot is close measuring_cup_2012. bowl_2141 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2142)
Find iron_2161. Robot is inside dining_room_41. Robot is close bowl_2142. Robot is close kitchen_counter_119. Robot is no longer close dishwasher_129.Robot is no longer close measuring_cup_2012.Robot is no longer close detergent_2011.Robot is no longer close bowl_2140.Robot is no longer close bowl_2141.
##############################
From agent.py
obs(bowl_2142, Check if this bowl or plate is dirty)
Get this information:  bowl_2142 is inside dining_room_41. iron_2161 is on bowl_2142. bowl_2142 is on kitchen_counter_119. bowl_2142 is close to iron_2161. bowl_2142 is close to kitchen_counter_119. bowl_2142 is close to character_240. bowl_2142 is DIRTY.
##############################
From agent.py
grab_executor(bowl_2142)
Robot is inside dining_room_41. Robot is close bowl_2142. Robot is close kitchen_counter_119. Grabbing bowl_2142 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot is inside dining_room_41. Robot is close bowl_2142. Robot is close dishwasher_129. Robot is close measuring_cup_2012. Robot is close detergent_2011. Robot is close bowl_2140. Robot is close bowl_2141. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
putin_executor(bowl_2142, dishwasher_129)
Robot is inside dining_room_41. Robot is close bowl_2142. Robot is close dishwasher_129. Robot is close measuring_cup_2012. Robot is close detergent_2011. Robot is close bowl_2140. Robot is close bowl_2141. bowl_2142 released by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot is inside dining_room_41. Robot is close plate_2152. Robot is close kitchen_counter_119. Robot is no longer close dishwasher_129.Robot is no longer close measuring_cup_2012.Robot is no longer close detergent_2011.Robot is no longer close bowl_2140.Robot is no longer close bowl_2141.Robot is no longer close bowl_2142.
##############################
From agent.py
obs(plate_2152, Check if this bowl or plate is dirty)
Get this information:  plate_2152 is on kitchen_counter_119. plate_2152 is close to kitchen_counter_119. plate_2152 is close to character_240. plate_2152 is inside dining_room_41. plate_2152 is DIRTY.
##############################
From agent.py
grab_executor(plate_2152)
Robot is inside dining_room_41. Robot is close plate_2152. Robot is close kitchen_counter_119. Grabbing plate_2152 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot is inside dining_room_41. Robot is close plate_2152. Robot is close dishwasher_129. Robot is close measuring_cup_2012. Robot is close detergent_2011. Robot is close bowl_2140. Robot is close bowl_2141. Robot is close bowl_2142. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
putin_executor(plate_2152, dishwasher_129)
Robot is inside dining_room_41. Robot is close plate_2152. Robot is close dishwasher_129. Robot is close measuring_cup_2012. Robot is close detergent_2011. Robot is close bowl_2140. Robot is close bowl_2141. Robot is close bowl_2142. plate_2152 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def find_fork(fork:item):
    # Function to check if an item is a fork and dirty
    symbol is_dirty_fork = is_fork(fork) and dirty(fork)
    return is_dirty_fork

behavior clean_fork_by_hand(fork:item):
    body:
        wash(fork) # Wash the fork by hand

behavior __goal__():
    body:
        foreach fork: item:
            if find_fork(fork):
                clean_fork_by_hand(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_fork_dirty(fork:item):
    symbol fork_dirty=exists f: item : is_fork(f) and dirty(f)
    return fork_dirty

behavior wash_fork(fork:item):
    body:
        wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and is_fork_dirty(fork):
                wash_fork(fork)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. wash the forks by hand." ?
Answer: Wash the forks by hand.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind fork: item where:
            is_fork(fork) and dirty(fork)
        # Select any fork that is dirty

        wash(fork)
        # Wash the selected fork by hand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior wash_fork_by_hand(fork:item):
    body:
        wash(fork) # Wash the fork by hand

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_fork_by_hand(fork)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_fork_by_hand(fork:item):
    body:
        wash(fork) # Wash the fork by hand

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_fork_by_hand(fork)

##############################
From agent.py-> find a plan in act()
walk_executor(fork_2150)wash_executor(fork_2150)walk_executor(fork_2151)wash_executor(fork_2151)
##############################
From agent.py
walk_executor(fork_2150)
Robot is inside dining_room_41. Robot is close fork_2150. Robot is close kitchen_counter_119. Robot is no longer close dishwasher_129.Robot is no longer close plate_2152.Robot is no longer close measuring_cup_2012.Robot is no longer close detergent_2011.Robot is no longer close bowl_2140.Robot is no longer close bowl_2141.Robot is no longer close bowl_2142.
##############################
From agent.py
wash_executor(fork_2150)
Robot is inside dining_room_41. Robot is close fork_2150. Robot is close kitchen_counter_119. 
##############################
From agent.py
walk_executor(fork_2151)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close fork_2151. Robot is no longer close fork_2150.
##############################
From agent.py
wash_executor(fork_2151)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close fork_2151. 
##############################
From evaluation.py
cdl_dataset/dataset/Wash_dishes_with_dishwasher/g3.txt
Checking k1
missed actions: walk_executor(dishwasher_129);close_executor(dishwasher_129);switchon_executor(dishwasher_129);
missed action num: 3
##############################
From evaluation.py
cdl_dataset/dataset/Wash_dishes_with_dishwasher/g3.txt
Checking k1
missed actions: walk_executor(dishwasher_129);close_executor(dishwasher_129);switchon_executor(dishwasher_129);
missed action num: 3
##############################
