From agent.py
Reset goals: The sub-goals are: 
['Get a cup of water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2033_around_washing_machine_2079(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(shoes,washing_machine_instance)
        else:
            exp(shoes,washing_machine_instance)
    eff:
        unknown[shoes]=False
        close[shoes,washing_machine_instance]=True
        close[washing_machine_instance,shoes]=True
    

behavior find_cup_2133_around_kitchen_counter_119(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup: item, faucet: item):
    # Fill the cup with water from the faucet
    body:
        achieve inside(cup, faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2133_around_kitchen_counter_119(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_shoes_2033_around_bench_115(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==115
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

#exp_behavior_end

#goal_representation
 
behavior get_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup)

def is_faucet_nearby(location:item):
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return has_faucet

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        get_cup(cup)

        if not has_water(cup):
            if not visited(cup):
                observe(cup, "Determine if it can be filled with water")

            if is_faucet_nearby(cup):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet, cup)

                fill_cup_with_water(cup)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior get_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup)

def is_faucet_nearby(location:item):
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return has_faucet

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        get_cup(cup)

        if not has_water(cup):
            if not visited(cup):
                observe(cup, "Determine if it can be filled with water")

            if is_faucet_nearby(cup):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet, cup)

                fill_cup_with_water(cup)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(cup_2132, kitchen_counter_119)walk_executor(cup_2132)grab_executor(cup_2132)obs(cup_2132, Determine if it can be filled with water)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_119)
Failed to find cup_2132 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(cup_2132, cupboard_118)walk_executor(cup_2132)grab_executor(cup_2132)obs(cup_2132, Determine if it can be filled with water)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(cup_2132, cupboard_118)
Failed to find cup_2132 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(cup_2132, cupboard_117)walk_executor(cup_2132)grab_executor(cup_2132)obs(cup_2132, Determine if it can be filled with water)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(cup_2132, cupboard_117)
Failed to find cup_2132 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_17)open_executor(bathroom_cabinet_17)exp(cup_2132, bathroom_cabinet_17)walk_executor(cup_2132)grab_executor(cup_2132)obs(cup_2132, Determine if it can be filled with water)
##############################
From agent.py
walk_executor(bathroom_cabinet_17)
Find tooth_paste_2059. Find drawing_33. Robot is inside bathroom_1. Robot is close bathroom_cabinet_17. Robot is close tooth_paste_2059. Robot is no longer inside dining_room_41.Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
open_executor(bathroom_cabinet_17)
Robot is inside bathroom_1. Robot is close bathroom_cabinet_17. Robot is close tooth_paste_2059. 
##############################
From agent.py
exp(cup_2132, bathroom_cabinet_17)
Failed to find cup_2132 around bathroom_cabinet_17. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_counter_18)exp(cup_2132, bathroom_counter_18)walk_executor(cup_2132)grab_executor(cup_2132)obs(cup_2132, Determine if it can be filled with water)
##############################
From agent.py
walk_executor(bathroom_counter_18)
Find mat_32. Find phone_2029. Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is no longer close bathroom_cabinet_17.Robot is no longer close tooth_paste_2059.
##############################
From agent.py
exp(cup_2132, bathroom_counter_18)
Failed to find cup_2132 around bathroom_counter_18. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2142)exp(cup_2132, bowl_2142)walk_executor(cup_2132)grab_executor(cup_2132)obs(cup_2132, Determine if it can be filled with water)
##############################
From agent.py
walk_executor(bowl_2142)
Find iron_2161. Robot is inside dining_room_41. Robot is close bowl_2142. Robot is close kitchen_counter_119. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2132 ?
Answer: Go to dining_room_41. Locate table_114. You will find cup_2132 on table_114. The cup is right next to the table.

##############################
From agent.py
Human Instruction: Go to dining_room_41. Locate table_114. You will find cup_2132 on table_114. The cup is right next to the table.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for cup_2132 around kitchen_counter_119.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for cup_2132 around cupboard_118.
Action 6: Walk to cupboard_117.
Action 7: look for cup_2132 around cupboard_117.
Action 8: Walk to bathroom_cabinet_17.
Action 9: Open bathroom_cabinet_17.
Action 10: look for cup_2132 around bathroom_cabinet_17.
Action 11: Walk to bathroom_counter_18.
Action 12: look for cup_2132 around bathroom_counter_18.
Action 13: Walk to bowl_2142.

##############################
From agent.py
exp(cup_2132, bowl_2142)
Failed to find cup_2132 around bowl_2142. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2132, table_114)walk_executor(cup_2132)grab_executor(cup_2132)obs(cup_2132, Determine if it can be filled with water)
##############################
From agent.py
walk_executor(table_114)
Find mat_102. Find dry_pasta_2114. Find food_food_2021. Find drawing_110. Find drawing_111. Find knife_2122. Find cup_2133. Find table_cloth_2005. Find food_bread_2084. Find pillow_104. Find cup_2049. Find box_2038. Find clothes_hat_2117. Find clothes_gloves_2118. Find milk_2115. Find pillow_103. Find pillow_105. Find pillow_106. Find lighter_2004. Find lighter_2039. Find cup_2134. Find check_2058. Find cup_2132. Robot is inside dining_room_41. Robot is close table_114. Robot is close mat_102. Robot is close floor_47. Robot is no longer close bowl_2142.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
exp(cup_2132, table_114)
Find cup_2132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2132)grab_executor(cup_2132)obs(cup_2132, Determine if it can be filled with water)
##############################
From agent.py
walk_executor(cup_2132)
Robot is inside dining_room_41. Robot is close table_114. Robot is close cup_2132. Robot is no longer close mat_102.Robot is no longer close floor_47.
##############################
From agent.py
grab_executor(cup_2132)
Robot is inside dining_room_41. Robot is close table_114. Robot is close cup_2132. Grabbing cup_2132 by right hand. 
##############################
From agent.py
obs(cup_2132, Determine if it can be filled with water)
Get this information:  cup_2132 is inside dining_room_41. cup_2132 is close to character_240.
##############################
From agent.py
Human Instruction: You need to fill the cup with water. Determine whether there is a faucet nearby that can be used to fill cup_2132 with water. If a faucet is nearby, proceed to fill the cup.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for cup_2132 around kitchen_counter_119.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for cup_2132 around cupboard_118.
Action 6: Walk to cupboard_117.
Action 7: look for cup_2132 around cupboard_117.
Action 8: Walk to bathroom_cabinet_17.
Action 9: Open bathroom_cabinet_17.
Action 10: look for cup_2132 around bathroom_cabinet_17.
Action 11: Walk to bathroom_counter_18.
Action 12: look for cup_2132 around bathroom_counter_18.
Action 13: Walk to bowl_2142.
Action 14: look for cup_2132 around bowl_2142.
Action 15: Walk to table_114.
Action 16: look for cup_2132 around table_114.
Action 17: Walk to cup_2132.
Action 18: Grab cup_2132.
Action 19: Observe around cup_2132 with the question of Determine if it can be filled with water.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_cutting_board_2123(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_vegetable,cutting_board_instance)
        else:
            exp(food_vegetable,cutting_board_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cutting_board_instance]=True
        close[cutting_board_instance,food_vegetable]=True
    

behavior find_food_snack_2110_around_kitchen_counter_122(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_snack,kitchen_counter_instance)
        else:
            exp(food_snack,kitchen_counter_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_snack]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet_nearby(cup:item):
    symbol faucet_nearby=exists faucet: item : is_faucet(faucet) and close(cup, faucet)
    return faucet_nearby

behavior fill_cup_with_water(cup:item):
    body:
        if has_faucet_nearby(cup):
            bind faucet: item where:
                is_faucet(faucet) and close(cup, faucet)
            achieve_once is_on(faucet)
            water(cup) # Fill the cup with water
            achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2132
        fill_cup_with_water(cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_vegetable_2113_around_cutting_board_2123(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_vegetable,cutting_board_instance)
        else:
            exp(food_vegetable,cutting_board_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cutting_board_instance]=True
        close[cutting_board_instance,food_vegetable]=True
    

behavior find_food_snack_2110_around_cutting_board_2123(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_snack,cutting_board_instance)
        else:
            exp(food_snack,cutting_board_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,cutting_board_instance]=True
        close[cutting_board_instance,food_snack]=True
    

#goal_representation
 
def has_faucet_nearby(cup:item):
    symbol faucet_nearby=exists faucet: item : is_faucet(faucet) and close(cup, faucet)
    return faucet_nearby

behavior fill_cup_with_water(cup:item):
    body:
        if has_faucet_nearby(cup):
            bind faucet: item where:
                is_faucet(faucet) and close(cup, faucet)
            achieve_once is_on(faucet)
            is_milk(cup) # Fill the cup with water
            achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2132
        fill_cup_with_water(cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Expr statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
