From agent.py
Reset goals: The sub-goals are: 
['1. Fill a bowl with water and place it on the table in the home office.', '2. Find your cat and place it on the table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2142_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_bowl_2141_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowlWithWater_and_place_on_table(bowl:item, table:item):
    body:
        achieve has_water(bowl)
        # Fill the bowl with water
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)
        # Select a table with a surface inside the home office
        fill_bowlWithWater_and_place_on_table(bowl, table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_bowlWithWater_and_place_on_table(bowl:item, table:item):
    body:
        achieve has_water(bowl)
        # Fill the bowl with water
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)
        # Select a table with a surface inside the home office
        fill_bowlWithWater_and_place_on_table(bowl, table)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(bowl_2140, kitchen_counter_119)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(table_270)put_executor(bowl_2140, table_270)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(bowl_2140);grab_executor(bowl_2140);walk_executor(faucet_20);switchon_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(table_270);put_executor(bowl_2140, table_270);
missed action num: 7
##############################
From agent.py
exp(bowl_2140, kitchen_counter_119)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(table_270)put_executor(bowl_2140, table_270)
##############################
From agent.py
walk_executor(bowl_2140)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close bowl_2140. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: grab_executor(bowl_2140);walk_executor(faucet_20);switchon_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(table_270);put_executor(bowl_2140, table_270);
missed action num: 6
##############################
From agent.py
grab_executor(bowl_2140)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close bowl_2140. Grabbing bowl_2140 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(faucet_20);switchon_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(table_270);put_executor(bowl_2140, table_270);
missed action num: 5
##############################
From agent.py
walk_executor(faucet_20)
Find drawing_33. Find mat_32. Find phone_2029. Robot is inside bathroom_1. Robot is close bowl_2140. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer inside dining_room_41.Robot is no longer close kitchen_counter_119.
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: switchon_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(table_270);put_executor(bowl_2140, table_270);
missed action num: 4
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bowl_2140. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(table_270);put_executor(bowl_2140, table_270);
missed action num: 2
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bowl_2140. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(table_270);put_executor(bowl_2140, table_270);
missed action num: 2
##############################
From agent.py
walk_executor(table_270)
Find shampoo_2019. Find pillow_286. Find pencil_2014. Find pillow_287. Find brush_2002. Find drawing_288. Find shoes_2033. Find phone_2017. Robot is inside home_office_241. Robot is close bowl_2140. Robot is close couch_269. Robot is close table_270. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: put_executor(bowl_2140, table_270);
missed action num: 1
##############################
From agent.py
put_executor(bowl_2140, table_270)
Find check_2075. Find keyboard_278. Find blow_dryer_2057. Find stamp_2043. Find hanger_292. Find phone_2147. Find headset_2131. Find mat_284. Find cd_2145. Find stamp_2022. Find cat_2069. Find hanger_293. Find chair_271. Find cd_player_2129. Find clothes_pants_2036. Find remote_control_2124. Find pencil_2020. Find mouse_280. Find headset_2146. Find hanger_294. Find dvd_player_2130. Robot is inside home_office_241. Robot is close bowl_2140. Robot is close couch_269. Robot is close table_270. bowl_2140 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: 
missed action num: 0
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k2
missed actions: walk_executor(cat_2127);grab_executor(cat_2127);walk_executor(table_270);put_executor(cat_2127, table_270);
missed action num: 4
##############################
From agent.py
Human Instruction: You need to confirm that the bowl is filled with water. The actions indicate that the faucet was turned on and off, but there is no explicit confirmation that the bowl was filled with water. Ensure the bowl contains water before marking this sub-task as complete.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for bowl_2140 around kitchen_counter_119.
Action 3: Walk to bowl_2140.
Action 4: Grab bowl_2140.
Action 5: Walk to faucet_20.
Action 6: Switch on faucet_20.
Action 7: Switch off faucet_20.
Action 8: Walk to table_270.
Action 9: Put bowl_2140 on table_270.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_check_2026_around_computer_276(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(check,computer_instance)
        else:
            exp(check,computer_instance)
    eff:
        unknown[check]=False
        close[check,computer_instance]=True
        close[computer_instance,check]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        if not has_water(bowl):
            achieve_once is_on(faucet) 
            achieve has_water(bowl)
            achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2140
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        bind table: item where:
            is_table(table) and id[table] == 270 and inside(table, home_office)

        fill_bowl_with_water(bowl, faucet)
        achieve on(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_vegetable_2113_around_cutting_board_2123(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_vegetable,cutting_board_instance)
        else:
            exp(food_vegetable,cutting_board_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cutting_board_instance]=True
        close[cutting_board_instance,food_vegetable]=True
    

behavior find_check_2026_around_desk_272(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(check,desk_instance)
        else:
            exp(check,desk_instance)
    eff:
        unknown[check]=False
        close[check,desk_instance]=True
        close[desk_instance,check]=True
    

#goal_representation
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        if not has_water(bowl):
            achieve_once is_on(faucet) 
            achieve has_water(bowl)
            achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2140
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        bind table: item where:
            is_table(table) and id[table] == 270 and inside(table, home_office)
        bind home_office: item where:
            is_home_office(home_office)

        fill_bowl_with_water(bowl, faucet)
        achieve on(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_check_2026_around_desk_272(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(check,desk_instance)
        else:
            exp(check,desk_instance)
    eff:
        unknown[check]=False
        close[check,desk_instance]=True
        close[desk_instance,check]=True
    

#goal_representation

behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        if not has_water(bowl):
            achieve_once is_on(faucet) 
            achieve has_water(bowl)
            achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2140
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        bind table: item where:
            is_table(table) and id[table] == 270 and inside(table, home_office)

        fill_bowl_with_water(bowl, faucet)
        achieve on(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_cutting_board_2123(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_vegetable,cutting_board_instance)
        else:
            exp(food_vegetable,cutting_board_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cutting_board_instance]=True
        close[cutting_board_instance,food_vegetable]=True
    

behavior find_check_2071_around_washing_machine_2079(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(check,washing_machine_instance)
        else:
            exp(check,washing_machine_instance)
    eff:
        unknown[check]=False
        close[check,washing_machine_instance]=True
        close[washing_machine_instance,check]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl: item, faucet: item):
    body:
        achieve close_char(char, faucet)
        # Approach the faucet
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the bowl with water
        achieve has_water(bowl)
        # Ensure bowl is filled with water
        achieve_once is_off(faucet)
        # Turn off the faucet after filling the bowl

behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an item that is a bowl

        bind faucet: item where:
            is_faucet(faucet)
        # Select an item that is a faucet

        bind table: item where:
            is_table(table) and id[table] == 270
        # Select a table with ID 270

        fill_bowl_with_water(bowl, faucet)
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_bowl_with_water(bowl: item, faucet: item):
    body:
        achieve close_char(char, faucet)
        # Approach the faucet
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the bowl with water
        achieve has_water(bowl)
        # Ensure bowl is filled with water
        achieve_once is_off(faucet)
        # Turn off the faucet after filling the bowl

behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an item that is a bowl

        bind faucet: item where:
            is_faucet(faucet)
        # Select an item that is a faucet

        bind table: item where:
            is_table(table) and id[table] == 270
        # Select a table with ID 270

        fill_bowl_with_water(bowl, faucet)
        place_bowl_on_table(bowl, table)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer inside home_office_241.Robot is no longer close bowl_2140.Robot is no longer close couch_269.Robot is no longer close table_270.
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k2
missed actions: walk_executor(cat_2127);grab_executor(cat_2127);walk_executor(table_270);put_executor(cat_2127, table_270);
missed action num: 4
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k2
missed actions: walk_executor(cat_2127);grab_executor(cat_2127);walk_executor(table_270);put_executor(cat_2127, table_270);
missed action num: 4
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k2
missed actions: walk_executor(cat_2127);grab_executor(cat_2127);walk_executor(table_270);put_executor(cat_2127, table_270);
missed action num: 4
##############################
From agent.py
Human Instruction: Ensure that the bowl is explicitly filled with water before placing it on the table. There is no confirmation that water was added to the bowl despite the faucet being turned on and off. Check and confirm that the bowl contains water.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for bowl_2140 around kitchen_counter_119.
Action 3: Walk to bowl_2140.
Action 4: Grab bowl_2140.
Action 5: Walk to faucet_20.
Action 6: Switch on faucet_20.
Action 7: Switch off faucet_20.
Action 8: Walk to table_270.
Action 9: Put bowl_2140 on table_270.
Action 10: Walk to faucet_20.
Action 11: Switch on faucet_20.
Action 12: Switch off faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_check_2026_around_check_2075(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind check_instance:item where:
            is_check(check_instance) and id[check_instance]==2075
        achieve close_char(char,check_instance)
        if can_open(check_instance):
            achieve_once open(check_instance)
            exp(check,check_instance)
        else:
            exp(check,check_instance)
    eff:
        unknown[check]=False
        close[check,check_instance]=True
        close[check_instance,check]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water_and_place_on_table(bowl: item, table: item):
    body:
        achieve has_water(bowl)
        achieve on(bowl, table)

def is_home_office_table(table: item):
    symbol in_home_office=exists room: item : is_home_office(room) and inside(table, room)
    return in_home_office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        bind table: item where:
            is_table(table) and is_home_office_table(table)
        fill_bowl_with_water_and_place_on_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_check_2026_around_check_2075(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind check_instance:item where:
            is_check(check_instance) and id[check_instance]==2075
        achieve close_char(char,check_instance)
        if can_open(check_instance):
            achieve_once open(check_instance)
            exp(check,check_instance)
        else:
            exp(check,check_instance)
    eff:
        unknown[check]=False
        close[check,check_instance]=True
        close[check_instance,check]=True
    

#exp_behavior_end

#goal_representation
 
def check_bowl_has_water(bowl:item):
    # Check if the bowl has water in it
    symbol has_water=has_water(bowl)
    return has_water

behavior fill_bowl_with_water(bowl: item, faucet: item):
    body:
        if not check_bowl_has_water(bowl):
            # If the bowl does not have water, check if the faucet is close and off
            assert_hold close(bowl, faucet)
            achieve_once open(faucet)
            water(bowl)  
            achieve_once closed(faucet)

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office
        
        fill_bowl_with_water(bowl, faucet)
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_vegetable_2113_around_kitchen_counter_123(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

#goal_representation
 
def check_bowl_has_water(bowl:item):
    # Check if the bowl has water in it
    symbol has_water=has_water(bowl)
    return has_water

behavior fill_bowl_with_water(bowl: item, faucet: item):
    body:
        if not check_bowl_has_water(bowl):
            # If the bowl does not have water, check if the faucet is close and off
            assert_hold close(bowl, faucet)
            achieve_once open(faucet)
            is_milk(bowl)  
            achieve_once closed(faucet)

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        fill_bowl_with_water(bowl, faucet)
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Expr statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
