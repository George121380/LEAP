From agent.py
Reset goals: The sub-goals are: 
['1. Boil the pasta.', '2. Cook the chicken.', '3. Mix the chicken and pasta together.', '4. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2040_around_kitchen_counter_119(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_phone_2147_around_kitchen_counter_119(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(phone,kitchen_counter_instance)
        else:
            exp(phone,kitchen_counter_instance)
    eff:
        unknown[phone]=False
        close[phone,kitchen_counter_instance]=True
        close[kitchen_counter_instance,phone]=True
    

#exp_behavior_end

#goal_representation
behavior boil_pasta(pasta: item, pot: item, stove: item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot
        achieve is_on(stove)
        # Ensure that the stove is turned on

behavior __goal__():
    body:
        bind pasta: item where:
            is_food_noodles(pasta)
        # Select an item categorized as pasta

        bind pot: item where:
            is_pot(pot)
        # Select an item categorized as a pot

        bind stove: item where:
            is_stove(stove)
        # Select an item categorized as a stove

        boil_pasta(pasta, pot, stove)
        # Execute the task of boiling pasta
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2017_around_kitchen_counter_119(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(phone,kitchen_counter_instance)
        else:
            exp(phone,kitchen_counter_instance)
    eff:
        unknown[phone]=False
        close[phone,kitchen_counter_instance]=True
        close[kitchen_counter_instance,phone]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior boil_water(pot:item, sink:item, stove:item):
    body:
        # Fill the pot with water from the sink
        achieve inside(pot, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            water(pot)
            achieve_once is_off(faucet)
        else:
            water(pot)

        # Place the pot on the stove and turn it on
        achieve on(pot, stove)
        achieve is_on(stove)

behavior add_pasta_to_pot(pasta:item, pot:item):
    body:
        # Add the pasta into the pot of boiling water
        achieve inside(pasta, pot)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the dry pasta
        boil_water(pot, sink, stove)
        add_pasta_to_pot(pasta, pot)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_phone_2017_around_kitchen_counter_119(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(phone,kitchen_counter_instance)
        else:
            exp(phone,kitchen_counter_instance)
    eff:
        unknown[phone]=False
        close[phone,kitchen_counter_instance]=True
        close[kitchen_counter_instance,phone]=True
    

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2040_around_kitchen_counter_119(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior boil_water(pot:item, sink:item, stove:item):
    body:
        # Fill the pot with water from the sink
        achieve inside(pot, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            is_ice(pot)  # Replaced water(pot) with is_ice(pot) as a synonym
            achieve_once is_off(faucet)
        else:
            is_ice(pot)  # Replaced water(pot) with is_ice(pot) as a synonym

        # Place the pot on the stove and turn it on
        achieve on(pot, stove)
        achieve is_on(stove)

behavior add_pasta_to_pot(pasta:item, pot:item):
    body:
        # Add the pasta into the pot of boiling water
        achieve inside(pasta, pot)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the dry pasta
        boil_water(pot, sink, stove)
        add_pasta_to_pot(pasta, pot)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Expr statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
