From agent.py
Reset goals: The sub-goals are: 
['1. Find a nightstand.', '2. Place a cup of water on the nightstand.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_nightstand_found(nightstand:item):
    # Determine if a nightstand has been found
    symbol found_nightstand=exists n: item : is_nightstand(n) and visited(nightstand)
    return found_nightstand

behavior __goal__():
    body:
        if exists nightstand: item : is_nightstand(nightstand) and visited(nightstand):
            # If the nightstand has already been found, move closer to it
            bind nightstand: item where:
                is_nightstand(nightstand) and visited(nightstand)
            achieve close_char(char, nightstand)
        
        else:
            # If the nightstand is not found, search through all unvisited nightstands
            foreach nightstand: item:
                if is_nightstand(nightstand) and not visited(nightstand):
                    observe(nightstand, "Check if this is the nightstand you are looking for")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_nightstand_found(nightstand:item):
    # Determine if a nightstand has been found
    symbol found_nightstand=exists n: item : is_nightstand(n) and visited(nightstand)
    return found_nightstand

behavior __goal__():
    body:
        if exists nightstand: item : is_nightstand(nightstand) and visited(nightstand):
            # If the nightstand has already been found, move closer to it
            bind nightstand: item where:
                is_nightstand(nightstand) and visited(nightstand)
            achieve close_char(char, nightstand)
        
        else:
            # If the nightstand is not found, search through all unvisited nightstands
            foreach nightstand: item:
                if is_nightstand(nightstand) and not visited(nightstand):
                    observe(nightstand, "Check if this is the nightstand you are looking for")

##############################
From agent.py-> find a plan in act()
walk_executor(nightstand_192)obs(nightstand_192, Check if this is the nightstand you are looking for)walk_executor(nightstand_195)open_executor(nightstand_195)obs(nightstand_195, Check if this is the nightstand you are looking for)
##############################
From agent.py
walk_executor(nightstand_192)
Find pillow_208. Find drawing_201. Robot is inside bedroom_162. Robot is close nightstand_192. Robot is close floor_166. Robot is no longer inside dining_room_41.
##############################
From agent.py
obs(nightstand_192, Check if this is the nightstand you are looking for)
Get this information:  tablelamp_238 is on nightstand_192. nightstand_192 is close to bed_197. nightstand_192 is close to floor_166. nightstand_192 is close to drawing_201. nightstand_192 is close to tablelamp_238. nightstand_192 is close to pillow_208. nightstand_192 is close to wall_178. nightstand_192 is close to character_240. nightstand_192 is inside bedroom_162. nightstand_192 is on floor_166. nightstand_192 is facing drawing_201. nightstand_192 is CLEAN. nightstand_192 is OPEN.
##############################
From agent.py
walk_executor(nightstand_195)
Find chair_194. Find pillow_207. Robot is inside bedroom_162. Robot is close nightstand_195. Robot is close floor_165. Robot is no longer close nightstand_192.Robot is no longer close floor_166.
##############################
From agent.py
open_executor(nightstand_195)
Robot is inside bedroom_162. Robot is close nightstand_195. Robot is close floor_165. 
##############################
From agent.py
obs(nightstand_195, Check if this is the nightstand you are looking for)
Get this information:  nightstand_195 is close to chair_194. nightstand_195 is close to floor_163. nightstand_195 is close to floor_164. nightstand_195 is close to bed_197. nightstand_195 is close to floor_165. nightstand_195 is close to floor_166. nightstand_195 is close to drawing_201. nightstand_195 is close to wall_173. nightstand_195 is close to pillow_207. nightstand_195 is close to tablelamp_239. nightstand_195 is close to pillow_208. nightstand_195 is close to wall_178. nightstand_195 is close to wall_175. nightstand_195 is close to character_240. nightstand_195 is inside bedroom_162. tablelamp_239 is on nightstand_195. nightstand_195 is on floor_165. nightstand_195 is facing drawing_201. nightstand_195 is facing computer_209. nightstand_195 is CLEAN. nightstand_195 is OPEN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2049_around_kitchen_counter_119(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_cup_on_nightstand(cup:item, nightstand:item):
    body:
        achieve on(cup, nightstand)

behavior __goal__():
    body:
        bind nightstand: item where:
            is_nightstand(nightstand) and id[nightstand]==195
        # Select the nightstand with ID 195
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        place_cup_on_nightstand(cup, nightstand)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_cup_on_nightstand(cup:item, nightstand:item):
    body:
        achieve on(cup, nightstand)

behavior __goal__():
    body:
        bind nightstand: item where:
            is_nightstand(nightstand) and id[nightstand]==195
        # Select the nightstand with ID 195
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        place_cup_on_nightstand(cup, nightstand)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(cup_2132, kitchen_counter_119)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(nightstand_195)put_executor(cup_2132, nightstand_195)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is no longer inside bedroom_162.Robot is no longer close nightstand_195.Robot is no longer close floor_165.
##############################
From agent.py
exp(cup_2132, kitchen_counter_119)
Failed to find cup_2132 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(cup_2132, cupboard_118)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(nightstand_195)put_executor(cup_2132, nightstand_195)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(cup_2132, cupboard_118)
Failed to find cup_2132 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(cup_2132, cupboard_117)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(nightstand_195)put_executor(cup_2132, nightstand_195)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(cup_2132, cupboard_117)
Failed to find cup_2132 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_120)exp(cup_2132, sink_120)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(nightstand_195)put_executor(cup_2132, nightstand_195)
##############################
From agent.py
walk_executor(sink_120)
Find basket_for_clothes_2078. Find soap_2010. Find ice_2024. Find soap_2126. Robot is inside dining_room_41. Robot is close sink_120. Robot is close kitchen_counter_119. Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
exp(cup_2132, sink_120)
Failed to find cup_2132 around sink_120. 
##############################
From agent.py-> find a plan in act()
walk_executor(dresser_274)open_executor(dresser_274)exp(cup_2132, dresser_274)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(nightstand_195)put_executor(cup_2132, nightstand_195)
##############################
From agent.py
walk_executor(dresser_274)
Find hanger_292. Find hanger_293. Find hanger_294. Find blow_dryer_2057. Find cat_2069. Find check_2075. Find clothes_pants_2036. Robot is inside home_office_241. Robot is close hanger_292. Robot is close hanger_293. Robot is close hanger_294. Robot is close blow_dryer_2057. Robot is close dresser_274. Robot is close cat_2069. Robot is close check_2075. Robot is no longer inside dining_room_41.Robot is no longer close sink_120.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
open_executor(dresser_274)
Find keyboard_278. Find brush_2002. Find stamp_2043. Find phone_2147. Find headset_2131. Find mat_284. Find pillow_287. Find cd_2145. Find shampoo_2019. Find stamp_2022. Find chair_271. Find cd_player_2129. Find pencil_2014. Find shoes_2033. Find phone_2017. Find remote_control_2124. Find drawing_288. Find pencil_2020. Find mouse_280. Find headset_2146. Find pillow_286. Find dvd_player_2130. Robot is inside home_office_241. Robot is close hanger_292. Robot is close hanger_293. Robot is close hanger_294. Robot is close blow_dryer_2057. Robot is close dresser_274. Robot is close cat_2069. Robot is close check_2075. 
##############################
From agent.py
exp(cup_2132, dresser_274)
Failed to find cup_2132 around dresser_274. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_196)open_executor(bookshelf_196)exp(cup_2132, bookshelf_196)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(nightstand_195)put_executor(cup_2132, nightstand_195)
##############################
From agent.py
walk_executor(bookshelf_196)
Find drawing_202. Find novel_2060. Robot is inside bedroom_162. Robot is close floor_170. Robot is close photoframe_219. Robot is close bookshelf_196. Robot is no longer inside home_office_241.Robot is no longer close hanger_292.Robot is no longer close hanger_293.Robot is no longer close hanger_294.Robot is no longer close blow_dryer_2057.Robot is no longer close dresser_274.Robot is no longer close cat_2069.Robot is no longer close check_2075.
##############################
From agent.py
open_executor(bookshelf_196)
Find drawing_110. Robot is inside bedroom_162. Robot is close floor_170. Robot is close photoframe_219. Robot is close bookshelf_196. 
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2132 ?
Answer: Go to the dining room labeled as dining_room_41. Look for table_114 within it. You will find cup_2132 on top of table_114. The cup should be close in proximity to the table itself.

##############################
From agent.py
Human Instruction: Go to the dining room labeled as dining_room_41. Look for table_114 within it. You will find cup_2132 on top of table_114. The cup should be close in proximity to the table itself.

The actions you have taken:
Action 1: Walk to nightstand_192.
Action 2: Observe around nightstand_192 with the question of Check if this is the nightstand you are looking for.
Action 3: Walk to nightstand_195.
Action 4: Open nightstand_195.
Action 5: Observe around nightstand_195 with the question of Check if this is the nightstand you are looking for.
Action 6: Walk to kitchen_counter_119.
Action 7: look for cup_2132 around kitchen_counter_119.
Action 8: Walk to cupboard_118.
Action 9: Open cupboard_118.
Action 10: look for cup_2132 around cupboard_118.
Action 11: Walk to cupboard_117.
Action 12: look for cup_2132 around cupboard_117.
Action 13: Walk to sink_120.
Action 14: look for cup_2132 around sink_120.
Action 15: Walk to dresser_274.
Action 16: Open dresser_274.
Action 17: look for cup_2132 around dresser_274.
Action 18: Walk to bookshelf_196.
Action 19: Open bookshelf_196.

##############################
From agent.py
exp(cup_2132, bookshelf_196)
Failed to find cup_2132 around bookshelf_196. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2132, table_114)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(nightstand_195)put_executor(cup_2132, nightstand_195)
##############################
From agent.py
walk_executor(table_114)
Find mat_102. Find dry_pasta_2114. Find food_food_2021. Find drawing_111. Find knife_2122. Find cup_2133. Find table_cloth_2005. Find food_bread_2084. Find pillow_104. Find cup_2049. Find box_2038. Find clothes_hat_2117. Find clothes_gloves_2118. Find milk_2115. Find pillow_103. Find pillow_105. Find pillow_106. Find lighter_2004. Find lighter_2039. Find cup_2134. Find check_2058. Find cup_2132. Robot is inside dining_room_41. Robot is close table_114. Robot is close mat_102. Robot is close floor_47. Robot is no longer inside bedroom_162.Robot is no longer close floor_170.Robot is no longer close photoframe_219.Robot is no longer close bookshelf_196.
##############################
From agent.py
exp(cup_2132, table_114)
Find cup_2132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(nightstand_195)put_executor(cup_2132, nightstand_195)
##############################
From agent.py
walk_executor(cup_2132)
Robot is inside dining_room_41. Robot is close table_114. Robot is close cup_2132. Robot is no longer close mat_102.Robot is no longer close floor_47.
##############################
From agent.py
grab_executor(cup_2132)
Robot is inside dining_room_41. Robot is close table_114. Robot is close cup_2132. Grabbing cup_2132 by right hand. 
##############################
From agent.py
walk_executor(nightstand_195)
Robot is inside bedroom_162. Robot is close cup_2132. Robot is close nightstand_195. Robot is close floor_165. Robot is no longer inside dining_room_41.Robot is no longer close table_114.
##############################
From agent.py
put_executor(cup_2132, nightstand_195)
Robot is inside bedroom_162. Robot is close cup_2132. Robot is close nightstand_195. Robot is close floor_165. cup_2132 released by right hand. 
##############################
From agent.py
Human Instruction: You need to fill the cup with water before placing it on the nightstand to complete the task of preparing a cup of water on the nightstand.

The actions you have taken:
Action 1: Walk to nightstand_192.
Action 2: Observe around nightstand_192 with the question of Check if this is the nightstand you are looking for.
Action 3: Walk to nightstand_195.
Action 4: Open nightstand_195.
Action 5: Observe around nightstand_195 with the question of Check if this is the nightstand you are looking for.
Action 6: Walk to kitchen_counter_119.
Action 7: look for cup_2132 around kitchen_counter_119.
Action 8: Walk to cupboard_118.
Action 9: Open cupboard_118.
Action 10: look for cup_2132 around cupboard_118.
Action 11: Walk to cupboard_117.
Action 12: look for cup_2132 around cupboard_117.
Action 13: Walk to sink_120.
Action 14: look for cup_2132 around sink_120.
Action 15: Walk to dresser_274.
Action 16: Open dresser_274.
Action 17: look for cup_2132 around dresser_274.
Action 18: Walk to bookshelf_196.
Action 19: Open bookshelf_196.
Action 20: look for cup_2132 around bookshelf_196.
Action 21: Walk to table_114.
Action 22: look for cup_2132 around table_114.
Action 23: Walk to cup_2132.
Action 24: Grab cup_2132.
Action 25: Walk to nightstand_195.
Action 26: Put cup_2132 on nightstand_195.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_after_shave_2063_around_bathroom_cabinet_17(after_shave:item):
    goal: not unknown(after_shave)
    body:
        assert is_after_shave(after_shave)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(after_shave,bathroom_cabinet_instance)
        else:
            exp(after_shave,bathroom_cabinet_instance)
    eff:
        unknown[after_shave]=False
        close[after_shave,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,after_shave]=True
    

behavior find_knife_2035_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup: item, sink: item):
    body:
        achieve inside(cup, sink)
        # Put the cup in the sink
        achieve clean(cup)
        # Clean the cup
        achieve has_water(cup)
        # Fill the cup with water

behavior place_cup_on_nightstand(cup: item, nightstand: item):
    body:
        achieve on(cup, nightstand)

behavior __goal__():
    body:
        bind nightstand: item where:
            is_nightstand(nightstand) and id[nightstand] == 195
        # Select nightstand with ID 195

        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select cup with ID 2132

        bind sink: item where:
            is_sink(sink) and id[sink] == 120
        # Select sink with ID 120

        fill_cup_with_water(cup, sink)
        place_cup_on_nightstand(cup, nightstand)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2095_around_cutting_board_2123(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_fruit,cutting_board_instance)
        else:
            exp(food_fruit,cutting_board_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,cutting_board_instance]=True
        close[cutting_board_instance,food_fruit]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_nightstand_without_water(nightstand:item):
    # Function to check if the nightstand does not have water on it
    symbol no_water=not exists cup: item : has_water(cup) and on(cup, nightstand)
    return no_water

behavior fill_with_water(cup:item):
    body:
        achieve has_water(cup)
        # Fill the cup with water

behavior place_cup_on_nightstand(cup:item, nightstand:item):
    body:
        achieve on(cup, nightstand)
        # Place the cup on the nightstand

behavior __goal__():
    body:
        bind nightstand: item where:
            is_nightstand(nightstand) and has_nightstand_without_water(nightstand)
        # Select a nightstand that does not have water on it
        
        bind cup: item where:
            is_cup(cup) and id[cup]==2132
        # Select the cup with ID 2132
        
        fill_with_water(cup)
        place_cup_on_nightstand(cup, nightstand)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cup') at line 5830, column 32.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior fill_with_water(cup:item):
    body:
        achieve has_water(cup)
        # Fill the cup with water

behavior place_cup_on_nightstand(cup:item, nightstand:item):
    body:
        achieve on(cup, nightstand)
        # Place the cup on the nightstand

behavior __goal__():
    body:
        bind nightstand: item where:
            is_nightstand(nightstand) and has_nightstand_without_water(nightstand)
        # Select a nightstand that does not have water on it
        
        bind cup: item where:
            is_cup(cup) and id[cup]==2132
        # Select the cup with ID 2132
        
        fill_with_water(cup)
        place_cup_on_nightstand(cup, nightstand)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function has_nightstand_without_water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior fill_with_water(cup:item):
    body:
        achieve has_water(cup)
        # Fill the cup with water

behavior place_cup_on_nightstand(cup:item, nightstand:item):
    body:
        achieve on(cup, nightstand)
        # Place the cup on the nightstand

behavior __goal__():
    body:
        bind nightstand: item where:
            is_nightstand(nightstand) and is_dry(nightstand)
        # Select a nightstand that does not have water on it
        
        bind cup: item where:
            is_cup(cup) and id[cup]==2132
        # Select the cup with ID 2132
        
        fill_with_water(cup)
        place_cup_on_nightstand(cup, nightstand)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place a cup of water on the nightstand." ?
Answer: Fill a cup with water, then place it on the nightstand.

##############################
From agent.py
Reset goals: The sub-goals are: 
['Fill a cup with water and place it on the nightstand.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2029_around_computer_276(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, sink:item):
    body:
        achieve inside(cup, sink)
        # Place the cup inside the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        achieve_once is_on(faucet)
        # Turn on the faucet if its close to the sink

        achieve has_water(cup)
        # Fill the cup with water

        achieve_once is_off(faucet)
        # Turn off the faucet after filling the cup

behavior place_cup_on_nightstand(cup:item, nightstand:item):
    body:
        achieve on(cup, nightstand)
        # Place the cup on the nightstand

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the identified cup

        bind nightstand: item where:
            is_nightstand(nightstand) and id[nightstand] == 195
        # Select the nightstand with ID 195

        bind sink: item where:
            is_sink(sink) and close(cup, sink)
        # Select a sink close to the cup

        fill_cup_with_water(cup, sink)
        place_cup_on_nightstand(cup, nightstand)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knife_2122(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2122
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(knife,knife_instance)
        else:
            exp(knife,knife_instance)
    eff:
        unknown[knife]=False
        close[knife,knife_instance]=True
        close[knife_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_with_water_and_place(cup:item, nightstand:item):
    body:
        achieve has_water(cup)
        achieve on(cup, nightstand)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select cup with ID 2132

        bind nightstand: item where:
            is_nightstand(nightstand) and id[nightstand] == 195
        # Select nightstand with ID 195

        fill_with_water_and_place(cup, nightstand)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_with_water_and_place(cup:item, nightstand:item):
    body:
        achieve has_water(cup)
        achieve on(cup, nightstand)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select cup with ID 2132

        bind nightstand: item where:
            is_nightstand(nightstand) and id[nightstand] == 195
        # Select nightstand with ID 195

        fill_with_water_and_place(cup, nightstand)

##############################
From agent.py-> find a plan in act()
grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(nightstand_195)put_executor(cup_2132, nightstand_195)
##############################
From agent.py
grab_executor(cup_2132)
Robot is inside bedroom_162. Robot is close cup_2132. Robot is close nightstand_195. Robot is close floor_165. Grabbing cup_2132 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Find drawing_33. Find mat_32. Find phone_2029. Robot is inside bathroom_1. Robot is close cup_2132. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer inside bedroom_162.Robot is no longer close nightstand_195.Robot is no longer close floor_165.
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close cup_2132. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close cup_2132. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(nightstand_195)
Robot is inside bedroom_162. Robot is close cup_2132. Robot is close nightstand_195. Robot is close floor_165. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
put_executor(cup_2132, nightstand_195)
Robot is inside bedroom_162. Robot is close cup_2132. Robot is close nightstand_195. Robot is close floor_165. cup_2132 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/make_up_bed/g3.txt
Checking k1
missed actions: grab_executor(cup_2132);walk_executor(nightstand_192);put_executor(cup_2132, nightstand_192);
missed action num: 3
##############################
From evaluation.py
cdl_dataset/dataset/make_up_bed/g3.txt
Checking k1
missed actions: grab_executor(cup_2132);walk_executor(nightstand_192);put_executor(cup_2132, nightstand_192);
missed action num: 3
##############################
