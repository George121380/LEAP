From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.', '2. Cool the boiled vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_pot_54_around_oven_141(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(pot,oven_instance)
        else:
            exp(pot,oven_instance)
    eff:
        unknown[pot]=False
        close[pot,oven_instance]=True
        close[oven_instance,pot]=True
    

behavior find_napkin_2014_around_table_123(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(napkin,table_instance)
        else:
            exp(napkin,table_instance)
    eff:
        unknown[napkin]=False
        close[napkin,table_instance]=True
        close[table_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(vegetables:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetables, pot) # Place vegetables inside the pot
        achieve has_water(pot) # Ensure there is water in the pot
        achieve is_on(stove) # Turn on the stove to heat the pot

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables that need to be boiled

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling the vegetables
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the vegetables

        boil_vegetables(vegetables, pot, stove)
        # Boil the vegetables using the selected pot and stove 

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior boil_vegetables(vegetables:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetables, pot) # Place vegetables inside the pot
        achieve has_water(pot) # Ensure there is water in the pot
        achieve is_on(stove) # Turn on the stove to heat the pot

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables that need to be boiled

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling the vegetables
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling the vegetables

        boil_vegetables(vegetables, pot, stove)
        # Boil the vegetables using the selected pot and stove 

##############################
From agent.py-> find a plan in act()
walk_executor(oven_141)open_executor(oven_141)exp(pot_54, oven_141)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(oven_141)
Robot find: pot_54, Robot is close to the oven_141. 
##############################
From agent.py
open_executor(oven_141)
Robot find: food_butter_2018, dough_2021, food_onion_2026, tray_142, Robot is close to the food_butter_2018. Robot is close to the dough_2021. Robot is close to the food_onion_2026. Robot is close to the oven_141. Robot is close to the tray_142. oven_141 is opened. 
##############################
From agent.py
exp(pot_54, oven_141)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by right hand. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure there is water in pot_54 before proceeding with boiling the vegetables.
##############################
From agent.py
Human Instruction: Ensure there is water in pot_54 before proceeding with boiling the vegetables.

The actions you have taken:
Action 1: Walk to oven_141.
Action 2: Open oven_141.
Action 3: look for pot_54 around oven_141.
Action 4: Walk to fridge_140.
Action 5: Switch off fridge_140.
Action 6: Open fridge_140.
Action 7: look for food_vegetable_2072 around fridge_140.
Action 8: Walk to pot_54.
Action 9: Open pot_54.
Action 10: Walk to food_vegetable_2072.
Action 11: Grab food_vegetable_2072.
Action 12: Walk to pot_54.
Action 13: Put food_vegetable_2072 into pot_54.
Action 14: Grab pot_54.
Action 15: Walk to faucet_134.
Action 16: Switch off faucet_134.
Action 17: Walk to stove_2090.
Action 18: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2104_around_table_123(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_food_bread_2016_around_table_123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables_with_water(pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        boil_vegetables_with_water(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_vegetables_with_water(pot:item, stove:item):
    body:
        achieve has_water(pot)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        boil_vegetables_with_water(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure there is water in pot_54 before boiling the vegetables on the stove.
##############################
From agent.py
Human Instruction: Ensure there is water in pot_54 before boiling the vegetables on the stove.

The actions you have taken:
Action 1: Walk to oven_141.
Action 2: Open oven_141.
Action 3: look for pot_54 around oven_141.
Action 4: Walk to fridge_140.
Action 5: Switch off fridge_140.
Action 6: Open fridge_140.
Action 7: look for food_vegetable_2072 around fridge_140.
Action 8: Walk to pot_54.
Action 9: Open pot_54.
Action 10: Walk to food_vegetable_2072.
Action 11: Grab food_vegetable_2072.
Action 12: Walk to pot_54.
Action 13: Put food_vegetable_2072 into pot_54.
Action 14: Grab pot_54.
Action 15: Walk to faucet_134.
Action 16: Switch off faucet_134.
Action 17: Walk to stove_2090.
Action 18: Switch on stove_2090.
Action 19: Walk to faucet_308.
Action 20: Switch off faucet_308.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_table_123(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_clothes_hat_2076_around_dresser_377(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_hat,dresser_instance)
        else:
            exp(clothes_hat,dresser_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,dresser_instance]=True
        close[dresser_instance,clothes_hat]=True
    

behavior find_homework_2011_around_computer_379(homework:item):
    goal: not unknown(homework)
    body:
        assert is_homework(homework)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(homework,computer_instance)
        else:
            exp(homework,computer_instance)
    eff:
        unknown[homework]=False
        close[homework,computer_instance]=True
        close[computer_instance,homework]=True
    

behavior find_plate_2105_around_table_123(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def pot_has_water(pot:item):
    # Function to check if the pot has water
    symbol has_water=has_water(pot)
    return has_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(vegetables:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetables, pot)
        achieve on(pot, stove)
        achieve is_on(stove)
        # Boil the vegetables by placing the pot with vegetables on the stove and turning it on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select pot with ID 54

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables]==2072
        # Select vegetables with ID 2072

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        if not pot_has_water(pot):
            fill_pot_with_water(pot, faucet)
            # Fill the pot with water if it doesnt already have water

        boil_vegetables(vegetables, pot, stove)
        # Boil the vegetables in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def pot_has_water(pot:item):
    # Function to check if the pot has water
    symbol has_water=has_water(pot)
    return has_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(vegetables:item, pot:item, stove:item):
    body:
        achieve_once inside(vegetables, pot)
        achieve on(pot, stove)
        achieve is_on(stove)
        # Boil the vegetables by placing the pot with vegetables on the stove and turning it on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select pot with ID 54

        bind vegetables: item where:
            is_food_vegetable(vegetables) and id[vegetables]==2072
        # Select vegetables with ID 2072

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        if not pot_has_water(pot):
            fill_pot_with_water(pot, faucet)
            # Fill the pot with water if it doesnt already have water

        boil_vegetables(vegetables, pot, stove)
        # Boil the vegetables in the pot on the stove

##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
switchon_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that there is water in pot_54 before boiling the vegetables. Fill pot_54 with water by walking to and using faucet_134, then repeat boiling steps.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_kitchen_counter_128(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior cool_vegetables_in_bowl(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the boiled vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        cool_vegetables_in_bowl(vegetables, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cool_vegetables_in_bowl(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the boiled vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        cool_vegetables_in_bowl(vegetables, bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(bowl_2096, kitchen_counter_128)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(bowl_2096, kitchen_counter_128)
Fail to find bowl_2096 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)exp(bowl_2096, sink_133)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
exp(bowl_2096, sink_133)
Fail to find bowl_2096 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(bowl_2096, cupboard_131)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(bowl_2096, cupboard_131)
Fail to find bowl_2096 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(bowl_2096, cupboard_130)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(bowl_2096, cupboard_130)
Fail to find bowl_2096 around cupboard_130. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.', '2. Cool them in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_kitchen_counter_128(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_phone_47_around_table_127(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(phone,table_instance)
        else:
            exp(phone,table_instance)
    eff:
        unknown[phone]=False
        close[phone,table_instance]=True
        close[table_instance,phone]=True
    

behavior find_food_vegetable_2072_around_kitchen_counter_128(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_vegetable_to_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select vegetables

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        add_vegetable_to_pot(vegetable, pot)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_vegetable_to_pot(vegetable:item, pot:item):
    body:
        achieve_once inside(vegetable, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select vegetables

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        add_vegetable_to_pot(vegetable, pot)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(pot_54, kitchen_counter_128)walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)walk_executor(kitchen_counter_128)exp(food_vegetable_2072, kitchen_counter_128)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(pot_54, kitchen_counter_128)
Fail to find pot_54 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(pot_54, cupboard_131)walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(pot_54, cupboard_131)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_54, stove_2090)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the stove_2090. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Fill the pot with water from a faucet to ensure it is ready for boiling the vegetables.
##############################
From agent.py
Human Instruction: Fill the pot with water from a faucet to ensure it is ready for boiling the vegetables.

The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: look for pot_54 around kitchen_counter_128.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for pot_54 around cupboard_131.
Action 6: Walk to pot_54.
Action 7: Open pot_54.
Action 8: Grab pot_54.
Action 9: Walk to faucet_134.
Action 10: Switch off faucet_134.
Action 11: Walk to stove_2090.
Action 12: Put pot_54 on stove_2090.
Action 13: Switch on stove_2090.
Action 14: Walk to fridge_140.
Action 15: Switch off fridge_140.
Action 16: Open fridge_140.
Action 17: look for food_vegetable_2072 around fridge_140.
Action 18: Walk to pot_54.
Action 19: Grab pot_54.
Action 20: Walk to faucet_308.
Action 21: Switch off faucet_308.
Action 22: Walk to stove_2090.
Action 23: Put pot_54 on stove_2090.
Action 24: Walk to food_vegetable_2072.
Action 25: Grab food_vegetable_2072.
Action 26: Walk to pot_54.
Action 27: Put food_vegetable_2072 into pot_54.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_basket_for_clothes_2040(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(shoes,basket_for_clothes_instance)
        else:
            exp(shoes,basket_for_clothes_instance)
    eff:
        unknown[shoes]=False
        close[shoes,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,shoes]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(pot:item, stove:item, vegetable:item, faucet:item):
    body:
        achieve has_water(pot) # Ensure pot has water
        achieve inside(vegetable, pot) # Ensure vegetables are inside the pot
        achieve is_on(stove) # Ensure the stove is on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Ensure theres a faucet to fill water
        bind faucet: item where:
            is_faucet(faucet)
        boil_vegetables(pot, stove, vegetable, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_vegetables(pot:item, stove:item, vegetable:item, faucet:item):
    body:
        achieve has_water(pot) # Ensure pot has water
        achieve inside(vegetable, pot) # Ensure vegetables are inside the pot
        achieve is_on(stove) # Ensure the stove is on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Ensure theres a faucet to fill water
        bind faucet: item where:
            is_faucet(faucet)
        boil_vegetables(pot, stove, vegetable, faucet)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the stove_2090. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure the pot is filled with water. Although the pot was placed on the stove and the stove was turned on, the robot continued with actions around faucets but did not achieve filling the pot with water. Ensure the pot has water before proceeding.
##############################
From agent.py
Human Instruction: The robot needs to ensure the pot is filled with water. Although the pot was placed on the stove and the stove was turned on, the robot continued with actions around faucets but did not achieve filling the pot with water. Ensure the pot has water before proceeding.

The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: look for pot_54 around kitchen_counter_128.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for pot_54 around cupboard_131.
Action 6: Walk to pot_54.
Action 7: Open pot_54.
Action 8: Grab pot_54.
Action 9: Walk to faucet_134.
Action 10: Switch off faucet_134.
Action 11: Walk to stove_2090.
Action 12: Put pot_54 on stove_2090.
Action 13: Switch on stove_2090.
Action 14: Walk to fridge_140.
Action 15: Switch off fridge_140.
Action 16: Open fridge_140.
Action 17: look for food_vegetable_2072 around fridge_140.
Action 18: Walk to pot_54.
Action 19: Grab pot_54.
Action 20: Walk to faucet_308.
Action 21: Switch off faucet_308.
Action 22: Walk to stove_2090.
Action 23: Put pot_54 on stove_2090.
Action 24: Walk to food_vegetable_2072.
Action 25: Grab food_vegetable_2072.
Action 26: Walk to pot_54.
Action 27: Put food_vegetable_2072 into pot_54.
Action 28: Grab pot_54.
Action 29: Walk to faucet_134.
Action 30: Switch on faucet_134.
Action 31: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_basket_for_clothes_2040(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(shoes,basket_for_clothes_instance)
        else:
            exp(shoes,basket_for_clothes_instance)
    eff:
        unknown[shoes]=False
        close[shoes,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,shoes]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water using the faucet

behavior start_boiling(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place pot on the stove
        achieve_once is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the pot with ID 54
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        if not has_water(pot):
            fill_pot_with_water(pot, faucet)
            # Ensure the pot has water before boiling
        
        start_boiling(pot, stove)
        # Start boiling the vegetables in the pot

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water using the faucet

behavior start_boiling(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place pot on the stove
        achieve_once is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the pot with ID 54
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        if not has_water(pot):
            fill_pot_with_water(pot, faucet)
            # Ensure the pot has water before boiling
        
        start_boiling(pot, stove)
        # Start boiling the vegetables in the pot

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water using the faucet before proceeding with boiling the vegetables. Ensure the pot contains water before it is placed on the stove and the stove is turned on.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_table_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior cool_vegetables_in_bowl(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Put the boiled vegetables inside the bowl to cool

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the boiled vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to cool the vegetables

        cool_vegetables_in_bowl(vegetables, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cool_vegetables_in_bowl(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Put the boiled vegetables inside the bowl to cool

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the boiled vegetables

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to cool the vegetables

        cool_vegetables_in_bowl(vegetables, bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(bowl_2096, table_123)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(bowl_2096, table_123)
Fail to find bowl_2096 around table_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(bowl_2096, cupboard_130)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(bowl_2096, cupboard_130)
Fail to find bowl_2096 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(bench_125)exp(bowl_2096, bench_125)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
From agent.py
walk_executor(bench_125)
Robot find: mat_115, Robot is close to the bench_125. 
##############################
From agent.py
exp(bowl_2096, bench_125)
Fail to find bowl_2096 around bench_125. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2095)exp(bowl_2096, bowl_2095)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2096)putin_executor(food_vegetable_2072, bowl_2096)
##############################
