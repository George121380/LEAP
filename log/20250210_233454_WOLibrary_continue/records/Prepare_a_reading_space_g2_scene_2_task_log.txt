From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the table in the home office.', '2. Turn on the light in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book_and_place_on_table(book:item, table:item, home_office:item):
    body:
        # Move the book and place it on the table in the home office
        achieve_once inside(book, home_office)
        achieve_once on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office
        bind book: item where:
            is_book(book)
        # Select the book
        find_book_and_place_on_table(book, table, home_office)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def book_is_on_table(table:item, book:item):
    # Check if the book is already on the table
    symbol is_book_on_table=exists table: item : (on(book, table))
    return is_book_on_table

def is_home_office_table(table:item):
    # Check if the table is in the home office
    symbol in_home_office= exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select a table in the home office

        bind book: item where:
            is_book(book)
        # Select a book

        if not book_is_on_table(table, book):
            # If the book is not already on the table
            achieve close_char(char, book) # Approach the book
            place_book_on_table(book, table) # Place the book on the table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Variable table already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#goal_representation
 
def book_is_on_table(table:item, book:item):
    # Check if the book is already on the table
    symbol is_book_on_table=exists t: item : (on(book, t) and t == table)
    return is_book_on_table

def is_home_office_table(table:item):
    # Check if the table is in the home office
    symbol in_home_office= exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select a table in the home office

        bind book: item where:
            is_book(book)
        # Select a book

        if not book_is_on_table(table, book):
            # If the book is not already on the table
            achieve close_char(char, book) # Approach the book
            place_book_on_table(book, table) # Place the book on the table

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        
        bind table: item where:
            is_table(table) and is_home_office(table)
        # Select a table in the home office
        
        place_book_on_table(book, table)
        # Place the book on the table in the home office

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the book and put it on the table in the home office." ?
Answer: Find the book on the bookshelf and put it on the table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior pick_book_from_bookshelf(book:item, bookshelf:item, table:item):
    body:
        achieve_once inside_char(char, is_home_office) # Ensure the character is inside the home office
        achieve_once close_char(char, bookshelf) # Approach the bookshelf
        achieve_once inhand(book) # Pick up the book
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind bookshelf: item where:
            is_bookshelf(bookshelf)
        bind table: item where:
            is_table(table) and inside(table, is_home_office)
        pick_book_from_bookshelf(book, bookshelf, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: is_home_office; available variables: [Variable<book: item>, Variable<bookshelf: item>, Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_bookshelf_260(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2091_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
behavior pick_book_from_bookshelf(book:item, bookshelf:item, table:item, home_office:item):
    body:
        achieve_once inside_char(char, home_office) # Ensure the character is inside the home office
        achieve_once close_char(char, bookshelf) # Approach the bookshelf
        achieve_once inhand(book) # Pick up the book
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind bookshelf: item where:
            is_bookshelf(bookshelf)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        bind home_office: item where:
            is_home_office(home_office)
        pick_book_from_bookshelf(book, bookshelf, table, home_office)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
behavior pick_book_from_bookshelf(book:item, bookshelf:item, table:item, home_office:item):
    body:
        achieve_once inside_char(char, home_office) # Ensure the character is inside the home office
        achieve_once close_char(char, bookshelf) # Approach the bookshelf
        achieve_once inhand(book) # Pick up the book
        achieve_once on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind book: item where:
            is_book(book)
        bind bookshelf: item where:
            is_bookshelf(bookshelf)
        bind table: item where:
            is_table(table) and inside(table, home_office)
        pick_book_from_bookshelf(book, bookshelf, table, home_office)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_260)open_executor(bookshelf_260)exp(book_2091, bookshelf_260)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_260)
Robot find: drawing_238, chair_263, mat_237, Robot is close to the bookshelf_260. 
##############################
From agent.py
open_executor(bookshelf_260)
Robot find: Robot is close to the bookshelf_260. Robot is close to the photoframe_246. bookshelf_260 is opened. 
##############################
From agent.py
exp(book_2091, bookshelf_260)
Fail to find book_2091 around bookshelf_260. 
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(bookshelf_260)', 'open_executor(bookshelf_260)']
Time info:
Time consume: 178 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 4
goal correct times: 2
action_num: 2

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
