From agent.py
Reset goals: The sub-goals are: 
['1. Boil the eggs.', '2. Wash and chop the vegetables.', '3. Squeeze the lemon juice.', '4. Mix boiled eggs, chopped vegetables, and lemon juice in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_book_2067_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_egg_in_pot(egg, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve_once inside(egg, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_egg_in_pot(egg, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_egg_2020. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_egg_2020, pot_2069)
Robot find: Robot is close to the food_egg_2020. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close food_egg_2020. food_egg_2020 is inside pot_2069. food_egg_2020 is close pot_2069. food_egg_2020 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_egg_2020. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_sink_231(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetable:item):
    body:
        achieve clean(vegetable)

behavior chop_vegetables(vegetable:item, knife:item, cutting_board:item):
    body:
        achieve_once on(vegetable, cutting_board)
        achieve_once cut(vegetable)

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and dirty(vegetable):
                wash_vegetables(vegetable)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and clean(vegetable):
                chop_vegetables(vegetable, knife, cutting_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_vegetables(vegetable:item):
    body:
        achieve clean(vegetable)

behavior chop_vegetables(vegetable:item, knife:item, cutting_board:item):
    body:
        achieve_once on(vegetable, cutting_board)
        achieve_once cut(vegetable)

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and dirty(vegetable):
                wash_vegetables(vegetable)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and clean(vegetable):
                chop_vegetables(vegetable, knife, cutting_board)

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(food_vegetable_2041, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_vegetable_2041)cut_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_vegetable_2041 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_vegetable_2041, cutting_board_2051)
Robot find: Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_vegetable_2041. food_vegetable_2041 is close cutting_board_2051. food_vegetable_2041 is on cutting_board_2051. food_vegetable_2041 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior squeeze_lemon(lemon:item):
    body:
        achieve_once squeezed(lemon)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon for squeezing

        squeeze_lemon(lemon)
        # Squeeze the lemon to obtain lemon juice
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function squeezed not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior squeeze_lemon(lemon:item):
    body:
        squeeze(lemon)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon for squeezing

        squeeze_lemon(lemon)
        # Squeeze the lemon to obtain lemon juice

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior squeeze_lemon(lemon:item):
    body:
        squeeze(lemon)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon for squeezing

        squeeze_lemon(lemon)
        # Squeeze the lemon to obtain lemon juice

##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2028)
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_lemon_2028. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to actually squeeze the lemon to obtain the lemon juice.
##############################
From agent.py
Human Instruction: The robot needs to actually squeeze the lemon to obtain the lemon juice.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Walk to pot_2069.
Action 8: Open pot_2069.
Action 9: Walk to food_egg_2020.
Action 10: Grab food_egg_2020.
Action 11: Walk to pot_2069.
Action 12: Put food_egg_2020 into pot_2069.
Action 13: Grab pot_2069.
Action 14: Walk to faucet_43.
Action 15: Switch on faucet_43.
Action 16: Switch off faucet_43.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to food_vegetable_2041.
Action 21: Grab food_vegetable_2041.
Action 22: Walk to faucet_43.
Action 23: Switch on faucet_43.
Action 24: Wash food_vegetable_2041.
Action 25: Switch off faucet_43.
Action 26: Walk to cutting_board_2051.
Action 27: Put food_vegetable_2041 on cutting_board_2051.
Action 28: Walk to knife_2050.
Action 29: Grab knife_2050.
Action 30: Walk to food_vegetable_2041.
Action 31: Cut food_vegetable_2041.
Action 32: Walk to food_lemon_2028.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2090_around_towel_rack_31(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(toilet_paper,towel_rack_instance)
        else:
            exp(toilet_paper,towel_rack_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,towel_rack_instance]=True
        close[towel_rack_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_squeeze_lemon(lemon:item):
    body:
        achieve_once visited(lemon)
        squeeze(lemon)

behavior __goal__():
    body:
        foreach lemon: item:
            if is_food_lemon(lemon) and not visited(lemon):
                find_and_squeeze_lemon(lemon)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_and_squeeze_lemon(lemon:item):
    body:
        achieve_once visited(lemon)
        squeeze(lemon)

behavior __goal__():
    body:
        foreach lemon: item:
            if is_food_lemon(lemon) and not visited(lemon):
                find_and_squeeze_lemon(lemon)

##############################
From agent.py-> find a plan in act()
obs(food_lemon_2028, look around this place)
##############################
From agent.py
obs(food_lemon_2028, look around this place)
Get this information:  food_lemon_2028 is close to fridge_289. food_lemon_2028 is close to character_65. food_lemon_2028 is inside fridge_289. food_lemon_2028 is inside dining_room_201. food_lemon_2028 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to squeeze the lemon to obtain the lemon juice.
##############################
From agent.py
Human Instruction: You need to squeeze the lemon to obtain the lemon juice.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Walk to pot_2069.
Action 8: Open pot_2069.
Action 9: Walk to food_egg_2020.
Action 10: Grab food_egg_2020.
Action 11: Walk to pot_2069.
Action 12: Put food_egg_2020 into pot_2069.
Action 13: Grab pot_2069.
Action 14: Walk to faucet_43.
Action 15: Switch on faucet_43.
Action 16: Switch off faucet_43.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to food_vegetable_2041.
Action 21: Grab food_vegetable_2041.
Action 22: Walk to faucet_43.
Action 23: Switch on faucet_43.
Action 24: Wash food_vegetable_2041.
Action 25: Switch off faucet_43.
Action 26: Walk to cutting_board_2051.
Action 27: Put food_vegetable_2041 on cutting_board_2051.
Action 28: Walk to knife_2050.
Action 29: Grab knife_2050.
Action 30: Walk to food_vegetable_2041.
Action 31: Cut food_vegetable_2041.
Action 32: Walk to food_lemon_2028.
Action 33: Observe around food_lemon_2028 with the question of look around this place.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_shower_38(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==38
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_lemon(lemon:item):
    body:
        achieve_once visited(lemon)
        # Visit the lemon to prepare for squeezing
        squeeze(lemon)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select the lemon

        squeeze_lemon(lemon)
        # Squeeze the lemon to extract the juice
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_lemon(lemon:item):
    body:
        achieve_once visited(lemon)

behavior squeeze_lemon(lemon:item):
    body:
        squeeze(lemon)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)

        if not visited(lemon):
            observe_lemon(lemon)
        
        squeeze_lemon(lemon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_42(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==42
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_lemon(lemon:item):
    body:
        achieve_once squeezed(lemon)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)

        squeeze_lemon(lemon)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function squeezed not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_gloves_2046_around_basket_for_clothes_2006(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

behavior find_towel_2056_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#goal_representation
behavior squeeze_lemon(lemon:item):
    body:
        squeeze(lemon)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)

        squeeze_lemon(lemon)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. squeeze the lemon juice." ?
Answer: Clean a lemon and cut it into pieces. Then put the lemon in the bowl.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Clean the lemon and cut it into pieces.', '2. Combine the boiled eggs, chopped vegetables, and lemon pieces in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_detergent_2084_around_cupboard_229(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(detergent,cupboard_instance)
        else:
            exp(detergent,cupboard_instance)
    eff:
        unknown[detergent]=False
        close[detergent,cupboard_instance]=True
        close[cupboard_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_and_cut_lemon(lemon:item, knife:item, cutting_board:item):
    body:
        achieve_once clean(lemon) 
        # Clean the lemon

        achieve_once on(lemon, cutting_board) 
        # Place the lemon on the cutting board

        achieve_once cut(lemon) 
        # Cut the lemon into pieces

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        clean_and_cut_lemon(lemon, knife, cutting_board)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior clean_and_cut_lemon(lemon:item, knife:item, cutting_board:item):
    body:
        achieve_once clean(lemon) 
        # Clean the lemon

        achieve_once on(lemon, cutting_board) 
        # Place the lemon on the cutting board

        achieve_once cut(lemon) 
        # Cut the lemon into pieces

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        clean_and_cut_lemon(lemon, knife, cutting_board)

##############################
From agent.py-> find a plan in act()
grab_executor(food_lemon_2028)walk_executor(cutting_board_2051)put_executor(food_lemon_2028, cutting_board_2051)walk_executor(food_lemon_2028)cut_executor(food_lemon_2028)
##############################
From agent.py
grab_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the fridge_289. Robot is close to the food_lemon_2028. Grabbing food_lemon_2028 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_lemon_2028, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_lemon_2028. food_lemon_2028 is close cutting_board_2051. food_lemon_2028 is on cutting_board_2051. food_lemon_2028 released by left hand. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_hairbrush_2002_around_closetdrawer_119(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hairbrush,closetdrawer_instance)
        else:
            exp(hairbrush,closetdrawer_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,closetdrawer_instance]=True
        close[closetdrawer_instance,hairbrush]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_ingredients_to_bowl(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(vegetables, bowl)
        achieve_once inside(lemon, bowl)

behavior squeeze_lemon(lemon:item):
    body:
        achieve_once squeezed(lemon)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)

        bind bowl: item where:
            is_bowl(bowl)

        squeeze_lemon(lemon)
        add_ingredients_to_bowl(egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function squeezed not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
behavior add_ingredients_to_bowl(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(vegetables, bowl)
        achieve_once inside(lemon, bowl)

behavior squeeze_lemon(lemon:item):
    body:
        achieve_once inside(lemon, lemon juice)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)

        bind bowl: item where:
            is_bowl(bowl)

        squeeze_lemon(lemon)
        add_ingredients_to_bowl(egg, vegetables, lemon, bowl)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'juice') at line 5812, column 42.
Expected one of: 
	* EQUAL
	* COMMA
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
behavior add_ingredients_to_bowl(egg:item, vegetables:item, lemon_juice:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(vegetables, bowl)
        achieve_once inside(lemon_juice, bowl)

behavior squeeze_lemon(lemon:item, lemon_juice:item):
    body:
        achieve_once inside(lemon_juice, lemon)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and cut(egg)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)

        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)

        bind lemon_juice: item where:
            is_oil(lemon_juice) # Assuming lemon juice is treated like an oil

        bind bowl: item where:
            is_bowl(bowl)

        squeeze_lemon(lemon, lemon_juice)
        add_ingredients_to_bowl(egg, vegetables, lemon_juice, bowl)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hairbrush_2002_around_bathroom_cabinet_40(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(hairbrush,bathroom_cabinet_instance)
        else:
            exp(hairbrush,bathroom_cabinet_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,hairbrush]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_ingredients_in_bowl(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(vegetables, bowl)
        achieve_once inside(lemon, bowl)

behavior squeeze_lemon(lemon:item):
    body:
        achieve_once cut(lemon)
        squeeze(lemon)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        
        bind bowl: item where:
            is_bowl(bowl)

        squeeze_lemon(lemon)
        combine_ingredients_in_bowl(egg, vegetables, lemon, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior combine_ingredients_in_bowl(egg:item, vegetables:item, lemon:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        achieve_once inside(vegetables, bowl)
        achieve_once inside(lemon, bowl)

behavior squeeze_lemon(lemon:item):
    body:
        achieve_once cut(lemon)
        squeeze(lemon)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        
        bind lemon: item where:
            is_food_lemon(lemon) and cut(lemon)
        
        bind bowl: item where:
            is_bowl(bowl)

        squeeze_lemon(lemon)
        combine_ingredients_in_bowl(egg, vegetables, lemon, bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(bowl_2072, cupboard_229)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the knife_2050. Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the knife_2050. Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(bowl_2072, cupboard_229)
Fail to find bowl_2072 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2028)walk_executor(wallshelf_35)exp(bowl_2072, wallshelf_35)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
walk_executor(wallshelf_35)
Robot find: towel_rack_33, Robot is close to the knife_2050. Robot is close to the wallshelf_35. 
##############################
From agent.py
exp(bowl_2072, wallshelf_35)
Fail to find bowl_2072 around wallshelf_35. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2028)walk_executor(closetdrawer_122)exp(bowl_2072, closetdrawer_122)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
walk_executor(closetdrawer_122)
Robot find: Robot is close to the knife_2050. Robot is close to the dresser_108. 
##############################
From agent.py
exp(bowl_2072, closetdrawer_122)
Fail to find bowl_2072 around closetdrawer_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2028)walk_executor(closetdrawer_122)exp(bowl_2072, closetdrawer_122)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
walk_executor(closetdrawer_122)
Robot find: Robot is close to the knife_2050. Robot is close to the dresser_108. 
##############################
From agent.py
exp(bowl_2072, closetdrawer_122)
Fail to find bowl_2072 around closetdrawer_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2028)walk_executor(closetdrawer_122)exp(bowl_2072, closetdrawer_122)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
walk_executor(closetdrawer_122)
Robot find: Robot is close to the knife_2050. Robot is close to the dresser_108. 
##############################
From agent.py
exp(bowl_2072, closetdrawer_122)
Fail to find bowl_2072 around closetdrawer_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2028)walk_executor(closetdrawer_120)exp(bowl_2072, closetdrawer_120)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
walk_executor(closetdrawer_120)
Robot find: Robot is close to the knife_2050. Robot is close to the dresser_108. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2072 ?
Answer: The target item, bowl_2072, is located in the dining room, specifically inside dining_room_201. It can be found on table_226. Look for a table in the dining room and check on top of that table where the bowl_2072 is situated.
Re-decompose: None

##############################
From agent.py
Human Instruction: You need to squeeze the lemon to obtain the lemon juice.
The target item, bowl_2072, is located in the dining room, specifically inside dining_room_201. It can be found on table_226. Look for a table in the dining room and check on top of that table where the bowl_2072 is situated.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Walk to pot_2069.
Action 8: Open pot_2069.
Action 9: Walk to food_egg_2020.
Action 10: Grab food_egg_2020.
Action 11: Walk to pot_2069.
Action 12: Put food_egg_2020 into pot_2069.
Action 13: Grab pot_2069.
Action 14: Walk to faucet_43.
Action 15: Switch on faucet_43.
Action 16: Switch off faucet_43.
Action 17: Walk to stove_2065.
Action 18: Put pot_2069 on stove_2065.
Action 19: Switch on stove_2065.
Action 20: Walk to food_vegetable_2041.
Action 21: Grab food_vegetable_2041.
Action 22: Walk to faucet_43.
Action 23: Switch on faucet_43.
Action 24: Wash food_vegetable_2041.
Action 25: Switch off faucet_43.
Action 26: Walk to cutting_board_2051.
Action 27: Put food_vegetable_2041 on cutting_board_2051.
Action 28: Walk to knife_2050.
Action 29: Grab knife_2050.
Action 30: Walk to food_vegetable_2041.
Action 31: Cut food_vegetable_2041.
Action 32: Walk to food_lemon_2028.
Action 33: Observe around food_lemon_2028 with the question of look around this place.
Action 34: Grab food_lemon_2028.
Action 35: Walk to cutting_board_2051.
Action 36: Put food_lemon_2028 on cutting_board_2051.
Action 37: Walk to food_lemon_2028.
Action 38: Cut food_lemon_2028.
Action 39: Walk to cupboard_229.
Action 40: Open cupboard_229.
Action 41: look for bowl_2072 around cupboard_229.
Action 42: Walk to food_lemon_2028.
Action 43: Walk to wallshelf_35.
Action 44: look for bowl_2072 around wallshelf_35.
Action 45: Walk to food_lemon_2028.
Action 46: Walk to closetdrawer_122.
Action 47: look for bowl_2072 around closetdrawer_122.
Action 48: Walk to food_lemon_2028.
Action 49: Walk to closetdrawer_122.
Action 50: look for bowl_2072 around closetdrawer_122.
Action 51: Walk to food_lemon_2028.
Action 52: Walk to closetdrawer_122.
Action 53: look for bowl_2072 around closetdrawer_122.
Action 54: Walk to food_lemon_2028.
Action 55: Walk to closetdrawer_120.

##############################
From agent.py
exp(bowl_2072, closetdrawer_120)
Fail to find bowl_2072 around closetdrawer_120. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2028)walk_executor(table_226)exp(bowl_2072, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the knife_2050. Robot is close to the table_226. 
##############################
From agent.py
exp(bowl_2072, table_226)
Find bowl_2072. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_lemon_2028)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2072)putin_executor(food_egg_2020, bowl_2072)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2072)putin_executor(food_vegetable_2041, bowl_2072)walk_executor(food_lemon_2028)grab_executor(food_lemon_2028)walk_executor(bowl_2072)putin_executor(food_lemon_2028, bowl_2072)
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the pot_2069. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
putin_executor(food_egg_2020, bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_egg_2020. Robot is close to the bowl_2072. Robot is close to the table_226. bowl_2072 is close food_egg_2020. food_egg_2020 is inside bowl_2072. food_egg_2020 is close bowl_2072. food_egg_2020 released by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Grabbing food_vegetable_2041 by left hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
putin_executor(food_vegetable_2041, bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the bowl_2072. Robot is close to the table_226. food_vegetable_2041 is inside bowl_2072. food_vegetable_2041 is close bowl_2072. bowl_2072 is close food_vegetable_2041. food_vegetable_2041 released by left hand. 
##############################
From agent.py
walk_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. 
##############################
From agent.py
grab_executor(food_lemon_2028)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_lemon_2028. Grabbing food_lemon_2028 by left hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
putin_executor(food_lemon_2028, bowl_2072)
Robot find: Robot is close to the knife_2050. Robot is close to the food_lemon_2028. Robot is close to the bowl_2072. Robot is close to the table_226. food_lemon_2028 is close bowl_2072. bowl_2072 is close food_lemon_2028. food_lemon_2028 is inside bowl_2072. food_lemon_2028 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make a bowl of egg salad with boiled egg, lemon, and vegetables.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(pot_2069)', 'putin_executor(food_egg_2020, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_vegetable_2041)', 'switchoff_executor(faucet_43)', 'walk_executor(cutting_board_2051)', 'put_executor(food_vegetable_2041, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_vegetable_2041)', 'cut_executor(food_vegetable_2041)', 'walk_executor(food_lemon_2028)', 'grab_executor(food_lemon_2028)', 'walk_executor(cutting_board_2051)', 'put_executor(food_lemon_2028, cutting_board_2051)', 'walk_executor(food_lemon_2028)', 'cut_executor(food_lemon_2028)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(food_lemon_2028)', 'walk_executor(wallshelf_35)', 'walk_executor(food_lemon_2028)', 'walk_executor(closetdrawer_122)', 'walk_executor(food_lemon_2028)', 'walk_executor(closetdrawer_122)', 'walk_executor(food_lemon_2028)', 'walk_executor(closetdrawer_122)', 'walk_executor(food_lemon_2028)', 'walk_executor(closetdrawer_120)', 'walk_executor(food_lemon_2028)', 'walk_executor(table_226)', 'walk_executor(food_lemon_2028)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(bowl_2072)', 'putin_executor(food_egg_2020, bowl_2072)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(bowl_2072)', 'putin_executor(food_vegetable_2041, bowl_2072)', 'walk_executor(food_lemon_2028)', 'grab_executor(food_lemon_2028)', 'walk_executor(bowl_2072)', 'putin_executor(food_lemon_2028, bowl_2072)']
Time info:
Time consume: 570 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 80
goal generate times: 10
goal correct times: 2
action_num: 62

Task complete rate:
1
Scene_id: 0
##############################
