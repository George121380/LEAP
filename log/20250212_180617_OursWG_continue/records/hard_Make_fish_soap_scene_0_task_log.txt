From agent.py
Reset goals: The sub-goals are: 
['1. Gather the necessary ingredients for the fish soup and wash them.', '2. Prepare the ingredients by cutting them as needed.', '3. Cook all the ingredients in a pot to make the fish soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
def is_ingredient_observed(ingredient:item):
    # Function to check if the ingredient item for fish soup has been observed
    symbol observed=visited(ingredient)
    return observed

behavior wash_ingredient(ingredient:item):
    body:
        achieve clean(ingredient)
        # Wash the ingredient to ensure it is clean

behavior __goal__():
    body:
        foreach ingredient: item:
            if (is_food_fish(ingredient) or is_food_carrot(ingredient) or is_food_vegetable(ingredient)) and (not visited(ingredient) or dirty(ingredient)):
                # Check for all unobserved or dirty ingredients required for fish soup
                if not is_ingredient_observed(ingredient):
                    observe(ingredient, "Check if the ingredient is needed for fish soup")
                if is_ingredient_observed(ingredient) and dirty(ingredient):
                    wash_ingredient(ingredient)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_ingredient_observed(ingredient:item):
    # Function to check if the ingredient item for fish soup has been observed
    symbol observed=visited(ingredient)
    return observed

behavior wash_ingredient(ingredient:item):
    body:
        achieve clean(ingredient)
        # Wash the ingredient to ensure it is clean

behavior __goal__():
    body:
        foreach ingredient: item:
            if (is_food_fish(ingredient) or is_food_carrot(ingredient) or is_food_vegetable(ingredient)) and (not visited(ingredient) or dirty(ingredient)):
                # Check for all unobserved or dirty ingredients required for fish soup
                if not is_ingredient_observed(ingredient):
                    observe(ingredient, "Check if the ingredient is needed for fish soup")
                if is_ingredient_observed(ingredient) and dirty(ingredient):
                    wash_ingredient(ingredient)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_carrot_2014, kitchen_counter_230)walk_executor(food_carrot_2014)obs(food_carrot_2014, Check if the ingredient is needed for fish soup)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_fish_2021, fridge_289)walk_executor(food_fish_2021)obs(food_fish_2021, Check if the ingredient is needed for fish soup)walk_executor(kitchen_counter_230)exp(food_vegetable_2041, kitchen_counter_230)walk_executor(food_vegetable_2041)obs(food_vegetable_2041, Check if the ingredient is needed for fish soup)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_carrot_2014, kitchen_counter_230)
Fail to find food_carrot_2014 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_35)exp(food_carrot_2014, wallshelf_35)walk_executor(food_carrot_2014)obs(food_carrot_2014, Check if the ingredient is needed for fish soup)walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_fish_2021, cupboard_229)walk_executor(food_fish_2021)obs(food_fish_2021, Check if the ingredient is needed for fish soup)walk_executor(wallshelf_35)exp(food_vegetable_2041, wallshelf_35)walk_executor(food_vegetable_2041)obs(food_vegetable_2041, Check if the ingredient is needed for fish soup)
##############################
From agent.py
walk_executor(wallshelf_35)
Robot find: towel_rack_33, towel_rack_34, Robot is close to the wallshelf_35. 
##############################
From agent.py
exp(food_carrot_2014, wallshelf_35)
Fail to find food_carrot_2014 around wallshelf_35. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_carrot_2014, cupboard_229)walk_executor(food_carrot_2014)obs(food_carrot_2014, Check if the ingredient is needed for fish soup)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_fish_2021, fridge_289)walk_executor(food_fish_2021)obs(food_fish_2021, Check if the ingredient is needed for fish soup)walk_executor(cupboard_229)exp(food_vegetable_2041, cupboard_229)walk_executor(food_vegetable_2041)obs(food_vegetable_2041, Check if the ingredient is needed for fish soup)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_carrot_2014, cupboard_229)
Fail to find food_carrot_2014 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_carrot_2014, fridge_289)walk_executor(food_carrot_2014)obs(food_carrot_2014, Check if the ingredient is needed for fish soup)walk_executor(fridge_289)exp(food_fish_2021, fridge_289)walk_executor(food_fish_2021)obs(food_fish_2021, Check if the ingredient is needed for fish soup)walk_executor(fridge_289)exp(food_vegetable_2041, fridge_289)walk_executor(food_vegetable_2041)obs(food_vegetable_2041, Check if the ingredient is needed for fish soup)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_carrot_2014, fridge_289)
Find food_carrot_2014. 
##############################
From agent.py-> find a plan in act()
obs(food_carrot_2014, Check if the ingredient is needed for fish soup)grab_executor(food_carrot_2014)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_carrot_2014)switchoff_executor(faucet_43)walk_executor(food_fish_2021)obs(food_fish_2021, Check if the ingredient is needed for fish soup)grab_executor(food_fish_2021)walk_executor(kitchen_counter_230)put_executor(food_carrot_2014, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_fish_2021)switchoff_executor(faucet_232)walk_executor(food_vegetable_2041)obs(food_vegetable_2041, Check if the ingredient is needed for fish soup)grab_executor(food_vegetable_2041)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_vegetable_2041)switchoff_executor(faucet_43)
##############################
From agent.py
obs(food_carrot_2014, Check if the ingredient is needed for fish soup)
Get this information:  food_carrot_2014 is close to fridge_289. food_carrot_2014 is close to character_65. food_carrot_2014 is inside fridge_289. food_carrot_2014 is inside dining_room_201. food_carrot_2014 is DIRTY.
##############################
From agent.py
grab_executor(food_carrot_2014)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_carrot_2014 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, Robot is close to the food_carrot_2014. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_carrot_2014. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_carrot_2014)
Robot find: Robot is close to the food_carrot_2014. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_carrot_2014 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_carrot_2014. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(food_fish_2021)
Robot find: Robot is close to the food_carrot_2014. Robot is close to the fridge_289. Robot is close to the food_fish_2021. 
##############################
From agent.py
obs(food_fish_2021, Check if the ingredient is needed for fish soup)
Get this information:  food_fish_2021 is inside fridge_289. food_fish_2021 is inside dining_room_201. food_fish_2021 is close to fridge_289. food_fish_2021 is close to character_65. food_fish_2021 is DIRTY.
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the food_carrot_2014. Robot is close to the fridge_289. Robot is close to the food_fish_2021. Grabbing food_fish_2021 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the food_carrot_2014. Robot is close to the food_fish_2021. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_carrot_2014, kitchen_counter_230)
Robot find: Robot is close to the food_carrot_2014. Robot is close to the food_fish_2021. Robot is close to the kitchen_counter_230. food_carrot_2014 is close kitchen_counter_230. kitchen_counter_230 is close food_carrot_2014. food_carrot_2014 is on kitchen_counter_230. food_carrot_2014 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the food_carrot_2014. Robot is close to the food_fish_2021. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2021)
Robot find: Robot is close to the food_carrot_2014. Robot is close to the food_fish_2021. Robot is close to the kitchen_counter_230. food_fish_2021 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the food_carrot_2014. Robot is close to the food_fish_2021. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. 
##############################
From agent.py
obs(food_vegetable_2041, Check if the ingredient is needed for fish soup)
Get this information:  food_vegetable_2041 is inside fridge_289. food_vegetable_2041 is inside dining_room_201. food_vegetable_2041 is close to fridge_289. food_vegetable_2041 is close to character_65. food_vegetable_2041 is DIRTY.
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the food_fish_2021. Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. food_vegetable_2041 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_hairbrush_2002_around_closetdrawer_119(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hairbrush,closetdrawer_instance)
        else:
            exp(hairbrush,closetdrawer_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,closetdrawer_instance]=True
        close[closetdrawer_instance,hairbrush]=True
    

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior place_ingredients_on_board(ingredient:item, board:item):
    body:
        achieve_once on(ingredient, board)

behavior cut_ingredient(ingredient:item, knife:item):
    body:
        achieve_once cut(ingredient)

behavior __goal__():
    body:
        bind carrot: item where:
            is_food_carrot(carrot) and clean(carrot)

        bind fish: item where:
            is_food_fish(fish) and clean(fish)

        bind vegetable: item where:
            is_food_vegetable(vegetable) and clean(vegetable)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        place_ingredients_on_board(carrot, cutting_board)
        cut_ingredient(carrot, knife)

        place_ingredients_on_board(fish, cutting_board)
        cut_ingredient(fish, knife)

        place_ingredients_on_board(vegetable, cutting_board)
        cut_ingredient(vegetable, knife)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior place_ingredients_on_board(ingredient:item, board:item):
    body:
        achieve_once on(ingredient, board)

behavior cut_ingredient(ingredient:item, knife:item):
    body:
        achieve_once cut(ingredient)

behavior __goal__():
    body:
        bind carrot: item where:
            is_food_carrot(carrot) and clean(carrot)

        bind fish: item where:
            is_food_fish(fish) and clean(fish)

        bind vegetable: item where:
            is_food_vegetable(vegetable) and clean(vegetable)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        place_ingredients_on_board(carrot, cutting_board)
        cut_ingredient(carrot, knife)

        place_ingredients_on_board(fish, cutting_board)
        cut_ingredient(fish, knife)

        place_ingredients_on_board(vegetable, cutting_board)
        cut_ingredient(vegetable, knife)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)put_executor(food_vegetable_2041, kitchen_counter_230)grab_executor(food_carrot_2014)put_executor(food_carrot_2014, cutting_board_2051)grab_executor(knife_2050)cut_executor(food_carrot_2014)put_executor(food_fish_2021, cutting_board_2051)walk_executor(food_fish_2021)cut_executor(food_fish_2021)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(cutting_board_2051)put_executor(food_vegetable_2041, cutting_board_2051)walk_executor(food_vegetable_2041)cut_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_vegetable_2041, kitchen_counter_230)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. kitchen_counter_230 is close food_vegetable_2041. food_vegetable_2041 is close kitchen_counter_230. food_vegetable_2041 is on kitchen_counter_230. food_vegetable_2041 released by right hand. 
##############################
From agent.py
grab_executor(food_carrot_2014)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the food_carrot_2014. Grabbing food_carrot_2014 by right hand. 
##############################
From agent.py
put_executor(food_carrot_2014, cutting_board_2051)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the food_carrot_2014. Robot is close to the cutting_board_2051. cutting_board_2051 is close food_carrot_2014. food_carrot_2014 is close cutting_board_2051. food_carrot_2014 is on cutting_board_2051. food_carrot_2014 released by right hand. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the food_carrot_2014. Robot is close to the cutting_board_2051. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
cut_executor(food_carrot_2014)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the food_carrot_2014. Robot is close to the cutting_board_2051. Robot is close to the knife_2050. 
##############################
From agent.py
put_executor(food_fish_2021, cutting_board_2051)
Robot find: Robot is close to the food_fish_2021. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the food_carrot_2014. Robot is close to the cutting_board_2051. Robot is close to the knife_2050. food_fish_2021 is close cutting_board_2051. cutting_board_2051 is close food_fish_2021. food_fish_2021 is on cutting_board_2051. food_fish_2021 released by left hand. 
##############################
From agent.py
walk_executor(food_fish_2021)
Robot find: Robot is close to the food_fish_2021. Robot is close to the cutting_board_2051. Robot is close to the knife_2050. 
##############################
From agent.py
cut_executor(food_fish_2021)
Robot find: Robot is close to the food_fish_2021. Robot is close to the cutting_board_2051. Robot is close to the knife_2050. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Grabbing food_vegetable_2041 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. 
##############################
From agent.py
put_executor(food_vegetable_2041, cutting_board_2051)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is close to the cutting_board_2051. cutting_board_2051 is close food_vegetable_2041. food_vegetable_2041 is close cutting_board_2051. food_vegetable_2041 is on cutting_board_2051. food_vegetable_2041 released by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
cut_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_bowl_2071_around_pot_2069(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(bowl,pot_instance)
        else:
            exp(bowl,pot_instance)
    eff:
        unknown[bowl]=False
        close[bowl,pot_instance]=True
        close[pot_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_ingredients_in_pot(pot:item, carrot:item, fish:item, vegetable:item):
    body:
        achieve_once inside(carrot, pot)
        achieve_once inside(fish, pot)
        achieve_once inside(vegetable, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind carrot: item where:
            is_food_carrot(carrot) and cut(carrot)

        bind fish: item where:
            is_food_fish(fish) and cut(fish)

        bind vegetable: item where:
            is_food_vegetable(vegetable) and cut(vegetable)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_ingredients_in_pot(pot, carrot, fish, vegetable)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_ingredients_in_pot(pot:item, carrot:item, fish:item, vegetable:item):
    body:
        achieve_once inside(carrot, pot)
        achieve_once inside(fish, pot)
        achieve_once inside(vegetable, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind carrot: item where:
            is_food_carrot(carrot) and cut(carrot)

        bind fish: item where:
            is_food_fish(fish) and cut(fish)

        bind vegetable: item where:
            is_food_vegetable(vegetable) and cut(vegetable)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_ingredients_in_pot(pot, carrot, fish, vegetable)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_carrot_2014)grab_executor(food_carrot_2014)walk_executor(pot_2069)putin_executor(food_carrot_2014, pot_2069)walk_executor(food_fish_2021)grab_executor(food_fish_2021)walk_executor(pot_2069)putin_executor(food_fish_2021, pot_2069)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_carrot_2014)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_carrot_2014. 
##############################
From agent.py
grab_executor(food_carrot_2014)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_carrot_2014. Grabbing food_carrot_2014 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_carrot_2014. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_carrot_2014, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_carrot_2014. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. food_carrot_2014 is close pot_2069. food_carrot_2014 is inside pot_2069. pot_2069 is close food_carrot_2014. food_carrot_2014 released by left hand. 
##############################
From agent.py
walk_executor(food_fish_2021)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_fish_2021. 
##############################
From agent.py
grab_executor(food_fish_2021)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_fish_2021. Grabbing food_fish_2021 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_fish_2021. Robot is close to the pot_2069. Robot is close to the food_carrot_2014. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_fish_2021, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_fish_2021. Robot is close to the pot_2069. Robot is close to the food_carrot_2014. Robot is close to the kitchen_counter_230. food_fish_2021 is inside pot_2069. food_fish_2021 is close pot_2069. pot_2069 is close food_fish_2021. food_fish_2021 released by left hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. 
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the cutting_board_2051. Grabbing food_vegetable_2041 by left hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the food_fish_2021. Robot is close to the pot_2069. Robot is close to the food_carrot_2014. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_vegetable_2041, pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the food_fish_2021. Robot is close to the pot_2069. Robot is close to the food_carrot_2014. Robot is close to the kitchen_counter_230. food_vegetable_2041 is inside pot_2069. food_vegetable_2041 is close pot_2069. pot_2069 is close food_vegetable_2041. food_vegetable_2041 released by left hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the knife_2050. Robot is close to the food_vegetable_2041. Robot is close to the food_fish_2021. Robot is close to the pot_2069. Robot is close to the food_carrot_2014. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Cook a pot of fish soup.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(wallshelf_35)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_carrot_2014)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_carrot_2014)', 'switchoff_executor(faucet_43)', 'walk_executor(food_fish_2021)', 'grab_executor(food_fish_2021)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_carrot_2014, kitchen_counter_230)', 'switchon_executor(faucet_232)', 'wash_executor(food_fish_2021)', 'switchoff_executor(faucet_232)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_vegetable_2041)', 'switchoff_executor(faucet_43)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_vegetable_2041, kitchen_counter_230)', 'grab_executor(food_carrot_2014)', 'put_executor(food_carrot_2014, cutting_board_2051)', 'grab_executor(knife_2050)', 'cut_executor(food_carrot_2014)', 'put_executor(food_fish_2021, cutting_board_2051)', 'walk_executor(food_fish_2021)', 'cut_executor(food_fish_2021)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(cutting_board_2051)', 'put_executor(food_vegetable_2041, cutting_board_2051)', 'walk_executor(food_vegetable_2041)', 'cut_executor(food_vegetable_2041)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_carrot_2014)', 'grab_executor(food_carrot_2014)', 'walk_executor(pot_2069)', 'putin_executor(food_carrot_2014, pot_2069)', 'walk_executor(food_fish_2021)', 'grab_executor(food_fish_2021)', 'walk_executor(pot_2069)', 'putin_executor(food_fish_2021, pot_2069)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(pot_2069)', 'putin_executor(food_vegetable_2041, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 258 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 66
goal generate times: 3
goal correct times: 0
action_num: 61

Task complete rate:
1
Scene_id: 0
##############################
