From agent.py
Reset goals: The sub-goals are: 
['1. Find the frying pan.  ', '2. Crack the eggs into the frying pan and scramble them.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior __goal__():
    body:
        foreach pan: item:
            if is_fryingpan(pan) and not visited(pan):
                find_frying_pan(pan)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior __goal__():
    body:
        foreach pan: item:
            if is_fryingpan(pan) and not visited(pan):
                find_frying_pan(pan)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(fryingpan_2154, stove_2135)
Fail to find fryingpan_2154 around stove_2135. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_127)open_executor(oven_127)exp(fryingpan_2154, oven_127)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)
##############################
From agent.py
walk_executor(oven_127)
Robot find: food_food_2064, Robot is close to the oven_127. 
##############################
From agent.py
open_executor(oven_127)
Robot find: tray_128, food_cheese_2072, oil_2013, food_carrot_2015, Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. oven_127 is opened. 
##############################
From agent.py
exp(fryingpan_2154, oven_127)
Fail to find fryingpan_2154 around oven_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(fryingpan_2154, cupboard_118)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_118)
Fail to find fryingpan_2154 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(fryingpan_2154, cupboard_117)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_117)
Fail to find fryingpan_2154 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)obs(fryingpan_2154, look around this place)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. 
##############################
From agent.py
obs(fryingpan_2154, look around this place)
Get this information:  fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to character_240. fryingpan_2154 is on kitchen_counter_122. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_clothes_hat_2117_around_basket_for_clothes_2078(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
behavior crack_eggs_into_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

behavior scramble_eggs(egg:item, pan:item):
    body:
        if not cut(egg):
            achieve_once cut(egg)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        
        bind pan: item where:
            is_fryingpan(pan) and visited(pan) and on(pan, stove)
        
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        
        crack_eggs_into_pan(egg, pan)
        scramble_eggs(egg, pan)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_clothes_hat_2117_around_basket_for_clothes_2078(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

#goal_representation
behavior crack_eggs_into_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

behavior scramble_eggs(egg:item, pan:item):
    body:
        if not cut(egg):
            achieve_once cut(egg)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        
        bind pan: item where:
            is_fryingpan(pan) and visited(pan) and on(pan, stove)
        
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        
        crack_eggs_into_pan(egg, pan)
        scramble_eggs(egg, pan)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_clothes_hat_2117_around_basket_for_clothes_2078(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

#goal_representation

behavior crack_eggs_into_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

behavior scramble_eggs(egg:item, pan:item):
    body:
        if not cut(egg):
            achieve_once cut(egg)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        
        bind pan: item where:
            is_fryingpan(pan) and visited(pan)
        
        bind stove: item where:
            is_stove(stove) and is_on(stove) and on(pan, stove)
        
        crack_eggs_into_pan(egg, pan)
        scramble_eggs(egg, pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2149_around_fridge_126(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(oil,fridge_instance)
        else:
            exp(oil,fridge_instance)
    eff:
        unknown[oil]=False
        close[oil,fridge_instance]=True
        close[fridge_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_and_scramble_eggs(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and visited(fryingpan)
        # Select the frying pan that has been visited

        foreach egg: item:
            if is_food_egg(egg):
                crack_and_scramble_eggs(egg, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior crack_and_scramble_eggs(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and visited(fryingpan)
        # Select the frying pan that has been visited

        foreach egg: item:
            if is_food_egg(egg):
                crack_and_scramble_eggs(egg, fryingpan)

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_and_scramble_eggs(eggs:item, fryingpan:item):
    body:
        achieve_once inside(eggs, fryingpan)

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)

        bind stove: item where:
            is_stove(stove) and is_on(stove)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Ensure the frying pan is on a stove that is turned on

        crack_and_scramble_eggs(eggs, fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_clothes_hat_2117_around_basket_for_clothes_2078(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_hat,basket_for_clothes_instance)
        else:
            exp(clothes_hat,basket_for_clothes_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
def is_egg_observed(egg:item):
    # Function to check if the egg item has already been observed
    symbol observed=visited(egg)
    return observed

behavior crack_and_scramble_eggs(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)
        # Crack the egg directly into the pan for scrambling

behavior __goal__():
    body:
        foreach egg: item:
            if is_food_egg(egg) and not is_egg_observed(egg):
                # Check for unvisited egg items
                observe(egg, "Check if the egg can be cracked into the pan")
        
        bind egg: item where:
            is_food_egg(egg) and is_egg_observed(egg)
        # Select the observed egg
        
        bind pan: item where:
            is_fryingpan(pan) and visited(pan)
        # Bind the selected pan
        
        crack_and_scramble_eggs(egg, pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior crack_eggs_into_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

behavior scramble_eggs(egg:item):
    body:
        achieve cut(egg)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind egg: item where:
            is_food_egg(egg)

        find_frying_pan(pan)
        crack_eggs_into_pan(egg, pan)
        scramble_eggs(egg)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior crack_eggs_into_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

behavior scramble_eggs(egg:item):
    body:
        achieve cut(egg)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind egg: item where:
            is_food_egg(egg)

        find_frying_pan(pan)
        crack_eggs_into_pan(egg, pan)
        scramble_eggs(egg)

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2154, look around this place)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(cutting_board_2123)put_executor(food_egg_2092, cutting_board_2123)walk_executor(knife_2037)grab_executor(knife_2037)walk_executor(food_egg_2092)cut_executor(food_egg_2092)
##############################
From agent.py
obs(fryingpan_2154, look around this place)
Get this information:  fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to character_240. fryingpan_2154 is on kitchen_counter_122. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_egg_2092, fridge_126)
Find food_egg_2092. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(cutting_board_2123)put_executor(food_egg_2092, cutting_board_2123)walk_executor(knife_2037)grab_executor(knife_2037)walk_executor(food_egg_2092)cut_executor(food_egg_2092)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(food_egg_2092, fryingpan_2154)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. food_egg_2092 is inside fryingpan_2154. fryingpan_2154 is close food_egg_2092. food_egg_2092 is close fryingpan_2154. food_egg_2092 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_egg_2092. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_egg_2092, cutting_board_2123)
Robot find: Robot is close to the food_egg_2092. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_egg_2092. food_egg_2092 is close cutting_board_2123. food_egg_2092 is on cutting_board_2123. food_egg_2092 released by right hand. 
##############################
From agent.py
walk_executor(knife_2037)
Robot find: Robot is close to the knife_2037. Robot is close to the cupboard_118. 
##############################
From agent.py
grab_executor(knife_2037)
Robot find: Robot is close to the knife_2037. Robot is close to the cupboard_118. Grabbing knife_2037 by right hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_egg_2092. 
##############################
From agent.py
cut_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_egg_2092. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Crack the eggs directly into the frying pan and scramble them there. The current actions show the egg was cut on a cutting board, not scrambled in the frying pan. Make sure the eggs are scrambled directly in the pan.
##############################
From agent.py
Human Instruction: Crack the eggs directly into the frying pan and scramble them there. The current actions show the egg was cut on a cutting board, not scrambled in the frying pan. Make sure the eggs are scrambled directly in the pan.

The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Open stove_2135.
Action 3: look for fryingpan_2154 around stove_2135.
Action 4: Walk to oven_127.
Action 5: Open oven_127.
Action 6: look for fryingpan_2154 around oven_127.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for fryingpan_2154 around cupboard_118.
Action 10: Walk to cupboard_117.
Action 11: look for fryingpan_2154 around cupboard_117.
Action 12: Walk to kitchen_counter_122.
Action 13: look for fryingpan_2154 around kitchen_counter_122.
Action 14: Walk to fryingpan_2154.
Action 15: Observe around fryingpan_2154 with the question of look around this place.
Action 16: Observe around fryingpan_2154 with the question of look around this place.
Action 17: Walk to fridge_126.
Action 18: Switch off fridge_126.
Action 19: Open fridge_126.
Action 20: look for food_egg_2092 around fridge_126.
Action 21: Grab food_egg_2092.
Action 22: Walk to fryingpan_2154.
Action 23: Put food_egg_2092 into fryingpan_2154.
Action 24: Walk to food_egg_2092.
Action 25: Grab food_egg_2092.
Action 26: Walk to cutting_board_2123.
Action 27: Put food_egg_2092 on cutting_board_2123.
Action 28: Walk to knife_2037.
Action 29: Grab knife_2037.
Action 30: Walk to food_egg_2092.
Action 31: Cut food_egg_2092.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_pot_78(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(milk,pot_instance)
        else:
            exp(milk,pot_instance)
    eff:
        unknown[milk]=False
        close[milk,pot_instance]=True
        close[pot_instance,milk]=True
    

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior crack_eggs_and_scramble(eggs:item, pan:item):
    body:
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)

        bind pan: item where:
            is_fryingpan(pan)
        
        crack_eggs_and_scramble(eggs, pan)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior crack_eggs_and_scramble(eggs:item, pan:item):
    body:
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)

        bind pan: item where:
            is_fryingpan(pan)
        
        crack_eggs_and_scramble(eggs, pan)
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_egg_2092. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(food_egg_2092, fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. food_egg_2092 is inside fryingpan_2154. food_egg_2092 is close fryingpan_2154. food_egg_2092 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to directly crack the eggs into the frying pan and scramble them there. The current actions show that the egg was cut on a cutting board and then placed into the pan, but it was not scrambled as required.
##############################
From agent.py
Human Instruction: You need to directly crack the eggs into the frying pan and scramble them there. The current actions show that the egg was cut on a cutting board and then placed into the pan, but it was not scrambled as required.

The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Open stove_2135.
Action 3: look for fryingpan_2154 around stove_2135.
Action 4: Walk to oven_127.
Action 5: Open oven_127.
Action 6: look for fryingpan_2154 around oven_127.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for fryingpan_2154 around cupboard_118.
Action 10: Walk to cupboard_117.
Action 11: look for fryingpan_2154 around cupboard_117.
Action 12: Walk to kitchen_counter_122.
Action 13: look for fryingpan_2154 around kitchen_counter_122.
Action 14: Walk to fryingpan_2154.
Action 15: Observe around fryingpan_2154 with the question of look around this place.
Action 16: Observe around fryingpan_2154 with the question of look around this place.
Action 17: Walk to fridge_126.
Action 18: Switch off fridge_126.
Action 19: Open fridge_126.
Action 20: look for food_egg_2092 around fridge_126.
Action 21: Grab food_egg_2092.
Action 22: Walk to fryingpan_2154.
Action 23: Put food_egg_2092 into fryingpan_2154.
Action 24: Walk to food_egg_2092.
Action 25: Grab food_egg_2092.
Action 26: Walk to cutting_board_2123.
Action 27: Put food_egg_2092 on cutting_board_2123.
Action 28: Walk to knife_2037.
Action 29: Grab knife_2037.
Action 30: Walk to food_egg_2092.
Action 31: Cut food_egg_2092.
Action 32: Grab food_egg_2092.
Action 33: Walk to fryingpan_2154.
Action 34: Put food_egg_2092 into fryingpan_2154.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2118_around_basket_for_clothes_2078(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

behavior find_headset_2146_around_nightstand_195(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==195
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(headset,nightstand_instance)
        else:
            exp(headset,nightstand_instance)
    eff:
        unknown[headset]=False
        close[headset,nightstand_instance]=True
        close[nightstand_instance,headset]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_and_scramble_eggs(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)
        achieve is_food_food(egg) # Ensure the egg is classified as food
        # Since eggs need to be scrambled in the pan
        # observe will be needed to confirm placement in pan
        observe(pan, "Checking if the egg was cracked and scrambled in the pan")

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to be used

        bind pan: item where:
            is_fryingpan(pan) and on(pan, table)
        # Select the frying pan that was found in the previous subtask

        crack_and_scramble_eggs(egg, pan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: table; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_gloves_2118_around_basket_for_clothes_2078(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

behavior find_headset_2131_around_couch_269(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(headset,couch_instance)
        else:
            exp(headset,couch_instance)
    eff:
        unknown[headset]=False
        close[headset,couch_instance]=True
        close[couch_instance,headset]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior crack_and_scramble_eggs(egg:item, pan:item):
    body:
        achieve inside(egg, pan) # Ensure the egg is inside the pan
        achieve cut(egg) # Ensure the egg is scrambled

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to be used

        bind pan: item where:
            is_fryingpan(pan) and surfaces(pan)
        # Select the frying pan

        crack_and_scramble_eggs(egg, pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_eggs_into_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

behavior scramble_eggs_in_pan(pan:item):
    body:
        achieve cut(pan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        crack_eggs_into_pan(egg, fryingpan)
        scramble_eggs_in_pan(fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tea_bag_2023_around_bookshelf_196(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(tea_bag,bookshelf_instance)
        else:
            exp(tea_bag,bookshelf_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,bookshelf_instance]=True
        close[bookshelf_instance,tea_bag]=True
    

behavior find_pot_2040_around_sink_19(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_eggs_in_pan(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)
        # Crack the eggs directly into the frying pan

behavior scramble_eggs_in_pan(fryingpan:item):
    body:
        achieve cut(fryingpan)
        # Scramble the eggs in the frying pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is on

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select a frying pan that is on the stove
        
        crack_eggs_in_pan(egg, fryingpan)
        scramble_eggs_in_pan(fryingpan)


#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. crack the eggs into the frying pan and scramble them." ?
Answer: Put the pan on the stove. Turn on the stove. Put oil in the pan. Crack the eggs into the pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the pan on the stove, turn on the stove, add oil, and crack the eggs into the pan to scramble.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior crack_eggs_into_pan(eggs:item, pan:item):
    body:
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind eggs: item where:
            is_food_egg(eggs)

        bind pan: item where:
            is_fryingpan(pan)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        turn_on_stove(stove)
        add_oil_to_pan(oil, pan)
        crack_eggs_into_pan(eggs, pan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior crack_eggs_into_pan(eggs:item, pan:item):
    body:
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind eggs: item where:
            is_food_egg(eggs)

        bind pan: item where:
            is_fryingpan(pan)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        turn_on_stove(stove)
        add_oil_to_pan(oil, pan)
        crack_eggs_into_pan(eggs, pan)

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2154, look around this place)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(oil_2013)grab_executor(oil_2013)walk_executor(fryingpan_2154)putin_executor(oil_2013, fryingpan_2154)
##############################
From agent.py
obs(fryingpan_2154, look around this place)
Get this information:  food_egg_2092 is inside fryingpan_2154. fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to food_egg_2092. fryingpan_2154 is close to character_240. fryingpan_2154 is on kitchen_counter_122. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. Grabbing fryingpan_2154 by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close fryingpan_2154. fryingpan_2154 is close stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the knife_2037. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(oil_2013)
Robot find: Robot is close to the knife_2037. Robot is close to the oil_2013. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(oil_2013)
Robot find: Robot is close to the knife_2037. Robot is close to the oil_2013. Robot is close to the oven_127. Grabbing oil_2013 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the oil_2013. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(oil_2013, fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the oil_2013. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. oil_2013 is inside fryingpan_2154. fryingpan_2154 is close oil_2013. oil_2013 is close fryingpan_2154. oil_2013 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to crack the eggs directly into the frying pan and scramble them there. Currently, the eggs were placed into the pan after processing them on a cutting board, which does not align with scrambling directly in the pan as instructed.
##############################
From agent.py
Human Instruction: You need to crack the eggs directly into the frying pan and scramble them there. Currently, the eggs were placed into the pan after processing them on a cutting board, which does not align with scrambling directly in the pan as instructed.

Human Guidance: Put the pan on the stove. Turn on the stove. Put oil in the pan. Crack the eggs into the pan.
The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Open stove_2135.
Action 3: look for fryingpan_2154 around stove_2135.
Action 4: Walk to oven_127.
Action 5: Open oven_127.
Action 6: look for fryingpan_2154 around oven_127.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for fryingpan_2154 around cupboard_118.
Action 10: Walk to cupboard_117.
Action 11: look for fryingpan_2154 around cupboard_117.
Action 12: Walk to kitchen_counter_122.
Action 13: look for fryingpan_2154 around kitchen_counter_122.
Action 14: Walk to fryingpan_2154.
Action 15: Observe around fryingpan_2154 with the question of look around this place.
Action 16: Observe around fryingpan_2154 with the question of look around this place.
Action 17: Walk to fridge_126.
Action 18: Switch off fridge_126.
Action 19: Open fridge_126.
Action 20: look for food_egg_2092 around fridge_126.
Action 21: Grab food_egg_2092.
Action 22: Walk to fryingpan_2154.
Action 23: Put food_egg_2092 into fryingpan_2154.
Action 24: Walk to food_egg_2092.
Action 25: Grab food_egg_2092.
Action 26: Walk to cutting_board_2123.
Action 27: Put food_egg_2092 on cutting_board_2123.
Action 28: Walk to knife_2037.
Action 29: Grab knife_2037.
Action 30: Walk to food_egg_2092.
Action 31: Cut food_egg_2092.
Action 32: Grab food_egg_2092.
Action 33: Walk to fryingpan_2154.
Action 34: Put food_egg_2092 into fryingpan_2154.
Action 35: Observe around fryingpan_2154 with the question of look around this place.
Action 36: Grab fryingpan_2154.
Action 37: Walk to stove_2135.
Action 38: Put fryingpan_2154 on stove_2135.
Action 39: Switch on stove_2135.
Action 40: Walk to oil_2013.
Action 41: Grab oil_2013.
Action 42: Walk to fryingpan_2154.
Action 43: Put oil_2013 into fryingpan_2154.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_curtain_291(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==291
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(oil,curtain_instance)
        else:
            exp(oil,curtain_instance)
    eff:
        unknown[oil]=False
        close[oil,curtain_instance]=True
        close[curtain_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_egg_observed(egg:item):
    # Function to check if the egg has been observed
    symbol observed=visited(egg)
    return observed

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior crack_egg_into_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind egg: item where:
            is_food_egg(egg) and not cut(egg)

        place_pan_on_stove(pan, stove)
        turn_on_stove(stove)
        add_oil_to_pan(oil, pan)
        crack_egg_into_pan(egg, pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior crack_eggs_into_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind egg: item where:
            is_food_egg(egg)

        place_pan_on_stove(pan, stove)
        turn_on_stove(stove)
        add_oil_to_pan(oil, pan)
        crack_eggs_into_pan(egg, pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior crack_eggs_into_pan(eggs:item, pan:item):
    body:
        achieve cut(eggs)
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind eggs: item where:
            is_food_egg(eggs)

        place_pan_on_stove(pan, stove)
        turn_on_stove(stove)
        add_oil_to_pan(oil, pan)
        crack_eggs_into_pan(eggs, pan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior crack_eggs_into_pan(eggs:item, pan:item):
    body:
        achieve cut(eggs)
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind eggs: item where:
            is_food_egg(eggs)

        place_pan_on_stove(pan, stove)
        turn_on_stove(stove)
        add_oil_to_pan(oil, pan)
        crack_eggs_into_pan(eggs, pan)

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(cutting_board_2123)put_executor(food_egg_2092, cutting_board_2123)walk_executor(food_egg_2092)cut_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the fryingpan_2154. Robot is close to the food_egg_2092. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the fryingpan_2154. Robot is close to the food_egg_2092. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_egg_2092, cutting_board_2123)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. food_egg_2092 is close cutting_board_2123. food_egg_2092 is on cutting_board_2123. food_egg_2092 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the cutting_board_2123. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the cutting_board_2123. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_egg_2092, fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. food_egg_2092 is inside fryingpan_2154. fryingpan_2154 is close food_egg_2092. food_egg_2092 is close fryingpan_2154. food_egg_2092 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to crack the eggs directly into the frying pan and scramble them there. Currently, the eggs were placed into the pan after processing them on a cutting board, which does not align with the task of cracking them directly in the pan.
##############################
From agent.py
Human Instruction: You need to crack the eggs directly into the frying pan and scramble them there. Currently, the eggs were placed into the pan after processing them on a cutting board, which does not align with the task of cracking them directly in the pan.

Human Guidance: Put the pan on the stove. Turn on the stove. Put oil in the pan. Crack the eggs into the pan.
The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Open stove_2135.
Action 3: look for fryingpan_2154 around stove_2135.
Action 4: Walk to oven_127.
Action 5: Open oven_127.
Action 6: look for fryingpan_2154 around oven_127.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for fryingpan_2154 around cupboard_118.
Action 10: Walk to cupboard_117.
Action 11: look for fryingpan_2154 around cupboard_117.
Action 12: Walk to kitchen_counter_122.
Action 13: look for fryingpan_2154 around kitchen_counter_122.
Action 14: Walk to fryingpan_2154.
Action 15: Observe around fryingpan_2154 with the question of look around this place.
Action 16: Observe around fryingpan_2154 with the question of look around this place.
Action 17: Walk to fridge_126.
Action 18: Switch off fridge_126.
Action 19: Open fridge_126.
Action 20: look for food_egg_2092 around fridge_126.
Action 21: Grab food_egg_2092.
Action 22: Walk to fryingpan_2154.
Action 23: Put food_egg_2092 into fryingpan_2154.
Action 24: Walk to food_egg_2092.
Action 25: Grab food_egg_2092.
Action 26: Walk to cutting_board_2123.
Action 27: Put food_egg_2092 on cutting_board_2123.
Action 28: Walk to knife_2037.
Action 29: Grab knife_2037.
Action 30: Walk to food_egg_2092.
Action 31: Cut food_egg_2092.
Action 32: Grab food_egg_2092.
Action 33: Walk to fryingpan_2154.
Action 34: Put food_egg_2092 into fryingpan_2154.
Action 35: Observe around fryingpan_2154 with the question of look around this place.
Action 36: Grab fryingpan_2154.
Action 37: Walk to stove_2135.
Action 38: Put fryingpan_2154 on stove_2135.
Action 39: Switch on stove_2135.
Action 40: Walk to oil_2013.
Action 41: Grab oil_2013.
Action 42: Walk to fryingpan_2154.
Action 43: Put oil_2013 into fryingpan_2154.
Action 44: Walk to food_egg_2092.
Action 45: Grab food_egg_2092.
Action 46: Walk to cutting_board_2123.
Action 47: Put food_egg_2092 on cutting_board_2123.
Action 48: Walk to food_egg_2092.
Action 49: Cut food_egg_2092.
Action 50: Grab food_egg_2092.
Action 51: Walk to fryingpan_2154.
Action 52: Put food_egg_2092 into fryingpan_2154.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior crack_eggs_into_pan(eggs:item, pan:item):
    body:
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind eggs: item where:
            is_food_egg(eggs)

        place_pan_on_stove(pan, stove)
        turn_on_stove(stove)
        add_oil_to_pan(oil, pan)
        crack_eggs_into_pan(eggs, pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior place_pan_on_stove_and_turn_on(pan:item, stove:item):
    body:
        achieve_once on(pan, stove) # Place the pan on the stove
        achieve is_on(stove) # Turn on the stove

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan) # Add oil to the pan

behavior crack_eggs_into_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan) # Crack eggs into the pan

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind egg: item where:
            is_food_egg(egg)

        place_pan_on_stove_and_turn_on(pan, stove)
        add_oil_to_pan(oil, pan)
        crack_eggs_into_pan(egg, pan)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(pan:item, oil:item):
    body:
        achieve_once inside(oil, pan)

behavior crack_eggs_into_pan(eggs:item, pan:item):
    body:
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind eggs: item where:
            is_food_egg(eggs)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        turn_on_stove(stove)
        add_oil_to_pan(pan, oil)
        crack_eggs_into_pan(eggs, pan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(pan:item, oil:item):
    body:
        achieve_once inside(oil, pan)

behavior crack_eggs_into_pan(eggs:item, pan:item):
    body:
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind eggs: item where:
            is_food_egg(eggs)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        turn_on_stove(stove)
        add_oil_to_pan(pan, oil)
        crack_eggs_into_pan(eggs, pan)

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2154, look around this place)
##############################
From agent.py
obs(fryingpan_2154, look around this place)
Get this information:  oil_2013 is inside fryingpan_2154. food_egg_2092 is inside fryingpan_2154. fryingpan_2154 is close to stove_2135. fryingpan_2154 is close to oil_2013. fryingpan_2154 is close to character_240. fryingpan_2154 is close to food_egg_2092. fryingpan_2154 is on stove_2135. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to directly crack and scramble the eggs into the pan without additional processing on the cutting board.
##############################
Task Summary:
Task Goal:
Scramble egg by the fryingpan.
Action History:
['walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(oven_127)', 'open_executor(oven_127)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(cupboard_117)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fryingpan_2154)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_egg_2092)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_egg_2092, fryingpan_2154)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(cutting_board_2123)', 'put_executor(food_egg_2092, cutting_board_2123)', 'walk_executor(knife_2037)', 'grab_executor(knife_2037)', 'walk_executor(food_egg_2092)', 'cut_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_egg_2092, fryingpan_2154)', 'grab_executor(fryingpan_2154)', 'walk_executor(stove_2135)', 'put_executor(fryingpan_2154, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(oil_2013)', 'grab_executor(oil_2013)', 'walk_executor(fryingpan_2154)', 'putin_executor(oil_2013, fryingpan_2154)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(cutting_board_2123)', 'put_executor(food_egg_2092, cutting_board_2123)', 'walk_executor(food_egg_2092)', 'cut_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_egg_2092, fryingpan_2154)']
Time info:
Time consume: 356 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 67
goal generate times: 17
goal correct times: 0
action_num: 43

Task complete rate:
1
Scene_id: 1
##############################
