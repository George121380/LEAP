Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
"['1. Locate the appropriate pot and fill it with water.', '2. Place the pot on the stove and turn on
 the heat/burner.', '3. Wait until the water comes to a boil.']",,,,,
" 
def find_appropriate_pot():
    # Function to find and select the appropriate pot
    symbol pot_found = exists p: item : is_pot(p)
    return pot_found

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, pot)
        # Approach the pot

        achieve close_char(char, faucet)
        # Approach the faucet

        achieve open(faucet)
        # Open the faucet to fill the pot

        water(pot)
        # Fill the pot with water

        achieve closed(faucet)
        # Close the faucet after filling

behavior __goal__():
    body:
        if exists pot: item : is_pot(pot) and not has_water(pot):
            # Check if there is an appropriate pot found and it doesnt have water
            bind pot: item where:
                is_pot(pot) 
            # Select the appropriate pot

            bind faucet: item where:
                is_faucet(faucet) and close(faucet,pot)
            # Select a nearby faucet to fill the pot

            fill_pot_with_water(pot, faucet)
            # Execute behavior to fill the pot with water
        
        else:
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, ""Check if its appropriate for boiling water"")
                    # Observe each unvisited pot to check if its appropriate

            foreach faucet: item:
                if is_faucet(faucet) and not visited(faucet):
                    observe(faucet, ""Check if the faucet is functional and reachable for pot"")
                    # Observe each unvisited faucet to ensure its functionality and accessibility
","Error trying to process rule ""behavior_definition"":

'Function water not found. Note that recursive function calls are not supported in the current versi
on.'",,,,
" 
def find_appropriate_pot():
    # Function to find and select the appropriate pot
    symbol pot_found = exists p: item : is_pot(p)
    return pot_found

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, pot)
        # Approach the pot

        achieve close_char(char, faucet)
        # Approach the faucet

        achieve open(faucet)
        # Open the faucet to fill the pot

        is_milk(pot)
        # Fill the pot with water

        achieve closed(faucet)
        # Close the faucet after filling

behavior __goal__():
    body:
        if exists pot: item : is_pot(pot) and not has_water(pot):
            # Check if there is an appropriate pot found and it doesnt have water
            bind pot: item where:
                is_pot(pot) 
            # Select the appropriate pot

            bind faucet: item where:
                is_faucet(faucet) and close(faucet,pot)
            # Select a nearby faucet to fill the pot

            fill_pot_with_water(pot, faucet)
            # Execute behavior to fill the pot with water
        
        else:
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, ""Check if its appropriate for boiling water"")
                    # Observe each unvisited pot to check if its appropriate

            foreach faucet: item:
                if is_faucet(faucet) and not visited(faucet):
                    observe(faucet, ""Check if the faucet is functional and reachable for pot"")
                    # Observe each unvisited faucet to ensure its functionality and accessibility
",,,,,[]
"['1. Fill the pot with water.', '2. Place the pot on the stove and turn on the heat.']",,,,,
" 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # The pot should be filled with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to fill with water
        fill_pot_with_water(pot)
",,,,,"['walk_executor(cupboard_229); open_executor(cupboard_229); exp(pot_2069, cupboard_229); walk_execut
or(pot_2069); grab_executor(pot_2069); walk_executor(faucet_43); switchon_executor(faucet_43); switc
hoff_executor(faucet_43)']"
,,,,,"(CrowControllerApplier<walk_executor(cupboard_229)>, CrowControllerApplier<open_executor(cupboard_22
9)>, CrowControllerApplier<exp(pot_2069, cupboard_229)>, CrowControllerApplier<walk_executor(pot_206
9)>, CrowControllerApplier<grab_executor(pot_2069)>, CrowControllerApplier<walk_executor(faucet_43)>
, CrowControllerApplier<switchon_executor(faucet_43)>, CrowControllerApplier<switchoff_executor(fauc
et_43)>)"
,,walk_executor(cupboard_229),"Find tray_296. Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229
. Robot is no longer inside bathroom_1.",,
,,open_executor(cupboard_229),Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. ,,
,,"exp(pot_2069, cupboard_229)",Failed to find pot_2069 around cupboard_229. ,,
,,,,,"(CrowControllerApplier<walk_executor(kitchen_counter_230)>, CrowControllerApplier<exp(pot_2069, kitc
hen_counter_230)>, CrowControllerApplier<walk_executor(pot_2069)>, CrowControllerApplier<grab_execut
or(pot_2069)>, CrowControllerApplier<walk_executor(faucet_43)>, CrowControllerApplier<switchon_execu
tor(faucet_43)>, CrowControllerApplier<switchoff_executor(faucet_43)>)"
,,walk_executor(kitchen_counter_230),"Find pot_2069. Find oil_2079. Find knife_2050. Find cutting_board_2051. Find cup_2064. Find cup_2063
. Find napkin_2005. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find dra
wing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Rob
ot is no longer close wall_211.Robot is no longer close cupboard_229.",,
,,"exp(pot_2069, kitchen_counter_230)",Find pot_2069. ,,
,,walk_executor(pot_2069),Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. ,,
,,grab_executor(pot_2069),"Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Grabbi
ng pot_2069 by right hand. ",,
,,walk_executor(faucet_43),"Find towel_rack_31. Find towel_rack_34. Find towel_rack_32. Robot is inside bathroom_1. Robot is clo
se pot_2069. Robot is close bathroom_counter_41. Robot is close faucet_43. Robot is no longer inside
 dining_room_201.Robot is no longer close kitchen_counter_230.",,
,,switchon_executor(faucet_43),"Robot is inside bathroom_1. Robot is close pot_2069. Robot is close bathroom_counter_41. Robot is cl
ose faucet_43. ",,
,,switchoff_executor(faucet_43),"Robot is inside bathroom_1. Robot is close pot_2069. Robot is close bathroom_counter_41. Robot is cl
ose faucet_43. ",,
,,,,"- Sub-Task Completed: Yes
- Next Steps: You successfully filled the pot with water by taking it to the faucet, turning the fau
cet on, and then turning it off.",
" 
def has_stove_nearby(kitchen:item):
    # Determine if there is a stove nearby in the kitchen
    symbol stove_nearby=exists stove:item: is_stove(stove) and close(stove,kitchen)
    return stove_nearby

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Place the pot on the stove

behavior heat_stove(stove:item):
    body:
        achieve is_on(stove) # Turn the stove on

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Select the kitchen counter

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot with water

        if has_stove_nearby(kitchen):
            bind stove: item where:
                is_stove(stove) and close(stove, kitchen)
            # Select a stove close to the kitchen

            put_pot_on_stove(pot, stove)
            heat_stove(stove)
",,,,,"['grab_executor(pot_2069); walk_executor(stove_2065); put_executor(pot_2069, stove_2065); switchon_e
xecutor(stove_2065)']"
,,,,,"(CrowControllerApplier<grab_executor(pot_2069)>, CrowControllerApplier<walk_executor(stove_2065)>, C
rowControllerApplier<put_executor(pot_2069, stove_2065)>, CrowControllerApplier<switchon_executor(st
ove_2065)>)"
,,grab_executor(pot_2069),"Robot is inside bathroom_1. Robot is close pot_2069. Robot is close bathroom_counter_41. Robot is cl
ose faucet_43. Robot is close char. Grabbing pot_2069 by left hand. ",,
,,walk_executor(stove_2065),"Robot is inside dining_room_201. Robot is close pot_2069. Robot is close stove_2065. Robot is close 
kitchen_counter_230. Robot is no longer inside bathroom_1.Robot is no longer close char.Robot is no 
longer close bathroom_counter_41.Robot is no longer close faucet_43.",,
,,"put_executor(pot_2069, stove_2065)","Robot is inside dining_room_201. Robot is close pot_2069. Robot is close stove_2065. Robot is close 
kitchen_counter_230. pot_2069 released by left hand. pot_2069 released by right hand. ",,
,,switchon_executor(stove_2065),"Robot is inside dining_room_201. Robot is close pot_2069. Robot is close stove_2065. Robot is close 
kitchen_counter_230. ",,
,,,,"- Sub-Task Completed: Yes
- Next Steps: You have placed the pot on the stove and turned on the stove to heat it. This complete
s the sub-task.",
12,walk_executor(cupboard_229),,,,
12,open_executor(cupboard_229),,,,
12,walk_executor(kitchen_counter_230),,,,
12,walk_executor(pot_2069),,,,
12,grab_executor(pot_2069),,,,
12,walk_executor(faucet_43),,,,
12,switchon_executor(faucet_43),,,,
12,switchoff_executor(faucet_43),,,,
12,grab_executor(pot_2069),,,,
12,walk_executor(stove_2065),,,,
12,"put_executor(pot_2069, stove_2065)",,,,
12,switchon_executor(stove_2065),,,,
