Goal Representation,Debug Result,Action,Add Info,LLM Answer,Plan
"['1. Crack the eggs into a bowl and whisk them.', '2. Preheat the pan on the stove.', '3. Pour the w
hisked eggs into the pan and scramble until cooked.']",,,,,
" 
def has_eggs_in_bowl(bowl:item):
    # Function to check if there are eggs in the specified bowl
    symbol has_eggs=exists o: item : is_food_egg(o) and inside(o, bowl)
    return has_eggs

def has_whisk(bowl:item):
    # Function to check if there is a whisk close to the bowl
    symbol whisk_near=exists whisk: item : grabbable(whisk) and close(whisk, bowl)
    return whisk_near

behavior crack_eggs_into_bowl(eggs:item, bowl:item):
    body:
        achieve inside(eggs, bowl) # Move the eggs into the bowl

behavior whisk_eggs(bowl:item, whisk:item):
    body:
        achieve_once inhand(whisk) # Hold the whisk temporarily
        achieve clean(bowl) # Whisking eggs typically leaves the bowl clean afterward
        achieve dirty(whisk) # Whisk should be marked as used

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, bowl)
        # Select eggs that may already be in the bowl

        if not has_eggs_in_bowl(bowl):
            # If the bowl doesnt have eggs, crack them into the bowl
            crack_eggs_into_bowl(eggs, bowl)

        if has_whisk(bowl):
            # If a whisk is available near the bowl, whisk the eggs
            bind whisk: item where:
                grabbable(whisk) and close(whisk, bowl)
            whisk_eggs(bowl, whisk)
        else:
            # If no whisk is found, observe for potential tools to whisk
            observe(bowl, ""Check is there any whisk or similar tool nearby"")
",,,,,[]
"['1. Crack the eggs into a bowl and beat them.', '2. Heat the pan on the stove.', '3. Pour the beate
n eggs into the pan and scramble them.']",,,,,
"
def has_cracked_eggs_in_bowl(bowl:item):
    # Function to check if there are cracked eggs in a specified bowl
    symbol has_cracked_eggs=exists o: item : is_food_egg(o) and inside(o, bowl)
    return has_cracked_eggs

behavior __goal__():
    body:
        if exists bowl: item : is_bowl(bowl) and has_cracked_eggs_in_bowl(bowl):
            # If we have already found the bowl with cracked eggs, we can directly approach it
            bind bowl: item where:
                is_bowl(bowl) and has_cracked_eggs_in_bowl(bowl)
            achieve close_char(char, bowl)

        else:
            # Check all bowls in the scene that have not been visited
            foreach bowl: item:
                if is_bowl(bowl) and not visited(bowl):
                    observe(bowl, ""Check is there any cracked egg in the bowl"")
",,,,,"['walk_executor(kitchen_counter_230); exp(bowl_2071, kitchen_counter_230); walk_executor(bowl_2071);
 obs(bowl_2071, Check is there any cracked egg in the bowl); walk_executor(kitchen_counter_230); exp
(bowl_2072, kitchen_counter_230); walk_executor(bowl_2072); obs(bowl_2072, Check is there any cracke
d egg in the bowl)']"
,,,,,"(CrowControllerApplier<walk_executor(kitchen_counter_230)>, CrowControllerApplier<exp(bowl_2071, kit
chen_counter_230)>, CrowControllerApplier<walk_executor(bowl_2071)>, CrowControllerApplier<obs(bowl_
2071, Check is there any cracked egg in the bowl)>, CrowControllerApplier<walk_executor(kitchen_coun
ter_230)>, CrowControllerApplier<exp(bowl_2072, kitchen_counter_230)>, CrowControllerApplier<walk_ex
ecutor(bowl_2072)>, CrowControllerApplier<obs(bowl_2072, Check is there any cracked egg in the bowl)
>)"
,,walk_executor(kitchen_counter_230),"Find napkin_2005. Find oil_2079. Find knife_2050. Find cutting_board_2051. Find cup_2063. Find cup_2
064. Find pot_2069. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawin
g_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_c
ounter_230. Robot is no longer inside bathroom_1.",,
