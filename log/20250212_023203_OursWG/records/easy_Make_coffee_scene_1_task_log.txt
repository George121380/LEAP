From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2133_around_kitchen_counter_119(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2065_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        achieve_once has_water(coffee_maker)

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve_once on(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
            
        bind cup: item where:
            is_cup(cup)
            
        prepare_coffee_maker(coffee_maker)
        turn_on_coffee_maker(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        achieve_once has_water(coffee_maker)

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve_once on(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
            
        bind cup: item where:
            is_cup(cup)
            
        prepare_coffee_maker(coffee_maker)
        turn_on_coffee_maker(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)switchon_executor(coffe_maker_130)walk_executor(kitchen_counter_119)exp(cup_2132, kitchen_counter_119)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)put_executor(cup_2132, coffe_maker_130)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
switchon_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is turned on. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_119)
Fail to find cup_2132 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(cup_2132, cupboard_117)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)put_executor(cup_2132, coffe_maker_130)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(cup_2132, cupboard_117)
Fail to find cup_2132 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(cup_2132, cupboard_118)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)put_executor(cup_2132, coffe_maker_130)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(cup_2132, cupboard_118)
Fail to find cup_2132 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(cup_2132, kitchen_counter_123)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)put_executor(cup_2132, coffe_maker_130)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_123)
Fail to find cup_2132 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(microwave_135)open_executor(microwave_135)exp(cup_2132, microwave_135)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)put_executor(cup_2132, coffe_maker_130)
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
exp(cup_2132, microwave_135)
Fail to find cup_2132 around microwave_135. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2142)exp(cup_2132, bowl_2142)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)put_executor(cup_2132, coffe_maker_130)
##############################
From agent.py
walk_executor(bowl_2142)
Robot find: iron_2161, Robot is close to the bowl_2142. Robot is close to the kitchen_counter_119. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2132 ?
Answer: Go to the dining_room_41. Locate table_114, and you will find cup_2132 on the table.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the dining_room_41. Locate table_114, and you will find cup_2132 on the table.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.
Action 3: Walk to kitchen_counter_119.
Action 4: look for cup_2132 around kitchen_counter_119.
Action 5: Walk to cupboard_117.
Action 6: look for cup_2132 around cupboard_117.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for cup_2132 around cupboard_118.
Action 10: Walk to kitchen_counter_123.
Action 11: look for cup_2132 around kitchen_counter_123.
Action 12: Walk to microwave_135.
Action 13: Open microwave_135.
Action 14: look for cup_2132 around microwave_135.
Action 15: Walk to bowl_2142.

##############################
From agent.py
exp(cup_2132, bowl_2142)
Fail to find cup_2132 around bowl_2142. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2132, table_114)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)put_executor(cup_2132, coffe_maker_130)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(cup_2132, table_114)
Find cup_2132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)put_executor(cup_2132, coffe_maker_130)
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
grab_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. Grabbing cup_2132 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
put_executor(cup_2132, coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is close cup_2132. cup_2132 is close coffe_maker_130. cup_2132 is on coffe_maker_130. cup_2132 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the coffee maker is prepared with water and plugged in, as these steps are necessary to complete the goal of making a cup of coffee using the coffee maker.
##############################
From agent.py
Human Instruction: You need to ensure the coffee maker is prepared with water and plugged in, as these steps are necessary to complete the goal of making a cup of coffee using the coffee maker.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.
Action 3: Walk to kitchen_counter_119.
Action 4: look for cup_2132 around kitchen_counter_119.
Action 5: Walk to cupboard_117.
Action 6: look for cup_2132 around cupboard_117.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for cup_2132 around cupboard_118.
Action 10: Walk to kitchen_counter_123.
Action 11: look for cup_2132 around kitchen_counter_123.
Action 12: Walk to microwave_135.
Action 13: Open microwave_135.
Action 14: look for cup_2132 around microwave_135.
Action 15: Walk to bowl_2142.
Action 16: look for cup_2132 around bowl_2142.
Action 17: Walk to table_114.
Action 18: look for cup_2132 around table_114.
Action 19: Walk to cup_2132.
Action 20: Grab cup_2132.
Action 21: Walk to coffe_maker_130.
Action 22: Put cup_2132 on coffe_maker_130.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2065_around_sink_120(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(coffee_filter,sink_instance)
        else:
            exp(coffee_filter,sink_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,sink_instance]=True
        close[sink_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee_maker(coffee_maker:item):
    body:
        if not plugged(coffee_maker) or not has_water(coffee_maker):
            observe(coffee_maker, "Check if it is plugged and has water")
            # Ensure the coffee maker is properly set up with power and water

behavior brew_coffee(cup:item, coffee_maker:item):
    body:
        achieve has_water(cup)
        # This simulates the brewing process filling the cup with coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==130
        # Select coffee maker with ID 130
        bind cup: item where:
            is_cup(cup) and id[cup]==2132
        # Select cup with ID 2132

        prepare_coffee_maker(coffee_maker)
        achieve on(cup, coffee_maker) # Put the cup on the coffee maker and start brewing
        brew_coffee(cup, coffee_maker)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_sink_120(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(measuring_cup,sink_instance)
        else:
            exp(measuring_cup,sink_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,sink_instance]=True
        close[sink_instance,measuring_cup]=True
    

behavior find_coffee_filter_2053_around_sink_120(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(coffee_filter,sink_instance)
        else:
            exp(coffee_filter,sink_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,sink_instance]=True
        close[sink_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_ready(coffee_maker: item):
    # Function to check if the coffee maker is ready (plugged in and has water)
    symbol ready= plugged(coffee_maker) and has_water(coffee_maker)
    return ready

behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)
        # Place the cup on the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and is_coffee_maker_ready(coffee_maker)

        prepare_coffee(cup, coffee_maker)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2065_around_dishwasher_129(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(coffee_filter,dishwasher_instance)
        else:
            exp(coffee_filter,dishwasher_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,dishwasher_instance]=True
        close[dishwasher_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee_maker(coffee_maker: item):
    body:
        achieve plugged(coffee_maker)
        achieve has_water(coffee_maker)
        achieve is_on(coffee_maker)

behavior position_cup_on_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve_once on(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130

        bind cup: item where:
            is_cup(cup) and id[cup] == 2132

        prepare_coffee_maker(coffee_maker)
        position_cup_on_coffee_maker(cup, coffee_maker)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make a cup of coffee using the coffee maker." ?
Answer: Put a suitably sized cup into the coffee machine and start it.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2065_around_sink_120(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(coffee_filter,sink_instance)
        else:
            exp(coffee_filter,sink_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,sink_instance]=True
        close[sink_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_coffee_maker_prepared(coffee_maker: item):
    body:
        if not has_water(coffee_maker):
            achieve has_water(coffee_maker)

        if not plugged(coffee_maker):
            achieve plugged(coffee_maker)
        
behavior prepare_cup_for_coffee(cup: item, coffee_maker: item):
    body:
        achieve_once on(cup, coffee_maker)

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve_once is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup)

        ensure_coffee_maker_prepared(coffee_maker)
        prepare_cup_for_coffee(cup, coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_dishwasher_129(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(coffee_filter,dishwasher_instance)
        else:
            exp(coffee_filter,dishwasher_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,dishwasher_instance]=True
        close[dishwasher_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_coffee_maker_ready(coffee_maker:item):
    body:
        if not has_water(coffee_maker) or not plugged(coffee_maker) or not is_on(coffee_maker):
            observe(coffee_maker,"Check if the coffee maker is ready with water, plugged in and on")

behavior place_cup_on_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup) and on(cup, coffee_maker)

        ensure_coffee_maker_ready(coffee_maker)
        place_cup_on_coffee_maker(cup, coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior ensure_coffee_maker_ready(coffee_maker:item):
    body:
        if not has_water(coffee_maker) or not plugged(coffee_maker) or not is_on(coffee_maker):
            observe(coffee_maker,"Check if the coffee maker is ready with water, plugged in and on")

behavior place_cup_on_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup) and on(cup, coffee_maker)

        ensure_coffee_maker_ready(coffee_maker)
        place_cup_on_coffee_maker(cup, coffee_maker)
        start_coffee_maker(coffee_maker)

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_130)open_executor(coffe_maker_130)obs(coffe_maker_130, Check if the coffee maker is ready with water, plugged in and on)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
switchoff_executor(coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_130)
Robot find: coffee_filter_2065, Robot is close to the cup_2132. Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is opened. 
##############################
From agent.py
obs(coffe_maker_130, Check if the coffee maker is ready with water, plugged in and on)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffe_maker_130 is close to cup_2132. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. cup_2132 is on coffe_maker_130. coffe_maker_130 is OFF. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN. coffe_maker_130 is PLUGGED_IN.
##############################
From agent.py
close_executor(coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure the coffee maker is filled with water. The sub-task requires checking if the coffee maker has water, and this was not confirmed in the actions performed.
##############################
From agent.py
Human Instruction: The robot needs to ensure the coffee maker is filled with water. The sub-task requires checking if the coffee maker has water, and this was not confirmed in the actions performed.

Human Guidance: Put a suitably sized cup into the coffee machine and start it.
The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.
Action 3: Walk to kitchen_counter_119.
Action 4: look for cup_2132 around kitchen_counter_119.
Action 5: Walk to cupboard_117.
Action 6: look for cup_2132 around cupboard_117.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for cup_2132 around cupboard_118.
Action 10: Walk to kitchen_counter_123.
Action 11: look for cup_2132 around kitchen_counter_123.
Action 12: Walk to microwave_135.
Action 13: Open microwave_135.
Action 14: look for cup_2132 around microwave_135.
Action 15: Walk to bowl_2142.
Action 16: look for cup_2132 around bowl_2142.
Action 17: Walk to table_114.
Action 18: look for cup_2132 around table_114.
Action 19: Walk to cup_2132.
Action 20: Grab cup_2132.
Action 21: Walk to coffe_maker_130.
Action 22: Put cup_2132 on coffe_maker_130.
Action 23: Switch off coffe_maker_130.
Action 24: Open coffe_maker_130.
Action 25: Invalid parameter input.
Action 26: Close coffe_maker_130.
Action 27: Switch on coffe_maker_130.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_sink_120(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(measuring_cup,sink_instance)
        else:
            exp(measuring_cup,sink_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,sink_instance]=True
        close[sink_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_cup_on_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)

behavior ensure_water_in_coffee_maker(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind cup: item where:
            is_cup(cup)
        ensure_water_in_coffee_maker(coffee_maker)
        place_cup_on_coffee_maker(cup, coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_sink_120(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(measuring_cup,sink_instance)
        else:
            exp(measuring_cup,sink_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,sink_instance]=True
        close[sink_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior check_and_fill_water(coffee_maker:item):
    body:
        if not has_water(coffee_maker):
            observe(coffee_maker, "Check if coffee maker needs water")

behavior place_cup_on_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup)

        check_and_fill_water(coffee_maker)
        place_cup_on_coffee_maker(cup, coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior check_and_fill_water(coffee_maker:item):
    body:
        if not has_water(coffee_maker):
            observe(coffee_maker, "Check if coffee maker needs water")

behavior place_cup_on_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup)

        check_and_fill_water(coffee_maker)
        place_cup_on_coffee_maker(cup, coffee_maker)
        start_coffee_maker(coffee_maker)

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_130)open_executor(coffe_maker_130)obs(coffe_maker_130, Check if coffee maker needs water)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
switchoff_executor(coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffee_filter_2065. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is opened. 
##############################
From agent.py
obs(coffe_maker_130, Check if coffee maker needs water)
Get this information:  coffe_maker_130 is inside dining_room_41. coffe_maker_130 is close to dishwasher_129. coffe_maker_130 is close to trashcan_99. coffe_maker_130 is close to wall_68. coffe_maker_130 is close to toaster_132. coffe_maker_130 is close to microwave_135. coffe_maker_130 is close to walllamp_139. coffe_maker_130 is close to coffee_filter_2065. coffe_maker_130 is close to floor_51. coffe_maker_130 is close to cupboard_118. coffe_maker_130 is close to kitchen_counter_122. coffe_maker_130 is close to ceiling_60. coffe_maker_130 is close to character_240. coffe_maker_130 is close to cup_2132. coffee_filter_2065 is inside coffe_maker_130. coffe_maker_130 is on kitchen_counter_122. cup_2132 is on coffe_maker_130. coffe_maker_130 is PLUGGED_IN. coffe_maker_130 is CLEAN. coffe_maker_130 is OPEN. coffe_maker_130 is OFF.
##############################
From agent.py
close_executor(coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure the coffee maker has water, which has not been verified. Then, place the cup securely in the coffee maker, close it, and switch the coffee maker on to finish making coffee.
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(coffe_maker_130)', 'switchon_executor(coffe_maker_130)', 'walk_executor(kitchen_counter_119)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(kitchen_counter_123)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(bowl_2142)', 'walk_executor(table_114)', 'walk_executor(cup_2132)', 'grab_executor(cup_2132)', 'walk_executor(coffe_maker_130)', 'put_executor(cup_2132, coffe_maker_130)', 'switchoff_executor(coffe_maker_130)', 'open_executor(coffe_maker_130)', 'close_executor(coffe_maker_130)', 'switchon_executor(coffe_maker_130)', 'switchoff_executor(coffe_maker_130)', 'open_executor(coffe_maker_130)', 'close_executor(coffe_maker_130)', 'switchon_executor(coffe_maker_130)']
Time info:
Time consume: 301 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 8
goal generate times: 8
goal correct times: 0
action_num: 23

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
