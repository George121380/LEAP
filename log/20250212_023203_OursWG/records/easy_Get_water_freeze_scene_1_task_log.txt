From agent.py
Reset goals: The sub-goals are: 
['1. Get a cup and fill it with water.', '2. Place the cup in the freezer.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2049_around_kitchen_counter_123(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_measuring_cup_2012_around_kitchen_counter_123(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_cup(cup:item):
    body:
        achieve_once visited(cup)

behavior fill_cup_with_water(cup:item, source:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        foreach cup: item:
            if is_cup(cup) and not visited(cup):
                find_cup(cup)

        bind cup: item where:
            is_cup(cup) and visited(cup)

        bind water_source: item where:
            is_sink(water_source) or is_faucet(water_source)

        fill_cup_with_water(cup, water_source)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_cup(cup:item):
    body:
        achieve_once visited(cup)

behavior fill_cup_with_water(cup:item, source:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        foreach cup: item:
            if is_cup(cup) and not visited(cup):
                find_cup(cup)

        bind cup: item where:
            is_cup(cup) and visited(cup)

        bind water_source: item where:
            is_sink(water_source) or is_faucet(water_source)

        fill_cup_with_water(cup, water_source)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(cup_2132, kitchen_counter_123)walk_executor(cup_2132)obs(cup_2132, look around this place)walk_executor(kitchen_counter_123)exp(cup_2133, kitchen_counter_123)walk_executor(cup_2133)obs(cup_2133, look around this place)walk_executor(kitchen_counter_123)exp(cup_2134, kitchen_counter_123)walk_executor(cup_2134)obs(cup_2134, look around this place)walk_executor(kitchen_counter_123)exp(cup_2049, kitchen_counter_123)walk_executor(cup_2049)obs(cup_2049, look around this place)grab_executor(cup_2049)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_123)
Fail to find cup_2132 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(cup_2132, kitchen_counter_122)walk_executor(cup_2132)obs(cup_2132, look around this place)walk_executor(kitchen_counter_122)exp(cup_2133, kitchen_counter_122)walk_executor(cup_2133)obs(cup_2133, look around this place)walk_executor(kitchen_counter_122)exp(cup_2134, kitchen_counter_122)walk_executor(cup_2134)obs(cup_2134, look around this place)walk_executor(kitchen_counter_122)exp(cup_2049, kitchen_counter_122)walk_executor(cup_2049)obs(cup_2049, look around this place)grab_executor(cup_2049)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_122)
Fail to find cup_2132 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(cup_2132, cupboard_117)walk_executor(cup_2132)obs(cup_2132, look around this place)walk_executor(cupboard_117)exp(cup_2133, cupboard_117)walk_executor(cup_2133)obs(cup_2133, look around this place)walk_executor(cupboard_117)exp(cup_2134, cupboard_117)walk_executor(cup_2134)obs(cup_2134, look around this place)walk_executor(cupboard_117)exp(cup_2049, cupboard_117)walk_executor(cup_2049)obs(cup_2049, look around this place)grab_executor(cup_2049)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(cup_2132, cupboard_117)
Fail to find cup_2132 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(cup_2132, cupboard_118)walk_executor(cup_2132)obs(cup_2132, look around this place)walk_executor(cupboard_118)exp(cup_2133, cupboard_118)walk_executor(cup_2133)obs(cup_2133, look around this place)walk_executor(cupboard_118)exp(cup_2134, cupboard_118)walk_executor(cup_2134)obs(cup_2134, look around this place)walk_executor(cupboard_118)exp(cup_2049, cupboard_118)walk_executor(cup_2049)obs(cup_2049, look around this place)grab_executor(cup_2049)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(cup_2132, cupboard_118)
Fail to find cup_2132 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(cup_2132, kitchen_counter_119)walk_executor(cup_2132)obs(cup_2132, look around this place)walk_executor(kitchen_counter_119)exp(cup_2133, kitchen_counter_119)walk_executor(cup_2133)obs(cup_2133, look around this place)walk_executor(kitchen_counter_119)exp(cup_2134, kitchen_counter_119)walk_executor(cup_2134)obs(cup_2134, look around this place)walk_executor(kitchen_counter_119)exp(cup_2049, kitchen_counter_119)walk_executor(cup_2049)obs(cup_2049, look around this place)grab_executor(cup_2049)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_119)
Fail to find cup_2132 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)exp(cup_2132, faucet_20)walk_executor(cup_2132)obs(cup_2132, look around this place)walk_executor(faucet_20)exp(cup_2133, faucet_20)walk_executor(cup_2133)obs(cup_2133, look around this place)walk_executor(faucet_20)exp(cup_2134, faucet_20)walk_executor(cup_2134)obs(cup_2134, look around this place)walk_executor(faucet_20)exp(cup_2049, faucet_20)walk_executor(cup_2049)obs(cup_2049, look around this place)grab_executor(cup_2049)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2132 ?
Answer: Head to dining_room_41 and locate table_114. Cup_2132 is situated on top of table_114.
Re-decompose: None

##############################
From agent.py
Human Instruction: Head to dining_room_41 and locate table_114. Cup_2132 is situated on top of table_114.

The actions you have taken:
Action 1: Walk to kitchen_counter_123.
Action 2: look for cup_2132 around kitchen_counter_123.
Action 3: Walk to kitchen_counter_122.
Action 4: look for cup_2132 around kitchen_counter_122.
Action 5: Walk to cupboard_117.
Action 6: look for cup_2132 around cupboard_117.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for cup_2132 around cupboard_118.
Action 10: Walk to kitchen_counter_119.
Action 11: look for cup_2132 around kitchen_counter_119.
Action 12: Walk to faucet_20.

##############################
From agent.py
exp(cup_2132, faucet_20)
Fail to find cup_2132 around faucet_20. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2132, table_114)walk_executor(cup_2132)obs(cup_2132, look around this place)walk_executor(table_114)exp(cup_2133, table_114)walk_executor(cup_2133)obs(cup_2133, look around this place)walk_executor(table_114)exp(cup_2134, table_114)walk_executor(cup_2134)obs(cup_2134, look around this place)walk_executor(table_114)exp(cup_2049, table_114)walk_executor(cup_2049)obs(cup_2049, look around this place)grab_executor(cup_2049)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(cup_2132, table_114)
Find cup_2132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2132)obs(cup_2132, look around this place)walk_executor(cup_2133)obs(cup_2133, look around this place)walk_executor(cup_2134)obs(cup_2134, look around this place)walk_executor(cup_2049)obs(cup_2049, look around this place)grab_executor(cup_2049)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
obs(cup_2132, look around this place)
Get this information:  cup_2132 is inside dining_room_41. cup_2132 is close to table_114. cup_2132 is close to character_240. cup_2132 is on table_114.
##############################
From agent.py
walk_executor(cup_2133)
Robot find: Robot is close to the table_114. Robot is close to the cup_2133. 
##############################
From agent.py
obs(cup_2133, look around this place)
Get this information:  cup_2133 is inside dining_room_41. cup_2133 is close to table_114. cup_2133 is close to character_240. cup_2133 is on table_114.
##############################
From agent.py
walk_executor(cup_2134)
Robot find: Robot is close to the table_114. Robot is close to the cup_2134. 
##############################
From agent.py
obs(cup_2134, look around this place)
Get this information:  cup_2134 is close to table_114. cup_2134 is close to character_240. cup_2134 is on table_114. cup_2134 is inside dining_room_41.
##############################
From agent.py
walk_executor(cup_2049)
Robot find: Robot is close to the table_114. Robot is close to the cup_2049. 
##############################
From agent.py
obs(cup_2049, look around this place)
Get this information:  cup_2049 is close to table_114. cup_2049 is close to character_240. cup_2049 is on table_114. cup_2049 is inside dining_room_41. cup_2049 is DIRTY.
##############################
From agent.py
grab_executor(cup_2049)
Robot find: Robot is close to the table_114. Robot is close to the cup_2049. Grabbing cup_2049 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the cup_2049. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the cup_2049. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the cup_2049. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill the cup with water. Although it has turned the faucet on and off, there is no action recorded where the cup (cup_2049) was actually filled with water. The robot should fill cup_2049 with water before moving on to place it in the freezer.
##############################
From agent.py
Human Instruction: The robot needs to fill the cup with water. Although it has turned the faucet on and off, there is no action recorded where the cup (cup_2049) was actually filled with water. The robot should fill cup_2049 with water before moving on to place it in the freezer.

The actions you have taken:
Action 1: Walk to kitchen_counter_123.
Action 2: look for cup_2132 around kitchen_counter_123.
Action 3: Walk to kitchen_counter_122.
Action 4: look for cup_2132 around kitchen_counter_122.
Action 5: Walk to cupboard_117.
Action 6: look for cup_2132 around cupboard_117.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for cup_2132 around cupboard_118.
Action 10: Walk to kitchen_counter_119.
Action 11: look for cup_2132 around kitchen_counter_119.
Action 12: Walk to faucet_20.
Action 13: look for cup_2132 around faucet_20.
Action 14: Walk to table_114.
Action 15: look for cup_2132 around table_114.
Action 16: Walk to cup_2132.
Action 17: Observe around cup_2132 with the question of look around this place.
Action 18: Walk to cup_2133.
Action 19: Observe around cup_2133 with the question of look around this place.
Action 20: Walk to cup_2134.
Action 21: Observe around cup_2134 with the question of look around this place.
Action 22: Walk to cup_2049.
Action 23: Observe around cup_2049 with the question of look around this place.
Action 24: Grab cup_2049.
Action 25: Walk to faucet_20.
Action 26: Switch on faucet_20.
Action 27: Switch off faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laser_pointer_2034_around_filing_cabinet_200(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==200
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(laser_pointer,filing_cabinet_instance)
        else:
            exp(laser_pointer,filing_cabinet_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,filing_cabinet_instance]=True
        close[filing_cabinet_instance,laser_pointer]=True
    

#exp_behavior_end

#goal_representation

behavior find_cup(cup:item):
    body:
        achieve_once visited(cup)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve has_water(cup)

behavior __goal__():
    body:
        foreach cup: item:
            if is_cup(cup) and not visited(cup):
                find_cup(cup)

        bind cup: item where:
            is_cup(cup) and visited(cup)

        bind faucet: item where:
            is_faucet(faucet)

        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_photoframe_219(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==219
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(measuring_cup,photoframe_instance)
        else:
            exp(measuring_cup,photoframe_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,photoframe_instance]=True
        close[photoframe_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_cup(cup:item):
    body:
        achieve_once visited(cup)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_close_char(char, faucet)
        achieve_once inhand(cup)
        achieve is_on(faucet)
        achieve has_water(cup)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        foreach cup: item:
            if is_cup(cup) and not visited(cup) and id[cup] == 2049:
                find_cup(cup)

        bind cup: item where:
            is_cup(cup) and visited(cup) and id[cup] == 2049

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20

        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_close_char not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_laser_pointer_2034_around_bookshelf_124(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(laser_pointer,bookshelf_instance)
        else:
            exp(laser_pointer,bookshelf_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,bookshelf_instance]=True
        close[bookshelf_instance,laser_pointer]=True
    

#goal_representation

behavior find_cup(cup:item):
    body:
        achieve_once visited(cup)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve_once inhand(cup)
        achieve is_on(faucet)
        achieve has_water(cup)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        foreach cup: item:
            if is_cup(cup) and not visited(cup) and id[cup] == 2049:
                find_cup(cup)

        bind cup: item where:
            is_cup(cup) and visited(cup) and id[cup] == 2049

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20

        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_laser_pointer_2034_around_tvstand_116(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(laser_pointer,tvstand_instance)
        else:
            exp(laser_pointer,tvstand_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,tvstand_instance]=True
        close[tvstand_instance,laser_pointer]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2049
        # Select the specific cup with ID 2049
        fill_cup_with_water(cup)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. get a cup and fill it with water." ?
Answer: Grab a cup and get close to a faucet. Then turn on the faucet to fill the cup with water.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laser_pointer_2034_around_tvstand_116(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(laser_pointer,tvstand_instance)
        else:
            exp(laser_pointer,tvstand_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,tvstand_instance]=True
        close[tvstand_instance,laser_pointer]=True
    

behavior find_pencil_2014_around_bookshelf_124(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pencil,bookshelf_instance)
        else:
            exp(pencil,bookshelf_instance)
    eff:
        unknown[pencil]=False
        close[pencil,bookshelf_instance]=True
        close[bookshelf_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet) 
        achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2049
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20

        grab_cup(cup)
        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laser_pointer_2034_around_filing_cabinet_200(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==200
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(laser_pointer,filing_cabinet_instance)
        else:
            exp(laser_pointer,filing_cabinet_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,filing_cabinet_instance]=True
        close[filing_cabinet_instance,laser_pointer]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_cup(cup:item):
    body:
        achieve_once visited(cup)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet) # Ensure the character is close to the faucet
        achieve has_water(cup)

behavior __goal__():
    body:
        foreach cup: item:
            if is_cup(cup) and not visited(cup):
                find_cup(cup)

        bind cup: item where:
            is_cup(cup) and visited(cup)

        bind faucet: item where:
            is_faucet(faucet)

        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laser_pointer_2034_around_tvstand_273(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==273
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(laser_pointer,tvstand_instance)
        else:
            exp(laser_pointer,tvstand_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,tvstand_instance]=True
        close[tvstand_instance,laser_pointer]=True
    

behavior find_food_pizza_2106_around_fridge_126(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet) # Move the character closer to the faucet
        achieve is_on(faucet)  # Ensure the faucet is on for water flow
        achieve has_water(cup)  # Fill the cup with water
        achieve is_off(faucet)  # Once the cup is filled, turn the faucet off to save water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2049
        # Select the specific cup with ID 2049

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the specific faucet with ID 20

        grab_cup(cup)
        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Grab a cup and get close to a faucet.', '2. Turn on the faucet to fill the cup with water.', '3. Place the cup of water in the freezer.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_steak_2080_around_fridge_126(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_ice_2024_around_fridge_126(ice:item):
    goal: not unknown(ice)
    body:
        assert is_ice(ice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(ice,fridge_instance)
        else:
            exp(ice,fridge_instance)
    eff:
        unknown[ice]=False
        close[ice,fridge_instance]=True
        close[fridge_instance,ice]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_grab_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior turn_on_faucet(faucet:item):
    body:
        achieve is_on(faucet)

behavior turn_off_faucet(faucet:item):
    body:
        achieve is_off(faucet)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        turn_off_faucet(faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2049
        # Select cup with ID 2049

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        find_and_grab_cup(cup)
        turn_on_faucet(faucet)
        fill_cup_with_water(cup, faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_laser_pointer_2034_around_tvstand_116(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(laser_pointer,tvstand_instance)
        else:
            exp(laser_pointer,tvstand_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,tvstand_instance]=True
        close[tvstand_instance,laser_pointer]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior move_to_faucet(faucet:item):
    body:
        achieve close_char(char, faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2049
        # Select the cup with ID 2049

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the faucet with ID 20

        grab_cup(cup)
        move_to_faucet(faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_sink_19(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(measuring_cup,sink_instance)
        else:
            exp(measuring_cup,sink_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,sink_instance]=True
        close[sink_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_grab_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior move_close_to_faucet(faucet:item):
    body:
        achieve close_char(char, faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2049
        # Select the specific cup with ID 2049

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the specific faucet with ID 20

        find_and_grab_cup(cup)
        move_close_to_faucet(faucet)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. grab a cup and get close to a faucet." ?
Answer: Grab a cup and get close to a faucet.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_bathroom_cabinet_17(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(measuring_cup,bathroom_cabinet_instance)
        else:
            exp(measuring_cup,bathroom_cabinet_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2049
        # Select cup with ID 2049

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20
        # Select faucet with ID 20

        achieve_once close_char(char, faucet)
        # Ensure the character is close to the faucet


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_bathroom_cabinet_17(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(measuring_cup,bathroom_cabinet_instance)
        else:
            exp(measuring_cup,bathroom_cabinet_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior approach_faucet(faucet:item):
    body:
        achieve_once close_char(char, faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2049
        # Select cup_2049

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select faucet_20

        grab_cup(cup)
        approach_faucet(faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laser_pointer_2034_around_bookshelf_124(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(laser_pointer,bookshelf_instance)
        else:
            exp(laser_pointer,bookshelf_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,bookshelf_instance]=True
        close[bookshelf_instance,laser_pointer]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_cup_and_move_to_faucet(cup:item, faucet:item):
    body:
        achieve_once inhand(cup)
        achieve_once close_char(char, faucet)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2049
        # Select the specific cup with ID 2049
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Select the specific faucet with ID 20

        grab_cup_and_move_to_faucet(cup, faucet)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Grab a cup.', '2. Go to a faucet and fill the cup with water.', '3. Place the cup of water in the freezer.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2020_around_bookshelf_124(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pencil,bookshelf_instance)
        else:
            exp(pencil,bookshelf_instance)
    eff:
        unknown[pencil]=False
        close[pencil,bookshelf_instance]=True
        close[bookshelf_instance,pencil]=True
    

behavior find_measuring_cup_2012_around_bathroom_cabinet_17(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(measuring_cup,bathroom_cabinet_instance)
        else:
            exp(measuring_cup,bathroom_cabinet_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2049
        # Select the cup with ID 2049

        grab_cup(cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laser_pointer_2034_around_tvstand_116(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(laser_pointer,tvstand_instance)
        else:
            exp(laser_pointer,tvstand_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,tvstand_instance]=True
        close[tvstand_instance,laser_pointer]=True
    

behavior find_pencil_2014_around_bookshelf_124(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pencil,bookshelf_instance)
        else:
            exp(pencil,bookshelf_instance)
    eff:
        unknown[pencil]=False
        close[pencil,bookshelf_instance]=True
        close[bookshelf_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2049
        # Select the specific cup with ID 2049

        grab_cup(cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laser_pointer_2034_around_tvstand_116(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(laser_pointer,tvstand_instance)
        else:
            exp(laser_pointer,tvstand_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,tvstand_instance]=True
        close[tvstand_instance,laser_pointer]=True
    

behavior find_pencil_2020_around_bookshelf_124(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pencil,bookshelf_instance)
        else:
            exp(pencil,bookshelf_instance)
    eff:
        unknown[pencil]=False
        close[pencil,bookshelf_instance]=True
        close[bookshelf_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_cup(cup:item):
    body:
        achieve_once inhand(cup)
 
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2049
        grab_cup(cup)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. grab a cup." ?
Answer: To grab a cup, approach the area where the cups are stored, and use your gripper to securely hold a cup.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2155_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_soap_2126_around_shower_21(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==21
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_grab_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior filling_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, cup)
        achieve close_char(char, faucet)
        achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2049
        # Select the specific cup with ID 2049

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        find_and_grab_cup(cup)
        filling_cup_with_water(cup, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laser_pointer_2034_around_bookshelf_124(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(laser_pointer,bookshelf_instance)
        else:
            exp(laser_pointer,bookshelf_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,bookshelf_instance]=True
        close[bookshelf_instance,laser_pointer]=True
    

behavior find_measuring_cup_2012_around_bathroom_cabinet_17(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(measuring_cup,bathroom_cabinet_instance)
        else:
            exp(measuring_cup,bathroom_cabinet_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_cup(cup:item):
    body:
        achieve_once visited(cup)

behavior grab_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior __goal__():
    body:
        foreach cup: item:
            if is_cup(cup) and not visited(cup):
                find_cup(cup)

        bind cup: item where:
            is_cup(cup) and id[cup]==2049

        grab_cup(cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_bathroom_cabinet_17(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(measuring_cup,bathroom_cabinet_instance)
        else:
            exp(measuring_cup,bathroom_cabinet_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,measuring_cup]=True
    

behavior find_shoes_2033_around_dresser_274(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

behavior find_tray_128_around_dishwasher_129(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2049
        grab_cup(cup)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Approach the area where the cups are stored and securely hold a cup with your gripper.', '2. Fill the cup with water.', '3. Place the cup filled with water in the freezer.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_fridge_126(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(measuring_cup,fridge_instance)
        else:
            exp(measuring_cup,fridge_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,fridge_instance]=True
        close[fridge_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_cup(cup:item):
    body:
        achieve_once visited(cup)

behavior hold_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior __goal__():
    body:
        foreach cup: item:
            if is_cup(cup) and not visited(cup):
                find_cup(cup)

        bind cup: item where:
            is_cup(cup) and visited(cup)

        hold_cup(cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_bathroom_cabinet_17(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(measuring_cup,bathroom_cabinet_instance)
        else:
            exp(measuring_cup,bathroom_cabinet_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior approach_and_grip_cup(cup:item):
    body:
        achieve_once close_char(char, cup)
        achieve_once inhand(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2049
        # Select cup with ID 2049
        approach_and_grip_cup(cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laser_pointer_2034_around_bookshelf_124(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(laser_pointer,bookshelf_instance)
        else:
            exp(laser_pointer,bookshelf_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,bookshelf_instance]=True
        close[bookshelf_instance,laser_pointer]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_close_to_cup_storage(cup_storage:item):
    body:
        achieve_once close_char(char, cup_storage)

behavior grab_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior __goal__():
    body:
        bind cup_storage: item where:
            is_cupboard(cup_storage) or is_kitchen_counter(cup_storage) or is_table(cup_storage)
        # Select an area where cups might be stored

        bind cup: item where:
            is_cup(cup) and not visited(cup)
        # Select a cup that hasnt been visited yet

        move_close_to_cup_storage(cup_storage)
        observe(cup_storage, "Look for cups in this area")
        grab_cup(cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Approach the area where the cups are stored and pick up a cup using your gripper.', '2. Fill the cup with water.', '3. Place the cup of water in the freezer.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_stove_2135(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(measuring_cup,stove_instance)
        else:
            exp(measuring_cup,stove_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,stove_instance]=True
        close[stove_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior approach_cup(cup:item):
    body:
        achieve_once close_char(char, cup)

behavior grab_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2049
        approach_cup(cup)
        grab_cup(cup)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_bathroom_cabinet_17(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(measuring_cup,bathroom_cabinet_instance)
        else:
            exp(measuring_cup,bathroom_cabinet_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_and_grab_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2049
        # Select the cup with ID 2049

        locate_and_grab_cup(cup)
        # Grab the cup using gripper

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_measuring_cup_2012_around_bathroom_cabinet_17(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(measuring_cup,bathroom_cabinet_instance)
        else:
            exp(measuring_cup,bathroom_cabinet_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior approach_cup_area_and_pick_up(cup:item):
    body:
        achieve_once close_char(char, cup)
        achieve_once inhand(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2049
        approach_cup_area_and_pick_up(cup)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Get a cup of water and freeze it.
Action History:
['walk_executor(kitchen_counter_123)', 'walk_executor(kitchen_counter_122)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(kitchen_counter_119)', 'walk_executor(faucet_20)', 'walk_executor(table_114)', 'walk_executor(cup_2132)', 'walk_executor(cup_2133)', 'walk_executor(cup_2134)', 'walk_executor(cup_2049)', 'grab_executor(cup_2049)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)']
Time info:
Time consume: 385 seconds
Exp_helper query times: 1
Guidance query times: 3
library scale: 8
goal generate times: 25
goal correct times: 0
action_num: 16

Task complete rate:
Keystate: k1 - Requires: 4 steps
Action Completion Rate: 0.0
Scene_id: 1
##############################
