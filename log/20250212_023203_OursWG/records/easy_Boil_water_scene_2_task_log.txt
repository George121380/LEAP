From agent.py
Reset goals: The sub-goals are: 
['Use a pot to boil some water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_cd_player_2084_around_bookshelf_372(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(cd_player,bookshelf_instance)
        else:
            exp(cd_player,bookshelf_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,bookshelf_instance]=True
        close[bookshelf_instance,cd_player]=True
    

behavior find_stamp_2031_around_powersocket_48(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==48
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(stamp,powersocket_instance)
        else:
            exp(stamp,powersocket_instance)
    eff:
        unknown[stamp]=False
        close[stamp,powersocket_instance]=True
        close[powersocket_instance,stamp]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_water(pot:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove to boil the water in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select an item that is a pot

        bind stove: item where:
            is_stove(stove)
        # Select an item that is a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select an item that is a faucet

        fill_pot_with_water(pot, faucet)
        boil_water(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior boil_water(pot:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove to boil the water in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select an item that is a pot

        bind stove: item where:
            is_stove(stove)
        # Select an item that is a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select an item that is a faucet

        fill_pot_with_water(pot, faucet)
        boil_water(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(pot_2093, cupboard_130)walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(pot_2093, cupboard_130)
Fail to find pot_2093 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water. You have not turned on the faucet to fill the pot before boiling the water.
##############################
From agent.py
Human Instruction: You need to fill the pot with water. You have not turned on the faucet to fill the pot before boiling the water.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_2093 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Grab pot_54.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to stove_2090.
Action 9: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_wallshelf_191(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(cup,wallshelf_instance)
        else:
            exp(cup,wallshelf_instance)
    eff:
        unknown[cup]=False
        close[cup,wallshelf_instance]=True
        close[wallshelf_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior start_boiling(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the pot with ID 54
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        fill_pot(pot, faucet)
        start_boiling(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior start_boiling(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the pot with ID 54
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        fill_pot(pot, faucet)
        start_boiling(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water. Currently, the pot has not been filled, as no faucet has been turned on to allow for this. To complete the task, ensure the pot is filled with water before boiling.
##############################
From agent.py
Human Instruction: You need to fill the pot with water. Currently, the pot has not been filled, as no faucet has been turned on to allow for this. To complete the task, ensure the pot is filled with water before boiling.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_2093 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Grab pot_54.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to stove_2090.
Action 9: Switch on stove_2090.
Action 10: Walk to faucet_308.
Action 11: Switch off faucet_308.
Action 12: Walk to stove_2090.
Action 13: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2084_around_wallshelf_190(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(cd_player,wallshelf_instance)
        else:
            exp(cd_player,wallshelf_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,wallshelf_instance]=True
        close[wallshelf_instance,cd_player]=True
    

behavior find_stamp_2031_around_bookshelf_189(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(stamp,bookshelf_instance)
        else:
            exp(stamp,bookshelf_instance)
    eff:
        unknown[stamp]=False
        close[stamp,bookshelf_instance]=True
        close[bookshelf_instance,stamp]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once inside(faucet, faucet) # Simulating getting water from the faucet
        achieve has_water(pot) # Ensure the pot is filled with water

behavior boil_water(stove:item, pot:item):
    body:
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        fill_pot_with_water(pot, faucet)
        boil_water(stove, pot)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2084_around_bookshelf_372(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(cd_player,bookshelf_instance)
        else:
            exp(cd_player,bookshelf_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,bookshelf_instance]=True
        close[bookshelf_instance,cd_player]=True
    

behavior find_stamp_2031_around_bookshelf_137(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(stamp,bookshelf_instance)
        else:
            exp(stamp,bookshelf_instance)
    eff:
        unknown[stamp]=False
        close[stamp,bookshelf_instance]=True
        close[bookshelf_instance,stamp]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior boil_water_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Ensure the pot is placed on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior locate_working_faucet(faucet:item):
    body:
        if is_off(faucet):
            achieve_once is_on(faucet)
        # Ensure the faucet is turned on if it is off

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet) and is_off(faucet)
        # Select a turnedoff faucet

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        locate_working_faucet(faucet)
        fill_pot_with_water(pot, faucet)
        boil_water_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water

behavior boil_water_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Ensure the pot is placed on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior locate_working_faucet(faucet:item):
    body:
        if is_off(faucet):
            achieve_once is_on(faucet)
        # Ensure the faucet is turned on if it is off

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet) and is_off(faucet)
        # Select a turnedoff faucet

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        locate_working_faucet(faucet)
        fill_pot_with_water(pot, faucet)
        boil_water_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)walk_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the stove_2090. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the pot with water before considering it boiled on the stove. Ensure the pot is filled with water by placing it under a faucet while it is turned on, then place the pot back on the stove to proceed with boiling the water.
##############################
Task Summary:
Task Goal:
Use pot to boil some water.
Action History:
['walk_executor(cupboard_130)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'walk_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)']
Time info:
Time consume: 522 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 0
action_num: 20

Task complete rate:
Keystate: k1 - Requires: 6 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
