From agent.py
Reset goals: The sub-goals are: 
['Boil some noodles with chicken.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2101_around_cupboard_117(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_noodles,cupboard_instance)
        else:
            exp(food_noodles,cupboard_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,cupboard_instance]=True
        close[cupboard_instance,food_noodles]=True
    

behavior find_clothes_jacket_2119_around_basket_for_clothes_2078(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_jacket,basket_for_clothes_instance)
        else:
            exp(clothes_jacket,basket_for_clothes_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_jacket]=True
    

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once open(faucet)
        achieve has_water(pot)
        achieve_once closed(faucet)

behavior add_ingredients_to_pot(pot:item, food1:item, food2:item):
    body:
        achieve_once inside(food1, pot)
        achieve_once inside(food2, pot)

behavior boil_pot(pot:item, stove:item):
    body:
        achieve plugged(stove)
        achieve is_on(stove)
        achieve_once has_water(pot) # Ensure pot has water while boiling

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Selecting the stove for boiling
        bind pot: item where:
            is_pot(pot)
        # Selecting a pot for boiling noodles and chicken
        bind noodles: item where:
            is_dry_pasta(noodles) and is_food_noodles(noodles)
        # Selecting noodles as food item
        bind chicken: item where:
            is_food_chicken(chicken)
        # Selecting chicken
        bind faucet: item where:
            is_faucet(faucet)
        # Selecting a faucet to fill the pot with water
        
        fill_pot_with_water(pot, faucet)
        add_ingredients_to_pot(pot, noodles, chicken)
        boil_pot(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2101_around_kitchen_counter_123(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_noodles,kitchen_counter_instance)
        else:
            exp(food_noodles,kitchen_counter_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_noodles]=True
    

behavior find_clothes_jacket_2119_around_bed_197(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_jacket,bed_instance)
        else:
            exp(clothes_jacket,bed_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,bed_instance]=True
        close[bed_instance,clothes_jacket]=True
    

behavior find_pot_2040_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior boil_noodles_and_chicken(pot:item, stove:item, chicken:item, noodles:item):
    body:
        achieve plugged(stove)
        achieve is_on(stove)
        achieve inside(chicken, pot)
        achieve inside(noodles, pot)
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind noodles: item where:
            is_food_noodles(noodles)
        fill_with_water(pot)
        boil_noodles_and_chicken(pot, stove, chicken, noodles)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2101_around_cupboard_117(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_noodles,cupboard_instance)
        else:
            exp(food_noodles,cupboard_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,cupboard_instance]=True
        close[cupboard_instance,food_noodles]=True
    

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def contains_noodles_or_chicken(pot:item):
    # Function to check if there are noodles or chicken inside the pot
    symbol has_noodles_or_chicken= exists o: item : ((is_food_noodles(o) or is_food_chicken(o)) and inside(o, pot))
    return has_noodles_or_chicken

behavior __goal__():
    body:
        if exists pot: item : (is_pot(pot) and contains_noodles_or_chicken(pot)):
            # If a pot with noodles or chicken is already identified, approach it
            bind pot: item where:
                is_pot(pot) and contains_noodles_or_chicken(pot)
            achieve close_char(char, pot)

        else:
            # Check all unvisited pots to find noodles or chicken
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot,"Check if there are noodles or chicken in the pot")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def contains_noodles_or_chicken(pot:item):
    # Function to check if there are noodles or chicken inside the pot
    symbol has_noodles_or_chicken= exists o: item : ((is_food_noodles(o) or is_food_chicken(o)) and inside(o, pot))
    return has_noodles_or_chicken

behavior __goal__():
    body:
        if exists pot: item : (is_pot(pot) and contains_noodles_or_chicken(pot)):
            # If a pot with noodles or chicken is already identified, approach it
            bind pot: item where:
                is_pot(pot) and contains_noodles_or_chicken(pot)
            achieve close_char(char, pot)

        else:
            # Check all unvisited pots to find noodles or chicken
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot,"Check if there are noodles or chicken in the pot")

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(pot_2138, kitchen_counter_122)walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Check if there are noodles or chicken in the pot)walk_executor(kitchen_counter_122)exp(pot_78, kitchen_counter_122)walk_executor(pot_78)open_executor(pot_78)obs(pot_78, Check if there are noodles or chicken in the pot)walk_executor(kitchen_counter_122)exp(pot_2040, kitchen_counter_122)walk_executor(pot_2040)open_executor(pot_2040)obs(pot_2040, Check if there are noodles or chicken in the pot)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(pot_2138, kitchen_counter_122)
Fail to find pot_2138 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(pot_2138, cupboard_117)walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Check if there are noodles or chicken in the pot)walk_executor(pot_78)obs(pot_78, Check if there are noodles or chicken in the pot)walk_executor(cupboard_117)exp(pot_2040, cupboard_117)walk_executor(pot_2040)open_executor(pot_2040)obs(pot_2040, Check if there are noodles or chicken in the pot)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(pot_2138, cupboard_117)
Fail to find pot_2138 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(pot_2138, cupboard_118)walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Check if there are noodles or chicken in the pot)walk_executor(pot_78)obs(pot_78, Check if there are noodles or chicken in the pot)walk_executor(cupboard_118)exp(pot_2040, cupboard_118)walk_executor(pot_2040)open_executor(pot_2040)obs(pot_2040, Check if there are noodles or chicken in the pot)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(pot_2138, cupboard_118)
Fail to find pot_2138 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(pot_2138, kitchen_counter_123)walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Check if there are noodles or chicken in the pot)walk_executor(pot_78)obs(pot_78, Check if there are noodles or chicken in the pot)walk_executor(kitchen_counter_123)exp(pot_2040, kitchen_counter_123)walk_executor(pot_2040)open_executor(pot_2040)obs(pot_2040, Check if there are noodles or chicken in the pot)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(pot_2138, kitchen_counter_123)
Fail to find pot_2138 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(pot_2138, stove_2135)walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Check if there are noodles or chicken in the pot)walk_executor(pot_78)obs(pot_78, Check if there are noodles or chicken in the pot)walk_executor(stove_2135)exp(pot_2040, stove_2135)walk_executor(pot_2040)open_executor(pot_2040)obs(pot_2040, Check if there are noodles or chicken in the pot)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(pot_2138, stove_2135)
Find pot_2138. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Check if there are noodles or chicken in the pot)walk_executor(pot_78)obs(pot_78, Check if there are noodles or chicken in the pot)walk_executor(stove_2135)exp(pot_2040, stove_2135)walk_executor(pot_2040)open_executor(pot_2040)obs(pot_2040, Check if there are noodles or chicken in the pot)
##############################
From agent.py
walk_executor(pot_2138)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the pot_2138. 
##############################
From agent.py
open_executor(pot_2138)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the pot_2138. pot_2138 is opened. 
##############################
From agent.py
obs(pot_2138, Check if there are noodles or chicken in the pot)
Get this information:  pot_2138 is inside dining_room_41. pot_2138 is close to kitchen_counter_119. pot_2138 is close to character_240. pot_2138 is on kitchen_counter_119. pot_2138 is OPEN.
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
obs(pot_78, Check if there are noodles or chicken in the pot)
Get this information:  pot_78 is close to tray_128. pot_78 is close to wall_64. pot_78 is close to wall_67. pot_78 is close to toaster_132. pot_78 is close to wall_68. pot_78 is close to knifeblock_76. pot_78 is close to walllamp_141. pot_78 is close to floor_46. pot_78 is close to cupboard_117. pot_78 is close to cupboard_118. pot_78 is close to kitchen_counter_119. pot_78 is close to ceiling_55. pot_78 is close to kitchen_counter_122. pot_78 is close to sink_120. pot_78 is close to stovefan_125. pot_78 is close to oven_127. pot_78 is close to character_240. pot_78 is on oven_127. pot_78 is inside dining_room_41. pot_78 is OPEN. pot_78 is CLEAN.
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
exp(pot_2040, stove_2135)
Fail to find pot_2040 around stove_2135. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_270)exp(pot_2040, table_270)walk_executor(pot_2040)open_executor(pot_2040)obs(pot_2040, Check if there are noodles or chicken in the pot)
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find pot_2040 ?
Answer: Go to the dining_room_41. Inside the dining room, locate microwave_135. The pot_2040 is inside microwave_135.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the dining_room_41. Inside the dining room, locate microwave_135. The pot_2040 is inside microwave_135.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for pot_2138 around kitchen_counter_122.
Action 3: Walk to cupboard_117.
Action 4: look for pot_2138 around cupboard_117.
Action 5: Walk to cupboard_118.
Action 6: Open cupboard_118.
Action 7: look for pot_2138 around cupboard_118.
Action 8: Walk to kitchen_counter_123.
Action 9: look for pot_2138 around kitchen_counter_123.
Action 10: Walk to stove_2135.
Action 11: Open stove_2135.
Action 12: look for pot_2138 around stove_2135.
Action 13: Walk to pot_2138.
Action 14: Open pot_2138.
Action 15: Observe around pot_2138 with the question of Check if there are noodles or chicken in the pot.
Action 16: Walk to pot_78.
Action 17: Observe around pot_78 with the question of Check if there are noodles or chicken in the pot.
Action 18: Walk to stove_2135.
Action 19: look for pot_2040 around stove_2135.
Action 20: Walk to table_270.

##############################
From agent.py
exp(pot_2040, table_270)
Fail to find pot_2040 around table_270. 
##############################
From agent.py-> find a plan in act()
walk_executor(microwave_135)open_executor(microwave_135)exp(pot_2040, microwave_135)walk_executor(pot_2040)open_executor(pot_2040)obs(pot_2040, Check if there are noodles or chicken in the pot)
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
exp(pot_2040, microwave_135)
Find pot_2040. 
##############################
From agent.py-> find a plan in act()
open_executor(pot_2040)obs(pot_2040, Check if there are noodles or chicken in the pot)
##############################
From agent.py
open_executor(pot_2040)
Robot find: Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. pot_2040 is opened. 
##############################
From agent.py
obs(pot_2040, Check if there are noodles or chicken in the pot)
Get this information:  pot_2040 is inside dining_room_41. pot_2040 is inside microwave_135. pot_2040 is close to microwave_135. pot_2040 is close to character_240. pot_2040 is OPEN. pot_2040 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to identify a pot with noodles or chicken. Continue checking pots until you find one that contains noodles or chicken, as the program logic requires verifying the presence of these ingredients in a pot.
##############################
From agent.py
Human Instruction: You need to identify a pot with noodles or chicken. Continue checking pots until you find one that contains noodles or chicken, as the program logic requires verifying the presence of these ingredients in a pot.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for pot_2138 around kitchen_counter_122.
Action 3: Walk to cupboard_117.
Action 4: look for pot_2138 around cupboard_117.
Action 5: Walk to cupboard_118.
Action 6: Open cupboard_118.
Action 7: look for pot_2138 around cupboard_118.
Action 8: Walk to kitchen_counter_123.
Action 9: look for pot_2138 around kitchen_counter_123.
Action 10: Walk to stove_2135.
Action 11: Open stove_2135.
Action 12: look for pot_2138 around stove_2135.
Action 13: Walk to pot_2138.
Action 14: Open pot_2138.
Action 15: Observe around pot_2138 with the question of Check if there are noodles or chicken in the pot.
Action 16: Walk to pot_78.
Action 17: Observe around pot_78 with the question of Check if there are noodles or chicken in the pot.
Action 18: Walk to stove_2135.
Action 19: look for pot_2040 around stove_2135.
Action 20: Walk to table_270.
Action 21: look for pot_2040 around table_270.
Action 22: Walk to microwave_135.
Action 23: Open microwave_135.
Action 24: look for pot_2040 around microwave_135.
Action 25: Open pot_2040.
Action 26: Observe around pot_2040 with the question of Check if there are noodles or chicken in the pot.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2101_around_food_food_2064(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_noodles,food_food_instance)
        else:
            exp(food_noodles,food_food_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,food_food_instance]=True
        close[food_food_instance,food_noodles]=True
    

behavior find_dry_pasta_2114_around_food_food_2064(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(dry_pasta,food_food_instance)
        else:
            exp(dry_pasta,food_food_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,food_food_instance]=True
        close[food_food_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
behavior check_pot_ingredients(pot:item):
    body:
        achieve open(pot)
        observe(pot, "Check if there are noodles or chicken in the pot")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not visited(pot)
        check_pot_ingredients(pot)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2101_around_bowl_2142(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2142
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_noodles,bowl_instance)
        else:
            exp(food_noodles,bowl_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,bowl_instance]=True
        close[bowl_instance,food_noodles]=True
    

#exp_behavior_end

#goal_representation
 
def has_noodles_or_chicken_in_pot(pot:item):
    # Function to check if there are noodles or chicken in a specified pot
    symbol has_noodles_or_chicken= exists o: item : ((is_food_noodles(o) or is_food_chicken(o)) and inside(o, pot))
    return has_noodles_or_chicken

behavior __goal__():
    body:
        if exists pot: item : (is_pot(pot) and has_noodles_or_chicken_in_pot(pot)):
            # If a pot containing noodles or chicken is already known, move closer to it
            bind pot: item where:
                is_pot(pot) and has_noodles_or_chicken_in_pot(pot)
            achieve close_char(char, pot)

        else:
            # Check all pots that have not been visited
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot,"Check if there are noodles or chicken in the pot")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2101_around_fridge_126(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_noodles,fridge_instance)
        else:
            exp(food_noodles,fridge_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,fridge_instance]=True
        close[fridge_instance,food_noodles]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_steak_2080_around_fridge_126(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def contains_noodles_or_chicken(pot:item):
    # Function to check if there are noodles or chicken in a specified pot
    symbol contains= exists o: item : ((is_food_noodles(o) or is_food_chicken(o)) and inside(o, pot))
    return contains

behavior __goal__():
    body:
        if exists pot: item : (is_pot(pot) and contains_noodles_or_chicken(pot)):
            # Check if there is a pot with noodles or chicken
            bind pot: item where:
                is_pot(pot) and contains_noodles_or_chicken(pot)
            # Approach the pot with noodles or chicken
            achieve close_char(char, pot)

        else:
            # Check all pots in the scene that have not been visited
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot,"Check if there are noodles or chicken in the pot")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2101_around_food_food_2064(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_noodles,food_food_instance)
        else:
            exp(food_noodles,food_food_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,food_food_instance]=True
        close[food_food_instance,food_noodles]=True
    

behavior find_clothes_jacket_2119_around_bed_197(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_jacket,bed_instance)
        else:
            exp(clothes_jacket,bed_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,bed_instance]=True
        close[bed_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
def has_noodles_or_chicken(pot:item):
    # Function to check if there are noodles or chicken in the specified pot
    symbol has_noodles_or_chicken= exists o: item : ((is_food_noodles(o) or is_food_chicken(o)) and inside(o, pot))
    return has_noodles_or_chicken

behavior boil_noodles_with_chicken(pot:item, stove:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water
        achieve_once inside(is_food_noodles, pot)
        # Add noodles to the pot
        achieve_once inside(is_food_chicken, pot)
        # Add chicken to the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve_once is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        foreach pot: item:
            if is_pot(pot) and not visited(pot):
                observe(pot,"Check if there are noodles or chicken in the pot")
                # Look around for noodles or chicken in each pot

        if exists pot: item : (is_pot(pot) and has_noodles_or_chicken(pot)):
            # Weve identified a pot containing noodles or chicken
            bind pot: item where:
                is_pot(pot) and has_noodles_or_chicken(pot)
            bind stove: item where:
                is_stove(stove)
            # Start the boiling process
            boil_noodles_with_chicken(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2101_around_food_food_2064(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_noodles,food_food_instance)
        else:
            exp(food_noodles,food_food_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,food_food_instance]=True
        close[food_food_instance,food_noodles]=True
    

#exp_behavior_end

#goal_representation

def has_noodles_or_chicken_in_pot(pot:item):
    # Function to check if there are noodles or chicken in a specified pot
    symbol has_noodles_or_chicken = exists o: item : ((is_food_noodles(o) or is_food_chicken(o)) and inside(o, pot))
    return has_noodles_or_chicken

behavior observe_pot(pot:item):
    body:
        observe(pot, "Check if there are noodles or chicken in the pot")

behavior __goal__():
    body:
        if exists pot: item : (is_pot(pot) and has_noodles_or_chicken_in_pot(pot)):
            # If there is a pot with noodles or chicken, focus on the pot
            bind pot: item where:
                is_pot(pot) and has_noodles_or_chicken_in_pot(pot)
            achieve close_char(char, pot)
        else:
            # Check all pots in the scene that have not been visited
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe_pot(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2101_around_bowl_2140(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_noodles,bowl_instance)
        else:
            exp(food_noodles,bowl_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,bowl_instance]=True
        close[bowl_instance,food_noodles]=True
    

#exp_behavior_end

#goal_representation
 
def has_noodles_or_chicken_in_pot(pot:item):
    # Function to check if there are noodles or chicken in a specified pot
    symbol has_noodles_or_chicken= exists o: item : ((is_food_noodles(o) or is_food_chicken(o)) and inside(o, pot))
    return has_noodles_or_chicken

behavior __goal__():
    body:
        if exists pot: item : (is_pot(pot) and has_noodles_or_chicken_in_pot(pot)):
            # If there is a known pot with noodles or chicken, move close to it
            bind pot: item where:
                is_pot(pot) and has_noodles_or_chicken_in_pot(pot)
            achieve close_char(char, pot)

        else:
            # Check all pots in the scene that have not been visited
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot,"Check if there are noodles or chicken in the pot")

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil some noodles with chicken." ?
Answer: Put the chicken on the cutting board and cut it into pieces. Find a pot and fill it with water. Put the pot on the stove and turn on the stove. Put the chicken and noodles in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_cutting_board_2123(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_chicken,cutting_board_instance)
        else:
            exp(food_chicken,cutting_board_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,cutting_board_instance]=True
        close[cutting_board_instance,food_chicken]=True
    

behavior find_food_noodles_2101_around_fridge_126(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_noodles,fridge_instance)
        else:
            exp(food_noodles,fridge_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,fridge_instance]=True
        close[fridge_instance,food_noodles]=True
    

behavior find_knife_2037_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_noodles_or_chicken_in_pot(pot:item):
    # Function to check if there are noodles or chicken in a specified pot
    symbol has_noodles_or_chicken = exists o: item : ((is_food_noodles(o) or is_food_chicken(o)) and inside(o, pot))
    return has_noodles_or_chicken

behavior cut_chicken(chicken:item, cutting_board:item):
    body:
        achieve_once inhand(chicken)
        achieve_once on(chicken, cutting_board)
        achieve_once cut(chicken)

behavior boil_noodles_and_chicken(pot:item, stove:item):
    body:
        achieve has_water(pot) # Fill the pot with water
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove)   # Turn on the stove
        achieve_once inside(food_noodles, pot) # Add noodles to the pot
        achieve_once inside(food_chicken, pot) # Add chicken to the pot

behavior __goal__():
    body:
        if exists pot: item : (is_pot(pot) and has_noodles_or_chicken_in_pot(pot)):
            bind pot: item where:
                is_pot(pot) and has_noodles_or_chicken_in_pot(pot)
            bind stove: item where:
                is_stove(stove)
            boil_noodles_and_chicken(pot, stove)
            
        else:
            # You need to cut the chicken and boil noodles with it
            bind cutting_board: item where:
                is_cutting_board(cutting_board)
            bind food_chicken: item where:
                is_food_chicken(food_chicken)
            cut_chicken(food_chicken, cutting_board)
            
            # Find a pot to put the chicken and noodles in and boil them
            bind pot: item where:
                is_pot(pot)
            observe(pot, "Check if there are noodles or chicken in the pot")
            
            bind stove: item where:
                is_stove(stove)
            bind food_noodles: item where:
                is_food_noodles(food_noodles)
            boil_noodles_and_chicken(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_cutting_board_2123(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_chicken,cutting_board_instance)
        else:
            exp(food_chicken,cutting_board_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,cutting_board_instance]=True
        close[cutting_board_instance,food_chicken]=True
    

behavior find_food_noodles_2101_around_fridge_126(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_noodles,fridge_instance)
        else:
            exp(food_noodles,fridge_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,fridge_instance]=True
        close[fridge_instance,food_noodles]=True
    

behavior find_clothes_jacket_2119_around_bed_197(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_jacket,bed_instance)
        else:
            exp(clothes_jacket,bed_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,bed_instance]=True
        close[bed_instance,clothes_jacket]=True
    

behavior find_dry_pasta_2114_around_food_food_2064(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(dry_pasta,food_food_instance)
        else:
            exp(dry_pasta,food_food_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,food_food_instance]=True
        close[food_food_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
behavior boil_noodles_with_chicken(pot:item, stove:item, chicken:item, noodles:item):
    body:
        achieve_once cut(chicken)
        achieve_once has_water(pot)
        achieve_once on(pot, stove)
        achieve_once is_on(stove)
        achieve_once inside(chicken, pot)
        achieve_once inside(noodles, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind noodles: item where:
            is_dry_pasta(noodles)
        achieve close_char(char, pot)
        boil_noodles_with_chicken(pot, stove, chicken, noodles)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2101_around_cutting_board_2123(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_noodles,cutting_board_instance)
        else:
            exp(food_noodles,cutting_board_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,cutting_board_instance]=True
        close[cutting_board_instance,food_noodles]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_dry_pasta_2114_around_fridge_126(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(dry_pasta,fridge_instance)
        else:
            exp(dry_pasta,fridge_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,fridge_instance]=True
        close[fridge_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_ingredients(chicken: item, cutting_board: item):
    body:
        achieve_once on(chicken, cutting_board)
        # Place the chicken on a cutting board
        achieve cut(chicken)
        # Cut the chicken into pieces

behavior boil_noodles_with_chicken(pot: item, stove: item, chicken: item, noodles: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water
        achieve on(pot, stove)
        # Place pot on the stove
        achieve is_on(stove)
        # Turn on the stove
        achieve_once inside(chicken, pot)
        # Put the chicken in the pot
        achieve_once inside(noodles, pot)
        # Put the noodles in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind noodles: item where:
            is_dry_pasta(noodles)
        # Select the noodles item

        prepare_ingredients(chicken, cutting_board)
        
        boil_noodles_with_chicken(pot, stove, chicken, noodles)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior prepare_ingredients(chicken: item, cutting_board: item):
    body:
        achieve_once on(chicken, cutting_board)
        # Place the chicken on a cutting board
        achieve cut(chicken)
        # Cut the chicken into pieces

behavior boil_noodles_with_chicken(pot: item, stove: item, chicken: item, noodles: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water
        achieve on(pot, stove)
        # Place pot on the stove
        achieve is_on(stove)
        # Turn on the stove
        achieve_once inside(chicken, pot)
        # Put the chicken in the pot
        achieve_once inside(noodles, pot)
        # Put the noodles in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind noodles: item where:
            is_dry_pasta(noodles)
        # Select the noodles item

        prepare_ingredients(chicken, cutting_board)
        
        boil_noodles_with_chicken(pot, stove, chicken, noodles)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(cutting_board_2123)put_executor(food_chicken_2089, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_chicken_2089)cut_executor(food_chicken_2089)walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_121)walk_executor(kitchen_counter_119)put_executor(knife_2035, kitchen_counter_119)switchon_executor(faucet_121)switchoff_executor(faucet_121)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(pot_78)putin_executor(food_chicken_2089, pot_78)walk_executor(fridge_126)exp(dry_pasta_2114, fridge_126)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_chicken_2089, fridge_126)
Find food_chicken_2089. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2089)walk_executor(cutting_board_2123)put_executor(food_chicken_2089, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_chicken_2089)cut_executor(food_chicken_2089)walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_121)walk_executor(kitchen_counter_119)put_executor(knife_2035, kitchen_counter_119)switchon_executor(faucet_121)switchoff_executor(faucet_121)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(pot_78)putin_executor(food_chicken_2089, pot_78)walk_executor(fridge_126)exp(dry_pasta_2114, fridge_126)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_chicken_2089, cutting_board_2123)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_chicken_2089. food_chicken_2089 is close cutting_board_2123. food_chicken_2089 is on cutting_board_2123. food_chicken_2089 released by right hand. 
##############################
From agent.py
walk_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. 
##############################
From agent.py
grab_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. Grabbing knife_2035 by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the knife_2035. Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the knife_2035. Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by left hand. 
##############################
From agent.py
walk_executor(faucet_121)
Robot find: Robot is close to the knife_2035. Robot is close to the pot_78. Robot is close to the faucet_121. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the knife_2035. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(knife_2035, kitchen_counter_119)
Robot find: Robot is close to the knife_2035. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. kitchen_counter_119 is close knife_2035. knife_2035 is close kitchen_counter_119. knife_2035 is on kitchen_counter_119. knife_2035 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_121)
Robot find: Robot is close to the knife_2035. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. faucet_121 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_121)
Robot find: Robot is close to the knife_2035. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. faucet_121 is turned off. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_chicken_2089, pot_78)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the pot_78. Robot is close to the stove_2135. pot_78 is close food_chicken_2089. food_chicken_2089 is inside pot_78. food_chicken_2089 is close pot_78. food_chicken_2089 released by right hand. 
##############################
From agent.py
walk_executor(fridge_126)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. 
##############################
From agent.py
exp(dry_pasta_2114, fridge_126)
Fail to find dry_pasta_2114 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(cutting_board_2123)put_executor(food_chicken_2089, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_chicken_2089)cut_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(pot_78)putin_executor(food_chicken_2089, pot_78)walk_executor(food_food_1000)exp(dry_pasta_2114, food_food_1000)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the pot_78. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the pot_78. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_chicken_2089, cutting_board_2123)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. food_chicken_2089 is close cutting_board_2123. food_chicken_2089 is on cutting_board_2123. food_chicken_2089 released by right hand. 
##############################
From agent.py
walk_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the knife_2035. 
##############################
From agent.py
grab_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the knife_2035. Grabbing knife_2035 by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Grabbing food_chicken_2089 by left hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_chicken_2089, pot_78)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Robot is close to the stove_2135. food_chicken_2089 is inside pot_78. food_chicken_2089 is close pot_78. food_chicken_2089 released by left hand. 
##############################
From agent.py
walk_executor(food_food_1000)
Robot find: Robot is close to the knife_2035. Robot is close to the food_food_1000. 
##############################
From agent.py
exp(dry_pasta_2114, food_food_1000)
Fail to find dry_pasta_2114 around food_food_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(cutting_board_2123)put_executor(food_chicken_2089, cutting_board_2123)walk_executor(food_chicken_2089)cut_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(pot_78)putin_executor(food_chicken_2089, pot_78)walk_executor(walllamp_34)exp(dry_pasta_2114, walllamp_34)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Grabbing food_chicken_2089 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_chicken_2089, cutting_board_2123)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. food_chicken_2089 is close cutting_board_2123. food_chicken_2089 is on cutting_board_2123. food_chicken_2089 released by left hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Grabbing food_chicken_2089 by left hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_chicken_2089, pot_78)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Robot is close to the stove_2135. food_chicken_2089 is inside pot_78. food_chicken_2089 is close pot_78. food_chicken_2089 released by left hand. 
##############################
From agent.py
walk_executor(walllamp_34)
Robot find: drawing_33, Robot is close to the knife_2035. Robot is close to the walllamp_34. 
##############################
From agent.py
exp(dry_pasta_2114, walllamp_34)
Fail to find dry_pasta_2114 around walllamp_34. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(cutting_board_2123)put_executor(food_chicken_2089, cutting_board_2123)walk_executor(food_chicken_2089)cut_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(pot_78)putin_executor(food_chicken_2089, pot_78)walk_executor(food_food_2064)exp(dry_pasta_2114, food_food_2064)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Grabbing food_chicken_2089 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_chicken_2089, cutting_board_2123)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. food_chicken_2089 is close cutting_board_2123. food_chicken_2089 is on cutting_board_2123. food_chicken_2089 released by left hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Grabbing food_chicken_2089 by left hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_chicken_2089, pot_78)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Robot is close to the stove_2135. food_chicken_2089 is inside pot_78. food_chicken_2089 is close pot_78. food_chicken_2089 released by left hand. 
##############################
From agent.py
walk_executor(food_food_2064)
Robot find: Robot is close to the knife_2035. Robot is close to the food_food_2064. Robot is close to the oven_127. 
##############################
From agent.py
exp(dry_pasta_2114, food_food_2064)
Fail to find dry_pasta_2114 around food_food_2064. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(cutting_board_2123)put_executor(food_chicken_2089, cutting_board_2123)walk_executor(food_chicken_2089)cut_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(pot_78)putin_executor(food_chicken_2089, pot_78)walk_executor(bathroom_counter_18)exp(dry_pasta_2114, bathroom_counter_18)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Grabbing food_chicken_2089 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_chicken_2089, cutting_board_2123)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. food_chicken_2089 is close cutting_board_2123. food_chicken_2089 is on cutting_board_2123. food_chicken_2089 released by left hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Grabbing food_chicken_2089 by left hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_chicken_2089, pot_78)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Robot is close to the stove_2135. food_chicken_2089 is inside pot_78. food_chicken_2089 is close pot_78. food_chicken_2089 released by left hand. 
##############################
From agent.py
walk_executor(bathroom_counter_18)
Robot find: mat_32, phone_2029, Robot is close to the knife_2035. Robot is close to the bathroom_counter_18. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find dry_pasta_2114 ?
Answer: The target item, dry_pasta_2114, can be found in the dining_room_41. It is located on top of table_114. As you enter dining_room_41, look for the table_114, and you will find the dry_pasta_2114 placed on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: You need to identify a pot with noodles or chicken. Continue checking pots until you find one that contains noodles or chicken, as the program logic requires verifying the presence of these ingredients in a pot.
The target item, dry_pasta_2114, can be found in the dining_room_41. It is located on top of table_114. As you enter dining_room_41, look for the table_114, and you will find the dry_pasta_2114 placed on it.

Human Guidance: Put the chicken on the cutting board and cut it into pieces. Find a pot and fill it with water. Put the pot on the stove and turn on the stove. Put the chicken and noodles in the pot.
The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for pot_2138 around kitchen_counter_122.
Action 3: Walk to cupboard_117.
Action 4: look for pot_2138 around cupboard_117.
Action 5: Walk to cupboard_118.
Action 6: Open cupboard_118.
Action 7: look for pot_2138 around cupboard_118.
Action 8: Walk to kitchen_counter_123.
Action 9: look for pot_2138 around kitchen_counter_123.
Action 10: Walk to stove_2135.
Action 11: Open stove_2135.
Action 12: look for pot_2138 around stove_2135.
Action 13: Walk to pot_2138.
Action 14: Open pot_2138.
Action 15: Observe around pot_2138 with the question of Check if there are noodles or chicken in the pot.
Action 16: Walk to pot_78.
Action 17: Observe around pot_78 with the question of Check if there are noodles or chicken in the pot.
Action 18: Walk to stove_2135.
Action 19: look for pot_2040 around stove_2135.
Action 20: Walk to table_270.
Action 21: look for pot_2040 around table_270.
Action 22: Walk to microwave_135.
Action 23: Open microwave_135.
Action 24: look for pot_2040 around microwave_135.
Action 25: Open pot_2040.
Action 26: Observe around pot_2040 with the question of Check if there are noodles or chicken in the pot.
Action 27: Walk to fridge_126.
Action 28: Switch off fridge_126.
Action 29: Open fridge_126.
Action 30: look for food_chicken_2089 around fridge_126.
Action 31: Grab food_chicken_2089.
Action 32: Walk to cutting_board_2123.
Action 33: Put food_chicken_2089 on cutting_board_2123.
Action 34: Walk to knife_2035.
Action 35: Grab knife_2035.
Action 36: Walk to food_chicken_2089.
Action 37: Cut food_chicken_2089.
Action 38: Walk to pot_78.
Action 39: Grab pot_78.
Action 40: Walk to faucet_121.
Action 41: Walk to kitchen_counter_119.
Action 42: Put knife_2035 on kitchen_counter_119.
Action 43: Switch on faucet_121.
Action 44: Switch off faucet_121.
Action 45: Put pot_78 on stove_2135.
Action 46: Switch on stove_2135.
Action 47: Walk to food_chicken_2089.
Action 48: Grab food_chicken_2089.
Action 49: Walk to pot_78.
Action 50: Put food_chicken_2089 into pot_78.
Action 51: Walk to fridge_126.
Action 52: look for dry_pasta_2114 around fridge_126.
Action 53: Walk to food_chicken_2089.
Action 54: Grab food_chicken_2089.
Action 55: Walk to cutting_board_2123.
Action 56: Put food_chicken_2089 on cutting_board_2123.
Action 57: Walk to knife_2035.
Action 58: Grab knife_2035.
Action 59: Walk to food_chicken_2089.
Action 60: Cut food_chicken_2089.
Action 61: Grab food_chicken_2089.
Action 62: Walk to pot_78.
Action 63: Put food_chicken_2089 into pot_78.
Action 64: Walk to food_food_1000.
Action 65: look for dry_pasta_2114 around food_food_1000.
Action 66: Walk to food_chicken_2089.
Action 67: Grab food_chicken_2089.
Action 68: Walk to cutting_board_2123.
Action 69: Put food_chicken_2089 on cutting_board_2123.
Action 70: Walk to food_chicken_2089.
Action 71: Cut food_chicken_2089.
Action 72: Grab food_chicken_2089.
Action 73: Walk to pot_78.
Action 74: Put food_chicken_2089 into pot_78.
Action 75: Walk to walllamp_34.
Action 76: look for dry_pasta_2114 around walllamp_34.
Action 77: Walk to food_chicken_2089.
Action 78: Grab food_chicken_2089.
Action 79: Walk to cutting_board_2123.
Action 80: Put food_chicken_2089 on cutting_board_2123.
Action 81: Walk to food_chicken_2089.
Action 82: Cut food_chicken_2089.
Action 83: Grab food_chicken_2089.
Action 84: Walk to pot_78.
Action 85: Put food_chicken_2089 into pot_78.
Action 86: Walk to food_food_2064.
Action 87: look for dry_pasta_2114 around food_food_2064.
Action 88: Walk to food_chicken_2089.
Action 89: Grab food_chicken_2089.
Action 90: Walk to cutting_board_2123.
Action 91: Put food_chicken_2089 on cutting_board_2123.
Action 92: Walk to food_chicken_2089.
Action 93: Cut food_chicken_2089.
Action 94: Grab food_chicken_2089.
Action 95: Walk to pot_78.
Action 96: Put food_chicken_2089 into pot_78.
Action 97: Walk to bathroom_counter_18.

##############################
From agent.py
exp(dry_pasta_2114, bathroom_counter_18)
Fail to find dry_pasta_2114 around bathroom_counter_18. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(cutting_board_2123)put_executor(food_chicken_2089, cutting_board_2123)walk_executor(food_chicken_2089)cut_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(pot_78)putin_executor(food_chicken_2089, pot_78)walk_executor(table_114)exp(dry_pasta_2114, table_114)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Grabbing food_chicken_2089 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_chicken_2089, cutting_board_2123)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. food_chicken_2089 is close cutting_board_2123. food_chicken_2089 is on cutting_board_2123. food_chicken_2089 released by left hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Grabbing food_chicken_2089 by left hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_chicken_2089, pot_78)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Robot is close to the stove_2135. food_chicken_2089 is inside pot_78. food_chicken_2089 is close pot_78. food_chicken_2089 released by left hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the knife_2035. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(dry_pasta_2114, table_114)
Find dry_pasta_2114. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(cutting_board_2123)put_executor(food_chicken_2089, cutting_board_2123)walk_executor(food_chicken_2089)cut_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(pot_78)putin_executor(food_chicken_2089, pot_78)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Grabbing food_chicken_2089 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_chicken_2089, cutting_board_2123)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. food_chicken_2089 is close cutting_board_2123. food_chicken_2089 is on cutting_board_2123. food_chicken_2089 released by left hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the cutting_board_2123. Grabbing food_chicken_2089 by left hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_chicken_2089, pot_78)
Robot find: Robot is close to the knife_2035. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Robot is close to the stove_2135. food_chicken_2089 is inside pot_78. food_chicken_2089 is close pot_78. food_chicken_2089 released by left hand. 
##############################
From agent.py
walk_executor(dry_pasta_2114)
Robot find: Robot is close to the knife_2035. Robot is close to the dry_pasta_2114. Robot is close to the table_114. 
##############################
From agent.py
grab_executor(dry_pasta_2114)
Robot find: Robot is close to the knife_2035. Robot is close to the dry_pasta_2114. Robot is close to the table_114. Grabbing dry_pasta_2114 by left hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the knife_2035. Robot is close to the dry_pasta_2114. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(dry_pasta_2114, pot_78)
Robot find: Robot is close to the knife_2035. Robot is close to the dry_pasta_2114. Robot is close to the food_chicken_2089. Robot is close to the pot_78. Robot is close to the stove_2135. dry_pasta_2114 is inside pot_78. pot_78 is close dry_pasta_2114. dry_pasta_2114 is close pot_78. dry_pasta_2114 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some noodles with chicken.
Action History:
['walk_executor(kitchen_counter_122)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(kitchen_counter_123)', 'walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(pot_2138)', 'open_executor(pot_2138)', 'walk_executor(pot_78)', 'walk_executor(stove_2135)', 'walk_executor(table_270)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'open_executor(pot_2040)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_chicken_2089)', 'walk_executor(cutting_board_2123)', 'put_executor(food_chicken_2089, cutting_board_2123)', 'walk_executor(knife_2035)', 'grab_executor(knife_2035)', 'walk_executor(food_chicken_2089)', 'cut_executor(food_chicken_2089)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_121)', 'walk_executor(kitchen_counter_119)', 'put_executor(knife_2035, kitchen_counter_119)', 'switchon_executor(faucet_121)', 'switchoff_executor(faucet_121)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(pot_78)', 'putin_executor(food_chicken_2089, pot_78)', 'walk_executor(fridge_126)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(cutting_board_2123)', 'put_executor(food_chicken_2089, cutting_board_2123)', 'walk_executor(knife_2035)', 'grab_executor(knife_2035)', 'walk_executor(food_chicken_2089)', 'cut_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(pot_78)', 'putin_executor(food_chicken_2089, pot_78)', 'walk_executor(food_food_1000)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(cutting_board_2123)', 'put_executor(food_chicken_2089, cutting_board_2123)', 'walk_executor(food_chicken_2089)', 'cut_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(pot_78)', 'putin_executor(food_chicken_2089, pot_78)', 'walk_executor(walllamp_34)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(cutting_board_2123)', 'put_executor(food_chicken_2089, cutting_board_2123)', 'walk_executor(food_chicken_2089)', 'cut_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(pot_78)', 'putin_executor(food_chicken_2089, pot_78)', 'walk_executor(food_food_2064)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(cutting_board_2123)', 'put_executor(food_chicken_2089, cutting_board_2123)', 'walk_executor(food_chicken_2089)', 'cut_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(pot_78)', 'putin_executor(food_chicken_2089, pot_78)', 'walk_executor(bathroom_counter_18)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(cutting_board_2123)', 'put_executor(food_chicken_2089, cutting_board_2123)', 'walk_executor(food_chicken_2089)', 'cut_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(pot_78)', 'putin_executor(food_chicken_2089, pot_78)', 'walk_executor(table_114)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(cutting_board_2123)', 'put_executor(food_chicken_2089, cutting_board_2123)', 'walk_executor(food_chicken_2089)', 'cut_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(pot_78)', 'putin_executor(food_chicken_2089, pot_78)', 'walk_executor(dry_pasta_2114)', 'grab_executor(dry_pasta_2114)', 'walk_executor(pot_78)', 'putin_executor(dry_pasta_2114, pot_78)']
Time info:
Time consume: 615 seconds
Exp_helper query times: 2
Guidance query times: 1
library scale: 0
goal generate times: 12
goal correct times: 0
action_num: 104

Task complete rate:
Keystate: k1 - Requires: 12 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
