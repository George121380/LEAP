From agent.py
Reset goals: The sub-goals are: 
['Cook a pot of fish soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
def has_clean_pot_on_stove(stove:item):
    # Function to check if there is a clean pot on the stove
    symbol has_clean_pot=exists o: item : (is_pot(o) and clean(o) and on(o, stove))
    return has_clean_pot

def has_water_in_pot(pot:item):
    # Function to check if there is water in the pot
    symbol pot_has_water=exists o: item : (has_water(pot))
    return pot_has_water

behavior boil_water(pot:item, stove:item):
    body:
        achieve_once inside(pot, stove) # Put the pot on the stove
        achieve is_on(stove) # Turn on the stove

behavior add_fish_to_pot(fish:item, pot:item):
    body:
        achieve inside(fish, pot) # Add the fish into the pot

behavior __goal__():
    body:
        # Find a pot
        bind pot: item where:
            is_pot(pot) and clean(pot)
        
        # Find a stove
        bind stove: item where:
            is_stove(stove)
        
        # Make sure the pot is clean and placed on the stove
        if not has_clean_pot_on_stove(stove):
            boil_water(pot, stove)
        
        # Add water to the pot
        if not has_water_in_pot(pot):
            achieve has_water(pot)
        
        # Find fish
        bind fish: item where:
            is_food_fish(fish)
        
        # Add the fish to the water in the pot
        add_fish_to_pot(fish, pot)

        achieve is_on(stove) # Make sure the stove is on throughout the process
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_vegetable_2113_around_kitchen_counter_122(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_salt_2041_around_kitchen_counter_122(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

#exp_behavior_end

#goal_representation

def has_food_items(pot: item):
    # Function to check if the pot has the necessary food items to make the soup
    symbol has_food_items= exists o: item : (is_food_fish(o) or is_food_vegetable(o) or is_food_salt(o) or is_food_pepper(o) and inside(o, pot))
    return has_food_items

behavior boil_water(pot:item):
    body:
        achieve_once has_water(pot)
        achieve_once is_on(stove) # Once pot is placed on stove, turn it on

behavior add_ingredients(ingredients:list[item], pot:item):
    body:
        foreach ingredient: item:
            if ingredient in ingredients:
                achieve_once inside(ingredient, pot) # Add ingredients to the pot

behavior cook_fish_soup(pot:item):
    body:
        if has_food_items(pot):
            boil_water(pot) # First, boil water in the pot
            add_ingredients([is_food_fish, is_food_vegetable, is_food_salt, is_food_pepper], pot)
            # Keep pot on stove to cook

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        cook_fish_soup(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation

def has_items(pot: item):
    symbol contains_items = exists o: item : (inside(o, pot))
    return contains_items

behavior add_ingredient(ingredient: item, pot: item):
    body:
        achieve_once inside(ingredient, pot)

behavior add_water(pot: item, amount: int):
    body:
        achieve_once has_water(pot)

behavior switch_on_stove(stove:item):
    body:
        achieve_once is_on(stove)

behavior close_lid(pot: item):
    body:
        achieve_once closed(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind fish: item where:
            is_food_fish(fish)
        add_ingredient(fish, pot)
        add_water(pot, 500)   # Assuming 500 ml of water 
        achieve_once inside(pot, stove)
        switch_on_stove(stove)
        close_lid(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_fish_soup_ingredients_prepared(pot: item, stove: item, knife: item, cutting_board: item):
    symbol ingredients_prepared = exists fish: item: (
        is_food_fish(fish) and inside(fish, pot) and exists water: item: (
            has_water(pot) and exists vegetables: item: (
                is_food_vegetable(vegetables) and inside(vegetables, pot)
            )
        )
    )
    return ingredients_prepared

behavior prepare_fish_soup(pot: item, stove: item, knife: item, cutting_board: item):
    body:
        if not is_fish_soup_ingredients_prepared(pot, stove, knife, cutting_board):
            # Prepare fish soup ingredients
            bind fish: item where:
                is_food_fish(fish)
            achieve_once cut(fish)
            achieve_once inside(fish, pot)
            
            bind water: item where:
                has_water(water)
            achieve_once inside(water, pot)
            
            bind vegetables: item where:
                is_food_vegetable(vegetables)
            achieve_once cut(vegetables)
            achieve_once inside(vegetables, pot)

behavior cook_fish_soup(pot: item, stove: item):
    body:
        achieve_once inside(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind knife: item where:
            is_knife(knife)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        prepare_fish_soup(pot, stove, knife, cutting_board)
        cook_fish_soup(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once inside(pot, sink)
        achieve has_water(pot)

behavior place_fish_in_pot(fish:item, pot:item):
    body:
        achieve_once inside(fish, pot)

behavior heat_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior observe_pot_content(pot:item):
    body:
        observe(pot, "Check if the pot contains water and fish")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind fish: item where:
            is_food_fish(fish)
        bind sink: item where:
            is_sink(sink)
        bind stove: item where:
            is_stove(stove)
        
        fill_pot_with_water(pot, sink)
        place_fish_in_pot(fish, pot)
        heat_pot(pot, stove)
        observe_pot_content(pot)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once inside(pot, sink)
        achieve has_water(pot)

behavior place_fish_in_pot(fish:item, pot:item):
    body:
        achieve_once inside(fish, pot)

behavior heat_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior observe_pot_content(pot:item):
    body:
        observe(pot, "Check if the pot contains water and fish")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind fish: item where:
            is_food_fish(fish)
        bind sink: item where:
            is_sink(sink)
        bind stove: item where:
            is_stove(stove)
        
        fill_pot_with_water(pot, sink)
        place_fish_in_pot(fish, pot)
        heat_pot(pot, stove)
        observe_pot_content(pot)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(pot_78, kitchen_counter_122)walk_executor(pot_78)grab_executor(pot_78)walk_executor(sink_19)putin_executor(pot_78, sink_19)walk_executor(pot_78)open_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_fish_2093, fridge_126)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(pot_78)putin_executor(food_fish_2093, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(pot_78)obs(pot_78, Check if the pot contains water and fish)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(pot_78, kitchen_counter_122)
Find pot_78. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(sink_19)putin_executor(pot_78, sink_19)walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_fish_2093, fridge_126)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(pot_78)putin_executor(food_fish_2093, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(pot_78)obs(pot_78, Check if the pot contains water and fish)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, mat_32, phone_2029, cleaning_solution_2143, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
putin_executor(pot_78, sink_19)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the sink_19. pot_78 is close sink_19. sink_19 is close pot_78. pot_78 is inside sink_19. pot_78 released by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the sink_19. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the sink_19. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the pot_78. Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the pot_78. Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_fish_2093, fridge_126)
Find food_fish_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)putin_executor(pot_78, sink_19)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(pot_78)putin_executor(food_fish_2093, pot_78)grab_executor(pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(pot_78)obs(pot_78, Check if the pot contains water and fish)
##############################
From agent.py
walk_executor(sink_19)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
putin_executor(pot_78, sink_19)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the sink_19. pot_78 is close sink_19. pot_78 is inside sink_19. pot_78 released by right hand. 
##############################
From agent.py
walk_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the fridge_126. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_fish_2093. Robot is close to the sink_19. Robot is close to the pot_78. 
##############################
From agent.py
putin_executor(food_fish_2093, pot_78)
Robot find: Robot is close to the food_fish_2093. Robot is close to the sink_19. Robot is close to the pot_78. pot_78 is close food_fish_2093. food_fish_2093 is inside pot_78. food_fish_2093 is close pot_78. food_fish_2093 released by right hand. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the food_fish_2093. Robot is close to the sink_19. Robot is close to the pot_78. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
obs(pot_78, Check if the pot contains water and fish)
Get this information:  pot_78 is close to character_240. pot_78 is close to stove_2135. pot_78 is on stove_2135. food_fish_2093 is inside pot_78. pot_78 is inside dining_room_41. pot_78 is OPEN. pot_78 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure that the pot contains water. The observation step indicates that the pot contains fish but does not confirm the presence of water, which is a necessary condition for cooking fish soup. Fill the pot with water and then check the pot's contents again.
##############################
From agent.py
Human Instruction: Ensure that the pot contains water. The observation step indicates that the pot contains fish but does not confirm the presence of water, which is a necessary condition for cooking fish soup. Fill the pot with water and then check the pot's contents again.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for pot_78 around kitchen_counter_122.
Action 3: Walk to pot_78.
Action 4: Grab pot_78.
Action 5: Walk to sink_19.
Action 6: Put pot_78 into sink_19.
Action 7: Walk to pot_78.
Action 8: Grab pot_78.
Action 9: Walk to faucet_20.
Action 10: Switch on faucet_20.
Action 11: Switch off faucet_20.
Action 12: Walk to fridge_126.
Action 13: Switch off fridge_126.
Action 14: Open fridge_126.
Action 15: look for food_fish_2093 around fridge_126.
Action 16: Walk to sink_19.
Action 17: Put pot_78 into sink_19.
Action 18: Walk to food_fish_2093.
Action 19: Grab food_fish_2093.
Action 20: Walk to pot_78.
Action 21: Put food_fish_2093 into pot_78.
Action 22: Grab pot_78.
Action 23: Walk to stove_2135.
Action 24: Put pot_78 on stove_2135.
Action 25: Switch on stove_2135.
Action 26: Walk to pot_78.
Action 27: Observe around pot_78 with the question of Check if the pot contains water and fish.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_fork_2151(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fork_instance:item where:
            is_fork(fork_instance) and id[fork_instance]==2151
        achieve close_char(char,fork_instance)
        if can_open(fork_instance):
            achieve_once open(fork_instance)
            exp(pot,fork_instance)
        else:
            exp(pot,fork_instance)
    eff:
        unknown[pot]=False
        close[pot,fork_instance]=True
        close[fork_instance,pot]=True
    

behavior find_food_onion_2009_around_cutting_board_2123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior fill_with_water(pot: item):
    body:
        achieve_once has_water(pot)

behavior check_pot_contents(pot: item):
    body:
        achieve_once visited(pot)
        observe(pot, "Check if the pot contains water and fish")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        if not has_water(pot):
            fill_with_water(pot)
        
        check_pot_contents(pot)
        achieve has_water(pot)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_with_water(pot: item):
    body:
        achieve_once has_water(pot)

behavior check_pot_contents(pot: item):
    body:
        achieve_once visited(pot)
        observe(pot, "Check if the pot contains water and fish")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        if not has_water(pot):
            fill_with_water(pot)
        
        check_pot_contents(pot)
        achieve has_water(pot)
##############################
From agent.py-> find a plan in act()
obs(pot_78, look around this place)obs(pot_78, Check if the pot contains water and fish)
##############################
From agent.py
obs(pot_78, look around this place)
Get this information:  pot_78 is close to character_240. pot_78 is close to stove_2135. pot_78 is on stove_2135. food_fish_2093 is inside pot_78. pot_78 is inside dining_room_41. pot_78 is OPEN. pot_78 is CLEAN.
##############################
From agent.py
obs(pot_78, Check if the pot contains water and fish)
Get this information:  pot_78 is close to character_240. pot_78 is close to stove_2135. pot_78 is on stove_2135. food_fish_2093 is inside pot_78. pot_78 is inside dining_room_41. pot_78 is OPEN. pot_78 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that the pot contains water. It should observe the pot after filling it with water to confirm the presence of both water and fish.
##############################
From agent.py
Human Instruction: The robot needs to ensure that the pot contains water. It should observe the pot after filling it with water to confirm the presence of both water and fish.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for pot_78 around kitchen_counter_122.
Action 3: Walk to pot_78.
Action 4: Grab pot_78.
Action 5: Walk to sink_19.
Action 6: Put pot_78 into sink_19.
Action 7: Walk to pot_78.
Action 8: Grab pot_78.
Action 9: Walk to faucet_20.
Action 10: Switch on faucet_20.
Action 11: Switch off faucet_20.
Action 12: Walk to fridge_126.
Action 13: Switch off fridge_126.
Action 14: Open fridge_126.
Action 15: look for food_fish_2093 around fridge_126.
Action 16: Walk to sink_19.
Action 17: Put pot_78 into sink_19.
Action 18: Walk to food_fish_2093.
Action 19: Grab food_fish_2093.
Action 20: Walk to pot_78.
Action 21: Put food_fish_2093 into pot_78.
Action 22: Grab pot_78.
Action 23: Walk to stove_2135.
Action 24: Put pot_78 on stove_2135.
Action 25: Switch on stove_2135.
Action 26: Walk to pot_78.
Action 27: Observe around pot_78 with the question of Check if the pot contains water and fish.
Action 28: Observe around pot_78 with the question of look around this place.
Action 29: Observe around pot_78 with the question of Check if the pot contains water and fish.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_onion_2048_around_cutting_board_2123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
behavior check_pot_contents(pot:item):
    body:
        observe(pot, "Check if the pot contains water and fish")
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        check_pot_contents(pot)  
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior check_pot_contents(pot:item):
    body:
        observe(pot, "Check if the pot contains water and fish")
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        check_pot_contents(pot)  
##############################
From agent.py-> find a plan in act()
obs(pot_78, Check if the pot contains water and fish)
##############################
From agent.py
obs(pot_78, Check if the pot contains water and fish)
Get this information:  pot_78 is close to character_240. pot_78 is close to stove_2135. pot_78 is on stove_2135. food_fish_2093 is inside pot_78. pot_78 is inside dining_room_41. pot_78 is OPEN. pot_78 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot contains water. Observe from the actions taken that water was not added to the pot. Switch on the faucet to fill the pot with water, then observe the pot again to confirm it contains both water and fish.
##############################
Task Summary:
Task Goal:
Cook a pot of fish soup.
Action History:
['walk_executor(kitchen_counter_122)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(sink_19)', 'putin_executor(pot_78, sink_19)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(sink_19)', 'putin_executor(pot_78, sink_19)', 'walk_executor(food_fish_2093)', 'grab_executor(food_fish_2093)', 'walk_executor(pot_78)', 'putin_executor(food_fish_2093, pot_78)', 'grab_executor(pot_78)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(pot_78)']
Time info:
Time consume: 165 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 7
goal correct times: 0
action_num: 24

Task complete rate:
Keystate: k1 - Requires: 15 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
