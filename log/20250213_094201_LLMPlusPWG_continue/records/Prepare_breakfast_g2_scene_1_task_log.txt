From agent.py
Reset goals: The sub-goals are: 
['Scramble egg by the fryingpan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_kitchen_counter_123(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_123(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_clothes_jacket_2119_around_basket_for_clothes_2078(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_jacket,basket_for_clothes_instance)
        else:
            exp(clothes_jacket,basket_for_clothes_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior start_stove(stove:item):
    body:
        achieve_once plugged(stove)
        # Ensure the stove is plugged
        achieve_once is_on(stove)
        # Turn on the stove

behavior heat_panfrying(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)
        # Place the frying pan on the stove

behavior crack_egg(egg:item, pan:item):
    body:
        achieve cut(egg) # Crack the egg
        achieve_once inside(egg, pan) # Put the egg inside the frying pan

behavior stir_egg(egg:item):
    bind wooden_spoon: item where:
        is_wooden_spoon(wooden_spoon)
    body:
        achieve_once inhand(wooden_spoon) # Use a wooden spoon to stir the egg

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        # Select a stove
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and surfaces(frying_pan)
        # Select a frying pan
        bind egg: item where:
            is_food_egg(egg) and grabbable(egg)
        # Select an egg

        start_stove(stove) # Start the stove
        heat_panfrying(frying_pan, stove) # Heat the frying pan on the stove
        crack_egg(egg, frying_pan) # Crack the egg into the frying pan
        stir_egg(egg) # Stir the scrambled egg

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_kitchen_counter_123(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_123(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove)

behavior add_egg_to_fryingpan(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)

behavior stir_egg_with_wooden_spoon(egg:item, fryingpan:item, wooden_spoon:item):
    body:
        achieve_once inhand(wooden_spoon)
        achieve_once inside(egg, fryingpan)

behavior turn_off_stove(stove:item):
    body:
        achieve_once is_off(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind wooden_spoon: item where:
            is_wooden_spoon(wooden_spoon)
        # Select a wooden spoon

        turn_on_stove(stove)
        add_egg_to_fryingpan(egg, fryingpan)
        stir_egg_with_wooden_spoon(egg, fryingpan, wooden_spoon)
        turn_off_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior turn_on_stove(stove:item):
    body:
        achieve_once is_on(stove)

behavior add_egg_to_fryingpan(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)

behavior stir_egg_with_wooden_spoon(egg:item, fryingpan:item, wooden_spoon:item):
    body:
        achieve_once inhand(wooden_spoon)
        achieve_once inside(egg, fryingpan)

behavior turn_off_stove(stove:item):
    body:
        achieve_once is_off(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind wooden_spoon: item where:
            is_wooden_spoon(wooden_spoon)
        # Select a wooden spoon

        turn_on_stove(stove)
        add_egg_to_fryingpan(egg, fryingpan)
        stir_egg_with_wooden_spoon(egg, fryingpan, wooden_spoon)
        turn_off_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(kitchen_counter_123)exp(fryingpan_2154, kitchen_counter_123)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)walk_executor(kitchen_counter_123)exp(wooden_spoon_2000, kitchen_counter_123)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(stove_2135)switchoff_executor(stove_2135)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_123)
Fail to find fryingpan_2154 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(fryingpan_2154, cupboard_117)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)walk_executor(cupboard_117)exp(wooden_spoon_2000, cupboard_117)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(stove_2135)switchoff_executor(stove_2135)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_117)
Fail to find fryingpan_2154 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(fryingpan_2154, cupboard_118)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)walk_executor(cupboard_118)exp(wooden_spoon_2000, cupboard_118)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(stove_2135)switchoff_executor(stove_2135)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_118)
Fail to find fryingpan_2154 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_199)exp(fryingpan_2154, table_199)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)walk_executor(cutting_board_2123)exp(wooden_spoon_2000, cutting_board_2123)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(stove_2135)switchoff_executor(stove_2135)
##############################
From agent.py
walk_executor(table_199)
Robot find: wooden_spoon_2000, mat_203, tea_bag_2023, drawing_201, drawing_202, Robot is close to the table_199. 
##############################
From agent.py
exp(fryingpan_2154, table_199)
Fail to find fryingpan_2154 around table_199. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(fryingpan_2154, fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(stove_2135)switchoff_executor(stove_2135)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(fryingpan_2154, fridge_126)
Fail to find fryingpan_2154 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(microwave_135)open_executor(microwave_135)exp(fryingpan_2154, microwave_135)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(stove_2135)switchoff_executor(stove_2135)
##############################
From agent.py
walk_executor(microwave_135)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
exp(fryingpan_2154, microwave_135)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)walk_executor(wooden_spoon_2000)grab_executor(wooden_spoon_2000)walk_executor(stove_2135)switchoff_executor(stove_2135)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(food_egg_2092, fryingpan_2154)
Robot find: Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. food_egg_2092 is inside fryingpan_2154. fryingpan_2154 is close food_egg_2092. food_egg_2092 is close fryingpan_2154. food_egg_2092 released by right hand. 
##############################
From agent.py
walk_executor(wooden_spoon_2000)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the table_199. 
##############################
From agent.py
grab_executor(wooden_spoon_2000)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the table_199. Grabbing wooden_spoon_2000 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchoff_executor(stove_2135)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to stir the egg in the frying pan with the wooden spoon to complete the task of scrambling the egg.
##############################
From agent.py
Human Instruction: The robot needs to stir the egg in the frying pan with the wooden spoon to complete the task of scrambling the egg.

The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Switch on stove_2135.
Action 3: Walk to kitchen_counter_123.
Action 4: look for fryingpan_2154 around kitchen_counter_123.
Action 5: Walk to cupboard_117.
Action 6: look for fryingpan_2154 around cupboard_117.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for fryingpan_2154 around cupboard_118.
Action 10: Walk to table_199.
Action 11: look for fryingpan_2154 around table_199.
Action 12: Walk to fridge_126.
Action 13: Switch off fridge_126.
Action 14: Open fridge_126.
Action 15: look for fryingpan_2154 around fridge_126.
Action 16: Walk to microwave_135.
Action 17: Open microwave_135.
Action 18: look for fryingpan_2154 around microwave_135.
Action 19: Walk to food_egg_2092.
Action 20: Grab food_egg_2092.
Action 21: Walk to fryingpan_2154.
Action 22: Put food_egg_2092 into fryingpan_2154.
Action 23: Walk to wooden_spoon_2000.
Action 24: Grab wooden_spoon_2000.
Action 25: Walk to stove_2135.
Action 26: Switch off stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_washing_machine_2079(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(oil,washing_machine_instance)
        else:
            exp(oil,washing_machine_instance)
    eff:
        unknown[oil]=False
        close[oil,washing_machine_instance]=True
        close[washing_machine_instance,oil]=True
    

behavior find_dry_pasta_2114_around_pot_78(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(dry_pasta,pot_instance)
        else:
            exp(dry_pasta,pot_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,pot_instance]=True
        close[pot_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior achieve_scrambled_egg(egg:item, fryingpan:item, spoon:item, stove:item):
    body:
        achieve_once on(egg, fryingpan)
        # Ensure the egg is in the frying pan
        achieve_once is_on(stove)
        # Ensure the stove is on
        achieve_once inhand(spoon)
        # Grab the wooden spoon
        achieve_once close_char(char, fryingpan)
        # Move close to the frying pan
        achieve dirty(egg)
        # Continuously stir the egg to scramble it

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Bind to the egg item
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind to the frying pan item
        bind spoon: item where:
            is_wooden_spoon(spoon)
        # Bind to the wooden spoon item
        bind stove: item where:
            is_stove(stove)
        # Bind to the stove item
        achieve_scrambled_egg(egg, fryingpan, spoon, stove)
        # Achieve the scrambled egg task

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_oven_127(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior stir_egg_in_fryingpan(egg:item, fryingpan:item, wooden_spoon:item):
    body:
        achieve_once inhand(wooden_spoon)
        # Temporarily hold the wooden spoon to stir the egg
        achieve once inside(egg, fryingpan)
        # Ensure the egg is inside the frying pan
        achieve inside_char(char, fryingpan)
        # Character should be close to the frying pan for stirring

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind wooden_spoon: item where:
            is_wooden_spoon(wooden_spoon)
        # Select a wooden spoon

        stir_egg_in_fryingpan(egg, fryingpan, wooden_spoon)
        # Stir the egg in the frying pan using the wooden spoon

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior achieve_scrambled_egg(egg:item, fryingpan:item, stove:item, wooden_spoon:item):
    body:
        achieve inside(egg, fryingpan)
        achieve inhand(wooden_spoon)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        bind wooden_spoon: item where:
            is_wooden_spoon(wooden_spoon)
        achieve_scrambled_egg(egg, fryingpan, stove, wooden_spoon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior scramble_egg(fryingpan:item, egg:item, spoon:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove
        achieve_once inside(egg, fryingpan)
        # Add egg into the fryingpan
        achieve_once inhand(spoon)
        # Hold wooden spoon
        achieve inside(egg, fryingpan)
        # Stir the egg in fryingpan with spoon

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select fryingpan
        bind egg: item where:
            is_food_egg(egg)
        # Select egg
        bind spoon: item where:
            is_wooden_spoon(spoon)
        # Select wooden spoon
        bind stove: item where:
            is_stove(stove)
        # Select stove

        scramble_egg(fryingpan, egg, spoon, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior scramble_egg(fryingpan:item, egg:item, spoon:item, stove:item):
    body:
        achieve_once is_on(stove)
        # Turn on the stove
        achieve_once inside(egg, fryingpan)
        # Add egg into the fryingpan
        achieve_once inhand(spoon)
        # Hold wooden spoon
        achieve inside(egg, fryingpan)
        # Stir the egg in fryingpan with spoon

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select fryingpan
        bind egg: item where:
            is_food_egg(egg)
        # Select egg
        bind spoon: item where:
            is_wooden_spoon(spoon)
        # Select wooden spoon
        bind stove: item where:
            is_stove(stove)
        # Select stove

        scramble_egg(fryingpan, egg, spoon, stove)

##############################
From agent.py-> find a plan in act()
switchon_executor(stove_2135)
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to stir the egg in the frying pan with the wooden spoon to complete the task of scrambling the egg.
##############################
From agent.py
Human Instruction: The robot needs to stir the egg in the frying pan with the wooden spoon to complete the task of scrambling the egg.

The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Switch on stove_2135.
Action 3: Walk to kitchen_counter_123.
Action 4: look for fryingpan_2154 around kitchen_counter_123.
Action 5: Walk to cupboard_117.
Action 6: look for fryingpan_2154 around cupboard_117.
Action 7: Walk to cupboard_118.
Action 8: Open cupboard_118.
Action 9: look for fryingpan_2154 around cupboard_118.
Action 10: Walk to table_199.
Action 11: look for fryingpan_2154 around table_199.
Action 12: Walk to fridge_126.
Action 13: Switch off fridge_126.
Action 14: Open fridge_126.
Action 15: look for fryingpan_2154 around fridge_126.
Action 16: Walk to microwave_135.
Action 17: Open microwave_135.
Action 18: look for fryingpan_2154 around microwave_135.
Action 19: Walk to food_egg_2092.
Action 20: Grab food_egg_2092.
Action 21: Walk to fryingpan_2154.
Action 22: Put food_egg_2092 into fryingpan_2154.
Action 23: Walk to wooden_spoon_2000.
Action 24: Grab wooden_spoon_2000.
Action 25: Walk to stove_2135.
Action 26: Switch off stove_2135.
Action 27: Switch on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_sink_19(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(oil,sink_instance)
        else:
            exp(oil,sink_instance)
    eff:
        unknown[oil]=False
        close[oil,sink_instance]=True
        close[sink_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior stir_egg(egg:item, fryingpan:item, wooden_spoon:item):
    body:
        achieve_once inhand(wooden_spoon) # Use the wooden spoon in hand
        achieve is_on(fryingpan) # Ensure the frying pan is on
        achieve inside(egg, fryingpan) # Ensure the egg is in the frying pan
        # Stir the egg in the frying pan using the wooden spoon to scramble it

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind wooden_spoon: item where:
            is_wooden_spoon(wooden_spoon)
        stir_egg(egg, fryingpan, wooden_spoon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_oven_127(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

behavior find_oil_2149_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior stir_egg_with_wooden_spoon(egg:item, fryingpan:item, wooden_spoon:item):
    body:
        achieve_once inhand(wooden_spoon)
        achieve_once close(char, fryingpan)
        achieve dirty(egg)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fryingpan)
        bind wooden_spoon: item where:
            is_wooden_spoon(wooden_spoon)

        stir_egg_with_wooden_spoon(egg, fryingpan, wooden_spoon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_food_salt_2041(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind food_salt_instance:item where:
            is_food_salt(food_salt_instance) and id[food_salt_instance]==2041
        achieve close_char(char,food_salt_instance)
        if can_open(food_salt_instance):
            achieve_once open(food_salt_instance)
            exp(food_butter,food_salt_instance)
        else:
            exp(food_butter,food_salt_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,food_salt_instance]=True
        close[food_salt_instance,food_butter]=True
    

behavior find_oil_2013_around_stovefan_125(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==125
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(oil,stovefan_instance)
        else:
            exp(oil,stovefan_instance)
    eff:
        unknown[oil]=False
        close[oil,stovefan_instance]=True
        close[stovefan_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_egg(egg:item, fryingpan:item, wooden_spoon:item, stove:item):
    body:
        achieve_once inside(egg, fryingpan)
        # Place the egg inside the frying pan
        achieve is_on(stove)
        # Make sure the stove is on for cooking
        achieve_once inhand(wooden_spoon)
        # Hold the wooden spoon to scramble the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Bind an item that is a food egg
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind an item that is a frying pan
        
        bind wooden_spoon: item where:
            is_wooden_spoon(wooden_spoon)
        # Bind an item that is a wooden spoon
        
        bind stove: item where:
            is_stove(stove)
        # Bind an item that is a stove
        
        scramble_egg(egg, fryingpan, wooden_spoon, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior stir_egg_with_spoon(fryingpan:item, wooden_spoon:item):
    body:
        achieve_once inhand(wooden_spoon) # Hold the wooden spoon temporarily
        achieve close_char(char, fryingpan) # Get close to the frying pan
        # Stir the egg in the fryingpan with the wooden spoon

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a fryingpan
        bind wooden_spoon: item where:
            is_wooden_spoon(wooden_spoon)
        # Select a wooden spoon
        stir_egg_with_spoon(fryingpan, wooden_spoon) # Execute behavior to stir the egg with the spoon

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior stir_egg_with_spoon(fryingpan:item, wooden_spoon:item):
    body:
        achieve_once inhand(wooden_spoon) # Hold the wooden spoon temporarily
        achieve close_char(char, fryingpan) # Get close to the frying pan
        # Stir the egg in the fryingpan with the wooden spoon

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a fryingpan
        bind wooden_spoon: item where:
            is_wooden_spoon(wooden_spoon)
        # Select a wooden spoon
        stir_egg_with_spoon(fryingpan, wooden_spoon) # Execute behavior to stir the egg with the spoon

##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the wooden_spoon_2000. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to stir the egg in the frying pan with the wooden spoon to complete the task of scrambling the egg.
##############################
Task Summary:
Task Goal:
Scramble egg by the fryingpan.
Action History:
['walk_executor(stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(kitchen_counter_123)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(table_199)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_egg_2092, fryingpan_2154)', 'walk_executor(wooden_spoon_2000)', 'grab_executor(wooden_spoon_2000)', 'walk_executor(stove_2135)', 'switchoff_executor(stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(fryingpan_2154)']
Time info:
Time consume: 212 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 10
goal correct times: 0
action_num: 22

Task complete rate:
Keystate: k1 - Requires: 7 steps
Keystate: k2 - Requires: 10 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
