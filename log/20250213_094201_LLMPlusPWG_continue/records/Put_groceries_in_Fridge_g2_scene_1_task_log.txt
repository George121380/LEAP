From agent.py
Reset goals: The sub-goals are: 
['Wash the fish at first. Then put milk, turkey, eggs, fish and chicken on one of the table in dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_turkey_2112_around_fridge_126(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_fish_2093_around_kitchen_counter_123(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior wash_fish(fish:item):
    body:
        achieve_once clean(fish)

behavior place_items_on_table(table:item, items:list):
    body:
        foreach item: item:
            if item in items:
                achieve_once on(item, table)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind table: item where:
            is_table(table)
        # Select any table
        
        # List of items to be placed on the table
        bind milk: item where:
            is_milk(milk)
        # Select milk
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey
        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind items: list where:
            milk in items and turkey in items and eggs in items and fish in items and chicken in items

        wash_fish(fish)
        place_items_on_table(table, [milk, turkey, eggs, fish, chicken])
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_turkey_2112_around_fridge_126(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_hanger_293_around_cupboard_117(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(hanger,cupboard_instance)
        else:
            exp(hanger,cupboard_instance)
    eff:
        unknown[hanger]=False
        close[hanger,cupboard_instance]=True
        close[cupboard_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish: item):
    body:
        achieve_once clean(fish)
        # Wash the fish to make it clean

behavior place_items_on_table(items: list[item], table: item):
    body:
        foreach item: item:
            if item in items:
                achieve_once on(item, table)
                # Place each item on the table

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select fish
        
        wash_fish(fish)

        bind table: item where:
            is_table(table)
        # Select a table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        symbol items = [milk, turkey, eggs, fish, chicken]
        place_items_on_table(items, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_turkey_2112_around_fridge_126(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_fish_2093_around_washing_machine_2079(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(food_fish,washing_machine_instance)
        else:
            exp(food_fish,washing_machine_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,washing_machine_instance]=True
        close[washing_machine_instance,food_fish]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        wash(fish)
        # Wash the fish to achieve its clean state

behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)
        # Place items on the dining room table

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind table: item where:
            is_table(table) and exists room: item : (is_dining_room(room) and inside(table, room))
        # Select a table inside the dining room

        wash_fish(fish)
        place_items_on_table(milk, turkey, eggs, fish, chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_turkey_2112_around_fridge_126(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        achieve_once dirty(fish)  # Ensure the fish is dirty before washing
        wash(fish)

behavior place_items_on_table(item_list:list, table:item):
    body:
        foreach item in item_list:
            achieve_once on(item, table)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind eggs: item where:
            is_food_egg(eggs)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind dining_table: item where:
            is_table(dining_table) and inside(dining_table, dining_room)
        # Assume dining_table refers to a table inside a dining room

        wash_fish(fish)

        symbol items_to_place = [milk, turkey, eggs, fish, chicken]
        place_items_on_table(items_to_place, dining_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_turkey_2112_around_fridge_126(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        achieve_once clean(fish)
        # The goal is to clean the fish

behavior place_items_on_table(table:item, items:[item]):
    body:
        foreach o: item in items:
            if grabbable(o):
                achieve_once on(o, table)
        # Place each item in the items list onto the table

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item

        bind table: item where:
            is_table(table) and surfaces(table)
        # Select the table with a surface to place items on

        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey item

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        wash_fish(fish)
        # Wash the fish to achieve the clean state

        place_items_on_table(table, [milk, turkey, eggs, fish, chicken])
        # Place the milk, turkey, eggs, fish, and chicken on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_turkey_2112_around_fridge_126(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        achieve_once clean(fish)
        # Clean the fish

behavior place_items_on_table(item_list: list, table:item):
    body:
        foreach item: item:
            if item in item_list:
                achieve_once on(item, table)
        # Place all specified items on the table

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select a fish to wash

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        wash_fish(fish)

        # Place milk, turkey, eggs, fish, and chicken on the table in the dining room
        place_items_on_table([milk, turkey, eggs, fish, chicken], table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "wash the fish at first. then put milk, turkey, eggs, fish and chicken on one of the table in dining room." ?
Answer: Wash the fish by putting it in a sink and washing it. Then put milk, turkey, eggs, fish, and chicken on one of the tables in the dining room.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_turkey_2112_around_fridge_126(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior wash_fish(fish:item, sink:item):
    body:
        achieve has_water(sink)
        # Ensure the sink has water
        achieve_once inhand(fish)
        # Hold the fish in hand
        wash(fish)
        # Wash the fish

behavior place_items_on_table(table:item, milk:item, turkey:item, eggs:item, fish:item, chicken:item):
    body:
        achieve_once on(milk, table)
        # Place the milk on the table
        achieve_once on(turkey, table)
        # Place the turkey on the table
        achieve_once on(eggs, table)
        # Place the eggs on the table
        achieve_once on(fish, table)
        # Place the fish on the table
        achieve_once on(chicken, table)
        # Place the chicken on the table

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        bind fish: item where:
            is_food_fish(fish)
        # Select a fish
        
        bind table: item where:
            is_table(table)
        # Select a table

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        wash_fish(fish, sink)
        place_items_on_table(table, milk, turkey, eggs, fish, chicken)
#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_fish_2093, fridge_126)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)walk_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(fridge_126)exp(food_turkey_2112, fridge_126)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_fish_2093, fridge_126)
Find food_fish_2093. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)walk_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(table_114)put_executor(milk_2115, table_114)walk_executor(food_turkey_2112)grab_executor(food_turkey_2112)walk_executor(table_114)put_executor(food_turkey_2112, table_114)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(table_114)put_executor(food_egg_2092, table_114)put_executor(food_fish_2093, table_114)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(table_114)put_executor(food_chicken_2089, table_114)
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_fish_2093 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(fridge_126)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. 
##############################
From agent.py
exp(milk_2115, fridge_126)
Fail to find milk_2115 around fridge_126. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Wash the fish at first. Then put milk, turkey, eggs, fish and chicken on one of the table in dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2152_around_table_114(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_fish(fish:item):
    body:
        achieve clean(fish)

behavior place_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and dirty(fish)
        # Find the fish that is dirty

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Bind to any table within the dining room

        clean_fish(fish)
        # Clean the fish

        bind milk: item where:
            is_milk(milk)
        # Find the milk item

        bind turkey: item where:
            is_food_turkey(turkey)
        # Find the turkey item

        bind eggs: item where:
            is_food_egg(eggs)
        # Find the eggs item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Find the chicken item

        place_on_table(milk, table)
        place_on_table(turkey, table)
        place_on_table(eggs, table)
        place_on_table(fish, table)
        place_on_table(chicken, table)
        # Place each item on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_milk_2115_around_cupboard_117(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(milk,cupboard_instance)
        else:
            exp(milk,cupboard_instance)
    eff:
        unknown[milk]=False
        close[milk,cupboard_instance]=True
        close[cupboard_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to wash the fish
        achieve_once clean(fish)
        # Clean the fish

behavior place_items_on_table(table:item, items:list):
    body:
        foreach item: item in items:
            achieve_once on(item, table)
            # Place each item on the table

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Bind a fish item
        
        bind faucet: item where:
            is_faucet(faucet)
        # Bind a faucet to use for washing

        wash_fish(fish, faucet)
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind a dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Bind a table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Bind milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Bind turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Bind eggs

        bind chicken: item where:
            is_food_chicken(chicken)
        # Bind chicken

        place_items_on_table(table, [milk, turkey, eggs, fish, chicken])

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item, sink:item):
    body:
        achieve_once clean(fish)
        # Wash the fish in the sink

behavior place_items_on_table(items:list[item], table:item):
    body:
        foreach item: item:
            if item in items:
                achieve_once on(item, table)
        # Place each item on the table

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish to be washed

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind sink: item where:
            is_sink(sink)
        # Select a sink for washing

        bind table: item where:
            is_table(table) 
        # Select a table in the dining room

        wash_fish(fish, sink)

        symbol items_to_place = [milk, turkey, eggs, fish, chicken]
        place_items_on_table(items_to_place, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_chair_2003_around_couch_198(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

behavior find_milk_2115_around_cupboard_117(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(milk,cupboard_instance)
        else:
            exp(milk,cupboard_instance)
    eff:
        unknown[milk]=False
        close[milk,cupboard_instance]=True
        close[cupboard_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item, sink:item):
    body:
        achieve_once inside(fish, sink) # Place the fish inside the sink
        # Assume washing the fish will clean it
        achieve clean(fish)

behavior place_items_on_table(items:list of item, table:item):
    body:
        foreach item: item in items:
            achieve_once on(item, table)
        # Place each item on the table

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==20
        # Select the sink with ID 20
        bind fish: item where:
            is_food_fish(fish) and id[fish]==2093
        # Select the fish with ID 2093
        wash_fish(fish, sink)

        bind table: item where:
            is_table(table) and inside_char(char, table) and is_dining_room(table)
        # Select a table in the dining room that the character is close to

        bind milk: item where:
            is_milk(milk) and id[milk]==2115
        # Select the milk with ID 2115

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        place_items_on_table([milk, turkey, eggs, fish, chicken], table)
        # Place the identified items on the selected table in the dining room

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_table_cloth_2005_around_table_199(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

behavior find_chair_271_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        wash(fish)

behavior place_items_on_table(milk:item, turkey:item, eggs:item, fish:item, chicken:item, table:item):
    body:
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(fish, table)
        achieve_once on(chicken, table)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        wash_fish(fish)
        
        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind eggs: item where:
            is_food_egg(eggs)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind table: item where:
            is_table(table) and exists room: item : (is_dining_room(room) and inside(table, room))
        place_items_on_table(milk, turkey, eggs, fish, chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish: item, sink: item):
    body:
        achieve_once clean(fish)
        # Ensure the fish is cleaned inside the sink

behavior place_items_on_table(items: list of item, table: item):
    body:
        foreach item: item in items:
            achieve_once on(item, table)
            # Place each item on the table

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink

        bind table: item where:
            is_table(table) and inside_char(char, table)
        # Select a table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk
        
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey
        
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        wash_fish(fish, sink)
        
        symbol items_to_place=[milk, turkey, eggs, fish, chicken]
        place_items_on_table(items_to_place, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "wash the fish at first. then put milk, turkey, eggs, fish and chicken on one of the table in dining room." ?
Answer: Wash the fish by putting it in a sink and washing it. Then, put milk, turkey, eggs, fish, and chicken on one of the tables in the dining room.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_lighter_2004_around_stovefan_125(lighter:item):
    goal: not unknown(lighter)
    body:
        assert is_lighter(lighter)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==125
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(lighter,stovefan_instance)
        else:
            exp(lighter,stovefan_instance)
    eff:
        unknown[lighter]=False
        close[lighter,stovefan_instance]=True
        close[stovefan_instance,lighter]=True
    

behavior find_table_cloth_2005_around_table_199(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

behavior find_instrument_guitar_2028_around_table_270(instrument_guitar:item):
    goal: not unknown(instrument_guitar)
    body:
        assert is_instrument_guitar(instrument_guitar)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(instrument_guitar,table_instance)
        else:
            exp(instrument_guitar,table_instance)
    eff:
        unknown[instrument_guitar]=False
        close[instrument_guitar,table_instance]=True
        close[table_instance,instrument_guitar]=True
    

behavior find_detergent_2011_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_shampoo_2019_around_bathroom_cabinet_17(shampoo:item):
    goal: not unknown(shampoo)
    body:
        assert is_shampoo(shampoo)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(shampoo,bathroom_cabinet_instance)
        else:
            exp(shampoo,bathroom_cabinet_instance)
    eff:
        unknown[shampoo]=False
        close[shampoo,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,shampoo]=True
    

behavior find_soap_2010_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_dining_room_table(item:item):
    symbol in_dining_room_table = exists dr: item: (is_table(dr) and is_dining_room(dining_room) and inside(dr, dining_room))
    return in_dining_room_table

behavior __goal__():
    body:
        
        bind sink: item where:
            is_sink(sink)
        # Select the sink that we are going to wash the fish in
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room where the table is located
        
        bind table: item where:
            is_table(table) and is_in_dining_room_table(table)
        # Select a table in the dining room where items will be placed

        bind milk: item where:
            is_milk(milk)
        # Identify the milk to be moved 

        bind turkey: item where:
            is_food_turkey(turkey)
        # Identify the turkey to be moved 

        bind eggs: item where:
            is_food_egg(eggs)
        # Identify the eggs to be moved 

        bind fish: item where:
            is_food_fish(fish)
        # Identify the fish Will be washed and then placed on the table

        bind chicken: item where:
            is_food_chicken(chicken)
        # Identify the chicken to be moved 

        # Wash the fish
        achieve_once clean(fish)
        
        # Move each item to be on the table in the dining room
        achieve_once on(fish, table)
        achieve_once on(milk, table)
        achieve_once on(turkey, table)
        achieve_once on(eggs, table)
        achieve_once on(chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_toilet_15(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==15
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(milk,toilet_instance)
        else:
            exp(milk,toilet_instance)
    eff:
        unknown[milk]=False
        close[milk,toilet_instance]=True
        close[toilet_instance,milk]=True
    

behavior find_food_food_2074_around_table_199(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_food,table_instance)
        else:
            exp(food_food,table_instance)
    eff:
        unknown[food_food]=False
        close[food_food,table_instance]=True
        close[table_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_organize_food():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        
        bind fish: item where:
            is_food_fish(fish)
        
        bind fridge: item where:
            is_fridge(fridge)
           
        achieve_once close_char(char, fish)
        # Get close to the fish
        
        achieve_once inhand(fish)
        # Hold the fish in your hand
        
        achieve_once close_char(char, faucet)
        # Get close to the faucet
        
        wash(fish)
        # Wash the fish
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        foreach item: item:
        # Gather the specified food items and place them on the table
            if (is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item)):
                achieve_once close_char(char, item)
                achieve_once inhand(item)
                achieve_once close_char(char, dining_room)
                achieve_once on(item, dining_room)

behavior __goal__():
    body:
        wash_and_organize_food()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_lighter_2004_around_nightstand_192(lighter:item):
    goal: not unknown(lighter)
    body:
        assert is_lighter(lighter)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(lighter,nightstand_instance)
        else:
            exp(lighter,nightstand_instance)
    eff:
        unknown[lighter]=False
        close[lighter,nightstand_instance]=True
        close[nightstand_instance,lighter]=True
    

behavior find_food_food_2074_around_table_199(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_food,table_instance)
        else:
            exp(food_food,table_instance)
    eff:
        unknown[food_food]=False
        close[food_food,table_instance]=True
        close[table_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
behavior wash(obj:item):
    body:
        achieve clean(obj)

behavior place_on_table(items: list, table: item):
    body:
        foreach item: item:
            if item in items:
                achieve_once on(item, table)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        wash(fish)
        
        bind table: item where:
            is_table(table)
        
        bind milk: item where:
            is_milk(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey)
        
        bind eggs: item where:
            is_food_egg(eggs)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        # Place milk, turkey, eggs, fish, and chicken on the table
        place_on_table([milk, turkey, eggs, fish, chicken], table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2152_around_cupboard_117(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_table_cloth_2005_around_table_199(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

behavior find_wooden_spoon_2000_around_cupboard_117(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(wooden_spoon,cupboard_instance)
        else:
            exp(wooden_spoon,cupboard_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cupboard_instance]=True
        close[cupboard_instance,wooden_spoon]=True
    

behavior find_chair_2003_around_couch_198(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

behavior find_bowl_2140_around_table_199(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior wash_fish(fish:item, faucet:item):
    body:
        achieve_once inhand(fish)
        achieve close_char(char, faucet)
        achieve_once clean(fish)

behavior place_on_table(obj:item, table:item):
    body:
        achieve_once on(obj, table)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select fish
        bind milk: item where:
            is_milk(milk)
        # Select milk
        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey
        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind table: item where:
            is_table(table) and exists room: item: (is_dining_room(room) and inside(table, room))
        # Select a table in the dining room
        
        wash_fish(fish, faucet)
        
        place_on_table(milk, table)
        place_on_table(turkey, table)
        place_on_table(eggs, table)
        place_on_table(fish, table)
        place_on_table(chicken, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_211_around_desk_193(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

behavior find_lighter_2004_around_kitchen_counter_123(lighter:item):
    goal: not unknown(lighter)
    body:
        assert is_lighter(lighter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(lighter,kitchen_counter_instance)
        else:
            exp(lighter,kitchen_counter_instance)
    eff:
        unknown[lighter]=False
        close[lighter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,lighter]=True
    

#exp_behavior_end

#goal_representation
behavior wash_fish(fish:item, sink:item):
    body:
        achieve_once inside(fish, sink)
        wash(fish)

behavior place_food_on_table(food:item, table:item):
    body:
        achieve_once on(food, table)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish
        
        bind sink: item where:
            is_sink(sink)
        # Select the sink
        
        bind table: item where:
            is_table(table) and is_dining_room(table)
        # Select a table in the dining room

        wash_fish(fish, sink)
        # Wash the fish

        foreach food: item:
            if is_milk(food) or is_food_turkey(food) or is_food_egg(food) or is_food_chicken(food) or food == fish:
                place_food_on_table(food, table)
        # Place milk, turkey, eggs, fish, and chicken on the table in the dining room
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_toilet_15(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==15
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(milk,toilet_instance)
        else:
            exp(milk,toilet_instance)
    eff:
        unknown[milk]=False
        close[milk,toilet_instance]=True
        close[toilet_instance,milk]=True
    

behavior find_food_food_2046_around_cupboard_117(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_food,cupboard_instance)
        else:
            exp(food_food,cupboard_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cupboard_instance]=True
        close[cupboard_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash(fish:item):
    body:
        achieve clean(fish) # Wash the fish to clean it

behavior place_items_on_table(table:item):
    body:
        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind eggs: item where:
            is_food_egg(eggs)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)
        
        achieve_once on(milk, table)
        # Place milk on the table
        achieve_once on(turkey, table)
        # Place turkey on the table
        achieve_once on(eggs, table)
        # Place eggs on the table
        achieve_once on(fish, table)
        # Place fish on the table
        achieve_once on(chicken, table)
        # Place chicken on the table

behavior __goal__():
    body:
        bind cleaned_fish: item where:
            is_food_fish(cleaned_fish) and clean(cleaned_fish)
        # Ensure the fish is washed and clean
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room
        
        wash(cleaned_fish) # Wash the fish to clean it
        place_items_on_table(table) # Place items on the table in the dining room

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_fish_2093)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_fish_2093)', 'switchoff_executor(faucet_20)', 'walk_executor(fridge_126)']
Time info:
Time consume: 311 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 0
goal generate times: 19
goal correct times: 0
action_num: 12

Task complete rate:
Keystate: k1 - Requires: 2 steps
Keystate: k2 - Requires: 12 steps
Action Completion Rate: 1.0
Scene_id: 1
##############################
