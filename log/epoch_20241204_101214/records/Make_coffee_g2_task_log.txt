From agent.py
Reset goals: The sub-goals are: 
['1. Make a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_coffee_filter_2000_around_coffee_table_2068(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(coffee_filter,coffee_table_instance)
        else:
            exp(coffee_filter,coffee_table_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffee_table_instance]=True
        close[coffee_table_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def in_kitchen_counter(coffee_maker:item):
    # Determine whether this coffee maker is on the kitchen counter
    symbol on_kitchen_counter=exists counter:item: is_kitchen_counter(counter) and on(coffee_maker, counter)
    return on_kitchen_counter

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        
        if not plugged(coffee_maker):
            achieve plugged(coffee_maker)
            
        if not on_kitchen_counter(coffee_maker):
            achieve on(coffee_maker, kitchen_counter)

        if not has_water(coffee_maker):
            achieve has_water(coffee_maker)
        
        if has_switch(coffee_maker):
            achieve is_on(coffee_maker)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function on_kitchen_counter not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2064_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_coffee_filter_2000_around_coffee_table_2068(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(coffee_filter,coffee_table_instance)
        else:
            exp(coffee_filter,coffee_table_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffee_table_instance]=True
        close[coffee_table_instance,coffee_filter]=True
    

behavior find_cup_2063_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#goal_representation
 
def in_kitchen_counter(coffee_maker:item):
    # Determine whether this coffee maker is on the kitchen counter
    symbol is_kitchen_counter_exists=exists counter:item: is_kitchen_counter(counter) and on(coffee_maker, counter)
    return is_kitchen_counter_exists

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        
        if not plugged(coffee_maker):
            achieve plugged(coffee_maker)
            
        if not is_kitchen_counter_exists(coffee_maker):
            achieve on(coffee_maker, kitchen_counter)

        if not has_water(coffee_maker):
            achieve has_water(coffee_maker)
        
        if has_switch(coffee_maker):
            achieve is_on(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_coffee_table_2068(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(coffee_filter,coffee_table_instance)
        else:
            exp(coffee_filter,coffee_table_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffee_table_instance]=True
        close[coffee_table_instance,coffee_filter]=True
    

behavior find_cup_2064_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_cup_2063_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker(obj:item):
    # Determine whether the object is a coffee maker
    symbol is_coffee_maker=exists item: item : is_coffe_maker(obj)
    return is_coffee_maker

def has_coffee_inside(coffee_maker:item):
    # Check if the coffee maker has coffee inside
    symbol has_coffee=exists o: item : is_food_coffee(o) and inside(o, coffee_maker)
    return has_coffee

behavior make_coffee(coffee_maker:item):
    body:
        if not has_coffee_inside(coffee_maker):
            # If the coffee maker doesnt have coffee inside, fill it with water and coffee grounds
            achieve has_water(coffee_maker)
            # Assume this state is achieved by the maker having water
            achieve closed(coffee_maker)
            # Close the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffee_maker(coffee_maker)
        achieve plugged(coffee_maker)
        achieve is_on(coffee_maker)
        make_coffee(coffee_maker)
        # Make a cup of coffee using the coffee maker

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

'Function is_food_coffee not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2063_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_cup_2064_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_coffee_filter_2000_around_table_226(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(coffee_filter,table_instance)
        else:
            exp(coffee_filter,table_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,table_instance]=True
        close[table_instance,coffee_filter]=True
    

#goal_representation
 
def is_coffee_maker(obj:item):
    # Determine whether the object is a coffee maker
    symbol is_coffee_maker=exists item: item : is_coffe_maker(obj)
    return is_coffee_maker

def has_coffee_inside(coffee_maker:item):
    # Check if the coffee maker has coffee inside
    symbol has_coffee=exists o: item : is_food_food(o) and inside(o, coffee_maker)
    return has_coffee

behavior make_coffee(coffee_maker:item):
    body:
        if not has_coffee_inside(coffee_maker):
            # If the coffee maker doesnt have coffee inside, fill it with water and coffee grounds
            achieve has_water(coffee_maker)
            # Assume this state is achieved by the maker having water
            achieve closed(coffee_maker)
            # Close the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffee_maker(coffee_maker)
        achieve plugged(coffee_maker)
        achieve is_on(coffee_maker)
        make_coffee(coffee_maker)
        # Make a cup of coffee using the coffee maker

#goal_representation_end

##############################
