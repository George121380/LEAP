############################################################
When the sub-task is: 1. Put cleaning solution in the dishwasher.
A successful representation:
 
behavior put_cleaning_solution_in_dishwasher(cleaning_solution:item, dishwasher:item):
    body:
        achieve inside(cleaning_solution, dishwasher)

behavior __goal__():
    body:
        bind cleaning_solution: item where:
            is_cleaning_solution(cleaning_solution)
        # Bind the cleaning solution
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Bind the dishwasher
        put_cleaning_solution_in_dishwasher(cleaning_solution, dishwasher)

############################################################
When the sub-task is: 2. Wash the bowls and plates with the dishwasher.
A successful representation:
 
def inside_dishwasher(o: item, dishwasher: item):
    # Check if an item is currently inside the dishwasher
    symbol is_inside = inside(o, dishwasher)
    return is_inside

behavior place_in_dishwasher(o: item, dishwasher: item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_cleaning(dishwasher: item):
    body:
        achieve closed(dishwasher) 
        achieve is_on(dishwasher) 

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher
        
        foreach o: item:
            if is_plate(o) or is_bowl(o):
                # Check for plates or bowls that are not already inside the dishwasher
                if not inside_dishwasher(o, dishwasher):
                    place_in_dishwasher(o, dishwasher)

        start_cleaning(dishwasher) # Start cleaning the items inside the dishwasher

############################################################
When the sub-task is: 1. Locate the basket that contains clothes.
A successful representation:
 
def locate_basket(basket: item, sink: item):
    # Function to check if the basket is located in the bathroom next to the sink
    symbol is_located = exists room: item : is_bathroom(room) and inside(basket, room) and close(basket, sink)
    return is_located

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)

        if exists basket: item : is_basket_for_clothes(basket) and locate_basket(basket, sink):
            # Check if the basket is already located in the known information
            bind basket: item where:
                is_basket_for_clothes(basket) and locate_basket(basket, sink)
            achieve close_char(char, basket) 
            # Move the character closer to the basket

        else:
            # If the basket is not found in the known information, start exploring to locate it
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket, "Check if the basket is near the sink in the bathroom")

############################################################
When the sub-task is: 2. Add the clothes to the washing machine.
A successful representation:
 
behavior add_clothes_to_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket)
        # Bind the basket for clothes

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Bind the washing machine

        foreach clothes: item:
            if is_clothes(clothes) and inside(clothes, basket):
                add_clothes_to_washing_machine(clothes, washing_machine)

############################################################
When the sub-task is: 3. Add soap to the washing machine.
A successful representation:
 
behavior put_soap_in_washing_machine(soap:item, washing_machine:item):
    body:
        achieve inside(soap, washing_machine)
        # Place the soap inside the washing machine

behavior __goal__():
    body:
        bind soap: item where:
            is_soap(soap)
        # Bind the soap

        bind washing_machine: item where:
            is_washing_machine(washing_machine) and id[washing_machine]==2007
        # Bind the washing machine with ID 2007

        put_soap_in_washing_machine(soap, washing_machine)

############################################################
When the sub-task is: 4. Run the washing machine.
A successful representation:
 
behavior start_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine) # Ensure the washing machine door is closed
        achieve is_on(washing_machine) # Turn on the washing machine

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine
        start_washing_machine(washing_machine) # Start the washing machine

############################################################
When the sub-task is: 1. Find a cup and fill it with milk.
A successful representation:
 
def has_milk(cup:item):
    # Function to check if there is milk in the cup
    symbol has_milk=exists o: item : is_milk(o) and inside(o, cup)
    return has_milk

behavior fill_cup_with_milk(cup:item, milk:item):
    body:
        achieve inside(milk, cup) # Ensure milk is inside the cup

behavior __goal__():
    body:
        if exists cup: item : is_cup(cup) and has_milk(cup):
            # If the cup with milk is already identified, we can directly approach it
            bind cup: item where:
                is_cup(cup) and has_milk(cup)
            achieve close_char(char, cup)

        else:
            # If the cup with milk is not yet found, locate a cup and fill it with milk
            bind cup: item where:
                is_cup(cup)
            bind milk: item where:
                is_milk(milk)
            fill_cup_with_milk(cup, milk)

############################################################
When the sub-task is: 2. Heat the cup of milk in the microwave.
A successful representation:

behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave)
        # Place the cup of milk inside the microwave
        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Bind the milk

        bind cup: item where:
            is_cup(cup) and inside(milk, cup)
        # Bind the cup that contains milk

        bind microwave: item where:
            is_microwave(microwave)
        # Bind the microwave
        
        heat_milk_in_microwave(cup, microwave)

############################################################
When the sub-task is: Slice the bread and then toast it.
A successful representation:
 
def is_food_bread(item: item):
    return is_food(item) and is_food_bread(item)

def is_cuttable_bread(bread: item):
    return is_food_bread(bread) and cuttable(bread)

behavior slice_bread(bread:item, cutting_board:item, knife:item):
    body:
        achieve on(bread, cutting_board)
        achieve_once inhand(knife)
        achieve cut(bread)

behavior toast_bread(sliced_bread:item, toaster:item):
    body:
        achieve inside(sliced_bread, toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_cuttable_bread(bread)
        bind toaster: item where:
            is_toaster(toaster)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind knife: item where:
            is_knife(knife)
        
        slice_bread(bread, cutting_board, knife)
        toast_bread(bread, toaster)

############################################################
When the sub-task is: Slice the chicken.
A successful representation:
 
def is_cuttable_chicken(chicken: item):
    return is_food_chicken(chicken) and cuttable(chicken)

behavior slice_chicken(chicken:item, cutting_board:item, knife:item):
    body:
        achieve on(chicken, cutting_board)
        achieve_once inhand(knife)
        achieve cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_cuttable_chicken(chicken)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind knife: item where:
            is_knife(knife)
        
        slice_chicken(chicken, cutting_board, knife)

############################################################
When the sub-task is: 1. Find a cup and fill it with water.
A successful representation:
 
def has_water_in_cup(cup: item):
    # Function to check if there is water in the cup
    symbol has_water = has_water(cup)
    return has_water

behavior fill_cup_with_water(cup: item):
    body:
        achieve has_water(cup)  # Ensure the cup is filled with water

behavior __goal__():
    body:
        if exists cup: item : is_cup(cup) and has_water_in_cup(cup):
            # Check if there is a cup filled with water based on available information
            bind cup: item where:
                is_cup(cup) and has_water_in_cup(cup)
            # Select cup filled with water
            achieve close_char(char, cup)
            # Move the character closer to the cup filled with water

        else:
            # If no such cup is found, identify a cup and fill it with water
            bind cup: item where:
                is_cup(cup)
            fill_cup_with_water(cup)

############################################################
When the sub-task is: Turn on the lights in the bathroom.
A successful representation:
 
behavior turn_on_bathroom_lights(light:item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind light: item where:
            is_light(light)
        turn_on_bathroom_lights(light)

############################################################
When the sub-task is: 1. Locate the book in the household.
A successful representation:
 
def locate_book_in_house(item: item):
    # Function to determine if an item is a book inside the household
    symbol is_located = is_book(item)
    return is_located

behavior __goal__():
    body:
        if exists book: item : locate_book_in_house(book):
            # Check if there is a known book in the household
            bind book: item where:
                locate_book_in_house(book)
            # Select the book
            achieve close_char(char, book)
            # Move the character closer to the book

        else:
            # If no book is identified, initiate exploration to locate it
            foreach item: item:
                if is_book(item) and not visited(item):
                    observe(item, "Is this the book Im looking for")
                    # Observe whether each unvisited item is the book

############################################################
When the sub-task is: 2. Place the book on the coffee table in the home office.
A successful representation:
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        bind book: item where:
            is_book(book)
        # Select the book

        place_book_on_table(book, coffee_table)
        # Place the book on the coffee table

############################################################
When the sub-task is: 1. Find the book and place it on the coffee table in the home office.
A successful representation:
 
# This function will help determine if a book is already on the coffee table in the home office
def book_on_coffee_table(book:item, table:item):
    symbol is_on_table = on(book, table)
    return is_on_table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        if exists book: item : is_book(book) and book_on_coffee_table(book, coffee_table):
            # Check if there is a book already on the coffee table
            bind book: item where:
                is_book(book) and book_on_coffee_table(book, coffee_table)
            achieve close_char(char, book)
            # Move the character closer to the book on the coffee table

        else:
            # If the book is not already on the coffee table, locate the book and place it there
            bind book: item where:
                is_book(book)
            # Select a book if not on the table
            achieve on(book, coffee_table)
            # Place the book on the coffee table

############################################################
When the sub-task is: 2. Open the window in the home office.
A successful representation:
 
behavior open_window(window:item):
    body:
        achieve open(window)
        # Open the window

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select the window inside the home office

        open_window(window)
        # Open the window in the home office

############################################################
When the sub-task is: Cut the chicken into pieces and then put it back in the fridge.
A successful representation:
 
behavior cut_chicken(chicken:item, cutting_board:item, knife:item):
    body:
        achieve on(chicken, cutting_board)
        achieve_once inhand(knife)
        achieve cut(chicken)

behavior store_chicken_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge)
        achieve closed(fridge)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind knife: item where:
            is_knife(knife)
        bind fridge: item where:
            is_fridge(fridge)
        
        cut_chicken(chicken, cutting_board, knife)
        store_chicken_in_fridge(chicken, fridge)

############################################################
When the sub-task is: 1. Find the spectacles and put them on the coffee table in the home office.
A successful representation:
 
def spectacles_on_coffee_table(spectacles:item, table:item):
    # Function to check if spectacles are already on the coffee table
    symbol is_on_table = on(spectacles, table)
    return is_on_table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        if exists spectacles: item : is_spectacles(spectacles) and spectacles_on_coffee_table(spectacles, coffee_table):
            # Check if spectacles are already on the coffee table
            bind spectacles: item where:
                is_spectacles(spectacles) and spectacles_on_coffee_table(spectacles, coffee_table)
            achieve close_char(char, spectacles)
            # Move the character closer to the spectacles on the coffee table

        else:
            # If the spectacles are not already on the coffee table, locate and place them there
            bind spectacles: item where:
                is_spectacles(spectacles)
            # Select spectacles if not on the table
            achieve on(spectacles, coffee_table)
            # Place the spectacles on the coffee table

############################################################
When the sub-task is: 2. Find the book and put it on the coffee table in the home office.
A successful representation:
 
behavior find_and_move_book(book:item, coffee_table:item):
    body:
        observe(book, "Check location of the book")
        # Check if the book is already on the coffee table
        if not on(book, coffee_table):
            achieve on(book, coffee_table)
            # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        find_and_move_book(book, coffee_table)
        # Move the book to the coffee table if not already there

############################################################
When the sub-task is: 1. Load the bowls and plates into the dishwasher and start it.
A successful representation:
behavior load_dishwasher(o: item, dishwasher: item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher: item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher
        foreach o: item:
        # Load all bowls and plates into the dishwasher
            if is_plate(o) or is_bowl(o):
                load_dishwasher(o, dishwasher)
        start_dishwasher(dishwasher) # Start the dishwasher
############################################################
When the sub-task is: 2. Wash the forks by hand.
A successful representation:
 
behavior wash_forks_by_hand(fork:item, sink:item):
    body:
        achieve_once inside(fork, sink)
        # Ensure the fork is placed inside the sink

        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room) and id[dining_room] == 201
        # Select the dining room with ID 201

        bind table: item where:
            is_table(table) and id[table] == 226
        # Select the table with ID 226

        bind sink: item where:
            is_sink(sink) and id[sink] == 231
        # Select the sink with ID 231

        foreach fork: item:
            if is_fork(fork) and close(fork, table):
                wash_forks_by_hand(fork, sink)
        # Wash each fork found near the specified table

############################################################
When the sub-task is: 2. Carefully wash the cat in the sink.
A successful representation:
 
def is_suitable_sink(sink:item):
    # Check if the sink is clean and has water available
    symbol is_suitable=clean(sink) and has_water(sink)
    return is_suitable

behavior carefully_wash_cat_in_sink(cat:item, sink:item):
    body:
        achieve_once inside(cat, sink)
        # Ensure the cat is placed inside the sink

        if is_suitable_sink(sink):
            wash(cat)
            # Wash the cat carefully in the sink

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select sink_42

        if not is_suitable_sink(sink):
            scrub(sink)
            # Clean the sink if it is not suitable
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            achieve_once is_off(faucet)
            # Turn the faucet on and off to ensure water availability

        carefully_wash_cat_in_sink(cat, sink)
        # Proceed to carefully wash the cat in the sink

############################################################
When the sub-task is: 1. Clean the chicken and onion.
A successful representation:
 
behavior clean_chicken(chicken:item):
    body:
        wash(chicken)
        achieve clean(chicken)
        # Ensure the chicken is clean

behavior clean_onion(onion:item):
    body:
        wash(onion)
        achieve clean(onion)
        # Ensure the onion is clean

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Identify the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Identify the onion

        clean_chicken(chicken)
        clean_onion(onion)

############################################################
When the sub-task is: 2. Put the chicken and onion into the oven to roast.
A successful representation:
 
behavior roast_chicken_and_onion(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        achieve inside(onion, oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven
        
        roast_chicken_and_onion(chicken, onion, oven)

############################################################
When the sub-task is: 1. Prepare a bowl of water.  
A successful representation:
 
def has_water_in_bowl(bowl: item):
    # Function to check if there is water in the bowl
    symbol contains_water = has_water(bowl)
    return contains_water

behavior fill_bowl_with_water(bowl: item):
    body:
        achieve has_water(bowl)  # Ensure the bowl is filled with water

behavior __goal__():
    body:
        if exists bowl: item : is_bowl(bowl) and has_water_in_bowl(bowl):
            # Check if there is a bowl already filled with water based on available information
            bind bowl: item where:
                is_bowl(bowl) and has_water_in_bowl(bowl)
            # Select bowl filled with water
            achieve close_char(char, bowl)
            # Move the character closer to the bowl filled with water

        else:
            # If no such bowl is found, identify a bowl and fill it with water
            bind bowl: item where:
                is_bowl(bowl)
            fill_bowl_with_water(bowl)

############################################################
When the sub-task is: 2. Place the bowl of water on the table in the home office.  
A successful representation:
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl of water on the table in the home office
############################################################
When the sub-task is: 3. Find your cat and place it on the table in the home office.
A successful representation:

behavior find_and_place_cat_on_table(cat:item, table:item):
    body:
        observe(cat, "Check location of the cat") 
        # Check if the cat is already on the table
        if not on(cat, table):
            achieve on(cat, table)
            # Place the cat on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind cat: item where:
            is_cat(cat)
        # Select the cat

        find_and_place_cat_on_table(cat, table)
        # Move the cat to the table if not already there

############################################################
When the sub-task is: Boil the rice by pot.
A successful representation:
behavior boil_rice_by_pot(pot:item, stove:item, rice:item, water:item):
    body:
        achieve has_water(pot)
        achieve inside(rice, pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot to use

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind water: item where:
            is_milk(water) or is_water(water) 
        # Select the water

        boil_rice_by_pot(pot, stove, rice, water)
############################################################
When the sub-task is: 1. Hand wash the jacket.
A successful representation:
 
behavior hand_wash_jacket(jacket: item, wash_basin: item):
    body:
        achieve inside(jacket, wash_basin)
        # Place the jacket inside the wash basin

        wash(jacket)
        # Wash the jacket by hand

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket

        bind wash_basin: item where:
            is_sink(wash_basin)
        # Select the wash basin

        hand_wash_jacket(jacket, wash_basin)
        # Execute the hand wash behavior on the jacket placed in the wash basin

############################################################
When the sub-task is: 2. Wash the jacket using the washing machine.
A successful representation:
behavior wash_jacket_in_washing_machine(jacket:item, washing_machine:item):
    body:
        achieve inside(jacket, washing_machine)
        achieve closed(washing_machine)
        achieve is_on(washing_machine)

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket) and clean(jacket)
        # Select the clean jacket

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        wash_jacket_in_washing_machine(jacket, washing_machine)
        # Wash the jacket in the washing machine
############################################################
When the sub-task is: Use a pot to boil some water.
A successful representation:
behavior boil_water_with_pot(pot:item, stove:item, water:item):
    body:
        achieve has_water(pot)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot to use

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind water: item where:
            is_milk(water) or is_water(water)
        # Select the water

        boil_water_with_pot(pot, stove, water)
