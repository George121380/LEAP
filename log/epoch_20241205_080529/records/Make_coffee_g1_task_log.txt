From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2063_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_coffee_maker(coffee_maker:item):
    # Check if the coffee maker contains water
    symbol contains_water = has_water(coffee_maker)
    return contains_water

def is_ready_for_coffee(cup:item, coffee_maker:item):
    # Check if the cup and coffee maker are in position and ready
    symbol ready = is_on(coffee_maker) and plugged(coffee_maker) and recipient(cup)
    return ready

behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        achieve inside(cup, coffee_maker) # Place the cup in the coffee maker
        achieve is_on(coffee_maker) # Turn on the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        if not has_water_in_coffee_maker(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker has water")
        
        if not is_ready_for_coffee(cup, coffee_maker):
            achieve plugged(coffee_maker)
            achieve is_on(coffee_maker)
        
        prepare_coffee(cup, coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_coffee_ready(coffee_maker: item):
    # Determine if the coffee maker has coffee ready
    symbol coffee_ready = is_on(coffee_maker)
    return coffee_ready

behavior make_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if not has_coffee_ready(coffee_maker):
            make_coffee(coffee_maker)
            # Turn on the coffee maker to make coffee

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_coffee_ready(coffee_maker: item):
    # Determine if the coffee maker has coffee ready
    symbol coffee_ready = is_on(coffee_maker)
    return coffee_ready

behavior make_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if not has_coffee_ready(coffee_maker):
            make_coffee(coffee_maker)
            # Turn on the coffee maker to make coffee

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(coffe_maker_290)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close coffe_maker_290. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
switchon_executor(coffe_maker_290)
Find drawing_174. Robot is inside dining_room_201. Robot is close coffe_maker_290. Robot is close kitchen_counter_230. 
##############################
From evaluation.py
cdl_dataset/dataset/Make_coffee/g1.txt
Checking k1
missed actions: switchoff_executor(coffe_maker_290);open_executor(coffe_maker_290);walk_executor(cup_2064);grab_executor(cup_2064);walk_executor(coffe_maker_290);putin_executor(cup_2064, coffe_maker_290);close_executor(coffe_maker_290);switchon_executor(coffe_maker_290);
missed action num: 8
##############################
From evaluation.py
cdl_dataset/dataset/Make_coffee/g1.txt
Checking k1
missed actions: switchoff_executor(coffe_maker_290);open_executor(coffe_maker_290);walk_executor(cup_2064);grab_executor(cup_2064);walk_executor(coffe_maker_290);putin_executor(cup_2064, coffe_maker_290);close_executor(coffe_maker_290);switchon_executor(coffe_maker_290);
missed action num: 8
##############################
