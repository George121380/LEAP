From agent.py
Reset goals: The sub-goals are: 
['Sit on the chair in front of the computer in the home office, then touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_mouse_413_around_computer_417(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair_and_turn_on_computer(chair:item, mouse:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

        achieve close(mouse, chair)
        # Ensure the mouse is close to the chair (in range to touch it)

        touch(mouse)
        # Touch the mouse to turn the computer on

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select the chair inside the home office

        bind mouse: item where:
            is_mouse(mouse) and inside(mouse, home_office)
        # Select the mouse inside the home office

        sit_on_chair_and_turn_on_computer(chair, mouse)
        # Execute the behavior to sit on the chair and turn on the computer by touching the mouse

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_mouse_166_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair_and_turn_on_computer(mouse:item, chair:item, computer:item):
    body:
        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

        achieve close_char(char, computer)
        # Ensure the character is close to the computer

        touch(mouse)
        # Turn on the computer by touching the mouse

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair which is close to the computer

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse which is close to the computer

        sit_on_chair_and_turn_on_computer(mouse, chair, computer)
        # Execute the behavior to sit on the chair and turn on the computer

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "sit on the chair in front of the computer in the home office, then touch the mouse near the computer to turn it on." ?
Answer: Get close to the computer in the home office. Then sit on the chair in front of the computer. Finally, touch the mouse to turn on the computer.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_mouse_166_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation

def chair_in_home_office(chair: item):
    # Function to check if a chair is inside the home office
    symbol is_in_home_office = is_chair(chair) and exists room: item : is_home_office(room) and inside(chair, room)
    return is_in_home_office

def mouse_near_computer(mouse: item, computer: item):
    # Function to check if the mouse is near the computer
    symbol is_near_computer = close(mouse, computer)
    return is_near_computer

behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)

behavior turn_on_computer_with_mouse(mouse: item):
    body:
        touch(mouse)
        achieve is_on(computer)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            chair_in_home_office(chair)
        # Select the chair inside the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        if exists mouse: item : is_mouse(mouse) and mouse_near_computer(mouse, computer):
            # Find the mouse near the computer
            bind mouse: item where:
                is_mouse(mouse) and mouse_near_computer(mouse, computer)
            # Select the mouse

            sit_on_chair(chair)
            turn_on_computer_with_mouse(mouse)

        else:
            foreach mouse: item:
                if is_mouse(mouse) and not visited(mouse):
                    observe(mouse, "Check if it is near the computer")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5841, column 59.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_103_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_mouse_166_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#goal_representation
 
def chair_in_home_office(chair: item):
    # Function to check if a chair is inside the home office
    symbol is_in_home_office = is_chair(chair) and exists room: item : is_home_office(room) and inside(chair, room)
    return is_in_home_office

def mouse_near_computer(mouse: item, computer: item):
    # Function to check if the mouse is near the computer
    symbol is_near_computer = close(mouse, computer)
    return is_near_computer

behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)

behavior turn_on_computer_with_mouse(mouse: item, computer: item):
    body:
        touch(mouse)
        achieve is_on(computer)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            chair_in_home_office(chair)
        # Select the chair inside the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        if exists mouse: item : is_mouse(mouse) and mouse_near_computer(mouse, computer):
            # Find the mouse near the computer
            bind mouse: item where:
                is_mouse(mouse) and mouse_near_computer(mouse, computer)
            # Select the mouse

            sit_on_chair(chair)
            turn_on_computer_with_mouse(mouse, computer)

        else:
            foreach mouse: item:
                if is_mouse(mouse) and not visited(mouse):
                    observe(mouse, "Check if it is near the computer")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5841, column 59.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_356_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_mouse_413_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#goal_representation
 
def chair_in_home_office(chair: item):
    # Function to check if a chair is inside the home office
    symbol is_in_home_office = is_chair(chair) and exists room: item : is_home_office(room) and inside(chair, room)
    return is_in_home_office

def mouse_near_computer(mouse: item, computer: item):
    # Function to check if the mouse is near the computer
    symbol is_near_computer = close(mouse, computer)
    return is_near_computer

behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)

behavior turn_on_computer_with_mouse(mouse: item, computer: item):
    body:
        touch(mouse)
        achieve is_on(computer)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            chair_in_home_office(chair)
        # Select the chair inside the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        if exists mouse: item : is_mouse(mouse) and mouse_near_computer(mouse, computer):
            # Find the mouse near the computer
            bind mouse: item where:
                is_mouse(mouse) and mouse_near_computer(mouse, computer)
            # Select the mouse

            sit_on_chair(chair)
            turn_on_computer_with_mouse(mouse, computer)

        else:
            foreach mouse: item:
                if is_mouse(mouse) and not visited(mouse):
                    observe(mouse, "Check if it is near the computer")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_mouse_413_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select the chair inside the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        achieve close_char(char, chair)
        # Approach the chair

        achieve on_char(char, chair)
        # Sit on the chair

        achieve close_char(char, mouse)
        # Approach the mouse

        achieve is_on(computer)
        # Ensure the computer is turned on
 
#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Get close to the computer in the home office.', '2. Sit on the chair in front of the computer.', '3. Touch the mouse to turn on the computer.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_mouse_413_around_computer_417(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_computer_close(char: character, computer: item):
    # Function to check if the character is close to a specific computer in the home office
    symbol is_close=close_char(char, computer)
    return is_close

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        if not is_home_office_computer_close(char, computer):
            # Check if character is not already close to the computer
            achieve close_char(char, computer)
            # Move the character close to the computer

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_home_office_computer_close(char: character, computer: item):
    # Function to check if the character is close to a specific computer in the home office
    symbol is_close=close_char(char, computer)
    return is_close

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        if not is_home_office_computer_close(char, computer):
            # Check if character is not already close to the computer
            achieve close_char(char, computer)
            # Move the character close to the computer

##############################
From agent.py-> find a plan in act()
walk_executor(computer_417)
##############################
From agent.py
walk_executor(computer_417)
Find chair_356. Find mouse_413. Find keyboard_415. Robot is inside home_office_319. Robot is close computer_417. Robot is no longer inside bathroom_1.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_chair_356(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==356
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_mouse_413_around_mouse_413(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==413
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the computer

        sit_on_chair(chair)
        # Sit on the chair in front of the computer

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the computer

        sit_on_chair(chair)
        # Sit on the chair in front of the computer

##############################
From agent.py-> find a plan in act()
walk_executor(chair_356)sit_executor(chair_356)
##############################
From agent.py
walk_executor(chair_356)
Robot is inside home_office_319. Robot is close chair_356. Robot is no longer close computer_417.
##############################
From agent.py
sit_executor(chair_356)
Find vacuum_cleaner_2070. Find headset_2062. Find mat_401. Find hanger_363. Find hanger_374. Find drawing_404. Find headset_2076. Find hanger_369. Find remote_control_2052. Find hanger_361. Find spectacles_2082. Find drawing_402. Find hanger_372. Find cat_2055. Find clothes_jacket_2047. Find book_2066. Find phone_2077. Find hanger_375. Find pencil_2001. Find pillow_405. Find hanger_367. Find hanger_359. Find dvd_player_2061. Find drawing_400. Find drawing_403. Find hanger_365. Find book_2067. Find hanger_376. Find pillow_406. Find hairbrush_2002. Robot is inside home_office_319. Robot is close chair_356. Robot is on chair_356. Robot is facing computer_417. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_166_around_desk_357(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(mouse,desk_instance)
        else:
            exp(mouse,desk_instance)
    eff:
        unknown[mouse]=False
        close[mouse,desk_instance]=True
        close[desk_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_computer(mouse:item):
    body:
        touch(mouse)
        # Touch the mouse to turn on the computer

behavior __goal__():
    body:
        bind mouse: item where:
            is_mouse(mouse)
        # Select the mouse
        turn_on_computer(mouse)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior turn_on_computer(mouse:item):
    body:
        touch(mouse)
        # Touch the mouse to turn on the computer

behavior __goal__():
    body:
        bind mouse: item where:
            is_mouse(mouse)
        # Select the mouse
        turn_on_computer(mouse)
##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(desk_357)exp(mouse_166, desk_357)standup_executor(char)walk_executor(mouse_166)touch_executor(mouse_166)
##############################
From agent.py
standup_executor(char)
Robot is inside home_office_319. Robot is close chair_356. Robot is on chair_356. Robot is facing computer_417. 
##############################
From agent.py
walk_executor(desk_357)
Robot is inside home_office_319. Robot is close desk_357. Robot is close floor_326. Robot is on chair_356. Robot is no longer close chair_356.Robot is no longer facing computer_417.
##############################
From agent.py
exp(mouse_166, desk_357)
Failed to find mouse_166 around desk_357. 
##############################
From agent.py-> find a plan in act()
walk_executor(mouse_413)exp(mouse_166, mouse_413)walk_executor(mouse_166)touch_executor(mouse_166)
##############################
From agent.py
walk_executor(mouse_413)
Robot is inside home_office_319. Robot is close desk_357. Robot is close mouse_413. Robot is close mousepad_414. Robot is on chair_356. Robot is no longer close floor_326.
##############################
From agent.py
exp(mouse_166, mouse_413)
Failed to find mouse_166 around mouse_413. 
##############################
From agent.py-> find a plan in act()
walk_executor(computer_170)exp(mouse_166, computer_170)walk_executor(mouse_166)touch_executor(mouse_166)
##############################
From agent.py
walk_executor(computer_170)
Find mouse_166. Find chair_103. Find keyboard_168. Find hanger_112. Find hanger_115. Find hanger_113. Robot is inside bedroom_67. Robot is close computer_170. Robot is on chair_356. Robot is no longer inside home_office_319.Robot is no longer close mousepad_414.Robot is no longer close desk_357.Robot is no longer close mouse_413.
##############################
From agent.py
exp(mouse_166, computer_170)
Find mouse_166. 
##############################
From agent.py-> find a plan in act()
walk_executor(mouse_166)touch_executor(mouse_166)
##############################
From agent.py
walk_executor(mouse_166)
Find drawing_175. Robot is inside bedroom_67. Robot is close desk_104. Robot is close mouse_166. Robot is close mousepad_167. Robot is on chair_356. Robot is no longer close computer_170.
##############################
From agent.py
touch_executor(mouse_166)
Robot is inside bedroom_67. Robot is close desk_104. Robot is close mouse_166. Robot is close mousepad_167. Robot is on chair_356. 
##############################
From evaluation.py
cdl_dataset/dataset/Write_an_email/g2.txt
Checking k1
missed actions: 
missed action num: 0
##############################
