From agent.py
Reset goals: The sub-goals are: 
['1. Find the nightstand.', '2. Place a cup of water on the nightstand.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior locate_nightstand(nightstand:item):
    body:
        achieve visited(nightstand)

behavior __goal__():
    body:
        if exists nightstand: item : is_nightstand(nightstand) and visited(nightstand):
            # Check if the nightstand has already been visited
            bind nightstand: item where:
                is_nightstand(nightstand) and visited(nightstand)
            achieve close_char(char, nightstand)
            # Move the character closer to the nightstand

        else:
            # If the nightstand is not found among the visited items, observe all unvisited nightstands
            foreach nightstand: item:
                if is_nightstand(nightstand) and not visited(nightstand):
                    observe(nightstand, "Check if this is the nightstand")
                    locate_nightstand(nightstand)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior locate_nightstand(nightstand:item):
    body:
        achieve visited(nightstand)

behavior __goal__():
    body:
        if exists nightstand: item : is_nightstand(nightstand) and visited(nightstand):
            # Check if the nightstand has already been visited
            bind nightstand: item where:
                is_nightstand(nightstand) and visited(nightstand)
            achieve close_char(char, nightstand)
            # Move the character closer to the nightstand

        else:
            # If the nightstand is not found among the visited items, observe all unvisited nightstands
            foreach nightstand: item:
                if is_nightstand(nightstand) and not visited(nightstand):
                    observe(nightstand, "Check if this is the nightstand")
                    locate_nightstand(nightstand)

##############################
From agent.py-> find a plan in act()
walk_executor(nightstand_100)open_executor(nightstand_100)obs(nightstand_100, Check if this is the nightstand)walk_executor(nightstand_102)obs(nightstand_102, Check if this is the nightstand)
##############################
From agent.py
walk_executor(nightstand_100)
Find mat_173. Find pillow_182. Find pillow_183. Find chair_106. Find drawing_176. Robot is inside bedroom_67. Robot is close nightstand_100. Robot is close floor_69. Robot is close mat_173. Robot is no longer inside bathroom_1.
##############################
From agent.py
open_executor(nightstand_100)
Robot is inside bedroom_67. Robot is close nightstand_100. Robot is close floor_69. Robot is close mat_173. 
##############################
From agent.py
obs(nightstand_100, Check if this is the nightstand)
Get this information:  tablelamp_97 is on nightstand_100. nightstand_100 is on floor_69. nightstand_100 is on mat_173. nightstand_100 is close to tablelamp_97. nightstand_100 is close to floor_68. nightstand_100 is close to floor_69. nightstand_100 is close to floor_70. nightstand_100 is close to bed_105. nightstand_100 is close to mat_173. nightstand_100 is close to wall_80. nightstand_100 is close to wall_81. nightstand_100 is close to curtain_179. nightstand_100 is close to curtain_180. nightstand_100 is close to pillow_182. nightstand_100 is close to pillow_183. nightstand_100 is close to window_86. nightstand_100 is close to character_65. nightstand_100 is inside bedroom_67. nightstand_100 is OPEN. nightstand_100 is CLEAN.
##############################
From agent.py
walk_executor(nightstand_102)
Robot is inside bedroom_67. Robot is close mat_173. Robot is close nightstand_102. Robot is close floor_71. Robot is no longer close nightstand_100.Robot is no longer close floor_69.
##############################
From agent.py
obs(nightstand_102, Check if this is the nightstand)
Get this information:  nightstand_102 is close to tablelamp_98. nightstand_102 is close to floor_70. nightstand_102 is close to floor_71. nightstand_102 is close to bed_105. nightstand_102 is close to chair_106. nightstand_102 is close to mat_173. nightstand_102 is close to wall_80. nightstand_102 is close to wall_82. nightstand_102 is close to curtain_181. nightstand_102 is close to pillow_182. nightstand_102 is close to pillow_183. nightstand_102 is close to window_86. nightstand_102 is close to character_65. tablelamp_98 is on nightstand_102. nightstand_102 is inside bedroom_67. nightstand_102 is facing drawing_176. nightstand_102 is on mat_173. nightstand_102 is on floor_71. nightstand_102 is OPEN. nightstand_102 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_cup_on_nightstand(cup:item, nightstand:item):
    body:
        achieve on(cup, nightstand)
        # Place the cup on the nightstand

behavior __goal__():
    body:
        bind nightstand: item where:
            is_nightstand(nightstand) and id[nightstand]==102
        # Select the nightstand with ID 102

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select a cup that has water

        place_cup_on_nightstand(cup, nightstand)
        # Place the cup of water on the nightstand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation

behavior place_cup_on_nightstand(cup:item, nightstand:item):
    body:
        achieve on(cup, nightstand)
        # Place the cup on the nightstand

behavior __goal__():
    body:
        bind nightstand: item where:
            is_nightstand(nightstand) and id[nightstand]==102
        # Select the nightstand with ID 102

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup with water

        place_cup_on_nightstand(cup, nightstand)
        # Place the cup on the nightstand

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place a cup of water on the nightstand." ?
Answer: Fill a cup with water and place it on the nightstand.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_water_on_nightstand(cup:item, nightstand:item):
    body:
        achieve on(cup, nightstand)

behavior __goal__():
    body:
        bind nightstand: item where:
            is_nightstand(nightstand) and id[nightstand]==102
        # Select the nightstand with ID 102

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup that has water

        place_water_on_nightstand(cup, nightstand)
        # Place the cup with water on the nightstand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_cup_on_nightstand(cup: item, nightstand: item):
    body:
        achieve on(cup, nightstand)
        # Place the cup on the nightstand

behavior __goal__():
    body:
        bind nightstand: item where:
            is_nightstand(nightstand) and visited(nightstand)
        # Select the visited nightstand

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup that is filled with water

        place_cup_on_nightstand(cup, nightstand)
        # Place the cup filled with water on the nightstand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_cup_on_nightstand(cup:item, nightstand:item):
    body:
        achieve on(cup, nightstand)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup with water

        bind nightstand: item where:
            is_nightstand(nightstand)
        # Select the nightstand
        
        place_cup_on_nightstand(cup, nightstand)
        # Place the cup of water on the nightstand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_cup_2063_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_food_apple_2009_around_fridge_289(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve_on(is_on(faucet))
        achieve has_water(cup)
        achieve_off(is_on(faucet))

behavior place_cup_on_nightstand(cup:item, nightstand:item):
    body:
        achieve on(cup, nightstand)
        # Place the cup on the nightstand

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind nightstand: item where:
            is_nightstand(nightstand)
        # Select the nightstand

        if not has_water(cup):
            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet to fill the cup with water
            fill_cup_with_water(cup, faucet)

        place_cup_on_nightstand(cup, nightstand)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_on not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2063_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_cup_2064_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(cup)
        achieve_off(is_on(faucet))

behavior place_cup_on_nightstand(cup:item, nightstand:item):
    body:
        achieve on(cup, nightstand)
        # Place the cup on the nightstand

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind nightstand: item where:
            is_nightstand(nightstand)
        # Select the nightstand

        if not has_water(cup):
            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet to fill the cup with water
            fill_cup_with_water(cup, faucet)

        place_cup_on_nightstand(cup, nightstand)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_off not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_apple_2009_around_fridge_289(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

behavior find_cup_2063_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(cup)
        achieve is_off(faucet)

behavior place_cup_on_nightstand(cup:item, nightstand:item):
    body:
        achieve on(cup, nightstand)
        # Place the cup on the nightstand

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind nightstand: item where:
            is_nightstand(nightstand)
        # Select the nightstand

        if not has_water(cup):
            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet to fill the cup with water
            fill_cup_with_water(cup, faucet)

        place_cup_on_nightstand(cup, nightstand)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_cup_2063_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_water_on_nightstand(cup: item, nightstand: item):
    # Function to check if the cup of water is already on the designated nightstand
    symbol is_on_nightstand = on(cup, nightstand) and has_water(cup)
    return is_on_nightstand

behavior place_cup_of_water_on_nightstand(cup: item, nightstand: item):
    body:
        achieve on(cup, nightstand)
        # Place the cup of water on the nightstand

behavior __goal__():
    body:
        bind nightstand: item where:
            is_nightstand(nightstand) and id[nightstand] == 102
        # Select the identified nightstand with ID 102
        if exists cup: item : is_cup(cup) and is_water_on_nightstand(cup, nightstand):
            # If a cup with water is already on the nightstand, move closer to confirm
            bind cup: item where:
                is_cup(cup) and is_water_on_nightstand(cup, nightstand)
            achieve close_char(char, cup)
            
        else:
            # If the cup of water is not on the nightstand, locate a cup with water or fill it first
            if exists cup: item : is_cup(cup) and has_water(cup):
                bind cup: item where:
                    is_cup(cup) and has_water(cup)
                place_cup_of_water_on_nightstand(cup, nightstand)
            else:
                bind cup: item where:
                    is_cup(cup)
                fill_cup_with_water(cup)
                place_cup_of_water_on_nightstand(cup, nightstand)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function fill_cup_with_water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2064_around_closetdrawer_148(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==148
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cup,closetdrawer_instance)
        else:
            exp(cup,closetdrawer_instance)
    eff:
        unknown[cup]=False
        close[cup,closetdrawer_instance]=True
        close[closetdrawer_instance,cup]=True
    

#goal_representation
 
def is_water_on_nightstand(cup: item, nightstand: item):
    # Function to check if the cup of water is already on the designated nightstand
    symbol is_on_nightstand = on(cup, nightstand) and has_water(cup)
    return is_on_nightstand

behavior place_cup_of_water_on_nightstand(cup: item, nightstand: item):
    body:
        achieve on(cup, nightstand)
        # Place the cup of water on the nightstand

behavior __goal__():
    body:
        bind nightstand: item where:
            is_nightstand(nightstand) and id[nightstand] == 102
        # Select the identified nightstand with ID 102
        if exists cup: item : is_cup(cup) and is_water_on_nightstand(cup, nightstand):
            # If a cup with water is already on the nightstand, move closer to confirm
            bind cup: item where:
                is_cup(cup) and is_water_on_nightstand(cup, nightstand)
            achieve close_char(char, cup)
            
        else:
            # If the cup of water is not on the nightstand, locate a cup with water or fill it first
            if exists cup: item : is_cup(cup) and has_water(cup):
                bind cup: item where:
                    is_cup(cup) and has_water(cup)
                place_cup_of_water_on_nightstand(cup, nightstand)
            else:
                bind cup: item where:
                    is_cup(cup)
                is_sink(cup)
                place_cup_of_water_on_nightstand(cup, nightstand)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Expr statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
