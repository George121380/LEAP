From agent.py
Reset goals: The sub-goals are: 
['Iron the pair of pants.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_pants_2085_around_closetdrawer_148(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==148
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_pants,closetdrawer_instance)
        else:
            exp(clothes_pants,closetdrawer_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
def has_ironed_pants(pants: item):
    # Function to check if the pants are ironed
    symbol ironed = clean(pants)
    return ironed

behavior iron_pants(pants:item, iron:item, ironing_board:item):
    body:
        achieve close_char(char, ironing_board)
        # Move close to the ironing board
        achieve on(pants, ironing_board)
        # Place pants on the ironing board
        achieve_once inhand(iron)
        # Hold the iron in hand, if required for ironing
        achieve is_on(iron)
        # Ensure the iron is on

behavior __goal__():
    body:
        bind pants: item where:
            is_clothes_pants(pants)
        # Select the pants to be ironed

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        
        if not has_ironed_pants(pants):
            iron_pants(pants, iron, ironing_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_pants_2085_around_closetdrawer_148(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==148
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_pants,closetdrawer_instance)
        else:
            exp(clothes_pants,closetdrawer_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_pants]=True
    

behavior find_basket_for_clothes_2006_around_dresser_358(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(basket_for_clothes,dresser_instance)
        else:
            exp(basket_for_clothes,dresser_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,dresser_instance]=True
        close[dresser_instance,basket_for_clothes]=True
    

#exp_behavior_end

#goal_representation

def is_suitable_iron(iron:item):
    # Check if the iron is plugged in and on
    symbol is_suitable=plugged(iron) and is_on(iron)
    return is_suitable

behavior prepare_ironing_area(pants:item, ironing_board:item):
    body:
        achieve on(pants, ironing_board)
        # Place the pants on the ironing board

behavior iron_pants(pants:item, iron:item):
    body:
        if is_suitable_iron(iron):
            achieve_once inhand(iron)
            achieve clean(pants)
            # Iron the pants

behavior __goal__():
    body:
        bind pants: item where:
            is_clothes_pants(pants)
        # Bind the pants

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Bind the ironing board

        bind iron: item where:
            is_iron(iron)
        # Bind the iron

        prepare_ironing_area(pants, ironing_board)

        if not is_suitable_iron(iron):
            achieve plugged(iron)
            achieve is_on(iron)
            # Ensure the iron is suitable for use

        iron_pants(pants, iron)

#goal_representation_end

##############################
From agent.py->reset_goal

def is_suitable_iron(iron:item):
    # Check if the iron is plugged in and on
    symbol is_suitable=plugged(iron) and is_on(iron)
    return is_suitable

behavior prepare_ironing_area(pants:item, ironing_board:item):
    body:
        achieve on(pants, ironing_board)
        # Place the pants on the ironing board

behavior iron_pants(pants:item, iron:item):
    body:
        if is_suitable_iron(iron):
            achieve_once inhand(iron)
            achieve clean(pants)
            # Iron the pants

behavior __goal__():
    body:
        bind pants: item where:
            is_clothes_pants(pants)
        # Bind the pants

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Bind the ironing board

        bind iron: item where:
            is_iron(iron)
        # Bind the iron

        prepare_ironing_area(pants, ironing_board)

        if not is_suitable_iron(iron):
            achieve plugged(iron)
            achieve is_on(iron)
            # Ensure the iron is suitable for use

        iron_pants(pants, iron)

##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_148)exp(clothes_pants_2085, closetdrawer_148)walk_executor(clothes_pants_2085)grab_executor(clothes_pants_2085)walk_executor(ironing_board_2074)put_executor(clothes_pants_2085, ironing_board_2074)exp(iron_2089, ironing_board_2074)walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)grab_executor(iron_2089)walk_executor(clothes_pants_2085)wash_executor(clothes_pants_2085)
##############################
From agent.py
walk_executor(closetdrawer_148)
Find hanger_128. Find hanger_130. Find hanger_136. Find hanger_138. Find hanger_140. Find hanger_141. Find hanger_142. Find hanger_124. Find hanger_110. Find hanger_132. Find hanger_113. Find mat_173. Find hanger_134. Find hanger_126. Find hanger_111. Find hanger_114. Find hanger_109. Find hanger_112. Find hanger_115. Robot is inside bedroom_67. Robot is close dresser_123. Robot is close closetdrawer_148. Robot is close closetdrawer_158. Robot is no longer inside bathroom_1.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g2.txt
Checking k1
missed actions: walk_executor(clothes_pants_2085);wash_executor(clothes_pants_2085);
missed action num: 2
##############################
From agent.py
exp(clothes_pants_2085, closetdrawer_148)
Failed to find clothes_pants_2085 around closetdrawer_148. 
##############################
From agent.py-> find a plan in act()
walk_executor(hanger_134)exp(clothes_pants_2085, hanger_134)walk_executor(clothes_pants_2085)grab_executor(clothes_pants_2085)walk_executor(ironing_board_2074)put_executor(clothes_pants_2085, ironing_board_2074)exp(iron_2089, ironing_board_2074)walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)grab_executor(iron_2089)walk_executor(clothes_pants_2085)wash_executor(clothes_pants_2085)
##############################
From agent.py
walk_executor(hanger_134)
Robot is inside bedroom_67. Robot is close dresser_123. Robot is close hanger_134. Robot is no longer close closetdrawer_148.Robot is no longer close closetdrawer_158.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g2.txt
Checking k1
missed actions: walk_executor(clothes_pants_2085);wash_executor(clothes_pants_2085);
missed action num: 2
##############################
From agent.py
exp(clothes_pants_2085, hanger_134)
Failed to find clothes_pants_2085 around hanger_134. 
##############################
From agent.py-> find a plan in act()
walk_executor(hanger_140)exp(clothes_pants_2085, hanger_140)walk_executor(clothes_pants_2085)grab_executor(clothes_pants_2085)walk_executor(ironing_board_2074)put_executor(clothes_pants_2085, ironing_board_2074)exp(iron_2089, ironing_board_2074)walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)grab_executor(iron_2089)walk_executor(clothes_pants_2085)wash_executor(clothes_pants_2085)
##############################
From agent.py
walk_executor(hanger_140)
Robot is inside bedroom_67. Robot is close dresser_123. Robot is close hanger_140. Robot is no longer close hanger_134.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g2.txt
Checking k1
missed actions: walk_executor(clothes_pants_2085);wash_executor(clothes_pants_2085);
missed action num: 2
##############################
From agent.py
exp(clothes_pants_2085, hanger_140)
Failed to find clothes_pants_2085 around hanger_140. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Iron the pair of pants.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_pants_2085_around_dresser_358(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_pants,dresser_instance)
        else:
            exp(clothes_pants,dresser_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,dresser_instance]=True
        close[dresser_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
def is_available_ironing_board(ironing_board:item):
    # Check if the ironing board is free and accessible
    symbol available=exists room: item : inside(ironing_board, room) and achieves(inhand) 
    return available

behavior iron_pants(ironing_board:item, iron:item, pants:item):
    body:
        achieve close_char(char, ironing_board)
        # Ensure close to ironing board
        achieve plugged(iron)
        achieve is_on(iron)
        # Ensure iron is on and ready
        achieve on(pants, ironing_board)
        # Iron pants
        
behavior __goal__():
    body:
        bind pants: item where:
            is_clothes_pants(pants) and id[pants]==2085
        # Bind clothes_pants_2085

        if not is_available_ironing_board(ironing_board):
            # If no ironing board available, observe the scene
            foreach ironing_board: item:
                if is_ironing_board(ironing_board) and not visited(ironing_board):
                    observe(ironing_board, "check availability")
                    # Use observe to determine if ironing board is free

        else:
            # If ironing board is available, proceed with ironing pants
            bind ironing_board: item where:
                is_ironing_board(ironing_board)
            bind iron: item where:
                is_iron(iron)
            iron_pants(ironing_board, iron, pants)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: inhand; available variables: [Variable<ironing_board: item>, Variable<room: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_pants_2085_around_hanger_141(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==141
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_pants,hanger_instance)
        else:
            exp(clothes_pants,hanger_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,hanger_instance]=True
        close[hanger_instance,clothes_pants]=True
    

#goal_representation
 
def is_available_ironing_board(ironing_board:item):
    # Check if the ironing board is free and accessible
    symbol available=exists room: item : inside(ironing_board, room) and achieves(inhand) 
    return available

behavior iron_pants(ironing_board:item, iron:item, pants:item):
    body:
        achieve close_char(char, ironing_board)
        # Ensure close to ironing board
        achieve plugged(iron)
        achieve is_on(iron)
        # Ensure iron is on and ready
        achieve on(pants, ironing_board)
        # Iron pants
        
behavior __goal__():
    body:
        bind pants: item where:
            is_clothes_pants(pants) and id[pants]==2085
        # Bind clothes_pants_2085

        if not is_available_ironing_board(ironing_board):
            # If no ironing board available, observe the scene
            foreach ironing_board: item:
                if is_ironing_board(ironing_board) and not visited(ironing_board):
                    observe(ironing_board, "check availability")
                    # Use observe to determine if ironing board is free

        else:
            # If ironing board is available, proceed with ironing pants
            bind ironing_board: item where:
                is_ironing_board(ironing_board)
            bind iron: item where:
                is_iron(iron)
            iron_pants(ironing_board, iron, pants)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: inhand; available variables: [Variable<ironing_board: item>, Variable<room: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_pants_2085_around_hanger_136(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==136
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_pants,hanger_instance)
        else:
            exp(clothes_pants,hanger_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,hanger_instance]=True
        close[hanger_instance,clothes_pants]=True
    

#goal_representation
 
def is_available_ironing_board(ironing_board:item):
    # Check if the ironing board is free and accessible
    symbol available=exists room: item : inside(ironing_board, room) and achieves(inhand)
    return available

behavior iron_pants(ironing_board:item, iron:item, pants:item):
    body:
        achieve close_char(char, ironing_board)
        # Ensure close to ironing board
        achieve plugged(iron)
        achieve is_on(iron)
        # Ensure iron is on and ready
        achieve on(pants, ironing_board)
        # Iron pants
        
behavior __goal__():
    body:
        bind pants: item where:
            is_clothes_pants(pants) and id[pants]==2085
        # Bind clothes_pants_2085

        if not exists ironing_board: item : is_available_ironing_board(ironing_board):
            # If no ironing board available, observe the scene
            foreach ironing_board: item:
                if is_ironing_board(ironing_board) and not visited(ironing_board):
                    observe(ironing_board, "check availability")
                    # Use observe to determine if ironing board is free

        else:
            # If ironing board is available, proceed with ironing pants
            bind ironing_board: item where:
                is_ironing_board(ironing_board)
            bind iron: item where:
                is_iron(iron)
            iron_pants(ironing_board, iron, pants)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_clothes_pants_2085_around_hanger_112(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==112
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_pants,hanger_instance)
        else:
            exp(clothes_pants,hanger_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,hanger_instance]=True
        close[hanger_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_pants(pants:item, ironing_board:item, iron:item):
    body:
        achieve on(pants, ironing_board)
        # Place the pants on the ironing board

        achieve_once inhand(iron)
        # Grasp the iron to proceed with ironing

        plugged(iron)
        # Ensure the iron is plugged in for operation

        achieve is_on(iron)
        # Turn on the iron for use

behavior __goal__():
    body:
        bind pants: item where:
            is_clothes_pants(pants)
        # Select the pair of pants

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select an ironing board

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        iron_pants(pants, ironing_board, iron)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Expr statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
