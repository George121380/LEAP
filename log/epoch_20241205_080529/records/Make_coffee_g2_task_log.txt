From agent.py
Reset goals: The sub-goals are: 
['1. Use the coffee maker to make a cup of coffee.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2063_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_and_plugged(coffee_maker: item):
    # Function to check if coffee maker has water and is plugged in
    symbol has_water_and_plugged = has_water(coffee_maker) and plugged(coffee_maker)
    return has_water_and_plugged

behavior prepare_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to prepare coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        
        if not has_water_and_plugged(coffee_maker):
            # If coffee maker is not ready, take necessary actions
            observe(coffee_maker, "Check if coffee maker has water and is plugged in")

        prepare_coffee(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_water_and_plugged(coffee_maker: item):
    # Function to check if coffee maker has water and is plugged in
    symbol has_water_and_plugged = has_water(coffee_maker) and plugged(coffee_maker)
    return has_water_and_plugged

behavior prepare_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to prepare coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        
        if not has_water_and_plugged(coffee_maker):
            # If coffee maker is not ready, take necessary actions
            observe(coffee_maker, "Check if coffee maker has water and is plugged in")

        prepare_coffee(coffee_maker)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Check if coffee maker has water and is plugged in)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(coffe_maker_290)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close coffe_maker_290. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
open_executor(coffe_maker_290)
Find drawing_174. Robot is inside dining_room_201. Robot is close coffe_maker_290. Robot is close kitchen_counter_230. 
##############################
From agent.py
obs(coffe_maker_290, Check if coffee maker has water and is plugged in)
Get this information:  coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is CLEAN. coffe_maker_290 is OFF. coffe_maker_290 is OPEN. coffe_maker_290 is PLUGGED_IN.
##############################
From agent.py
close_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close coffe_maker_290. Robot is close kitchen_counter_230. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close coffe_maker_290. Robot is close kitchen_counter_230. 
##############################
From agent.py
Human Instruction: The sub-task is incomplete because it is unclear whether the coffee maker contains water, which is essential for making coffee. You need to ensure that the coffee maker has water before proceeding with making coffee. Once confirmed or corrected, you can turn on the coffee maker to prepare the coffee.

The actions you have taken:
Action 1: Walk to coffe_maker_290.
Action 2: Open coffe_maker_290.
Action 3: Observe around coffe_maker_290 with the question of Check if coffee maker has water and is plugged in.
Action 4: Close coffe_maker_290.
Action 5: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_dry_pasta_2042_around_cupboard_229(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_food_2022_around_fridge_289(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_inside(coffee_maker:item):
    # Function to check if there is water inside the coffee maker
    symbol has_water=exists water: item : has_water(coffee_maker)
    return has_water

behavior confirm_water(coffee_maker:item):
    body:
        if not has_water_inside(coffee_maker):
            observe(coffee_maker, "Check if coffee maker has water")
            achieve has_water(coffee_maker)

behavior prepare_coffee(coffee_maker:item):
    body:
        achieve plugged(coffee_maker) # Ensure the coffee maker is plugged in
        achieve is_on(coffee_maker) # Turn on the coffee maker to prepare the coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Ensure the coffee maker has water before proceeding
        confirm_water(coffee_maker)
        # Prepare coffee using the coffee maker
        prepare_coffee(coffee_maker)

#goal_representation_end

##############################
Error is:
tuple.index(x): x not in tuple
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_148(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==148
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_water_in_coffee_maker(coffee_maker:item):
    symbol has_water=exists o: item: has_water(o) and inside(o, coffee_maker)
    return has_water

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker) # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind the coffee maker

        if not ensure_water_in_coffee_maker(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker has water")
            # Observe the coffee maker to ensure it has water

        if ensure_water_in_coffee_maker(coffee_maker):
            start_coffee_maker(coffee_maker) # Start the coffee maker

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def ensure_water_in_coffee_maker(coffee_maker:item):
    symbol has_water=exists o: item: has_water(o) and inside(o, coffee_maker)
    return has_water

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker) # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind the coffee maker

        if not ensure_water_in_coffee_maker(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker has water")
            # Observe the coffee maker to ensure it has water

        if ensure_water_in_coffee_maker(coffee_maker):
            start_coffee_maker(coffee_maker) # Start the coffee maker

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Check if the coffee maker has water)
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close coffe_maker_290. Robot is close kitchen_counter_230. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close coffe_maker_290. Robot is close kitchen_counter_230. 
##############################
From agent.py
obs(coffe_maker_290, Check if the coffee maker has water)
Get this information:  coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is CLEAN. coffe_maker_290 is OFF. coffe_maker_290 is OPEN. coffe_maker_290 is PLUGGED_IN.
##############################
From agent.py
Human Instruction: Ensure the coffee maker has water before turning it on to make coffee.

The actions you have taken:
Action 1: Walk to coffe_maker_290.
Action 2: Open coffe_maker_290.
Action 3: Observe around coffe_maker_290 with the question of Check if coffee maker has water and is plugged in.
Action 4: Close coffe_maker_290.
Action 5: Switch on coffe_maker_290.
Action 6: Switch off coffe_maker_290.
Action 7: Open coffe_maker_290.
Action 8: Observe around coffe_maker_290 with the question of Check if the coffee maker has water.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_148(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==148
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if the coffee maker has water
    symbol has_water=exists o: item : has_water(o) and inside(o, coffee_maker)
    return has_water

behavior make_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker) # Ensure the coffee maker is turned on

behavior ensure_water_in_coffee_maker(coffee_maker:item):
    body:
        if not has_water_in_coffee_maker(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker has water")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind the coffee maker

        ensure_water_in_coffee_maker(coffee_maker) # Ensure the coffee maker has water
        make_coffee(coffee_maker) # Make coffee using the coffee maker

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_water_in_coffee_maker(coffee_maker:item):
    # Function to check if the coffee maker has water
    symbol has_water=exists o: item : has_water(o) and inside(o, coffee_maker)
    return has_water

behavior make_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker) # Ensure the coffee maker is turned on

behavior ensure_water_in_coffee_maker(coffee_maker:item):
    body:
        if not has_water_in_coffee_maker(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker has water")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind the coffee maker

        ensure_water_in_coffee_maker(coffee_maker) # Ensure the coffee maker has water
        make_coffee(coffee_maker) # Make coffee using the coffee maker

##############################
From agent.py-> find a plan in act()
obs(coffe_maker_290, Check if the coffee maker has water)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
obs(coffe_maker_290, Check if the coffee maker has water)
Get this information:  coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is CLEAN. coffe_maker_290 is OFF. coffe_maker_290 is OPEN. coffe_maker_290 is PLUGGED_IN.
##############################
From agent.py
close_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close coffe_maker_290. Robot is close kitchen_counter_230. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close coffe_maker_290. Robot is close kitchen_counter_230. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
def contains_milk_and_sugar(cup: item):
    # Function to check if the cup contains milk and sugar
    symbol has_all_ingredients = exists milk: item : is_milk(milk) and inside(milk, cup)
    symbol has_sugar = exists sugar: item : is_food_sugar(sugar) and inside(sugar, cup)
    return has_all_ingredients and has_sugar

behavior add_milk_and_sugar(cup: item, milk: item, sugar: item):
    body:
        achieve inside(milk, cup) # Add milk to the cup
        achieve inside(sugar, cup) # Add sugar to the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Bind the cup containing coffee to work with

        if not contains_milk_and_sugar(cup):
            bind milk: item where:
                is_milk(milk)
            # Bind the milk item to add

            bind sugar: item where:
                is_food_sugar(sugar)
            # Bind the sugar item to add

            add_milk_and_sugar(cup, milk, sugar)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def contains_milk_and_sugar(cup: item):
    # Function to check if the cup contains milk and sugar
    symbol has_all_ingredients = exists milk: item : is_milk(milk) and inside(milk, cup)
    symbol has_sugar = exists sugar: item : is_food_sugar(sugar) and inside(sugar, cup)
    return has_all_ingredients and has_sugar

behavior add_milk_and_sugar(cup: item, milk: item, sugar: item):
    body:
        achieve inside(milk, cup) # Add milk to the cup
        achieve inside(sugar, cup) # Add sugar to the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Bind the cup containing coffee to work with

        if not contains_milk_and_sugar(cup):
            bind milk: item where:
                is_milk(milk)
            # Bind the milk item to add

            bind sugar: item where:
                is_food_sugar(sugar)
            # Bind the sugar item to add

            add_milk_and_sugar(cup, milk, sugar)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_sugar_2039, cupboard_229)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer close coffe_maker_290.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)putin_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
grab_executor(milk_2043)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot is inside dining_room_201. Robot is close milk_2043. Robot is close kitchen_counter_230. Robot is close cup_2063. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot is inside dining_room_201. Robot is close milk_2043. Robot is close kitchen_counter_230. Robot is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_sugar_2039)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_sugar_2039. Robot is no longer close milk_2043.Robot is no longer close kitchen_counter_230.Robot is no longer close cup_2063.
##############################
From agent.py
grab_executor(food_sugar_2039)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_sugar_2039. Grabbing food_sugar_2039 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot is inside dining_room_201. Robot is close food_sugar_2039. Robot is close kitchen_counter_230. Robot is close cup_2063. Robot is no longer close fridge_289.
##############################
From agent.py
putin_executor(food_sugar_2039, cup_2063)
Robot is inside dining_room_201. Robot is close food_sugar_2039. Robot is close kitchen_counter_230. Robot is close cup_2063. food_sugar_2039 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Make_coffee/g2.txt
Checking k1
missed actions: walk_executor(coffe_maker_290);switchoff_executor(coffe_maker_290);open_executor(coffe_maker_290);walk_executor(cup_2064);grab_executor(cup_2064);walk_executor(coffe_maker_290);putin_executor(cup_2064, coffe_maker_290);close_executor(coffe_maker_290);switchon_executor(coffe_maker_290);walk_executor(milk_2043);grab_executor(milk_2043);walk_executor(cup_2064);putin_executor(milk_2043, cup_2064);walk_executor(food_sugar_2039);grab_executor(food_sugar_2039);walk_executor(cup_2064);putin_executor(food_sugar_2039, cup_2064);
missed action num: 17
##############################
From evaluation.py
cdl_dataset/dataset/Make_coffee/g2.txt
Checking k1
missed actions: walk_executor(coffe_maker_290);switchoff_executor(coffe_maker_290);open_executor(coffe_maker_290);walk_executor(cup_2064);grab_executor(cup_2064);walk_executor(coffe_maker_290);putin_executor(cup_2064, coffe_maker_290);close_executor(coffe_maker_290);switchon_executor(coffe_maker_290);walk_executor(milk_2043);grab_executor(milk_2043);walk_executor(cup_2064);putin_executor(milk_2043, cup_2064);walk_executor(food_sugar_2039);grab_executor(food_sugar_2039);walk_executor(cup_2064);putin_executor(food_sugar_2039, cup_2064);
missed action num: 17
##############################
