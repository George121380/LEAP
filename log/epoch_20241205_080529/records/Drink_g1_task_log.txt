From agent.py
Reset goals: The sub-goals are: 
['Get a cup, fill it with water, and place it where desired.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_cup_2063_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_cup(cup: item):
    # Function to check if there is water in the cup
    symbol has_water = has_water(cup)
    return has_water

behavior fill_cup_with_water(cup: item):
    body:
        achieve has_water(cup)  # Ensure the cup is filled with water

behavior place_cup_where_desired(cup: item, desired_location: item):
    body:
        achieve on(cup, desired_location)  # Place the cup at the desired location

behavior __goal__():
    body:
        bind desired_location: item where:
            is_table(desired_location) or is_kitchen_counter(desired_location)
        # Select a desired location to place the cup

        if exists cup: item : is_cup(cup) and has_water_in_cup(cup):
            # Check if there is a cup filled with water based on available information
            bind cup: item where:
                is_cup(cup) and has_water_in_cup(cup)
            # Select cup filled with water
            achieve close_char(char, cup)
            # Move the character closer to the cup filled with water

        else:
            # If no such cup is found, identify a cup and fill it with water
            bind cup: item where:
                is_cup(cup)
            fill_cup_with_water(cup)
            
        # Place the cup at the desired location
        place_cup_where_desired(cup, desired_location)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cup; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2063_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#goal_representation
 
def has_water_in_cup(cup: item):
    # Function to check if there is water in the cup
    symbol has_water = has_water(cup)
    return has_water

behavior fill_cup_with_water(cup: item):
    body:
        achieve has_water(cup)  # Ensure the cup is filled with water

behavior place_cup_where_desired(cup: item, desired_location: item):
    body:
        achieve on(cup, desired_location)  # Place the cup at the desired location

behavior __goal__():
    body:
        bind desired_location: item where:
            is_table(desired_location) or is_kitchen_counter(desired_location)
        # Select a desired location to place the cup

        if exists cup: item : is_cup(cup) and has_water_in_cup(cup):
            # Check if there is a cup filled with water based on available information
            bind cup: item where:
                is_cup(cup) and has_water_in_cup(cup)
            # Select cup filled with water
            achieve close_char(char, cup)
            # Move the character closer to the cup filled with water

        else:
            # If no such cup is found, identify a cup and fill it with water
            bind cup: item where:
                is_cup(cup)
            fill_cup_with_water(cup)
            
        # Place the cup at the desired location
        place_cup_where_desired(cup, desired_location)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cup; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_cup_2063_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_food_apple_2009_around_kitchen_counter_230(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_apple,kitchen_counter_instance)
        else:
            exp(food_apple,kitchen_counter_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_apple]=True
    

#goal_representation
 
def has_water_in_cup(cup: item):
    # Function to check if there is water in the cup
    symbol has_water = has_water(cup)
    return has_water

behavior fill_cup_with_water(cup: item):
    body:
        achieve has_water(cup)  # Ensure the cup is filled with water

behavior place_cup_where_desired(cup: item, desired_location: item):
    body:
        achieve on(cup, desired_location)  # Place the cup at the desired location

behavior __goal__():
    body:
        bind desired_location: item where:
            is_table(desired_location) or is_kitchen_counter(desired_location)
        # Select a desired location to place the cup

        if exists cup: item : is_cup(cup) and has_water_in_cup(cup):
            # Check if there is a cup filled with water based on available information
            bind cup: item where:
                is_cup(cup) and has_water_in_cup(cup)
            # Select cup filled with water
            achieve close_char(char, cup)
            # Move the character closer to the cup filled with water

        else:
            # If no such cup is found, identify a cup and fill it with water
            bind cup: item where:
                is_cup(cup)
            fill_cup_with_water(cup)
            
        # Place the cup at the desired location
        place_cup_where_desired(cup, desired_location)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior get_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup) # Ensure the cup is filled with water

behavior place_cup(cup:item, target_location:item):
    body:
        achieve on(cup, target_location)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Bind a cup

        get_cup(cup)
        fill_cup_with_water(cup)

        bind target_location: item where:
            surfaces(target_location)
        # Bind a target location with a surface

        place_cup(cup, target_location)
        # Place the filled cup of water on the target location

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior get_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup) # Ensure the cup is filled with water

behavior place_cup(cup:item, target_location:item):
    body:
        achieve on(cup, target_location)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Bind a cup

        get_cup(cup)
        fill_cup_with_water(cup)

        bind target_location: item where:
            surfaces(target_location)
        # Bind a target location with a surface

        place_cup(cup, target_location)
        # Place the filled cup of water on the target location

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(cup_2063, stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(cup_2063, cutting_board_2051)
##############################
From agent.py
walk_executor(cup_2063)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Find basket_for_clothes_2006. Find towel_rack_34. Find towel_rack_32. Find towel_rack_31. Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. Robot is no longer inside dining_room_201.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchon_executor(faucet_43)
Find drawing_176. Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From agent.py
put_executor(cup_2063, cutting_board_2051)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. cup_2063 released by right hand. 
##############################
From agent.py
Human Instruction: The cup needs to be filled with water. The robot switched the faucet on and off but didn't explicitly perform the action of holding the cup under the faucet to fill it with water. Complete this action before proceeding further.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for cup_2063 around kitchen_counter_230.
Action 3: Walk to cup_2063.
Action 4: Grab cup_2063.
Action 5: Walk to faucet_43.
Action 6: Switch on faucet_43.
Action 7: Switch off faucet_43.
Action 8: Walk to cutting_board_2051.
Action 9: Put cup_2063 on cutting_board_2051.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_apple_2009_around_fridge_289(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

behavior find_spectacles_2082_around_couch_352(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(spectacles,couch_instance)
        else:
            exp(spectacles,couch_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,couch_instance]=True
        close[couch_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
behavior get_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        achieve close_char(char, faucet)
        achieve_once is_on(faucet)
        achieve_once is_off(faucet)

behavior place_cup(cup:item, destination:item):
    body:
        achieve on(cup, destination)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind faucet: item where:
            is_faucet(faucet)
        bind destination: item where:
            id[destination] == 2051 # Assuming destination is the cutting board with this ID

        get_cup(cup)
        fill_cup_with_water(cup, faucet)
        place_cup(cup, destination)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior get_cup(cup:item):
    body:
        achieve_once inhand(cup)

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        achieve close_char(char, faucet)
        achieve_once is_on(faucet)
        achieve_once is_off(faucet)

behavior place_cup(cup:item, destination:item):
    body:
        achieve on(cup, destination)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        bind faucet: item where:
            is_faucet(faucet)
        bind destination: item where:
            id[destination] == 2051 # Assuming destination is the cutting board with this ID

        get_cup(cup)
        fill_cup_with_water(cup, faucet)
        place_cup(cup, destination)
##############################
From agent.py-> find a plan in act()
grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(cup_2063, cutting_board_2051)
##############################
From agent.py
grab_executor(cup_2063)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. Robot is no longer inside dining_room_201.Robot is no longer close cutting_board_2051.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchon_executor(faucet_43)
Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From agent.py
put_executor(cup_2063, cutting_board_2051)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. cup_2063 released by right hand. 
##############################
From agent.py
Human Instruction: The cup needs to be explicitly held under the faucet while it is on to ensure it gets filled with water. The robot should perform this action before placing the cup at the desired location.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for cup_2063 around kitchen_counter_230.
Action 3: Walk to cup_2063.
Action 4: Grab cup_2063.
Action 5: Walk to faucet_43.
Action 6: Switch on faucet_43.
Action 7: Switch off faucet_43.
Action 8: Walk to cutting_board_2051.
Action 9: Put cup_2063 on cutting_board_2051.
Action 10: Grab cup_2063.
Action 11: Walk to faucet_43.
Action 12: Switch on faucet_43.
Action 13: Switch off faucet_43.
Action 14: Walk to cutting_board_2051.
Action 15: Put cup_2063 on cutting_board_2051.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)  # Ensure the cup is filled with water
        achieve_once inhand(cup)  # The cup must be in hand temporarily
        achieve is_on(faucet)
        # Make sure the faucet is on

def desired_location_for_cup(cup: item, location: item):
    symbol is_desired = on(cup, location)
    return is_desired

behavior place_cup(cup: item, location: item):
    body:
        achieve on(cup, location)  # Place the cup at the desired location

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind location: item where:
            is_cutting_board(location) and id[location] == 2051
        # Select the desired location for the cup

        fill_cup_with_water(cup, faucet)
        place_cup(cup, location)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)  # Ensure the cup is filled with water
        achieve_once inhand(cup)  # The cup must be in hand temporarily
        achieve is_on(faucet)
        # Make sure the faucet is on

def desired_location_for_cup(cup: item, location: item):
    symbol is_desired = on(cup, location)
    return is_desired

behavior place_cup(cup: item, location: item):
    body:
        achieve on(cup, location)  # Place the cup at the desired location

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind location: item where:
            is_cutting_board(location) and id[location] == 2051
        # Select the desired location for the cup

        fill_cup_with_water(cup, faucet)
        place_cup(cup, location)

##############################
From agent.py-> find a plan in act()
grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)walk_executor(cutting_board_2051)put_executor(cup_2063, cutting_board_2051)
##############################
From agent.py
grab_executor(cup_2063)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. Robot is no longer inside dining_room_201.Robot is no longer close cutting_board_2051.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchon_executor(faucet_43)
Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From agent.py
put_executor(cup_2063, cutting_board_2051)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. cup_2063 released by right hand. 
##############################
