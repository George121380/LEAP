From agent.py
Reset goals: The sub-goals are: 
['1. Prepare a bowl of water.  ', '2. Place the bowl of water on the table in the home office.  ', '3. Find your cat and place it on the table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_bowl_2072_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_bowl_2071_around_kitchen_counter_230(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_bowl(bowl: item):
    # Function to check if there is water in the bowl
    symbol contains_water = has_water(bowl)
    return contains_water

behavior fill_bowl_with_water(bowl: item):
    body:
        achieve has_water(bowl)  # Ensure the bowl is filled with water

behavior __goal__():
    body:
        if exists bowl: item : is_bowl(bowl) and has_water_in_bowl(bowl):
            # Check if there is a bowl already filled with water based on available information
            bind bowl: item where:
                is_bowl(bowl) and has_water_in_bowl(bowl)
            # Select bowl filled with water
            achieve close_char(char, bowl)
            # Move the character closer to the bowl filled with water

        else:
            # If no such bowl is found, identify a bowl and fill it with water
            bind bowl: item where:
                is_bowl(bowl)
            fill_bowl_with_water(bowl)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_water_in_bowl(bowl: item):
    # Function to check if there is water in the bowl
    symbol contains_water = has_water(bowl)
    return contains_water

behavior fill_bowl_with_water(bowl: item):
    body:
        achieve has_water(bowl)  # Ensure the bowl is filled with water

behavior __goal__():
    body:
        if exists bowl: item : is_bowl(bowl) and has_water_in_bowl(bowl):
            # Check if there is a bowl already filled with water based on available information
            bind bowl: item where:
                is_bowl(bowl) and has_water_in_bowl(bowl)
            # Select bowl filled with water
            achieve close_char(char, bowl)
            # Move the character closer to the bowl filled with water

        else:
            # If no such bowl is found, identify a bowl and fill it with water
            bind bowl: item where:
                is_bowl(bowl)
            fill_bowl_with_water(bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(bowl_2071, kitchen_counter_230)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(bowl_2071);grab_executor(bowl_2071);walk_executor(faucet_43);switchon_executor(faucet_43);switchoff_executor(faucet_43);walk_executor(coffee_table_2068);put_executor(bowl_2071, coffee_table_2068);
missed action num: 7
##############################
From agent.py
exp(bowl_2071, kitchen_counter_230)
Failed to find bowl_2071 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_355)exp(bowl_2071, table_355)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(table_355)
Find mat_401. Find remote_control_2052. Find spectacles_2082. Find clothes_jacket_2047. Find cat_2055. Find pillow_405. Find drawing_400. Find pillow_406. Find drawing_404. Find hairbrush_2002. Find vacuum_cleaner_2070. Find headset_2062. Robot is inside home_office_319. Robot is close couch_352. Robot is close mat_401. Robot is close table_355. Robot is no longer inside dining_room_201.Robot is no longer close kitchen_counter_230.
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(bowl_2071);grab_executor(bowl_2071);walk_executor(faucet_43);switchon_executor(faucet_43);switchoff_executor(faucet_43);walk_executor(coffee_table_2068);put_executor(bowl_2071, coffee_table_2068);
missed action num: 7
##############################
From agent.py
exp(bowl_2071, table_355)
Failed to find bowl_2071 around table_355. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)exp(bowl_2071, pot_2069)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close kitchen_counter_230. Robot is no longer inside home_office_319.Robot is no longer close couch_352.Robot is no longer close mat_401.Robot is no longer close table_355.
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(bowl_2071);grab_executor(bowl_2071);walk_executor(faucet_43);switchon_executor(faucet_43);switchoff_executor(faucet_43);walk_executor(coffee_table_2068);put_executor(bowl_2071, coffee_table_2068);
missed action num: 7
##############################
From agent.py
open_executor(pot_2069)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close kitchen_counter_230. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(bowl_2071);grab_executor(bowl_2071);walk_executor(faucet_43);switchon_executor(faucet_43);switchoff_executor(faucet_43);walk_executor(coffee_table_2068);put_executor(bowl_2071, coffee_table_2068);
missed action num: 7
##############################
From agent.py
exp(bowl_2071, pot_2069)
Failed to find bowl_2071 around pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(bowl_2071, cupboard_229)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cupboard_229)
Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. Robot is no longer close pot_2069.Robot is no longer close kitchen_counter_230.
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(bowl_2071);grab_executor(bowl_2071);walk_executor(faucet_43);switchon_executor(faucet_43);switchoff_executor(faucet_43);walk_executor(coffee_table_2068);put_executor(bowl_2071, coffee_table_2068);
missed action num: 7
##############################
From agent.py
open_executor(cupboard_229)
Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(bowl_2071);grab_executor(bowl_2071);walk_executor(faucet_43);switchon_executor(faucet_43);switchoff_executor(faucet_43);walk_executor(coffee_table_2068);put_executor(bowl_2071, coffee_table_2068);
missed action num: 7
##############################
From agent.py
exp(bowl_2071, cupboard_229)
Failed to find bowl_2071 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(dresser_358)open_executor(dresser_358)exp(bowl_2071, dresser_358)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(dresser_358)
Robot is inside home_office_319. Robot is close closetdrawer_384. Robot is close closetdrawer_388. Robot is close dresser_358. Robot is close hanger_359. Robot is close closetdrawer_392. Robot is close hanger_361. Robot is close closetdrawer_394. Robot is close hanger_363. Robot is close hanger_365. Robot is close hanger_367. Robot is close hanger_369. Robot is close hanger_372. Robot is close hanger_374. Robot is close hanger_375. Robot is close hanger_376. Robot is close closetdrawer_377. Robot is close closetdrawer_380. Robot is close closetdrawer_382. Robot is no longer inside dining_room_201.Robot is no longer close wall_211.Robot is no longer close cupboard_229.
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(bowl_2071);grab_executor(bowl_2071);walk_executor(faucet_43);switchon_executor(faucet_43);switchoff_executor(faucet_43);walk_executor(coffee_table_2068);put_executor(bowl_2071, coffee_table_2068);
missed action num: 7
##############################
From agent.py
open_executor(dresser_358)
Robot is inside home_office_319. Robot is close closetdrawer_384. Robot is close closetdrawer_388. Robot is close dresser_358. Robot is close hanger_359. Robot is close closetdrawer_392. Robot is close hanger_361. Robot is close closetdrawer_394. Robot is close hanger_363. Robot is close hanger_365. Robot is close hanger_367. Robot is close hanger_369. Robot is close hanger_372. Robot is close hanger_374. Robot is close hanger_375. Robot is close hanger_376. Robot is close closetdrawer_377. Robot is close closetdrawer_380. Robot is close closetdrawer_382. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(bowl_2071);grab_executor(bowl_2071);walk_executor(faucet_43);switchon_executor(faucet_43);switchoff_executor(faucet_43);walk_executor(coffee_table_2068);put_executor(bowl_2071, coffee_table_2068);
missed action num: 7
##############################
From agent.py
exp(bowl_2071, dresser_358)
Failed to find bowl_2071 around dresser_358. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_counter_41)exp(bowl_2071, bathroom_counter_41)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(bathroom_counter_41)
Find towel_rack_34. Find towel_rack_32. Find towel_rack_31. Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is no longer inside home_office_319.Robot is no longer close closetdrawer_384.Robot is no longer close closetdrawer_388.Robot is no longer close dresser_358.Robot is no longer close hanger_359.Robot is no longer close closetdrawer_392.Robot is no longer close hanger_361.Robot is no longer close closetdrawer_394.Robot is no longer close hanger_363.Robot is no longer close hanger_365.Robot is no longer close hanger_367.Robot is no longer close hanger_369.Robot is no longer close hanger_372.Robot is no longer close hanger_374.Robot is no longer close hanger_375.Robot is no longer close hanger_376.Robot is no longer close closetdrawer_377.Robot is no longer close closetdrawer_380.Robot is no longer close closetdrawer_382.
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(bowl_2071);grab_executor(bowl_2071);walk_executor(faucet_43);switchon_executor(faucet_43);switchoff_executor(faucet_43);walk_executor(coffee_table_2068);put_executor(bowl_2071, coffee_table_2068);
missed action num: 7
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2071 ?
Answer: Go to dining_room_201. Once inside, locate table_226. You will find bowl_2071 on top of table_226.

##############################
From agent.py
Human Instruction: Go to dining_room_201. Once inside, locate table_226. You will find bowl_2071 on top of table_226.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: Walk to table_355.
Action 4: look for bowl_2071 around table_355.
Action 5: Walk to pot_2069.
Action 6: Open pot_2069.
Action 7: look for bowl_2071 around pot_2069.
Action 8: Walk to cupboard_229.
Action 9: Open cupboard_229.
Action 10: look for bowl_2071 around cupboard_229.
Action 11: Walk to dresser_358.
Action 12: Open dresser_358.
Action 13: look for bowl_2071 around dresser_358.
Action 14: Walk to bathroom_counter_41.

##############################
From agent.py
exp(bowl_2071, bathroom_counter_41)
Failed to find bowl_2071 around bathroom_counter_41. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(bowl_2071, table_226)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(table_226)
Find coffee_filter_2000. Find bowl_2071. Find drawing_2003. Find bowl_2072. Find mat_236. Find fork_2080. Find fork_2081. Find mat_237. Robot is inside dining_room_201. Robot is close table_226. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_41.
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(bowl_2071);grab_executor(bowl_2071);walk_executor(faucet_43);switchon_executor(faucet_43);switchoff_executor(faucet_43);walk_executor(coffee_table_2068);put_executor(bowl_2071, coffee_table_2068);
missed action num: 7
##############################
From agent.py
exp(bowl_2071, table_226)
Find bowl_2071. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(bowl_2071)
Robot is inside dining_room_201. Robot is close table_226. Robot is close bowl_2071. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: grab_executor(bowl_2071);walk_executor(faucet_43);switchon_executor(faucet_43);switchoff_executor(faucet_43);walk_executor(coffee_table_2068);put_executor(bowl_2071, coffee_table_2068);
missed action num: 6
##############################
From agent.py
grab_executor(bowl_2071)
Robot is inside dining_room_201. Robot is close table_226. Robot is close bowl_2071. Grabbing bowl_2071 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(faucet_43);switchon_executor(faucet_43);switchoff_executor(faucet_43);walk_executor(coffee_table_2068);put_executor(bowl_2071, coffee_table_2068);
missed action num: 5
##############################
From agent.py
walk_executor(faucet_43)
Find basket_for_clothes_2006. Robot is inside bathroom_1. Robot is close bowl_2071. Robot is close bathroom_counter_41. Robot is close faucet_43. Robot is no longer inside dining_room_201.Robot is no longer close table_226.
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: switchon_executor(faucet_43);switchoff_executor(faucet_43);walk_executor(coffee_table_2068);put_executor(bowl_2071, coffee_table_2068);
missed action num: 4
##############################
From agent.py
switchon_executor(faucet_43)
Robot is inside bathroom_1. Robot is close bowl_2071. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(coffee_table_2068);put_executor(bowl_2071, coffee_table_2068);
missed action num: 2
##############################
From agent.py
switchoff_executor(faucet_43)
Robot is inside bathroom_1. Robot is close bowl_2071. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: walk_executor(coffee_table_2068);put_executor(bowl_2071, coffee_table_2068);
missed action num: 2
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior arrange_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        arrange_bowl_on_table(bowl, table)
        # Place the bowl with water on the table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior arrange_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        arrange_bowl_on_table(bowl, table)
        # Place the bowl with water on the table in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)put_executor(bowl_2071, coffee_table_2068)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot is inside home_office_319. Robot is close bowl_2071. Robot is close coffee_table_2068. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: put_executor(bowl_2071, coffee_table_2068);
missed action num: 1
##############################
From agent.py
put_executor(bowl_2071, coffee_table_2068)
Robot is inside home_office_319. Robot is close bowl_2071. Robot is close coffee_table_2068. bowl_2071 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k1
missed actions: 
missed action num: 0
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k2
missed actions: walk_executor(cat_2055);grab_executor(cat_2055);walk_executor(coffee_table_2068);put_executor(cat_2055, coffee_table_2068);
missed action num: 4
##############################
From agent.py
Human Instruction: You need to move the bowl of water from the coffee table to the designated table in the home office.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: Walk to table_355.
Action 4: look for bowl_2071 around table_355.
Action 5: Walk to pot_2069.
Action 6: Open pot_2069.
Action 7: look for bowl_2071 around pot_2069.
Action 8: Walk to cupboard_229.
Action 9: Open cupboard_229.
Action 10: look for bowl_2071 around cupboard_229.
Action 11: Walk to dresser_358.
Action 12: Open dresser_358.
Action 13: look for bowl_2071 around dresser_358.
Action 14: Walk to bathroom_counter_41.
Action 15: look for bowl_2071 around bathroom_counter_41.
Action 16: Walk to table_226.
Action 17: look for bowl_2071 around table_226.
Action 18: Walk to bowl_2071.
Action 19: Grab bowl_2071.
Action 20: Walk to faucet_43.
Action 21: Switch on faucet_43.
Action 22: Switch off faucet_43.
Action 23: Walk to coffee_table_2068.
Action 24: Put bowl_2071 on coffee_table_2068.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Ensure the bowl is placed on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind designated_table: item where:
            is_table(designated_table) and inside(designated_table, home_office)
        # Select the designated table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        place_bowl_on_table(bowl, designated_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind designated_table: item where:
            is_table(designated_table) and inside(designated_table, home_office)
        # Select the designated table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and is_home_office(home_office) and has_water(bowl)
        # Select the bowl that has been prepared and is inside the home office

        place_bowl_on_table(bowl, designated_table)
        # Place the bowl on the designated table

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place the bowl of water on the table in the home office.  " ?
Answer: Place the bowl of water on the table in the home office.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the specified table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that contains water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl of water on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        bind table: item where:
            is_table(table) and inside(table, home_office) and id[table]=coffee_table
        # Select the designated table inside the home office, different from the coffee table

        bind bowl: item where:
            is_bowl(bowl) and on(bowl, coffee_table)
        # Select the bowl currently on the coffee table

        move_bowl_to_table(bowl, table)
        # Move the bowl to the designated table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 6310, column 73.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office) and table = coffee_table
        # Corrected: Ensuring the table is different from the coffee table

        bind bowl: item where:
            is_bowl(bowl) and on(bowl, coffee_table)

        move_bowl_to_table(bowl, table)


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 6308, column 70.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office) and table = coffee_table

        bind bowl: item where:
            is_bowl(bowl) and on(bowl, coffee_table)

        move_bowl_to_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

def is_home_office_table(item: item):
    # Function to check if a table is inside the home office
    symbol is_inside_home_office = exists room: item : is_home_office(room) and inside(item, room)
    return is_inside_home_office

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select the table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table inside the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_bowl_to_home_office(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind target_table: item where:
            is_table(target_table) and inside(target_table, home_office)
        # Select the table in the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        move_bowl_to_home_office(bowl, target_table)
        # Move the bowl to the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_142_around_closetdrawer_148(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==148
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water

        place_bowl_on_table(bowl, table)
        # Place the bowl of water on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_110_around_closetdrawer_148(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==148
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_office_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the designated table in the home office

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind office_table: item where:
            is_table(office_table) and inside(office_table, home_office)
        # Select the table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        place_bowl_on_office_table(bowl, office_table)
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl of water on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        bind bowl_of_water: item where:
            is_bowl(bowl_of_water) and has_water(bowl_of_water)
        # Select the bowl with ID 2071, which has water

        place_bowl_on_table(bowl_of_water, coffee_table)
        # Place the bowl of water on the coffee table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior move_bowl_to_office_table(bowl:item, home_office_table:item):
    body:
        achieve on(bowl, home_office_table)
        # Place the bowl on the designated table in the home office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Bind the prepared bowl of water

        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office room

        bind home_office_table: item where:
            is_table(home_office_table) and inside(home_office_table, home_office)
        # Bind the table inside the home office 

        move_bowl_to_office_table(bowl, home_office_table)
        # Perform the behavior to move the bowl to the office table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind designated_table: item where:
            is_table(designated_table) and inside(designated_table, home_office)
        # Select the designated table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        place_bowl_on_table(bowl, designated_table)
        # Place the bowl on the designated table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_415_around_keyboard_415(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind keyboard_instance:item where:
            is_keyboard(keyboard_instance) and id[keyboard_instance]==415
        achieve close_char(char,keyboard_instance)
        if can_open(keyboard_instance):
            achieve_once open(keyboard_instance)
            exp(keyboard,keyboard_instance)
        else:
            exp(keyboard,keyboard_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,keyboard_instance]=True
        close[keyboard_instance,keyboard]=True
    

behavior find_chair_103_around_chair_356(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==356
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_bowl_to_home_office(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table in the home office

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind designated_table: item where:
            is_table(designated_table) and inside(designated_table, home_office)
        # Select the table in the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl filled with water

        move_bowl_to_home_office(bowl, designated_table)
        # Move the bowl to the designated table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior move_bowl_of_water_to_office(bowl:item, destination_table:item):
    body:
        achieve on(bowl, destination_table)
        # Place the bowl on the destination table in the home office

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind destination_table: item where:
            is_table(destination_table) and inside(destination_table, home_office)
        # Select the table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that contains water

        move_bowl_of_water_to_office(bowl, destination_table)
        # Move the bowl of water to the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_of_water_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl of water on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table in the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl of water

        place_bowl_of_water_on_table(bowl, table)
        # Place the bowl of water on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior move_bowl_to_home_office(bowl:item, home_office:item, table:item):
    body:
        observe(bowl, "Check location of the bowl of water")
        if not inside(bowl, home_office):
            achieve close_char(char, bowl)
            achieve inside(bowl, home_office)
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl of water
        
        move_bowl_to_home_office(bowl, home_office, table)
        # Move the bowl of water to the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water

        place_bowl_on_table(bowl, table)
        # Place the bowl with water on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office

        bind designated_table: item where:
            is_table(designated_table) and inside(designated_table, home_office)
        # Select the table in the home office

        move_bowl_to_table(bowl, designated_table)
        # Move the bowl of water to the designated table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table in the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior move_bowl_to_home_office(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the specified table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that contains water

        move_bowl_to_home_office(bowl, table)
        # Move the bowl of water to the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_snack_2038_around_fridge_289(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_snack,fridge_instance)
        else:
            exp(food_snack,fridge_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,fridge_instance]=True
        close[fridge_instance,food_snack]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water
        
        place_bowl_on_table(bowl, coffee_table)
        # Place the bowl of water on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_hanger_126_around_closetdrawer_148(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==148
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_of_water_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl of water on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office
        
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl of water
        
        place_bowl_of_water_on_table(bowl, coffee_table)
        # Move the bowl onto the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water

        place_bowl_on_table(bowl, table)
        # Move the bowl to the table inside the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_chair_356(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==356
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl of water on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl filled with water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind designated_table: item where:
            is_table(designated_table) and inside(designated_table, home_office)
        # Select the designated table in the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl) and on(bowl, coffee_table)
        # Select the bowl with water currently on the coffee table

        place_bowl_on_table(bowl, designated_table)
        # Place the bowl of water on the designated table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
behavior place_bowl_on_home_office_table(bowl: item, table: item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        
        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)
        
        place_bowl_on_home_office_table(bowl, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_table_target(table: item):
    # Check if the table is in the home office
    symbol is_target = is_table(table) and inside(table, home_office)
    return is_target

behavior move_bowl_to_table(bowl: item, table: item):
    body:
        achieve has_water(bowl)
        # Ensure the bowl has water
        
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        bind table: item where:
            is_table_target(table)
        # Find the table in the home office

        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl

        move_bowl_to_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

behavior find_hanger_365_around_closetdrawer_148(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==148
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#goal_representation
 
def is_table_target(table: item):
    # Check if the table is in the home office
    symbol is_target = is_table(table) and inside(table, home_office)
    return is_target

behavior move_bowl_to_table(bowl: item, table: item):
    body:
        achieve has_water(bowl)
        # Ensure the bowl has water
        
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        bind table: item where:
            is_table_target(table)
        # Find the table in the home office

        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl

        move_bowl_to_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_table_target(table: item):
    # Check if the table is in the home office
    symbol is_target = is_table(table) and inside(table, home_office)
    return is_target

behavior move_bowl_to_table(bowl: item, table: item):
    body:
        achieve has_water(bowl)
        # Ensure the bowl has water
        
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        bind table: item where:
            is_table_target(table)
        # Find the table in the home office

        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl

        move_bowl_to_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl of water on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2004_around_chair_356(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==356
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl which contains water

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind designated_table: item where:
            is_table(designated_table) and inside(designated_table, home_office)
        # Select the designated table inside the home office

        bind bowl_of_water: item where:
            is_bowl(bowl_of_water) and has_water(bowl_of_water)
        # Select the bowl that contains water

        place_bowl_on_table(bowl_of_water, designated_table)
        # Place the bowl of water on the designated table in the home office
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_clothes_socks_2087_around_basket_for_clothes_2006(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

#exp_behavior_end

#goal_representation
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl filled with water

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind designated_table: item where:
            is_table(designated_table) and inside(designated_table, home_office)
        # Select the designated table inside the home office

        bind bowl_of_water: item where:
            is_bowl(bowl_of_water) and has_water(bowl_of_water)
        # Select the bowl of water

        place_bowl_on_table(bowl_of_water, designated_table)
        # Place the bowl of water on the designated table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the designated table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_of_water_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl of water on the designated table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water

        place_bowl_of_water_on_table(bowl, table)
        # Place the bowl of water on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_placed_on_table(bowl:item, table:item):
    # Function to check if the bowl is already placed on the table
    symbol is_on_table = on(bowl, table)
    return is_on_table

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the designated table in the home office

        if exists bowl: item : is_bowl(bowl) and has_water(bowl) and is_placed_on_table(bowl, table):
            # Check if the bowl with water is already on the table
            bind bowl: item where:
                is_bowl(bowl) and has_water(bowl) and is_placed_on_table(bowl, table)
            achieve close_char(char, bowl)
            # Move the character closer to the bowl on the table

        else:
            # If the bowl is not already on the table, or not filled with water, find and place it
            bind bowl: item where:
                is_bowl(bowl) and has_water(bowl)
            # Select the bowl after ensuring it has water
            place_bowl_on_table(bowl, table)
            # Place the bowl on the table
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Ensure the bowl is placed on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind designated_table: item where:
            is_table(designated_table) and inside(designated_table, home_office)
        # Select the designated table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl filled with water

        place_bowl_on_table(bowl, designated_table)
        # Place the bowl on the designated table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_of_water_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table) 
        # Place the bowl on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind designated_table: item where:
            is_table(designated_table) and inside(designated_table, home_office)
        # Select the designated table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl of water

        place_bowl_of_water_on_table(bowl, designated_table)
        # Place the bowl of water on the designated table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl of water on the table in the home office
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_of_water_on_table(bowl: item, table: item):
    body:
        achieve on(bowl, table)
        # Place the bowl of water on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl of water

        place_bowl_of_water_on_table(bowl, table)
        # Place the bowl of water on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_of_water_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select bowl with water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        place_bowl_of_water_on_table(bowl, table)
        # Place the bowl of water on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the designated table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2045_around_closetdrawer_148(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==148
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl of water

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior move_bowl_to_table(bowl:item, destination_table:item):
    body:
        achieve on(bowl, destination_table)
        # Place the bowl on the table in the home office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind home_office_table: item where:
            is_table(home_office_table) and inside(home_office_table, home_office)
        # Select the table inside the home office

        move_bowl_to_table(bowl, home_office_table)
        # Move the bowl of water to the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<home_office_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

#goal_representation
 
behavior move_bowl_to_table(bowl:item, destination_table:item):
    body:
        achieve on(bowl, destination_table)
        # Place the bowl on the table in the home office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office

        bind home_office_table: item where:
            is_table(home_office_table) and inside(home_office_table, home_office)
        # Select the table inside the home office

        move_bowl_to_table(bowl, home_office_table)
        # Move the bowl of water to the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Bind the bowl with water

        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Bind the table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def in_home_office(table:item):
    # Check if a table is inside the home office
    symbol is_inside=exists room: item : is_home_office(room) and inside(table, room)
    return is_inside

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind table: item where:
            is_table(table) and in_home_office(table)
        # Select the table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2034_around_oven_295(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_pizza,oven_instance)
        else:
            exp(food_pizza,oven_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,oven_instance]=True
        close[oven_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl of water on the table in the home office

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind designated_table: item where:
            is_table(designated_table) and inside(designated_table, home_office)
        # Select the designated table inside the home office

        bind bowl_of_water: item where:
            is_bowl(bowl_of_water) and has_water(bowl_of_water)
        # Select the bowl of water

        move_bowl_to_table(bowl_of_water, designated_table)
        # Move the bowl of water to the designated table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl of water on the table in the home office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl of water on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
# This function will help determine if a bowl of water is already on the table in the home office
def bowl_on_table(bowl:item, table:item):
    symbol is_on_table = on(bowl, table)
    return is_on_table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        if not bowl_on_table(bowl, table):
            achieve on(bowl, table)
            # Place the bowl on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table in the home office
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl of water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        place_bowl_on_table(bowl, table)
        # Move the bowl to the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

behavior find_hanger_375_around_closetdrawer_148(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==148
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table as the current location of the bowl

        bind table: item where:
            is_table(table) and id[table] == 226
        # Select the table where the bowl needs to be moved

        bind bowl: item where:
            is_bowl(bowl) and on(bowl, coffee_table)
        # Select the bowl currently on the coffee table

        move_bowl_to_table(bowl, table)
        # Move the bowl to the specified table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table as the current location of the bowl

        bind table: item where:
            is_table(table) and id[table] == 226
        # Select the table where the bowl needs to be moved

        bind bowl: item where:
            is_bowl(bowl) and on(bowl, coffee_table)
        # Select the bowl currently on the coffee table

        move_bowl_to_table(bowl, table)
        # Move the bowl to the specified table in the home office

##############################
From agent.py-> find a plan in act()
grab_executor(bowl_2071)walk_executor(table_226)put_executor(bowl_2071, table_226)
##############################
From agent.py
grab_executor(bowl_2071)
Robot is inside home_office_319. Robot is close bowl_2071. Robot is close coffee_table_2068. Grabbing bowl_2071 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k2
missed actions: walk_executor(cat_2055);grab_executor(cat_2055);walk_executor(coffee_table_2068);put_executor(cat_2055, coffee_table_2068);
missed action num: 4
##############################
From agent.py
walk_executor(table_226)
Robot is inside dining_room_201. Robot is close bowl_2071. Robot is close table_226. Robot is no longer inside home_office_319.Robot is no longer close coffee_table_2068.
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k2
missed actions: walk_executor(cat_2055);grab_executor(cat_2055);walk_executor(coffee_table_2068);put_executor(cat_2055, coffee_table_2068);
missed action num: 4
##############################
From agent.py
put_executor(bowl_2071, table_226)
Robot is inside dining_room_201. Robot is close bowl_2071. Robot is close table_226. bowl_2071 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k2
missed actions: walk_executor(cat_2055);grab_executor(cat_2055);walk_executor(coffee_table_2068);put_executor(cat_2055, coffee_table_2068);
missed action num: 4
##############################
From agent.py
Human Instruction: You need to place the bowl of water on the table in the home office. Ensure that you have moved the bowl from its current location to the correct table in the home office before proceeding with the next task.

Human Guidance: Place the bowl of water on the table in the home office.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for bowl_2071 around kitchen_counter_230.
Action 3: Walk to table_355.
Action 4: look for bowl_2071 around table_355.
Action 5: Walk to pot_2069.
Action 6: Open pot_2069.
Action 7: look for bowl_2071 around pot_2069.
Action 8: Walk to cupboard_229.
Action 9: Open cupboard_229.
Action 10: look for bowl_2071 around cupboard_229.
Action 11: Walk to dresser_358.
Action 12: Open dresser_358.
Action 13: look for bowl_2071 around dresser_358.
Action 14: Walk to bathroom_counter_41.
Action 15: look for bowl_2071 around bathroom_counter_41.
Action 16: Walk to table_226.
Action 17: look for bowl_2071 around table_226.
Action 18: Walk to bowl_2071.
Action 19: Grab bowl_2071.
Action 20: Walk to faucet_43.
Action 21: Switch on faucet_43.
Action 22: Switch off faucet_43.
Action 23: Walk to coffee_table_2068.
Action 24: Put bowl_2071 on coffee_table_2068.
Action 25: Grab bowl_2071.
Action 26: Walk to table_226.
Action 27: Put bowl_2071 on table_226.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl of water on the table in the home office
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl of water on the table in the home office
##############################
From agent.py-> find a plan in act()
grab_executor(bowl_2071)walk_executor(coffee_table_2068)put_executor(bowl_2071, coffee_table_2068)
##############################
From agent.py
grab_executor(bowl_2071)
Robot is inside dining_room_201. Robot is close bowl_2071. Robot is close table_226. Grabbing bowl_2071 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k2
missed actions: walk_executor(cat_2055);grab_executor(cat_2055);walk_executor(coffee_table_2068);put_executor(cat_2055, coffee_table_2068);
missed action num: 4
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot is inside home_office_319. Robot is close bowl_2071. Robot is close coffee_table_2068. Robot is no longer inside dining_room_201.Robot is no longer close table_226.
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k2
missed actions: walk_executor(cat_2055);grab_executor(cat_2055);walk_executor(coffee_table_2068);put_executor(cat_2055, coffee_table_2068);
missed action num: 4
##############################
From agent.py
put_executor(bowl_2071, coffee_table_2068)
Robot is inside home_office_319. Robot is close bowl_2071. Robot is close coffee_table_2068. bowl_2071 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k2
missed actions: walk_executor(cat_2055);grab_executor(cat_2055);walk_executor(coffee_table_2068);put_executor(cat_2055, coffee_table_2068);
missed action num: 4
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior find_and_place_cat_on_table(cat:item, table:item):
    body:
        observe(cat, "Check location of the cat") 
        # Check if the cat is already on the table
        if not on(cat, table):
            achieve on(cat, table)
            # Place the cat on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind cat: item where:
            is_cat(cat)
        # Select the cat

        find_and_place_cat_on_table(cat, table)
        # Move the cat to the table if not already there

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior find_and_place_cat_on_table(cat:item, table:item):
    body:
        observe(cat, "Check location of the cat") 
        # Check if the cat is already on the table
        if not on(cat, table):
            achieve on(cat, table)
            # Place the cat on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office

        bind cat: item where:
            is_cat(cat)
        # Select the cat

        find_and_place_cat_on_table(cat, table)
        # Move the cat to the table if not already there

##############################
From agent.py-> find a plan in act()
walk_executor(cat_2055)obs(cat_2055, Check location of the cat)grab_executor(cat_2055)walk_executor(coffee_table_2068)put_executor(cat_2055, coffee_table_2068)
##############################
From agent.py
walk_executor(cat_2055)
Robot is inside home_office_319. Robot is close couch_352. Robot is close cat_2055. Robot is no longer close coffee_table_2068.Robot is no longer close bowl_2071.
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k2
missed actions: grab_executor(cat_2055);walk_executor(coffee_table_2068);put_executor(cat_2055, coffee_table_2068);
missed action num: 3
##############################
From agent.py
obs(cat_2055, Check location of the cat)
Get this information:  cat_2055 is on couch_352. cat_2055 is close to couch_352. cat_2055 is close to character_65. cat_2055 is inside home_office_319.
##############################
From agent.py
grab_executor(cat_2055)
Robot is inside home_office_319. Robot is close couch_352. Robot is close cat_2055. Grabbing cat_2055 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k2
missed actions: walk_executor(coffee_table_2068);put_executor(cat_2055, coffee_table_2068);
missed action num: 2
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot is inside home_office_319. Robot is close cat_2055. Robot is close coffee_table_2068. Robot is no longer close couch_352.
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k2
missed actions: put_executor(cat_2055, coffee_table_2068);
missed action num: 1
##############################
From agent.py
put_executor(cat_2055, coffee_table_2068)
Robot is inside home_office_319. Robot is close cat_2055. Robot is close coffee_table_2068. cat_2055 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g3.txt
Checking k2
missed actions: 
missed action num: 0
##############################
