{
    "behavior_data": {
        "Clean the bathroom": [
            {
                "usage_description": "",
                "cdl": "behavior fill_sink_with_water(sink:item):\n    body:\n        achieve has_water(sink)\n        ",
                "source_sub_task": "1. Fill the sink with water.",
                "functions": []
            }
        ],
        "Listen to music": [
            {
                "usage_description": "",
                "cdl": "behavior use_remote_control(remote:item, dvd:item):\n    body:\n        achieve close(remote, dvd) # Ensure the remote is close to the DVD player\n        bind switch: item where:\n            is_remote_control(remote) and has_switch(remote)\n        achieve is_on(dvd) # Use the remote control to turn on the DVD player\n",
                "source_sub_task": "2. Use the remote control to turn on the DVD player.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior turn_on_cd_player(cd_player:item):\n    body:\n        achieve plugged(cd_player)\n        achieve is_on(cd_player)\n",
                "source_sub_task": "2. Turn on the CD player.",
                "functions": []
            }
        ],
        "Wash dishes with dishwasher": [
            {
                "usage_description": "",
                "cdl": "behavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n",
                "source_sub_task": "1. Use the dishwasher to clean the bowls and plates.",
                "functions": [
                    "def has_plate_or_bowl_inside_1(dishwasher:item):\n    # Function to check if there are bowls or plates inside the dishwasher\n    symbol has_plate_or_bowl=exists o: item : (is_plate(o) or is_bowl(o)) and inside(o, dishwasher)\n    return has_plate_or_bowl\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher) # Close the dishwasher door\n        achieve is_on(dishwasher) # Turn on the dishwasher\n",
                "source_sub_task": "1. Use the dishwasher to clean the bowls and plates.",
                "functions": [
                    "def has_plate_or_bowl_inside_1(dishwasher:item):\n    # Function to check if there are bowls or plates inside the dishwasher\n    symbol has_plate_or_bowl=exists o: item : (is_plate(o) or is_bowl(o)) and inside(o, dishwasher)\n    return has_plate_or_bowl\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior observe_unvisited_dishwashers():\n    body:\n        foreach dishwasher: item:\n            if is_dishwasher(dishwasher) and not visited(dishwasher):\n                observe(dishwasher, \"Check if it is the dishwasher\")\n",
                "source_sub_task": "1. Locate the dishwasher.",
                "functions": [
                    "def locate_dishwasher_1():\n    # Function to ensure there is a dishwasher in the scenario\n    symbol has_dishwasher=exists dishwasher: item : is_dishwasher(dishwasher)\n    return has_dishwasher\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior load_dishwasher_for_bowls(bowl:item, dishwasher:item):\n    body:\n        achieve inside(bowl, dishwasher)\n        # Place the bowl inside the dishwasher\n",
                "source_sub_task": "2. Load the bowls and plates into the dishwasher.",
                "functions": [
                    "def has_bowls_in_dishwasher_1(dishwasher:item):\n    # Function to check if there are bowls in a specified dishwasher\n    symbol has_bowls=exists o: item : is_bowl(o) and inside(o, dishwasher)\n    return has_bowls\n"
                ]
            }
        ],
        "Change TV channel": [
            {
                "usage_description": "",
                "cdl": "behavior observe_for_remote_control():\n    body:\n        foreach obj: item:\n            if is_remote_control(obj) and not visited(obj):\n                observe(obj, \"Check if this is the TV remote control\")\n",
                "source_sub_task": "2. Find the remote control for the TV.",
                "functions": [
                    "def has_remote_control_nearby_1():\n    # Function to check if the remote control is close to the character\n    symbol control_nearby = exists remote: item : is_remote_control(remote) and close_char(char, remote)\n    return control_nearby\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior ensure_condition_for_tv_control(remote_control:item, tv:item):\n    body:\n        achieve_once inhand(remote_control) # Hold the correct remote control\n        achieve close_char(char, tv) # Move close to the TV\n        achieve facing_char(char, tv) # Ensure facing the TV\n",
                "source_sub_task": "3. Turn on the TV with the remote control.",
                "functions": [
                    "def is_correct_remote_1(remote_control:item):\n    # Function to determine if the remote control is for the TV\n    symbol is_tv_remote=exists remote:item: is_remote_control(remote) and remote==remote_control\n    return is_tv_remote\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior activate_tv(remote:item, television:item):\n    body:\n        achieve is_on(television) # Turn the TV on\n",
                "source_sub_task": "3. Turn on the TV with the remote control.",
                "functions": [
                    "def is_correct_remote_1(remote_control:item):\n    # Function to determine if the remote control is for the TV\n    symbol is_tv_remote=exists remote:item: is_remote_control(remote) and remote==remote_control\n    return is_tv_remote\n"
                ]
            }
        ],
        "Make coffee": [
            {
                "usage_description": "",
                "cdl": "behavior prepare_coffee_maker(filter: item, water: item, coffee_maker: item):\n    body:\n        achieve inside(filter, coffee_maker)\n        achieve has_water(coffee_maker)\n",
                "source_sub_task": "1. Brew a cup of coffee using the coffee maker.",
                "functions": [
                    "def check_coffee_maker_ready_1(coffee_maker: item):\n    symbol ready=exists filter: item: is_coffee_filter(filter) and inside(filter, coffee_maker) and has_water(coffee_maker)\n    return ready\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior start_coffee_brewing(coffee_maker: item):\n    body:\n        achieve closed(coffee_maker)\n        achieve is_on(coffee_maker)\n",
                "source_sub_task": "1. Brew a cup of coffee using the coffee maker.",
                "functions": [
                    "def check_coffee_maker_ready_1(coffee_maker: item):\n    symbol ready=exists filter: item: is_coffee_filter(filter) and inside(filter, coffee_maker) and has_water(coffee_maker)\n    return ready\n"
                ]
            }
        ],
        "Cook some food": [
            {
                "usage_description": "",
                "cdl": "behavior clean_vegetable(vegetable:item, sink:item):\n    body:\n        achieve_once inside(vegetable, sink)\n        # Ensure the vegetable is placed inside the sink\n\n        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_on(faucet)\n            # Turn on the faucet if it is next to the sink\n\n        wash(vegetable) # Wash the vegetable\n\n        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_off(faucet)\n            # Turn off the faucet after cleaning\n",
                "source_sub_task": "1. Wash all the vegetables.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior place_vegetables_in_pot(vegetable:item, pot:item):\n    body:\n        achieve inside(vegetable, pot) # Put the vegetables inside the pot\n",
                "source_sub_task": "2. Place the selected vegetables into a pot and fill with water.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior fill_pot_with_water(pot:item):\n    body:\n        achieve has_water(pot) # Fill the pot with water\n",
                "source_sub_task": "2. Place the selected vegetables into a pot and fill with water.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior wash_vegetables(vegetable:item, sink:item):\n    body:\n        clean_vegetable(vegetable, sink)\n        # Wash the specified vegetable in the sink\n",
                "source_sub_task": "1. Wash all the vegetables.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior boil_vegetables_on_stove(vegetable:item, stove:item, pot:item):\n    body:\n        place_vegetables_in_pot(vegetable, pot)\n        fill_pot_with_water(pot)\n        achieve on(pot, stove) # Put the pot on the stove\n        achieve is_on(stove) # Turn on the stove\n",
                "source_sub_task": "2. Put the washed vegetables in a pot and boil them on the stove.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior store_pot_in_fridge(pot:item, fridge:item):\n    body:\n        achieve inside(pot, fridge)\n        # Store the pot inside the fridge\n",
                "source_sub_task": "3. Store the whole pot in the fridge.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior close_the_fridge_door(fridge:item):\n    body:\n        achieve closed(fridge)\n        # Close the fridge door\n",
                "source_sub_task": "3. Store the whole pot in the fridge.",
                "functions": []
            }
        ],
        "Prepare breakfast": [
            {
                "usage_description": "",
                "cdl": "behavior mix_eggs(eggs:item, bowl:item):\n    body:\n        achieve inside(eggs, bowl)\n        # Ensure the eggs are cracked into the bowl\n",
                "source_sub_task": "1. Crack the eggs into a bowl and beat them until well mixed.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior find_knife():\n    body:\n        bind knife: item where:\n            is_knife(knife)\n        achieve close_char(char, knife)\n",
                "source_sub_task": "1. Slice the bread.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior position_bread_on_board(bread:item, cutting_board:item):\n    body:\n        achieve on(bread, cutting_board)\n",
                "source_sub_task": "1. Slice the bread.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior slice_bread(bread:item, knife:item):\n    body:\n        achieve cut(bread)\n",
                "source_sub_task": "1. Slice the bread.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior ensure_stove_operational(s: item):\n    body:\n        if has_plug_1(s):\n            bind plug: item where:\n                is_powersocket(plug) and close(s, plug)\n            achieve plugged(s)\n        achieve is_on(s)\n",
                "source_sub_task": "1. Cook the chicken and pasta together.",
                "functions": [
                    "def has_plug_1(s: item):\n    # Function to check if a stove has a plug\n    symbol has_plug=exists plug: item : is_powersocket(plug) and close(s, plug)\n    return has_plug\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior cook(chicken: item, pasta: item, pot: item, stove: item):\n    body:\n        achieve inside(chicken, pot)\n        achieve inside(pasta, pot)\n        ensure_stove_operational(stove)\n",
                "source_sub_task": "1. Cook the chicken and pasta together.",
                "functions": [
                    "def has_plug_1(s: item):\n    # Function to check if a stove has a plug\n    symbol has_plug=exists plug: item : is_powersocket(plug) and close(s, plug)\n    return has_plug\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior put_on_plate(chicken_pasta: item, plate: item):\n    body:\n        achieve on(chicken_pasta, plate) # Place the chicken pasta on the plate\n",
                "source_sub_task": "2. Put the chicken pasta on a plate.",
                "functions": [
                    "def has_pot_with_chicken_pasta_1(pot: item):\n    # Determine if the pot contains chicken pasta\n    symbol has_chicken_pasta = exists chicken: item : is_food_chicken(chicken) and inside(chicken, pot)\n    symbol has_dry_pasta = exists pasta: item : is_dry_pasta(pasta) and inside(pasta, pot)\n    return has_chicken_pasta and has_dry_pasta\n"
                ]
            }
        ],
        "Pet cat": [
            {
                "usage_description": "",
                "cdl": "behavior put_bowl_on_table(bowl:item, table:item):\n    body:\n        achieve on(bowl, table) # Place the bowl on the table\n",
                "source_sub_task": "1. Fill a bowl with water and place it on the table in the home office.",
                "functions": [
                    "def in_home_office_1(table:item):\n    # Function to check if a table is in the home office\n    symbol in_home_office=exists room: item : is_home_office(room) and inside(table, room)\n    return in_home_office\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior bring_cat_to_table(cat:item, table:item):\n    body:\n        achieve close(cat, table) \n",
                "source_sub_task": "2. Find your cat and bring it to the table.",
                "functions": [
                    "def is_in_home_office_1(item: item):\n    # Function to check if an item is in the home office\n    symbol is_in_office=exists o: item : is_home_office(o) and inside(item, o)\n    return is_in_office\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior touch_cat(cat:item):\n    body:\n        achieve_once close_char(char, cat)\n        touch(cat)\n",
                "source_sub_task": "2. Touch the cat once found.",
                "functions": []
            }
        ],
        "Wash clothes": [
            {
                "usage_description": "",
                "cdl": "behavior locate_basket_of_clothes():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        # Select an item identified as a basket for clothes\n\n        achieve close_char(char, basket)\n        # Move closer to the identified basket of clothes\n",
                "source_sub_task": "1. Locate the basket of clothes.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior wash_underwear_with_soap(underwear:item, sink:item, soap:item):\n    body:\n        assert is_clothes_underwear(underwear)\n        # Ensure the item to wash is underwear\n        achieve inside(underwear, sink)\n        # Place the underwear in the sink\n        \n        achieve_once inhand(soap)\n        # Temporarily hold the soap\n        scrub(underwear)\n        # Scrub the underwear with the soap\n        \n        squeeze(underwear)\n        # Squeeze any excess liquid from the underwear\n        \n        rinse(underwear)\n        # Rinse the underwear with water\n        \n        if has_soap_1(sink):\n            achieve clean(underwear)\n        else:\n            observe(sink, \"Find soap around the sink\")\n",
                "source_sub_task": "1. Hand wash the underwear with soap.",
                "functions": [
                    "def has_soap_1(sink:item):\n    # Function to check if the sink has soap\n    symbol has_soap=exists soap: item : is_soap(soap) and close(soap, sink)\n    return has_soap\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior put_in_washing_machine(clothes:item, machine:item):\n    body:\n        achieve inside(clothes, machine)\n",
                "source_sub_task": "2. Put the underwear in the washing machine.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior add_detergent(washing_machine:item, detergent:item):\n    body:\n        achieve inside(detergent, washing_machine)\n        # Add detergent to the washing machine\n",
                "source_sub_task": "3. Add detergent to the washing machine for a thorough clean.",
                "functions": [
                    "def is_inside_bathroom_1(washing_machine:item):\n    # Determine whether the washing machine is located within the bathroom\n    symbol in_bathroom=exists room: item : is_bathroom(room) and inside(washing_machine, room)\n    return in_bathroom\n"
                ]
            }
        ],
        "Prepare dinner": [
            {
                "usage_description": "",
                "cdl": "behavior cook_rice(rice:item, pot:item, stove:item):\n    body:\n        achieve inside(rice, pot)\n        achieve has_water(pot)\n        achieve on(pot, stove)\n        achieve is_on(stove)\n",
                "source_sub_task": "1. Cook the rice.",
                "functions": []
            }
        ],
        "Prepare a reading space": [
            {
                "usage_description": "",
                "cdl": "behavior place_book_on_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n        # Place the book on the table\n",
                "source_sub_task": "2. Place the book on the table in the bedroom.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior find_specific_book():\n    body:\n        foreach book: item:\n            if is_book(book) and not visited(book):\n                observe(book, \"Inspect to determine if this is the specific book needed\")\n",
                "source_sub_task": "1. Find the specific book.",
                "functions": [
                    "def is_target_book_1(book: item):\n    # Function to check if the book is the target book\n    symbol is_target=exists target_book: item : is_book(target_book) and book == target_book\n    return is_target\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior find_the_book_and_place_on_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n",
                "source_sub_task": "1. Find the book and place it on the coffee table in the home office.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior find_and_place_spectacles(spectacles:item, coffee_table:item):\n    body:\n        achieve on(spectacles, coffee_table)\n        # Place spectacles on the coffee table\n",
                "source_sub_task": "1. Find the spectacles and place them on the coffee table in the home office.",
                "functions": [
                    "def in_home_office_2(item:item):\n    # Function to check if an item is in the home office\n    symbol in_home_office=exists room: item : is_home_office(room) and inside(item, room)\n    return in_home_office\n"
                ]
            }
        ],
        "Vacuum the floor": [
            {
                "usage_description": "",
                "cdl": "behavior vacuum_floor(floor: item):\n    body:\n        assert is_floor(floor)\n        # Ensure that the item is a floor\n        achieve clean(floor)\n        # Achieve a clean state for the floor\n",
                "source_sub_task": "2. Vacuum the identified areas of the floor.",
                "functions": [
                    "def dirty_floor_1(floor: item):\n    # Function to check if a floor is dirty\n    symbol is_dirty = dirty(floor)\n    return is_dirty\n"
                ]
            }
        ],
        "Put groceries in Fridge": [
            {
                "usage_description": "",
                "cdl": "behavior clean_food(food:item, sink:item):\n    # Define the behavior to clean food in the sink\n    body:\n        achieve_once inside(food, sink)\n        # Ensure the food is placed inside the sink\n\n        if has_faucet_1(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_on(faucet)\n            # If the sink has a faucet, turn it on to clean\n\n        wash(food)  # This is the key step of the behavior, used for cleaning food\n        \n        if has_faucet_1(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_off(faucet)\n            # If the sink has a faucet, turn it off after cleaning\n",
                "source_sub_task": "1. Wash the fish.",
                "functions": [
                    "def has_faucet_1(sink:item):\n    # Determine whether this sink has a faucet\n    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)\n    return has_faucet\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior put_on_table(o: item, table: item):\n    body:\n        achieve on(o, table) # Place the item on the table\n",
                "source_sub_task": "2. Put milk, turkey, eggs, fish, and chicken on the table in the dining room.",
                "functions": [
                    "def in_dining_room_1(table: item):\n    # Function to check if a table is in the dining room\n    symbol in_dining_room=exists room: item : is_dining_room(room) and inside(table, room)\n    return in_dining_room\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior throw_items_from_fridge_to_trash(fridge:item, trashcan:item):\n    body:\n        foreach item: item:\n            if inside(item, fridge):\n                achieve inside(item, trashcan)\n",
                "source_sub_task": "2. Remove all items from the fridge and throw them in the trashcan.",
                "functions": [
                    "def is_inside_fridge_1(item: item, fridge:item):\n    # Function to check if an item is inside a specific fridge\n    symbol inside_fridge=exists x: item : inside(x, fridge) and x==item\n    return inside_fridge\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior find_table_in_dining_room():\n    body:\n        foreach table: item:\n            if is_table(table) and not visited(table):\n                observe(table, \"Check if this is a table in the dining room\")\n                ",
                "source_sub_task": "1. Locate a table in the dining room.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior put_milk_on_table(milk:item, table:item):\n    body:\n        achieve on(milk, table)\n",
                "source_sub_task": "2. Place milk, turkey, egg, fish, and chicken on the table in the dining room.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior put_turkey_on_table(turkey:item, table:item):\n    body:\n        achieve on(turkey, table)\n",
                "source_sub_task": "2. Place milk, turkey, egg, fish, and chicken on the table in the dining room.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior put_egg_on_table(egg:item, table:item):\n    body:\n        achieve on(egg, table)\n",
                "source_sub_task": "2. Place milk, turkey, egg, fish, and chicken on the table in the dining room.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior put_fish_on_table(fish:item, table:item):\n    body:\n        achieve on(fish, table)\n",
                "source_sub_task": "2. Place milk, turkey, egg, fish, and chicken on the table in the dining room.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior put_chicken_on_table(chicken:item, table:item):\n    body:\n        achieve on(chicken, table)\n",
                "source_sub_task": "2. Place milk, turkey, egg, fish, and chicken on the table in the dining room.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior cut_chicken(chicken:item):\n    body:\n        achieve cut(chicken)\n",
                "source_sub_task": "1. Cut the chicken into pieces.",
                "functions": []
            }
        ],
        "Write an email": [
            {
                "usage_description": "",
                "cdl": "behavior __turn_on_computer__(computer:item):\n    body:\n        achieve is_on(computer)\n",
                "source_sub_task": "1. Turn on the computer in the home office.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior __turn_on_computer__(computer:item):\n    body:\n        achieve is_on(computer) # Ensure the computer is turned on\n",
                "source_sub_task": "1. Turn on the computer in the home office.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior sit_on_chair(char:character, chair:item):\n    body:\n        achieve on_char(char, chair)\n",
                "source_sub_task": "2. Sit on the chair in front of the computer.",
                "functions": []
            }
        ],
        "Drink": [
            {
                "usage_description": "",
                "cdl": "behavior find_cup(cup:item):\n    body:\n        observe(cup,\"Identify object as a cup\")\n",
                "source_sub_task": "1. Find a cup.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior pour_milk(milk: item, cup: item):\n    body:\n        achieve inside(milk, cup)\n        # Pour milk into the cup\n",
                "source_sub_task": "1. Find a cup and pour milk into it.",
                "functions": []
            }
        ]
    },
    "function_name_mapping": {
        "has_remote_control": "has_remote_control_1",
        "has_cd_player": "has_cd_player_1",
        "has_plate_or_bowl_inside": "has_plate_or_bowl_inside_1",
        "locate_dishwasher": "locate_dishwasher_1",
        "has_bowls_in_dishwasher": "has_bowls_in_dishwasher_1",
        "has_remote_control_nearby": "has_remote_control_nearby_1",
        "is_correct_remote": "is_correct_remote_1",
        "check_coffee_maker_ready": "check_coffee_maker_ready_1",
        "has_needed_vegetables": "has_needed_vegetables_1",
        "has_plug": "has_plug_1",
        "has_pot_with_chicken_pasta": "has_pot_with_chicken_pasta_1",
        "in_home_office": "in_home_office_2",
        "is_in_home_office": "is_in_home_office_1",
        "is_my_cat": "is_my_cat_1",
        "has_soap": "has_soap_1",
        "is_inside_bathroom": "is_inside_bathroom_1",
        "is_book_in_scene": "is_book_in_scene_1",
        "is_target_book": "is_target_book_1",
        "is_dirty_floor_area": "is_dirty_floor_area_1",
        "dirty_floor": "dirty_floor_1",
        "has_faucet": "has_faucet_1",
        "in_dining_room": "in_dining_room_1",
        "is_inside_fridge": "is_inside_fridge_1"
    },
    "function_name_counts": {
        "has_remote_control": 2,
        "has_cd_player": 2,
        "has_plate_or_bowl_inside": 2,
        "locate_dishwasher": 2,
        "has_bowls_in_dishwasher": 2,
        "has_remote_control_nearby": 2,
        "is_correct_remote": 2,
        "check_coffee_maker_ready": 2,
        "has_needed_vegetables": 2,
        "has_plug": 2,
        "has_pot_with_chicken_pasta": 2,
        "in_home_office": 3,
        "is_in_home_office": 2,
        "is_my_cat": 2,
        "has_soap": 2,
        "is_inside_bathroom": 2,
        "is_book_in_scene": 2,
        "is_target_book": 2,
        "is_dirty_floor_area": 2,
        "dirty_floor": 2,
        "has_faucet": 2,
        "in_dining_room": 2,
        "is_inside_fridge": 2
    }
}