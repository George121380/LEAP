From agent.py
Reset goals: The sub-goals are: 
['1. Find a sink suitable for washing the cat.  ', '2. Wash the cat in the sink.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2069_around_sink_19(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cat,sink_instance)
        else:
            exp(cat,sink_instance)
    eff:
        unknown[cat]=False
        close[cat,sink_instance]=True
        close[sink_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
def is_sink_suitable_for_cat_wash(sink: item):
    # Function to check if a sink is suitable for washing the cat
    symbol is_suitable_sink = is_sink(sink) and has_water(sink) and not is_on_char(cat, sink)
    return is_suitable_sink

behavior __goal__():
    body:
        if exists sink: item : is_sink_suitable_for_cat_wash(sink):
            # If we have already found a suitable sink, we can directly approach it
            bind sink: item where:
                is_sink_suitable_for_cat_wash(sink)
            achieve close_char(char, sink)

        else:
            # Check all sinks in the scene that have not been visited
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check if it is suitable for washing the cat")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: cat; available variables: [Variable<sink: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cat_2069_around_sink_19(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cat,sink_instance)
        else:
            exp(cat,sink_instance)
    eff:
        unknown[cat]=False
        close[cat,sink_instance]=True
        close[sink_instance,cat]=True
    

behavior find_cleaning_solution_2143_around_kitchen_counter_122(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cleaning_solution,kitchen_counter_instance)
        else:
            exp(cleaning_solution,kitchen_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cleaning_solution]=True
    

#goal_representation
 

def is_sink_suitable_for_cat_wash(sink: item, cat: item):
    # Function to check if a sink is suitable for washing the cat
    symbol is_suitable_sink = is_sink(sink) and has_water(sink) and not is_on_char(cat, sink)
    return is_suitable_sink

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        if exists sink: item : is_sink_suitable_for_cat_wash(sink, cat):
            # If we have already found a suitable sink, we can directly approach it
            bind sink: item where:
                is_sink_suitable_for_cat_wash(sink, cat)
            achieve close_char(char, sink)

        else:
            # Check all sinks in the scene that have not been visited
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check if it is suitable for washing the cat")


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

'Function is_on_char not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_sink_suitable_for_cat_wash(sink: item, cat: item):
    # Function to check if a sink is suitable for washing the cat
    symbol is_suitable_sink = is_sink(sink) and has_water(sink) and not is_on_floor(cat, sink)
    return is_suitable_sink

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        if exists sink: item : is_sink_suitable_for_cat_wash(sink, cat):
            # If we have already found a suitable sink, we can directly approach it
            bind sink: item where:
                is_sink_suitable_for_cat_wash(sink, cat)
            achieve close_char(char, sink)

        else:
            # Check all sinks in the scene that have not been visited
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check if it is suitable for washing the cat")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior find_suitable_sink_for_cat(sink:item):
    body:
        observe(sink, "Check if the sink is suitable for washing a cat")
        # Observe the sink to check if it is suitable for washing a cat

behavior __goal__():
    body:
        foreach sink: item:
            if is_sink(sink) and not visited(sink):
                find_suitable_sink_for_cat(sink)
                # For each unvisited sink, check if it is suitable for washing the cat
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_suitable_sink_for_cat(sink:item):
    body:
        observe(sink, "Check if the sink is suitable for washing a cat")
        # Observe the sink to check if it is suitable for washing a cat

behavior __goal__():
    body:
        foreach sink: item:
            if is_sink(sink) and not visited(sink):
                find_suitable_sink_for_cat(sink)
                # For each unvisited sink, check if it is suitable for washing the cat
##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)obs(sink_19, Check if the sink is suitable for washing a cat)walk_executor(sink_120)obs(sink_120, Check if the sink is suitable for washing a cat)
##############################
From agent.py
walk_executor(sink_19)
Find mat_32. Find detergent_2155. Find soap_2125. Find after_shave_2063. Find cleaning_solution_2143. Find drawing_33. Find phone_2029. Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.
##############################
From agent.py
obs(sink_19, Check if the sink is suitable for washing a cat)
Get this information:  sink_19 is close to mat_32. sink_19 is close to wall_3. sink_19 is close to wall_4. sink_19 is close to floor_10. sink_19 is close to detergent_2155. sink_19 is close to floor_11. sink_19 is close to soap_2125. sink_19 is close to floor_14. sink_19 is close to after_shave_2063. sink_19 is close to bathroom_cabinet_17. sink_19 is close to bathroom_counter_18. sink_19 is close to faucet_20. sink_19 is close to cleaning_solution_2143. sink_19 is close to character_240. sink_19 is inside bathroom_1. sink_19 is inside bathroom_counter_18. soap_2125 is on sink_19. detergent_2155 is on sink_19. sink_19 is facing drawing_33. after_shave_2063 is inside sink_19. cleaning_solution_2143 is on sink_19. sink_19 is DIRTY.
##############################
From agent.py
walk_executor(sink_120)
Find basket_for_clothes_2078. Find soap_2010. Find pot_2138. Find tray_128. Find ice_2024. Find soap_2126. Find pot_78. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find fork_2151. Robot is inside dining_room_41. Robot is close sink_120. Robot is close kitchen_counter_119. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close sink_19.
##############################
From agent.py
obs(sink_120, Check if the sink is suitable for washing a cat)
Get this information:  soap_2010 is inside sink_120. sink_120 is close to wall_64. sink_120 is close to wall_67. sink_120 is close to ice_2024. sink_120 is close to walllamp_140. sink_120 is close to knifeblock_76. sink_120 is close to soap_2126. sink_120 is close to floor_45. sink_120 is close to pot_78. sink_120 is close to floor_46. sink_120 is close to cupboard_117. sink_120 is close to kitchen_counter_119. sink_120 is close to faucet_121. sink_120 is close to soap_2010. sink_120 is close to kitchen_counter_123. sink_120 is close to basket_for_clothes_2078. sink_120 is close to washing_machine_2079. sink_120 is close to character_240. ice_2024 is inside sink_120. soap_2126 is on sink_120. sink_120 is inside dining_room_41. sink_120 is inside kitchen_counter_119. sink_120 is DIRTY.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_shampoo_2019_around_bathroom_cabinet_17(shampoo:item):
    goal: not unknown(shampoo)
    body:
        assert is_shampoo(shampoo)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(shampoo,bathroom_cabinet_instance)
        else:
            exp(shampoo,bathroom_cabinet_instance)
    eff:
        unknown[shampoo]=False
        close[shampoo,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,shampoo]=True
    

behavior find_detergent_2011_around_kitchen_counter_122(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(detergent,kitchen_counter_instance)
        else:
            exp(detergent,kitchen_counter_instance)
    eff:
        unknown[detergent]=False
        close[detergent,kitchen_counter_instance]=True
        close[kitchen_counter_instance,detergent]=True
    

behavior find_cat_2069_around_couch_198(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_cat_in_sink(cat: item, sink: item):
    body:
        achieve_once inside(cat, sink) 
        # Place the cat inside the sink
        
        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to wet the cat

            wash(cat) 
            # Wash the cat
            
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 120
        # Select the sink with ID 120

        bind cat: item where:
            is_cat(cat)
        # Select the cat

        if not visited(cat):
            observe(cat, "Check the location of the cat")
        # Observe the cat location if it hasnt been visited

        wash_cat_in_sink(cat, sink)
        # Wash the cat in the sink

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_cat_in_sink(cat: item, sink: item):
    body:
        achieve_once inside(cat, sink) 
        # Place the cat inside the sink
        
        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to wet the cat

            wash(cat) 
            # Wash the cat
            
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 120
        # Select the sink with ID 120

        bind cat: item where:
            is_cat(cat)
        # Select the cat

        if not visited(cat):
            observe(cat, "Check the location of the cat")
        # Observe the cat location if it hasnt been visited

        wash_cat_in_sink(cat, sink)
        # Wash the cat in the sink

##############################
From agent.py-> find a plan in act()
walk_executor(couch_198)exp(cat_2069, couch_198)walk_executor(cat_2069)obs(cat_2069, Check the location of the cat)grab_executor(cat_2069)walk_executor(sink_120)putin_executor(cat_2069, sink_120)walk_executor(faucet_121)switchon_executor(faucet_121)walk_executor(cat_2069)wash_executor(cat_2069)walk_executor(faucet_121)switchoff_executor(faucet_121)
##############################
From agent.py
walk_executor(couch_198)
Find clothes_jacket_2119. Find phone_2016. Find mat_203. Find chair_2003. Find rag_2052. Find instrument_guitar_2028. Robot is inside bedroom_162. Robot is close couch_198. Robot is no longer inside dining_room_41.Robot is no longer close sink_120.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
exp(cat_2069, couch_198)
Failed to find cat_2069 around couch_198. 
##############################
From agent.py-> find a plan in act()
walk_executor(bed_197)exp(cat_2069, bed_197)walk_executor(cat_2069)obs(cat_2069, Check the location of the cat)grab_executor(cat_2069)walk_executor(sink_120)putin_executor(cat_2069, sink_120)walk_executor(faucet_121)switchon_executor(faucet_121)walk_executor(cat_2069)wash_executor(cat_2069)walk_executor(faucet_121)switchoff_executor(faucet_121)
##############################
From agent.py
walk_executor(bed_197)
Find clothes_dress_2116. Find clothes_scarf_2120. Find clothes_underwear_2121. Find drawing_201. Find pillow_207. Find pillow_208. Robot is inside bedroom_162. Robot is close bed_197. Robot is no longer close couch_198.
##############################
From agent.py
exp(cat_2069, bed_197)
Failed to find cat_2069 around bed_197. 
##############################
From agent.py-> find a plan in act()
walk_executor(couch_269)exp(cat_2069, couch_269)walk_executor(cat_2069)obs(cat_2069, Check the location of the cat)grab_executor(cat_2069)walk_executor(sink_120)putin_executor(cat_2069, sink_120)walk_executor(faucet_121)switchon_executor(faucet_121)walk_executor(cat_2069)wash_executor(cat_2069)walk_executor(faucet_121)switchoff_executor(faucet_121)
##############################
From agent.py
walk_executor(couch_269)
Find brush_2002. Find drawing_288. Find pillow_287. Find shoes_2033. Find phone_2017. Find pillow_286. Robot is inside home_office_241. Robot is close couch_269. Robot is no longer inside bedroom_162.Robot is no longer close bed_197.
##############################
From agent.py
exp(cat_2069, couch_269)
Find cat_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(cat_2069)obs(cat_2069, Check the location of the cat)grab_executor(cat_2069)walk_executor(sink_120)putin_executor(cat_2069, sink_120)walk_executor(faucet_121)switchon_executor(faucet_121)walk_executor(cat_2069)wash_executor(cat_2069)walk_executor(faucet_121)switchoff_executor(faucet_121)
##############################
From agent.py
walk_executor(cat_2069)
Robot is inside home_office_241. Robot is close dresser_274. Robot is close cat_2069. Robot is no longer close couch_269.
##############################
From agent.py
obs(cat_2069, Check the location of the cat)
Get this information:  cat_2069 is inside home_office_241. cat_2069 is inside dresser_274. cat_2069 is close to dresser_274. cat_2069 is close to character_240. cat_2069 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2128_around_bathroom_cabinet_17(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

behavior find_cleaning_solution_2143_around_detergent_2155(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2155
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_cat_washable(cat: item):
    # Check that cat is present, not sleeping, and may need to be washed
    return is_cat(cat) and not sleeping(cat)

def is_sink_available(sink: item):
    # Check if a sink is available and has water
    return is_sink(sink) and has_water(sink)

behavior prepare_cat_and_sink(cat: item, sink: item):
    body:
        achieve close_char(char, cat)
        # Get close to the cat before attempting to wash

        achieve inside(cat, sink)
        # Place the cat inside the sink

behavior wash_the_cat(cat: item, sink: item):
    body:
        wash(cat)
        # Wash the cat once it is in the sink

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and id[cat] == 2069
        # Select the instance of the cat

        bind sink: item where:
            is_sink(sink) and visited(sink)
        # Select the sink you found as suitable for washing

        if is_cat_washable(cat) and is_sink_available(sink):
            prepare_cat_and_sink(cat, sink)
            wash_the_cat(cat, sink)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Error during applying sleeping[observation, state](x: character).
  Arguments: V::cat
Argument #0 type does not match: expect character, got item.
##############################
