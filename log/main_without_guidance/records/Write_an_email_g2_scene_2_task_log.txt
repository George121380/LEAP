From agent.py
Reset goals: The sub-goals are: 
['1. Find the chair in front of the computer in the home office and sit on it.', '2. Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_263_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_computer_chair(chair: item):
    # Function to check if a chair is in front of the computer in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside_char(char, room) and facing(chair, computer)
    return in_home_office

behavior sit_on_computer_chair(chair: item):
    body:
        sit_somewhere(chair)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and is_computer_chair(chair)
        # Select the chair that is in front of the computer in the home office

        if not visited(chair):
            observe(chair, "Ensure it is the chair in front of the computer")

        achieve facing_char(char, chair)
        # Face the chair to sit on it

        sit_on_computer_chair(chair)
        # Sit on the identified chair

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: computer; available variables: [Variable<chair: item>, Variable<room: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#goal_representation
 
def is_computer_chair(chair: item, computer: item):
    # Function to check if a chair is in front of the computer in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside_char(char, room) and facing(chair, computer)
    return in_home_office

behavior sit_on_computer_chair(chair: item):
    body:
        sit_somewhere(chair)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and exists computer: item : is_computer(computer) and is_computer_chair(chair, computer)
        # Select the chair that is in front of the computer in the home office

        if not visited(chair):
            observe(chair, "Ensure it is the chair in front of the computer")

        achieve facing_char(char, chair)
        # Face the chair to sit on it

        sit_on_computer_chair(chair)
        # Sit on the identified chair

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'computer') at line 5858, column 40.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#goal_representation
 
def is_computer_chair(chair: item, computer: item):
    # Function to check if a chair is in front of the computer in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(chair, room) and facing(chair, computer)
    return in_home_office

behavior sit_on_computer_chair(chair: item):
    body:
        sit_somewhere(chair)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and exists computer: item : is_computer(computer) and is_computer_chair(chair, computer)
        # Select the chair that is in front of the computer in the home office

        if not visited(chair):
            observe(chair, "Ensure it is the chair in front of the computer")

        achieve facing_char(char, chair)
        # Face the chair to sit on it

        sit_on_computer_chair(chair)
        # Sit on the identified chair

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_138_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
behavior sit_on_chair(chair: item):
    body:
        sit_somewhere(chair)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and is_home_office(chair)
        # Select the chair in front of the computer in the home office

        if not visited(chair):
            observe(chair, "Ensure chair is in front of the computer in the home office")
        # Observe the chair if it hasnt been visited

        sit_on_chair(chair)
        # Sit on the chair in front of the computer in the home office
#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the chair in front of the computer in the home office and sit on it.', '2. Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
behavior find_and_sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and exists computer: item: is_computer(computer) and inside(computer, room) and inside(chair, room) and is_home_office(room)
        # Bind the chair which is in front of the computer and in the home office

        if not visited(chair):
            observe(chair, "Check if the chair is in front of the computer in the home office")
        # Observe to locate the chair in front of the computer

        achieve close_char(char, chair)
        # Move close to the chair

        find_and_sit_on_chair(chair)
        # Sit on the chair in front of the computer in the home office
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'computer') at line 5871, column 40.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_263_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and exists computer: item : is_computer(computer) and inside(computer, room) and inside(chair, room) and is_home_office(room)
        # Bind the chair which is in front of the computer and in the home office

        if not visited(chair):
            observe(chair, "Check if the chair is in front of the computer in the home office")
        # Observe to locate the chair in front of the computer

        achieve close_char(char, chair)
        # Move close to the chair

        find_and_sit_on_chair(chair)
        # Sit on the chair in front of the computer in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'computer') at line 5867, column 40.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_138_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#goal_representation
behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and is_home_office(room: item) and exists computer: item : is_computer(computer) and inside(computer, room) and inside(chair, room)
        # Bind the chair which is in front of the computer and in the home office

        if not visited(chair):
            observe(chair, "Check if the chair is in front of the computer in the home office")
        # Observe to locate the chair in front of the computer

        achieve close_char(char, chair)
        # Move close to the chair

        find_and_sit_on_chair(chair)
        # Sit on the chair in front of the computer in the home office
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_138_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and (exists room: item : is_home_office(room) and inside(chair, room))
        # Select the chair in the home office located in front of the computer

        if not visited(chair):
            observe(chair, "Find the chair in front of the computer")
        # Observe to ensure chairs location if it hasnt been visited

        sit_on_chair(chair)
        # Sit on the chair in front of the computer in the home office
#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Sit on the chair in front of the computer in the home office, then touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

behavior find_mouse_380_around_desk_375(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(mouse,desk_instance)
        else:
            exp(mouse,desk_instance)
    eff:
        unknown[mouse]=False
        close[mouse,desk_instance]=True
        close[desk_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair) # Ensure the character is sitting on the chair

behavior turn_on_computer_mouse(mouse: item):
    body:
        achieve is_on(mouse) # Ensure the mouse is turned on

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select the chair in the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer in the home office

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        sit_on_chair(chair)
        # Sit on the chair in front of the computer

        turn_on_computer_mouse(mouse)
        # Turn on the mouse near the computer
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<chair: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_138_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_mouse_380_around_desk_375(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(mouse,desk_instance)
        else:
            exp(mouse,desk_instance)
    eff:
        unknown[mouse]=False
        close[mouse,desk_instance]=True
        close[desk_instance,mouse]=True
    

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#goal_representation

behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair) # Ensure the character is sitting on the chair

behavior turn_on_computer_mouse(mouse: item):
    body:
        achieve is_on(mouse) # Ensure the mouse is turned on

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select the chair in the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer in the home office

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        sit_on_chair(chair)
        # Sit on the chair in front of the computer

        turn_on_computer_mouse(mouse)
        # Turn on the mouse near the computer

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_138_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

behavior find_mouse_380_around_desk_375(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(mouse,desk_instance)
        else:
            exp(mouse,desk_instance)
    eff:
        unknown[mouse]=False
        close[mouse,desk_instance]=True
        close[desk_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair)
        # Select the chair

        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        achieve on_char(char, chair)
        # Sit on the chair

        touch(mouse)
        # Touch the mouse to turn on the computer

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From evaluation.py
cdl_dataset/dataset/Write_an_email/g2.txt
Checking k1
Evaluator failed to find a plan
##############################
