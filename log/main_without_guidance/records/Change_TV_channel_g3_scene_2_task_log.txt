From agent.py
Reset goals: The sub-goals are: 
['1. Find the remote control for the TV while sitting on the couch.', '2. Turn on the TV using the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2081_around_couch_192(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==192
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(remote_control,couch_instance)
        else:
            exp(remote_control,couch_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,couch_instance]=True
        close[couch_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_remote_control(remote_control: item):
    body:
        assert is_remote_control(remote_control)
        # Confirm the item is a remote control
        achieve close_char(char, remote_control)
        # Achieve being close to the remote control

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control item

        if not visited(remote_control):
            observe(remote_control, "Locate the position of the remote control")
        # Observe the remote controls position if it hasnt been visited

        find_remote_control(remote_control)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_remote_control(remote_control: item):
    body:
        assert is_remote_control(remote_control)
        # Confirm the item is a remote control
        achieve close_char(char, remote_control)
        # Achieve being close to the remote control

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control item

        if not visited(remote_control):
            observe(remote_control, "Locate the position of the remote control")
        # Observe the remote controls position if it hasnt been visited

        find_remote_control(remote_control)

##############################
From agent.py-> find a plan in act()
walk_executor(couch_192)exp(remote_control_2081, couch_192)walk_executor(remote_control_2081)obs(remote_control_2081, Locate the position of the remote control)
##############################
From agent.py
walk_executor(couch_192)
Find vacuum_cleaner_2094. Find drawing_196. Find cat_2082. Find pillow_195. Robot is inside home_office_161. Robot is close couch_192. 
##############################
From agent.py
exp(remote_control_2081, couch_192)
Failed to find remote_control_2081 around couch_192. 
##############################
From agent.py-> find a plan in act()
walk_executor(tvstand_186)exp(remote_control_2081, tvstand_186)walk_executor(remote_control_2081)obs(remote_control_2081, Locate the position of the remote control)
##############################
From agent.py
walk_executor(tvstand_186)
Robot is inside home_office_161. Robot is close floor_162. Robot is close tvstand_186. Robot is close floor_163. Robot is no longer close couch_192.
##############################
From agent.py
exp(remote_control_2081, tvstand_186)
Failed to find remote_control_2081 around tvstand_186. 
##############################
From agent.py-> find a plan in act()
walk_executor(tvstand_135)exp(remote_control_2081, tvstand_135)walk_executor(remote_control_2081)obs(remote_control_2081, Locate the position of the remote control)
##############################
From agent.py
walk_executor(tvstand_135)
Find remote_control_2081. Find cd_player_2084. Find drawing_118. Find dvd_player_2085. Robot is inside dining_room_1. Robot is close floor_19. Robot is close tvstand_135. Robot is no longer inside home_office_161.Robot is no longer close tvstand_186.Robot is no longer close floor_162.Robot is no longer close floor_163.
##############################
From agent.py
exp(remote_control_2081, tvstand_135)
Find remote_control_2081. 
##############################
From agent.py-> find a plan in act()
walk_executor(remote_control_2081)obs(remote_control_2081, Locate the position of the remote control)
##############################
From agent.py
walk_executor(remote_control_2081)
Robot is inside dining_room_1. Robot is close tvstand_135. Robot is close remote_control_2081. Robot is no longer close floor_19.
##############################
From agent.py
obs(remote_control_2081, Locate the position of the remote control)
Get this information:  remote_control_2081 is close to tvstand_135. remote_control_2081 is close to character_219. remote_control_2081 is on tvstand_135. remote_control_2081 is inside dining_room_1. remote_control_2081 is OFF.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

behavior find_console_2027_around_dvd_player_2085(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind dvd_player_instance:item where:
            is_dvd_player(dvd_player_instance) and id[dvd_player_instance]==2085
        achieve close_char(char,dvd_player_instance)
        if can_open(dvd_player_instance):
            achieve_once open(dvd_player_instance)
            exp(console,dvd_player_instance)
        else:
            exp(console,dvd_player_instance)
    eff:
        unknown[console]=False
        close[console,dvd_player_instance]=True
        close[dvd_player_instance,console]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_tv_with_remote(tv:item, remote_control:item):
    body:
        achieve close_char(char, tv)
        # Ensure you are close to the TV before using the remote

        achieve is_on(tv)
        # Turn on the TV using the remote control

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        if not visited(tv):
            observe(tv, "Check if it is the television you intend to turn on")
        # Check the state of the TV if not previously visited

        if not visited(remote_control):
            observe(remote_control, "Check if it is the remote control for the TV")
        # Check the state of the remote control if not previously visited

        turn_on_tv_with_remote(tv, remote_control)
        # Use the remote control to turn on the TV
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior turn_on_tv_with_remote(tv:item, remote_control:item):
    body:
        achieve close_char(char, tv)
        # Ensure you are close to the TV before using the remote

        achieve is_on(tv)
        # Turn on the TV using the remote control

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        if not visited(tv):
            observe(tv, "Check if it is the television you intend to turn on")
        # Check the state of the TV if not previously visited

        if not visited(remote_control):
            observe(remote_control, "Check if it is the remote control for the TV")
        # Check the state of the remote control if not previously visited

        turn_on_tv_with_remote(tv, remote_control)
        # Use the remote control to turn on the TV
##############################
From agent.py-> find a plan in act()
walk_executor(television_216)obs(television_216, Check if it is the television you intend to turn on)walk_executor(remote_control_2081)obs(remote_control_2081, Check if it is the remote control for the TV)walk_executor(television_216)switchon_executor(television_216)
##############################
From agent.py
walk_executor(television_216)
Robot is inside home_office_161. Robot is close television_216. Robot is close tvstand_186. Robot is no longer inside dining_room_1.Robot is no longer close remote_control_2081.Robot is no longer close tvstand_135.
##############################
From agent.py
obs(television_216, Check if it is the television you intend to turn on)
Get this information:  floor_163 is facing television_216. ceilinglamp_185 is facing television_216. ceiling_177 is facing television_216. television_216 is inside home_office_161. powersocket_218 is facing television_216. wall_169 is facing television_216. photoframe_210 is facing television_216. curtain_199 is facing television_216. wall_6 is facing television_216. wallshelf_191 is facing television_216. ceiling_175 is facing television_216. curtain_197 is facing television_216. wall_3 is facing television_216. ceiling_178 is facing television_216. bookshelf_189 is facing television_216. window_181 is facing television_216. television_216 is close to couch_192. television_216 is close to floor_162. television_216 is close to walllamp_291. television_216 is close to floor_163. television_216 is close to floor_166. television_216 is close to wall_169. television_216 is close to wall_171. television_216 is close to wall_268. television_216 is close to wall_267. television_216 is close to ceiling_175. television_216 is close to curtain_304. television_216 is close to ceiling_176. television_216 is close to shower_303. television_216 is close to floor_277. television_216 is close to floor_278. television_216 is close to walllamp_183. television_216 is close to walllamp_184. television_216 is close to tvstand_186. television_216 is close to character_219. television_216 is on tvstand_186. orchid_200 is facing television_216. wall_173 is facing television_216. floor_162 is facing television_216. floor_168 is facing television_216. wallshelf_187 is facing television_216. curtain_198 is facing television_216. ceiling_176 is facing television_216. light_217 is facing television_216. wallshelf_190 is facing television_216. doorjamb_37 is facing television_216. wall_171 is facing television_216. mat_201 is facing television_216. television_216 is CLEAN. television_216 is PLUGGED_IN. television_216 is OFF.
##############################
From agent.py
walk_executor(remote_control_2081)
Robot is inside dining_room_1. Robot is close remote_control_2081. Robot is close tvstand_135. Robot is no longer inside home_office_161.Robot is no longer close television_216.Robot is no longer close tvstand_186.
##############################
From agent.py
obs(remote_control_2081, Check if it is the remote control for the TV)
Get this information:  remote_control_2081 is close to tvstand_135. remote_control_2081 is close to character_219. remote_control_2081 is on tvstand_135. remote_control_2081 is inside dining_room_1. remote_control_2081 is OFF.
##############################
From agent.py
walk_executor(television_216)
Robot is inside home_office_161. Robot is close television_216. Robot is close tvstand_186. Robot is no longer inside dining_room_1.Robot is no longer close remote_control_2081.Robot is no longer close tvstand_135.
##############################
From agent.py
switchon_executor(television_216)
Robot is inside home_office_161. Robot is close television_216. Robot is close tvstand_186. 
##############################
From agent.py
Human Instruction: You need to turn on the TV using the remote control, as stated in the sub-task. The TV was turned on directly instead of using the remote, which does not fulfill the requirement of the sub-task.

The actions you have taken:
Action 1: Walk to couch_192.
Action 2: look for remote_control_2081 around couch_192.
Action 3: Walk to tvstand_186.
Action 4: look for remote_control_2081 around tvstand_186.
Action 5: Walk to tvstand_135.
Action 6: look for remote_control_2081 around tvstand_135.
Action 7: Walk to remote_control_2081.
Action 8: Observe around remote_control_2081 with the question of Locate the position of the remote control.
Action 9: Walk to television_216.
Action 10: Observe around television_216 with the question of Check if it is the television you intend to turn on.
Action 11: Walk to remote_control_2081.
Action 12: Observe around remote_control_2081 with the question of Check if it is the remote control for the TV.
Action 13: Walk to television_216.
Action 14: Switch on television_216.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_console_2027_around_stereo_2007(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind stereo_instance:item where:
            is_stereo(stereo_instance) and id[stereo_instance]==2007
        achieve close_char(char,stereo_instance)
        if can_open(stereo_instance):
            achieve_once open(stereo_instance)
            exp(console,stereo_instance)
        else:
            exp(console,stereo_instance)
    eff:
        unknown[console]=False
        close[console,stereo_instance]=True
        close[stereo_instance,console]=True
    

#exp_behavior_end

#goal_representation
 
def is_tv_remote_match(tv: item, remote: item):
    # Function to check if the remote is the correct one for the TV
    symbol is_match = is_television(tv) and is_remote_control(remote)
    return is_match

behavior turn_on_tv_with_remote(tv: item, remote: item):
    body:
        achieve is_on(tv)
        # Ensure the television is turned on

behavior __goal__():
    body:
        bind television: item where:
            is_television(television) and id[television]==216
        # Select the television with ID 216

        bind remote_control: item where:
            is_remote_control(remote_control) and id[remote_control]==2081
        # Select the remote control with ID 2081

        if not visited(remote_control):
            observe(remote_control, "Check if it is the remote control for the TV")
        # Observe the remote to confirm it controls the television

        if is_tv_remote_match(television, remote_control):
            turn_on_tv_with_remote(television, remote_control)
        # Use the remote to turn on the television if its a match 

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

behavior find_phone_47_around_table_127(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(phone,table_instance)
        else:
            exp(phone,table_instance)
    eff:
        unknown[phone]=False
        close[phone,table_instance]=True
        close[table_instance,phone]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_tv_with_remote(remote_control:item, television:item):
    body:
        achieve is_remote_control(remote_control)
        achieve is_television(television)
        observe(remote_control, "Check if it is the remote control for the TV")
        observe(television, "Check if it is the television you intend to turn on")
        achieve is_on(television) 

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        
        bind television: item where:
            is_television(television)
            
        turn_on_tv_with_remote(remote_control, television)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior turn_on_tv_with_remote(remote_control:item, television:item):
    body:
        achieve is_remote_control(remote_control)
        achieve is_television(television)
        observe(remote_control, "Check if it is the remote control for the TV")
        observe(television, "Check if it is the television you intend to turn on")
        achieve is_on(television) 

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        
        bind television: item where:
            is_television(television)
            
        turn_on_tv_with_remote(remote_control, television)
##############################
From agent.py-> find a plan in act()
walk_executor(remote_control_2081)obs(remote_control_2081, Check if it is the remote control for the TV)walk_executor(television_216)obs(television_216, Check if it is the television you intend to turn on)
##############################
From agent.py
walk_executor(remote_control_2081)
Robot is inside dining_room_1. Robot is close remote_control_2081. Robot is close tvstand_135. Robot is no longer inside home_office_161.Robot is no longer close television_216.Robot is no longer close tvstand_186.
##############################
From agent.py
obs(remote_control_2081, Check if it is the remote control for the TV)
Get this information:  remote_control_2081 is close to tvstand_135. remote_control_2081 is close to character_219. remote_control_2081 is on tvstand_135. remote_control_2081 is inside dining_room_1. remote_control_2081 is OFF.
##############################
From agent.py
walk_executor(television_216)
Robot is inside home_office_161. Robot is close television_216. Robot is close tvstand_186. Robot is no longer inside dining_room_1.Robot is no longer close remote_control_2081.Robot is no longer close tvstand_135.
##############################
From agent.py
obs(television_216, Check if it is the television you intend to turn on)
Get this information:  floor_163 is facing television_216. ceilinglamp_185 is facing television_216. ceiling_177 is facing television_216. television_216 is inside home_office_161. powersocket_218 is facing television_216. wall_169 is facing television_216. photoframe_210 is facing television_216. curtain_199 is facing television_216. wall_6 is facing television_216. wallshelf_191 is facing television_216. ceiling_175 is facing television_216. curtain_197 is facing television_216. wall_3 is facing television_216. ceiling_178 is facing television_216. bookshelf_189 is facing television_216. window_181 is facing television_216. television_216 is close to couch_192. television_216 is close to floor_162. television_216 is close to walllamp_291. television_216 is close to floor_163. television_216 is close to floor_166. television_216 is close to wall_169. television_216 is close to wall_171. television_216 is close to wall_268. television_216 is close to wall_267. television_216 is close to ceiling_175. television_216 is close to curtain_304. television_216 is close to ceiling_176. television_216 is close to shower_303. television_216 is close to floor_277. television_216 is close to floor_278. television_216 is close to walllamp_183. television_216 is close to walllamp_184. television_216 is close to tvstand_186. television_216 is close to character_219. television_216 is on tvstand_186. orchid_200 is facing television_216. wall_173 is facing television_216. floor_162 is facing television_216. floor_168 is facing television_216. wallshelf_187 is facing television_216. curtain_198 is facing television_216. ceiling_176 is facing television_216. light_217 is facing television_216. wallshelf_190 is facing television_216. doorjamb_37 is facing television_216. wall_171 is facing television_216. mat_201 is facing television_216. television_216 is CLEAN. television_216 is PLUGGED_IN. television_216 is ON.
##############################
From agent.py
Human Instruction: You need to turn on the TV using the remote control, as stated in the sub-task. The TV was turned on directly instead of using the remote, which does not fulfill the requirement of the sub-task. You should ensure that the TV is turned on using the remote control.

The actions you have taken:
Action 1: Walk to couch_192.
Action 2: look for remote_control_2081 around couch_192.
Action 3: Walk to tvstand_186.
Action 4: look for remote_control_2081 around tvstand_186.
Action 5: Walk to tvstand_135.
Action 6: look for remote_control_2081 around tvstand_135.
Action 7: Walk to remote_control_2081.
Action 8: Observe around remote_control_2081 with the question of Locate the position of the remote control.
Action 9: Walk to television_216.
Action 10: Observe around television_216 with the question of Check if it is the television you intend to turn on.
Action 11: Walk to remote_control_2081.
Action 12: Observe around remote_control_2081 with the question of Check if it is the remote control for the TV.
Action 13: Walk to television_216.
Action 14: Switch on television_216.
Action 15: Walk to remote_control_2081.
Action 16: Observe around remote_control_2081 with the question of Check if it is the remote control for the TV.
Action 17: Walk to television_216.
Action 18: Observe around television_216 with the question of Check if it is the television you intend to turn on.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_bed_264(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(phone,bed_instance)
        else:
            exp(phone,bed_instance)
    eff:
        unknown[phone]=False
        close[phone,bed_instance]=True
        close[bed_instance,phone]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_tv_with_remote(remote_control: item):
    body:
        achieve is_on(remote_control) # Turn on the TV using the remote control

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control) and has_switch(remote_control)
        # Select the remote control that has a switch

        if not visited(remote_control):
            observe(remote_control, "Check if it is the remote control for the TV")
        # Observe the remote control to confirm it is for the TV

        turn_on_tv_with_remote(remote_control) 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior turn_on_tv_with_remote(remote_control: item):
    body:
        achieve is_on(remote_control) # Turn on the TV using the remote control

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control) and has_switch(remote_control)
        # Select the remote control that has a switch

        if not visited(remote_control):
            observe(remote_control, "Check if it is the remote control for the TV")
        # Observe the remote control to confirm it is for the TV

        turn_on_tv_with_remote(remote_control) 
##############################
From agent.py-> find a plan in act()
walk_executor(remote_control_2081)obs(remote_control_2081, Check if it is the remote control for the TV)switchon_executor(remote_control_2081)
##############################
From agent.py
walk_executor(remote_control_2081)
Robot is inside dining_room_1. Robot is close remote_control_2081. Robot is close tvstand_135. Robot is no longer inside home_office_161.Robot is no longer close television_216.Robot is no longer close tvstand_186.
##############################
From agent.py
obs(remote_control_2081, Check if it is the remote control for the TV)
Get this information:  remote_control_2081 is close to tvstand_135. remote_control_2081 is close to character_219. remote_control_2081 is on tvstand_135. remote_control_2081 is inside dining_room_1. remote_control_2081 is OFF.
##############################
From agent.py
switchon_executor(remote_control_2081)
Robot is inside dining_room_1. Robot is close remote_control_2081. Robot is close tvstand_135. 
##############################
From evaluation.py
cdl_dataset/dataset/Change_TV_channel/g3.txt
Checking k1
missed actions: walk_executor(couch_192);sit_executor(couch_192);
missed action num: 2
##############################
From evaluation.py
cdl_dataset/dataset/Change_TV_channel/g3.txt
Checking k1
missed actions: walk_executor(couch_192);sit_executor(couch_192);
missed action num: 2
##############################
