From agent.py
Reset goals: The sub-goals are: 
['Boil some rice by pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_405_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if there is water in a specified pot
    symbol water_in_pot=exists o: item : has_water(o) and is_pot(o)
    return water_in_pot

behavior fill_pot_with_water(pot:item, water_source:item):
    body:
        achieve_once inside(pot, water_source)
        # Fill the pot with water from water source

behavior start_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior boil_rice(rice:item, pot:item, stove:item):
    body:
        achieve inside(rice, pot)
        # Place the rice inside the pot for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind rice: item where:
            is_food_rice(rice)
        # Select rice as the food item
        if not has_water_in_pot(pot):
            bind water_source: item where:
                has_water(water_source)
            fill_pot_with_water(pot, water_source)
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        boil_rice(rice, pot, stove)
        start_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_183_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if there is water in the pot
    symbol has_water=has_water(pot)
    return has_water

behavior boil_rice(rice:item, pot:item, stove:item):
    body:
        achieve inside(rice, pot) # Put the rice inside the pot
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) 
        # Select the rice
        bind pot: item where:
            is_pot(pot) and has_water_in_pot(pot)
        # Select the pot containing water
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        boil_rice(rice, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil some rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_pot_on_stove(stove:item):
    # Function to check if there is a pot on the stove
    symbol has_pot=exists p: item : is_pot(p) and on(p, stove)
    return has_pot

def has_rice_and_water_in_pot(pot:item):
    # Function to check if there is rice and water in the pot
    symbol has_rice_and_water=exists rice: item : is_food_rice(rice) and inside(rice, pot) and has_water(pot)
    return has_rice_and_water

behavior start_boiling(pot:item, stove:item):
    body:
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind pot: item where:
            is_pot(pot) and has_pot_on_stove(stove)
        # Select a pot that is on the stove

        assert has_rice_and_water_in_pot(pot) 
        # Assert that the pot has rice and water

        start_boiling(pot, stove) # Start boiling the rice in the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_pillow_405_around_closetdrawer_158(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pillow,closetdrawer_instance)
        else:
            exp(pillow,closetdrawer_instance)
    eff:
        unknown[pillow]=False
        close[pillow,closetdrawer_instance]=True
        close[closetdrawer_instance,pillow]=True
    

behavior find_food_rice_2036_around_cupboard_229(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_required_items(pot:item):
    # Function to check if a pot contains rice and water
    symbol has_items = exists rice: item : is_food_rice(rice) and inside(rice, pot) and has_water(pot)
    return has_items

def is_on_stove(pot:item):
    # Function to check if a pot is on the stove
    symbol on_stove=exists stove: item : is_stove(stove) and on(pot, stove)
    return on_stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        if not has_required_items(pot):
            observe(pot, "Check if there is rice and water inside the pot")
        
        if not is_on_stove(pot):
            observe(pot, "Check if the pot is on the stove")
        
        bind stove: item where:
            is_stove(stove)
        
        achieve on(pot, stove)
        achieve is_on(stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_required_items(pot:item):
    # Function to check if a pot contains rice and water
    symbol has_items = exists rice: item : is_food_rice(rice) and inside(rice, pot) and has_water(pot)
    return has_items

def is_on_stove(pot:item):
    # Function to check if a pot is on the stove
    symbol on_stove=exists stove: item : is_stove(stove) and on(pot, stove)
    return on_stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        if not has_required_items(pot):
            observe(pot, "Check if there is rice and water inside the pot")
        
        if not is_on_stove(pot):
            observe(pot, "Check if the pot is on the stove")
        
        bind stove: item where:
            is_stove(stove)
        
        achieve on(pot, stove)
        achieve is_on(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(pot_2069, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)obs(pot_2069, Check if there is rice and water inside the pot)obs(pot_2069, Check if the pot is on the stove)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(cupboard_229)
Find tray_296. Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. Robot is no longer inside bathroom_1.
##############################
From agent.py
open_executor(cupboard_229)
Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. 
##############################
From agent.py
exp(pot_2069, cupboard_229)
Failed to find pot_2069 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(pot_2069, dishwasher_1001)walk_executor(pot_2069)open_executor(pot_2069)obs(pot_2069, Check if there is rice and water inside the pot)obs(pot_2069, Check if the pot is on the stove)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot is inside dining_room_201. Robot is close dishwasher_1001. Robot is no longer close wall_211.Robot is no longer close cupboard_229.
##############################
From agent.py
open_executor(dishwasher_1001)
Robot is inside dining_room_201. Robot is close dishwasher_1001. 
##############################
From agent.py
exp(pot_2069, dishwasher_1001)
Failed to find pot_2069 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(pot_2069, stove_2065)walk_executor(pot_2069)open_executor(pot_2069)obs(pot_2069, Check if there is rice and water inside the pot)obs(pot_2069, Check if the pot is on the stove)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)close_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close stove_2065. Robot is close kitchen_counter_230. Robot is no longer close dishwasher_1001.
##############################
From agent.py
open_executor(stove_2065)
Find drawing_174. Robot is inside dining_room_201. Robot is close stove_2065. Robot is close kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, stove_2065)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)obs(pot_2069, Check if there is rice and water inside the pot)obs(pot_2069, Check if the pot is on the stove)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)close_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Robot is no longer close stove_2065.
##############################
From agent.py
open_executor(pot_2069)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. 
##############################
From agent.py
obs(pot_2069, Check if there is rice and water inside the pot)
Get this information:  pot_2069 is on kitchen_counter_230. pot_2069 is close to kitchen_counter_230. pot_2069 is close to character_65. pot_2069 is inside dining_room_201. pot_2069 is OPEN.
##############################
From agent.py
obs(pot_2069, Check if the pot is on the stove)
Get this information:  pot_2069 is on kitchen_counter_230. pot_2069 is close to kitchen_counter_230. pot_2069 is close to character_65. pot_2069 is inside dining_room_201. pot_2069 is OPEN.
##############################
From agent.py
grab_executor(pot_2069)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Robot is close stove_2065. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Robot is close stove_2065. pot_2069 released by right hand. 
##############################
From agent.py
close_executor(stove_2065)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Robot is close stove_2065. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Robot is close stove_2065. 
##############################
From agent.py
Human Instruction: You need to ensure that the pot contains both rice and water before boiling. Currently, there's no confirmation that rice and water were inside the pot when it was placed on the stove. Please check the contents of the pot and add any missing items.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for pot_2069 around cupboard_229.
Action 4: Walk to dishwasher_1001.
Action 5: Open dishwasher_1001.
Action 6: look for pot_2069 around dishwasher_1001.
Action 7: Walk to stove_2065.
Action 8: Open stove_2065.
Action 9: look for pot_2069 around stove_2065.
Action 10: Walk to pot_2069.
Action 11: Open pot_2069.
Action 12: Observe around pot_2069 with the question of Check if there is rice and water inside the pot.
Action 13: Observe around pot_2069 with the question of Check if the pot is on the stove.
Action 14: Grab pot_2069.
Action 15: Walk to stove_2065.
Action 16: Put pot_2069 on stove_2065.
Action 17: Close stove_2065.
Action 18: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_wallshelf_35(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_rice,wallshelf_instance)
        else:
            exp(food_rice,wallshelf_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,wallshelf_instance]=True
        close[wallshelf_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def pot_has_rice_and_water(pot:item):
    # Determine whether the pot has both rice and water
    symbol has_rice_and_water=exists rice: item : (is_food_rice(rice) and inside(rice, pot))
    and exists water: item : (has_water(pot))
    return has_rice_and_water

behavior check_pot_contents(pot:item):
    body:
        observe(pot, "Check if there is rice and water inside the pot")
        
behavior boil_rice(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Select the pot that has been visited
        
        if not pot_has_rice_and_water(pot):
            check_pot_contents(pot)
            # Check if pot contains rice and water
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        boil_rice(pot, stove)
        # Initiate boiling the rice in the pot

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EXISTS', 'exists') at line 5865, column 9.
Expected one of: 
	* AT
	* __ANON_4
	* PERCENT
	* __ANON_6
	* VBAR
	* LSHIFT
	* GREATER_EQ
	* __ANON_8
	* __ANON_2
	* AMPERSAND
	* CIRCUMFLEX
	* FLOORDIV
	* LESS_EQ
	* SEMICOLON
	* __ANON_5
	* DOUBLE_EQUAL
	* __ANON_1
	* COMMA
	* STAR
	* MINUS
	* EQUAL
	* __ANON_0
	* AND
	* LESSTHAN
	* _NEWLINE
	* IF
	* OR
	* NOT_EQ
	* SLASH
	* PLUS
	* RSHIFT
	* MORETHAN
	* __ANON_7
	* __ANON_3

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2036_around_wallshelf_35(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_rice,wallshelf_instance)
        else:
            exp(food_rice,wallshelf_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,wallshelf_instance]=True
        close[wallshelf_instance,food_rice]=True
    

#goal_representation
 
def pot_has_rice_and_water(pot:item):
    # Determine whether the pot has both rice and water
    symbol has_rice_and_water=exists rice: item : (is_food_rice(rice) and inside(rice, pot)) and has_water(pot)
    return has_rice_and_water

behavior check_pot_contents(pot:item):
    body:
        observe(pot, "Check if there is rice and water inside the pot")

behavior boil_rice(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Select the pot that has been visited
        
        if not pot_has_rice_and_water(pot):
            check_pot_contents(pot)
            # Check if pot contains rice and water
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        boil_rice(pot, stove)
        # Initiate boiling the rice in the pot

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def pot_has_rice_and_water(pot:item):
    # Determine whether the pot has both rice and water
    symbol has_rice_and_water=exists rice: item : (is_food_rice(rice) and inside(rice, pot)) and has_water(pot)
    return has_rice_and_water

behavior check_pot_contents(pot:item):
    body:
        observe(pot, "Check if there is rice and water inside the pot")

behavior boil_rice(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Select the pot that has been visited
        
        if not pot_has_rice_and_water(pot):
            check_pot_contents(pot)
            # Check if pot contains rice and water
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        boil_rice(pot, stove)
        # Initiate boiling the rice in the pot

##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil some rice by pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_and_water(pot:item):
    # Function to check if the pot contains both rice and water
    symbol has_both=exists rice: item : is_food_rice(rice) and inside(rice, pot) and has_water(pot)
    return has_both

behavior boil_rice(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Ensure the pot is placed on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        if not has_rice_and_water(pot):
            # Check the pot contents if it does not contain both rice and water
            observe(pot, "Check if there is rice and water inside the pot")
            # Inspect whether the pot contains both rice and water
        
        boil_rice(pot, stove)
        # Call the behavior to start boiling rice using the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_rice_and_water(pot:item):
    # Function to check if the pot contains both rice and water
    symbol has_both=exists rice: item : is_food_rice(rice) and inside(rice, pot) and has_water(pot)
    return has_both

behavior boil_rice(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Ensure the pot is placed on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        if not has_rice_and_water(pot):
            # Check the pot contents if it does not contain both rice and water
            observe(pot, "Check if there is rice and water inside the pot")
            # Inspect whether the pot contains both rice and water
        
        boil_rice(pot, stove)
        # Call the behavior to start boiling rice using the stove

##############################
From agent.py-> find a plan in act()
obs(pot_2069, Check if there is rice and water inside the pot)
##############################
From agent.py
obs(pot_2069, Check if there is rice and water inside the pot)
Get this information:  pot_2069 is on stove_2065. pot_2069 is close to character_65. pot_2069 is close to stove_2065. pot_2069 is inside dining_room_201. pot_2069 is OPEN.
##############################
From agent.py
Human Instruction: You need to ensure that the pot contains both rice and water before boiling. Currently, there is no confirmation that rice and water were inside the pot when it was placed on the stove. Please check the contents of the pot and add the missing items.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for pot_2069 around cupboard_229.
Action 4: Walk to dishwasher_1001.
Action 5: Open dishwasher_1001.
Action 6: look for pot_2069 around dishwasher_1001.
Action 7: Walk to stove_2065.
Action 8: Open stove_2065.
Action 9: look for pot_2069 around stove_2065.
Action 10: Walk to pot_2069.
Action 11: Open pot_2069.
Action 12: Observe around pot_2069 with the question of Check if there is rice and water inside the pot.
Action 13: Observe around pot_2069 with the question of Check if the pot is on the stove.
Action 14: Grab pot_2069.
Action 15: Walk to stove_2065.
Action 16: Put pot_2069 on stove_2065.
Action 17: Close stove_2065.
Action 18: Switch on stove_2065.
Action 19: Observe around pot_2069 with the question of Check if there is rice and water inside the pot.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2042_around_knife_2050(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2050
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(dry_pasta,knife_instance)
        else:
            exp(dry_pasta,knife_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,knife_instance]=True
        close[knife_instance,dry_pasta]=True
    

behavior find_food_rice_2036_around_wallshelf_35(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_rice,wallshelf_instance)
        else:
            exp(food_rice,wallshelf_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,wallshelf_instance]=True
        close[wallshelf_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_and_water(pot:item):
    # Function to check if there is rice and water in the pot
    symbol has_contents=exists o: item : (is_food_rice(o) or has_water(o)) and inside(o, pot)
    return has_contents

behavior verify_pot_contents(pot:item):
    body:
        observe(pot, "Check if there is rice and water inside the pot")
        
behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior boil_pot_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Bind the pot instance
        
        bind stove: item where:
            is_stove(stove)
        # Bind the stove instance
        
        if not has_rice_and_water(pot):
            verify_pot_contents(pot)
        # Verify if the pot has rice and water, and check it if not confirmed

        # Ensure the pot is placed on the stove
        place_pot_on_stove(pot, stove)
        
        # Turn on the stove to boil
        boil_pot_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_rice_and_water(pot:item):
    # Function to check if there is rice and water in the pot
    symbol has_contents=exists o: item : (is_food_rice(o) or has_water(o)) and inside(o, pot)
    return has_contents

behavior verify_pot_contents(pot:item):
    body:
        observe(pot, "Check if there is rice and water inside the pot")
        
behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior boil_pot_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Bind the pot instance
        
        bind stove: item where:
            is_stove(stove)
        # Bind the stove instance
        
        if not has_rice_and_water(pot):
            verify_pot_contents(pot)
        # Verify if the pot has rice and water, and check it if not confirmed

        # Ensure the pot is placed on the stove
        place_pot_on_stove(pot, stove)
        
        # Turn on the stove to boil
        boil_pot_on_stove(stove)

##############################
From agent.py-> find a plan in act()
obs(pot_2069, Check if there is rice and water inside the pot)
##############################
From agent.py
obs(pot_2069, Check if there is rice and water inside the pot)
Get this information:  pot_2069 is on stove_2065. pot_2069 is close to character_65. pot_2069 is close to stove_2065. pot_2069 is inside dining_room_201. pot_2069 is OPEN.
##############################
From agent.py
Human Instruction: You need to ensure that the pot contains both rice and water before boiling. Currently, there is no confirmation that rice and water were inside the pot when it was placed on the stove. Please check the contents of the pot and add the missing items.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for pot_2069 around cupboard_229.
Action 4: Walk to dishwasher_1001.
Action 5: Open dishwasher_1001.
Action 6: look for pot_2069 around dishwasher_1001.
Action 7: Walk to stove_2065.
Action 8: Open stove_2065.
Action 9: look for pot_2069 around stove_2065.
Action 10: Walk to pot_2069.
Action 11: Open pot_2069.
Action 12: Observe around pot_2069 with the question of Check if there is rice and water inside the pot.
Action 13: Observe around pot_2069 with the question of Check if the pot is on the stove.
Action 14: Grab pot_2069.
Action 15: Walk to stove_2065.
Action 16: Put pot_2069 on stove_2065.
Action 17: Close stove_2065.
Action 18: Switch on stove_2065.
Action 19: Observe around pot_2069 with the question of Check if there is rice and water inside the pot.
Action 20: Observe around pot_2069 with the question of Check if there is rice and water inside the pot.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_wallshelf_35(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_rice,wallshelf_instance)
        else:
            exp(food_rice,wallshelf_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,wallshelf_instance]=True
        close[wallshelf_instance,food_rice]=True
    

behavior find_food_snack_2038_around_fridge_289(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_snack,fridge_instance)
        else:
            exp(food_snack,fridge_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,fridge_instance]=True
        close[fridge_instance,food_snack]=True
    

#exp_behavior_end

#goal_representation
 
def pot_on_stove_with_ingredients(pot:item, stove:item):
    # Check if the pot has rice and water inside and is placed on the stove
    symbol ingredients_in_pot = is_food_rice(pot) and has_water(pot)
    symbol pot_on_stove = on(pot, stove)
    return ingredients_in_pot and pot_on_stove

behavior ensure_ingredients_in_pot(pot:item):
    body:
        if not is_food_rice(pot):
            bind rice: item where:
                is_food_rice(rice)
            achieve_once inhand(rice)
            achieve inside(rice, pot)
            
        if not has_water(pot):
            bind water_source: item where:
                is_faucet(water_source)
            achieve_once is_on(water_source)
            water(pot)
            achieve_once is_off(water_source)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior heat_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)

        if not pot_on_stove_with_ingredients(pot, stove):
            ensure_ingredients_in_pot(pot)
            place_pot_on_stove(pot, stove)

        heat_stove(stove)
 
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_snack_2038_around_fridge_289(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_snack,fridge_instance)
        else:
            exp(food_snack,fridge_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,fridge_instance]=True
        close[fridge_instance,food_snack]=True
    

behavior find_pillow_183_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_food_rice_2036_around_wallshelf_35(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_rice,wallshelf_instance)
        else:
            exp(food_rice,wallshelf_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,wallshelf_instance]=True
        close[wallshelf_instance,food_rice]=True
    

#goal_representation
 
def pot_on_stove_with_ingredients(pot:item, stove:item):
    # Check if the pot has rice and water inside and is placed on the stove
    symbol ingredients_in_pot = is_food_rice(pot) and is_milk(pot)
    symbol pot_on_stove = on(pot, stove)
    return ingredients_in_pot and pot_on_stove

behavior ensure_ingredients_in_pot(pot:item):
    body:
        if not is_food_rice(pot):
            bind rice: item where:
                is_food_rice(rice)
            achieve_once inhand(rice)
            achieve inside(rice, pot)
            
        if not is_milk(pot):
            bind water_source: item where:
                is_faucet(water_source)
            achieve_once is_on(water_source)
            water(pot)
            achieve_once is_off(water_source)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior heat_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)

        if not pot_on_stove_with_ingredients(pot, stove):
            ensure_ingredients_in_pot(pot)
            place_pot_on_stove(pot, stove)

        heat_stove(stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_fruit_2023_around_fridge_289(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fruit,fridge_instance)
        else:
            exp(food_fruit,fridge_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,fridge_instance]=True
        close[fridge_instance,food_fruit]=True
    

behavior find_food_snack_2038_around_fridge_289(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_snack,fridge_instance)
        else:
            exp(food_snack,fridge_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,fridge_instance]=True
        close[fridge_instance,food_snack]=True
    

behavior find_food_rice_2036_around_wallshelf_35(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_rice,wallshelf_instance)
        else:
            exp(food_rice,wallshelf_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,wallshelf_instance]=True
        close[wallshelf_instance,food_rice]=True
    

#goal_representation
 
def pot_on_stove_with_ingredients(pot:item, stove:item):
    # Check if the pot has rice and water inside and is placed on the stove
    symbol ingredients_in_pot = is_food_rice(pot) and is_milk(pot)
    symbol pot_on_stove = on(pot, stove)
    return ingredients_in_pot and pot_on_stove

behavior ensure_ingredients_in_pot(pot:item):
    body:
        if not is_food_rice(pot):
            bind rice: item where:
                is_food_rice(rice)
            achieve_once inhand(rice)
            achieve inside(rice, pot)
            
        if not is_milk(pot):
            bind water_source: item where:
                is_faucet(water_source)
            achieve_once is_on(water_source)
            is_food_food(pot) # Replace with is_food_food
            achieve_once is_off(water_source)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior heat_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)

        if not pot_on_stove_with_ingredients(pot, stove):
            ensure_ingredients_in_pot(pot)
            place_pot_on_stove(pot, stove)

        heat_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_wallshelf_35(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_rice,wallshelf_instance)
        else:
            exp(food_rice,wallshelf_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,wallshelf_instance]=True
        close[wallshelf_instance,food_rice]=True
    

behavior find_food_cake_2013_around_coffee_table_2068(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(food_cake,coffee_table_instance)
        else:
            exp(food_cake,coffee_table_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,coffee_table_instance]=True
        close[coffee_table_instance,food_cake]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_and_water(pot:item):
    # Function to check if the pot contains both rice and water
    symbol has_contents=exists rice: item : is_food_rice(rice) and inside(rice, pot)
    symbol has_contents=has_contents and exists water: item : has_water(pot)
    return has_contents

behavior ensure_pot_contents(pot:item, rice:item, water:item):
    body:
        achieve inside(rice, pot)
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Bind to pot_2069 which is already visited
        
        if not has_rice_and_water(pot):
            # Check if pot contains both rice and water
            bind rice: item where:
                is_food_rice(rice)
            # Bind to any available rice
            bind water: item where:
                is_table(water) and has_water(water)
            # Bind to any available water
            ensure_pot_contents(pot, rice, water)
        # Ensure that the pot has rice and water
        achieve on(pot, stove_2065)
        # Ensure the pot is on the stove
        achieve is_on(stove_2065)
        # Ensure the stove is on

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'water') at line 5883, column 49.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2036_around_wallshelf_35(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_rice,wallshelf_instance)
        else:
            exp(food_rice,wallshelf_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,wallshelf_instance]=True
        close[wallshelf_instance,food_rice]=True
    

behavior find_food_cake_2013_around_coffee_table_2068(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(food_cake,coffee_table_instance)
        else:
            exp(food_cake,coffee_table_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,coffee_table_instance]=True
        close[coffee_table_instance,food_cake]=True
    

#goal_representation
 
def has_rice_and_water(pot:item):
    # Function to check if the pot contains both rice and water
    symbol has_rice=exists rice: item : is_food_rice(rice) and inside(rice, pot)
    symbol has_water=has_water(pot)
    return has_rice and has_water

behavior ensure_pot_contents(pot:item, rice:item, water:item):
    body:
        achieve inside(rice, pot)
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Bind to pot_2069 which is already visited
        
        if not has_rice_and_water(pot):
            # Check if pot contains both rice and water
            bind rice: item where:
                is_food_rice(rice)
            # Bind to any available rice
            bind water: item where:
                is_table(water) and has_water(water)
            # Bind to any available water
            ensure_pot_contents(pot, rice, water)
        # Ensure that the pot has rice and water
        achieve on(pot, stove_2065)
        # Ensure the pot is on the stove
        achieve is_on(stove_2065)
        # Ensure the stove is on

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2036_around_wallshelf_35(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_rice,wallshelf_instance)
        else:
            exp(food_rice,wallshelf_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,wallshelf_instance]=True
        close[wallshelf_instance,food_rice]=True
    

behavior find_food_cake_2013_around_coffee_table_2068(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(food_cake,coffee_table_instance)
        else:
            exp(food_cake,coffee_table_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,coffee_table_instance]=True
        close[coffee_table_instance,food_cake]=True
    

#goal_representation
 
def has_rice_and_water(pot:item):
    # Function to check if the pot contains both rice and water
    symbol has_rice=exists rice: item : is_food_rice(rice) and inside(rice, pot)
    symbol has_water=has_water(pot)
    return has_rice and has_water

behavior ensure_pot_contents(pot:item, rice:item, water:item):
    body:
        achieve inside(rice, pot)
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Bind to pot_2069 which is already visited
        
        bind stove: item where:
            is_stove(stove) and stove == stove_2065
        # Bind to stove_2065
        
        if not has_rice_and_water(pot):
            # Check if pot contains both rice and water
            bind rice: item where:
                is_food_rice(rice)
            # Bind to any available rice
            bind water: item where:
                is_table(water) and has_water(water)
            # Bind to any available water
            ensure_pot_contents(pot, rice, water)
        # Ensure that the pot has rice and water
        achieve on(pot, stove)
        # Ensure the pot is on the stove
        achieve is_on(stove)
        # Ensure the stove is on

#goal_representation_end

##############################
