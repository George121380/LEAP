From agent.py
Reset goals: The sub-goals are: 
['1. Gather coffee grounds and water, and add them to the coffee maker.', '2. Turn on the coffee maker to brew the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2137_around_bookshelf_275(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_oil_2013_around_kitchen_counter_122(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_coffee_filter_2065_around_kitchen_counter_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior gather_ingredients_to_coffee_maker(coffee_grounds:item, water:item, coffee_maker:item):
    body:
        achieve inside(coffee_grounds, coffee_maker)
        # Ensure the coffee grounds are inside the coffee maker

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

behavior __goal__():
    body:
        bind coffee_grounds: item where:
            grabbable(coffee_grounds)
        # Select coffee grounds that can be grabbed

        bind water: item where:
            is_pourable(water)
        # Select a source of water that can be poured

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        gather_ingredients_to_coffee_maker(coffee_grounds, water, coffee_maker)
        # Complete the task of adding coffee grounds and water to the coffee maker
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_pourable not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2053_around_kitchen_counter_122(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2134_around_kitchen_counter_122(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#goal_representation
 
behavior gather_ingredients_to_coffee_maker(coffee_grounds:item, water:item, coffee_maker:item):
    body:
        achieve inside(coffee_grounds, coffee_maker)
        # Ensure the coffee grounds are inside the coffee maker

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

behavior __goal__():
    body:
        bind coffee_grounds: item where:
            grabbable(coffee_grounds)
        # Select coffee grounds that can be grabbed

        bind water: item where:
            is_milk(water)
        # Select a source of water that can be poured

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        gather_ingredients_to_coffee_maker(coffee_grounds, water, coffee_maker)
        # Complete the task of adding coffee grounds and water to the coffee maker

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior gather_ingredients_to_coffee_maker(coffee_grounds:item, water:item, coffee_maker:item):
    body:
        achieve inside(coffee_grounds, coffee_maker)
        # Ensure the coffee grounds are inside the coffee maker

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

behavior __goal__():
    body:
        bind coffee_grounds: item where:
            grabbable(coffee_grounds)
        # Select coffee grounds that can be grabbed

        bind water: item where:
            is_milk(water)
        # Select a source of water that can be poured

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        gather_ingredients_to_coffee_maker(coffee_grounds, water, coffee_maker)
        # Complete the task of adding coffee grounds and water to the coffee maker

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(cup_2132, kitchen_counter_122)open_executor(coffe_maker_130)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(coffe_maker_130)putin_executor(cup_2132, coffe_maker_130)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Find tray_128. Find spectacles_2153. Find fryingpan_2154. Find pot_78. Robot is inside dining_room_41. Robot is close kitchen_counter_122. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_122)
Failed to find cup_2132 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(milk_2115, fridge_126)walk_executor(coffe_maker_130)open_executor(coffe_maker_130)walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(coffe_maker_130)putin_executor(milk_2115, coffe_maker_130)
##############################
From agent.py
walk_executor(fridge_126)
Find food_onion_2048. Find food_food_2046. Find food_food_2073. Find food_steak_2080. Find food_apple_2081. Find food_bacon_2082. Find food_banana_2083. Find food_cake_2085. Find food_carrot_2086. Find food_cereal_2087. Find food_cheese_2088. Find food_chicken_2089. Find food_dessert_2090. Find food_donut_2091. Find food_egg_2092. Find food_fish_2093. Find food_food_2094. Find food_fruit_2095. Find food_hamburger_2096. Find food_ice_cream_2097. Find food_jam_2098. Find food_kiwi_2099. Find food_lemon_2100. Find food_noodles_2101. Find food_oatmeal_2102. Find food_orange_2103. Find food_onion_2104. Find food_peanut_butter_2105. Find food_pizza_2106. Find food_potato_2107. Find food_rice_2108. Find food_salt_2109. Find food_snack_2110. Find food_sugar_2111. Find food_turkey_2112. Find food_vegetable_2113. Find food_food_2001. Find sauce_2148. Find basket_for_clothes_2078. Find food_food_1000. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. Robot is no longer close kitchen_counter_122.
##############################
From agent.py
switchoff_executor(fridge_126)
Find keyboard_211. Find mouse_213. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
open_executor(fridge_126)
Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
exp(milk_2115, fridge_126)
Failed to find milk_2115 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)open_executor(coffe_maker_130)walk_executor(basket_for_clothes_2078)grab_executor(basket_for_clothes_2078)walk_executor(coffe_maker_130)putin_executor(basket_for_clothes_2078, coffe_maker_130)
##############################
From agent.py
walk_executor(coffe_maker_130)
Find coffee_filter_2065. Robot is inside dining_room_41. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. Robot is no longer close food_onion_2048.Robot is no longer close food_food_2046.Robot is no longer close food_food_2073.Robot is no longer close food_steak_2080.Robot is no longer close food_apple_2081.Robot is no longer close food_bacon_2082.Robot is no longer close food_banana_2083.Robot is no longer close food_cake_2085.Robot is no longer close food_carrot_2086.Robot is no longer close food_cereal_2087.Robot is no longer close food_cheese_2088.Robot is no longer close food_chicken_2089.Robot is no longer close food_dessert_2090.Robot is no longer close food_donut_2091.Robot is no longer close food_egg_2092.Robot is no longer close food_fish_2093.Robot is no longer close food_food_2094.Robot is no longer close food_fruit_2095.Robot is no longer close food_hamburger_2096.Robot is no longer close food_ice_cream_2097.Robot is no longer close food_jam_2098.Robot is no longer close food_kiwi_2099.Robot is no longer close food_lemon_2100.Robot is no longer close food_noodles_2101.Robot is no longer close food_oatmeal_2102.Robot is no longer close food_orange_2103.Robot is no longer close food_onion_2104.Robot is no longer close food_peanut_butter_2105.Robot is no longer close food_pizza_2106.Robot is no longer close food_potato_2107.Robot is no longer close food_rice_2108.Robot is no longer close food_salt_2109.Robot is no longer close food_snack_2110.Robot is no longer close food_sugar_2111.Robot is no longer close food_turkey_2112.Robot is no longer close food_vegetable_2113.Robot is no longer close food_food_2001.Robot is no longer close floor_44.Robot is no longer close sauce_2148.Robot is no longer close fridge_126.
##############################
From agent.py
open_executor(coffe_maker_130)
Robot is inside dining_room_41. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. 
##############################
From agent.py
walk_executor(basket_for_clothes_2078)
Find clothes_pants_2157. Find clothes_shirt_2158. Find clothes_socks_2159. Find clothes_skirt_2160. Robot is inside dining_room_41. Robot is close clothes_pants_2157. Robot is close clothes_shirt_2158. Robot is close clothes_socks_2159. Robot is close clothes_skirt_2160. Robot is close basket_for_clothes_2078. Robot is no longer close coffee_filter_2065.Robot is no longer close kitchen_counter_122.Robot is no longer close coffe_maker_130.
##############################
From agent.py
grab_executor(basket_for_clothes_2078)
Robot is inside dining_room_41. Robot is close clothes_pants_2157. Robot is close clothes_shirt_2158. Robot is close clothes_socks_2159. Robot is close clothes_skirt_2160. Robot is close basket_for_clothes_2078. Grabbing basket_for_clothes_2078 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot is inside dining_room_41. Robot is close basket_for_clothes_2078. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. Robot is no longer close clothes_pants_2157.Robot is no longer close clothes_shirt_2158.Robot is no longer close clothes_socks_2159.Robot is no longer close clothes_skirt_2160.
##############################
From agent.py
putin_executor(basket_for_clothes_2078, coffe_maker_130)
Robot is inside dining_room_41. Robot is close basket_for_clothes_2078. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. basket_for_clothes_2078 released by right hand. 
##############################
From agent.py
Human Instruction: You need to gather the actual coffee grounds and water, not a basket for clothes, and add them to the coffee maker. Reassess the items involved, ensuring the correct ingredients are placed in the coffee maker.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for cup_2132 around kitchen_counter_122.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for milk_2115 around fridge_126.
Action 7: Walk to coffe_maker_130.
Action 8: Open coffe_maker_130.
Action 9: Walk to basket_for_clothes_2078.
Action 10: Grab basket_for_clothes_2078.
Action 11: Walk to coffe_maker_130.
Action 12: Put basket_for_clothes_2078 into coffe_maker_130.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_kitchen_counter_123(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

behavior find_cleaning_solution_2143_around_washing_machine_2079(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def has_correct_ingredients(coffee_maker:item):
    # Function to ensure that the coffee maker has both water and coffee grounds
    symbol has_ingredients=exists o: item : (has_water(o) or is_food(o)) and inside(o, coffee_maker)
    return has_ingredients

behavior add_coffee_grounds_and_water(coffee_grounds:item, water:item, coffee_maker:item):
    body:
        achieve inside(coffee_grounds, coffee_maker)
        # Ensure coffee grounds are added to the coffee maker

        achieve has_water(coffee_maker)
        # Ensure water is added to the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if not has_correct_ingredients(coffee_maker):
            # If the coffee maker does not have correct ingredients, proceed to gather
            
            bind coffee_grounds: item where:
                grabbable(coffee_grounds) and is_food(coffee_grounds)
            # Select coffee grounds

            bind water: item where:
                is_cleaning_solution(water)
            # Select water, assuming misclassification, replace with appropriate identification of water
            
            add_coffee_grounds_and_water(coffee_grounds, water, coffee_maker)
            # Add the coffee grounds and water to the coffee maker

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_correct_ingredients(coffee_maker:item):
    # Function to ensure that the coffee maker has both water and coffee grounds
    symbol has_ingredients=exists o: item : (has_water(o) or is_food(o)) and inside(o, coffee_maker)
    return has_ingredients

behavior add_coffee_grounds_and_water(coffee_grounds:item, water:item, coffee_maker:item):
    body:
        achieve inside(coffee_grounds, coffee_maker)
        # Ensure coffee grounds are added to the coffee maker

        achieve has_water(coffee_maker)
        # Ensure water is added to the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if not has_correct_ingredients(coffee_maker):
            # If the coffee maker does not have correct ingredients, proceed to gather
            
            bind coffee_grounds: item where:
                grabbable(coffee_grounds) and is_food(coffee_grounds)
            # Select coffee grounds

            bind water: item where:
                is_cleaning_solution(water)
            # Select water, assuming misclassification, replace with appropriate identification of water
            
            add_coffee_grounds_and_water(coffee_grounds, water, coffee_maker)
            # Add the coffee grounds and water to the coffee maker

##############################
From agent.py-> find a plan in act()
walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(coffe_maker_130)putin_executor(food_steak_2080, coffe_maker_130)
##############################
From agent.py
walk_executor(food_steak_2080)
Robot is inside dining_room_41. Robot is close food_steak_2080. Robot is close fridge_126. Robot is no longer close coffee_filter_2065.Robot is no longer close kitchen_counter_122.Robot is no longer close basket_for_clothes_2078.Robot is no longer close coffe_maker_130.
##############################
From agent.py
grab_executor(food_steak_2080)
Robot is inside dining_room_41. Robot is close food_steak_2080. Robot is close fridge_126. Grabbing food_steak_2080 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot is inside dining_room_41. Robot is close food_steak_2080. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close basket_for_clothes_2078. Robot is close kitchen_counter_122. Robot is no longer close fridge_126.
##############################
From agent.py
putin_executor(food_steak_2080, coffe_maker_130)
Robot is inside dining_room_41. Robot is close food_steak_2080. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close basket_for_clothes_2078. Robot is close kitchen_counter_122. food_steak_2080 released by right hand. 
##############################
From agent.py
Human Instruction: You need to gather the actual coffee grounds and water and add them to the coffee maker. Currently, a basket for clothes and a steak were placed in the coffee maker by mistake. Ensure that the correct ingredients, coffee grounds and water, are placed in the coffee maker instead.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for cup_2132 around kitchen_counter_122.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for milk_2115 around fridge_126.
Action 7: Walk to coffe_maker_130.
Action 8: Open coffe_maker_130.
Action 9: Walk to basket_for_clothes_2078.
Action 10: Grab basket_for_clothes_2078.
Action 11: Walk to coffe_maker_130.
Action 12: Put basket_for_clothes_2078 into coffe_maker_130.
Action 13: Walk to food_steak_2080.
Action 14: Grab food_steak_2080.
Action 15: Walk to coffe_maker_130.
Action 16: Put food_steak_2080 into coffe_maker_130.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2142_around_sink_120(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_cup_2134_around_sink_120(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_coffee_filter_2053_around_kitchen_counter_123(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_valid_coffee_maker_state(coffee_maker: item):
    # Check if the coffee maker contains invalid items that need to be removed
    symbol invalid_contents = exists x: item : (is_basket_for_clothes(x) or is_food_steak(x)) and inside(x, coffee_maker)
    return invalid_contents

behavior remove_invalid_items_from_coffe_maker(coffee_maker: item):
    body:
        foreach i: item:
            if (is_basket_for_clothes(i) or is_food_steak(i)) and inside(i, coffee_maker):
                achieve close_char(char, coffee_maker)
                achieve inhand(i)
                # Hold the invalid item to remove it
                achieve clean(coffee_maker)  # Ensure coffee maker is clean after removal
            else:
                achieve inside_char(i, coffee_maker)
                # Place the item back or keep it in if valid

behavior fill_and_prepare_coffee_maker(coffee_grounds: item, water: item, coffee_maker: item):
    body:
        achieve inside(coffee_grounds, coffee_maker)
        # Add coffee grounds inside the coffee maker

        achieve inside(water, coffee_maker)
        # Add water inside the coffee maker

        achieve clean(coffee_maker)
        # Ensure the coffee maker is clean and ready for brewing

behavior __goal__():
    body:
        bind coffee_grounds: item where:
            is_food(coffee_grounds)
        # Select coffee grounds for coffee making

        bind water: item where:
            is_water(water)
        # Select water for coffee making

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and is_valid_coffee_maker_state(coffee_maker)
        # Select the coffee maker that contains invalid items

        remove_invalid_items_from_coffe_maker(coffee_maker)
        # Remove invalid items from the coffee maker

        fill_and_prepare_coffee_maker(coffee_grounds, water, coffee_maker)
        # Fill and prepare the coffee maker with coffee grounds and water

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Error during applying inside_char[observation, state](x: character, y: item).
  Arguments: V::i, V::coffee_maker
Argument #0 type does not match: expect character, got item.
##############################
