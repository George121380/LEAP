From agent.py
Reset goals: The sub-goals are: 
['Open the windows in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind window: item where:
            is_window(window)
        # Select a window instance in the bathroom
        
        if not visited(window):
            observe(window, "Check if it is currently closed")
        # Observe to see the state of the window if it hasnt been visited
        
        achieve open(window)
        # Ensure the window is open
#goal_representation_end

##############################
From agent.py->reset_goal
behavior __goal__():
    body:
        bind window: item where:
            is_window(window)
        # Select a window instance in the bathroom
        
        if not visited(window):
            observe(window, "Check if it is currently closed")
        # Observe to see the state of the window if it hasnt been visited
        
        achieve open(window)
        # Ensure the window is open
##############################
From agent.py-> find a plan in act()
walk_executor(window_2109)open_executor(window_2109)obs(window_2109, Check if it is currently closed)
##############################
From agent.py
walk_executor(window_2109)
Robot is inside dining_room_1. Robot is close window_2109. Robot is no longer inside home_office_161.
##############################
From agent.py
open_executor(window_2109)
Robot is inside dining_room_1. Robot is close window_2109. 
##############################
From agent.py
obs(window_2109, Check if it is currently closed)
Get this information:  window_2109 is inside dining_room_1. window_2109 is close to dining_room_1. window_2109 is close to character_219. window_2109 is DIRTY. window_2109 is OPEN.
##############################
From agent.py
Human Instruction: You need to open the windows in the bathroom. The actions taken were related to window_2109 in the dining room, not in the bathroom. Locate the bathroom window and ensure it is open to complete the sub-task.

The actions you have taken:
Action 1: Walk to window_2109.
Action 2: Open window_2109.
Action 3: Observe around window_2109 with the question of Check if it is currently closed.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and not visited(window)
        # Select a window in the bathroom that hasnt been visited

        observe(window, "Check if this window is in the bathroom and currently closed")
        # Observe to determine if the window is in the bathroom and if it is closed

        achieve open(window)
        # Ensure the window is open if it is in the bathroom
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind window: item where:
            is_window(window) 
        # Select a window instance

        observe(window, "Locate the window in the bathroom and check if it is currently closed")
        # Observe to locate the bathroom window if it hasnt been visited and check its state

        achieve open(window)
        # Ensure the bathroom window is open
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior __goal__():
    body:
        bind window: item where:
            is_window(window) 
        # Select a window instance

        observe(window, "Locate the window in the bathroom and check if it is currently closed")
        # Observe to locate the bathroom window if it hasnt been visited and check its state

        achieve open(window)
        # Ensure the bathroom window is open
##############################
From agent.py-> find a plan in act()
obs(window_2109, Locate the window in the bathroom and check if it is currently closed)
##############################
From agent.py
obs(window_2109, Locate the window in the bathroom and check if it is currently closed)
Get this information:  window_2109 is inside dining_room_1. window_2109 is close to dining_room_1. window_2109 is close to character_219. window_2109 is DIRTY. window_2109 is OPEN.
##############################
From agent.py
Human Instruction: You need to locate and open the window in the bathroom, as the actions so far have only involved a window in the dining room. Verify the correct bathroom window and ensure it is open to complete the sub-task.

The actions you have taken:
Action 1: Walk to window_2109.
Action 2: Open window_2109.
Action 3: Observe around window_2109 with the question of Check if it is currently closed.
Action 4: Observe around window_2109 with the question of Locate the window in the bathroom and check if it is currently closed.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_bathroom_window(window: item):
    # Function to check if a window is in the bathroom
    symbol in_bathroom=exists room: item : is_bathroom(room) and inside(window, room)
    return in_bathroom

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_bathroom_window(window)
        # Select a window instance in the bathroom

        if not visited(window):
            observe(window, "Check if it is currently closed") 
        # Observe to see the state of the window if it hasnt been visited

        achieve open(window)
        # Ensure the window is open

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom instance

        bind window: item where:
            is_window(window) and inside(window, bathroom)
        # Select a window that is inside the bathroom

        if not visited(window):
            observe(window, "Locate the window in the bathroom and check if it is currently closed")
        # Observe to ensure it is the correct window and determine its state if it hasnt been visited

        achieve open(window)
        # Ensure the window is open
#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Open the windows in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind window: item where:
            is_window(window)
        # Select a window instance

        if not visited(window):
            observe(window, "Locate the window in the bathroom and check if it is currently closed")
        # Observe the window to confirm its location and current state if it hasnt been visited

        achieve open(window)
        # Ensure the window is open
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and inside(window, bathroom)
        # Select a window instance in the bathroom

        if not visited(window):
            observe(window, "Locate the window in the bathroom and check if it is currently closed")
        # Observe to locate the bathroom window and check its state if it hasnt been visited

        achieve open(window)
        # Ensure the bathroom window is open
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: bathroom; available variables: [Variable<window: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Identify the bathroom

        bind window: item where:
            is_window(window) and inside(window, bathroom)
        # Select a window instance in the bathroom

        if not visited(window):
            observe(window, "Locate the window in the bathroom and check if it is currently closed")
        # Observe to locate the bathroom window and check its state if it hasnt been visited

        achieve open(window)
        # Ensure the bathroom window is open

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Open the windows in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select item that represents the bathroom

        foreach window: item:
            if is_window(window) and inside(window, bathroom):
                if not visited(window):
                    observe(window, "Check if it is currently closed")
                # Observe to check the state of the window if it hasnt been visited
                
                achieve open(window)
                # Ensure the window is open
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2037_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_bathroom_window(window: item):
    # Function to check if a window is located in the bathroom
    symbol in_bathroom=exists room: item : is_bathroom(room) and inside(window, room)
    return in_bathroom

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_bathroom_window(window)
        # Select a window instance in the bathroom

        if not visited(window):
            observe(window, "Locate the window in the bathroom and check if it is currently closed")
        # Observe to see the state of the window if it hasnt been visited

        achieve open(window)
        # Ensure the window is open

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From evaluation.py
cdl_dataset/dataset/Wash_windows/g1.txt
Checking k1
Evaluator failed to find a plan
##############################
