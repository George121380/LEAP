From agent.py
Reset goals: The sub-goals are: 
['1. Find the chair in front of the computer in the home office and sit on it.', '2. Touch the mouse near the computer to turn it on.', '3. Type on the keyboard to send an email.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_chair(chair: item):
    # Check if the item is a chair in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(chair, room)
    return in_home_office

behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and is_home_office_chair(chair)
        # Select the chair in the home office

        if not visited(chair):
            observe(chair, "Check if this chair is in the office space")
        # Observe to confirm the chair is in the home office

        achieve close_char(char, chair)
        sit_on_chair(chair)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_desk_357(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_keyboard_168_around_computer_170(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
def is_chair_in_front_of_computer(chair: item):
    # Function to check if a chair is in front of the computer in the home office
    symbol in_front_of_computer=exists computer: item : is_computer(computer) and close(chair, computer)
    return in_front_of_computer

behavior sit_on_chair(chair: item):
    body:
        sit_somewhere(chair)
        # Sit on the given chair

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and is_chair_in_front_of_computer(chair)
        # Select a chair that is in front of a computer

        if not visited(chair):
            observe(chair, "Check if this is the chair in front of the computer")
        # Ensure this is the correct chair by observing its location

        sit_on_chair(chair)
        # Sit on the identified chair

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Sit on the chair in front of the computer in the home office.', '2. Touch the mouse near the computer to turn it on.', '3. Type the keyboard to send an e-mail.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_desk_357(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair)
        # Select the chair

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        if not visited(chair):
            observe(chair, "Is the chair in front of the computer in the home office")
        # Observe the chair to ensure it is in front of the computer in the home office

        achieve on_char(char, chair)
        # Sit on the chair
#goal_representation_end

##############################
From agent.py->reset_goal
behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair)
        # Select the chair

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        if not visited(chair):
            observe(chair, "Is the chair in front of the computer in the home office")
        # Observe the chair to ensure it is in front of the computer in the home office

        achieve on_char(char, chair)
        # Sit on the chair
##############################
From agent.py-> find a plan in act()
walk_executor(desk_357)exp(chair_103, desk_357)walk_executor(chair_103)obs(chair_103, Is the chair in front of the computer in the home office)sit_executor(chair_103)
##############################
From agent.py
walk_executor(desk_357)
Find chair_356. Find phone_2077. Find mouse_413. Find pencil_2001. Find headset_2076. Find keyboard_415. Robot is inside home_office_319. Robot is close desk_357. Robot is close floor_326. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(chair_103, desk_357)
Failed to find chair_103 around desk_357. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_356)exp(chair_103, chair_356)walk_executor(chair_103)obs(chair_103, Is the chair in front of the computer in the home office)sit_executor(chair_103)
##############################
From agent.py
walk_executor(chair_356)
Robot is inside home_office_319. Robot is close chair_356. Robot is no longer close desk_357.Robot is no longer close floor_326.
##############################
From agent.py
exp(chair_103, chair_356)
Failed to find chair_103 around chair_356. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_355)exp(chair_103, table_355)walk_executor(chair_103)obs(chair_103, Is the chair in front of the computer in the home office)sit_executor(chair_103)
##############################
From agent.py
walk_executor(table_355)
Robot is inside home_office_319. Robot is close couch_352. Robot is close mat_401. Robot is close table_355. Robot is no longer close chair_356.
##############################
From agent.py
exp(chair_103, table_355)
Failed to find chair_103 around table_355. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_107)exp(chair_103, table_107)walk_executor(chair_103)obs(chair_103, Is the chair in front of the computer in the home office)sit_executor(chair_103)
##############################
From agent.py
walk_executor(table_107)
Find mat_173. Find clothes_hat_2045. Find drawing_176. Find drawing_174. Find drawing_175. Find clothes_gloves_2046. Robot is inside bedroom_67. Robot is close floor_73. Robot is close table_107. Robot is no longer inside home_office_319.Robot is no longer close couch_352.Robot is no longer close mat_401.Robot is no longer close table_355.
##############################
From agent.py
exp(chair_103, table_107)
Failed to find chair_103 around table_107. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_104)exp(chair_103, desk_104)walk_executor(chair_103)obs(chair_103, Is the chair in front of the computer in the home office)sit_executor(chair_103)
##############################
From agent.py
walk_executor(desk_104)
Find keyboard_168. Find mouse_166. Find chair_103. Robot is inside bedroom_67. Robot is close desk_104. Robot is close floor_75. Robot is no longer close floor_73.Robot is no longer close table_107.
##############################
From agent.py
exp(chair_103, desk_104)
Find chair_103. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_103)obs(chair_103, Is the chair in front of the computer in the home office)sit_executor(chair_103)
##############################
From agent.py
walk_executor(chair_103)
Robot is inside bedroom_67. Robot is close chair_103. Robot is no longer close desk_104.Robot is no longer close floor_75.
##############################
From agent.py
obs(chair_103, Is the chair in front of the computer in the home office)
Get this information:  chair_103 is close to mouse_166. chair_103 is close to mousepad_167. chair_103 is close to keyboard_168. chair_103 is close to desk_104. chair_103 is close to computer_170. chair_103 is close to cpuscreen_171. chair_103 is close to floor_75. chair_103 is close to bookshelf_233. chair_103 is close to light_169. chair_103 is close to floor_76. chair_103 is close to floor_207. chair_103 is close to wall_209. chair_103 is close to wall_210. chair_103 is close to wall_83. chair_103 is close to wall_84. chair_103 is close to ceiling_93. chair_103 is close to character_65. chair_103 is inside bedroom_67. chair_103 is CLEAN.
##############################
From agent.py
sit_executor(chair_103)
Robot is inside bedroom_67. Robot is close chair_103. Robot is on chair_103. 
##############################
From agent.py
Human Instruction: You need to ensure that the chair you sit on is in front of the computer in the home office. Currently, you have confirmed sitting on a chair in the bedroom, not the home office. Re-evaluate whether chair_103 is positioned in the home office in front of the correct computer setup.

The actions you have taken:
Action 1: Walk to desk_357.
Action 2: look for chair_103 around desk_357.
Action 3: Walk to chair_356.
Action 4: look for chair_103 around chair_356.
Action 5: Walk to table_355.
Action 6: look for chair_103 around table_355.
Action 7: Walk to table_107.
Action 8: look for chair_103 around table_107.
Action 9: Walk to desk_104.
Action 10: look for chair_103 around desk_104.
Action 11: Walk to chair_103.
Action 12: Observe around chair_103 with the question of Is the chair in front of the computer in the home office.
Action 13: Sit on chair_103.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_dresser_358(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(chair,dresser_instance)
        else:
            exp(chair,dresser_instance)
    eff:
        unknown[chair]=False
        close[chair,dresser_instance]=True
        close[dresser_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair]==103
        # Select the chair with ID 103

        assert is_home_office(location) and inside(chair, location)
        # Ensure the chair is in a room identified as the home office

        assert facing_char(char, chair)
        # Ensure the character is facing the chair

        sit_somewhere(chair)
        # Sit on the selected chair
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: location; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_103_around_computer_417(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(chair,computer_instance)
        else:
            exp(chair,computer_instance)
    eff:
        unknown[chair]=False
        close[chair,computer_instance]=True
        close[computer_instance,chair]=True
    

#goal_representation

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair] == 103
        # Select the chair with ID 103

        bind location: item where:
            is_home_office(location)
        # Define the location as a home office

        assert is_home_office(location) and inside(chair, location)
        # Ensure the chair is in a room identified as the home office

        assert facing_char(char, chair)
        # Ensure the character is facing the chair

        sit_somewhere(chair)
        # Sit on the selected chair

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_dresser_358(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==358
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(chair,dresser_instance)
        else:
            exp(chair,dresser_instance)
    eff:
        unknown[chair]=False
        close[chair,dresser_instance]=True
        close[dresser_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_computer(computer: item):
    # Function to check if the computer is in the home office
    symbol home_office_computer=exists room: item : is_home_office(room) and inside(computer, room)
    return home_office_computer

behavior sit_on_chair(chair: item):
    body:
        sit_somewhere(chair)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair)
        # Select a chair

        if not visited(chair):
            observe(chair, "Check if the chair is in front of the computer in the home office")
        # Observe the chair to confirm its position

        bind computer: item where:
            is_computer(computer) and is_home_office_computer(computer)
        # Select the computer in the home office

        achieve facing_char(char, computer)
        # Make sure the character is facing the computer

        achieve on_char(char, chair)
        # Ensure the character is sitting in the chair, achieving the first task goal

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_home_office_computer(computer: item):
    # Function to check if the computer is in the home office
    symbol home_office_computer=exists room: item : is_home_office(room) and inside(computer, room)
    return home_office_computer

behavior sit_on_chair(chair: item):
    body:
        sit_somewhere(chair)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair)
        # Select a chair

        if not visited(chair):
            observe(chair, "Check if the chair is in front of the computer in the home office")
        # Observe the chair to confirm its position

        bind computer: item where:
            is_computer(computer) and is_home_office_computer(computer)
        # Select the computer in the home office

        achieve facing_char(char, computer)
        # Make sure the character is facing the computer

        achieve on_char(char, chair)
        # Ensure the character is sitting in the chair, achieving the first task goal

##############################
From agent.py-> find a plan in act()
obs(chair_103, Check if the chair is in front of the computer in the home office)turnto_executor(computer_417)
##############################
From agent.py
obs(chair_103, Check if the chair is in front of the computer in the home office)
Get this information:  chair_103 is close to mouse_166. chair_103 is close to mousepad_167. chair_103 is close to keyboard_168. chair_103 is close to desk_104. chair_103 is close to computer_170. chair_103 is close to cpuscreen_171. chair_103 is close to floor_75. chair_103 is close to bookshelf_233. chair_103 is close to light_169. chair_103 is close to floor_76. chair_103 is close to floor_207. chair_103 is close to wall_209. chair_103 is close to wall_210. chair_103 is close to wall_83. chair_103 is close to wall_84. chair_103 is close to ceiling_93. chair_103 is close to character_65. chair_103 is inside bedroom_67. character_65 is on chair_103. chair_103 is CLEAN.
##############################
From agent.py
turnto_executor(computer_417)
Robot is inside bedroom_67. Robot is close chair_103. Robot is on chair_103. Robot is facing computer_417. 
##############################
From agent.py
Human Instruction: You need to ensure that the chair you sit on is in front of the computer in the home office. Currently, you have confirmed sitting on a chair in the bedroom, not the home office. Re-evaluate whether chair_103 is positioned in the home office in front of the correct computer setup.

The actions you have taken:
Action 1: Walk to desk_357.
Action 2: look for chair_103 around desk_357.
Action 3: Walk to chair_356.
Action 4: look for chair_103 around chair_356.
Action 5: Walk to table_355.
Action 6: look for chair_103 around table_355.
Action 7: Walk to table_107.
Action 8: look for chair_103 around table_107.
Action 9: Walk to desk_104.
Action 10: look for chair_103 around desk_104.
Action 11: Walk to chair_103.
Action 12: Observe around chair_103 with the question of Is the chair in front of the computer in the home office.
Action 13: Sit on chair_103.
Action 14: Observe around chair_103 with the question of Check if the chair is in front of the computer in the home office.
Action 15: Turn to computer_417.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_table_226(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_chair_in_home_office(chair: item, computer: item):
    # Function to check if chair is in front of the computer in the home office
    symbol in_front_of_computer = facing(computer, chair) and exists room: item : is_home_office(room) and inside(chair, room)
    return in_front_of_computer

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair] == 103
        # Select chair with ID 103

        bind computer: item where:
            is_computer(computer) and id[computer] == 417
        # Select computer with ID 417

        if not visited(chair):
            observe(chair, "Check if the chair is in front of the computer in the home office")
        
        if not is_chair_in_home_office(chair, computer):
            observe(chair, "Reevaluate if chair is positioned correctly in the home office")

        achieve on_char(char, chair)
        # Sit on the chair once its position in front of the computer is confirmed

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5982, column 70.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_356_around_table_226(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#goal_representation
 
def is_chair_in_home_office(chair: item, computer: item):
    # Function to check if chair is in front of the computer in the home office
    symbol in_front_of_computer = facing(computer, chair) and exists room: item : is_home_office(room) and inside(chair, room)
    return in_front_of_computer

behavior observe_chair(chair: item):
    body:
        observe(chair, "Check if the chair is in front of the computer in the home office")
        # Observe the chair to confirm if it is in front of the computer in the home office

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair] == 103
        # Select chair with ID 103

        bind computer: item where:
            is_computer(computer) and id[computer] == 417
        # Select computer with ID 417

        if not visited(chair):
            observe_chair(chair)
        
        if not is_chair_in_home_office(chair, computer):
            observe_chair(chair)

        achieve on_char(char, chair)
        # Sit on the chair once its position in front of the computer is confirmed

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5982, column 70.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_2004_around_coffee_table_2068(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(chair,coffee_table_instance)
        else:
            exp(chair,coffee_table_instance)
    eff:
        unknown[chair]=False
        close[chair,coffee_table_instance]=True
        close[coffee_table_instance,chair]=True
    

#goal_representation
 
def is_chair_in_home_office(chair: item, computer: item):
    # Function to check if chair is in front of the computer in the home office
    symbol in_front_of_computer = facing(computer, chair) and exists room: item : (is_home_office(room) and inside(chair, room))
    return in_front_of_computer

behavior observe_chair(chair: item):
    body:
        observe(chair, "Check if the chair is in front of the computer in the home office")
        # Observe the chair to confirm if it is in front of the computer in the home office

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair] == 103
        # Select chair with ID 103

        bind computer: item where:
            is_computer(computer) and id[computer] == 417
        # Select computer with ID 417

        if not visited(chair):
            observe_chair(chair)
        
        if not is_chair_in_home_office(chair, computer):
            observe_chair(chair)

        achieve on_char(char, chair)
        # Sit on the chair once its position in front of the computer is confirmed

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2004_around_coffee_table_2068(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(chair,coffee_table_instance)
        else:
            exp(chair,coffee_table_instance)
    eff:
        unknown[chair]=False
        close[chair,coffee_table_instance]=True
        close[coffee_table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_home_office_front_of_computer(chair:item):
    # Function to check if the chair is in front of the computer in the home office
    symbol in_front_of_computer=exists computer: item : is_computer(computer) and facing(computer, chair) and exists home_office: item : is_home_office(home_office) and inside(chair, home_office)
    return in_front_of_computer

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and sittable(chair)
        # Select a chair that is sittable

        if not visited(chair):
            observe(chair, "Check if the chair is in front of the computer in the home office")

        if is_in_home_office_front_of_computer(chair):
            achieve on_char(char, chair) # Sit on the chair if its in the correct location
        else:
            observe(chair, "Reevaluate whether chair_103 is positioned in the home office in front of the correct computer setup")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'home_office') at line 5982, column 118.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_2004_around_coffee_table_2068(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(chair,coffee_table_instance)
        else:
            exp(chair,coffee_table_instance)
    eff:
        unknown[chair]=False
        close[chair,coffee_table_instance]=True
        close[coffee_table_instance,chair]=True
    

#goal_representation
 
def is_in_home_office_front_of_computer(chair:item):
    # Function to check if the chair is in front of the computer in the home office
    symbol in_front_of_computer=exists computer: item : is_computer(computer) and facing(computer, chair) and exists room: item : is_home_office(room) and inside(chair, room)
    return in_front_of_computer

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and sittable(chair)
        # Select a chair that is sittable

        if not visited(chair):
            observe(chair, "Check if the chair is in front of the computer in the home office")

        if is_in_home_office_front_of_computer(chair):
            achieve on_char(char, chair) # Sit on the chair if its in the correct location
        else:
            observe(chair, "Reevaluate whether chair_103 is positioned in the home office in front of the correct computer setup")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5982, column 118.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_2004_around_bench_228(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==228
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(chair,bench_instance)
        else:
            exp(chair,bench_instance)
    eff:
        unknown[chair]=False
        close[chair,bench_instance]=True
        close[bench_instance,chair]=True
    

#goal_representation
 
def is_in_home_office_front_of_computer(chair:item):
    # Function to check if the chair is in front of the computer in the home office
    symbol in_front_of_computer=exists computer: item : is_computer(computer) and facing(computer, chair) and inside(chair, room: room) where is_home_office(room)
    return in_front_of_computer

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and sittable(chair)
        # Select a chair that is sittable

        if not visited(chair):
            observe(chair, "Check if the chair is in front of the computer in the home office")

        if is_in_home_office_front_of_computer(chair):
            achieve on_char(char, chair) # Sit on the chair if its in the correct location
        else:
            observe(chair, "Reevaluate whether chair_103 is positioned in the home office in front of the correct computer setup")

#goal_representation_end

##############################
