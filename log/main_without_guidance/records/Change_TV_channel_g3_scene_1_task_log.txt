From agent.py
Reset goals: The sub-goals are: 
['1. Sit on the couch.', '2. Use the remote control to turn on the TV.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_couch_198(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_couch_location(c: item):
    # Function to check if the item is a couch based on its category
    return is_couch(c)

behavior sit_on_couch(c: item):
    body:
        sit_somewhere(c)

behavior __goal__():
    body:
        bind c: item where:
            is_couch_location(c)

        if not visited(c):
            observe(c, "Locate the couch position")

        achieve close_char(char, c)
        sit_on_couch(c)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_couch_location(c: item):
    # Function to check if the item is a couch based on its category
    return is_couch(c)

behavior sit_on_couch(c: item):
    body:
        sit_somewhere(c)

behavior __goal__():
    body:
        bind c: item where:
            is_couch_location(c)

        if not visited(c):
            observe(c, "Locate the couch position")

        achieve close_char(char, c)
        sit_on_couch(c)

##############################
From agent.py-> find a plan in act()
walk_executor(couch_198)obs(couch_198, Locate the couch position)sit_executor(couch_198)
##############################
From agent.py
walk_executor(couch_198)
Find clothes_jacket_2119. Find phone_2016. Find mat_203. Find chair_2003. Find rag_2052. Find instrument_guitar_2028. Robot is inside bedroom_162. Robot is close couch_198. Robot is no longer inside dining_room_41.
##############################
From agent.py
obs(couch_198, Locate the couch position)
Get this information:  clothes_jacket_2119 is on couch_198. phone_2016 is on couch_198. chair_2003 is on couch_198. rag_2052 is on couch_198. couch_198 is close to phone_2016. couch_198 is close to rag_2052. couch_198 is close to table_199. couch_198 is close to clothes_jacket_2119. couch_198 is close to mat_203. couch_198 is close to floor_172. couch_198 is close to floor_171. couch_198 is close to wall_174. couch_198 is close to wall_177. couch_198 is close to chair_2003. couch_198 is close to character_240. couch_198 is inside bedroom_162. instrument_guitar_2028 is on couch_198. couch_198 is CLEAN.
##############################
From agent.py
sit_executor(couch_198)
Robot is inside bedroom_162. Robot is close couch_198. Robot is on couch_198. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2124_around_tvstand_273(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==273
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_television_with_remote(tv:item, remote_control:item):
    body:
        achieve close_char(char, tv) # Ensure character is close to the television
        achieve_once inhand(remote_control) # Temporarily hold the remote control
        achieve is_on(tv) # Turn on the television

behavior __goal__():
    body:
        bind television: item where:
            is_television(television)
        # Select the television

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        turn_on_television_with_remote(television, remote_control)
        # Execute behavior to turn on the TV using the remote control

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2124_around_tvstand_116(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_tv_with_remote(tv: item, remote_control: item):
    body:
        achieve facing_char(char, tv)
        # Ensure the character faces the TV to enable remote operation

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control to operate the TV

        achieve is_on(tv)
        # Ensure the TV is turned on

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television to be turned on

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control to use for turning on the TV

        turn_on_tv_with_remote(tv, remote_control)
        # Use the defined behavior to turn on the TV with the remote control

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2137_around_bookshelf_275(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_remote_control_2124_around_couch_269(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==269
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(remote_control,couch_instance)
        else:
            exp(remote_control,couch_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,couch_instance]=True
        close[couch_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_tv_with_remote(tv: item, remote_control: item):
    body:
        achieve facing_char(char, tv)
        achieve_once inhand(remote_control)
        achieve is_on(tv)

behavior __goal__():
    body:
        bind television: item where:
            is_television(television)
        # Select the television

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        turn_on_tv_with_remote(television, remote_control)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2124_around_tvstand_116(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_television_with_remote(tv:item, remote_control:item):
    body:
        achieve facing_char(char, tv)
        achieve_once inhand(remote_control)
        achieve is_on(tv)

behavior __goal__():
    body:
        bind television: item where:
            is_television(television)
        # Select the television

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        turn_on_television_with_remote(television, remote_control)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2124_around_tvstand_116(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_television_with_remote(tv:item, remote_control:item):
    body:
        achieve close_char(char, tv)
        achieve_once inhand(remote_control)
        achieve is_on(tv)

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        turn_on_television_with_remote(tv, remote_control)
        
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2124_around_tvstand_116(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_tv_with_remote(tv:item, remote_control:item):
    body:
        achieve facing_char(char, tv)
        achieve_once inhand(remote_control)
        achieve is_on(tv)

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        turn_on_tv_with_remote(tv, remote_control)
#goal_representation_end

##############################
From evaluation.py
cdl_dataset/dataset/Change_TV_channel/g3.txt
Checking k1
missed actions: 
missed action num: 0
##############################
