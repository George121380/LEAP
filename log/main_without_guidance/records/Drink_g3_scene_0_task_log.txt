From agent.py
Reset goals: The sub-goals are: 
['1. Find a clean cup and fill it with water.', '2. Slice the kiwi and add the slices to the cup of water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_food_cake_2013_around_fridge_289(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cake,fridge_instance)
        else:
            exp(food_cake,fridge_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,fridge_instance]=True
        close[fridge_instance,food_cake]=True
    

#exp_behavior_end

#goal_representation
 
def has_clean_cup(cup:item):
    # Function to check if a cup is clean
    return clean(cup)

behavior find_clean_cup_and_fill_with_water(cup:item):
    body:
        achieve has_water(cup)
        # Fill the clean cup with water

behavior __goal__():
    body:
        if exists cup: item : is_cup(cup) and has_clean_cup(cup):
            # If there is already a clean cup, use it
            bind cup: item where:
                is_cup(cup) and has_clean_cup(cup)
            find_clean_cup_and_fill_with_water(cup)
        else:
            # Observe to find a clean cup if none is known
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Check is the cup clean")
                    if clean(cup):
                        find_clean_cup_and_fill_with_water(cup)
                        break

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<cup: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation
 
def has_clean_cup(cup:item):
    # Function to check if a cup is clean
    return clean(cup)

behavior break_operation(cup:item):
    body:
        # Dummy behavior to facilitate a break operation
        pass 

behavior find_clean_cup_and_fill_with_water(cup:item):
    body:
        achieve has_water(cup)
        # Fill the clean cup with water

behavior __goal__():
    body:
        if exists cup: item : is_cup(cup) and has_clean_cup(cup):
            # If there is already a clean cup, use it
            bind cup: item where:
                is_cup(cup) and has_clean_cup(cup)
            find_clean_cup_and_fill_with_water(cup)
        else:
            # Observe to find a clean cup if none is known
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Check is the cup clean")
                    if clean(cup):
                        find_clean_cup_and_fill_with_water(cup)
                        break_operation(cup)
                        break

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<cup: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation
 
def has_clean_cup(cup:item):
    # Function to check if a cup is clean
    return clean(cup)

behavior break_operation(cup:item):
    body:
        # Dummy behavior to facilitate a break operation
        pass 

behavior find_clean_cup_and_fill_with_water(cup:item):
    body:
        achieve has_water(cup)
        # Fill the clean cup with water

behavior __goal__():
    body:
        if exists cup: item : is_cup(cup) and has_clean_cup(cup):
            # If there is already a clean cup, use it
            bind cup: item where:
                is_cup(cup) and has_clean_cup(cup)
            find_clean_cup_and_fill_with_water(cup)
        else:
            # Observe to find a clean cup if none is known
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Check is the cup clean")
                    if clean(cup):
                        find_clean_cup_and_fill_with_water(cup)
                        break_operation(cup)
                        return

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_fill_cup_with_water(cup:item):
    body:
        if dirty(cup):
            wash(cup)
            # Wash the cup if it is dirty

        achieve has_water(cup)
        # Fill the cup with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a clean cup

        find_and_fill_cup_with_water(cup)
        # Perform the behavior to find a clean cup and fill it with water

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_fill_cup_with_water(cup:item):
    body:
        if dirty(cup):
            wash(cup)
            # Wash the cup if it is dirty

        achieve has_water(cup)
        # Fill the cup with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a clean cup

        find_and_fill_cup_with_water(cup)
        # Perform the behavior to find a clean cup and fill it with water

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(cup_2063, cupboard_229)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cupboard_229)
Find tray_296. Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. Robot is no longer inside bathroom_1.
##############################
From agent.py
open_executor(cupboard_229)
Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. 
##############################
From agent.py
exp(cup_2063, cupboard_229)
Failed to find cup_2063 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(cup_2063, coffee_table_2068)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot is inside home_office_319. Robot is close coffee_table_2068. Robot is no longer inside dining_room_201.Robot is no longer close wall_211.Robot is no longer close cupboard_229.
##############################
From agent.py
exp(cup_2063, coffee_table_2068)
Failed to find cup_2063 around coffee_table_2068. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(cup_2063, dishwasher_1001)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot is inside dining_room_201. Robot is close dishwasher_1001. Robot is no longer inside home_office_319.Robot is no longer close coffee_table_2068.
##############################
From agent.py
open_executor(dishwasher_1001)
Robot is inside dining_room_201. Robot is close dishwasher_1001. 
##############################
From agent.py
exp(cup_2063, dishwasher_1001)
Failed to find cup_2063 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer close dishwasher_1001.
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cup_2063)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Find basket_for_clothes_2006. Find towel_rack_34. Find towel_rack_32. Find towel_rack_31. Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. Robot is no longer inside dining_room_201.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchon_executor(faucet_43)
Find drawing_176. Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_kiwi_2027_around_fridge_289(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation

def has_free_hand():
    # Check if the character has a free hand
    symbol free_hand = has_a_free_hand(char)
    return free_hand

behavior prepare_kiwi_for_cup(cup: item, kiwi: item):
    body:
        if has_free_hand():
            # Check if the character has a free hand
            achieve_once inhand(kiwi)
            # Hold the kiwi
        achieve cut(kiwi)
        # Slice the kiwi
        achieve inside(kiwi, cup)
        # Put the sliced kiwi into the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup that already has water in it

        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select the kiwi

        if not visited(kiwi):
            observe(kiwi, "Check the location of the kiwi")
        # Observe the kiwi location if it has not been visited

        prepare_kiwi_for_cup(cup, kiwi)
        # Slice the kiwi and add the slices to the cup of water
#goal_representation_end

##############################
From agent.py->reset_sub_goal

def has_free_hand():
    # Check if the character has a free hand
    symbol free_hand = has_a_free_hand(char)
    return free_hand

behavior prepare_kiwi_for_cup(cup: item, kiwi: item):
    body:
        if has_free_hand():
            # Check if the character has a free hand
            achieve_once inhand(kiwi)
            # Hold the kiwi
        achieve cut(kiwi)
        # Slice the kiwi
        achieve inside(kiwi, cup)
        # Put the sliced kiwi into the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup that already has water in it

        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select the kiwi

        if not visited(kiwi):
            observe(kiwi, "Check the location of the kiwi")
        # Observe the kiwi location if it has not been visited

        prepare_kiwi_for_cup(cup, kiwi)
        # Slice the kiwi and add the slices to the cup of water
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_kiwi_2027, fridge_289)walk_executor(food_kiwi_2027)obs(food_kiwi_2027, Check the location of the kiwi)grab_executor(food_kiwi_2027)walk_executor(cutting_board_2051)put_executor(food_kiwi_2027, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_kiwi_2027)cut_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Robot is inside dining_room_201. Robot is close cup_2063. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Robot is inside dining_room_201. Robot is close cup_2063. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
exp(food_kiwi_2027, fridge_289)
Find food_kiwi_2027. 
##############################
From agent.py-> find a plan in act()
obs(food_kiwi_2027, Check the location of the kiwi)grab_executor(food_kiwi_2027)walk_executor(cutting_board_2051)put_executor(food_kiwi_2027, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_kiwi_2027)cut_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
obs(food_kiwi_2027, Check the location of the kiwi)
Get this information:  food_kiwi_2027 is inside fridge_289. food_kiwi_2027 is inside dining_room_201. food_kiwi_2027 is close to fridge_289. food_kiwi_2027 is close to character_65. food_kiwi_2027 is CLEAN.
##############################
From agent.py
grab_executor(food_kiwi_2027)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Grabbing food_kiwi_2027 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close food_kiwi_2027. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
put_executor(food_kiwi_2027, cutting_board_2051)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close food_kiwi_2027. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. food_kiwi_2027 released by left hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close kitchen_counter_230. Robot is close knife_2050. Robot is no longer close cutting_board_2051.Robot is no longer close food_kiwi_2027.
##############################
From agent.py
grab_executor(knife_2050)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close kitchen_counter_230. Robot is close knife_2050. Grabbing knife_2050 by left hand. 
##############################
From agent.py
walk_executor(food_kiwi_2027)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close knife_2050. Robot is close cutting_board_2051. Robot is close food_kiwi_2027. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
cut_executor(food_kiwi_2027)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close knife_2050. Robot is close cutting_board_2051. Robot is close food_kiwi_2027. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_drawing_175_around_drawing_174(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==174
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

#exp_behavior_end

#goal_representation
behavior cut_kiwi_and_add_to_cup(kiwi: item, cup: item):
    body:
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        achieve cut(kiwi)
        # Ensure the kiwi is sliced

        achieve inside(kiwi, cup)
        # Place the sliced kiwi into the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select a kiwi item
        
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select a cup that already has water
        
        cut_kiwi_and_add_to_cup(kiwi, cup)
        # Implement the behavior to slice the kiwi and add the slices to the cup of water
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior cut_kiwi_and_add_to_cup(kiwi: item, cup: item):
    body:
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        achieve cut(kiwi)
        # Ensure the kiwi is sliced

        achieve inside(kiwi, cup)
        # Place the sliced kiwi into the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select a kiwi item
        
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select a cup that already has water
        
        cut_kiwi_and_add_to_cup(kiwi, cup)
        # Implement the behavior to slice the kiwi and add the slices to the cup of water
##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2006)put_executor(knife_2050, basket_for_clothes_2006)walk_executor(food_kiwi_2027)grab_executor(food_kiwi_2027)walk_executor(cup_2063)putin_executor(food_kiwi_2027, cup_2063)
##############################
From agent.py
walk_executor(basket_for_clothes_2006)
Find clothes_pants_2085. Find clothes_shirt_2086. Find clothes_socks_2087. Find clothes_skirt_2088. Find towel_rack_33. Robot is inside bathroom_1. Robot is close cup_2063. Robot is close knife_2050. Robot is close clothes_pants_2085. Robot is close clothes_shirt_2086. Robot is close clothes_socks_2087. Robot is close clothes_skirt_2088. Robot is close basket_for_clothes_2006. Robot is no longer inside dining_room_201.Robot is no longer close cutting_board_2051.Robot is no longer close food_kiwi_2027.
##############################
From agent.py
put_executor(knife_2050, basket_for_clothes_2006)
Robot is inside bathroom_1. Robot is close cup_2063. Robot is close knife_2050. Robot is close clothes_pants_2085. Robot is close clothes_shirt_2086. Robot is close clothes_socks_2087. Robot is close clothes_skirt_2088. Robot is close basket_for_clothes_2006. knife_2050 released by left hand. 
##############################
From agent.py
walk_executor(food_kiwi_2027)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close cutting_board_2051. Robot is close food_kiwi_2027. Robot is no longer inside bathroom_1.Robot is no longer close knife_2050.Robot is no longer close clothes_pants_2085.Robot is no longer close clothes_shirt_2086.Robot is no longer close clothes_socks_2087.Robot is no longer close clothes_skirt_2088.Robot is no longer close basket_for_clothes_2006.
##############################
From agent.py
grab_executor(food_kiwi_2027)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close cutting_board_2051. Robot is close food_kiwi_2027. Grabbing food_kiwi_2027 by left hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot is inside bathroom_1. Robot is close cup_2063. Robot is close food_kiwi_2027. Robot is no longer inside dining_room_201.Robot is no longer close cutting_board_2051.
##############################
From agent.py
putin_executor(food_kiwi_2027, cup_2063)
Robot is inside bathroom_1. Robot is close cup_2063. Robot is close food_kiwi_2027. food_kiwi_2027 released by left hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Drink/g3.txt
Checking k1
missed actions: 
missed action num: 0
##############################
