From agent.py
Reset goals: The sub-goals are: 
['1. Locate the book.', '2. Place the book on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Function to check if a table is the coffee table in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(coffee_table, room)
    return in_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Function to check if a table is the coffee table in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(coffee_table, room)
    return in_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_101)open_executor(bookshelf_101)exp(book_2066, bookshelf_101)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check where the book is)walk_executor(coffee_table_2068)obs(coffee_table_2068, Check if this is the coffee table in the home office)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_101)
Find drawing_174. Find drawing_176. Robot is inside bedroom_67. Robot is close floor_72. Robot is close photoframe_185. Robot is close bookshelf_101. Robot is no longer inside bathroom_1.
##############################
From agent.py
open_executor(bookshelf_101)
Find towel_rack_32. Find towel_rack_31. Robot is inside bedroom_67. Robot is close floor_72. Robot is close photoframe_185. Robot is close bookshelf_101. 
##############################
From agent.py
exp(book_2066, bookshelf_101)
Failed to find book_2066 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_233)open_executor(bookshelf_233)exp(book_2066, bookshelf_233)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check where the book is)walk_executor(coffee_table_2068)obs(coffee_table_2068, Check if this is the coffee table in the home office)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_233)
Robot is inside dining_room_201. Robot is close bookshelf_233. Robot is close floor_207. Robot is no longer inside bedroom_67.Robot is no longer close floor_72.Robot is no longer close photoframe_185.Robot is no longer close bookshelf_101.
##############################
From agent.py
open_executor(bookshelf_233)
Find mouse_166. Find keyboard_168. Find chair_103. Robot is inside dining_room_201. Robot is close bookshelf_233. Robot is close floor_207. 
##############################
From agent.py
exp(book_2066, bookshelf_233)
Failed to find book_2066 around bookshelf_233. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check where the book is)walk_executor(coffee_table_2068)obs(coffee_table_2068, Check if this is the coffee table in the home office)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_354)
Find drawing_402. Find drawing_403. Find drawing_404. Find book_2066. Find book_2067. Robot is inside home_office_319. Robot is close floor_320. Robot is close bookshelf_354. Robot is close photoframe_430. Robot is no longer inside dining_room_201.Robot is no longer close bookshelf_233.Robot is no longer close floor_207.
##############################
From agent.py
open_executor(bookshelf_354)
Find vacuum_cleaner_2070. Find headset_2062. Find mat_401. Find hanger_363. Find hanger_374. Find drawing_241. Find keyboard_415. Find headset_2076. Find hanger_369. Find remote_control_2052. Find drawing_243. Find hanger_361. Find spectacles_2082. Find hanger_372. Find drawing_242. Find cat_2055. Find clothes_jacket_2047. Find chair_356. Find phone_2077. Find mouse_413. Find hanger_375. Find pencil_2001. Find pillow_405. Find hanger_367. Find hanger_359. Find dvd_player_2061. Find drawing_400. Find hanger_365. Find hanger_376. Find pillow_406. Find hairbrush_2002. Robot is inside home_office_319. Robot is close floor_320. Robot is close bookshelf_354. Robot is close photoframe_430. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check where the book is)walk_executor(coffee_table_2068)obs(coffee_table_2068, Check if this is the coffee table in the home office)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(book_2066)
Robot is inside home_office_319. Robot is close bookshelf_354. Robot is close book_2066. Robot is no longer close floor_320.Robot is no longer close photoframe_430.
##############################
From agent.py
open_executor(book_2066)
Robot is inside home_office_319. Robot is close bookshelf_354. Robot is close book_2066. 
##############################
From agent.py
obs(book_2066, Check where the book is)
Get this information:  book_2066 is close to bookshelf_354. book_2066 is close to character_65. book_2066 is inside home_office_319. book_2066 is on bookshelf_354. book_2066 is OPEN.
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot is inside home_office_319. Robot is close coffee_table_2068. Robot is no longer close book_2066.Robot is no longer close bookshelf_354.
##############################
From agent.py
obs(coffee_table_2068, Check if this is the coffee table in the home office)
Get this information:  coffee_table_2068 is inside home_office_319. coffee_table_2068 is close to home_office_319. coffee_table_2068 is close to character_65.
##############################
From agent.py
walk_executor(book_2066)
Robot is inside home_office_319. Robot is close book_2066. Robot is close bookshelf_354. Robot is no longer close coffee_table_2068.
##############################
From agent.py
grab_executor(book_2066)
Robot is inside home_office_319. Robot is close book_2066. Robot is close bookshelf_354. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot is inside home_office_319. Robot is close book_2066. Robot is close coffee_table_2068. Robot is no longer close bookshelf_354.
##############################
From agent.py
put_executor(book_2066, coffee_table_2068)
Robot is inside home_office_319. Robot is close book_2066. Robot is close coffee_table_2068. book_2066 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_182_around_closetdrawer_158(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pillow,closetdrawer_instance)
        else:
            exp(pillow,closetdrawer_instance)
    eff:
        unknown[pillow]=False
        close[pillow,closetdrawer_instance]=True
        close[closetdrawer_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is located inside the home office
    symbol inside_home_office=exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Function to check if a coffee table is inside the home office
    symbol inside_home_office=exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select an item that is a coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_183_around_closetdrawer_158(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pillow,closetdrawer_instance)
        else:
            exp(pillow,closetdrawer_instance)
    eff:
        unknown[pillow]=False
        close[pillow,closetdrawer_instance]=True
        close[closetdrawer_instance,pillow]=True
    

behavior find_chair_106_around_closetdrawer_392(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(chair,closetdrawer_instance)
        else:
            exp(chair,closetdrawer_instance)
    eff:
        unknown[chair]=False
        close[chair,closetdrawer_instance]=True
        close[closetdrawer_instance,chair]=True
    

behavior find_food_peanut_butter_2033_around_kitchen_counter_230(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is located inside the home office
    symbol inside_home_office=exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_182_around_closetdrawer_158(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pillow,closetdrawer_instance)
        else:
            exp(pillow,closetdrawer_instance)
    eff:
        unknown[pillow]=False
        close[pillow,closetdrawer_instance]=True
        close[closetdrawer_instance,pillow]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is located inside the home office
    symbol inside_home_office = exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_183_around_closetdrawer_158(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pillow,closetdrawer_instance)
        else:
            exp(pillow,closetdrawer_instance)
    eff:
        unknown[pillow]=False
        close[pillow,closetdrawer_instance]=True
        close[closetdrawer_instance,pillow]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is located inside the home office
    symbol inside_home_office=exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_405_around_pillow_405(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind pillow_instance:item where:
            is_pillow(pillow_instance) and id[pillow_instance]==405
        achieve close_char(char,pillow_instance)
        if can_open(pillow_instance):
            achieve_once open(pillow_instance)
            exp(pillow,pillow_instance)
        else:
            exp(pillow,pillow_instance)
    eff:
        unknown[pillow]=False
        close[pillow,pillow_instance]=True
        close[pillow_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is located inside the home office
    symbol inside_home_office=exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_hanger_369(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==369
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(mat,hanger_instance)
        else:
            exp(mat,hanger_instance)
    eff:
        unknown[mat]=False
        close[mat,hanger_instance]=True
        close[hanger_instance,mat]=True
    

#exp_behavior_end

#goal_representation
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is located inside the home office
    symbol inside_home_office=exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table in the home office
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is located inside the home office
    symbol inside_home_office=exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_406_around_closetdrawer_158(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pillow,closetdrawer_instance)
        else:
            exp(pillow,closetdrawer_instance)
    eff:
        unknown[pillow]=False
        close[pillow,closetdrawer_instance]=True
        close[closetdrawer_instance,pillow]=True
    

behavior find_mat_236_around_closetdrawer_158(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(mat,closetdrawer_instance)
        else:
            exp(mat,closetdrawer_instance)
    eff:
        unknown[mat]=False
        close[mat,closetdrawer_instance]=True
        close[closetdrawer_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Determine if the coffee table is in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(coffee_table, room)
    return in_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe to gather information about the books location

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table based on whether it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and (exists room: item: is_home_office(room) and inside(coffee_table, room))
        # Select the coffee table inside the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_406_around_closetdrawer_158(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pillow,closetdrawer_instance)
        else:
            exp(pillow,closetdrawer_instance)
    eff:
        unknown[pillow]=False
        close[pillow,closetdrawer_instance]=True
        close[closetdrawer_instance,pillow]=True
    

behavior find_food_peanut_butter_2033_around_kitchen_counter_230(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

behavior find_towel_2059_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_wall_clock_249_around_wallshelf_35(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

behavior find_drawing_242_around_drawing_242(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==242
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is located inside the home office
    symbol inside_home_office=exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_183_around_closetdrawer_158(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pillow,closetdrawer_instance)
        else:
            exp(pillow,closetdrawer_instance)
    eff:
        unknown[pillow]=False
        close[pillow,closetdrawer_instance]=True
        close[closetdrawer_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is located inside the home office
    symbol inside_home_office=exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_405_around_pillow_405(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind pillow_instance:item where:
            is_pillow(pillow_instance) and id[pillow_instance]==405
        achieve close_char(char,pillow_instance)
        if can_open(pillow_instance):
            achieve_once open(pillow_instance)
            exp(pillow,pillow_instance)
        else:
            exp(pillow,pillow_instance)
    eff:
        unknown[pillow]=False
        close[pillow,pillow_instance]=True
        close[pillow_instance,pillow]=True
    

behavior find_towel_2057_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is located inside the home office
    symbol inside_home_office=exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_405_around_pillow_405(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind pillow_instance:item where:
            is_pillow(pillow_instance) and id[pillow_instance]==405
        achieve close_char(char,pillow_instance)
        if can_open(pillow_instance):
            achieve_once open(pillow_instance)
            exp(pillow,pillow_instance)
        else:
            exp(pillow,pillow_instance)
    eff:
        unknown[pillow]=False
        close[pillow,pillow_instance]=True
        close[pillow_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is located inside the home office
    symbol inside_home_office=exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_182_around_closetdrawer_158(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pillow,closetdrawer_instance)
        else:
            exp(pillow,closetdrawer_instance)
    eff:
        unknown[pillow]=False
        close[pillow,closetdrawer_instance]=True
        close[closetdrawer_instance,pillow]=True
    

behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is located inside the home office
    symbol inside_home_office=exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_405_around_pillow_405(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind pillow_instance:item where:
            is_pillow(pillow_instance) and id[pillow_instance]==405
        achieve close_char(char,pillow_instance)
        if can_open(pillow_instance):
            achieve_once open(pillow_instance)
            exp(pillow,pillow_instance)
        else:
            exp(pillow,pillow_instance)
    eff:
        unknown[pillow]=False
        close[pillow,pillow_instance]=True
        close[pillow_instance,pillow]=True
    

behavior find_food_peanut_butter_2033_around_kitchen_counter_230(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_peanut_butter,kitchen_counter_instance)
        else:
            exp(food_peanut_butter,kitchen_counter_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_peanut_butter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is inside the home office
    symbol inside_home_office=exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_towel_2056_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_mat_173_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Function to check if a coffee table is in the home office
    symbol inside_home_office = exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if its the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_183_around_closetdrawer_158(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pillow,closetdrawer_instance)
        else:
            exp(pillow,closetdrawer_instance)
    eff:
        unknown[pillow]=False
        close[pillow,closetdrawer_instance]=True
        close[closetdrawer_instance,pillow]=True
    

behavior find_towel_2058_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is located inside the home office
    symbol inside_home_office=exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_183_around_closetdrawer_158(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pillow,closetdrawer_instance)
        else:
            exp(pillow,closetdrawer_instance)
    eff:
        unknown[pillow]=False
        close[pillow,closetdrawer_instance]=True
        close[closetdrawer_instance,pillow]=True
    

behavior find_food_jam_2026_around_cupboard_229(food_jam:item):
    goal: not unknown(food_jam)
    body:
        assert is_food_jam(food_jam)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_jam,cupboard_instance)
        else:
            exp(food_jam,cupboard_instance)
    eff:
        unknown[food_jam]=False
        close[food_jam,cupboard_instance]=True
        close[cupboard_instance,food_jam]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select an item that is a coffee table

        bind home_office: item where:
            is_home_office(home_office)
        # Select an item that is a home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table in the home office
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_406_around_closetdrawer_158(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pillow,closetdrawer_instance)
        else:
            exp(pillow,closetdrawer_instance)
    eff:
        unknown[pillow]=False
        close[pillow,closetdrawer_instance]=True
        close[closetdrawer_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
def is_coffee_table_in_home_office(coffee_table: item):
    # Check if the coffee table is located inside the home office
    symbol inside_home_office=exists room: item : is_home_office(room) and inside(coffee_table, room)
    return inside_home_office

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table) and is_coffee_table_in_home_office(coffee_table)
        # Select a table and check if it is the coffee table in the home office

        if not visited(coffee_table):
            observe(coffee_table, "Check if this is the coffee table in the home office")
        # Confirm the table is the coffee table in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_405_around_pillow_405(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind pillow_instance:item where:
            is_pillow(pillow_instance) and id[pillow_instance]==405
        achieve close_char(char,pillow_instance)
        if can_open(pillow_instance):
            achieve_once open(pillow_instance)
            exp(pillow,pillow_instance)
        else:
            exp(pillow,pillow_instance)
    eff:
        unknown[pillow]=False
        close[pillow,pillow_instance]=True
        close[pillow_instance,pillow]=True
    

behavior find_food_peanut_butter_2033_around_cupboard_229(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_peanut_butter,cupboard_instance)
        else:
            exp(food_peanut_butter,cupboard_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,cupboard_instance]=True
        close[cupboard_instance,food_peanut_butter]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select an item that is a coffee table

        bind home_office: item where:
            is_home_office(home_office)
        # Select an item that is a home office

        observe(home_office, "Check if the coffee table is inside the home office")
        # Observe to confirm if the coffee table is in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select an item that is a coffee table

        bind home_office: item where:
            is_home_office(home_office)
        # Select an item that is a home office

        observe(home_office, "Check if the coffee table is inside the home office")
        # Observe to confirm if the coffee table is in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table

##############################
From agent.py-> find a plan in act()
obs(book_2066, Check where the book is)walk_executor(home_office_319)obs(home_office_319, Check if the coffee table is inside the home office)
##############################
From agent.py
obs(book_2066, Check where the book is)
Get this information:  book_2066 is close to character_65. book_2066 is close to coffee_table_2068. book_2066 is inside home_office_319. book_2066 is on coffee_table_2068. book_2066 is OPEN.
##############################
From agent.py
walk_executor(home_office_319)
Robot is inside home_office_319. Robot is no longer close book_2066.Robot is no longer close coffee_table_2068.
##############################
From agent.py
obs(home_office_319, Check if the coffee table is inside the home office)
Get this information:  ceilinglamp_349 is inside home_office_319. vacuum_cleaner_2070 is inside home_office_319. computer_417 is inside home_office_319. ceiling_341 is inside home_office_319. couch_352 is inside home_office_319. wall_330 is inside home_office_319. headset_2062 is inside home_office_319. curtain_409 is inside home_office_319. floor_322 is inside home_office_319. wall_333 is inside home_office_319. closetdrawer_382 is inside home_office_319. ceiling_344 is inside home_office_319. mat_401 is inside home_office_319. powersocket_412 is inside home_office_319. hanger_363 is inside home_office_319. hanger_374 is inside home_office_319. floor_325 is inside home_office_319. wall_336 is inside home_office_319. drawing_404 is inside home_office_319. table_355 is inside home_office_319. coffee_table_2068 is inside home_office_319. keyboard_415 is inside home_office_319. closetdrawer_377 is inside home_office_319. headset_2076 is inside home_office_319. floor_328 is inside home_office_319. ceiling_339 is inside home_office_319. curtain_407 is inside home_office_319. hanger_369 is inside home_office_319. doorjamb_347 is inside home_office_319. dresser_358 is inside home_office_319. wall_331 is inside home_office_319. floor_320 is inside home_office_319. closetdrawer_388 is inside home_office_319. walllamp_350 is inside home_office_319. remote_control_2052 is inside home_office_319. doorjamb_346 is between home_office_319. filing_cabinet_399 is inside home_office_319. television_410 is inside home_office_319. hanger_361 is inside home_office_319. spectacles_2082 is inside home_office_319. floor_323 is inside home_office_319. closetdrawer_380 is inside home_office_319. drawing_402 is inside home_office_319. tvstand_353 is inside home_office_319. ceiling_342 is inside home_office_319. hanger_372 is inside home_office_319. ceiling_345 is inside home_office_319. wall_334 is inside home_office_319. cat_2055 is inside home_office_319. clothes_jacket_2047 is inside home_office_319. closetdrawer_394 is inside home_office_319. floor_326 is inside home_office_319. home_office_319 is close to coffee_table_2068. chair_356 is inside home_office_319. book_2066 is inside home_office_319. phone_2077 is inside home_office_319. mouse_413 is inside home_office_319. hanger_375 is inside home_office_319. pencil_2001 is inside home_office_319. window_348 is inside home_office_319. ceiling_337 is inside home_office_319. cpuscreen_416 is inside home_office_319. pillow_405 is inside home_office_319. hanger_367 is inside home_office_319. wall_329 is inside home_office_319. ceiling_340 is inside home_office_319. hanger_359 is inside home_office_319. dvd_player_2061 is inside home_office_319. curtain_408 is inside home_office_319. floor_321 is inside home_office_319. wall_332 is inside home_office_319. drawing_400 is inside home_office_319. walllamp_351 is inside home_office_319. photoframe_430 is inside home_office_319. floor_324 is inside home_office_319. light_411 is inside home_office_319. ceiling_343 is inside home_office_319. wall_335 is inside home_office_319. closetdrawer_392 is inside home_office_319. drawing_403 is inside home_office_319. bookshelf_354 is inside home_office_319. hanger_365 is inside home_office_319. floor_327 is inside home_office_319. character_65 is inside home_office_319. closetdrawer_384 is inside home_office_319. doorjamb_346 is inside home_office_319. desk_357 is inside home_office_319. book_2067 is inside home_office_319. mousepad_414 is inside home_office_319. hanger_376 is inside home_office_319. pillow_406 is inside home_office_319. ceiling_338 is inside home_office_319. hairbrush_2002 is inside home_office_319. home_office_319 is CLEAN.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g1.txt
Checking k1
missed actions: 
missed action num: 0
##############################
