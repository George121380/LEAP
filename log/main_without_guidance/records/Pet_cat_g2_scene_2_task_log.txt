From agent.py
Reset goals: The sub-goals are: 
['Slice some chicken and give it to the cat.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_freezer_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_chicken,freezer_instance)
        else:
            exp(food_chicken,freezer_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,freezer_instance]=True
        close[freezer_instance,food_chicken]=True
    

behavior find_cat_2082_around_kitchen_counter_132(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cat,kitchen_counter_instance)
        else:
            exp(cat,kitchen_counter_instance)
    eff:
        unknown[cat]=False
        close[cat,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cat]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def can_cut_chicken(chicken: item):
    # Check if the chicken can be cut
    return is_food_chicken(chicken) and cuttable(chicken)

behavior slice_chicken(chicken: item):
    body:
        achieve cut(chicken)
        # Ensure the chicken is cut

behavior feed_chicken_to_cat(chicken: item, cat: item):
    body:
        achieve on(chicken, cat)
        # Feed the chicken to the cat

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        if can_cut_chicken(chicken):
            slice_chicken(chicken)
            feed_chicken_to_cat(chicken, cat)
        # Slice the chicken and then feed it to the cat

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_freezer_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_chicken,freezer_instance)
        else:
            exp(food_chicken,freezer_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,freezer_instance]=True
        close[freezer_instance,food_chicken]=True
    

behavior find_food_turkey_2071_around_freezer_140(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_turkey,freezer_instance)
        else:
            exp(food_turkey,freezer_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,freezer_instance]=True
        close[freezer_instance,food_turkey]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cat_2082_around_couch_192(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==192
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
def can_cut_chicken(chicken:item):
    # Check if the chicken can be cut
    return is_food_chicken(chicken) and cuttable(chicken)

behavior slice_chicken_and_feed_to_cat(chicken:item, cat:item):
    body:
        achieve cut(chicken)
        # Ensure the chicken is cut
        achieve on(chicken, cat)
        # Ensure the chicken is given to the cat

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        if can_cut_chicken(chicken):
            slice_chicken_and_feed_to_cat(chicken, cat)
        # Slice the chicken and then feed it to the cat

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Slice some chicken and give it to your cat.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_freezer_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_chicken,freezer_instance)
        else:
            exp(food_chicken,freezer_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,freezer_instance]=True
        close[freezer_instance,food_chicken]=True
    

behavior find_food_turkey_2071_around_freezer_140(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_turkey,freezer_instance)
        else:
            exp(food_turkey,freezer_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,freezer_instance]=True
        close[freezer_instance,food_turkey]=True
    

behavior find_cat_2082_around_kitchen_counter_132(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cat,kitchen_counter_instance)
        else:
            exp(cat,kitchen_counter_instance)
    eff:
        unknown[cat]=False
        close[cat,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cat]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_chicken(chicken:item):
    body:
        achieve cut(chicken)
        # Ensure that the chicken is cut

behavior feed_chicken_to_cat(chicken:item, cat:item):
    body:
        achieve on(chicken, cat)
        # Feed the chicken to the cat

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        slice_chicken(chicken)
        feed_chicken_to_cat(chicken, cat)
        # Slice the chicken and then feed it to the cat

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_freezer_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_chicken,freezer_instance)
        else:
            exp(food_chicken,freezer_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,freezer_instance]=True
        close[freezer_instance,food_chicken]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cat_2082_around_bed_264(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(cat,bed_instance)
        else:
            exp(cat,bed_instance)
    eff:
        unknown[cat]=False
        close[cat,bed_instance]=True
        close[bed_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
def can_cut_chicken(chicken: item):
    # Check if the chicken can be cut
    return is_food_chicken(chicken) and cuttable(chicken)

behavior slice_chicken(chicken: item):
    body:
        achieve cut(chicken)
        # Ensure the chicken is cut

behavior feed_chicken_to_cat(chicken: item, cat: item):
    body:
        achieve on(chicken, cat)
        # Place the sliced chicken near the cat for feeding

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind cat: item where:
            is_cat(cat)
        # Select the cat

        if can_cut_chicken(chicken):
            slice_chicken(chicken)
            feed_chicken_to_cat(chicken, cat)
        # Slice the chicken and then feed it to the cat

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Slice some chicken and give it to the cat.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_freezer_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_chicken,freezer_instance)
        else:
            exp(food_chicken,freezer_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,freezer_instance]=True
        close[freezer_instance,food_chicken]=True
    

behavior find_cat_2082_around_bed_264(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(cat,bed_instance)
        else:
            exp(cat,bed_instance)
    eff:
        unknown[cat]=False
        close[cat,bed_instance]=True
        close[bed_instance,cat]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def can_cut_chicken(chicken: item):
    # Check if the chicken can be cut
    return is_food_chicken(chicken) and cuttable(chicken)

behavior slice_chicken(chicken: item):
    body:
        achieve cut(chicken)
        # Ensure the chicken is cut

behavior feed_chicken_to_cat(chicken: item, cat: item):
    body:
        achieve on(chicken, cat)
        # Feed the chicken to the cat

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind cat: item where:
            is_cat(cat)
        # Select the cat

        if can_cut_chicken(chicken):
            slice_chicken(chicken)
            feed_chicken_to_cat(chicken, cat)
        # Slice the chicken and then feed it to the cat

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_freezer_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_chicken,freezer_instance)
        else:
            exp(food_chicken,freezer_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,freezer_instance]=True
        close[freezer_instance,food_chicken]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cat_2082_around_kitchen_counter_132(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cat,kitchen_counter_instance)
        else:
            exp(cat,kitchen_counter_instance)
    eff:
        unknown[cat]=False
        close[cat,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
def can_cut_chicken(chicken: item):
    # Check if the chicken can be cut
    return is_food_chicken(chicken) and cuttable(chicken)

behavior slice_chicken(chicken: item):
    body:
        achieve cut(chicken)
        # Ensure the chicken is cut

behavior give_chicken_to_cat(chicken: item, cat: item):
    body:
        achieve close(chicken, cat)
        # Ensure the chicken is close to the cat for it to eat

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind cat: item where:
            is_cat(cat)
        # Select the cat

        if can_cut_chicken(chicken):
            slice_chicken(chicken)
            give_chicken_to_cat(chicken, cat)
        # Slice the chicken and then give it to the cat

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g2.txt
Checking k1
missed actions: walk_executor(freezer_140);switchoff_executor(freezer_140);open_executor(freezer_140);walk_executor(food_chicken_2050);grab_executor(food_chicken_2050);walk_executor(cutting_board_2080);put_executor(food_chicken_2050, cutting_board_2080);walk_executor(dishwasher_143);open_executor(dishwasher_143);walk_executor(knife_2036);grab_executor(knife_2036);walk_executor(food_chicken_2050);cut_executor(food_chicken_2050);
missed action num: 13
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g2.txt
Checking k1
missed actions: walk_executor(freezer_140);switchoff_executor(freezer_140);open_executor(freezer_140);walk_executor(food_chicken_2050);grab_executor(food_chicken_2050);walk_executor(cutting_board_2080);put_executor(food_chicken_2050, cutting_board_2080);walk_executor(dishwasher_143);open_executor(dishwasher_143);walk_executor(knife_2036);grab_executor(knife_2036);walk_executor(food_chicken_2050);cut_executor(food_chicken_2050);
missed action num: 13
##############################
From evaluation.py
cdl_dataset/dataset/Pet_cat/g2.txt
Checking k2
missed actions: walk_executor(freezer_140);switchoff_executor(freezer_140);open_executor(freezer_140);walk_executor(food_chicken_2050);grab_executor(food_chicken_2050);walk_executor(cat_2082);put_executor(food_chicken_2050, cat_2082);
missed action num: 7
##############################
