From agent.py
Reset goals: The sub-goals are: 
['1. Hand wash the jacket.', '2. Wash the jacket using the washing machine.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2078_around_washing_machine_2041(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_jacket,washing_machine_instance)
        else:
            exp(clothes_jacket,washing_machine_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,washing_machine_instance]=True
        close[washing_machine_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior hand_wash_jacket(jacket:item):
    # Define the behavior to hand wash the jacket
    body:
        wash(jacket) # Wash the jacket by hand
        scrub(jacket) # Scrub the jacket to remove dirt
        rinse(jacket) # Rinse the jacket thoroughly
        achieve clean(jacket) # Ensure the jacket is clean after washing

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket) # Select an item that is a jacket
        achieve dirty(jacket) # Ensure the jacket is initially dirty for the task
        hand_wash_jacket(jacket) # Trigger the hand washing behavior for the jacket

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_bathroom_cabinet_305(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_clothes_jacket_2078_around_dresser_377(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_jacket,dresser_instance)
        else:
            exp(clothes_jacket,dresser_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,dresser_instance]=True
        close[dresser_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior hand_wash_jacket(jacket:item):
    body:
        achieve dirty(jacket)
        # Ensure the jacket is initially dirty before washing

        wash(jacket)
        # Wash the jacket by hand

        scrub(jacket)
        # Scrub the jacket to ensure cleanliness

        rinse(jacket)
        # Rinse the jacket thoroughly

        achieve clean(jacket)
        # Ensure the jacket is clean after washing

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select an item that is a jacket

        hand_wash_jacket(jacket)
        # Perform the hand washing of the jacket

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Hand wash the jacket thoroughly.', '2. Place the jacket in the washing machine and start the wash cycle.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2078_around_dresser_377(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_jacket,dresser_instance)
        else:
            exp(clothes_jacket,dresser_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,dresser_instance]=True
        close[dresser_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior hand_wash_jacket(jacket:item):
    body:
        wash(jacket)
        scrub(jacket)
        rinse(jacket)

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        hand_wash_jacket(jacket)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior hand_wash_jacket(jacket:item):
    body:
        wash(jacket)
        scrub(jacket)
        rinse(jacket)

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        hand_wash_jacket(jacket)

##############################
From agent.py-> find a plan in act()
walk_executor(dresser_377)exp(clothes_jacket_2078, dresser_377)walk_executor(clothes_jacket_2078)wash_executor(clothes_jacket_2078)scrub_executor(clothes_jacket_2078)rinse_executor(clothes_jacket_2078)
##############################
From agent.py
walk_executor(dresser_377)
Find novel_2010. Find pajamas_2039. Find drawing_387. Find drawing_388. Robot is inside bedroom_327. Robot is close dresser_377. Robot is close novel_2010. Robot is close pajamas_2039. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(clothes_jacket_2078, dresser_377)
Failed to find clothes_jacket_2078 around dresser_377. 
##############################
From agent.py-> find a plan in act()
walk_executor(walllamp_184)exp(clothes_jacket_2078, walllamp_184)walk_executor(clothes_jacket_2078)wash_executor(clothes_jacket_2078)scrub_executor(clothes_jacket_2078)rinse_executor(clothes_jacket_2078)
##############################
From agent.py
walk_executor(walllamp_184)
Robot is inside home_office_161. Robot is close walllamp_184. Robot is no longer inside bedroom_327.Robot is no longer close dresser_377.Robot is no longer close novel_2010.Robot is no longer close pajamas_2039.
##############################
From agent.py
exp(clothes_jacket_2078, walllamp_184)
Failed to find clothes_jacket_2078 around walllamp_184. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Hand wash the jacket.', '2. Wash the jacket using the washing machine.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2078_around_bed_264(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_jacket,bed_instance)
        else:
            exp(clothes_jacket,bed_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,bed_instance]=True
        close[bed_instance,clothes_jacket]=True
    

behavior find_detergent_2108_around_bathroom_cabinet_305(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_towel_2083_around_bathroom_cabinet_305(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior hand_wash_jacket(jacket:item):
    body:
        achieve close_char(char, jacket) # Ensure the character is close to the jacket for hand washing
        if dirty(jacket):
            wash(jacket) # Hand wash the jacket if it is dirty
            rinse(jacket) # Rinse the jacket after washing to ensure cleanliness
            squeeze(jacket) # Squeeze the jacket to remove excess water
        achieve clean(jacket) # Ensure the jacket is clean

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        if not visited(jacket):
            observe(jacket, "Locate the jackets position")
        hand_wash_jacket(jacket)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior hand_wash_jacket(jacket:item):
    body:
        achieve close_char(char, jacket) # Ensure the character is close to the jacket for hand washing
        if dirty(jacket):
            wash(jacket) # Hand wash the jacket if it is dirty
            rinse(jacket) # Rinse the jacket after washing to ensure cleanliness
            squeeze(jacket) # Squeeze the jacket to remove excess water
        achieve clean(jacket) # Ensure the jacket is clean

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        if not visited(jacket):
            observe(jacket, "Locate the jackets position")
        hand_wash_jacket(jacket)

##############################
From agent.py-> find a plan in act()
walk_executor(bed_264)exp(clothes_jacket_2078, bed_264)walk_executor(clothes_jacket_2078)obs(clothes_jacket_2078, Locate the jackets position)wash_executor(clothes_jacket_2078)
##############################
From agent.py
walk_executor(bed_264)
Find clothes_scarf_2079. Find clothes_dress_2075. Find pillow_240. Find drawing_238. Find clothes_jacket_2078. Find mat_237. Find pillow_239. Robot is inside bedroom_220. Robot is close bed_264. Robot is no longer inside home_office_161.Robot is no longer close walllamp_184.
##############################
From agent.py
exp(clothes_jacket_2078, bed_264)
Find clothes_jacket_2078. 
##############################
From agent.py-> find a plan in act()
walk_executor(clothes_jacket_2078)obs(clothes_jacket_2078, Locate the jackets position)wash_executor(clothes_jacket_2078)rinse_executor(clothes_jacket_2078)
##############################
From agent.py
walk_executor(clothes_jacket_2078)
Robot is inside bedroom_220. Robot is close bed_264. Robot is close clothes_jacket_2078. 
##############################
From agent.py
obs(clothes_jacket_2078, Locate the jackets position)
Get this information:  clothes_jacket_2078 is close to bed_264. clothes_jacket_2078 is close to character_219. clothes_jacket_2078 is on bed_264. clothes_jacket_2078 is inside bedroom_220. clothes_jacket_2078 is DIRTY.
##############################
From agent.py
wash_executor(clothes_jacket_2078)
Robot is inside bedroom_220. Robot is close bed_264. Robot is close clothes_jacket_2078. 
##############################
From agent.py
rinse_executor(clothes_jacket_2078)
Robot is inside bedroom_220. Robot is close bed_264. Robot is close clothes_jacket_2078. 
##############################
From agent.py
Human Instruction: You need to squeeze clothes_jacket_2078 to remove excess water and ensure it is clean according to the goal representation.

The actions you have taken:
Action 1: Walk to dresser_377.
Action 2: look for clothes_jacket_2078 around dresser_377.
Action 3: Walk to walllamp_184.
Action 4: look for clothes_jacket_2078 around walllamp_184.
Action 5: Walk to bed_264.
Action 6: look for clothes_jacket_2078 around bed_264.
Action 7: Walk to clothes_jacket_2078.
Action 8: Observe around clothes_jacket_2078 with the question of Locate the jackets position.
Action 9: Wash clothes_jacket_2078.
Action 10: Rinse clothes_jacket_2078.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_detergent_2108_around_bathroom_cabinet_305(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_towel_2083_around_sink_307(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

#exp_behavior_end

#goal_representation
behavior hand_wash_jacket(jacket: item):
    body:
        wash(jacket)
        # Wash the jacket by hand
        rinse(jacket)
        # Rinse the jacket
        squeeze(jacket)
        # Squeeze the jacket to remove excess water

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket) and id[jacket] == 2078
        # Select the jacket with ID 2078
        hand_wash_jacket(jacket)
        # Perform the hand washing of the jacket
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior hand_wash_jacket(jacket: item):
    body:
        wash(jacket)
        # Wash the jacket by hand
        rinse(jacket)
        # Rinse the jacket
        squeeze(jacket)
        # Squeeze the jacket to remove excess water

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket) and id[jacket] == 2078
        # Select the jacket with ID 2078
        hand_wash_jacket(jacket)
        # Perform the hand washing of the jacket
##############################
From agent.py-> find a plan in act()
wash_executor(clothes_jacket_2078)rinse_executor(clothes_jacket_2078)
##############################
From agent.py
wash_executor(clothes_jacket_2078)
Robot is inside bedroom_220. Robot is close bed_264. Robot is close clothes_jacket_2078. 
##############################
From agent.py
rinse_executor(clothes_jacket_2078)
Robot is inside bedroom_220. Robot is close bed_264. Robot is close clothes_jacket_2078. 
##############################
From agent.py
Human Instruction: You need to squeeze clothes_jacket_2078 to remove excess water, as the goal representation requires this step for completion.

The actions you have taken:
Action 1: Walk to dresser_377.
Action 2: look for clothes_jacket_2078 around dresser_377.
Action 3: Walk to walllamp_184.
Action 4: look for clothes_jacket_2078 around walllamp_184.
Action 5: Walk to bed_264.
Action 6: look for clothes_jacket_2078 around bed_264.
Action 7: Walk to clothes_jacket_2078.
Action 8: Observe around clothes_jacket_2078 with the question of Locate the jackets position.
Action 9: Wash clothes_jacket_2078.
Action 10: Rinse clothes_jacket_2078.
Action 11: Wash clothes_jacket_2078.
Action 12: Rinse clothes_jacket_2078.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior hand_wash_jacket(jacket:item):
    body:
        wash(jacket) 
        rinse(jacket)
        squeeze(jacket)

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket to be hand washed
        hand_wash_jacket(jacket)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior hand_wash_jacket(jacket:item):
    body:
        wash(jacket) 
        rinse(jacket)
        squeeze(jacket)

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket to be hand washed
        hand_wash_jacket(jacket)

##############################
From agent.py-> find a plan in act()
wash_executor(clothes_jacket_2078)rinse_executor(clothes_jacket_2078)
##############################
From agent.py
wash_executor(clothes_jacket_2078)
Robot is inside bedroom_220. Robot is close bed_264. Robot is close clothes_jacket_2078. 
##############################
From agent.py
rinse_executor(clothes_jacket_2078)
Robot is inside bedroom_220. Robot is close bed_264. Robot is close clothes_jacket_2078. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_bathroom_cabinet_305(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_basket_for_clothes_2040_around_washing_machine_2041(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(basket_for_clothes,washing_machine_instance)
        else:
            exp(basket_for_clothes,washing_machine_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,washing_machine_instance]=True
        close[washing_machine_instance,basket_for_clothes]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_clothes(clothes:item):
    body:
        squeeze(clothes)
        # Squeeze the clothes to remove excess water

behavior load_jacket_into_washing_machine(jacket:item, washing_machine:item):
    body:
        achieve inside(jacket, washing_machine)
        # Load the jacket into the washing machine

behavior start_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine)
        # Close the washing machine door
        achieve is_on(washing_machine)
        # Start the washing machine

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket) and id[jacket] == 2078
        # Select jacket with ID 2078

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        if has_water(jacket):
            squeeze_clothes(jacket)
        # If the jacket has water, squeeze it to remove excess water
        
        load_jacket_into_washing_machine(jacket, washing_machine)
        start_washing_machine(washing_machine)
        # Start the wash cycle for the jacket

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior squeeze_clothes(clothes:item):
    body:
        squeeze(clothes)
        # Squeeze the clothes to remove excess water

behavior load_jacket_into_washing_machine(jacket:item, washing_machine:item):
    body:
        achieve inside(jacket, washing_machine)
        # Load the jacket into the washing machine

behavior start_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine)
        # Close the washing machine door
        achieve is_on(washing_machine)
        # Start the washing machine

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket) and id[jacket] == 2078
        # Select jacket with ID 2078

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        if has_water(jacket):
            squeeze_clothes(jacket)
        # If the jacket has water, squeeze it to remove excess water
        
        load_jacket_into_washing_machine(jacket, washing_machine)
        start_washing_machine(washing_machine)
        # Start the wash cycle for the jacket

##############################
From agent.py-> find a plan in act()
walk_executor(washing_machine_2041)open_executor(washing_machine_2041)walk_executor(clothes_jacket_2078)grab_executor(clothes_jacket_2078)walk_executor(washing_machine_2041)putin_executor(clothes_jacket_2078, washing_machine_2041)close_executor(washing_machine_2041)plugin_executor(washing_machine_2041)switchon_executor(washing_machine_2041)
##############################
From agent.py
walk_executor(washing_machine_2041)
Robot is inside bathroom_265. Robot is close washing_machine_2041. Robot is no longer inside bedroom_220.Robot is no longer close bed_264.Robot is no longer close clothes_jacket_2078.
##############################
From agent.py
open_executor(washing_machine_2041)
Robot is inside bathroom_265. Robot is close washing_machine_2041. 
##############################
From agent.py
walk_executor(clothes_jacket_2078)
Robot is inside bedroom_220. Robot is close bed_264. Robot is close clothes_jacket_2078. Robot is no longer inside bathroom_265.Robot is no longer close washing_machine_2041.
##############################
From agent.py
grab_executor(clothes_jacket_2078)
Robot is inside bedroom_220. Robot is close bed_264. Robot is close clothes_jacket_2078. Grabbing clothes_jacket_2078 by right hand. 
##############################
From agent.py
walk_executor(washing_machine_2041)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. Robot is no longer inside bedroom_220.Robot is no longer close bed_264.
##############################
From agent.py
putin_executor(clothes_jacket_2078, washing_machine_2041)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. clothes_jacket_2078 released by right hand. 
##############################
From agent.py
close_executor(washing_machine_2041)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. 
##############################
From agent.py
plugin_executor(washing_machine_2041)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. 
##############################
From agent.py
switchon_executor(washing_machine_2041)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. 
##############################
From agent.py
Human Instruction: You need to squeeze the jacket to remove excess water before loading it into the washing machine.

The actions you have taken:
Action 1: Walk to dresser_377.
Action 2: look for clothes_jacket_2078 around dresser_377.
Action 3: Walk to walllamp_184.
Action 4: look for clothes_jacket_2078 around walllamp_184.
Action 5: Walk to bed_264.
Action 6: look for clothes_jacket_2078 around bed_264.
Action 7: Walk to clothes_jacket_2078.
Action 8: Observe around clothes_jacket_2078 with the question of Locate the jackets position.
Action 9: Wash clothes_jacket_2078.
Action 10: Rinse clothes_jacket_2078.
Action 11: Wash clothes_jacket_2078.
Action 12: Rinse clothes_jacket_2078.
Action 13: Wash clothes_jacket_2078.
Action 14: Rinse clothes_jacket_2078.
Action 15: Walk to washing_machine_2041.
Action 16: Open washing_machine_2041.
Action 17: Walk to clothes_jacket_2078.
Action 18: Grab clothes_jacket_2078.
Action 19: Walk to washing_machine_2041.
Action 20: Put clothes_jacket_2078 into washing_machine_2041.
Action 21: Close washing_machine_2041.
Action 22: Plug in washing_machine_2041.
Action 23: Switch on washing_machine_2041.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_basket_for_clothes_2040_around_ironing_board_2099(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(basket_for_clothes,ironing_board_instance)
        else:
            exp(basket_for_clothes,ironing_board_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,ironing_board_instance]=True
        close[ironing_board_instance,basket_for_clothes]=True
    

behavior find_detergent_2108_around_bathroom_cabinet_305(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_jacket(jacket:item):
    body:
        achieve plugged(jacket)
        # Ensure that the jacket is able to be squeezed
        squeeze(jacket)
        # Squeeze the jacket to remove excess water

behavior load_washing_machine(jacket:item, washing_machine:item):
    body:
        achieve inside(jacket, washing_machine)
        # Place jacket inside the washing machine

behavior run_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine)
        # Ensure the washing machine is closed
        achieve plugged(washing_machine)
        # Plug in the washing machine
        achieve is_on(washing_machine)
        # Turn on the washing machine

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket

        if not exists jacket: item : not dirty(jacket):
            observe(jacket, "Locate the jacket position")
        # Check if the jacket is clean, indicating it hasnt been washed yet

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine to use

        if not plugged(jacket):
            squeeze_jacket(jacket)
        # Ensure the excess water is squeezed from the jacket before loading into the washing machine

        if not inside(jacket, washing_machine):
            load_washing_machine(jacket, washing_machine)
        # Load the jacket into the washing machine

        run_washing_machine(washing_machine)
        # Run the washing machine to complete the washing process

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'jacket') at line 5910, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_detergent_2108_around_bathroom_cabinet_305(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_basket_for_clothes_2040_around_bathroom_counter_306(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(basket_for_clothes,bathroom_counter_instance)
        else:
            exp(basket_for_clothes,bathroom_counter_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,bathroom_counter_instance]=True
        close[bathroom_counter_instance,basket_for_clothes]=True
    

#goal_representation
 
behavior squeeze_jacket(jacket:item):
    body:
        squeeze(jacket)
        # Squeeze the jacket to remove excess water

behavior load_washing_machine(jacket:item, washing_machine:item):
    body:
        achieve inside(jacket, washing_machine)
        # Place jacket inside the washing machine

behavior run_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine)
        # Ensure the washing machine is closed
        achieve plugged(washing_machine)
        # Plug in the washing machine
        achieve is_on(washing_machine)
        # Turn on the washing machine

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket

        if not exists jacket: item : not dirty(jacket):
            observe(jacket, "Locate the jacket position")
        # Check if the jacket is clean, indicating it hasnt been washed yet

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine to use

        if not plugged(jacket):
            squeeze_jacket(jacket)
        # Ensure the excess water is squeezed from the jacket before loading into the washing machine

        if not inside(jacket, washing_machine):
            load_washing_machine(jacket, washing_machine)
        # Load the jacket into the washing machine

        run_washing_machine(washing_machine)
        # Run the washing machine to complete the washing process

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'jacket') at line 5908, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_detergent_2108_around_bathroom_cabinet_305(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_basket_for_clothes_2040_around_ironing_board_2099(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(basket_for_clothes,ironing_board_instance)
        else:
            exp(basket_for_clothes,ironing_board_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,ironing_board_instance]=True
        close[ironing_board_instance,basket_for_clothes]=True
    

behavior find_towel_2083_around_bathroom_cabinet_305(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine to use

        if dirty(jacket):
            observe(jacket, "Locate the jacket position")
        # Check if the jacket is dirty, indicating it hasnt been washed yet

        if has_water(jacket):
            squeeze_jacket(jacket)
        # Ensure the excess water is squeezed from the jacket before loading into the washing machine

        if not inside(jacket, washing_machine):
            load_washing_machine(jacket, washing_machine)
        # Load the jacket into the washing machine

        run_washing_machine(washing_machine)
        # Run the washing machine to complete the washing process

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_bathroom_cabinet_305(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_towel_2083_around_bathroom_cabinet_305(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

behavior find_basket_for_clothes_2040_around_bathroom_counter_306(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(basket_for_clothes,bathroom_counter_instance)
        else:
            exp(basket_for_clothes,bathroom_counter_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,bathroom_counter_instance]=True
        close[bathroom_counter_instance,basket_for_clothes]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes(jacket: item):
    # Function to check if the object is a jacket
    return is_clothes_jacket(jacket)

def is_washing_machine_target(washing_machine:item):
    # Function to check if the item is a washing machine
    return is_washing_machine(washing_machine)

behavior squeeze_and_wash(jacket:item, washing_machine:item):
    body:
        squeeze(jacket)
        achieve inside(jacket, washing_machine)
        achieve closed(washing_machine)
        achieve is_on(washing_machine)

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine
        
        achieve close_char(char, jacket)
        # Approach the jacket
        
        achieve close_char(char, washing_machine)
        # Approach the washing machine

        squeeze_and_wash(jacket, washing_machine)
        # Squeeze the jacket and wash it using the machine        

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_detergent_2108_around_bathroom_cabinet_305(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_basket_for_clothes_2040_around_bathtub_297(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(basket_for_clothes,bathtub_instance)
        else:
            exp(basket_for_clothes,bathtub_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,bathtub_instance]=True
        close[bathtub_instance,basket_for_clothes]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes_in_machine(washing_machine: item):
    # Function to check if there is clothes in the washing machine
    symbol has_clothes=exists clothes: item : is_clothes(clothes) and inside(clothes, washing_machine)
    return has_clothes

behavior squeeze_clothes(clothes:item):
    body:
        squeeze(clothes) # Squeeze clothes to remove excess water

behavior put_clothes_in_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)

behavior start_machine(washing_machine:item):
    body:
        achieve closed(washing_machine) # Close the washing machine door
        achieve is_on(washing_machine) # Turn on the washing machine

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        if has_clothes_in_machine(washing_machine):
            bind clothes: item where:
                is_clothes(clothes) and inside(clothes, washing_machine)
            # If clothes are already in the machine, no need to move them
            
            start_machine(washing_machine)
        else:
            bind clothes: item where:
                is_clothes_jacket(clothes)
            # Select the jacket as the clothes item

            squeeze_clothes(clothes)
            put_clothes_in_washing_machine(clothes, washing_machine)
            start_machine(washing_machine)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_bathroom_cabinet_305(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_basket_for_clothes_2040_around_ironing_board_2099(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(basket_for_clothes,ironing_board_instance)
        else:
            exp(basket_for_clothes,ironing_board_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,ironing_board_instance]=True
        close[ironing_board_instance,basket_for_clothes]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_jacket(jacket:item):
    body:
        achieve clean(jacket)
        achieve_once inhand(jacket) # Temporarily hold the jacket to squeeze out excess water
        squeeze(jacket)

behavior load_washing_machine(jacket:item, washing_machine:item):
    body:
        achieve inside(jacket, washing_machine)

behavior run_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine) # Ensure the washing machine is closed
        achieve is_on(washing_machine) # Turn on the washing machine

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine for clothes

        squeeze_jacket(jacket)
        load_washing_machine(jacket, washing_machine)
        run_washing_machine(washing_machine)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior squeeze_jacket(jacket:item):
    body:
        achieve clean(jacket)
        achieve_once inhand(jacket) # Temporarily hold the jacket to squeeze out excess water
        squeeze(jacket)

behavior load_washing_machine(jacket:item, washing_machine:item):
    body:
        achieve inside(jacket, washing_machine)

behavior run_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine) # Ensure the washing machine is closed
        achieve is_on(washing_machine) # Turn on the washing machine

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine for clothes

        squeeze_jacket(jacket)
        load_washing_machine(jacket, washing_machine)
        run_washing_machine(washing_machine)

##############################
From agent.py-> find a plan in act()
switchoff_executor(washing_machine_2041)open_executor(washing_machine_2041)grab_executor(clothes_jacket_2078)putin_executor(clothes_jacket_2078, washing_machine_2041)close_executor(washing_machine_2041)switchon_executor(washing_machine_2041)
##############################
From agent.py
switchoff_executor(washing_machine_2041)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. 
##############################
From agent.py
open_executor(washing_machine_2041)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. 
##############################
From agent.py
grab_executor(clothes_jacket_2078)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. Grabbing clothes_jacket_2078 by right hand. 
##############################
From agent.py
putin_executor(clothes_jacket_2078, washing_machine_2041)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. clothes_jacket_2078 released by right hand. 
##############################
From agent.py
close_executor(washing_machine_2041)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. 
##############################
From agent.py
switchon_executor(washing_machine_2041)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. 
##############################
From agent.py
Human Instruction: You need to squeeze the jacket to remove excess water before loading it into the washing machine.

The actions you have taken:
Action 1: Walk to dresser_377.
Action 2: look for clothes_jacket_2078 around dresser_377.
Action 3: Walk to walllamp_184.
Action 4: look for clothes_jacket_2078 around walllamp_184.
Action 5: Walk to bed_264.
Action 6: look for clothes_jacket_2078 around bed_264.
Action 7: Walk to clothes_jacket_2078.
Action 8: Observe around clothes_jacket_2078 with the question of Locate the jackets position.
Action 9: Wash clothes_jacket_2078.
Action 10: Rinse clothes_jacket_2078.
Action 11: Wash clothes_jacket_2078.
Action 12: Rinse clothes_jacket_2078.
Action 13: Wash clothes_jacket_2078.
Action 14: Rinse clothes_jacket_2078.
Action 15: Walk to washing_machine_2041.
Action 16: Open washing_machine_2041.
Action 17: Walk to clothes_jacket_2078.
Action 18: Grab clothes_jacket_2078.
Action 19: Walk to washing_machine_2041.
Action 20: Put clothes_jacket_2078 into washing_machine_2041.
Action 21: Close washing_machine_2041.
Action 22: Plug in washing_machine_2041.
Action 23: Switch on washing_machine_2041.
Action 24: Switch off washing_machine_2041.
Action 25: Open washing_machine_2041.
Action 26: Grab clothes_jacket_2078.
Action 27: Put clothes_jacket_2078 into washing_machine_2041.
Action 28: Close washing_machine_2041.
Action 29: Switch on washing_machine_2041.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_bathroom_cabinet_305(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_basket_for_clothes_2040_around_bathroom_counter_306(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(basket_for_clothes,bathroom_counter_instance)
        else:
            exp(basket_for_clothes,bathroom_counter_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,bathroom_counter_instance]=True
        close[bathroom_counter_instance,basket_for_clothes]=True
    

#exp_behavior_end

#goal_representation
 
behavior squeeze_jacket(jacket: item):
    body:
        squeeze(jacket) # Squeeze the jacket to remove excess water

behavior load_jacket_in_washing_machine(jacket: item, washing_machine: item):
    body:
        achieve inside(jacket, washing_machine)
        # Place the jacket inside the washing machine

behavior start_washing_machine(washing_machine: item):
    body:
        achieve plugged(washing_machine)
        # Ensure the washing machine is plugged in
        achieve closed(washing_machine) 
        # Close the washing machine door
        achieve is_on(washing_machine)
        # Turn on the washing machine

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select jacket that needs to be washed

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        squeeze_jacket(jacket)
        # Squeeze the jacket to remove excess water
        
        load_jacket_in_washing_machine(jacket, washing_machine)
        # Load the jacket into the washing machine
        
        start_washing_machine(washing_machine)
        # Start the washing machine

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_bathroom_cabinet_305(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_basket_for_clothes_2040_around_sink_307(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(basket_for_clothes,sink_instance)
        else:
            exp(basket_for_clothes,sink_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,sink_instance]=True
        close[sink_instance,basket_for_clothes]=True
    

#exp_behavior_end

#goal_representation

behavior squeeze_and_load_jacket(jacket: item, washing_machine: item):
    body:
        achieve_once inhand(jacket)
        # Temporarily achieve having the jacket in hand to squeeze it
        squeeze(jacket)
        # Squeeze the jacket to remove excess water
        achieve inside(jacket, washing_machine)
        # Load the jacket into the washing machine

behavior operate_washing_machine(washing_machine: item):
    body:
        achieve plugged(washing_machine) # Ensure the washing machine is plugged in
        achieve closed(washing_machine) # Close the washing machine door
        achieve is_on(washing_machine) # Switch on the washing machine

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket to be washed
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine
        squeeze_and_load_jacket(jacket, washing_machine)
        operate_washing_machine(washing_machine)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior squeeze_and_load_jacket(jacket: item, washing_machine: item):
    body:
        achieve_once inhand(jacket)
        # Temporarily achieve having the jacket in hand to squeeze it
        squeeze(jacket)
        # Squeeze the jacket to remove excess water
        achieve inside(jacket, washing_machine)
        # Load the jacket into the washing machine

behavior operate_washing_machine(washing_machine: item):
    body:
        achieve plugged(washing_machine) # Ensure the washing machine is plugged in
        achieve closed(washing_machine) # Close the washing machine door
        achieve is_on(washing_machine) # Switch on the washing machine

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket to be washed
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine
        squeeze_and_load_jacket(jacket, washing_machine)
        operate_washing_machine(washing_machine)

##############################
From agent.py-> find a plan in act()
switchoff_executor(washing_machine_2041)open_executor(washing_machine_2041)grab_executor(clothes_jacket_2078)putin_executor(clothes_jacket_2078, washing_machine_2041)close_executor(washing_machine_2041)switchon_executor(washing_machine_2041)
##############################
From agent.py
switchoff_executor(washing_machine_2041)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. 
##############################
From agent.py
open_executor(washing_machine_2041)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. 
##############################
From agent.py
grab_executor(clothes_jacket_2078)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. Grabbing clothes_jacket_2078 by right hand. 
##############################
From agent.py
putin_executor(clothes_jacket_2078, washing_machine_2041)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. clothes_jacket_2078 released by right hand. 
##############################
From agent.py
close_executor(washing_machine_2041)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. 
##############################
From agent.py
switchon_executor(washing_machine_2041)
Robot is inside bathroom_265. Robot is close clothes_jacket_2078. Robot is close washing_machine_2041. 
##############################
From evaluation.py
cdl_dataset/dataset/Wash_clothes/g3.txt
Checking k1
missed actions: 
missed action num: 0
##############################
