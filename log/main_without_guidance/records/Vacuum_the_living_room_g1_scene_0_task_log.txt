From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_closetdrawer_148(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==148
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(mat,closetdrawer_instance)
        else:
            exp(mat,closetdrawer_instance)
    eff:
        unknown[mat]=False
        close[mat,closetdrawer_instance]=True
        close[closetdrawer_instance,mat]=True
    

behavior find_mat_237_around_cupboard_229(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(mat,cupboard_instance)
        else:
            exp(mat,cupboard_instance)
    eff:
        unknown[mat]=False
        close[mat,cupboard_instance]=True
        close[cupboard_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def is_floor_cleanable_by_vacuum(floor: item):
    # Function to check if a floor can be cleaned by a vacuum cleaner
    return is_floor(floor)

behavior vacuum_floor(floor: item, vacuum_cleaner: item):
    body:
        achieve plugged(vacuum_cleaner)  # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner)    # Ensure the vacuum cleaner is turned on
        achieve clean(floor)             # Achieve a clean state for the floor

behavior __goal__():
    body:
        bind vacuum: item where:
            is_vacuum_cleaner(vacuum)
        # Bind to the item identified as a vacuum cleaner

        if not visited(vacuum):
            observe(vacuum, "Check if the vacuum cleaner is ready for use")
        # Observe the vacuum cleaner to confirm its readiness

        foreach floor: item:
            if is_floor_cleanable_by_vacuum(floor) and dirty(floor):
                vacuum_floor(floor, vacuum)
        # For each floor that can be cleaned by a vacuum and is dirty, vacuum it

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_stove_2065(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(mat,stove_instance)
        else:
            exp(mat,stove_instance)
    eff:
        unknown[mat]=False
        close[mat,stove_instance]=True
        close[stove_instance,mat]=True
    

behavior find_mat_237_around_table_355(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

behavior find_vacuum_cleaner_2070_around_cupboard_229(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(vacuum_cleaner,cupboard_instance)
        else:
            exp(vacuum_cleaner,cupboard_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,cupboard_instance]=True
        close[cupboard_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
def is_floor_item(floor:item):
    # Check if the item is a floor
    return is_floor(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor_item(floor)
        # Select the floor to be vacuumed
        
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in
        
        achieve is_on(vacuum_cleaner)
        # Turn on the vacuum cleaner
        
        achieve close_char(char, floor)
        # Move the character closer to the floor

        # Assume achieving clean(floor) implies vacuuming it
        achieve clean(floor)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_floor_item(floor:item):
    # Check if the item is a floor
    return is_floor(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor_item(floor)
        # Select the floor to be vacuumed
        
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in
        
        achieve is_on(vacuum_cleaner)
        # Turn on the vacuum cleaner
        
        achieve close_char(char, floor)
        # Move the character closer to the floor

        # Assume achieving clean(floor) implies vacuuming it
        achieve clean(floor)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(vacuum_cleaner_2070, cupboard_229)walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)walk_executor(floor_2)wash_executor(floor_2)
##############################
From agent.py
walk_executor(cupboard_229)
Find tray_296. Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. Robot is no longer inside bathroom_1.
##############################
From agent.py
open_executor(cupboard_229)
Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. 
##############################
From agent.py
exp(vacuum_cleaner_2070, cupboard_229)
Failed to find vacuum_cleaner_2070 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_158)exp(vacuum_cleaner_2070, closetdrawer_158)walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)walk_executor(floor_2)wash_executor(floor_2)
##############################
From agent.py
walk_executor(closetdrawer_158)
Find hanger_128. Find hanger_110. Find hanger_140. Find hanger_132. Find hanger_113. Find mat_173. Find hanger_142. Find hanger_124. Find hanger_134. Find hanger_126. Find hanger_138. Find hanger_111. Find hanger_130. Find hanger_141. Find hanger_114. Find hanger_136. Find hanger_109. Find hanger_112. Find hanger_115. Robot is inside bedroom_67. Robot is close dresser_123. Robot is close closetdrawer_158. Robot is no longer inside dining_room_201.Robot is no longer close wall_211.Robot is no longer close cupboard_229.
##############################
From agent.py
exp(vacuum_cleaner_2070, closetdrawer_158)
Failed to find vacuum_cleaner_2070 around closetdrawer_158. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_118)exp(vacuum_cleaner_2070, closetdrawer_118)walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)walk_executor(floor_2)wash_executor(floor_2)
##############################
From agent.py
walk_executor(closetdrawer_118)
Robot is inside bedroom_67. Robot is close closetdrawer_121. Robot is close dresser_108. Robot is close closetdrawer_118. Robot is no longer close dresser_123.Robot is no longer close closetdrawer_158.
##############################
From agent.py
exp(vacuum_cleaner_2070, closetdrawer_118)
Failed to find vacuum_cleaner_2070 around closetdrawer_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_119)exp(vacuum_cleaner_2070, closetdrawer_119)walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)walk_executor(floor_2)wash_executor(floor_2)
##############################
From agent.py
walk_executor(closetdrawer_119)
Robot is inside bedroom_67. Robot is close dresser_108. Robot is close closetdrawer_120. Robot is close closetdrawer_119. Robot is no longer close closetdrawer_121.Robot is no longer close closetdrawer_118.
##############################
From agent.py
exp(vacuum_cleaner_2070, closetdrawer_119)
Failed to find vacuum_cleaner_2070 around closetdrawer_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_380)exp(vacuum_cleaner_2070, closetdrawer_380)walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)walk_executor(floor_2)wash_executor(floor_2)
##############################
From agent.py
walk_executor(closetdrawer_380)
Find hanger_361. Find hanger_359. Find hanger_363. Find hanger_365. Find hanger_367. Find hanger_369. Find hanger_372. Find hanger_374. Find hanger_375. Find hanger_376. Robot is inside home_office_319. Robot is close closetdrawer_382. Robot is close closetdrawer_380. Robot is close dresser_358. Robot is no longer inside bedroom_67.Robot is no longer close closetdrawer_120.Robot is no longer close dresser_108.Robot is no longer close closetdrawer_119.
##############################
From agent.py
exp(vacuum_cleaner_2070, closetdrawer_380)
Find vacuum_cleaner_2070. 
##############################
From agent.py-> find a plan in act()
walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)walk_executor(floor_2)wash_executor(floor_2)
##############################
From agent.py
walk_executor(vacuum_cleaner_2070)
Robot is inside home_office_319. Robot is close vacuum_cleaner_2070. Robot is no longer close closetdrawer_382.Robot is no longer close closetdrawer_380.Robot is no longer close dresser_358.
##############################
From agent.py
plugin_executor(vacuum_cleaner_2070)
Robot is inside home_office_319. Robot is close vacuum_cleaner_2070. 
##############################
From agent.py
switchon_executor(vacuum_cleaner_2070)
Robot is inside home_office_319. Robot is close vacuum_cleaner_2070. 
##############################
From agent.py
walk_executor(floor_2)
Robot is inside bathroom_1. Robot is close floor_2. Robot is no longer inside home_office_319.Robot is no longer close vacuum_cleaner_2070.
##############################
From agent.py
wash_executor(floor_2)
Robot is inside bathroom_1. Robot is close floor_2. 
##############################
From agent.py
Human Instruction: You need to return to the floor with the vacuum cleaner and use it to clean the floor, rather than washing it. This will ensure that the goal of vacuuming the floor is achieved.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for vacuum_cleaner_2070 around cupboard_229.
Action 4: Walk to closetdrawer_158.
Action 5: look for vacuum_cleaner_2070 around closetdrawer_158.
Action 6: Walk to closetdrawer_118.
Action 7: look for vacuum_cleaner_2070 around closetdrawer_118.
Action 8: Walk to closetdrawer_119.
Action 9: look for vacuum_cleaner_2070 around closetdrawer_119.
Action 10: Walk to closetdrawer_380.
Action 11: look for vacuum_cleaner_2070 around closetdrawer_380.
Action 12: Walk to vacuum_cleaner_2070.
Action 13: Plug in vacuum_cleaner_2070.
Action 14: Switch on vacuum_cleaner_2070.
Action 15: Walk to floor_2.
Action 16: Wash floor_2.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_bathroom_cabinet_40(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(mat,bathroom_cabinet_instance)
        else:
            exp(mat,bathroom_cabinet_instance)
    eff:
        unknown[mat]=False
        close[mat,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,mat]=True
    

behavior find_mat_22_around_mat_173(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==173
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner instance
        
        bind floor: item where:
            is_floor(floor)
        # Select the floor you want to clean
        
        if plugged(vacuum_cleaner) and is_on(vacuum_cleaner):
            achieve clean(floor)
        else:
            # Ensure the vacuum cleaner is plugged in and turned on before starting
            achieve plugged(vacuum_cleaner)
            achieve is_on(vacuum_cleaner)
            achieve clean(floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2056_around_bathroom_cabinet_40(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior use_vacuum_cleaner_on_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on
        achieve close_char(char, floor)
        # Approach the floor to clean it

behavior turn_on_vacuum_cleaner(vacuum_cleaner: item):
    body:
        achieve is_on(vacuum_cleaner)
        # Turn on the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor) and dirty(floor)
        # Select the dirty floor to clean

        if not is_on(vacuum_cleaner):
            achieve plugged(vacuum_cleaner)
            # Ensure the vacuum cleaner is plugged in
            turn_on_vacuum_cleaner(vacuum_cleaner)

        use_vacuum_cleaner_on_floor(vacuum_cleaner, floor)
        # Use the vacuum cleaner to clean the floor


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior use_vacuum_cleaner_on_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on
        achieve close_char(char, floor)
        # Approach the floor to clean it

behavior turn_on_vacuum_cleaner(vacuum_cleaner: item):
    body:
        achieve is_on(vacuum_cleaner)
        # Turn on the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor) and dirty(floor)
        # Select the dirty floor to clean

        if not is_on(vacuum_cleaner):
            achieve plugged(vacuum_cleaner)
            # Ensure the vacuum cleaner is plugged in
            turn_on_vacuum_cleaner(vacuum_cleaner)

        use_vacuum_cleaner_on_floor(vacuum_cleaner, floor)
        # Use the vacuum cleaner to clean the floor


##############################
From agent.py-> find a plan in act()
walk_executor(floor_4)
##############################
From agent.py
walk_executor(floor_4)
Robot is inside bathroom_1. Robot is close floor_4. Robot is no longer close floor_2.
##############################
From agent.py
Human Instruction: You need to return to the floor with the vacuum cleaner, switch it on, and use it to vacuum the floor, as washing it does not fulfill the goal of vacuuming.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for vacuum_cleaner_2070 around cupboard_229.
Action 4: Walk to closetdrawer_158.
Action 5: look for vacuum_cleaner_2070 around closetdrawer_158.
Action 6: Walk to closetdrawer_118.
Action 7: look for vacuum_cleaner_2070 around closetdrawer_118.
Action 8: Walk to closetdrawer_119.
Action 9: look for vacuum_cleaner_2070 around closetdrawer_119.
Action 10: Walk to closetdrawer_380.
Action 11: look for vacuum_cleaner_2070 around closetdrawer_380.
Action 12: Walk to vacuum_cleaner_2070.
Action 13: Plug in vacuum_cleaner_2070.
Action 14: Switch on vacuum_cleaner_2070.
Action 15: Walk to floor_2.
Action 16: Wash floor_2.
Action 17: Walk to floor_4.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_vacuum_cleaner_instance(vacuum_cleaner:item):
    # Check if the item is a vacuum cleaner
    return is_vacuum_cleaner(vacuum_cleaner)

def is_floor_instance(floor:item):
    # Check if the item is a floor
    return is_floor(floor)

behavior switch_on_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve close(vacuum_cleaner, floor)
        achieve_clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner_instance(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor_instance(floor)
        # Select the floor

        if not visited(vacuum_cleaner):
            observe(vacuum_cleaner, "Check if the vacuum cleaner is plugged and switched on")
        
        if not is_on(vacuum_cleaner):
            switch_on_vacuum_cleaner(vacuum_cleaner)

        vacuum_floor(vacuum_cleaner, floor)
        # Perform vacuum cleaning on the floor
 
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_clean not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mat_22_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#goal_representation
 
def is_vacuum_cleaner_instance(vacuum_cleaner:item):
    # Check if the item is a vacuum cleaner
    return is_vacuum_cleaner(vacuum_cleaner)

def is_floor_instance(floor:item):
    # Check if the item is a floor
    return is_floor(floor)

behavior switch_on_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve close(vacuum_cleaner, floor)
        is_cleaning_solution(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner_instance(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor_instance(floor)
        # Select the floor

        if not visited(vacuum_cleaner):
            observe(vacuum_cleaner, "Check if the vacuum cleaner is plugged and switched on")
        
        if not is_on(vacuum_cleaner):
            switch_on_vacuum_cleaner(vacuum_cleaner)

        vacuum_floor(vacuum_cleaner, floor)
        # Perform vacuum cleaning on the floor

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Expr statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
