From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_instance(coffee_maker: item):
    # Function to check if an item is a coffee maker
    return is_coffe_maker(coffee_maker)

def is_cup_instance(cup: item):
    # Function to check if an item is a cup
    return is_cup(cup)

behavior plug_in_coffee_maker(coffee_maker: item, socket: item):
    body:
        achieve plugged(coffee_maker)

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior brew_coffee(coffee_maker: item, cup: item):
    body:
        achieve inside(coffee_maker, cup)
        # Ensure the cup is inside the coffee maker to collect coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffee_maker_instance(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup_instance(cup)
        # Select a cup

        bind socket: item where:
            is_powersocket(socket)
        # Select a power socket

        if not plugged(coffee_maker):
            plug_in_coffee_maker(coffee_maker, socket)

        if not is_on(coffee_maker):
            turn_on_coffee_maker(coffee_maker)

        brew_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior make_coffee(coffe_maker: item, cup: item):
    body:
        achieve has_water(coffe_maker)
        # Ensure the coffee maker has water

        achieve plugged(coffe_maker)
        # Ensure the coffee maker is plugged in

        achieve is_on(coffe_maker)
        # Turn on the coffee maker to start brewing

        achieve inside(cup, coffe_maker)
        # Place the cup in the coffee maker for brewing
        
behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select a coffee maker in the scenario

        bind cup: item where:
            is_cup(cup)
        # Select a cup to use with the coffee maker

        make_coffee(coffe_maker, cup)
        # Perform the coffee making process with the selected coffee maker and cup
#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the coffee maker.', '2. Brew a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        foreach coffee_maker: item where:
            is_coffe_maker(coffee_maker) and not visited(coffee_maker):
            observe(coffee_maker, "Check the location of the coffee maker")
        # Observe each unvisited coffee maker to find its location and mark it as visited once found
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('WHERE', 'where') at line 5804, column 36.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior __goal__():
    body:
        foreach coffee_maker: item:
            if is_coffe_maker(coffee_maker) and not visited(coffee_maker):
                observe(coffee_maker, "Check the location of the coffee maker")
        # Observe each unvisited coffee maker to find its location and mark it as visited once found

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        foreach coffee_maker: item:
            if is_coffe_maker(coffee_maker) and not visited(coffee_maker):
                observe(coffee_maker, "Check the location of the coffee maker")
        # Observe each unvisited coffee maker to find its location and mark it as visited once found

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Check the location of the coffee maker)
##############################
From agent.py
walk_executor(coffe_maker_290)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close coffe_maker_290. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
open_executor(coffe_maker_290)
Find drawing_174. Robot is inside dining_room_201. Robot is close coffe_maker_290. Robot is close kitchen_counter_230. 
##############################
From agent.py
obs(coffe_maker_290, Check the location of the coffee maker)
Get this information:  coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is OPEN. coffe_maker_290 is CLEAN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OFF.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior brew_coffee(coffee_maker:item):
    body:
        achieve has_water(coffee_maker) 
        # Ensure theres water in the coffee maker

        achieve closed(coffee_maker)
        # Ensure the coffee maker is closed before brewing

        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and visited(coffee_maker)
        # Bind the coffee maker that has already been located and observed

        brew_coffee(coffee_maker)
        # Execute the behavior to brew a cup of coffee with the coffee maker

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior brew_coffee(coffee_maker:item):
    body:
        achieve has_water(coffee_maker) 
        # Ensure theres water in the coffee maker

        achieve closed(coffee_maker)
        # Ensure the coffee maker is closed before brewing

        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and visited(coffee_maker)
        # Bind the coffee maker that has already been located and observed

        brew_coffee(coffee_maker)
        # Execute the behavior to brew a cup of coffee with the coffee maker

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior brew_coffee_with_coffee_maker(coffee_maker: item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

        achieve is_on(coffee_maker)
        # Make sure the coffee maker is turned on

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

        achieve closed(coffee_maker)
        # Close the coffee maker to start brewing

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if not visited(coffee_maker):
            observe(coffee_maker, "Check the coffee makers condition and location")
        # Ensure we know where the coffee maker is and its condition

        brew_coffee_with_coffee_maker(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior brew_coffee_with_coffee_maker(coffee_maker: item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

        achieve is_on(coffee_maker)
        # Make sure the coffee maker is turned on

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

        achieve closed(coffee_maker)
        # Close the coffee maker to start brewing

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if not visited(coffee_maker):
            observe(coffee_maker, "Check the coffee makers condition and location")
        # Ensure we know where the coffee maker is and its condition

        brew_coffee_with_coffee_maker(coffee_maker)

##############################
From agent.py-> find a plan in act()
obs(coffe_maker_290, Check the coffee makers condition and location)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)
##############################
From agent.py
obs(coffe_maker_290, Check the coffee makers condition and location)
Get this information:  coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is OPEN. coffe_maker_290 is CLEAN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OFF.
##############################
From agent.py
close_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close coffe_maker_290. Robot is close kitchen_counter_230. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close coffe_maker_290. Robot is close kitchen_counter_230. 
##############################
From agent.py
walk_executor(faucet_232)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close faucet_232. Robot is no longer close coffe_maker_290.
##############################
From agent.py
switchon_executor(faucet_232)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close faucet_232. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close faucet_232. 
##############################
From agent.py
Human Instruction: Add water to the coffee maker, then ensure it is closed and switched on to start brewing the coffee.

The actions you have taken:
Action 1: Walk to coffe_maker_290.
Action 2: Open coffe_maker_290.
Action 3: Observe around coffe_maker_290 with the question of Check the location of the coffee maker.
Action 4: Observe around coffe_maker_290 with the question of Check the coffee makers condition and location.
Action 5: Close coffe_maker_290.
Action 6: Switch on coffe_maker_290.
Action 7: Walk to faucet_232.
Action 8: Switch on faucet_232.
Action 9: Switch off faucet_232.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_water_in_coffee_maker(coffee_maker: item):
    # Function to verify if the coffee maker has water
    return has_water(coffee_maker)

behavior add_water_to_coffee_maker(coffee_maker: item, faucet: item):
    body:
        assert has_water(coffee_maker) == False
        achieve close_char(char, faucet)
        achieve inside(faucet, coffee_maker)
        achieve has_water(coffee_maker)

behavior switch_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        
        bind faucet: item where:
            is_faucet(faucet) and close_char(char, faucet)
        # Select a faucet close to the character

        if not has_water_in_coffee_maker(coffee_maker):
            add_water_to_coffee_maker(coffee_maker, faucet)
            # Add water to the coffee maker if it doesnt have water

        achieve closed(coffee_maker)
        # Ensure the coffee maker is closed

        switch_on_coffee_maker(coffee_maker)
        # Switch on the coffee maker to start brewing coffee

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_and_is_on(coffee_maker: item):
    # Function to check if a coffee maker has water and is switched on
    symbol has_water_and_power=has_water(coffee_maker) and is_on(coffee_maker)
    return has_water_and_power

behavior ensure_coffee_maker_ready(coffee_maker: item):
    body:
        achieve closed(coffee_maker)
        # Ensure the coffee maker is closed

        achieve_once inhand(coffee_maker)
        water(coffee_maker)
        # Add water to the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind the coffee maker

        if not has_water_and_is_on(coffee_maker):
            ensure_coffee_maker_ready(coffee_maker)
            achieve is_on(coffee_maker)
            # If coffee maker is not ready, fill it with water and turn on

        achieve has_water(coffee_maker) and closed(coffee_maker) and is_on(coffee_maker)
        # Ensure the coffee maker is now ready to brew coffee

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
 
def has_water_and_is_on(coffee_maker: item):
    # Function to check if a coffee maker has water and is switched on
    symbol has_water_and_power=has_water(coffee_maker) and is_on(coffee_maker)
    return has_water_and_power

behavior ensure_coffee_maker_ready(coffee_maker: item):
    body:
        achieve closed(coffee_maker)
        # Ensure the coffee maker is closed

        achieve_once inhand(coffee_maker)
        milk(coffee_maker)
        # Add water to the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind the coffee maker

        if not has_water_and_is_on(coffee_maker):
            ensure_coffee_maker_ready(coffee_maker)
            achieve is_on(coffee_maker)
            # If coffee maker is not ready, fill it with water and turn on

        achieve has_water(coffee_maker) and closed(coffee_maker) and is_on(coffee_maker)
        # Ensure the coffee maker is now ready to brew coffee

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function milk not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
 
def has_water_and_is_on(coffee_maker: item):
    # Function to check if a coffee maker has water and is switched on
    symbol has_water_and_power=has_water(coffee_maker) and is_on(coffee_maker)
    return has_water_and_power

behavior ensure_coffee_maker_ready(coffee_maker: item):
    body:
        achieve closed(coffee_maker)
        # Ensure the coffee maker is closed

        achieve_once inhand(coffee_maker)
        is_milk(coffee_maker)
        # Add water to the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind the coffee maker

        if not has_water_and_is_on(coffee_maker):
            ensure_coffee_maker_ready(coffee_maker)
            achieve is_on(coffee_maker)
            # If coffee maker is not ready, fill it with water and turn on

        achieve has_water(coffee_maker) and closed(coffee_maker) and is_on(coffee_maker)
        # Ensure the coffee maker is now ready to brew coffee

#goal_representation_end

##############################
