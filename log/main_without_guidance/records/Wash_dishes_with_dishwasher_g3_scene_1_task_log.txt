From agent.py
Reset goals: The sub-goals are: 
['1. Use the dishwasher to wash the bowls and plates.', '2. Wash the forks by hand.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2141_around_kitchen_counter_122(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_plate_2152_around_kitchen_counter_122(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_bowl_2140_around_sink_120(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def contains_plate_or_bowl(dishwasher: item):
    # Function to check if the dishwasher already contains plates or bowls
    symbol has_contents = exists o: item : (is_plate(o) or is_bowl(o)) and inside(o, dishwasher)
    return has_contents

behavior load_dishwasher_with_plates_and_bowls(dishwasher: item):
    body:
        foreach o: item:
            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):
                achieve inside(o, dishwasher)
                # Load each plate and bowl into the dishwasher
            
behavior start_dishwasher(dishwasher: item):
    body:
        achieve closed(dishwasher) # Ensure the dishwasher door is closed
        achieve is_on(dishwasher) # Turn on the dishwasher to start the cleaning cycle

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a suitable dishwasher

        if not contains_plate_or_bowl(dishwasher):
            load_dishwasher_with_plates_and_bowls(dishwasher)
            # Only load the dishwasher if it does not already contain plates or bowls

        start_dishwasher(dishwasher)
        # Start the dishwasher to wash the loaded plates and bowls

#goal_representation_end

##############################
From agent.py->reset_goal
 
def contains_plate_or_bowl(dishwasher: item):
    # Function to check if the dishwasher already contains plates or bowls
    symbol has_contents = exists o: item : (is_plate(o) or is_bowl(o)) and inside(o, dishwasher)
    return has_contents

behavior load_dishwasher_with_plates_and_bowls(dishwasher: item):
    body:
        foreach o: item:
            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):
                achieve inside(o, dishwasher)
                # Load each plate and bowl into the dishwasher
            
behavior start_dishwasher(dishwasher: item):
    body:
        achieve closed(dishwasher) # Ensure the dishwasher door is closed
        achieve is_on(dishwasher) # Turn on the dishwasher to start the cleaning cycle

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a suitable dishwasher

        if not contains_plate_or_bowl(dishwasher):
            load_dishwasher_with_plates_and_bowls(dishwasher)
            # Only load the dishwasher if it does not already contain plates or bowls

        start_dishwasher(dishwasher)
        # Start the dishwasher to wash the loaded plates and bowls

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(bowl_2140, kitchen_counter_122)walk_executor(dishwasher_129)open_executor(dishwasher_129)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(dishwasher_129)putin_executor(bowl_2140, dishwasher_129)walk_executor(kitchen_counter_122)exp(bowl_2141, kitchen_counter_122)walk_executor(bowl_2141)grab_executor(bowl_2141)walk_executor(dishwasher_129)putin_executor(bowl_2141, dishwasher_129)walk_executor(kitchen_counter_122)exp(bowl_2142, kitchen_counter_122)walk_executor(bowl_2142)grab_executor(bowl_2142)walk_executor(dishwasher_129)putin_executor(bowl_2142, dishwasher_129)walk_executor(kitchen_counter_122)exp(plate_2152, kitchen_counter_122)walk_executor(plate_2152)grab_executor(plate_2152)walk_executor(dishwasher_129)putin_executor(plate_2152, dishwasher_129)close_executor(dishwasher_129)switchon_executor(dishwasher_129)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Find tray_128. Find spectacles_2153. Find fryingpan_2154. Find pot_78. Robot is inside dining_room_41. Robot is close kitchen_counter_122. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_122)
Failed to find bowl_2140 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_120)exp(bowl_2140, sink_120)walk_executor(dishwasher_129)open_executor(dishwasher_129)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(dishwasher_129)putin_executor(bowl_2140, dishwasher_129)walk_executor(sink_120)exp(bowl_2141, sink_120)walk_executor(bowl_2141)grab_executor(bowl_2141)walk_executor(dishwasher_129)putin_executor(bowl_2141, dishwasher_129)walk_executor(sink_120)exp(bowl_2142, sink_120)walk_executor(bowl_2142)grab_executor(bowl_2142)walk_executor(dishwasher_129)putin_executor(bowl_2142, dishwasher_129)walk_executor(sink_120)exp(plate_2152, sink_120)walk_executor(plate_2152)grab_executor(plate_2152)walk_executor(dishwasher_129)putin_executor(plate_2152, dishwasher_129)close_executor(dishwasher_129)switchon_executor(dishwasher_129)
##############################
From agent.py
walk_executor(sink_120)
Find basket_for_clothes_2078. Find soap_2010. Find pot_2138. Find ice_2024. Find soap_2126. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find fork_2151. Robot is inside dining_room_41. Robot is close sink_120. Robot is close kitchen_counter_119. Robot is no longer close kitchen_counter_122.
##############################
From agent.py
exp(bowl_2140, sink_120)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_129)open_executor(dishwasher_129)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(dishwasher_129)putin_executor(bowl_2140, dishwasher_129)walk_executor(bowl_2141)grab_executor(bowl_2141)walk_executor(dishwasher_129)putin_executor(bowl_2141, dishwasher_129)walk_executor(bowl_2142)grab_executor(bowl_2142)walk_executor(dishwasher_129)putin_executor(bowl_2142, dishwasher_129)walk_executor(plate_2152)grab_executor(plate_2152)walk_executor(dishwasher_129)putin_executor(plate_2152, dishwasher_129)close_executor(dishwasher_129)switchon_executor(dishwasher_129)
##############################
From agent.py
walk_executor(dishwasher_129)
Find detergent_2011. Find measuring_cup_2012. Robot is inside dining_room_41. Robot is close dishwasher_129. Robot is close detergent_2011. Robot is close measuring_cup_2012. Robot is no longer close sink_120.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
open_executor(dishwasher_129)
Robot is inside dining_room_41. Robot is close dishwasher_129. Robot is close detergent_2011. Robot is close measuring_cup_2012. 
##############################
From agent.py
walk_executor(bowl_2140)
Robot is inside dining_room_41. Robot is close bowl_2140. Robot is close kitchen_counter_119. Robot is no longer close dishwasher_129.Robot is no longer close detergent_2011.Robot is no longer close measuring_cup_2012.
##############################
From agent.py
grab_executor(bowl_2140)
Robot is inside dining_room_41. Robot is close bowl_2140. Robot is close kitchen_counter_119. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot is inside dining_room_41. Robot is close bowl_2140. Robot is close dishwasher_129. Robot is close detergent_2011. Robot is close measuring_cup_2012. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
putin_executor(bowl_2140, dishwasher_129)
Robot is inside dining_room_41. Robot is close bowl_2140. Robot is close dishwasher_129. Robot is close detergent_2011. Robot is close measuring_cup_2012. bowl_2140 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2141)
Robot is inside dining_room_41. Robot is close bowl_2141. Robot is close kitchen_counter_119. Robot is no longer close dishwasher_129.Robot is no longer close detergent_2011.Robot is no longer close bowl_2140.Robot is no longer close measuring_cup_2012.
##############################
From agent.py
grab_executor(bowl_2141)
Robot is inside dining_room_41. Robot is close bowl_2141. Robot is close kitchen_counter_119. Grabbing bowl_2141 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot is inside dining_room_41. Robot is close bowl_2141. Robot is close dishwasher_129. Robot is close detergent_2011. Robot is close bowl_2140. Robot is close measuring_cup_2012. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
putin_executor(bowl_2141, dishwasher_129)
Robot is inside dining_room_41. Robot is close bowl_2141. Robot is close dishwasher_129. Robot is close detergent_2011. Robot is close bowl_2140. Robot is close measuring_cup_2012. bowl_2141 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2142)
Find iron_2161. Robot is inside dining_room_41. Robot is close bowl_2142. Robot is close kitchen_counter_119. Robot is no longer close dishwasher_129.Robot is no longer close measuring_cup_2012.Robot is no longer close detergent_2011.Robot is no longer close bowl_2140.Robot is no longer close bowl_2141.
##############################
From agent.py
grab_executor(bowl_2142)
Robot is inside dining_room_41. Robot is close bowl_2142. Robot is close kitchen_counter_119. Grabbing bowl_2142 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot is inside dining_room_41. Robot is close bowl_2142. Robot is close dishwasher_129. Robot is close measuring_cup_2012. Robot is close detergent_2011. Robot is close bowl_2140. Robot is close bowl_2141. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
putin_executor(bowl_2142, dishwasher_129)
Robot is inside dining_room_41. Robot is close bowl_2142. Robot is close dishwasher_129. Robot is close measuring_cup_2012. Robot is close detergent_2011. Robot is close bowl_2140. Robot is close bowl_2141. bowl_2142 released by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot is inside dining_room_41. Robot is close plate_2152. Robot is close kitchen_counter_119. Robot is no longer close dishwasher_129.Robot is no longer close measuring_cup_2012.Robot is no longer close detergent_2011.Robot is no longer close bowl_2140.Robot is no longer close bowl_2141.Robot is no longer close bowl_2142.
##############################
From agent.py
grab_executor(plate_2152)
Robot is inside dining_room_41. Robot is close plate_2152. Robot is close kitchen_counter_119. Grabbing plate_2152 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_129)
Robot is inside dining_room_41. Robot is close plate_2152. Robot is close dishwasher_129. Robot is close measuring_cup_2012. Robot is close detergent_2011. Robot is close bowl_2140. Robot is close bowl_2141. Robot is close bowl_2142. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
putin_executor(plate_2152, dishwasher_129)
Robot is inside dining_room_41. Robot is close plate_2152. Robot is close dishwasher_129. Robot is close measuring_cup_2012. Robot is close detergent_2011. Robot is close bowl_2140. Robot is close bowl_2141. Robot is close bowl_2142. plate_2152 released by right hand. 
##############################
From agent.py
close_executor(dishwasher_129)
Robot is inside dining_room_41. Robot is close plate_2152. Robot is close dishwasher_129. Robot is close measuring_cup_2012. Robot is close detergent_2011. Robot is close bowl_2140. Robot is close bowl_2141. Robot is close bowl_2142. 
##############################
From agent.py
switchon_executor(dishwasher_129)
Robot is inside dining_room_41. Robot is close plate_2152. Robot is close dishwasher_129. Robot is close measuring_cup_2012. Robot is close detergent_2011. Robot is close bowl_2140. Robot is close bowl_2141. Robot is close bowl_2142. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                wash_forks_by_hand(fork)
        # Wash all dirty forks by hand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior wash_forks_by_hand(fork: item):
    body:
        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                wash_forks_by_hand(fork)
        # Wash each dirty fork by hand
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2155_around_sink_19(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

behavior find_pot_2040_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior wash_fork_by_hand(fork: item):
    body:
        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                wash_fork_by_hand(fork)
                # Wash each dirty fork by hand
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_cutting_board_2123(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(wooden_spoon,cutting_board_instance)
        else:
            exp(wooden_spoon,cutting_board_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cutting_board_instance]=True
        close[cutting_board_instance,wooden_spoon]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                wash_forks_by_hand(fork)
        # Wash each dirty fork by hand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_fork_in_sink(fork: item):
    # Function to check if a fork is in the sink
    symbol fork_in_sink=exists sink: item : is_sink(sink) and inside(fork, sink)
    return fork_in_sink

behavior clean_fork(fork: item):
    body:
        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and is_fork_in_sink(fork):
                clean_fork(fork)
        # Wash each fork that is identified and in the sink
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                wash_forks_by_hand(fork)
        # For each fork, if it is dirty, wash it by hand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_fork_dirty(fork:item):
    # Function to check if a fork is dirty
    return dirty(fork)

behavior observe_dirty_forks(fork:item):
    body:
        observe(fork, "Check for dirty forks")

behavior wash_fork(fork:item):
    body:
        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and is_fork_dirty(fork):
                observe_dirty_forks(fork)
                wash_fork(fork)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior wash_forks_by_hand(fork:item):
    body:
        wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_forks_by_hand(fork)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_forks_by_hand(fork:item):
    body:
        wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_forks_by_hand(fork)

##############################
From agent.py-> find a plan in act()
walk_executor(fork_2150)wash_executor(fork_2150)walk_executor(fork_2151)wash_executor(fork_2151)
##############################
From agent.py
walk_executor(fork_2150)
Robot is inside dining_room_41. Robot is close fork_2150. Robot is close kitchen_counter_119. Robot is no longer close dishwasher_129.Robot is no longer close plate_2152.Robot is no longer close measuring_cup_2012.Robot is no longer close detergent_2011.Robot is no longer close bowl_2140.Robot is no longer close bowl_2141.Robot is no longer close bowl_2142.
##############################
From agent.py
wash_executor(fork_2150)
Robot is inside dining_room_41. Robot is close fork_2150. Robot is close kitchen_counter_119. 
##############################
From agent.py
walk_executor(fork_2151)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close fork_2151. Robot is no longer close fork_2150.
##############################
From agent.py
wash_executor(fork_2151)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close fork_2151. 
##############################
From evaluation.py
cdl_dataset/dataset/Wash_dishes_with_dishwasher/g3.txt
Checking k1
missed actions: 
missed action num: 0
##############################
