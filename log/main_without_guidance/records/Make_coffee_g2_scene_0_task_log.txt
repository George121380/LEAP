From agent.py
Reset goals: The sub-goals are: 
['1. Make a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior make_coffee(coffee_maker: item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

        achieve has_water(coffee_maker)
        # Ensure there is water in the coffee maker

        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        make_coffee(coffee_maker)
        # Make a cup of coffee using the coffee maker
#goal_representation_end

##############################
From agent.py->reset_goal
behavior make_coffee(coffee_maker: item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

        achieve has_water(coffee_maker)
        # Ensure there is water in the coffee maker

        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        make_coffee(coffee_maker)
        # Make a cup of coffee using the coffee maker
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(faucet_232)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close faucet_232. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
switchon_executor(faucet_232)
Find drawing_174. Robot is inside dining_room_201. Robot is close faucet_232. Robot is close kitchen_counter_230. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot is inside dining_room_201. Robot is close faucet_232. Robot is close kitchen_counter_230. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close coffe_maker_290. Robot is no longer close faucet_232.
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close coffe_maker_290. 
##############################
From agent.py
Human Instruction: The coffee maker needs to be filled with water. Ensure the coffee maker is plugged in to complete making a cup of coffee.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

def has_water(coffee_maker:item):
    # Determine whether this coffee maker has water inside it
    symbol has_water=exists something:item: is_coffe_maker(something) and has_water(something) and something==coffee_maker
    return has_water

behavior prepare_coffee(coffee_maker:item):
    body:
        assert plugged(coffee_maker) # Ensure the coffee maker is plugged in before using it
        achieve has_water(coffee_maker) 

        achieve is_on(coffee_maker) # Turn on the coffee maker to start brewing

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        
        # Ensure the coffee maker is visited
        if not visited(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged in and has water")
        
        prepare_coffee(coffee_maker) # Prepare a cup of coffee using the coffee maker

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def has_water(coffee_maker:item):
    # Determine whether this coffee maker has water inside it
    symbol has_water=exists something:item: is_coffe_maker(something) and has_water(something) and something==coffee_maker
    return has_water

behavior prepare_coffee(coffee_maker:item):
    body:
        assert plugged(coffee_maker) # Ensure the coffee maker is plugged in before using it
        achieve has_water(coffee_maker) 

        achieve is_on(coffee_maker) # Turn on the coffee maker to start brewing

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        
        # Ensure the coffee maker is visited
        if not visited(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged in and has water")
        
        prepare_coffee(coffee_maker) # Prepare a cup of coffee using the coffee maker

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Check if the coffee maker is plugged in and has water)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close coffe_maker_290. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close coffe_maker_290. 
##############################
From agent.py
obs(coffe_maker_290, Check if the coffee maker is plugged in and has water)
Get this information:  coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is OPEN. coffe_maker_290 is CLEAN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OFF.
##############################
From agent.py
close_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close coffe_maker_290. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close coffe_maker_290. 
##############################
From agent.py
Human Instruction: You need to ensure that water is added to the coffee maker. The observation did not confirm that the coffee maker has water; it only confirmed that the coffee maker is plugged in. Fill the coffee maker with water to complete the task.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Switch on coffe_maker_290.
Action 6: Switch off coffe_maker_290.
Action 7: Open coffe_maker_290.
Action 8: Observe around coffe_maker_290 with the question of Check if the coffee maker is plugged in and has water.
Action 9: Close coffe_maker_290.
Action 10: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        achieve open(coffee_maker)
        # Open the coffee maker to add water

        achieve close_char(char, faucet)
        # Move close to the faucet

        achieve_once inhand(faucet)
        # Temporarily hold the faucet to fill the water

        achieve has_water(coffee_maker)
        # Ensure that the coffee maker has water inside

        achieve closed(coffee_maker)
        # Close the coffee maker after filling it with water

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select an item that is a coffee maker

        if not visited(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged in and has water")
        # Check if the coffee maker needs water

        if not has_water(coffee_maker):
            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet to provide water
            fill_coffee_maker_with_water(coffee_maker, faucet)

        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2022_around_fridge_289(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_inside_coffee_maker(coffee_maker: item):
    # Checks if the coffee maker has water inside
    return has_water(coffee_maker)

behavior fill_coffee_maker_with_water(coffee_maker:item, sink: item):
    body:
        achieve close_char(char, sink)
        achieve open(coffee_maker)
        achieve_once inhand(coffee_maker)
        achieve has_water(coffee_maker)
        achieve closed(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind sink: item where:
            is_sink(sink)

        if not plugged(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged in")
        
        if not has_water_inside_coffee_maker(coffee_maker):
            fill_coffee_maker_with_water(coffee_maker, sink)
        achieve is_on(coffee_maker)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Make a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior fill_coffee_maker_with_water(coffee_maker: item, faucet: item):
    body:
        if not has_water(coffee_maker):
            achieve close_char(char, faucet)
            # Ensure the character is close to the faucet

            achieve_once inhand(coffee_maker)
            # Temporarily hold the coffee maker for filling

            achieve open(coffee_maker)
            achieve is_on(faucet)
            water(coffee_maker)
            achieve is_off(faucet)
            achieve closed(coffee_maker)
            # Open the coffee maker, fill it with water, and then close it

behavior make_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to make coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet for water

        if not visited(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker has water and is plugged in")
        # Confirm the states of the coffee maker

        fill_coffee_maker_with_water(coffee_maker, faucet)
        make_coffee(coffee_maker)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker: item, faucet: item):
    body:
        if not has_water(coffee_maker):
            achieve close_char(char, faucet)
            # Ensure the character is close to the faucet

            achieve_once inhand(coffee_maker)
            # Temporarily hold the coffee maker for filling

            achieve open(coffee_maker)
            achieve is_on(faucet)
            achieve is_off(faucet)
            achieve closed(coffee_maker)
            # Open the coffee maker, fill it with water, and then close it

behavior make_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to make coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet for water

        if not visited(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker has water and is plugged in")
        # Confirm the states of the coffee maker

        fill_coffee_maker_with_water(coffee_maker, faucet)
        make_coffee(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_coffee_maker_with_water(coffee_maker: item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

def check_coffee_maker_states(coffee_maker: item):
    # Function to check if the coffee maker is on and has water
    symbol state_ready = is_on(coffee_maker) and has_water(coffee_maker)
    return state_ready

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker instance

        if not visited(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged in and has water")
        # Observe the coffee maker to ensure it is plugged in and has water

        if not has_water(coffee_maker):
            fill_coffee_maker_with_water(coffee_maker)
        
        if not is_on(coffee_maker):
            achieve is_on(coffee_maker)
        # Turn on the coffee maker

        assert check_coffee_maker_states(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Brew a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_coffee_maker(coffee_maker: item):
    # Function to check if the coffee maker has water inside
    symbol has_water=exists o: item : is_coffe_maker(o) and has_water(o)
    return has_water

behavior brew_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker) # Turn on the coffee maker
  
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if not has_water_in_coffee_maker(coffee_maker):
            observe(coffee_maker, "Check if it has water")
            # Observe to see if the coffee maker has water   
  
            if not has_water(coffee_maker): 
                achieve has_water(coffee_maker) 
            # If it doesnt have water, ensure it is filled
  
        if has_water_in_coffee_maker(coffee_maker):
            brew_coffee(coffee_maker) 
            # Brew coffee if the coffee maker has water

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_oil_2079_around_oil_2079(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2079
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def has_water(cr: item):
    # Check if the coffee maker has water
    symbol water_check=exists water: item : is_faucet(water) and has_water(water) and close(water, cr)
    return water_check

behavior fill_with_water(cr: item):
    body:
        assert has_faucet(cr)
        achieve has_water(cr)

behavior brew_coffee(cr: item):
    body:
        achieve is_on(cr)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if not visited(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged in and has water")
        # Observe the coffee maker for water

        if not has_water(coffee_maker):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, coffee_maker)
            achieve_once is_on(faucet)
            fill_with_water(coffee_maker)
            achieve_once is_off(faucet)

        brew_coffee(coffee_maker)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function has_faucet not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_snack_2038_around_cupboard_229(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_snack,cupboard_instance)
        else:
            exp(food_snack,cupboard_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,cupboard_instance]=True
        close[cupboard_instance,food_snack]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
 
def has_water(cr: item):
    # Check if the coffee maker has water
    symbol water_check=exists water: item : is_faucet(water) and has_water(water) and close(water, cr)
    return water_check

behavior fill_with_water(cr: item):
    body:
        assert is_faucet(cr)
        achieve has_water(cr)

behavior brew_coffee(cr: item):
    body:
        achieve is_on(cr)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if not visited(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged in and has water")
        # Observe the coffee maker for water

        if not has_water(coffee_maker):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, coffee_maker)
            achieve_once is_on(faucet)
            fill_with_water(coffee_maker)
            achieve_once is_off(faucet)

        brew_coffee(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Make a cup of coffee using the coffee maker.  ', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_ready(coffee_maker:item):
    # Function to check if the coffee maker is plugged in and has water
    symbol ready= plugged(coffee_maker) and has_water(coffee_maker)
    return ready

behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        if not has_water(coffee_maker):
            achieve has_water(coffee_maker)
            # Ensure the coffee maker has water

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Start the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        
        if not visited(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged in and has water")
            
        fill_coffee_maker_with_water(coffee_maker)
        
        if is_coffee_maker_ready(coffee_maker):
            start_coffee_maker(coffee_maker) 
            # Start making coffee in the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_snack_2038_around_cupboard_229(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_snack,cupboard_instance)
        else:
            exp(food_snack,cupboard_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,cupboard_instance]=True
        close[cupboard_instance,food_snack]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_ready(coffee_maker: item):
    # Check if the coffee maker is ready by ensuring it is plugged in and has water
    symbol ready = plugged(coffee_maker) and has_water(coffee_maker)
    return ready

behavior fill_coffee_maker_with_water(coffee_maker: item, faucet: item):
    body:
        achieve open(coffee_maker) 
        # Open coffee maker for water filling
        
        if not has_water(coffee_maker):
            achieve_once close_char(char, faucet)
            # Move closer to the faucet
            
            achieve_once is_on(faucet)
            # Turn on the faucet
            
            achieve has_water(coffee_maker)
            # Fill the coffee maker with water
            
            achieve_once is_off(faucet)
            # Turn off the faucet
            
        achieve closed(coffee_maker)
        # Close the coffee maker after filling

behavior make_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling water

        if not visited(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged in and has water")
        # Check if the coffee maker is ready

        if not is_coffee_maker_ready(coffee_maker):
            fill_coffee_maker_with_water(coffee_maker, faucet)
            # Fill with water if not ready

        make_coffee(coffee_maker)
        # Make coffee if ready

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Make a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior add_water_to_coffee_maker(coffee_maker: item):
    body:
        if not has_water(coffee_maker):
            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet to fill the coffee maker with water
            achieve_once is_on(faucet)
            achieve has_water(coffee_maker)
            achieve_once is_off(faucet)

behavior make_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker starts making coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if not plugged(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged into power")
        
        if not has_water(coffee_maker):
            add_water_to_coffee_maker(coffee_maker)
        # Ensure water is added to the coffee maker

        make_coffee(coffee_maker)
        # Start making coffee
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2022_around_fridge_289(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if not visited(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged in and has water")
        # Observe the coffee maker to check its state regarding water and plug

        if not has_water(coffee_maker):
            bind sink: item where:
                is_sink(sink)
            # Select a sink

            water(coffee_maker)
            # Fill the coffee maker with water

        achieve has_water(coffee_maker)
        # Ensure that the coffee maker has water

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2022_around_fridge_289(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if not visited(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged in and has water")
        # Observe the coffee maker to check its state regarding water and plug

        if not has_water(coffee_maker):
            bind sink: item where:
                is_sink(sink)
            # Select a sink

            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet

            faucet(coffee_maker)
            # Fill the coffee maker using a faucet

        achieve has_water(coffee_maker)
        # Ensure that the coffee maker has water

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function faucet not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2022_around_fridge_289(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_cake_2013_around_fridge_289(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cake,fridge_instance)
        else:
            exp(food_cake,fridge_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,fridge_instance]=True
        close[fridge_instance,food_cake]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if not visited(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged in and has water")
        # Observe the coffee maker to check its state regarding water and plug

        if not has_water(coffee_maker):
            bind sink: item where:
                is_sink(sink)
            # Select a sink

            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet

            is_faucet(coffee_maker)
            # Fill the coffee maker using a faucet

        achieve has_water(coffee_maker)
        # Ensure that the coffee maker has water

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
