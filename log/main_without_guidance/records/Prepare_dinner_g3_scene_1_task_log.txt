From agent.py
Reset goals: The sub-goals are: 
['Cook the bacon.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bacon_2082_around_kitchen_counter_122(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bacon,kitchen_counter_instance)
        else:
            exp(food_bacon,kitchen_counter_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bacon]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_pillow_103_around_bed_197(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
bind bacon: item where:
    is_food_bacon(bacon)
# Select the item that is bacon

bind fryingpan: item where:
    is_fryingpan(fryingpan)
# Select the item that is a frying pan

bind stove: item where:
    is_stove(stove)
# Select the item that is a stove
    
behavior cook_bacon(bacon: item, fryingpan: item, stove: item):
    body:
        achieve on(bacon, fryingpan)
        # Place the bacon in the frying pan

        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

        achieve is_on(stove)
        # Turn on the stove to cook the bacon

behavior __goal__():
    body:
        cook_bacon(bacon, fryingpan, stove)
        # Execute the cook_bacon behavior to complete the task

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BIND', 'bind') at line 5538, column 1.
Expected one of: 
	* DEF
	* IMPORT
	* DOMAIN
	* FEATURE
	* OBJECTS
	* INIT
	* BEHAVIOR
	* GOAL
	* UNDIRECTED_GENERATOR
	* TYPEDEF
	* GENERATOR
	* CONTROLLER
	* $END
	* _PRAGMA_KEYWORD
	* _NEWLINE
	* INCLUDE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n \n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bacon_2082_around_kitchen_counter_122(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bacon,kitchen_counter_instance)
        else:
            exp(food_bacon,kitchen_counter_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bacon]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_pillow_106_around_bed_197(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        # Select the item that is bacon

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the item that is a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the item that is a stove

        cook_bacon(bacon, fryingpan, stove)
        # Execute the cook_bacon behavior to complete the task

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function cook_bacon not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bacon_2082_around_kitchen_counter_122(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bacon,kitchen_counter_instance)
        else:
            exp(food_bacon,kitchen_counter_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bacon]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_pillow_207_around_bed_197(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#goal_representation

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        # Select the item that is bacon

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the item that is a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the item that is a stove

        # Replacing cook_bacon with an existing category
        bind x: item
        is_food_food(x)
        # Execute the is_food_food behavior to complete the task

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_106_around_bed_197(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_food_bacon_2082_around_kitchen_counter_122(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bacon,kitchen_counter_instance)
        else:
            exp(food_bacon,kitchen_counter_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bacon]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_stove_inside(fryingpan:item):
    # Check if a frying pan is on the stove
    symbol has_stove=exists stove: item : is_stove(stove) and on(fryingpan, stove)
    return has_stove

behavior cook_bacon_on_stove(fryingpan:item, stove:item):
    body:
        achieve is_on(stove) 
        # Turn on the stove
        achieve on(fryingpan, stove) 
        # Place frying pan on the stove
        achieve is_cut(bacon)
        # Ensure bacon is cut
        # The cooking process of bacon will be handled by the algorithm, no need for additional statements here

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind a frying pan

        if not has_stove_inside(fryingpan):
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Check the relationship between fryingpan and stove")
        # If the frying pan is not already on the stove, check the relationship

        bind stove: item where:
            is_stove(stove)

        bind bacon: item where:
            is_food_bacon(bacon) and not dirty(bacon)
        # Ensure the selected bacon is clean and suitable for cooking

        cook_bacon_on_stove(fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: bacon; available variables: [Variable<fryingpan: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pillow_208_around_bed_197(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_food_bacon_2082_around_kitchen_counter_122(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bacon,kitchen_counter_instance)
        else:
            exp(food_bacon,kitchen_counter_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bacon]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#goal_representation
 
def has_stove_inside(fryingpan:item):
    # Check if a frying pan is on the stove
    symbol has_stove=exists stove: item : is_stove(stove) and on(fryingpan, stove)
    return has_stove

behavior cook_bacon_on_stove(fryingpan:item, stove:item, bacon:item):
    body:
        achieve is_on(stove) 
        # Turn on the stove
        achieve on(fryingpan, stove) 
        # Place frying pan on the stove
        achieve is_cut(bacon)
        # Ensure bacon is cut
        # The cooking process of bacon will be handled by the algorithm, no need for additional statements here

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind a frying pan

        if not has_stove_inside(fryingpan):
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Check the relationship between fryingpan and stove")
        # If the frying pan is not already on the stove, check the relationship

        bind stove: item where:
            is_stove(stove)

        bind bacon: item where:
            is_food_bacon(bacon) and not dirty(bacon)
        # Ensure the selected bacon is clean and suitable for cooking

        cook_bacon_on_stove(fryingpan, stove, bacon)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_cut not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bacon_2082_around_kitchen_counter_122(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bacon,kitchen_counter_instance)
        else:
            exp(food_bacon,kitchen_counter_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bacon]=True
    

behavior find_pillow_103_around_bed_197(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
def has_stove_inside(fryingpan:item):
    # Check if a frying pan is on the stove
    symbol has_stove=exists stove: item : is_stove(stove) and on(fryingpan, stove)
    return has_stove

behavior cook_bacon_on_stove(fryingpan:item, stove:item, bacon:item):
    body:
        achieve is_on(stove) 
        # Turn on the stove
        achieve on(fryingpan, stove) 
        # Place frying pan on the stove
        achieve is_cutting_board(bacon)
        # Ensure bacon is cut
        # The cooking process of bacon will be handled by the algorithm, no need for additional statements here

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind a frying pan

        if not has_stove_inside(fryingpan):
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Check the relationship between fryingpan and stove")
        # If the frying pan is not already on the stove, check the relationship

        bind stove: item where:
            is_stove(stove)

        bind bacon: item where:
            is_food_bacon(bacon) and not dirty(bacon)
        # Ensure the selected bacon is clean and suitable for cooking

        cook_bacon_on_stove(fryingpan, stove, bacon)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Cook the bacon.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bacon_2082_around_kitchen_counter_122(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bacon,kitchen_counter_instance)
        else:
            exp(food_bacon,kitchen_counter_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bacon]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_pillow_108_around_bed_197(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
def on_stove(pan:item):
    # Check if the pan is on the stove
    symbol on_stove=exists stove: item : is_stove(stove) and on(pan, stove)
    return on_stove

behavior heat_pan(pan:item, stove:item):
    body:
        achieve on(pan, stove)
        # Place the pan on the stove

        achieve is_on(stove)
        # Ensure the stove is turned on

behavior cook_bacon(bacon:item, pan:item):
    body:
        achieve inside(bacon, pan)
        # Place the bacon inside the pan

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon) 
        # Select the bacon

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_pan(pan, stove)
        cook_bacon(bacon, pan)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def on_stove(pan:item):
    # Check if the pan is on the stove
    symbol on_stove=exists stove: item : is_stove(stove) and on(pan, stove)
    return on_stove

behavior heat_pan(pan:item, stove:item):
    body:
        achieve on(pan, stove)
        # Place the pan on the stove

        achieve is_on(stove)
        # Ensure the stove is turned on

behavior cook_bacon(bacon:item, pan:item):
    body:
        achieve inside(bacon, pan)
        # Place the bacon inside the pan

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon) 
        # Select the bacon

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_pan(pan, stove)
        cook_bacon(bacon, pan)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(kitchen_counter_122)exp(food_bacon_2082, kitchen_counter_122)walk_executor(food_bacon_2082)grab_executor(food_bacon_2082)walk_executor(fryingpan_2154)putin_executor(food_bacon_2082, fryingpan_2154)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Find tray_128. Find spectacles_2153. Find fryingpan_2154. Find pot_78. Robot is inside dining_room_41. Robot is close kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(kitchen_counter_122)exp(food_bacon_2082, kitchen_counter_122)walk_executor(food_bacon_2082)grab_executor(food_bacon_2082)walk_executor(fryingpan_2154)putin_executor(food_bacon_2082, fryingpan_2154)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is close fryingpan_2154. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is close fryingpan_2154. Grabbing fryingpan_2154 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Find pot_2138. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find fork_2151. Robot is inside dining_room_41. Robot is close fryingpan_2154. Robot is close kitchen_counter_119. Robot is close stove_2135. Robot is no longer close kitchen_counter_122.
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot is inside dining_room_41. Robot is close fryingpan_2154. Robot is close kitchen_counter_119. Robot is close stove_2135. fryingpan_2154 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot is inside dining_room_41. Robot is close fryingpan_2154. Robot is close kitchen_counter_119. Robot is close stove_2135. 
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is no longer close fryingpan_2154.Robot is no longer close kitchen_counter_119.Robot is no longer close stove_2135.
##############################
From agent.py
exp(food_bacon_2082, kitchen_counter_122)
Failed to find food_bacon_2082 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bacon_2082, fridge_126)walk_executor(food_bacon_2082)grab_executor(food_bacon_2082)walk_executor(fryingpan_2154)putin_executor(food_bacon_2082, fryingpan_2154)
##############################
From agent.py
walk_executor(fridge_126)
Find food_onion_2048. Find food_food_2046. Find food_food_2073. Find food_steak_2080. Find food_apple_2081. Find food_bacon_2082. Find food_banana_2083. Find food_cake_2085. Find food_carrot_2086. Find food_cereal_2087. Find food_cheese_2088. Find food_chicken_2089. Find food_dessert_2090. Find food_donut_2091. Find food_egg_2092. Find food_fish_2093. Find food_food_2094. Find food_fruit_2095. Find food_hamburger_2096. Find food_ice_cream_2097. Find food_jam_2098. Find food_kiwi_2099. Find food_lemon_2100. Find food_noodles_2101. Find food_oatmeal_2102. Find food_orange_2103. Find food_onion_2104. Find food_peanut_butter_2105. Find food_pizza_2106. Find food_potato_2107. Find food_rice_2108. Find food_salt_2109. Find food_snack_2110. Find food_sugar_2111. Find food_turkey_2112. Find food_vegetable_2113. Find food_food_2001. Find sauce_2148. Find basket_for_clothes_2078. Find food_food_1000. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. Robot is no longer close kitchen_counter_122.
##############################
From agent.py
switchoff_executor(fridge_126)
Find keyboard_211. Find mouse_213. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
open_executor(fridge_126)
Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
exp(food_bacon_2082, fridge_126)
Find food_bacon_2082. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_bacon_2082)walk_executor(fryingpan_2154)putin_executor(food_bacon_2082, fryingpan_2154)
##############################
From agent.py
grab_executor(food_bacon_2082)
Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. Grabbing food_bacon_2082 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close food_bacon_2082. Robot is close fryingpan_2154. Robot is close stove_2135. Robot is no longer close food_onion_2048.Robot is no longer close food_food_2046.Robot is no longer close food_food_2073.Robot is no longer close food_steak_2080.Robot is no longer close food_apple_2081.Robot is no longer close food_banana_2083.Robot is no longer close food_cake_2085.Robot is no longer close food_carrot_2086.Robot is no longer close food_cereal_2087.Robot is no longer close food_cheese_2088.Robot is no longer close food_chicken_2089.Robot is no longer close food_dessert_2090.Robot is no longer close food_donut_2091.Robot is no longer close food_egg_2092.Robot is no longer close food_fish_2093.Robot is no longer close food_food_2094.Robot is no longer close food_fruit_2095.Robot is no longer close food_hamburger_2096.Robot is no longer close food_ice_cream_2097.Robot is no longer close food_jam_2098.Robot is no longer close food_kiwi_2099.Robot is no longer close food_lemon_2100.Robot is no longer close food_noodles_2101.Robot is no longer close food_oatmeal_2102.Robot is no longer close food_orange_2103.Robot is no longer close food_onion_2104.Robot is no longer close food_peanut_butter_2105.Robot is no longer close food_pizza_2106.Robot is no longer close food_potato_2107.Robot is no longer close food_rice_2108.Robot is no longer close food_salt_2109.Robot is no longer close food_snack_2110.Robot is no longer close food_sugar_2111.Robot is no longer close food_turkey_2112.Robot is no longer close food_vegetable_2113.Robot is no longer close food_food_2001.Robot is no longer close floor_44.Robot is no longer close sauce_2148.Robot is no longer close fridge_126.
##############################
From agent.py
putin_executor(food_bacon_2082, fryingpan_2154)
Robot is inside dining_room_41. Robot is close food_bacon_2082. Robot is close fryingpan_2154. Robot is close stove_2135. food_bacon_2082 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g3.txt
Checking k1
missed actions: walk_executor(oil_2149);grab_executor(oil_2149);walk_executor(fryingpan_2154);putin_executor(oil_2149, fryingpan_2154);
missed action num: 4
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g3.txt
Checking k1
missed actions: walk_executor(oil_2149);grab_executor(oil_2149);walk_executor(fryingpan_2154);putin_executor(oil_2149, fryingpan_2154);
missed action num: 4
##############################
