From agent.py
Reset goals: The sub-goals are: 
['Use a pot to boil some water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_239_around_bed_264(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior place_pot_on_stove_and_turn_on(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn the stove on to start boiling the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select an item that is a pot

        bind stove: item where:
            is_stove(stove)
        # Select an item that is a stove

        if not has_water(pot):
            observe(pot, "Check if the pot is filled with water")
        # Ensure the pot is filled with water
        
        place_pot_on_stove_and_turn_on(pot, stove)
        # Execute behavior to place the pot with water on the stove and turn it on
#goal_representation_end

##############################
From agent.py->reset_goal
behavior place_pot_on_stove_and_turn_on(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn the stove on to start boiling the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select an item that is a pot

        bind stove: item where:
            is_stove(stove)
        # Select an item that is a stove

        if not has_water(pot):
            observe(pot, "Check if the pot is filled with water")
        # Ensure the pot is filled with water
        
        place_pot_on_stove_and_turn_on(pot, stove)
        # Execute behavior to place the pot with water on the stove and turn it on
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(pot_2093, kitchen_counter_132)walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, Check if the pot is filled with water)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Find pot_54. Find tray_142. Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(pot_2093, kitchen_counter_132)
Failed to find pot_2093 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)exp(pot_2093, pot_54)walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, Check if the pot is filled with water)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Find food_butter_2018. Find dough_2021. Find food_onion_2026. Robot is inside dining_room_1. Robot is close oven_141. Robot is close pot_54. Robot is no longer close kitchen_counter_132.
##############################
From agent.py
open_executor(pot_54)
Robot is inside dining_room_1. Robot is close oven_141. Robot is close pot_54. 
##############################
From agent.py
exp(pot_2093, pot_54)
Failed to find pot_2093 around pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(pot_2093, cupboard_130)walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, Check if the pot is filled with water)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer close oven_141.Robot is no longer close pot_54.
##############################
From agent.py
exp(pot_2093, cupboard_130)
Failed to find pot_2093 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(pot_2093, cupboard_131)walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, Check if the pot is filled with water)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. Robot is no longer close blender_2032.Robot is no longer close tea_bag_2017.Robot is no longer close cupboard_130.
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. 
##############################
From agent.py
exp(pot_2093, cupboard_131)
Failed to find pot_2093 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(pot_2093, kitchen_counter_129)walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, Check if the pot is filled with water)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Find oil_2102. Find pot_2093. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is no longer close cupboard_131.
##############################
From agent.py
exp(pot_2093, kitchen_counter_129)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, Check if the pot is filled with water)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. 
##############################
From agent.py
obs(pot_2093, Check if the pot is filled with water)
Get this information:  pot_2093 is inside dining_room_1. pot_2093 is close to kitchen_counter_129. pot_2093 is close to character_219. pot_2093 is on kitchen_counter_129. pot_2093 is OPEN.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is close stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is close stove_2090. 
##############################
From agent.py
Human Instruction: You need to fill the pot with water before attempting to boil it. Check if the pot is filled and fill it with water if necessary, then proceed to boil.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for pot_2093 around kitchen_counter_132.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: look for pot_2093 around pot_54.
Action 6: Walk to cupboard_130.
Action 7: look for pot_2093 around cupboard_130.
Action 8: Walk to cupboard_131.
Action 9: Open cupboard_131.
Action 10: look for pot_2093 around cupboard_131.
Action 11: Walk to kitchen_counter_129.
Action 12: look for pot_2093 around kitchen_counter_129.
Action 13: Walk to pot_2093.
Action 14: Open pot_2093.
Action 15: Observe around pot_2093 with the question of Check if the pot is filled with water.
Action 16: Grab pot_2093.
Action 17: Walk to stove_2090.
Action 18: Put pot_2093 on stove_2090.
Action 19: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_368_around_bed_264(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_food_cake_2046_around_freezer_140(food_cake:item):
    goal: not unknown(food_cake)
    body:
        assert is_food_cake(food_cake)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_cake,freezer_instance)
        else:
            exp(food_cake,freezer_instance)
    eff:
        unknown[food_cake]=False
        close[food_cake,freezer_instance]=True
        close[freezer_instance,food_cake]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_filled_with_water(pot: item):
    # Determine if the pot is filled with water
    return has_water(pot)

behavior fill_pot_with_water(pot: item):
    body:
        if not is_pot_filled_with_water(pot):
            # Check the pot to see if it needs water
            observe(pot, "Check if the pot is filled with water")
            water(pot)
            # Fill the pot with water if it is not filled

behavior boil_water(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn the stove on to begin boiling water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot identified with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove identified with ID 2090

        fill_pot_with_water(pot)
        boil_water(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_pillow_370_around_bed_264(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#goal_representation
 
def is_pot_filled_with_water(pot: item):
    # Determine if the pot is filled with water
    return has_water(pot)

behavior fill_pot_with_water(pot: item):
    body:
        if not is_pot_filled_with_water(pot):
            # Check the pot to see if it needs water
            observe(pot, "Check if the pot is filled with water")
            is_milk(pot)
            # Fill the pot with water if it is not filled

behavior boil_water(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn the stove on to begin boiling water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot identified with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove identified with ID 2090

        fill_pot_with_water(pot)
        boil_water(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Expr statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
