From agent.py
Reset goals: The sub-goals are: 
['1. Find the book.', '2. Put the book on the coffee table in the home office.', '3. Open the window in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_188(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table)
        # Select an item that is a coffee table

        bind home_office: item where:
            is_home_office(home_office)
        # Select an item that is a home office

        observe(home_office, "Check if the coffee table is inside the home office")
        # Observe to confirm if the coffee table is in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table
#goal_representation_end

##############################
From agent.py->reset_goal
behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table)
        # Select an item that is a coffee table

        bind home_office: item where:
            is_home_office(home_office)
        # Select an item that is a home office

        observe(home_office, "Check if the coffee table is inside the home office")
        # Observe to confirm if the coffee table is in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_188)open_executor(bookshelf_188)exp(book_2091, bookshelf_188)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check where the book is)walk_executor(home_office_161)obs(home_office_161, Check if the coffee table is inside the home office)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)
##############################
From agent.py
walk_executor(bookshelf_188)
Find drawing_196. Robot is inside home_office_161. Robot is close bookshelf_188. Robot is close floor_165. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
open_executor(bookshelf_188)
Find dvd_player_2000. Find clothes_underwear_2022. Find cat_2082. Find mouse_2112. Find cup_2006. Find laser_pointer_2025. Find drawing_238. Find keyboard_2110. Find pillow_195. Find vacuum_cleaner_2094. Find stereo_2007. Find mat_201. Find cd_2100. Find oil_2005. Find video_game_controller_2019. Robot is inside home_office_161. Robot is close bookshelf_188. Robot is close floor_165. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
exp(book_2091, bookshelf_188)
Failed to find book_2091 around bookshelf_188. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_260)open_executor(bookshelf_260)exp(book_2091, bookshelf_260)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check where the book is)walk_executor(home_office_161)obs(home_office_161, Check if the coffee table is inside the home office)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)
##############################
From agent.py
walk_executor(bookshelf_260)
Find mat_237. Find chair_263. Robot is inside bedroom_220. Robot is close floor_222. Robot is close bookshelf_260. Robot is close floor_221. Robot is close photoframe_246. Robot is no longer inside home_office_161.Robot is no longer close bookshelf_188.Robot is no longer close floor_165.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
open_executor(bookshelf_260)
Robot is inside bedroom_220. Robot is close floor_222. Robot is close bookshelf_260. Robot is close floor_221. Robot is close photoframe_246. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
exp(book_2091, bookshelf_260)
Failed to find book_2091 around bookshelf_260. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_372)open_executor(bookshelf_372)exp(book_2091, bookshelf_372)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check where the book is)walk_executor(home_office_161)obs(home_office_161, Check if the coffee table is inside the home office)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)
##############################
From agent.py
walk_executor(bookshelf_372)
Find drawing_389. Find stamp_2031. Robot is inside bedroom_327. Robot is close floor_331. Robot is close bookshelf_372. Robot is no longer inside bedroom_220.Robot is no longer close bookshelf_260.Robot is no longer close floor_221.Robot is no longer close floor_222.Robot is no longer close photoframe_246.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
open_executor(bookshelf_372)
Find towel_rack_298. Find drawing_296. Robot is inside bedroom_327. Robot is close floor_331. Robot is close bookshelf_372. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
exp(book_2091, bookshelf_372)
Failed to find book_2091 around bookshelf_372. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_189)open_executor(bookshelf_189)exp(book_2091, bookshelf_189)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check where the book is)walk_executor(home_office_161)obs(home_office_161, Check if the coffee table is inside the home office)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)
##############################
From agent.py
walk_executor(bookshelf_189)
Robot is inside home_office_161. Robot is close bookshelf_189. Robot is close floor_167. Robot is no longer inside bedroom_327.Robot is no longer close floor_331.Robot is no longer close bookshelf_372.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
open_executor(bookshelf_189)
Robot is inside home_office_161. Robot is close bookshelf_189. Robot is close floor_167. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
exp(book_2091, bookshelf_189)
Failed to find book_2091 around bookshelf_189. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check where the book is)walk_executor(home_office_161)obs(home_office_161, Check if the coffee table is inside the home office)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)
##############################
From agent.py
walk_executor(bookshelf_136)
Find book_2091. Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close floor_12. Robot is close floor_13. Robot is no longer inside home_office_161.Robot is no longer close bookshelf_189.Robot is no longer close floor_167.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)open_executor(book_2091)obs(book_2091, Check where the book is)walk_executor(home_office_161)obs(home_office_161, Check if the coffee table is inside the home office)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)
##############################
From agent.py
walk_executor(book_2091)
Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close book_2091. Robot is no longer close floor_12.Robot is no longer close floor_13.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 3
##############################
From agent.py
open_executor(book_2091)
Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close book_2091. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 3
##############################
From agent.py
obs(book_2091, Check where the book is)
Get this information:  book_2091 is inside dining_room_1. book_2091 is close to bookshelf_136. book_2091 is close to character_219. book_2091 is on bookshelf_136. book_2091 is OPEN.
##############################
From agent.py
walk_executor(home_office_161)
Robot is inside home_office_161. Robot is no longer inside dining_room_1.Robot is no longer close bookshelf_136.Robot is no longer close book_2091.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
obs(home_office_161, Check if the coffee table is inside the home office)
Get this information:  dvd_player_2000 is inside home_office_161. clothes_underwear_2022 is inside home_office_161. ceiling_175 is inside home_office_161. tvstand_186 is inside home_office_161. curtain_197 is inside home_office_161. television_216 is inside home_office_161. cat_2082 is inside home_office_161. floor_167 is inside home_office_161. bookshelf_189 is inside home_office_161. ceiling_178 is inside home_office_161. mouse_2112 is inside home_office_161. cup_2006 is inside home_office_161. wall_170 is inside home_office_161. laser_pointer_2025 is inside home_office_161. character_219 is inside home_office_161. window_181 is inside home_office_161. orchid_200 is inside home_office_161. wall_173 is inside home_office_161. floor_162 is inside home_office_161. couch_192 is inside home_office_161. floor_165 is inside home_office_161. walllamp_184 is inside home_office_161. keyboard_2110 is inside home_office_161. pillow_195 is inside home_office_161. floor_168 is inside home_office_161. wallshelf_187 is inside home_office_161. ceiling_176 is inside home_office_161. curtain_198 is inside home_office_161. light_217 is inside home_office_161. ceiling_179 is inside home_office_161. vacuum_cleaner_2094 is inside home_office_161. wallshelf_190 is inside home_office_161. stereo_2007 is inside home_office_161. wall_171 is inside home_office_161. doorjamb_182 is inside home_office_161. mat_201 is inside home_office_161. floor_163 is inside home_office_161. table_193 is inside home_office_161. ceilinglamp_185 is inside home_office_161. wall_174 is inside home_office_161. ceiling_177 is inside home_office_161. floor_166 is inside home_office_161. cd_2100 is inside home_office_161. drawing_196 is inside home_office_161. computer_2111 is inside home_office_161. powersocket_218 is inside home_office_161. wall_169 is inside home_office_161. doorjamb_37 is between home_office_161. curtain_199 is inside home_office_161. photoframe_210 is inside home_office_161. bookshelf_188 is inside home_office_161. wall_172 is inside home_office_161. oil_2005 is inside home_office_161. ceiling_180 is inside home_office_161. wallshelf_191 is inside home_office_161. floor_164 is inside home_office_161. video_game_controller_2019 is inside home_office_161. door_234 is between home_office_161. walllamp_183 is inside home_office_161. home_office_161 is CLEAN.
##############################
From agent.py
walk_executor(book_2091)
Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close book_2091. Robot is no longer inside home_office_161.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 3
##############################
From agent.py
grab_executor(book_2091)
Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close book_2091. Grabbing book_2091 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 2
##############################
From agent.py
walk_executor(table_123)
Find mat_114. Find shoes_2001. Find drawing_118. Find fork_2103. Find cup_2087. Find cup_2088. Find bowl_2095. Find mouse_2003. Find homework_2011. Find laptop_2015. Robot is inside dining_room_1. Robot is close book_2091. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close bookshelf_136.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 2
##############################
From agent.py
put_executor(book_2091, table_123)
Robot is inside dining_room_1. Robot is close book_2091. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. book_2091 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 3
##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_137(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table)
        # Select an item that is a coffee table

        bind home_office: item where:
            is_home_office(home_office)
        # Select an item that is a home office

        observe(home_office, "Check if the coffee table is inside the home office")
        # Observe to confirm if the coffee table is in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table)
        # Select an item that is a coffee table

        bind home_office: item where:
            is_home_office(home_office)
        # Select an item that is a home office

        observe(home_office, "Check if the coffee table is inside the home office")
        # Observe to confirm if the coffee table is in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table
##############################
From agent.py-> find a plan in act()
obs(book_2091, Check where the book is)walk_executor(home_office_161)obs(home_office_161, Check if the coffee table is inside the home office)
##############################
From agent.py
obs(book_2091, Check where the book is)
Get this information:  book_2091 is inside dining_room_1. book_2091 is close to character_219. book_2091 is close to table_123. book_2091 is on table_123. book_2091 is OPEN.
##############################
From agent.py
walk_executor(home_office_161)
Robot is inside home_office_161. Robot is no longer inside dining_room_1.Robot is no longer close table_123.Robot is no longer close floor_17.Robot is no longer close mat_114.Robot is no longer close book_2091.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
obs(home_office_161, Check if the coffee table is inside the home office)
Get this information:  dvd_player_2000 is inside home_office_161. clothes_underwear_2022 is inside home_office_161. ceiling_175 is inside home_office_161. tvstand_186 is inside home_office_161. curtain_197 is inside home_office_161. television_216 is inside home_office_161. cat_2082 is inside home_office_161. floor_167 is inside home_office_161. bookshelf_189 is inside home_office_161. ceiling_178 is inside home_office_161. mouse_2112 is inside home_office_161. cup_2006 is inside home_office_161. wall_170 is inside home_office_161. laser_pointer_2025 is inside home_office_161. character_219 is inside home_office_161. window_181 is inside home_office_161. orchid_200 is inside home_office_161. wall_173 is inside home_office_161. floor_162 is inside home_office_161. couch_192 is inside home_office_161. floor_165 is inside home_office_161. walllamp_184 is inside home_office_161. keyboard_2110 is inside home_office_161. pillow_195 is inside home_office_161. floor_168 is inside home_office_161. wallshelf_187 is inside home_office_161. ceiling_176 is inside home_office_161. curtain_198 is inside home_office_161. light_217 is inside home_office_161. ceiling_179 is inside home_office_161. vacuum_cleaner_2094 is inside home_office_161. wallshelf_190 is inside home_office_161. stereo_2007 is inside home_office_161. wall_171 is inside home_office_161. doorjamb_182 is inside home_office_161. mat_201 is inside home_office_161. floor_163 is inside home_office_161. table_193 is inside home_office_161. ceilinglamp_185 is inside home_office_161. wall_174 is inside home_office_161. ceiling_177 is inside home_office_161. floor_166 is inside home_office_161. cd_2100 is inside home_office_161. drawing_196 is inside home_office_161. computer_2111 is inside home_office_161. powersocket_218 is inside home_office_161. wall_169 is inside home_office_161. doorjamb_37 is between home_office_161. curtain_199 is inside home_office_161. photoframe_210 is inside home_office_161. bookshelf_188 is inside home_office_161. wall_172 is inside home_office_161. oil_2005 is inside home_office_161. ceiling_180 is inside home_office_161. wallshelf_191 is inside home_office_161. floor_164 is inside home_office_161. video_game_controller_2019 is inside home_office_161. door_234 is between home_office_161. walllamp_183 is inside home_office_161. home_office_161 is CLEAN.
##############################
From agent.py
Human Instruction: The robot needs to successfully place the book on the coffee table inside the home office. Currently, the book is placed on table_123 in the dining room, which does not satisfy the sub-task requirement. Retrieve the book_2091 from table_123 and place it on the coffee table in the home office.

The actions you have taken:
Action 1: Walk to bookshelf_188.
Action 2: Open bookshelf_188.
Action 3: look for book_2091 around bookshelf_188.
Action 4: Walk to bookshelf_260.
Action 5: Open bookshelf_260.
Action 6: look for book_2091 around bookshelf_260.
Action 7: Walk to bookshelf_372.
Action 8: Open bookshelf_372.
Action 9: look for book_2091 around bookshelf_372.
Action 10: Walk to bookshelf_189.
Action 11: Open bookshelf_189.
Action 12: look for book_2091 around bookshelf_189.
Action 13: Walk to bookshelf_136.
Action 14: look for book_2091 around bookshelf_136.
Action 15: Walk to book_2091.
Action 16: Open book_2091.
Action 17: Observe around book_2091 with the question of Check where the book is.
Action 18: Walk to home_office_161.
Action 19: Observe around home_office_161 with the question of Check if the coffee table is inside the home office.
Action 20: Walk to book_2091.
Action 21: Grab book_2091.
Action 22: Walk to table_123.
Action 23: Put book_2091 on table_123.
Action 24: Observe around book_2091 with the question of Check where the book is.
Action 25: Walk to home_office_161.
Action 26: Observe around home_office_161 with the question of Check if the coffee table is inside the home office.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_137(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table)
        # Select an item that is a coffee table

        bind home_office: item where:
            is_home_office(home_office)
        # Select an item that is a home office

        observe(home_office, "Check if the coffee table is inside the home office")
        # Observe to confirm if the coffee table is in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table)
        # Select an item that is a coffee table

        bind home_office: item where:
            is_home_office(home_office)
        # Select an item that is a home office

        observe(home_office, "Check if the coffee table is inside the home office")
        # Observe to confirm if the coffee table is in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)obs(book_2091, Check where the book is)walk_executor(home_office_161)obs(home_office_161, Check if the coffee table is inside the home office)
##############################
From agent.py
walk_executor(book_2091)
Robot is inside dining_room_1. Robot is close table_123. Robot is close book_2091. Robot is no longer inside home_office_161.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 3
##############################
From agent.py
obs(book_2091, Check where the book is)
Get this information:  book_2091 is inside dining_room_1. book_2091 is close to table_123. book_2091 is close to character_219. book_2091 is on table_123. book_2091 is OPEN.
##############################
From agent.py
walk_executor(home_office_161)
Robot is inside home_office_161. Robot is no longer inside dining_room_1.Robot is no longer close table_123.Robot is no longer close book_2091.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
obs(home_office_161, Check if the coffee table is inside the home office)
Get this information:  dvd_player_2000 is inside home_office_161. clothes_underwear_2022 is inside home_office_161. ceiling_175 is inside home_office_161. tvstand_186 is inside home_office_161. curtain_197 is inside home_office_161. television_216 is inside home_office_161. cat_2082 is inside home_office_161. floor_167 is inside home_office_161. bookshelf_189 is inside home_office_161. ceiling_178 is inside home_office_161. mouse_2112 is inside home_office_161. cup_2006 is inside home_office_161. wall_170 is inside home_office_161. laser_pointer_2025 is inside home_office_161. character_219 is inside home_office_161. window_181 is inside home_office_161. orchid_200 is inside home_office_161. wall_173 is inside home_office_161. floor_162 is inside home_office_161. couch_192 is inside home_office_161. floor_165 is inside home_office_161. walllamp_184 is inside home_office_161. keyboard_2110 is inside home_office_161. pillow_195 is inside home_office_161. floor_168 is inside home_office_161. wallshelf_187 is inside home_office_161. ceiling_176 is inside home_office_161. curtain_198 is inside home_office_161. light_217 is inside home_office_161. ceiling_179 is inside home_office_161. vacuum_cleaner_2094 is inside home_office_161. wallshelf_190 is inside home_office_161. stereo_2007 is inside home_office_161. wall_171 is inside home_office_161. doorjamb_182 is inside home_office_161. mat_201 is inside home_office_161. floor_163 is inside home_office_161. table_193 is inside home_office_161. ceilinglamp_185 is inside home_office_161. wall_174 is inside home_office_161. ceiling_177 is inside home_office_161. floor_166 is inside home_office_161. cd_2100 is inside home_office_161. drawing_196 is inside home_office_161. computer_2111 is inside home_office_161. powersocket_218 is inside home_office_161. wall_169 is inside home_office_161. doorjamb_37 is between home_office_161. curtain_199 is inside home_office_161. photoframe_210 is inside home_office_161. bookshelf_188 is inside home_office_161. wall_172 is inside home_office_161. oil_2005 is inside home_office_161. ceiling_180 is inside home_office_161. wallshelf_191 is inside home_office_161. floor_164 is inside home_office_161. video_game_controller_2019 is inside home_office_161. door_234 is between home_office_161. walllamp_183 is inside home_office_161. home_office_161 is CLEAN.
##############################
From agent.py
Human Instruction: Retrieve book_2091 from table_123 in the dining room and place it on the coffee table inside the home office.

The actions you have taken:
Action 1: Walk to bookshelf_188.
Action 2: Open bookshelf_188.
Action 3: look for book_2091 around bookshelf_188.
Action 4: Walk to bookshelf_260.
Action 5: Open bookshelf_260.
Action 6: look for book_2091 around bookshelf_260.
Action 7: Walk to bookshelf_372.
Action 8: Open bookshelf_372.
Action 9: look for book_2091 around bookshelf_372.
Action 10: Walk to bookshelf_189.
Action 11: Open bookshelf_189.
Action 12: look for book_2091 around bookshelf_189.
Action 13: Walk to bookshelf_136.
Action 14: look for book_2091 around bookshelf_136.
Action 15: Walk to book_2091.
Action 16: Open book_2091.
Action 17: Observe around book_2091 with the question of Check where the book is.
Action 18: Walk to home_office_161.
Action 19: Observe around home_office_161 with the question of Check if the coffee table is inside the home office.
Action 20: Walk to book_2091.
Action 21: Grab book_2091.
Action 22: Walk to table_123.
Action 23: Put book_2091 on table_123.
Action 24: Observe around book_2091 with the question of Check where the book is.
Action 25: Walk to home_office_161.
Action 26: Observe around home_office_161 with the question of Check if the coffee table is inside the home office.
Action 27: Walk to book_2091.
Action 28: Observe around book_2091 with the question of Check where the book is.
Action 29: Walk to home_office_161.
Action 30: Observe around home_office_161 with the question of Check if the coffee table is inside the home office.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table)
        # Select an item that is a coffee table

        bind home_office: item where:
            is_home_office(home_office)
        # Select an item that is a home office

        observe(home_office, "Check if the coffee table is inside the home office")
        # Observe to confirm if the coffee table is in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind coffee_table: item where:
            is_table(coffee_table)
        # Select an item that is a coffee table

        bind home_office: item where:
            is_home_office(home_office)
        # Select an item that is a home office

        observe(home_office, "Check if the coffee table is inside the home office")
        # Observe to confirm if the coffee table is in the home office

        achieve on(book, coffee_table)
        # Place the book on the coffee table
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)obs(book_2091, Check where the book is)walk_executor(home_office_161)obs(home_office_161, Check if the coffee table is inside the home office)
##############################
From agent.py
walk_executor(book_2091)
Robot is inside dining_room_1. Robot is close table_123. Robot is close book_2091. Robot is no longer inside home_office_161.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 3
##############################
From agent.py
obs(book_2091, Check where the book is)
Get this information:  book_2091 is inside dining_room_1. book_2091 is close to table_123. book_2091 is close to character_219. book_2091 is on table_123. book_2091 is OPEN.
##############################
From agent.py
walk_executor(home_office_161)
Robot is inside home_office_161. Robot is no longer inside dining_room_1.Robot is no longer close table_123.Robot is no longer close book_2091.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
obs(home_office_161, Check if the coffee table is inside the home office)
Get this information:  dvd_player_2000 is inside home_office_161. clothes_underwear_2022 is inside home_office_161. ceiling_175 is inside home_office_161. tvstand_186 is inside home_office_161. curtain_197 is inside home_office_161. television_216 is inside home_office_161. cat_2082 is inside home_office_161. floor_167 is inside home_office_161. bookshelf_189 is inside home_office_161. ceiling_178 is inside home_office_161. mouse_2112 is inside home_office_161. cup_2006 is inside home_office_161. wall_170 is inside home_office_161. laser_pointer_2025 is inside home_office_161. character_219 is inside home_office_161. window_181 is inside home_office_161. orchid_200 is inside home_office_161. wall_173 is inside home_office_161. floor_162 is inside home_office_161. couch_192 is inside home_office_161. floor_165 is inside home_office_161. walllamp_184 is inside home_office_161. keyboard_2110 is inside home_office_161. pillow_195 is inside home_office_161. floor_168 is inside home_office_161. wallshelf_187 is inside home_office_161. ceiling_176 is inside home_office_161. curtain_198 is inside home_office_161. light_217 is inside home_office_161. ceiling_179 is inside home_office_161. vacuum_cleaner_2094 is inside home_office_161. wallshelf_190 is inside home_office_161. stereo_2007 is inside home_office_161. wall_171 is inside home_office_161. doorjamb_182 is inside home_office_161. mat_201 is inside home_office_161. floor_163 is inside home_office_161. table_193 is inside home_office_161. ceilinglamp_185 is inside home_office_161. wall_174 is inside home_office_161. ceiling_177 is inside home_office_161. floor_166 is inside home_office_161. cd_2100 is inside home_office_161. drawing_196 is inside home_office_161. computer_2111 is inside home_office_161. powersocket_218 is inside home_office_161. wall_169 is inside home_office_161. doorjamb_37 is between home_office_161. curtain_199 is inside home_office_161. photoframe_210 is inside home_office_161. bookshelf_188 is inside home_office_161. wall_172 is inside home_office_161. oil_2005 is inside home_office_161. ceiling_180 is inside home_office_161. wallshelf_191 is inside home_office_161. floor_164 is inside home_office_161. video_game_controller_2019 is inside home_office_161. door_234 is between home_office_161. walllamp_183 is inside home_office_161. home_office_161 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_114_around_mat_237(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==237
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior open_window(window: item):
    body:
        achieve open(window) # Ensure the window is open

behavior __goal__():
    body:
        bind window: item where:
            is_window(window)
        # Select a window object
        
        if not visited(window):
            observe(window, "Check if the window is closed")
        # Observe to check if the window needs to be opened
        
        open_window(window)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior open_window(window: item):
    body:
        achieve open(window) # Ensure the window is open

behavior __goal__():
    body:
        bind window: item where:
            is_window(window)
        # Select a window object
        
        if not visited(window):
            observe(window, "Check if the window is closed")
        # Observe to check if the window needs to be opened
        
        open_window(window)

##############################
From agent.py-> find a plan in act()
walk_executor(window_2109)open_executor(window_2109)obs(window_2109, Check if the window is closed)
##############################
From agent.py
walk_executor(window_2109)
Robot is inside dining_room_1. Robot is close window_2109. Robot is no longer inside home_office_161.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
open_executor(window_2109)
Robot is inside dining_room_1. Robot is close window_2109. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
obs(window_2109, Check if the window is closed)
Get this information:  window_2109 is inside dining_room_1. window_2109 is close to dining_room_1. window_2109 is close to character_219. window_2109 is DIRTY. window_2109 is OPEN.
##############################
From agent.py
Human Instruction: You need to walk to the window inside the home office (home_office_161) and open it, as the actions indicate that you opened a window (window_2109) in the dining room instead.

The actions you have taken:
Action 1: Walk to bookshelf_188.
Action 2: Open bookshelf_188.
Action 3: look for book_2091 around bookshelf_188.
Action 4: Walk to bookshelf_260.
Action 5: Open bookshelf_260.
Action 6: look for book_2091 around bookshelf_260.
Action 7: Walk to bookshelf_372.
Action 8: Open bookshelf_372.
Action 9: look for book_2091 around bookshelf_372.
Action 10: Walk to bookshelf_189.
Action 11: Open bookshelf_189.
Action 12: look for book_2091 around bookshelf_189.
Action 13: Walk to bookshelf_136.
Action 14: look for book_2091 around bookshelf_136.
Action 15: Walk to book_2091.
Action 16: Open book_2091.
Action 17: Observe around book_2091 with the question of Check where the book is.
Action 18: Walk to home_office_161.
Action 19: Observe around home_office_161 with the question of Check if the coffee table is inside the home office.
Action 20: Walk to book_2091.
Action 21: Grab book_2091.
Action 22: Walk to table_123.
Action 23: Put book_2091 on table_123.
Action 24: Observe around book_2091 with the question of Check where the book is.
Action 25: Walk to home_office_161.
Action 26: Observe around home_office_161 with the question of Check if the coffee table is inside the home office.
Action 27: Walk to book_2091.
Action 28: Observe around book_2091 with the question of Check where the book is.
Action 29: Walk to home_office_161.
Action 30: Observe around home_office_161 with the question of Check if the coffee table is inside the home office.
Action 31: Walk to book_2091.
Action 32: Observe around book_2091 with the question of Check where the book is.
Action 33: Walk to home_office_161.
Action 34: Observe around home_office_161 with the question of Check if the coffee table is inside the home office.
Action 35: Walk to window_2109.
Action 36: Open window_2109.
Action 37: Observe around window_2109 with the question of Check if the window is closed.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cheese_2049_around_freezer_140(food_cheese:item):
    goal: not unknown(food_cheese)
    body:
        assert is_food_cheese(food_cheese)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_cheese,freezer_instance)
        else:
            exp(food_cheese,freezer_instance)
    eff:
        unknown[food_cheese]=False
        close[food_cheese,freezer_instance]=True
        close[freezer_instance,food_cheese]=True
    

behavior find_chair_263_around_chair_263(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==263
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
behavior open_window_in_home_office(window: item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select the window inside the home office

        if not visited(window):
            observe(window, "Check if the window is closed")
        # Observe the window to check if it is closed

        open_window_in_home_office(window)
        # Open the window in the home office if it is closed
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_home_office_window(window: item):
    # Function to check if a window is in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_home_office_window(window)
        # Select a window and confirm it is in the home office

        if not visited(window):
            observe(window, "Check if this is the window in the home office")
        # Observe to confirm the windows location and state

        achieve open(window)
        # Open the window in the home office
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dvd_player_2085_around_tvstand_186(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Function to check if a window is in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind home_office_window: item where:
            is_window(home_office_window) and is_window_in_home_office(home_office_window)
        # Select a window in the home office

        if not visited(home_office_window):
            observe(home_office_window, "Check if the window is closed")
        # Check the state of the window to ensure it is not already open

        achieve open(home_office_window)
        # Ensure the window in the home office is open

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_home_office_window(window: item):
    # Function to check if a window is the window in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior open_correct_window(window: item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_home_office_window(window)
        # Select the window inside the home office
        
        if not visited(window):
            observe(window, "Check if the window is closed")
        # Observe the state of the window if it hasnt been visited

        open_correct_window(window)
        # Ensure the window is open

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Function to check if a window is in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select a window that is in the home office

        if not visited(window):
            observe(window, "Check if this is the window in the home office")
        # Confirm the window is in the home office

        achieve open(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2055_around_freezer_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_food,freezer_instance)
        else:
            exp(food_food,freezer_instance)
    eff:
        unknown[food_food]=False
        close[food_food,freezer_instance]=True
        close[freezer_instance,food_food]=True
    

behavior find_food_vegetable_2072_around_freezer_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_vegetable,freezer_instance)
        else:
            exp(food_vegetable,freezer_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,freezer_instance]=True
        close[freezer_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind window: item where:
            is_window(window)
        # Select a window instance

        bind home_office: item where:
            is_home_office(home_office)
        # Select an item that is a home office

        if exists window: item : is_window(window) and inside(window, home_office) and closed(window):
            # If the window is in the home office and is closed
            achieve open(window)
            # Ensure the window is open

        else:
            observe(window, "Check if the window is closed")
            # Observe if the window is closed

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior open_window_in_home_office(window: item):
    body:
        achieve open(window)
        # Open the window

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and id[window] == 2109
        # Select the window with ID 2109

        observe(window, "Check if the window is closed")
        # Observe to ensure the window state

        open_window_in_home_office(window)
        # Execute the behavior to open the window in the home office
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior open_window_in_home_office(window: item):
    body:
        achieve open(window)
        # Open the window

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and id[window] == 2109
        # Select the window with ID 2109

        observe(window, "Check if the window is closed")
        # Observe to ensure the window state

        open_window_in_home_office(window)
        # Execute the behavior to open the window in the home office
##############################
From agent.py-> find a plan in act()
obs(window_2109, Check if the window is closed)
##############################
From agent.py
obs(window_2109, Check if the window is closed)
Get this information:  window_2109 is inside dining_room_1. window_2109 is close to dining_room_1. window_2109 is close to character_219. window_2109 is DIRTY. window_2109 is OPEN.
##############################
From agent.py
Human Instruction: You need to walk to the window inside the home office (home_office_161) and open it, as the actions indicate that you opened a window (window_2109) in the dining room instead.

The actions you have taken:
Action 1: Walk to bookshelf_188.
Action 2: Open bookshelf_188.
Action 3: look for book_2091 around bookshelf_188.
Action 4: Walk to bookshelf_260.
Action 5: Open bookshelf_260.
Action 6: look for book_2091 around bookshelf_260.
Action 7: Walk to bookshelf_372.
Action 8: Open bookshelf_372.
Action 9: look for book_2091 around bookshelf_372.
Action 10: Walk to bookshelf_189.
Action 11: Open bookshelf_189.
Action 12: look for book_2091 around bookshelf_189.
Action 13: Walk to bookshelf_136.
Action 14: look for book_2091 around bookshelf_136.
Action 15: Walk to book_2091.
Action 16: Open book_2091.
Action 17: Observe around book_2091 with the question of Check where the book is.
Action 18: Walk to home_office_161.
Action 19: Observe around home_office_161 with the question of Check if the coffee table is inside the home office.
Action 20: Walk to book_2091.
Action 21: Grab book_2091.
Action 22: Walk to table_123.
Action 23: Put book_2091 on table_123.
Action 24: Observe around book_2091 with the question of Check where the book is.
Action 25: Walk to home_office_161.
Action 26: Observe around home_office_161 with the question of Check if the coffee table is inside the home office.
Action 27: Walk to book_2091.
Action 28: Observe around book_2091 with the question of Check where the book is.
Action 29: Walk to home_office_161.
Action 30: Observe around home_office_161 with the question of Check if the coffee table is inside the home office.
Action 31: Walk to book_2091.
Action 32: Observe around book_2091 with the question of Check where the book is.
Action 33: Walk to home_office_161.
Action 34: Observe around home_office_161 with the question of Check if the coffee table is inside the home office.
Action 35: Walk to window_2109.
Action 36: Open window_2109.
Action 37: Observe around window_2109 with the question of Check if the window is closed.
Action 38: Observe around window_2109 with the question of Check if the window is closed.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Determine if a window is in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window_in_home_office: item where:
            is_window(window_in_home_office) and is_window_in_home_office(window_in_home_office)
        # Select a window in the home office

        if not visited(window_in_home_office):
            observe(window_in_home_office, "Check if the window is already open")
        # Observe to see the state of the window if it hasnt been visited

        achieve open(window_in_home_office)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Function to check if a window is in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select a window in the home office

        if not visited(window):
            observe(window, "Check if this window is currently open or closed")
        # Observe the window if it hasnt been visited to determine its status

        achieve open(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_table_127(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(book,table_instance)
        else:
            exp(book,table_instance)
    eff:
        unknown[book]=False
        close[book,table_instance]=True
        close[table_instance,book]=True
    

behavior find_chair_138_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior open_home_office_window(window: item):
    body:
        achieve open(window)
        # Ensure the window is open

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and (exists room: item: is_home_office(room) and inside(window, room))
        # Select the window inside the home office

        if not visited(window):
            observe(window, "Check if the window is closed")
        # Observe to confirm if the window is closed
        
        open_home_office_window(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_rack_299_around_bathroom_cabinet_305(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel_rack,bathroom_cabinet_instance)
        else:
            exp(towel_rack,bathroom_cabinet_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel_rack]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior open_window_in_home_office(window: item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and id[window] == 2109
        # Select window with ID 2109 in the dining room, but the goal is for the home office
        
        observe(window, "Check if this is the correct window to open")
        # Observe to confirm the window state
        
        bind home_office_window: item where:
            is_window(home_office_window) and inside(home_office_window, item) and id[item] == 161
        # Attempt to locate the correct window inside the home office environment
        
        open_window_in_home_office(home_office_window)
        # Execute the behavior to open the correct window in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: item; available variables: [Variable<home_office_window: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#goal_representation

behavior open_window_in_home_office(window: item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and id[window] == 2109
        # Select window with ID 2109 in the dining room, but the goal is for the home office
        
        observe(window, "Check if this is the correct window to open")
        # Observe to confirm the window state
        
        bind home_office_window: item where:
            is_window(home_office_window) and inside(home_office_window, home_office) and id[home_office] == 161
        # Attempt to locate the correct window inside the home office environment
        
        open_window_in_home_office(home_office_window)
        # Execute the behavior to open the correct window in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<home_office_window: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation

behavior open_window_in_home_office(window: item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and id[window] == 2109
        # Select window with ID 2109 in the dining room, but the goal is for the home office
        
        observe(window, "Check if this is the correct window to open")
        # Observe to confirm the window state
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind home_office_window: item where:
            is_window(home_office_window) and inside(home_office_window, home_office) and id[home_office] == 161
        # Attempt to locate the correct window inside the home office environment
        
        open_window_in_home_office(home_office_window)
        # Execute the behavior to open the correct window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Function to check if a window is in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window_2109: item where:
            is_window(window_2109)
        # Select the window 2109 which was incorrectly opened

        observe(window_2109, "Check if the window is in the home office")
        # Check if the window is in the home office

        bind home_office_window: item where:
            is_window(home_office_window) and is_window_in_home_office(home_office_window)
        # Select a window that is confirmed to be in the home office

        if not visited(home_office_window):
            observe(home_office_window, "Check if the window is closed")
        # Ensure the window state is known

        achieve open(home_office_window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_263_around_chair_263(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==263
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Function to check if a window is inside the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select a window inside the home office

        if not visited(window):
            observe(window, "Ensure it is the correct window in the home office")
        # Confirm it is the right window in the home office

        achieve open(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_138_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Function to check if a window is in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select a window that is in the home office

        if not visited(window):
            observe(window, "Check if the window is closed")
        # Confirm the window status if it hasnt been visited

        achieve open(window)
        # Ensure the window is open

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_towel_rack_300_around_towel_rack_298(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel_rack,towel_rack_instance)
        else:
            exp(towel_rack,towel_rack_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,towel_rack_instance]=True
        close[towel_rack_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
behavior open_window_in_home_office(window: item):
    body:
        achieve open(window) # Ensure the window is open

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and id[window] == 2109
        # Select the window with ID 2109, which is in the dining room (incorrect window previously opened)

        observe(window, "Check if it is currently the window in the home office")
        # Observe to ensure the selection of the correct window

        if not is_home_office_window_open():
            # Close the wrong window if it was opened inadvertently
            achieve closed(window)
            # Then find and open the correct window in the home office

        bind correct_window: item where:
            is_window(correct_window) and (exists room: item : is_home_office(room) and inside(correct_window, room))
        # Bind to the correct window in the home office

        open_window_in_home_office(correct_window)
        # Execute the behavior to open the home office window

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_home_office_window_open not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior open_window_in_home_office(window: item):
    body:
        achieve open(window) # Ensure the window is open

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and id[window] == 2109
        # Select the window with ID 2109, which is in the dining room (incorrect window previously opened)

        observe(window, "Check if it is currently the window in the home office")
        # Observe to ensure the selection of the correct window

        if not is_window_open():
            # Close the wrong window if it was opened inadvertently
            achieve closed(window)
            # Then find and open the correct window in the home office

        bind correct_window: item where:
            is_window(correct_window) and (exists room: item : is_home_office(room) and inside(correct_window, room))
        # Bind to the correct window in the home office

        open_window_in_home_office(correct_window)
        # Execute the behavior to open the home office window

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_window_open not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior open_window_in_home_office(window: item):
    body:
        achieve open(window) # Ensure the window is open

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and id[window] == 2109
        # Select the window with ID 2109, which is in the dining room (incorrect window previously opened)

        observe(window, "Check if it is currently the window in the home office")
        # Observe to ensure the selection of the correct window

        if not is_window(window):
            # Close the wrong window if it was opened inadvertently
            achieve closed(window)
            # Then find and open the correct window in the home office

        bind correct_window: item where:
            is_window(correct_window) and (exists room: item : is_home_office(room) and inside(correct_window, room))
        # Bind to the correct window in the home office

        open_window_in_home_office(correct_window)
        # Execute the behavior to open the home office window

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Check if the window is in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select the window in the home office

        if not visited(window):
            observe(window, "Check if the window is closed")
        # Confirm the state of the window in the home office

        achieve open(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Function to check if a window is in the home office
    return exists room: item : is_home_office(room) and inside(window, room)

behavior open_home_office_window(window: item):
    body:
        achieve open(window) # Open the window

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select a window in the home office

        if not visited(window):
            observe(window, "Check if the window is closed")
        # Observe the window state if it has not been visited to ensure it is closed

        open_home_office_window(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Determine if the window is in the home office
    symbol inside_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return inside_home_office

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select a window in the home office

        if not visited(home_office):
            observe(home_office, "Check if there is a window")
        # Observe the home office to confirm if there is a window

        achieve open(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior open_home_office_window(window:item):
    body:
        achieve open(window)
        # Open the specified window

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select the window inside home office

        if not visited(window):
            observe(window, "Check if the window is closed")
        # Observe if the window is closed before attempting to open it

        open_home_office_window(window)
        # Open the window in the home office
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Function to check if a window is in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior open_window_in_home_office(window: item):
    body:
        achieve open(window)
        # Open the window in the home office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select a window in the home office

        if not visited(window):
            observe(window, "Verify the window location in the home office")
        # Observe the window if it hasnt been visited

        open_window_in_home_office(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Function to check if a window is in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select the window in the home office

        if not visited(window):
            observe(window, "Verify the window location in the home office")
        # Observe the window to confirm its location

        achieve open(window)
        # Open the window if it is not already open

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window:item):
    # Function to check if a window is inside the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior open_window(window:item):
    body:
        achieve open(window) # Open the window

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select a window located in the home office

        if not visited(window):
            observe(window, "Check if this is the correct window in the home office")
        # Confirm the window is in the home office and check its state

        open_window(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and (exists room: item : is_home_office(room) and inside(window, room))
        # Select the window in the home office

        if not visited(window):
            observe(window, "Check if the window is currently closed in the home office")
        # Observe whether the window is closed if it hasnt been visited

        achieve open(window)
        # Open the window in the home office if it is closed
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior open_window_in_home_office(window: item):
    body:
        achieve open(window)
        # Ensure the window is open

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and (exists room: item: is_home_office(room) and inside(window, room))
        # Select the window inside the home office
        
        if not visited(window):
            observe(window, "Check if it is currently closed")
        # Observe to see the state of the window if it hasnt been visited

        open_window_in_home_office(window)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_239_around_bed_376(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_chair_263_around_chair_263(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==263
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_window(window: item):
    # Function to check if a window is in the home office
    return exists room: item : is_home_office(room) and inside(window, room)

behavior open_window_in_home_office(window: item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_home_office_window(window)
        # Select a window that is in the home office

        if not visited(window):
            observe(window, "Check if the window is closed")
        # Observe the window to verify if it is closed

        open_window_in_home_office(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_home_office_window(window: item):
    # Function to check if a window is part of the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior open_home_office_window(window: item):
    body:
        achieve open(window) # Open the window

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office

        bind incorrect_window: item where:
            is_window(incorrect_window) and inside(incorrect_window, home_office)
        # Bind a window that is in the home office

        observe(incorrect_window, "Check if this window has been opened in the wrong room")

        bind window: item where:
            is_window(window) and is_home_office_window(window) and closed(window)
        # Bind the window in the home office that is currently closed

        open_home_office_window(window)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind window: item where:
            is_window(window)
        # Select a window instance

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        if not visited(window):
            observe(window, "Check if the window is open and inside the home office")
        # Observe to see the state of the window and if it is in the home office if it hasnt been visited

        achieve open(window)
        # Ensure the window in the home office is open

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_jam_2059_around_freezer_140(food_jam:item):
    goal: not unknown(food_jam)
    body:
        assert is_food_jam(food_jam)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_jam,freezer_instance)
        else:
            exp(food_jam,freezer_instance)
    eff:
        unknown[food_jam]=False
        close[food_jam,freezer_instance]=True
        close[freezer_instance,food_jam]=True
    

behavior find_food_hamburger_2057_around_freezer_140(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_hamburger,freezer_instance)
        else:
            exp(food_hamburger,freezer_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,freezer_instance]=True
        close[freezer_instance,food_hamburger]=True
    

behavior find_mat_115_around_vacuum_cleaner_2094(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(mat,vacuum_cleaner_instance)
        else:
            exp(mat,vacuum_cleaner_instance)
    eff:
        unknown[mat]=False
        close[mat,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,mat]=True
    

behavior find_napkin_2014_around_freezer_140(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(napkin,freezer_instance)
        else:
            exp(napkin,freezer_instance)
    eff:
        unknown[napkin]=False
        close[napkin,freezer_instance]=True
        close[freezer_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Check if a window is inside the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window)
        # Select a window

        if not visited(window):
            observe(window, "Check if the window is closed")
        # Observe to check if the window has been properly located and its state

        if is_window_in_home_office(window):
            achieve open(window)
        # If the window is in the home office, ensure it is open

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

def is_window_in_home_office(window: item):
    # Function to check if a window is in the home office
    return exists room: item : is_home_office(room) and inside(window, room)

behavior open_window(window: item):
    body:
        achieve open(window) # Ensure the window is opened

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        observe(home_office, "Check if there is a window in the home office")
        # Observe to find the window in the home office

        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select the window in the home office

        if not visited(window):
            observe(window, "Ensure the window is closed")
        # Confirm the window is closed if it hasnt been visited

        open_window(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_rack_298_around_towel_rack_298(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel_rack,towel_rack_instance)
        else:
            exp(towel_rack,towel_rack_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,towel_rack_instance]=True
        close[towel_rack_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_window(window: item):
    # Function to check if a window is in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_home_office_window(window)
        # Select a window that is in the home office

        if not visited(window):
            observe(window, "Check if this window is in the home office")
        # Observe the window to confirm its location if it hasnt been visited

        achieve open(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_137(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_chair_263_around_chair_263(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==263
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_window(window: item):
    # Check if the window is in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_home_office_window(window)
        # Select the window in the home office

        if not visited(window):
            observe(window, "Check if the window is currently closed")
        # Check the windows state if it hasnt been visited

        achieve open(window)
        # Ensure the window is open

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and (exists room: item : is_home_office(room) and inside(window, room))
        # Select a window within the home office
        
        if not visited(window):
            observe(window, "Check if the window is currently inside the home office and closed")
        # Observe the window to ensure it is the correct one in the home office and its current state

        achieve open(window)
        # Open the window in the home office
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Function to check if a window is in the home office
    return exists room: item : is_home_office(room) and inside(window, room)

behavior open_window(window: item):
    body:
        achieve open(window)
        # Ensure the window is open

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select a window in the home office

        if not visited(window):
            observe(window, "Check if the window is closed")
        # Observe the window to ensure it is in the home office and closed

        open_window(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and id[window] == 2109
        # Bind to the window in the dining room by ID

        bind home_office_window: item where:
            is_window(home_office_window)
        # Select a window

        if not visited(home_office_window):
            observe(home_office_window, "Check if this is the window in the home office")
        # Confirm the window is in the home office

        achieve open(home_office_window)
        # Ensure the home office window is open
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_240_around_bed_264(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Check if the window is located inside the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select a window in the home office

        if not visited(window):
            observe(window, "Check if this is the window in the home office")
        # Confirm the window is the correct window in the home office

        achieve open(window)
        # Ensure the window is open

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind window: item where:
            is_window(window)
        # Select a window instance

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        if not visited(window):
            observe(window, "Check if the window is currently closed in the home office")
        # Observe to ensure we have the correct window in the home office that needs to be opened

        achieve open(window)
        # Ensure the window in the home office is open
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_home_office_window(window: item):
    # Function to verify if the window belongs to the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_home_office_window(window)
        # Select a window in the home office

        if not visited(window):
            observe(window, "Check if the window is in the home office")
        # Observe the window if it has not been visited

        achieve open(window)
        # Ensure the window is open

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_home_office_window(window: item):
    # Function to verify if the window is in the home office
    symbol in_office=exists room: item : is_home_office(room) and inside(window, room)
    return in_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_home_office_window(window)
        # Select the window in the home office

        if not visited(window):
            observe(window, "Check the window state and location")
        # Observe the window to confirm its state and location
        
        achieve open(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_home_office_window(window: item):
    # Function to check if a window is in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind window: item where:
            is_window(window) and is_home_office_window(window)
        # Select a window inside the home office

        if not visited(window):
            observe(window, "Check if it is currently closed")
        # Observe to see the state of the window if it hasnt been visited

        achieve open(window)
        # Ensure the window is open

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Function to check if a window is located in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select the window located in the home office

        if not visited(window):
            observe(window, "Check if this window is the one in the home office")
        # Confirm the window is in the home office if it has not been visited

        achieve open(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior open_window(window: item):
    body:
        achieve open(window)  # Ensure the window is open

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select the window inside the home office

        if not visited(window):
            observe(window, "Check if it is the correct window in the home office")
        # Observe to ensure you are dealing with the correct window

        open_window(window)
        # Open the window

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Check if the window is located inside the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select a window that is in the home office

        if not visited(window):
            observe(window, "Check if this is the window in the home office")
        # Confirm the window is in the home office and check its state
        
        achieve open(window)
        # Ensure the window is open

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior open_window_in_home_office(window:item):
    body:
        achieve open(window)
        # Open the window

def is_hom_office_window(window: item):
    # Function to check if window is in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_hom_office_window(window)
        # Select a window in the home office
        
        if not visited(window):
            observe(window, "Check if the window is currently closed")
        # Observe if the window is closed and not in the dining room

        open_window_in_home_office(window)
        # Open the correct window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior open_window_in_home_office(window: item):
    body:
        achieve open(window)
        # Open the window

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select a window inside the home office

        if not visited(window):
            observe(window, "Check if the window is closed")
        # Confirm the state of the window if it hasnt been visited

        open_window_in_home_office(window)
        # Execute behavior to open the window in the home office
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior open_window_in_home_office(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select the window inside home office

        if not visited(window):
            observe(window, "Check if this is the window in the home office")
        # Confirm the window is the one in the home office

        open_window_in_home_office(window)
        # Execute the behavior to open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Define a function to check if a window is in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior open_window_in_home_office(window: item):
    body:
        achieve open(window)
        # Open the window

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select a window in the home office

        if not visited(window):
            observe(window, "Check if this is the window in the home office")
        # Confirm the window is the one in the home office before proceeding

        open_window_in_home_office(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Function to check if a window is in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior open_home_office_window(window: item):
    body:
        achieve open(window)
        # Ensure the window is open

behavior __goal__():
    body:
        bind home_office_window: item where:
            is_window(home_office_window) and is_window_in_home_office(home_office_window)
        # Select a window in the home office

        if not visited(home_office_window):
            observe(home_office_window, "Check if this is the window in the home office")
        # Confirm the window is in the home office

        open_home_office_window(home_office_window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_home_office_window(window: item):
    # Function to check if a window is inside the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_home_office_window(window)
        # Select the window in the home office

        if not visited(window):
            observe(window, "Ensure this is the window in the home office")
        # Observe the window if it hasnt been visited

        achieve open(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind window: item where:
            is_window(window)
        # Select an item that is a window

        if not visited(window):
            observe(window, "Check if this is the window in the home office")
        # Observe the state and location of the window if it hasnt been visited

        achieve open(window)
        # Open the window in the home office
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_114_around_mat_237(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==237
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_window(window: item):
    # Function to check if a window is in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_home_office_window(window)
        # Bind a window instance that is inside the home office

        if not visited(window):
            observe(window, "Check if the window is closed and ensure its in the home office")
        # Observe the window state if it hasnt been visited

        achieve open(window)
        # Action to open the window

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_home_office_window(window: item):
    # Function to check if a window is in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior open_window(window: item):
    body:
        achieve open(window)
        # Ensure the window is open

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_home_office_window(window)
        # Select a window in the home office

        if not visited(window):
            observe(window, "Check if the window is closed")
        # Observe the window to confirm if it is closed

        open_window(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_window_in_home_office(window: item):
    # Function to check if a window is inside the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_window_in_home_office(window)
        # Select a window that is in the home office

        if not visited(window):
            observe(window, "Check if you opened a window in the dining room instead")
        # Ensure the windows state and location is confirmed

        achieve open(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_home_office_window(window: item):
    # Function to check if a window is in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_home_office_window(window)
        # Select a window in the home office

        if not visited(window):
            observe(window, "Check if this is the window in the home office")
        # Confirm the window is in the home office and check its status

        achieve open(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_home_office_window(window: item):
    # Function to check if a window is in the home office
    symbol in_home_office = exists room: item : is_home_office(room) and inside(window, room)
    return in_home_office

behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and is_home_office_window(window)
        # Select a window that is in the home office

        if not visited(window):
            observe(window, "Check if it is the window in the home office")
        # Observe the window to confirm it is in the home office

        achieve open(window)
        # Open the window in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_correct_window(window:item, room:item):
    # Check if the window is inside the specified room
    symbol correct_location = is_home_office(room) and inside(window, room)
    return correct_location

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind window: item where:
            is_window(window) and is_correct_window(window, home_office)
        # Select the window in the home office

        if not visited(window):
            observe(window, "Check if the window is closed")
        # Observe the window if it hasnt been visited

        achieve open(window)
        # Ensure the window is open

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_138_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and id[window] == 2109
        # Select the window with ID 2109

        bind home_office: item where:
            is_home_office(home_office) and id[home_office] == 161
        # Select the home office with ID 161

        observe(home_office, "Check if this is the correct home office")
        # Observe to ensure this is the correct home office

        achieve open(window)
        # Open the window in the correct home office
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior __goal__():
    body:
        bind window: item where:
            is_window(window) and id[window] == 2109
        # Select the window with ID 2109

        bind home_office: item where:
            is_home_office(home_office) and id[home_office] == 161
        # Select the home office with ID 161

        observe(home_office, "Check if this is the correct home office")
        # Observe to ensure this is the correct home office

        achieve open(window)
        # Open the window in the correct home office
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)obs(home_office_161, Check if this is the correct home office)
##############################
From agent.py
walk_executor(home_office_161)
Robot is inside home_office_161. Robot is no longer inside dining_room_1.Robot is no longer close window_2109.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
obs(home_office_161, Check if this is the correct home office)
Get this information:  dvd_player_2000 is inside home_office_161. clothes_underwear_2022 is inside home_office_161. ceiling_175 is inside home_office_161. tvstand_186 is inside home_office_161. curtain_197 is inside home_office_161. television_216 is inside home_office_161. cat_2082 is inside home_office_161. floor_167 is inside home_office_161. bookshelf_189 is inside home_office_161. ceiling_178 is inside home_office_161. mouse_2112 is inside home_office_161. cup_2006 is inside home_office_161. wall_170 is inside home_office_161. laser_pointer_2025 is inside home_office_161. character_219 is inside home_office_161. window_181 is inside home_office_161. orchid_200 is inside home_office_161. wall_173 is inside home_office_161. floor_162 is inside home_office_161. couch_192 is inside home_office_161. floor_165 is inside home_office_161. walllamp_184 is inside home_office_161. keyboard_2110 is inside home_office_161. pillow_195 is inside home_office_161. floor_168 is inside home_office_161. wallshelf_187 is inside home_office_161. ceiling_176 is inside home_office_161. curtain_198 is inside home_office_161. light_217 is inside home_office_161. ceiling_179 is inside home_office_161. vacuum_cleaner_2094 is inside home_office_161. wallshelf_190 is inside home_office_161. stereo_2007 is inside home_office_161. wall_171 is inside home_office_161. doorjamb_182 is inside home_office_161. mat_201 is inside home_office_161. floor_163 is inside home_office_161. table_193 is inside home_office_161. ceilinglamp_185 is inside home_office_161. wall_174 is inside home_office_161. ceiling_177 is inside home_office_161. floor_166 is inside home_office_161. cd_2100 is inside home_office_161. drawing_196 is inside home_office_161. computer_2111 is inside home_office_161. powersocket_218 is inside home_office_161. wall_169 is inside home_office_161. doorjamb_37 is between home_office_161. curtain_199 is inside home_office_161. photoframe_210 is inside home_office_161. bookshelf_188 is inside home_office_161. wall_172 is inside home_office_161. oil_2005 is inside home_office_161. ceiling_180 is inside home_office_161. wallshelf_191 is inside home_office_161. floor_164 is inside home_office_161. video_game_controller_2019 is inside home_office_161. door_234 is between home_office_161. walllamp_183 is inside home_office_161. home_office_161 is CLEAN.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g3.txt
Checking k2
Evaluator failed to find a plan
##############################
