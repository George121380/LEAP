From agent.py
Reset goals: The sub-goals are: 
['Slice the bread and toast it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior slice_bread(bread:item):
    body:
        achieve cut(bread)
        # Slice the bread to ensure it is cut

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the sliced bread inside the toaster
        achieve plugged(toaster)
        # Ensure the toaster is plugged in
        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        if not visited(bread):
            observe(bread, "Check the location of the bread")
        # Observe the bread location if it hasnt been visited

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        slice_bread(bread)
        toast_bread(bread, toaster)
        # Slice the bread and toast it
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_bread_and_toast_it(bread:item, toaster:item):
    body:
        achieve cut(bread)
        # Slice the bread
        achieve inside(bread, toaster)
        # Ensure that sliced bread is placed inside the toaster

behavior operate_toaster(toaster:item):
    body:
        achieve plugged(toaster)
        # Plug in the toaster
        achieve is_on(toaster)
        # Turn on the toaster

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread item

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        slice_bread_and_toast_it(bread, toaster)
        operate_toaster(toaster)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Slice the bread and put it in the toaster.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_cutting_board_2080_around_kitchen_counter_132(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_bread(bread:item):
    # Determine if an item is bread suitable for slicing
    return is_food(bread) and cuttable(bread)

behavior slice_bread(bread:item, toaster:item):
    body:
        achieve cut(bread)
        # Ensure the bread is sliced

behavior place_bread_in_toaster(slice_bread:item, toaster:item):
    body:
        achieve inside(slice_bread, toaster)
        # Place the sliced bread inside the toaster

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select an item that is bread and can be sliced

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        slice_bread(bread, toaster)
        # Slice the bread

        place_bread_in_toaster(bread, toaster)
        # Place the sliced bread in the toaster

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_bread_sliced(bread: item):
    # Check if the bread is sliced
    return cut(bread)

behavior put_in_toaster(sliced_bread: item, toaster: item):
    body:
        achieve inside(sliced_bread, toaster)
        # Place the sliced bread into the toaster

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread as an item

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster as an item

        if not is_bread_sliced(bread):
            observe(bread, "Check if the bread is sliced")
        # Observe if the bread is sliced if it hasnt been checked

        achieve cut(bread)
        # Achieve slicing the bread if it is not sliced

        put_in_toaster(bread, toaster)
        # Put the sliced bread into the toaster

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Slice and toast the bread.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_bread_sliced(bread: item):
    # Function to check if the bread is sliced
    return cut(bread)

def is_toaster_operational(toaster: item):
    # Function to check if the toaster is ready to operate
    return is_on(toaster)

behavior slice_bread(bread: item, knife: item):
    body:
        assert cuttable(bread) # Ensure the bread is cuttable
        achieve cut(bread) # Slice the bread

behavior toast_bread(bread: item, toaster: item):
    body:
        achieve plugged(toaster) # Plug in the toaster
        achieve is_on(toaster) # Turn on the toaster
        achieve inside(bread, toaster) # Place the sliced bread in the toaster

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select an item that is bread

        bind knife: item where:
            is_knife(knife)
        # Select an item that is a knife

        bind toaster: item where:
            is_toaster(toaster)
        # Select an item that is a toaster

        if not is_bread_sliced(bread):
            slice_bread(bread, knife)
        # Slice the bread if it has not been sliced yet

        toast_bread(bread, toaster)
        # Toast the bread using the toaster

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cutting_board_2080_around_kitchen_counter_129(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_cutting_board_on_surface(cutting_board: item, surface: item):
    # Check if the cutting board is on the surface
    return on(cutting_board, surface)

def is_bread_present(bread: item):
    # Check if the item is bread
    return is_food_bread(bread)

def is_bread_sliced(bread: item):
    # Check if the bread is cut
    return cut(bread)

behavior slice_bread(bread: item, cutting_board: item):
    body:
        achieve_once inhand(cutting_board)
        achieve cut(bread) # Slice the bread when its on the cutting board

behavior toast_bread(bread: item, toaster: item):
    body:
        achieve inside(bread, toaster) # Place the bread in the toaster
        achieve is_on(toaster) # Turn on the toaster

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind surface: item where:
            surfaces(surface)
        # Select a surface where the cutting board is placed
        
        if not is_cutting_board_on_surface(cutting_board, surface):
            achieve on(cutting_board, surface)
        # Ensure the cutting board is on a surface

        bind bread: item where:
            is_bread_present(bread)
        # Select the bread

        if not is_bread_sliced(bread):
            slice_bread(bread, cutting_board)
        # Slice the bread if its not already sliced

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        toast_bread(bread, toaster)
        # Toast the sliced bread in the toaster

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_breakfast/g1.txt
Checking k1
Evaluator failed to find a plan
##############################
