From agent.py
Reset goals: The sub-goals are: 
['1. Locate the book and place it on the table in the bedroom.', '2. Turn on the light in the bedroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
behavior locate_and_place_book(book: item, table: item):
    body:
        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Locate the book")
        # Observe the book location if it hasnt been visited

        bind table: item where:
            is_table(table) and (exists room: item : is_bedroom(room) and inside(table, room))
        # Select a table located inside the bedroom

        locate_and_place_book(book, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
behavior locate_and_place_book_on_table(book:item, table:item):
    body:
        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        bind table: item where:
            is_table(table) and (exists room: item: is_bedroom(room) and inside(table, room))
        # Select a table that is in the bedroom
        
        locate_and_place_book_on_table(book, table)
#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the table in the bedroom.', '2. Turn on the light in the bedroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_bedroom_table(table: item):
    # Check if the table is inside the bedroom
    symbol in_bedroom = exists room: item : is_bedroom(room) and inside(table, room)
    return in_bedroom

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book
        
        if not visited(book):
            observe(book, "Locate the book")
        # Observe the book location if it hasnt been visited

        bind table: item where:
            is_table(table) and is_bedroom_table(table)
        # Select the table inside the bedroom

        if not visited(table):
            observe(table, "Check if this is the table in the bedroom")
        # Observe to confirm the table is in the bedroom

        achieve on(book, table)
        # Place the book on the table in the bedroom

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_195_around_bed_264(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_book_2091_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_bedroom(table: item):
    # Function to check if a table is in the bedroom
    symbol in_bedroom=exists room: item : is_bedroom(room) and inside(table, room)
    return in_bedroom

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an item that is a book

        if not visited(book):
            observe(book, "Check where the book is")
        # Observe the book location if it hasnt been visited

        bind table: item where:
            is_table(table) and is_table_in_bedroom(table)
        # Select a table in the bedroom

        if not visited(table):
            observe(table, "Confirm this is the table in the bedroom")
        # Confirm the table is in the bedroom

        achieve on(book, table)
        # Place the book on the table in the bedroom

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the table in the bedroom.  ', '2. Turn on the light in the bedroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_188(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def is_bedroom_table(table: item):
    # Function to determine if a table is in the bedroom
    symbol in_bedroom = exists room: item : is_bedroom(room) and inside(table, room)
    return in_bedroom

behavior place_book_on_bedroom_table(book: item, table: item):
    body:
        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book item

        if not visited(book):
            observe(book, "Check the location of the book")
        # Observe the book location if it hasnt been visited

        bind table: item where:
            is_table(table) and is_bedroom_table(table)
        # Select a table that is in the bedroom

        if not visited(table):
            observe(table, "Confirm the tables location in the bedroom")
        # Confirm the tables location in the bedroom if it hasnt been visited

        place_book_on_bedroom_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
behavior find_book_and_place_on_table(book: item, table: item):
    body:
        achieve on(book, table)
        # Ensure the book is placed on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        if not visited(book):
            observe(book, "Check the location of the book")
        # Observe the book location if it hasnt been visited

        bind table: item where:
            is_table(table) and (exists room: item : is_bedroom(room) and inside(table, room))
        # Select a table inside the bedroom

        find_book_and_place_on_table(book, table)
        # Find the book and place it on the table in the bedroom
#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g2.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g2.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g2.txt
Checking k2
missed actions: walk_executor(light_258);switchon_executor(light_258);
missed action num: 2
##############################
