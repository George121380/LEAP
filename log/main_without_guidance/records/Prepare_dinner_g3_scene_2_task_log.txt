From agent.py
Reset goals: The sub-goals are: 
['Cook the bacon.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_239_around_bed_264(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_food_bacon_2044_around_freezer_140(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_bacon,freezer_instance)
        else:
            exp(food_bacon,freezer_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,freezer_instance]=True
        close[freezer_instance,food_bacon]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_stove_on(stove: item):
    # Function to check if the stove is turned on
    return is_on(stove)

def has_bacon_in_fryingpan(fryingpan: item):
    # Function to check if the frying pan contains bacon
    symbol has_bacon = exists bacon: item : is_food_bacon(bacon) and inside(bacon, fryingpan)
    return has_bacon

behavior cook_bacon_on_stove(fryingpan: item, stove: item):
    body:
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

        if not is_stove_on(stove):
            achieve is_on(stove)
            # Turn on the stove if it is not already on

        if not has_bacon_in_fryingpan(fryingpan):
            bind bacon: item where:
                is_food_bacon(bacon)
            achieve inside(bacon, fryingpan)
            # Place the bacon inside the frying pan if it is not already there

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        cook_bacon_on_stove(fryingpan, stove)
        # Execute the behavior to cook the bacon on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_stove_on(stove: item):
    # Function to check if the stove is turned on
    return is_on(stove)

def has_bacon_in_fryingpan(fryingpan: item):
    # Function to check if the frying pan contains bacon
    symbol has_bacon = exists bacon: item : is_food_bacon(bacon) and inside(bacon, fryingpan)
    return has_bacon

behavior cook_bacon_on_stove(fryingpan: item, stove: item):
    body:
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

        if not is_stove_on(stove):
            achieve is_on(stove)
            # Turn on the stove if it is not already on

        if not has_bacon_in_fryingpan(fryingpan):
            bind bacon: item where:
                is_food_bacon(bacon)
            achieve inside(bacon, fryingpan)
            # Place the bacon inside the frying pan if it is not already there

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        cook_bacon_on_stove(fryingpan, stove)
        # Execute the behavior to cook the bacon on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(fryingpan_2107, kitchen_counter_132)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)switchon_executor(stove_2090)walk_executor(freezer_140)switchoff_executor(freezer_140)open_executor(freezer_140)exp(food_bacon_2044, freezer_140)walk_executor(food_bacon_2044)grab_executor(food_bacon_2044)walk_executor(fryingpan_2107)putin_executor(food_bacon_2044, fryingpan_2107)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Find pot_54. Find tray_142. Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(fryingpan_2107, kitchen_counter_132)
Failed to find fryingpan_2107 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(fryingpan_2107, kitchen_counter_129)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)switchon_executor(stove_2090)walk_executor(freezer_140)switchoff_executor(freezer_140)open_executor(freezer_140)exp(food_bacon_2044, freezer_140)walk_executor(food_bacon_2044)grab_executor(food_bacon_2044)walk_executor(fryingpan_2107)putin_executor(food_bacon_2044, fryingpan_2107)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Find oil_2102. Find pot_2093. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is no longer close kitchen_counter_132.
##############################
From agent.py
exp(fryingpan_2107, kitchen_counter_129)
Find fryingpan_2107. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)switchon_executor(stove_2090)walk_executor(freezer_140)switchoff_executor(freezer_140)open_executor(freezer_140)exp(food_bacon_2044, freezer_140)walk_executor(food_bacon_2044)grab_executor(food_bacon_2044)walk_executor(fryingpan_2107)putin_executor(food_bacon_2044, fryingpan_2107)
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. 
##############################
From agent.py
grab_executor(fryingpan_2107)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Grabbing fryingpan_2107 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Robot is close stove_2090. 
##############################
From agent.py
put_executor(fryingpan_2107, stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Robot is close stove_2090. fryingpan_2107 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Robot is close stove_2090. 
##############################
From agent.py
walk_executor(freezer_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.Robot is no longer close fryingpan_2107.
##############################
From agent.py
switchoff_executor(freezer_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(freezer_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(food_bacon_2044, freezer_140)
Find food_bacon_2044. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_bacon_2044)walk_executor(fryingpan_2107)putin_executor(food_bacon_2044, fryingpan_2107)
##############################
From agent.py
grab_executor(food_bacon_2044)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Grabbing food_bacon_2044 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot is inside dining_room_1. Robot is close food_bacon_2044. Robot is close stove_2090. Robot is close fryingpan_2107. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close freezer_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
putin_executor(food_bacon_2044, fryingpan_2107)
Robot is inside dining_room_1. Robot is close food_bacon_2044. Robot is close stove_2090. Robot is close fryingpan_2107. food_bacon_2044 released by right hand. 
##############################
From agent.py
Human Instruction: The robot needs to continue cooking the bacon. It has placed the bacon in the frying pan and turned on the stove, but the process of cooking, which involves waiting until the bacon is cooked, has not been addressed or completed. Make sure to monitor and conclude the cooking process before marking the sub-task as complete.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for fryingpan_2107 around kitchen_counter_132.
Action 3: Walk to kitchen_counter_129.
Action 4: look for fryingpan_2107 around kitchen_counter_129.
Action 5: Walk to fryingpan_2107.
Action 6: Grab fryingpan_2107.
Action 7: Walk to stove_2090.
Action 8: Put fryingpan_2107 on stove_2090.
Action 9: Switch on stove_2090.
Action 10: Walk to freezer_140.
Action 11: Switch off freezer_140.
Action 12: Open freezer_140.
Action 13: look for food_bacon_2044 around freezer_140.
Action 14: Grab food_bacon_2044.
Action 15: Walk to fryingpan_2107.
Action 16: Put food_bacon_2044 into fryingpan_2107.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_239_around_bed_264(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_napkin_2014_around_cupboard_130(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(napkin,cupboard_instance)
        else:
            exp(napkin,cupboard_instance)
    eff:
        unknown[napkin]=False
        close[napkin,cupboard_instance]=True
        close[cupboard_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
behavior monitor_and_complete_cooking(bacon: item, fryingpan: item, stove: item):
    body:
        assert is_food_bacon(bacon)
        # Confirm that the item is bacon

        assert is_fryingpan(fryingpan)
        # Confirm that the item is a frying pan

        assert is_stove(stove)
        # Confirm that the item is a stove

        achieve on(bacon, fryingpan)
        # Ensure that the bacon is in the frying pan

        achieve on(fryingpan, stove)
        # Ensure that the frying pan is on the stove

        achieve is_on(stove)
        # Ensure that the stove is on to cook the bacon

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        # Select the bacon item

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090

        monitor_and_complete_cooking(bacon, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior monitor_and_complete_cooking(bacon: item, fryingpan: item, stove: item):
    body:
        assert is_food_bacon(bacon)
        # Confirm that the item is bacon

        assert is_fryingpan(fryingpan)
        # Confirm that the item is a frying pan

        assert is_stove(stove)
        # Confirm that the item is a stove

        achieve on(bacon, fryingpan)
        # Ensure that the bacon is in the frying pan

        achieve on(fryingpan, stove)
        # Ensure that the frying pan is on the stove

        achieve is_on(stove)
        # Ensure that the stove is on to cook the bacon

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        # Select the bacon item

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090

        monitor_and_complete_cooking(bacon, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(food_bacon_2044)put_executor(food_bacon_2044, fryingpan_2107)
##############################
From agent.py
grab_executor(food_bacon_2044)
Robot is inside dining_room_1. Robot is close food_bacon_2044. Robot is close stove_2090. Robot is close fryingpan_2107. Grabbing food_bacon_2044 by right hand. 
##############################
From agent.py
put_executor(food_bacon_2044, fryingpan_2107)
Robot is inside dining_room_1. Robot is close food_bacon_2044. Robot is close stove_2090. Robot is close fryingpan_2107. food_bacon_2044 released by right hand. 
##############################
From agent.py
Human Instruction: The cooking process is not complete; you need to monitor and wait until the bacon is fully cooked. Ensure the cooking time is sufficient while the stove remains on, and then proceed to switch off the stove once the bacon reaches the desired level of doneness.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for fryingpan_2107 around kitchen_counter_132.
Action 3: Walk to kitchen_counter_129.
Action 4: look for fryingpan_2107 around kitchen_counter_129.
Action 5: Walk to fryingpan_2107.
Action 6: Grab fryingpan_2107.
Action 7: Walk to stove_2090.
Action 8: Put fryingpan_2107 on stove_2090.
Action 9: Switch on stove_2090.
Action 10: Walk to freezer_140.
Action 11: Switch off freezer_140.
Action 12: Open freezer_140.
Action 13: look for food_bacon_2044 around freezer_140.
Action 14: Grab food_bacon_2044.
Action 15: Walk to fryingpan_2107.
Action 16: Put food_bacon_2044 into fryingpan_2107.
Action 17: Grab food_bacon_2044.
Action 18: Put food_bacon_2044 on fryingpan_2107.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_napkin_2014_around_walllamp_290(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==290
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(napkin,walllamp_instance)
        else:
            exp(napkin,walllamp_instance)
    eff:
        unknown[napkin]=False
        close[napkin,walllamp_instance]=True
        close[walllamp_instance,napkin]=True
    

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
behavior monitor_bacon_cooking(frying_pan: item, stove: item, bacon: item):
    body:
        assert is_fryingpan(frying_pan)
        # Confirm that the item is a frying pan
        assert is_stove(stove)
        # Confirm that the item is a stove
        assert is_food_bacon(bacon)
        # Confirm that the item is bacon

        achieve on(bacon, frying_pan)
        # Ensure that the bacon is on the frying pan
        achieve on(frying_pan, stove)
        # Ensure that the frying pan is on the stove

        achieve is_on(stove)
        # Ensure the stove is on to cook the bacon

        observe(frying_pan, "Monitor the cooking of bacon until desired doneness is achieved")
        # Observe the frying pan to monitor cooking process and check when the bacon is ready

        achieve is_off(stove)
        # Turn off the stove after the bacon is cooked to the desired doneness

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind bacon: item where:
            is_food_bacon(bacon)
        # Select the bacon

        monitor_bacon_cooking(frying_pan, stove, bacon)
        # Monitor the cooking process of bacon until completion
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior observe_bacon(bacon: item):
    body:
        observe(bacon, "Check if the bacon is fully cooked")
        # Use observation to see if the bacon has reached desired doneness

behavior monitor_bacon(bacon: item, stove: item):
    body:
        assert is_on(stove)
        # Ensure that the stove is on

        observe_bacon(bacon)
        # Periodically observe the bacon until it reaches the desired level of doneness

        achieve is_off(stove)
        # Once the bacon is cooked, turn off the stove

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind bacon: item where:
            is_food_bacon(bacon) and on(bacon, stove)
        # Select the bacon which is on the stove

        monitor_bacon(bacon, stove)
        # Call behavior to monitor and cook the bacon, then turn off the stove when done
#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Cook the bacon.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_napkin_2014_around_bathroom_counter_306(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(napkin,bathroom_counter_instance)
        else:
            exp(napkin,bathroom_counter_instance)
    eff:
        unknown[napkin]=False
        close[napkin,bathroom_counter_instance]=True
        close[bathroom_counter_instance,napkin]=True
    

behavior find_chair_263_around_nightstand_262(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==262
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(chair,nightstand_instance)
        else:
            exp(chair,nightstand_instance)
    eff:
        unknown[chair]=False
        close[chair,nightstand_instance]=True
        close[nightstand_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior monitor_and_cook_bacon(fryingpan: item, stove: item, bacon: item):
    body:
        achieve on(fryingpan, stove)
        # Ensure the frying pan is on the stove

        achieve inside(bacon, fryingpan)
        # Ensure the bacon is inside the frying pan

        achieve is_on(stove)
        # Ensure the stove is turned on for cooking

        observe(fryingpan, "Check if the bacon is fully cooked")
        # Monitor the frying pan to check if the bacon reaches desired doneness

behavior switch_off_stove(stove: item):
    body:
        achieve is_off(stove)
        # Ensure the stove is turned off after cooking

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan that is already on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind bacon: item where:
            is_food_bacon(bacon) and inside(bacon, fryingpan)
        # Select the bacon inside the frying pan

        monitor_and_cook_bacon(fryingpan, stove, bacon)
        # Monitor and cook the bacon until fully cooked

        switch_off_stove(stove)
        # Turn off the stove once cooking is complete

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_napkin_2014_around_kitchen_counter_128(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(napkin,kitchen_counter_instance)
        else:
            exp(napkin,kitchen_counter_instance)
    eff:
        unknown[napkin]=False
        close[napkin,kitchen_counter_instance]=True
        close[kitchen_counter_instance,napkin]=True
    

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#goal_representation
 
behavior monitor_and_cook_bacon(fryingpan: item, stove: item, bacon: item):
    body:
        achieve on(fryingpan, stove)
        # Ensure the frying pan is on the stove

        achieve inside(bacon, fryingpan)
        # Ensure the bacon is inside the frying pan

        achieve is_on(stove)
        # Ensure the stove is turned on for cooking

        observe(fryingpan, "Check if the bacon is fully cooked")
        # Monitor the frying pan to check if the bacon reaches desired doneness

behavior switch_off_stove(stove: item):
    body:
        achieve is_off(stove)
        # Ensure the stove is turned off after cooking

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan that is already on the stove

        bind bacon: item where:
            is_food_bacon(bacon) and inside(bacon, fryingpan)
        # Select the bacon inside the frying pan

        monitor_and_cook_bacon(fryingpan, stove, bacon)
        # Monitor and cook the bacon until fully cooked

        switch_off_stove(stove)
        # Turn off the stove once cooking is complete

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_napkin_2014_around_cupboard_130(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(napkin,cupboard_instance)
        else:
            exp(napkin,cupboard_instance)
    eff:
        unknown[napkin]=False
        close[napkin,cupboard_instance]=True
        close[cupboard_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
behavior check_bacon_cooking_status():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove
        bind bacon: item where:
            is_food_bacon(bacon) and on(bacon, fryingpan)
        # Select the bacon on the frying pan

        observe(fryingpan, "Check if the bacon is cooked to the desired level of doneness")
        # Observe to check if the bacon is cooked

        achieve is_off(stove)
        # Once the bacon is cooked to the desired level, turn off the stove

behavior __goal__():
    body:
        check_bacon_cooking_status()
        # Check the bacon cooking status and ensure the stove is turned off when done
#goal_representation_end

##############################
From agent.py->reset_goal
behavior check_bacon_cooking_status():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove
        bind bacon: item where:
            is_food_bacon(bacon) and on(bacon, fryingpan)
        # Select the bacon on the frying pan

        observe(fryingpan, "Check if the bacon is cooked to the desired level of doneness")
        # Observe to check if the bacon is cooked

        achieve is_off(stove)
        # Once the bacon is cooked to the desired level, turn off the stove

behavior __goal__():
    body:
        check_bacon_cooking_status()
        # Check the bacon cooking status and ensure the stove is turned off when done
##############################
From agent.py-> find a plan in act()
obs(fryingpan_2107, Check if the bacon is cooked to the desired level of doneness)switchoff_executor(stove_2090)
##############################
From agent.py
obs(fryingpan_2107, Check if the bacon is cooked to the desired level of doneness)
Get this information:  fryingpan_2107 is inside dining_room_1. fryingpan_2107 is close to stove_2090. fryingpan_2107 is close to character_219. fryingpan_2107 is close to food_bacon_2044. fryingpan_2107 is on stove_2090. food_bacon_2044 is on fryingpan_2107. fryingpan_2107 is CLEAN.
##############################
From agent.py
switchoff_executor(stove_2090)
Robot is inside dining_room_1. Robot is close food_bacon_2044. Robot is close stove_2090. Robot is close fryingpan_2107. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g3.txt
Checking k1
missed actions: grab_executor(food_bacon_2044);putin_executor(food_bacon_2044, fryingpan_2107);walk_executor(oil_2102);grab_executor(oil_2102);walk_executor(fryingpan_2107);putin_executor(oil_2102, fryingpan_2107);walk_executor(stove_2090);switchon_executor(stove_2090);
missed action num: 8
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g3.txt
Checking k1
missed actions: grab_executor(food_bacon_2044);putin_executor(food_bacon_2044, fryingpan_2107);walk_executor(oil_2102);grab_executor(oil_2102);walk_executor(fryingpan_2107);putin_executor(oil_2102, fryingpan_2107);walk_executor(stove_2090);switchon_executor(stove_2090);
missed action num: 8
##############################
