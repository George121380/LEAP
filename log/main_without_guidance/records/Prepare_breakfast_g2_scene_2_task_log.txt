From agent.py
Reset goals: The sub-goals are: 
['1. Crack the egg into a bowl and beat it until well mixed.', '2. Heat the frying pan to a suitable temperature for scrambling.', '3. Pour the beaten egg into the frying pan and scramble until cooked.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_kitchen_counter_132(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_bowl_2095_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_bowl_on_table(bowl: item, table: item):
    # Function to check if a bowl is on a table
    symbol on_table = on(bowl, table)
    return on_table

behavior crack_and_beat_egg(egg: item, bowl: item):
    body:
        achieve inhand(egg)
        # Temporarily hold the egg in hand
        achieve inside(egg, bowl)
        # Crack the egg into the bowl
        achieve cut(egg)
        # Beat the egg until well mixed

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        if not is_bowl_on_table(bowl, table):
            bind table: item where:
                is_table(table)
            achieve on(bowl, table)
            # Move the bowl onto the table for convenience

        crack_and_beat_egg(egg, bowl)
        # Crack the egg into the bowl and beat until well mixed

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: table; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2053_around_kitchen_counter_132(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_bowl_2095_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
def is_bowl_on_table(bowl: item, table: item):
    # Function to check if a bowl is on a table
    symbol on_table = on(bowl, table)
    return on_table

behavior crack_and_beat_egg(egg: item, bowl: item):
    body:
        achieve inhand(egg)
        # Temporarily hold the egg in hand
        achieve inside(egg, bowl)
        # Crack the egg into the bowl
        achieve cut(egg)
        # Beat the egg until well mixed

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        bind table: item where:
            is_table(table)
        # Select a table

        if not is_bowl_on_table(bowl, table):
            achieve on(bowl, table)
            # Move the bowl onto the table for convenience

        crack_and_beat_egg(egg, bowl)
        # Crack the egg into the bowl and beat until well mixed

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_kitchen_counter_132(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_bowl_2096_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_bowl(item: item):
    # Function to check if the item is a bowl
    return is_bowl(item)

behavior crack_and_beat_egg(bowl: item, egg: item):
    body:
        if not dirty(bowl):
            achieve inside(egg, bowl) # Crack the egg into a bowl
            achieve cut(egg) # Simulate beating the egg by cutting it to mix

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a clean bowl

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        crack_and_beat_egg(bowl, egg) # Crack and beat the egg into the bowl


#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Crack the egg into a bowl and beat it.', '2. Preheat the frying pan.', '3. Pour the beaten egg into the frying pan and scramble it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_kitchen_counter_132(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_bowl_2095_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_bowl_instance(bowl: item):
    # Determine if an item is a bowl 
    return is_bowl(bowl)

def is_egg_instance(egg: item):
    # Determine if an item is an egg
    return is_food_egg(egg)

def locate_vegetables_on_table(table: item):
    # Check if there are any vegetables on a table
    symbol has_vegetables=exists o: item: is_food_vegetable(o) and on(o, table)
    return has_vegetables

def locate_milk_on_table(table: item):
    # Check if there is milk on a table
    symbol has_milk=exists o: item: is_milk(o) and on(o, table)
    return has_milk

def locate_egg_on_table(table: item):
    # Check if there is an egg on a table
    symbol has_egg=exists o: item: is_food_egg(o) and on(o, table)
    return has_egg

behavior beat_egg(egg:item):
    body:
        touch(egg)
        # Interact with the egg item to beat it

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl_instance(bowl)
        # Select a bowl instance

        bind egg: item where:
            is_egg_instance(egg)
        # Select an egg instance

        bind table: item where:
            is_table(table)
        # Select a table instance

        if not visited(bowl):
            observe(bowl, "Check the bowl location")
        # Observe bowl location if it hasnt been visited

        if locate_vegetables_on_table(table) and locate_egg_on_table(table):
            achieve inside(egg, bowl)
            # Crack the egg into the bowl
            beat_egg(egg)
            # Beat the egg
 
#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_bowl_instance(bowl: item):
    # Determine if an item is a bowl 
    return is_bowl(bowl)

def is_egg_instance(egg: item):
    # Determine if an item is an egg
    return is_food_egg(egg)

def locate_vegetables_on_table(table: item):
    # Check if there are any vegetables on a table
    symbol has_vegetables=exists o: item: is_food_vegetable(o) and on(o, table)
    return has_vegetables

def locate_milk_on_table(table: item):
    # Check if there is milk on a table
    symbol has_milk=exists o: item: is_milk(o) and on(o, table)
    return has_milk

def locate_egg_on_table(table: item):
    # Check if there is an egg on a table
    symbol has_egg=exists o: item: is_food_egg(o) and on(o, table)
    return has_egg

behavior beat_egg(egg:item):
    body:
        touch(egg)
        # Interact with the egg item to beat it

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl_instance(bowl)
        # Select a bowl instance

        bind egg: item where:
            is_egg_instance(egg)
        # Select an egg instance

        bind table: item where:
            is_table(table)
        # Select a table instance

        if not visited(bowl):
            observe(bowl, "Check the bowl location")
        # Observe bowl location if it hasnt been visited

        if locate_vegetables_on_table(table) and locate_egg_on_table(table):
            achieve inside(egg, bowl)
            # Crack the egg into the bowl
            beat_egg(egg)
            # Beat the egg
 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(bowl_2095, kitchen_counter_132)walk_executor(bowl_2095)obs(bowl_2095, Check the bowl location)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Find pot_54. Find tray_142. Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(bowl_2095, kitchen_counter_132)
Failed to find bowl_2095 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(bowl_2095, cupboard_130)walk_executor(bowl_2095)obs(bowl_2095, Check the bowl location)
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer close kitchen_counter_132.
##############################
From agent.py
exp(bowl_2095, cupboard_130)
Failed to find bowl_2095 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(bowl_2095, cupboard_131)walk_executor(bowl_2095)obs(bowl_2095, Check the bowl location)
##############################
From agent.py
walk_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. Robot is no longer close blender_2032.Robot is no longer close tea_bag_2017.Robot is no longer close cupboard_130.
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. 
##############################
From agent.py
exp(bowl_2095, cupboard_131)
Failed to find bowl_2095 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(bowl_2095, kitchen_counter_128)walk_executor(bowl_2095)obs(bowl_2095, Check the bowl location)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find cutting_board_2080. Find food_orange_2008. Find spectacles_2106. Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer close cupboard_131.
##############################
From agent.py
exp(bowl_2095, kitchen_counter_128)
Failed to find bowl_2095 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(bowl_2095, kitchen_counter_129)walk_executor(bowl_2095)obs(bowl_2095, Check the bowl location)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Find oil_2102. Find pot_2093. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is no longer close kitchen_counter_128.Robot is no longer close floor_15.
##############################
From agent.py
exp(bowl_2095, kitchen_counter_129)
Failed to find bowl_2095 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2107)exp(bowl_2095, fryingpan_2107)walk_executor(bowl_2095)obs(bowl_2095, Check the bowl location)
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. 
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2095 ?
Answer: The robot should go to dining_room_1 and look for table_123. Once the robot locates table_123, it will find bowl_2095 placed on top of it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The robot should go to dining_room_1 and look for table_123. Once the robot locates table_123, it will find bowl_2095 placed on top of it.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for bowl_2095 around kitchen_counter_132.
Action 3: Walk to cupboard_130.
Action 4: look for bowl_2095 around cupboard_130.
Action 5: Walk to cupboard_131.
Action 6: Open cupboard_131.
Action 7: look for bowl_2095 around cupboard_131.
Action 8: Walk to kitchen_counter_128.
Action 9: look for bowl_2095 around kitchen_counter_128.
Action 10: Walk to kitchen_counter_129.
Action 11: look for bowl_2095 around kitchen_counter_129.
Action 12: Walk to fryingpan_2107.

##############################
From agent.py
exp(bowl_2095, fryingpan_2107)
Failed to find bowl_2095 around fryingpan_2107. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(bowl_2095, table_123)walk_executor(bowl_2095)obs(bowl_2095, Check the bowl location)
##############################
From agent.py
walk_executor(table_123)
Find mat_114. Find shoes_2001. Find drawing_118. Find fork_2103. Find cup_2087. Find cup_2088. Find bowl_2095. Find mouse_2003. Find homework_2011. Find laptop_2015. Robot is inside dining_room_1. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close kitchen_counter_129.Robot is no longer close fryingpan_2107.
##############################
From agent.py
exp(bowl_2095, table_123)
Find bowl_2095. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2095)obs(bowl_2095, Check the bowl location)
##############################
From agent.py
walk_executor(bowl_2095)
Robot is inside dining_room_1. Robot is close table_123. Robot is close bowl_2095. Robot is no longer close floor_17.Robot is no longer close mat_114.
##############################
From agent.py
obs(bowl_2095, Check the bowl location)
Get this information:  bowl_2095 is close to table_123. bowl_2095 is close to character_219. bowl_2095 is on table_123. bowl_2095 is inside dining_room_1. bowl_2095 is DIRTY.
##############################
From agent.py
Human Instruction: You need to clean the dirty bowl_2095, locate an egg, crack it into the bowl, and beat the egg.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for bowl_2095 around kitchen_counter_132.
Action 3: Walk to cupboard_130.
Action 4: look for bowl_2095 around cupboard_130.
Action 5: Walk to cupboard_131.
Action 6: Open cupboard_131.
Action 7: look for bowl_2095 around cupboard_131.
Action 8: Walk to kitchen_counter_128.
Action 9: look for bowl_2095 around kitchen_counter_128.
Action 10: Walk to kitchen_counter_129.
Action 11: look for bowl_2095 around kitchen_counter_129.
Action 12: Walk to fryingpan_2107.
Action 13: look for bowl_2095 around fryingpan_2107.
Action 14: Walk to table_123.
Action 15: look for bowl_2095 around table_123.
Action 16: Walk to bowl_2095.
Action 17: Observe around bowl_2095 with the question of Check the bowl location.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_freezer_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_egg,freezer_instance)
        else:
            exp(food_egg,freezer_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,freezer_instance]=True
        close[freezer_instance,food_egg]=True
    

behavior find_bowl_2096_around_tray_142(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==142
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(bowl,tray_instance)
        else:
            exp(bowl,tray_instance)
    eff:
        unknown[bowl]=False
        close[bowl,tray_instance]=True
        close[tray_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_dirty_bowl(bowl: item):
    # Check if the bowl is dirty
    return dirty(bowl)

behavior clean_bowl(bowl: item):
    body:
        wash(bowl)
        # Wash the dirty bowl

behavior crack_egg_into_bowl(egg: item, bowl: item):
    body:
        achieve inside(egg, bowl)
        # Crack the egg into the bowl

behavior beat_egg_in_bowl(bowl: item):
    body:
        observe(bowl, "Ensure the egg is properly beaten inside the bowl")
        # Observe the bowl to confirm the egg is beaten

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select the bowl with ID 2095

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        if has_dirty_bowl(bowl):
            clean_bowl(bowl)
            # Clean the dirty bowl

        crack_egg_into_bowl(egg, bowl)
        beat_egg_in_bowl(bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_dirty_bowl(bowl: item):
    # Check if the bowl is dirty
    return dirty(bowl)

behavior clean_bowl(bowl: item):
    body:
        wash(bowl)
        # Wash the dirty bowl

behavior crack_egg_into_bowl(egg: item, bowl: item):
    body:
        achieve inside(egg, bowl)
        # Crack the egg into the bowl

behavior beat_egg_in_bowl(bowl: item):
    body:
        observe(bowl, "Ensure the egg is properly beaten inside the bowl")
        # Observe the bowl to confirm the egg is beaten

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl] == 2095
        # Select the bowl with ID 2095

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        if has_dirty_bowl(bowl):
            clean_bowl(bowl)
            # Clean the dirty bowl

        crack_egg_into_bowl(egg, bowl)
        beat_egg_in_bowl(bowl)

##############################
From agent.py-> find a plan in act()
wash_executor(bowl_2095)walk_executor(freezer_140)switchoff_executor(freezer_140)open_executor(freezer_140)exp(food_egg_2053, freezer_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(bowl_2095)putin_executor(food_egg_2053, bowl_2095)obs(bowl_2095, Ensure the egg is properly beaten inside the bowl)
##############################
From agent.py
wash_executor(bowl_2095)
Robot is inside dining_room_1. Robot is close table_123. Robot is close bowl_2095. 
##############################
From agent.py
walk_executor(freezer_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close table_123.Robot is no longer close bowl_2095.
##############################
From agent.py
switchoff_executor(freezer_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(freezer_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(food_egg_2053, freezer_140)
Find food_egg_2053. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2053)walk_executor(bowl_2095)putin_executor(food_egg_2053, bowl_2095)obs(bowl_2095, Ensure the egg is properly beaten inside the bowl)
##############################
From agent.py
grab_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(bowl_2095)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close table_123. Robot is close bowl_2095. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close freezer_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
putin_executor(food_egg_2053, bowl_2095)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close table_123. Robot is close bowl_2095. food_egg_2053 released by right hand. 
##############################
From agent.py
obs(bowl_2095, Ensure the egg is properly beaten inside the bowl)
Get this information:  food_egg_2053 is inside bowl_2095. bowl_2095 is close to table_123. bowl_2095 is close to character_219. bowl_2095 is close to food_egg_2053. bowl_2095 is on table_123. bowl_2095 is inside dining_room_1. bowl_2095 is CLEAN.
##############################
From agent.py
Human Instruction: You need to beat the egg inside the bowl. The current observations show that the egg is inside the bowl, but there is no indication that the egg has been beaten yet.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for bowl_2095 around kitchen_counter_132.
Action 3: Walk to cupboard_130.
Action 4: look for bowl_2095 around cupboard_130.
Action 5: Walk to cupboard_131.
Action 6: Open cupboard_131.
Action 7: look for bowl_2095 around cupboard_131.
Action 8: Walk to kitchen_counter_128.
Action 9: look for bowl_2095 around kitchen_counter_128.
Action 10: Walk to kitchen_counter_129.
Action 11: look for bowl_2095 around kitchen_counter_129.
Action 12: Walk to fryingpan_2107.
Action 13: look for bowl_2095 around fryingpan_2107.
Action 14: Walk to table_123.
Action 15: look for bowl_2095 around table_123.
Action 16: Walk to bowl_2095.
Action 17: Observe around bowl_2095 with the question of Check the bowl location.
Action 18: Wash bowl_2095.
Action 19: Walk to freezer_140.
Action 20: Switch off freezer_140.
Action 21: Open freezer_140.
Action 22: look for food_egg_2053 around freezer_140.
Action 23: Grab food_egg_2053.
Action 24: Walk to bowl_2095.
Action 25: Put food_egg_2053 into bowl_2095.
Action 26: Observe around bowl_2095 with the question of Ensure the egg is properly beaten inside the bowl.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_sink_307(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_bowl_2095_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_egg(item: item):
    # Determine if an item is a food egg
    return is_food(item) and is_food_egg(item)

def has_egg_in_bowl(bowl: item):
    # Function to check if theres an egg in the bowl
    symbol egg_in_bowl = exists egg: item : is_food_egg(egg) and inside(egg, bowl)
    return egg_in_bowl

behavior beat_egg_in_bowl(egg:item, bowl:item):
    body:
        assert inside(egg, bowl) # Ensure the egg is already in the bowl
        achieve cut(egg) # Beat the egg inside the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl

        if has_egg_in_bowl(bowl):
            bind egg: item where:
                is_food_egg(egg) and inside(egg, bowl)
            # Select egg that is inside the bowl
            beat_egg_in_bowl(egg, bowl)

        else:
            observe(bowl, "Ensure the egg is placed in the bowl for beating")
            # Observe to ensure egg is inside the bowl if not previously confirmed

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_egg(item: item):
    # Determine if an item is a food egg
    return is_food(item) and is_food_egg(item)

def has_egg_in_bowl(bowl: item):
    # Function to check if theres an egg in the bowl
    symbol egg_in_bowl = exists egg: item : is_food_egg(egg) and inside(egg, bowl)
    return egg_in_bowl

behavior beat_egg_in_bowl(egg:item, bowl:item):
    body:
        assert inside(egg, bowl) # Ensure the egg is already in the bowl
        achieve cut(egg) # Beat the egg inside the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl

        if has_egg_in_bowl(bowl):
            bind egg: item where:
                is_food_egg(egg) and inside(egg, bowl)
            # Select egg that is inside the bowl
            beat_egg_in_bowl(egg, bowl)

        else:
            observe(bowl, "Ensure the egg is placed in the bowl for beating")
            # Observe to ensure egg is inside the bowl if not previously confirmed

##############################
From agent.py-> find a plan in act()
walk_executor(sink_307)exp(bowl_2096, sink_307)walk_executor(bowl_2096)obs(bowl_2096, Ensure the egg is placed in the bowl for beating)
##############################
From agent.py
walk_executor(sink_307)
Find detergent_2108. Find drawing_296. Find towel_rack_298. Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is close sink_307. Robot is no longer inside dining_room_1.Robot is no longer close table_123.Robot is no longer close food_egg_2053.Robot is no longer close bowl_2095.
##############################
From agent.py
exp(bowl_2096, sink_307)
Failed to find bowl_2096 around sink_307. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)
##############################
From agent.py
walk_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close bowl_2095. Robot is no longer inside bathroom_265.Robot is no longer close bathroom_counter_306.Robot is no longer close sink_307.
##############################
From agent.py
grab_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close bowl_2095. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close cutting_board_2080. Robot is close kitchen_counter_128. Robot is no longer close bowl_2095.
##############################
From agent.py
put_executor(food_egg_2053, cutting_board_2080)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close cutting_board_2080. Robot is close kitchen_counter_128. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot is inside dining_room_1. Robot is close wall_2. Robot is close knifeblock_52. Robot is no longer close cutting_board_2080.Robot is no longer close kitchen_counter_128.Robot is no longer close food_egg_2053.
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Failed to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2095)obs(bowl_2095, Ensure the egg is placed in the bowl for beating)
##############################
From agent.py
walk_executor(bowl_2095)
Robot is inside dining_room_1. Robot is close table_123. Robot is close bowl_2095. Robot is no longer close wall_2.Robot is no longer close knifeblock_52.
##############################
From agent.py
obs(bowl_2095, Ensure the egg is placed in the bowl for beating)
Get this information:  bowl_2095 is close to table_123. bowl_2095 is close to food_egg_2053. bowl_2095 is close to character_219. bowl_2095 is on table_123. bowl_2095 is inside dining_room_1. bowl_2095 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_napkin_2014_around_bathroom_cabinet_305(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(napkin,bathroom_cabinet_instance)
        else:
            exp(napkin,bathroom_cabinet_instance)
    eff:
        unknown[napkin]=False
        close[napkin,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,napkin]=True
    

behavior find_towel_rack_300_around_bathroom_cabinet_305(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel_rack,bathroom_cabinet_instance)
        else:
            exp(towel_rack,bathroom_cabinet_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel_rack]=True
    

behavior find_oil_2005_around_stove_2090(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_preheatable(fryingpan:item):
    # Function to verify if the frying pan is in a state to be preheated
    symbol preheatable = not is_on(fryingpan) and not has_water(fryingpan)
    return preheatable

behavior preheat_fryingpan(fryingpan:item):
    body:
        achieve is_on(fryingpan)
        # Turn on the frying pan to preheat it

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and is_fryingpan_preheatable(fryingpan)
        # Select the frying pan that is ready to be preheated

        preheat_fryingpan(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_napkin_2014_around_bathroom_cabinet_305(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(napkin,bathroom_cabinet_instance)
        else:
            exp(napkin,bathroom_cabinet_instance)
    eff:
        unknown[napkin]=False
        close[napkin,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,napkin]=True
    

behavior find_oil_2005_around_stove_2090(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_preheated(fryingpan: item):
    # Determine if the frying pan is preheated by checking its state
    return is_on(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select an item that is a frying pan
        
        if not is_fryingpan_preheated(fryingpan):
            achieve is_on(fryingpan)
            # Turn on the frying pan to preheat it

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_napkin_2014_around_bathroom_cabinet_305(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(napkin,bathroom_cabinet_instance)
        else:
            exp(napkin,bathroom_cabinet_instance)
    eff:
        unknown[napkin]=False
        close[napkin,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_preheated(fryingpan: item):
    # Function to check if a frying pan is preheated
    symbol preheated = is_on(fryingpan) and plugged(fryingpan)
    return preheated

def is_fryingpan_exists(fryingpan: item):
    # Function to check if an item is a fryingpan
    return is_fryingpan(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan_exists(fryingpan)
        # Select a frying pan

        if not is_fryingpan_preheated(fryingpan):
            achieve plugged(fryingpan)
            # Ensure the fryingpan is plugged in
            achieve is_on(fryingpan)
            # Turn on the fryingpan to preheat it

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_napkin_2014_around_bathroom_cabinet_305(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(napkin,bathroom_cabinet_instance)
        else:
            exp(napkin,bathroom_cabinet_instance)
    eff:
        unknown[napkin]=False
        close[napkin,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
behavior preheat_fryingpan(fryingpan:item):
    body:
        achieve plugged(fryingpan)
        achieve is_on(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the fryingpan item

        preheat_fryingpan(fryingpan)
        # Preheat the frying pan
#goal_representation_end

##############################
From evaluation.py
cdl_dataset/dataset/Prepare_breakfast/g2.txt
Checking k1
missed actions: walk_executor(fryingpan_2107);grab_executor(fryingpan_2107);walk_executor(stove_2090);put_executor(fryingpan_2107, stove_2090);switchon_executor(stove_2090);walk_executor(oil_2102);grab_executor(oil_2102);walk_executor(fryingpan_2107);putin_executor(oil_2102, fryingpan_2107);walk_executor(food_egg_2053);grab_executor(food_egg_2053);walk_executor(fryingpan_2107);putin_executor(food_egg_2053, fryingpan_2107);
missed action num: 13
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_breakfast/g2.txt
Checking k1
missed actions: walk_executor(fryingpan_2107);grab_executor(fryingpan_2107);walk_executor(stove_2090);put_executor(fryingpan_2107, stove_2090);switchon_executor(stove_2090);walk_executor(oil_2102);grab_executor(oil_2102);walk_executor(fryingpan_2107);putin_executor(oil_2102, fryingpan_2107);walk_executor(food_egg_2053);grab_executor(food_egg_2053);walk_executor(fryingpan_2107);putin_executor(food_egg_2053, fryingpan_2107);
missed action num: 13
##############################
