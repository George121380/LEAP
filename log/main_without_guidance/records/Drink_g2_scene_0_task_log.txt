From agent.py
Reset goals: The sub-goals are: 
['1. Fill a cup with water from the sink.  ', '2. Put the cup of water in the freezer.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_food_snack_2038_around_cupboard_229(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_snack,cupboard_instance)
        else:
            exp(food_snack,cupboard_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,cupboard_instance]=True
        close[cupboard_instance,food_snack]=True
    

#exp_behavior_end

#goal_representation
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_cup_with_water(cup:item, sink:item):
    body:
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Ensure there is a faucet close to the sink

        if has_faucet(sink):
            achieve_once is_on(faucet)
            # Turn on the faucet if there is one close to the sink

        achieve inside(cup, sink)
        # Place the cup inside the sink

        water(cup)
        # Fill the cup with water

        achieve_once is_off(faucet)
        # Turn off the faucet after filling the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        fill_cup_with_water(cup, sink)
        # Fill the selected cup with water from the sink

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_snack_2038_around_cupboard_229(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_snack,cupboard_instance)
        else:
            exp(food_snack,cupboard_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,cupboard_instance]=True
        close[cupboard_instance,food_snack]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_cup_with_water(cup:item, sink:item):
    body:
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Ensure there is a faucet close to the sink

        if has_faucet(sink):
            achieve_once is_on(faucet)
            # Turn on the faucet if there is one close to the sink

        achieve inside(cup, sink)
        # Place the cup inside the sink

        is_milk(cup)
        # Fill the cup with water

        achieve_once is_off(faucet)
        # Turn off the faucet after filling the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        fill_cup_with_water(cup, sink)
        # Fill the selected cup with water from the sink

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Expr statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
