From agent.py
Reset goals: The sub-goals are: 
['1. Locate the pot and place it on the stove.', '2. Add the vegetables to the pot with water. ', '3. Boil the vegetables on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_370_around_bed_264(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_pot_54_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot item

        bind stove: item where:
            is_stove(stove)
        # Select the stove item

        if not visited(pot):
            observe(pot, "Check the location of the pot")
        # Observe the pot location if it hasnt been visited

        if not visited(stove):
            observe(stove, "Check the location of the stove")
        # Observe the stove location if it hasnt been visited

        achieve on(pot, stove)
        # Place the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot item

        bind stove: item where:
            is_stove(stove)
        # Select the stove item

        if not visited(pot):
            observe(pot, "Check the location of the pot")
        # Observe the pot location if it hasnt been visited

        if not visited(stove):
            observe(stove, "Check the location of the stove")
        # Observe the stove location if it hasnt been visited

        achieve on(pot, stove)
        # Place the pot on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(pot_2093, cupboard_130)walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, Check the location of the pot)walk_executor(stove_2090)open_executor(stove_2090)obs(stove_2090, Check the location of the stove)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Find tray_142. Find pot_54. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(pot_2093, cupboard_130)
Failed to find pot_2093 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)exp(pot_2093, pot_54)walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, Check the location of the pot)walk_executor(stove_2090)open_executor(stove_2090)obs(stove_2090, Check the location of the stove)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Find food_butter_2018. Find dough_2021. Find food_onion_2026. Robot is inside dining_room_1. Robot is close oven_141. Robot is close pot_54. Robot is no longer close blender_2032.Robot is no longer close tea_bag_2017.Robot is no longer close cupboard_130.
##############################
From agent.py
open_executor(pot_54)
Robot is inside dining_room_1. Robot is close oven_141. Robot is close pot_54. 
##############################
From agent.py
exp(pot_2093, pot_54)
Failed to find pot_2093 around pot_54. 
##############################
From agent.py-> find a plan in act()
obs(pot_54, Check the location of the pot)open_executor(oven_141)obs(oven_141, Check the location of the stove)
##############################
From agent.py
obs(pot_54, Check the location of the pot)
Get this information:  pot_54 is close to ceiling_33. pot_54 is close to wall_2. pot_54 is close to cupboard_130. pot_54 is close to kitchen_counter_132. pot_54 is close to sink_133. pot_54 is close to kitchen_counter_129. pot_54 is close to cupboard_131. pot_54 is close to wall_8. pot_54 is close to stovefan_139. pot_54 is close to oven_141. pot_54 is close to walllamp_46. pot_54 is close to tray_142. pot_54 is close to floor_16. pot_54 is close to knifeblock_52. pot_54 is close to floor_21. pot_54 is close to ceiling_28. pot_54 is close to character_219. pot_54 is on oven_141. pot_54 is inside dining_room_1. pot_54 is CLEAN. pot_54 is OPEN.
##############################
From agent.py
open_executor(oven_141)
Robot is inside dining_room_1. Robot is close oven_141. Robot is close pot_54. 
##############################
From agent.py
obs(oven_141, Check the location of the stove)
Get this information:  pot_54 is on oven_141. oven_141 is close to kitchen_counter_129. oven_141 is close to wall_2. oven_141 is close to cupboard_131. oven_141 is close to kitchen_counter_132. oven_141 is close to cupboard_130. oven_141 is close to faucet_134. oven_141 is close to food_butter_2018. oven_141 is close to wall_8. oven_141 is close to dough_2021. oven_141 is close to food_onion_2026. oven_141 is close to stovefan_139. oven_141 is close to walllamp_46. oven_141 is close to tray_142. oven_141 is close to floor_16. oven_141 is close to knifeblock_52. oven_141 is close to floor_21. oven_141 is close to pot_54. oven_141 is close to character_219. oven_141 is inside dining_room_1. food_butter_2018 is inside oven_141. food_onion_2026 is inside oven_141. dough_2021 is inside oven_141. tray_142 is inside oven_141. oven_141 is OPEN. oven_141 is CLEAN. oven_141 is PLUGGED_IN. oven_141 is OFF.
##############################
From agent.py
Human Instruction: You need to place pot_54 on the stove. Currently, pot_54 is on oven_141, which is not identified as the stove in the given context.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_2093 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: look for pot_2093 around pot_54.
Action 6: Observe around pot_54 with the question of Check the location of the pot.
Action 7: Open oven_141.
Action 8: Observe around oven_141 with the question of Check the location of the stove.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_370_around_bed_264(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_stove_nearby(oven:item):
    # Check if there is a stove close to the oven
    symbol stove_exists = exists stove: item : is_stove(stove) and close(stove, oven)
    return stove_exists

behavior move_pot_to_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Move the pot onto the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the oven with ID 141

        if not visited(oven):
            observe(oven, "Check the location of stove nearby")
        # Observe the oven to check if the stove is near

        if has_stove_nearby(oven):
            bind stove: item where:
                is_stove(stove) and close(stove, oven)
            move_pot_to_stove(pot, stove)
        else:
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Verify its location relative to oven_141")
            # Inspect and identify the stove location to achieve the goal

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_stove_nearby(oven:item):
    # Check if there is a stove close to the oven
    symbol stove_exists = exists stove: item : is_stove(stove) and close(stove, oven)
    return stove_exists

behavior move_pot_to_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Move the pot onto the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select the oven with ID 141

        if not visited(oven):
            observe(oven, "Check the location of stove nearby")
        # Observe the oven to check if the stove is near

        if has_stove_nearby(oven):
            bind stove: item where:
                is_stove(stove) and close(stove, oven)
            move_pot_to_stove(pot, stove)
        else:
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Verify its location relative to oven_141")
            # Inspect and identify the stove location to achieve the goal

##############################
From agent.py-> find a plan in act()
obs(oven_141, Check the location of stove nearby)walk_executor(stove_2090)open_executor(stove_2090)obs(stove_2090, Verify its location relative to oven_141)
##############################
From agent.py
obs(oven_141, Check the location of stove nearby)
Get this information:  pot_54 is on oven_141. oven_141 is close to kitchen_counter_129. oven_141 is close to wall_2. oven_141 is close to cupboard_131. oven_141 is close to kitchen_counter_132. oven_141 is close to cupboard_130. oven_141 is close to faucet_134. oven_141 is close to food_butter_2018. oven_141 is close to wall_8. oven_141 is close to dough_2021. oven_141 is close to food_onion_2026. oven_141 is close to stovefan_139. oven_141 is close to walllamp_46. oven_141 is close to tray_142. oven_141 is close to floor_16. oven_141 is close to knifeblock_52. oven_141 is close to floor_21. oven_141 is close to pot_54. oven_141 is close to character_219. oven_141 is inside dining_room_1. food_butter_2018 is inside oven_141. food_onion_2026 is inside oven_141. dough_2021 is inside oven_141. tray_142 is inside oven_141. oven_141 is OPEN. oven_141 is CLEAN. oven_141 is PLUGGED_IN. oven_141 is OFF.
##############################
From agent.py
walk_executor(stove_2090)
Find oil_2102. Find pot_2093. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close oven_141.Robot is no longer close pot_54.
##############################
From agent.py
open_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
obs(stove_2090, Verify its location relative to oven_141)
Get this information:  stove_2090 is inside dining_room_1. stove_2090 is close to kitchen_counter_129. stove_2090 is close to character_219. stove_2090 is on kitchen_counter_129. stove_2090 is OPEN. stove_2090 is OFF.
##############################
From agent.py
Human Instruction: The pot_54 needs to be moved from oven_141 to stove_2090.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_2093 around cupboard_130.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: look for pot_2093 around pot_54.
Action 6: Observe around pot_54 with the question of Check the location of the pot.
Action 7: Open oven_141.
Action 8: Observe around oven_141 with the question of Check the location of the stove.
Action 9: Observe around oven_141 with the question of Check the location of stove nearby.
Action 10: Walk to stove_2090.
Action 11: Open stove_2090.
Action 12: Observe around stove_2090 with the question of Verify its location relative to oven_141.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_239_around_bed_264(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==264
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_on_stove(pot: item, stove: item):
    # Function to check if a pot is on the stove
    symbol on_stove = on(pot, stove)
    return on_stove

behavior move_pot_to_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove) 

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select oven with ID 141

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        if is_pot_on_stove(pot, stove):
            # If pot is already on the stove, no action is needed
            achieve close_char(char, stove)
        else:
            # Move pot to the stove
            move_pot_to_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_pot_on_stove(pot: item, stove: item):
    # Function to check if a pot is on the stove
    symbol on_stove = on(pot, stove)
    return on_stove

behavior move_pot_to_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove) 

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind oven: item where:
            is_oven(oven) and id[oven] == 141
        # Select oven with ID 141

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        if is_pot_on_stove(pot, stove):
            # If pot is already on the stove, no action is needed
            achieve close_char(char, stove)
        else:
            # Move pot to the stove
            move_pot_to_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)grab_executor(pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot is inside dining_room_1. Robot is close oven_141. Robot is close pot_54. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.
##############################
From agent.py
grab_executor(pot_54)
Robot is inside dining_room_1. Robot is close oven_141. Robot is close pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_54. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close oven_141.
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot is inside dining_room_1. Robot is close pot_54. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_54 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2055_around_freezer_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_food,freezer_instance)
        else:
            exp(food_food,freezer_instance)
    eff:
        unknown[food_food]=False
        close[food_food,freezer_instance]=True
        close[freezer_instance,food_food]=True
    

behavior find_food_vegetable_2072_around_kitchen_counter_128(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_carrot_2047_around_freezer_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(food_carrot,freezer_instance)
        else:
            exp(food_carrot,freezer_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,freezer_instance]=True
        close[freezer_instance,food_carrot]=True
    

behavior find_food_potato_2066_around_kitchen_counter_132(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
def has_vegetable(item: item):
    # Determine if an item is a vegetable
    return is_food_vegetable(item)

behavior add_vegetables_to_pot(pot: item):
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a food item that is a vegetable

        achieve inside(vegetable, pot)
        # Place the vegetable into the pot

behavior fill_pot_with_water(pot: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        fill_pot_with_water(pot) 
        # Fill the pot with water

        add_vegetables_to_pot(pot) 
        # Add the vegetables to the pot

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_vegetable(item: item):
    # Determine if an item is a vegetable
    return is_food_vegetable(item)

behavior add_vegetables_to_pot(pot: item):
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a food item that is a vegetable

        achieve inside(vegetable, pot)
        # Place the vegetable into the pot

behavior fill_pot_with_water(pot: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        fill_pot_with_water(pot) 
        # Fill the pot with water

        add_vegetables_to_pot(pot) 
        # Add the vegetables to the pot

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_128)exp(food_vegetable_2072, kitchen_counter_128)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_2093)putin_executor(food_vegetable_2072, pot_2093)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is no longer close stove_2090.Robot is no longer close pot_54.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find cutting_board_2080. Find food_orange_2008. Find spectacles_2106. Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
exp(food_vegetable_2072, kitchen_counter_128)
Failed to find food_vegetable_2072 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(freezer_140)switchoff_executor(freezer_140)open_executor(freezer_140)exp(food_vegetable_2072, freezer_140)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_2093)putin_executor(food_vegetable_2072, pot_2093)
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_128.Robot is no longer close floor_15.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(freezer_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close pot_2093. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
switchoff_executor(freezer_140)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(freezer_140)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(food_vegetable_2072, freezer_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
open_executor(pot_2093)grab_executor(food_vegetable_2072)putin_executor(food_vegetable_2072, pot_2093)
##############################
From agent.py
open_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. food_vegetable_2072 released by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_cup_2088_around_bathroom_counter_306(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cup,bathroom_counter_instance)
        else:
            exp(cup,bathroom_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_water_boiling(pot:item):
    # Function to check if there is water boiling in the pot
    return has_water(pot)

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Ensure the pot is on the stove

        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select pot with water

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090

        boil_vegetables(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_water_boiling(pot:item):
    # Function to check if there is water boiling in the pot
    return has_water(pot)

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Ensure the pot is on the stove

        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select pot with water

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090

        boil_vegetables(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)put_executor(pot_2093, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close freezer_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
close_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From evaluation.py
cdl_dataset/dataset/Cook_some_food/g1.txt
Checking k1
missed actions: 
missed action num: 0
##############################
From evaluation.py
cdl_dataset/dataset/Cook_some_food/g1.txt
Checking k2
missed actions: switchoff_executor(stove_2090);open_executor(stove_2090);grab_executor(pot_2093);putin_executor(pot_2093, stove_2090);close_executor(stove_2090);switchon_executor(stove_2090);
missed action num: 6
##############################
