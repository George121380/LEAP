From agent.py
Reset goals: The sub-goals are: 
['Slice the bread and toast it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_kitchen_counter_122(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_bread_sliced_and_toasted(bread: item, toaster: item):
    # Function to check if the bread is sliced and toasted
    symbol sliced_and_toasted = cut(bread) and inside(bread, toaster)
    return sliced_and_toasted

behavior slice_bread(bread: item):
    body:
        achieve cut(bread)
        # Slice the bread

behavior toast_bread(bread: item, toaster: item):
    body:
        achieve inside(bread, toaster) 
        # Place the sliced bread inside the toaster
        achieve is_on(toaster) 
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        if not is_bread_sliced_and_toasted(bread, toaster):
            slice_bread(bread) 
            # Slice the bread if not already sliced
            toast_bread(bread, toaster) 
            # Toast the bread

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_kitchen_counter_122(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_cutting_board_2123_around_kitchen_counter_122(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_basket_for_clothes_2078_around_washing_machine_2079(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(basket_for_clothes,washing_machine_instance)
        else:
            exp(basket_for_clothes,washing_machine_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,washing_machine_instance]=True
        close[washing_machine_instance,basket_for_clothes]=True
    

#exp_behavior_end

#goal_representation
 
def can_cut_bread(bread: item):
    # Check if the bread can be cut
    return is_food_bread(bread) and cuttable(bread)

behavior slice_bread(bread: item):
    body:
        achieve cut(bread)
        # Ensure the bread is cut

behavior toast_bread(bread: item, toaster: item):
    body:
        achieve inside(bread, toaster)
        # Place the bread inside the toaster
        achieve closed(toaster)
        # Close the toaster door if applicable
        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        if not visited(bread):
            observe(bread, "Check if the bread is accessible")
        # Observe the bread location if it hasnt been visited

        if can_cut_bread(bread):
            slice_bread(bread)
        # Slice the bread if it is cuttable

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        toast_bread(bread, toaster)
        # Toast the bread using the toaster

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Slice the bread and toast it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_kitchen_counter_122(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_bread_sliced_and_toasted(bread: item, toaster: item):
    # Determine if the bread is sliced and toasted
    symbol sliced_and_toasted = cut(bread) and inside(bread, toaster)
    return sliced_and_toasted

behavior toast_bread(bread: item, toaster: item):
    body:
        achieve inside(bread, toaster)
        # Place the bread inside the toaster

        achieve is_on(toaster)
        # Turn on the toaster

behavior slice_bread(bread: item):
    body:
        achieve cut(bread)
        # Slice the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select an item that is a bread

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster to toast the bread
        
        if not is_bread_sliced_and_toasted(bread, toaster):
            # If bread is not sliced and toasted, proceed
            slice_bread(bread)
            toast_bread(bread, toaster)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_kitchen_counter_122(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_bread(bread:item):
    body:
        achieve cut(bread)
        # Ensure the bread is sliced

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place sliced bread inside the toaster

        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the item that is bread

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        slice_bread(bread)
        # Slice the bread

        toast_bread(bread, toaster)
        # Toast the sliced bread

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Slice the bread and toast it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_kitchen_counter_122(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_bread(bread: item):
    body:
        achieve cut(bread)
        # Ensure the bread is sliced

behavior toast_bread(bread: item, toaster: item):
    body:
        achieve inside(bread, toaster)
        # Place the sliced bread inside the toaster

        achieve is_on(toaster)
        # Turn on the toaster to start toasting the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        slice_bread(bread)
        # Slice the bread

        toast_bread(bread, toaster)
        # Toast the sliced bread

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_kitchen_counter_122(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior slice_bread(bread:item):
    body:
        achieve cut(bread)
        # Ensure the bread is sliced

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the sliced bread inside the toaster
        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread to be sliced and toasted

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        slice_bread(bread)
        # Slice the bread

        toast_bread(bread, toaster)
        # Toast the sliced bread in the toaster
#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_breakfast/g1.txt
Checking k1
missed actions: walk_executor(food_bread_2084);grab_executor(food_bread_2084);walk_executor(cutting_board_2123);put_executor(food_bread_2084, cutting_board_2123);walk_executor(knife_2122);grab_executor(knife_2122);walk_executor(food_bread_2084);cut_executor(food_bread_2084);grab_executor(food_bread_2084);walk_executor(toaster_132);putin_executor(food_bread_2084, toaster_132);
missed action num: 11
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_breakfast/g1.txt
Checking k1
missed actions: walk_executor(food_bread_2084);grab_executor(food_bread_2084);walk_executor(cutting_board_2123);put_executor(food_bread_2084, cutting_board_2123);walk_executor(knife_2122);grab_executor(knife_2122);walk_executor(food_bread_2084);cut_executor(food_bread_2084);grab_executor(food_bread_2084);walk_executor(toaster_132);putin_executor(food_bread_2084, toaster_132);
missed action num: 11
##############################
