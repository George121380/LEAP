From agent.py
Reset goals: The sub-goals are: 
['1. Go to the bathroom and plug the sink drain.', '2. Add soap to the sink and fill it with water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_napkin_2005_around_cupboard_229(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(napkin,cupboard_instance)
        else:
            exp(napkin,cupboard_instance)
    eff:
        unknown[napkin]=False
        close[napkin,cupboard_instance]=True
        close[cupboard_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
behavior plug_sink_drain(sink:item):
    body:
        achieve plugged(sink) 
        # Plug the sink drain

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        achieve close_char(char, sink)
        # Move closer to the sink in the bathroom

        plug_sink_drain(sink)
        # Plug the sink drain
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_towel_rack_31_around_wallshelf_35(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(towel_rack,wallshelf_instance)
        else:
            exp(towel_rack,wallshelf_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,wallshelf_instance]=True
        close[wallshelf_instance,towel_rack]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Bind to the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Bind to the sink inside the bathroom

        achieve plugged(sink)
        # Achieve the state of the sink being plugged

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_soapy_water_in_sink(sink:item, soap:item):
    body:
        achieve open(sink)
        # Ensure the sink is open before filling it with water
        achieve has_water(sink)
        # Ensure the sink has water in it
        achieve inside(soap, sink)
        # Place the soap inside the sink with water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and is_bathroom(sink)
        # Select the sink in the bathroom

        bind soap: item where:
            is_soap(soap)
        # Select the soap to be used for creating soapy water

        prepare_soapy_water_in_sink(sink, soap)
        # Use the behavior to prepare a sink of soapy water
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_sink_of_soapy_water(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the sink

        achieve has_water(sink)
        # Fill the sink with water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and is_bathroom(sink)
        # Select a sink in the bathroom
        
        bind soap: item where:
            is_soap(soap)
        # Select a soap item to use

        prepare_sink_of_soapy_water(sink, soap)
        # Prepare the sink in the bathroom with soapy water
#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Fill the bathroom sink with water and add soap.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior fill_sink_with_water_and_soap(sink:item, soap:item):
    body:
        assert is_sink(sink) # Confirm the item is a sink
        assert is_soap(soap) # Confirm the item is soap
        achieve has_water(sink) # Fill the sink with water
        achieve inside(soap, sink) # Add soap to the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink

        bind soap: item where:
            is_soap(soap)
        # Select the soap

        fill_sink_with_water_and_soap(sink, soap)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior fill_sink_with_water_and_soap(sink:item, soap:item):
    body:
        assert is_sink(sink) # Confirm the item is a sink
        assert is_soap(soap) # Confirm the item is soap
        achieve has_water(sink) # Fill the sink with water
        achieve inside(soap, sink) # Add soap to the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink

        bind soap: item where:
            is_soap(soap)
        # Select the soap

        fill_sink_with_water_and_soap(sink, soap)
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(bathroom_cabinet_40)open_executor(bathroom_cabinet_40)exp(soap_2053, bathroom_cabinet_40)walk_executor(soap_2053)grab_executor(soap_2053)walk_executor(sink_42)putin_executor(soap_2053, sink_42)
##############################
From agent.py
walk_executor(faucet_43)
Find basket_for_clothes_2006. Find towel_rack_34. Find towel_rack_32. Find towel_rack_31. Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Find drawing_176. Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
walk_executor(bathroom_cabinet_40)
Robot is inside bathroom_1. Robot is close bathroom_cabinet_40. Robot is close wall_12. Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From agent.py
open_executor(bathroom_cabinet_40)
Robot is inside bathroom_1. Robot is close bathroom_cabinet_40. Robot is close wall_12. 
##############################
From agent.py
exp(soap_2053, bathroom_cabinet_40)
Failed to find soap_2053 around bathroom_cabinet_40. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_101)open_executor(bookshelf_101)exp(soap_2053, bookshelf_101)walk_executor(soap_2053)grab_executor(soap_2053)walk_executor(sink_42)putin_executor(soap_2053, sink_42)
##############################
From agent.py
walk_executor(bookshelf_101)
Find drawing_174. Robot is inside bedroom_67. Robot is close floor_72. Robot is close photoframe_185. Robot is close bookshelf_101. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_cabinet_40.Robot is no longer close wall_12.
##############################
From agent.py
open_executor(bookshelf_101)
Robot is inside bedroom_67. Robot is close floor_72. Robot is close photoframe_185. Robot is close bookshelf_101. 
##############################
From agent.py
exp(soap_2053, bookshelf_101)
Failed to find soap_2053 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(soap_2053, cupboard_229)walk_executor(soap_2053)grab_executor(soap_2053)walk_executor(sink_42)putin_executor(soap_2053, sink_42)
##############################
From agent.py
walk_executor(cupboard_229)
Find tray_296. Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. Robot is no longer inside bedroom_67.Robot is no longer close floor_72.Robot is no longer close photoframe_185.Robot is no longer close bookshelf_101.
##############################
From agent.py
open_executor(cupboard_229)
Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. 
##############################
From agent.py
exp(soap_2053, cupboard_229)
Failed to find soap_2053 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(towel_rack_31)exp(soap_2053, towel_rack_31)walk_executor(soap_2053)grab_executor(soap_2053)walk_executor(sink_42)putin_executor(soap_2053, sink_42)
##############################
From agent.py
walk_executor(towel_rack_31)
Find towel_2056. Robot is inside bathroom_1. Robot is close towel_rack_31. Robot is no longer inside dining_room_201.Robot is no longer close wall_211.Robot is no longer close cupboard_229.
##############################
From agent.py
exp(soap_2053, towel_rack_31)
Failed to find soap_2053 around towel_rack_31. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)exp(soap_2053, sink_42)walk_executor(soap_2053)grab_executor(soap_2053)walk_executor(sink_42)putin_executor(soap_2053, sink_42)
##############################
From agent.py
walk_executor(sink_42)
Find detergent_2084. Find soap_2053. Find cleaning_solution_2073. Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close sink_42. Robot is no longer close towel_rack_31.
##############################
From agent.py
exp(soap_2053, sink_42)
Find soap_2053. 
##############################
From agent.py-> find a plan in act()
walk_executor(soap_2053)grab_executor(soap_2053)walk_executor(sink_42)putin_executor(soap_2053, sink_42)
##############################
From agent.py
walk_executor(soap_2053)
Robot is inside bathroom_1. Robot is close sink_42. Robot is close soap_2053. Robot is no longer close bathroom_counter_41.
##############################
From agent.py
grab_executor(soap_2053)
Robot is inside bathroom_1. Robot is close sink_42. Robot is close soap_2053. Grabbing soap_2053 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot is inside bathroom_1. Robot is close sink_42. Robot is close soap_2053. Robot is close bathroom_counter_41. 
##############################
From agent.py
putin_executor(soap_2053, sink_42)
Robot is inside bathroom_1. Robot is close sink_42. Robot is close soap_2053. Robot is close bathroom_counter_41. soap_2053 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Clean_the_bathroom/g2.txt
Checking k1
missed actions: 
missed action num: 0
##############################
