From agent.py
Reset goals: The sub-goals are: 
['Get a cup and fill it with water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def find_cup(cup:item):
    # Check if the item is a cup
    return is_cup(cup)

def find_sink(sink:item):
    # Check if the item is a sink
    return is_sink(sink)

behavior fill_cup_with_water(cup:item, sink:item):
    body:
        achieve close_char(char, sink) 
        # Move character closer to the sink
        observe(sink, "Check if there is a cup next to the sink or inside it")
        # Observe to confirm cups location

        if not inside(cup, sink):
            achieve_once inhand(cup) 
            # Temporarily hold the cup
            achieve close_char(char, cup) 
            # Move character close to the cup

        achieve inside(cup, sink)
        # Place the cup inside the sink
        water(cup) 
        # Fill the cup with water

behavior __goal__():
    body:
        bind cup: item where:
            find_cup(cup)
        # Select an item that is a cup

        bind sink: item where:
            find_sink(sink)
        # Select an item that is a sink

        fill_cup_with_water(cup, sink)
        # Fill the selected cup with water using the sink

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_detergent_2084_around_cupboard_229(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(detergent,cupboard_instance)
        else:
            exp(detergent,cupboard_instance)
    eff:
        unknown[detergent]=False
        close[detergent,cupboard_instance]=True
        close[cupboard_instance,detergent]=True
    

#goal_representation
 
def find_cup(cup:item):
    # Check if the item is a cup
    return is_cup(cup)

def find_sink(sink:item):
    # Check if the item is a sink
    return is_sink(sink)

behavior fill_cup_with_water(cup:item, sink:item):
    body:
        achieve close_char(char, sink) 
        # Move character closer to the sink
        observe(sink, "Check if there is a cup next to the sink or inside it")
        # Observe to confirm cups location

        if not inside(cup, sink):
            achieve_once inhand(cup) 
            # Temporarily hold the cup
            achieve close_char(char, cup) 
            # Move character close to the cup

        achieve inside(cup, sink)
        # Place the cup inside the sink
        is_faucet(cup) 
        # Fill the cup with water

behavior __goal__():
    body:
        bind cup: item where:
            find_cup(cup)
        # Select an item that is a cup

        bind sink: item where:
            find_sink(sink)
        # Select an item that is a sink

        fill_cup_with_water(cup, sink)
        # Fill the selected cup with water using the sink

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Expr statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
