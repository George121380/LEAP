From agent.py
Reset goals: The sub-goals are: 
['Slice the bread and toast it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_bread(bread:item):
    body:
        achieve cut(bread)
        # Slice the bread

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the bread inside the toaster
        achieve closed(toaster)
        # Close the toaster
        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread to be sliced and toasted

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        slice_bread(bread)
        toast_bread(bread, toaster)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation

def is_toaster_plugged_on(toaster:item):
    # Check if the toaster is plugged in, on, closed, and not sleeping
    symbol toaster_ready = plugged(toaster) and is_on(toaster)
    return toaster_ready

behavior slice_bread(bread:item):
    body:
        achieve cut(bread)

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Make sure the bread is inside the toaster
        achieve is_on(toaster)
        # Turn on the toaster

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster
        
        slice_bread(bread)
        # Slice the bread

        if is_toaster_plugged_on(toaster):
            toast_bread(bread, toaster)
        else:
            achieve plugged(toaster)
            toast_bread(bread, toaster)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "slice the bread and toast it." ?
Answer: Cut the bread and put it in the toaster. Turn on the toaster.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_towel_rack_34_around_bathroom_counter_41(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel_rack,bathroom_counter_instance)
        else:
            exp(towel_rack,bathroom_counter_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_bread(bread:item, knife:item):
    body:
        achieve cut(bread)
        # Ensure the bread is sliced using the knife

behavior toast_sliced_bread(sliced_bread:item, toaster:item):
    body:
        achieve inside(sliced_bread, toaster)
        # Place the sliced bread inside the toaster
        achieve plugged(toaster)
        # Ensure the toaster is plugged in
        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread item

        bind knife: item where:
            is_knife(knife)
        # Select the knife item

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster item

        slice_bread(bread, knife)
        toast_sliced_bread(bread, toaster)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def has_switch_and_plug(toaster: item):
    # Determine if the toaster has a switch and is plugged in
    symbol has_switch = has_switch(toaster)
    symbol plugged_in = plugged(toaster)
    return has_switch and plugged_in

behavior cut_and_toast_bread(bread: item, toaster: item):
    body:
        achieve cut(bread) # Slice the bread
        achieve inside(bread, toaster) # Place the sliced bread inside the toaster
        
        if has_switch_and_plug(toaster):
            achieve is_on(toaster) # Turn on the toaster if it has a switch and is plugged in

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select a bread item

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster

        cut_and_toast_bread(bread, toaster)
 
#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the bread, put it in the toaster, and turn on the toaster.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_bread(bread:item):
    body:
        achieve cut(bread)

behavior place_bread_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior start_toaster(toaster:item):
    body:
        achieve plugged(toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        cut_bread(bread)
        place_bread_in_toaster(bread, toaster)
        start_toaster(toaster)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_bread(bread:item):
    body:
        achieve cut(bread)

behavior put_bread_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior turn_on_toaster(toaster:item):
    body:
        achieve is_on(toaster)
        
behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        cut_bread(bread)
        put_bread_in_toaster(bread, toaster)
        turn_on_toaster(toaster)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the bread, put it in the toaster, and turn on the toaster.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_bread(bread:item):
    body:
        achieve cut(bread)

behavior place_bread_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior turn_on_toaster(toaster:item):
    body:
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread item

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        cut_bread(bread)
        place_bread_in_toaster(bread, toaster)
        turn_on_toaster(toaster)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_bread(bread:item):
    body:
        achieve cut(bread)
        
behavior put_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior turn_on_toaster(toaster:item):
    body:
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        cut_bread(bread)
        put_in_toaster(bread, toaster)
        turn_on_toaster(toaster)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_breakfast/g1.txt
Checking k1
missed actions: walk_executor(fridge_289);switchoff_executor(fridge_289);open_executor(fridge_289);walk_executor(food_bread_2012);grab_executor(food_bread_2012);walk_executor(cutting_board_2051);put_executor(food_bread_2012, cutting_board_2051);walk_executor(knife_2050);grab_executor(knife_2050);walk_executor(food_bread_2012);cut_executor(food_bread_2012);grab_executor(food_bread_2012);walk_executor(toaster_292);putin_executor(food_bread_2012, toaster_292);switchon_executor(toaster_292);
missed action num: 15
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_breakfast/g1.txt
Checking k1
missed actions: walk_executor(fridge_289);switchoff_executor(fridge_289);open_executor(fridge_289);walk_executor(food_bread_2012);grab_executor(food_bread_2012);walk_executor(cutting_board_2051);put_executor(food_bread_2012, cutting_board_2051);walk_executor(knife_2050);grab_executor(knife_2050);walk_executor(food_bread_2012);cut_executor(food_bread_2012);grab_executor(food_bread_2012);walk_executor(toaster_292);putin_executor(food_bread_2012, toaster_292);switchon_executor(toaster_292);
missed action num: 15
##############################
