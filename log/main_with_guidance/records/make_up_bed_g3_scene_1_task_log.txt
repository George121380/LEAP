From agent.py
Reset goals: The sub-goals are: 
['Prepare a cup of water on the nightstand.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2049_around_nightstand_192(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(cup,nightstand_instance)
        else:
            exp(cup,nightstand_instance)
    eff:
        unknown[cup]=False
        close[cup,nightstand_instance]=True
        close[nightstand_instance,cup]=True
    

behavior find_cup_2132_around_nightstand_192(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(cup,nightstand_instance)
        else:
            exp(cup,nightstand_instance)
    eff:
        unknown[cup]=False
        close[cup,nightstand_instance]=True
        close[nightstand_instance,cup]=True
    

#exp_behavior_end

#goal_representation
yaml
def is_ready_for_bed(char:character):
    # Function to check if the character is ready for bed
    symbol ready=achieve sleeping(char)
    return ready

behavior place_water_on_nightstand(cup:item, nightstand:item):
    body:
        achieve on(cup, nightstand)
        # Place the cup on the nightstand

behavior __goal__():
    body:
        bind nightstand: item where:
            is_nightstand(nightstand)
        # Select the nightstand
        
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select a cup that has water

        place_water_on_nightstand(cup, nightstand)
        # Place the cup of water on the nightstand
        
        if is_ready_for_bed(char):
            assert sleeping(char)
        # Ensure the character is ready for bed

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'yaml') at line 5519, column 1.
Expected one of: 
	* DEF
	* _PRAGMA_KEYWORD
	* GOAL
	* _NEWLINE
	* OBJECTS
	* DOMAIN
	* FEATURE
	* GENERATOR
	* IMPORT
	* INIT
	* UNDIRECTED_GENERATOR
	* CONTROLLER
	* BEHAVIOR
	* TYPEDEF
	* $END
	* INCLUDE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2132_around_nightstand_192(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(cup,nightstand_instance)
        else:
            exp(cup,nightstand_instance)
    eff:
        unknown[cup]=False
        close[cup,nightstand_instance]=True
        close[nightstand_instance,cup]=True
    

behavior find_cup_2133_around_nightstand_192(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(cup,nightstand_instance)
        else:
            exp(cup,nightstand_instance)
    eff:
        unknown[cup]=False
        close[cup,nightstand_instance]=True
        close[nightstand_instance,cup]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind nightstand: item where:
            is_nightstand(nightstand)
        # Select the nightstand
        
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select a cup that has water

        place_water_on_nightstand(cup, nightstand)
        # Place the cup of water on the nightstand
        
        if is_ready_for_bed(char):
            assert sleeping(char)
        # Ensure the character is ready for bed

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function place_water_on_nightstand not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_keyboard_211_around_computer_276(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

behavior find_cup_2134_around_nightstand_192(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(cup,nightstand_instance)
        else:
            exp(cup,nightstand_instance)
    eff:
        unknown[cup]=False
        close[cup,nightstand_instance]=True
        close[nightstand_instance,cup]=True
    

behavior find_cup_2133_around_nightstand_192(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(cup,nightstand_instance)
        else:
            exp(cup,nightstand_instance)
    eff:
        unknown[cup]=False
        close[cup,nightstand_instance]=True
        close[nightstand_instance,cup]=True
    

#goal_representation

behavior __goal__():
    body:
        bind nightstand: item where:
            is_nightstand(nightstand)
        # Select the nightstand
        
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select a cup that has water

        is_table(cup, nightstand)
        # Place the cup of water on the nightstand
        
        if is_ready_for_bed(char):
            assert sleeping(char)
        # Ensure the character is ready for bed

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2132_around_nightstand_192(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(cup,nightstand_instance)
        else:
            exp(cup,nightstand_instance)
    eff:
        unknown[cup]=False
        close[cup,nightstand_instance]=True
        close[nightstand_instance,cup]=True
    

behavior find_food_butter_2007_around_cupboard_118(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
def locate_nightstand(nightstand:item):
    # Checks if a given item is a nightstand
    symbol is_nightstand_location = is_nightstand(nightstand)
    return is_nightstand_location

def is_cup_clean(cup: item):
    # Checks if the cup is clean
    symbol cup_is_clean = clean(cup)
    return cup_is_clean

behavior prepare_cup_of_water(cup: item, nightstand: item):
    body:
        if not is_cup_clean(cup):
            wash(cup)
            # Wash the cup if it is not already clean
        achieve_on(cup, nightstand)
        # Place the cup on the nightstand
        achieve has_water(cup)
        # Ensure the cup has water

behavior __goal__():
    body:
        bind nightstand: item where:
            locate_nightstand(nightstand)
        # Select a nightstand
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        prepare_cup_of_water(cup, nightstand)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_on not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2133_around_nightstand_192(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(cup,nightstand_instance)
        else:
            exp(cup,nightstand_instance)
    eff:
        unknown[cup]=False
        close[cup,nightstand_instance]=True
        close[nightstand_instance,cup]=True
    

behavior find_cup_2134_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation
 
def locate_nightstand(nightstand:item):
    # Checks if a given item is a nightstand
    symbol is_nightstand_location = is_nightstand(nightstand)
    return is_nightstand_location

def is_cup_clean(cup: item):
    # Checks if the cup is clean
    symbol cup_is_clean = clean(cup)
    return cup_is_clean

behavior prepare_cup_of_water(cup: item, nightstand: item):
    body:
        if not is_cup_clean(cup):
            wash(cup)
            # Wash the cup if it is not already clean
        is_table(cup, nightstand)
        # Place the cup on the nightstand
        achieve has_water(cup)
        # Ensure the cup has water

behavior __goal__():
    body:
        bind nightstand: item where:
            locate_nightstand(nightstand)
        # Select a nightstand
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        prepare_cup_of_water(cup, nightstand)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Number of arguments does not match the number of types: 2 vs 1. Args: (VariableExpression<V::cup>, VariableExpression<V::nightstand>), Types: (ObjectType<item>,)
##############################
