From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt and the skirt.', '2. Iron the shirt.', '3. Iron the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_dresser_274(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_shirt,dresser_instance)
        else:
            exp(clothes_shirt,dresser_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,dresser_instance]=True
        close[dresser_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_dresser_274(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_skirt,dresser_instance)
        else:
            exp(clothes_skirt,dresser_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,dresser_instance]=True
        close[dresser_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def is_clothes_item_found(item: item, type_check_function):
    symbol is_found=exists o: item : type_check_function(o) and visited(o)
    return is_found

behavior find_clothes(item_type_check_function):
    body:
        foreach item: item:
            if item_type_check_function(item) and not visited(item):
                observe(item, "Check if this is the desired clothing item")

behavior move_close_to_clothes(item:item):
    body:
        achieve close_char(char, item)

behavior __goal__():
    body:
        if exists shirt: item : is_clothes_shirt(shirt) and is_clothes_item_found(shirt, is_clothes_shirt):
            bind shirt: item where:
                is_clothes_shirt(shirt) and is_clothes_item_found(shirt, is_clothes_shirt)
            move_close_to_clothes(shirt)
        else:
            find_clothes(is_clothes_shirt)

        if exists skirt: item : is_clothes_skirt(skirt) and is_clothes_item_found(skirt, is_clothes_skirt):
            bind skirt: item where:
                is_clothes_skirt(skirt) and is_clothes_item_found(skirt, is_clothes_skirt)
            move_close_to_clothes(skirt)
        else:
            find_clothes(is_clothes_skirt)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('RPAR', ')') at line 5520, column 58.
Expected one of: 
	* COLON
Previous tokens: [Token('VARNAME', 'type_check_function')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_shirt_2158_around_dresser_274(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_shirt,dresser_instance)
        else:
            exp(clothes_shirt,dresser_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,dresser_instance]=True
        close[dresser_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_dresser_274(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_skirt,dresser_instance)
        else:
            exp(clothes_skirt,dresser_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,dresser_instance]=True
        close[dresser_instance,clothes_skirt]=True
    

#goal_representation
 
def is_clothes_item_found(item: item, type_check_function):
    # Check if a clothing item of specific type is found and visited
    symbol is_found=exists o: item : type_check_function(o) and visited(o)
    return is_found

behavior find_clothes(item_type_check_function):
    body:
        # Find and observe unvisited items of a specific clothing type
        foreach item: item:
            if item_type_check_function(item) and not visited(item):
                observe(item, "Check if this is the desired clothing item")

behavior move_close_to_clothes(item:item):
    body:
        # Move character close to the specified clothing item
        achieve close_char(char, item)

behavior __goal__():
    body:
        if exists shirt: item : is_clothes_shirt(shirt) and is_clothes_item_found(shirt, is_clothes_shirt):
            # If a shirt is found and visited, move close to it
            bind shirt: item where:
                is_clothes_shirt(shirt) and is_clothes_item_found(shirt, is_clothes_shirt)
            move_close_to_clothes(shirt)
        else:
            # Find the shirt if not located yet
            find_clothes(is_clothes_shirt)

        if exists skirt: item : is_clothes_skirt(skirt) and is_clothes_item_found(skirt, is_clothes_skirt):
            # If a skirt is found and visited, move close to it
            bind skirt: item where:
                is_clothes_skirt(skirt) and is_clothes_item_found(skirt, is_clothes_skirt)
            move_close_to_clothes(skirt)
        else:
            # Find the skirt if not located yet
            find_clothes(is_clothes_skirt)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('RPAR', ')') at line 5520, column 58.
Expected one of: 
	* COLON
Previous tokens: [Token('VARNAME', 'type_check_function')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_shirt_2158_around_cupboard_118(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(clothes_shirt,cupboard_instance)
        else:
            exp(clothes_shirt,cupboard_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,cupboard_instance]=True
        close[cupboard_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_dresser_274(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_skirt,dresser_instance)
        else:
            exp(clothes_skirt,dresser_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,dresser_instance]=True
        close[dresser_instance,clothes_skirt]=True
    

#goal_representation
 
def is_clothes_item_found(item: item, type_check_function):
    # Check if a clothing item of specific type is found and visited
    symbol is_found=exists o: item : type_check_function(o) and visited(o)
    return is_found

behavior find_clothes(item_type_check_function):
    body:
        # Find and observe unvisited items of a specific clothing type
        foreach item: item:
            if item_type_check_function(item) and not visited(item):
                observe(item, "Check if this is the desired clothing item")

behavior move_close_to_clothes(item:item):
    body:
        # Move character close to the specified clothing item
        achieve close_char(char, item)

behavior __goal__():
    body:
        if exists shirt_item: item : is_clothes_shirt(shirt_item) and is_clothes_item_found(shirt_item, is_clothes_shirt):
            # If a shirt is found and visited, move close to it
            bind shirt: item where:
                is_clothes_shirt(shirt) and is_clothes_item_found(shirt, is_clothes_shirt)
            move_close_to_clothes(shirt)
        else:
            # Find the shirt if not located yet
            find_clothes(is_clothes_shirt)

        if exists skirt_item: item : is_clothes_skirt(skirt_item) and is_clothes_item_found(skirt_item, is_clothes_skirt):
            # If a skirt is found and visited, move close to it
            bind skirt: item where:
                is_clothes_skirt(skirt) and is_clothes_item_found(skirt, is_clothes_skirt)
            move_close_to_clothes(skirt)
        else:
            # Find the skirt if not located yet
            find_clothes(is_clothes_skirt)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_cupboard_118(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(clothes_shirt,cupboard_instance)
        else:
            exp(clothes_shirt,cupboard_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,cupboard_instance]=True
        close[cupboard_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_dresser_274(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_skirt,dresser_instance)
        else:
            exp(clothes_skirt,dresser_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,dresser_instance]=True
        close[dresser_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes_on_table(table: item):
    # Function to check if there are a shirt and a skirt on a specified table
    symbol has_clothes=exists o: item: (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item: is_table(table) and has_clothes_on_table(table):
            # If we have already found the table with the shirt and skirt, we can directly approach it
            bind table: item where:
                is_table(table) and has_clothes_on_table(table)
            achieve close_char(char, table)

        else:
            # Check all tables in the scene that have not been visited
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check is there any clothes on the table")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_clothes_on_table(table: item):
    # Function to check if there are a shirt and a skirt on a specified table
    symbol has_clothes=exists o: item: (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item: is_table(table) and has_clothes_on_table(table):
            # If we have already found the table with the shirt and skirt, we can directly approach it
            bind table: item where:
                is_table(table) and has_clothes_on_table(table)
            achieve close_char(char, table)

        else:
            # Check all tables in the scene that have not been visited
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check is there any clothes on the table")

##############################
From agent.py-> find a plan in act()
walk_executor(table_114)obs(table_114, Check is there any clothes on the table)walk_executor(table_199)obs(table_199, Check is there any clothes on the table)walk_executor(table_270)obs(table_270, Check is there any clothes on the table)
##############################
From agent.py
walk_executor(table_114)
Find mat_102. Find dry_pasta_2114. Find food_food_2021. Find drawing_110. Find drawing_111. Find knife_2122. Find cup_2133. Find table_cloth_2005. Find food_bread_2084. Find pillow_104. Find cup_2049. Find box_2038. Find clothes_hat_2117. Find clothes_gloves_2118. Find milk_2115. Find pillow_103. Find pillow_105. Find pillow_106. Find lighter_2004. Find lighter_2039. Find cup_2134. Find check_2058. Find cup_2132. Robot is inside dining_room_41. Robot is close table_114. Robot is close mat_102. Robot is close floor_47. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g5.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g5.txt
Checking k2
missed actions: walk_executor(clothes_skirt_2160);grab_executor(clothes_skirt_2160);walk_executor(ironing_board_2144);put_executor(clothes_skirt_2160, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_skirt_2160);put_executor(iron_2161, clothes_skirt_2160);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From agent.py
obs(table_114, Check is there any clothes on the table)
Get this information:  dry_pasta_2114 is inside table_114. food_food_2021 is on table_114. table_114 is facing drawing_110. table_114 is facing drawing_111. knife_2122 is on table_114. cup_2133 is on table_114. table_cloth_2005 is on table_114. food_bread_2084 is inside table_114. cup_2049 is on table_114. box_2038 is on table_114. clothes_hat_2117 is on table_114. milk_2115 is inside table_114. cup_2134 is on table_114. check_2058 is on table_114. clothes_gloves_2118 is on table_114. table_114 is inside dining_room_41. cup_2132 is on table_114. table_114 is on mat_102. table_114 is on floor_47. table_114 is close to cup_2049. table_114 is close to check_2058. table_114 is close to food_bread_2084. table_114 is close to floor_44. table_114 is close to floor_47. table_114 is close to floor_48. table_114 is close to floor_50. table_114 is close to dry_pasta_2114. table_114 is close to milk_2115. table_114 is close to clothes_hat_2117. table_114 is close to clothes_gloves_2118. table_114 is close to knife_2122. table_114 is close to cup_2132. table_114 is close to cup_2133. table_114 is close to cup_2134. table_114 is close to table_cloth_2005. table_114 is close to food_food_2021. table_114 is close to mat_102. table_114 is close to pillow_103. table_114 is close to pillow_104. table_114 is close to pillow_105. table_114 is close to pillow_106. table_114 is close to bench_113. table_114 is close to bench_115. table_114 is close to box_2038. table_114 is close to character_240. table_114 is DIRTY.
##############################
From agent.py
walk_executor(table_199)
Find mat_203. Find wooden_spoon_2000. Find drawing_201. Find drawing_202. Find tea_bag_2023. Robot is inside bedroom_162. Robot is close table_199. Robot is no longer inside dining_room_41.Robot is no longer close table_114.Robot is no longer close mat_102.Robot is no longer close floor_47.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g5.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g5.txt
Checking k2
missed actions: walk_executor(clothes_skirt_2160);grab_executor(clothes_skirt_2160);walk_executor(ironing_board_2144);put_executor(clothes_skirt_2160, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_skirt_2160);put_executor(iron_2161, clothes_skirt_2160);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From agent.py
obs(table_199, Check is there any clothes on the table)
Get this information:  wooden_spoon_2000 is on table_199. table_199 is facing drawing_201. table_199 is facing drawing_202. table_199 is facing computer_209. tea_bag_2023 is on table_199. table_199 is close to couch_198. table_199 is close to floor_167. table_199 is close to floor_168. table_199 is close to tea_bag_2023. table_199 is close to mat_203. table_199 is close to floor_172. table_199 is close to floor_171. table_199 is close to wooden_spoon_2000. table_199 is close to wall_177. table_199 is close to character_240. table_199 is inside bedroom_162. table_199 is DIRTY.
##############################
From agent.py
walk_executor(table_270)
Find shampoo_2019. Find pillow_286. Find pencil_2014. Find pillow_287. Find brush_2002. Find drawing_288. Find shoes_2033. Find phone_2017. Robot is inside home_office_241. Robot is close couch_269. Robot is close table_270. Robot is no longer inside bedroom_162.Robot is no longer close table_199.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g5.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g5.txt
Checking k2
missed actions: walk_executor(clothes_skirt_2160);grab_executor(clothes_skirt_2160);walk_executor(ironing_board_2144);put_executor(clothes_skirt_2160, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_skirt_2160);put_executor(iron_2161, clothes_skirt_2160);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From agent.py
obs(table_270, Check is there any clothes on the table)
Get this information:  table_270 is close to shampoo_2019. table_270 is close to floor_264. table_270 is close to floor_265. table_270 is close to floor_266. table_270 is close to floor_267. table_270 is close to couch_269. table_270 is close to wall_248. table_270 is close to pillow_286. table_270 is close to orchid_285. table_270 is close to pencil_2014. table_270 is close to pillow_287. table_270 is close to character_240. table_270 is inside home_office_241. table_270 is inside couch_269. shampoo_2019 is on table_270. pencil_2014 is on table_270. orchid_285 is on table_270. table_270 is facing drawing_288. table_270 is facing television_281. table_270 is facing computer_276. table_270 is CLEAN.
##############################
From agent.py
Human Instruction: You need to continue searching for the shirt and skirt. None of the observed tables have been confirmed to contain those clothing items. Keep observing other tables that have not been visited yet to locate the shirt and skirt.

The actions you have taken:
Action 1: Walk to table_114.
Action 2: Observe around table_114 with the question of Check is there any clothes on the table.
Action 3: Walk to table_199.
Action 4: Observe around table_199 with the question of Check is there any clothes on the table.
Action 5: Walk to table_270.
Action 6: Observe around table_270 with the question of Check is there any clothes on the table.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_bed_197(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_shirt,bed_instance)
        else:
            exp(clothes_shirt,bed_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,bed_instance]=True
        close[bed_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_bed_197(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_skirt,bed_instance)
        else:
            exp(clothes_skirt,bed_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,bed_instance]=True
        close[bed_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation

behavior find_clothes():
    body:
        bind target_table: item where:
            is_table(target_table) and not visited(target_table)
        observe(target_table, "Check is there any clothes on the table")

behavior __goal__():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                find_clothes()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_bed_197(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_shirt,bed_instance)
        else:
            exp(clothes_shirt,bed_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,bed_instance]=True
        close[bed_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_bed_197(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_skirt,bed_instance)
        else:
            exp(clothes_skirt,bed_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,bed_instance]=True
        close[bed_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes_on_table(table:item):
    # Function to check if there are clothes (shirt or skirt) on a specified table
    symbol has_clothes=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_clothes_on_table(table):
            # Check if there is a table with a shirt or skirt based on the available information
            bind table: item where:
                is_table(table) and has_clothes_on_table(table)
            # Select a table that has a shirt or skirt on it
            achieve close_char(char, table)
            # Move the character closer to the table with the shirt or skirt

        else:
            # If no table with a shirt or skirt is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table, "Check is there any clothes on the table")
                    # Observe whether each table has a shirt or skirt

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the shirt and the skirt." ?
Answer: Your current plan does not align with the necessary steps for finding the shirt and the skirt. Please consider initiating a new plan specifically focused on locating the clothing items before addressing the ironing procedure.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate the shirt and the skirt.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_hanger_293(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==293
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_skirt,hanger_instance)
        else:
            exp(clothes_skirt,hanger_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,hanger_instance]=True
        close[hanger_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes_on_table(table:item):
    # Function to check if there is clothes on a specified table
    symbol has_clothes=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_clothes_on_table(table):
            # Check if there is a table with clothes based on the available information
            bind table: item where:
                is_table(table) and has_clothes_on_table(table) 
            # Select a table that has clothes on it
            achieve close_char(char, table) 
            # Move the character closer to the table with clothes

        else: 
           # If no table with clothes is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table, "Check is there any clothes on the table")
                    # Observe whether each table has any clothes

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_bench_115(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==115
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(clothes_skirt,bench_instance)
        else:
            exp(clothes_skirt,bench_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,bench_instance]=True
        close[bench_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes_on_table(table: item):
    # Function to check if there are clothes (shirt or skirt) on a specified table
    symbol has_clothes=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_clothes_on_table(table) and not visited(table):
            # If weve already found the table with clothes, we can directly approach it
            bind table: item where:
                is_table(table) and has_clothes_on_table(table) and not visited(table)
            achieve close_char(char, table)

        else:
            # Check all tables in the scene that have not been visited
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table,"Check is there any clothes on the table")

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate the shirt and the skirt.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_bed_197(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_skirt,bed_instance)
        else:
            exp(clothes_skirt,bed_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,bed_instance]=True
        close[bed_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_skirt_or_shirt_on_table(table:item):
    # Check if there is a skirt or shirt on a specified table
    symbol has_skirt_or_shirt=exists o: item : (is_clothes_skirt(o) or is_clothes_shirt(o)) and on(o, table)
    return has_skirt_or_shirt

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_skirt_or_shirt_on_table(table):
            # If a table with clothes (skirt or shirt) is found, approach it
            bind table: item where:
                is_table(table) and has_skirt_or_shirt_on_table(table) 
            achieve close_char(char, table)

        else:
            # Iterate through all unvisited tables to find the clothes
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check is there any clothes on the table")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_hanger_293(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==293
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_skirt,hanger_instance)
        else:
            exp(clothes_skirt,hanger_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,hanger_instance]=True
        close[hanger_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def is_clothing_item_found(table:item):
    # Function to check if clothing items are found on a specified table
    symbol is_clothing=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return is_clothing

behavior __goal__():
    body:
        if exists table: item : is_table(table) and is_clothing_item_found(table):
            # Check if there is a table with clothing items based on the available information
            bind table: item where:
                is_table(table) and is_clothing_item_found(table) 
            # Select a table that has clothing items
            achieve close_char(char, table) 
            # Move the character closer to the table with clothing items
        else: 
            # If no table with clothing items is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table, "Check is there any clothes on the table")
                    # Observe whether each table has any clothes

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate the shirt and the skirt.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def is_clothes_on_table(table:item):
    # Check if there are clothes on the table
    symbol has_clothes=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and is_clothes_on_table(table):
            # Check if there is a table with clothes
            bind table: item where:
                is_table(table) and is_clothes_on_table(table)
            # Move the character closer to the table with clothes
            achieve close_char(char, table)

        else:
            # If no table with clothes is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table,"Check is there any clothes on the table")
                    # Observe to see if there are any clothes

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def is_target_clothing(item: item):
    symbol target_clothing = is_clothes_shirt(item) or is_clothes_skirt(item)
    return target_clothing

behavior __goal__():
    body:
        if exists table: item : is_table(table) and not visited(table):
            # If there are unvisited tables, continue to search for the shirt and the skirt on those tables
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check if there is any shirt or skirt on the table")

        else:
            # If all tables have been visited, ensure to have a plan to find the clothing items
            foreach table: item:
                if is_table(table):
                    foreach clothing: item:
                        if is_target_clothing(clothing) and on(clothing, table):
                            achieve close_char(char, table)
                            # Move closer to the table when a clothing item is located

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate the shirt and the skirt.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation

def has_clothes_on_table(table:item):
    # Check if there are clothes on a given table
    symbol has_clothes=exists o: item : is_clothes(o) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_clothes_on_table(table):
            # Check if there is a table with clothes on it
            bind table: item where:
                is_table(table) and has_clothes_on_table(table)
            # Bind the table with clothes
            achieve close_char(char, table)
            # Approach the table with clothes

        else:
            # If no table with clothes is found, observe other tables
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check is there any clothes on the table")
                    # Observe the remaining tables

#goal_representation_end

##############################
From agent.py->reset_goal

def has_clothes_on_table(table:item):
    # Check if there are clothes on a given table
    symbol has_clothes=exists o: item : is_clothes(o) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_clothes_on_table(table):
            # Check if there is a table with clothes on it
            bind table: item where:
                is_table(table) and has_clothes_on_table(table)
            # Bind the table with clothes
            achieve close_char(char, table)
            # Approach the table with clothes

        else:
            # If no table with clothes is found, observe other tables
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check is there any clothes on the table")
                    # Observe the remaining tables

##############################
From agent.py-> find a plan in act()
walk_executor(table_114)
##############################
From agent.py
walk_executor(table_114)
Robot is inside dining_room_41. Robot is close table_114. Robot is close mat_102. Robot is close floor_47. Robot is no longer inside home_office_241.Robot is no longer close couch_269.Robot is no longer close table_270.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g5.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2158);grab_executor(clothes_shirt_2158);walk_executor(ironing_board_2144);put_executor(clothes_shirt_2158, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_shirt_2158);put_executor(iron_2161, clothes_shirt_2158);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g5.txt
Checking k2
missed actions: walk_executor(clothes_skirt_2160);grab_executor(clothes_skirt_2160);walk_executor(ironing_board_2144);put_executor(clothes_skirt_2160, ironing_board_2144);walk_executor(iron_2161);grab_executor(iron_2161);walk_executor(clothes_skirt_2160);put_executor(iron_2161, clothes_skirt_2160);walk_executor(iron_2161);plugin_executor(iron_2161);switchon_executor(iron_2161);
missed action num: 11
##############################
From agent.py
Human Instruction: You need to continue searching for the shirt and the skirt. None of the observed tables have been confirmed to contain those clothing items. Keep observing other tables that have not been visited yet to locate the shirt and skirt.

Human Guidance: Your current plan does not align with the necessary steps for finding the shirt and the skirt. Please consider initiating a new plan specifically focused on locating the clothing items before addressing the ironing procedure.
The actions you have taken:
Action 1: Walk to table_114.
Action 2: Observe around table_114 with the question of Check is there any clothes on the table.
Action 3: Walk to table_199.
Action 4: Observe around table_199 with the question of Check is there any clothes on the table.
Action 5: Walk to table_270.
Action 6: Observe around table_270 with the question of Check is there any clothes on the table.
Action 7: Walk to table_114.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_bed_197(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_shirt,bed_instance)
        else:
            exp(clothes_shirt,bed_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,bed_instance]=True
        close[bed_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def is_shirt_or_skirt(item: item):
    # Determine whether the item is a shirt or a skirt
    symbol is_shirt_or_skirt= is_clothes_shirt(item) or is_clothes_skirt(item)
    return is_shirt_or_skirt

behavior __goal__():
    body:
        # Check if there are unvisited tables
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Check is there any clothes on the table")
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_bed_197(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_skirt,bed_instance)
        else:
            exp(clothes_skirt,bed_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,bed_instance]=True
        close[bed_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def is_shirt_or_skirt(item: item):
    # Function to check if item is a shirt or skirt
    symbol is_shirt= is_clothes_shirt(item)
    symbol is_skirt= is_clothes_skirt(item)
    return is_shirt or is_skirt

behavior __goal__():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                # Check all unvisited tables
                observe(table, "Check is there any clothes on the table")
                # Observe whether each table has any clothes

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate the shirt and the skirt.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_hanger_293(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==293
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def find_shirt_and_skirt_on_table(table:item):
    # Function to check if there are clothes on a specified table
    symbol has_clothes=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and find_shirt_and_skirt_on_table(table):
            # Check if there is a table with the shirt or skirt based on the available information
            bind table: item where:
                is_table(table) and find_shirt_and_skirt_on_table(table) 
            # Select a table that has the shirt or skirt
            achieve close_char(char, table) 
            # Move the character closer to the table with the shirt or skirt

        else: 
           # If no table with the shirt or skirt is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table,"Check is there any clothes on the table")
                    # Observe whether each table has any clothes

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_bed_197(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_shirt,bed_instance)
        else:
            exp(clothes_shirt,bed_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,bed_instance]=True
        close[bed_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes_on_table(table: item):
    # Function to check if there are clothes on a specified table
    symbol has_clothes = exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_clothes_on_table(table):
            # If we have already found the table with clothes, we can directly approach it
            bind table: item where:
                is_table(table) and has_clothes_on_table(table)
            achieve close_char(char, table)

        else:
            # Check all tables in the scene that have not been visited
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check if there is any shirt or skirt on the table")

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt and the skirt.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_hanger_293(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==293
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_shirt_and_skirt(table:item):
    # Function to check if there is a shirt and a skirt on a specified table
    symbol has_shirt_and_skirt=exists s: item : ((is_clothes_shirt(s) or is_clothes_skirt(s)) and on(s, table))
    return has_shirt_and_skirt

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_shirt_and_skirt(table):
            # Check if there is a table with a shirt and skirt based on the available information
            bind table: item where:
                is_table(table) and has_shirt_and_skirt(table) 
            # Select a table that has a shirt and skirt
            achieve visited(table) 
            # Visit the table with shirt and skirt

        else: 
            # If no table with shirt and skirt is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table,"Check is there any clothes on the table")
                    # Observe whether each table has any clothes

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_bed_197(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_shirt,bed_instance)
        else:
            exp(clothes_shirt,bed_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,bed_instance]=True
        close[bed_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes_on_table(table: item):
    # Function to check if there is a shirt or skirt on a specified table
    symbol has_clothes=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_clothes_on_table(table):
            # Check if there is a table with a shirt or skirt on it
            bind table: item where:
                is_table(table) and has_clothes_on_table(table)
            # Select a table with a shirt or skirt
            achieve close_char(char, table)
            # Move the character closer to the table with a shirt or skirt

        else:
            # If no table with a shirt or skirt is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table, "Check is there any clothes on the table")
                    # Observe whether each table has any clothes

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate the shirt and the skirt that need to be ironed.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_bed_197(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_skirt,bed_instance)
        else:
            exp(clothes_skirt,bed_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,bed_instance]=True
        close[bed_instance,clothes_skirt]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes_on_table(table:item):
    # Function to check if there are clothes on a specified table
    symbol has_clothes=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_clothes_on_table(table):
            # Check if there is a table with clothes based on the available information
            bind table: item where:
                is_table(table) and has_clothes_on_table(table)
            # Select a table that has clothes on it
            achieve close_char(char, table)
            # Move the character closer to the table with clothes

        else:
           # If no table with clothes is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table,"Check is there any clothes on the table")
                    # Observe whether each table has any clothes

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def has_shirt_and_skirt_on_table(table: item):
    # Function to check if there are a shirt and a skirt on a specified table
    symbol has_clothes = exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_shirt_and_skirt_on_table(table):
            # Check if there is a table with a shirt and a skirt based on the available information
            bind table: item where:
                is_table(table) and has_shirt_and_skirt_on_table(table)
            # Select a table that has a shirt and a skirt
            achieve close_char(char, table)
            # Move the character closer to the table with the shirt and skirt

        else:
            # If no table with a shirt and skirt is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table, "Check if there is any shirt or skirt on the table")
                    # Observe whether each table has any shirt or skirt

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate the shirt and the skirt.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_nightstand_192(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(clothes_shirt,nightstand_instance)
        else:
            exp(clothes_shirt,nightstand_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,nightstand_instance]=True
        close[nightstand_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes_on_table(table: item):
    # Function to check if there is a shirt or skirt on the specified table
    symbol has_clothes = exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_clothes_on_table(table):
            # If a table with clothes is already located, approach it
            bind table: item where:
                is_table(table) and has_clothes_on_table(table)
            achieve close_char(char, table)

        else:
            # Observe all unvisited tables to find those with clothes
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check is there a shirt or skirt on the table")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def locate_clothes(table:item):
    # Function to check if there is a shirt or skirt on a specified table
    symbol has_clothes=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and locate_clothes(table):
            # Check if there is a table with the shirt or skirt based on the available information
            bind table: item where:
                is_table(table) and locate_clothes(table)
            # Choose a table that has the clothes
            achieve close_char(char, table)
            # Move character closer to the table with clothes

        else:
            # If the clothes havent been found yet, explore more tables
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all tables that have not been visited
                    observe(table,"Check if there are clothes on the table")
                    # Observe to check for clothes on each table

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate the shirt and the skirt.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_hanger_293(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==293
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes_on_table(table:item):
    # Function to check if there are clothes on a specified table
    symbol has_clothes=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_clothes_on_table(table):
            # Check if there is a table with clothes based on the available information
            bind table: item where:
                is_table(table) and has_clothes_on_table(table)
            # Select a table that has clothes on it
            achieve close_char(char, table)
            # Move the character closer to the table with clothes

        else:
            # If no table with clothes is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table, "Check is there any clothes on the table")
                    # Observe whether each table has any clothes

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_bed_197(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_skirt,bed_instance)
        else:
            exp(clothes_skirt,bed_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,bed_instance]=True
        close[bed_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_shirt_and_skirt_on_table(table: item):
    # Function to check if there is both a shirt and a skirt on a specified table
    symbol has_clothes = exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_shirt_and_skirt_on_table(table):
            # Check if there is a table with a shirt and skirt based on the available information
            bind table: item where:
                is_table(table) and has_shirt_and_skirt_on_table(table) 
            # Select a table that has both a shirt and skirt
            achieve close_char(char, table) 
            # Move the character closer to the table with both clothing items

        else:
            # If no table with both a shirt and skirt is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table, "Check is there any clothes on the table")
                    # Observe whether each table has any clothing items

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt and the skirt.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_bed_197(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_shirt,bed_instance)
        else:
            exp(clothes_shirt,bed_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,bed_instance]=True
        close[bed_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_bed_197(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_skirt,bed_instance)
        else:
            exp(clothes_skirt,bed_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,bed_instance]=True
        close[bed_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_shirt_or_skirt_on_table(table:item):
    # Function to check if there are a shirt or skirt on a specified table
    symbol has_shirt_or_skirt=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_shirt_or_skirt

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_shirt_or_skirt_on_table(table):
            # If we have already found the table with shirt or skirt, we can directly approach it
            bind table: item where:
                is_table(table) and has_shirt_or_skirt_on_table(table)
            achieve close_char(char, table)

        else:
            # Check all tables in the scene that have not been visited
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check is there any clothes on the table")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_cupboard_117(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(clothes_skirt,cupboard_instance)
        else:
            exp(clothes_skirt,cupboard_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,cupboard_instance]=True
        close[cupboard_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_shirt_or_skirt_on_table(table:item):
    # Function to check if there is a shirt or a skirt on a specified table
    symbol has_shirt_or_skirt=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_shirt_or_skirt

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_shirt_or_skirt_on_table(table):
            # Check if there is a table with a shirt or skirt based on the available information
            bind table: item where:
                is_table(table) and has_shirt_or_skirt_on_table(table)
            # Select a table that has a shirt or skirt on it
            achieve close_char(char, table)
            # Move the character closer to the table with a shirt or skirt

        else:
            # If no table with a shirt or skirt is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table,"Check is there any clothes on the table")
                    # Observe whether each table has a shirt or skirt

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate the shirt and the skirt that need to be ironed.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_bench_115(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==115
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(clothes_skirt,bench_instance)
        else:
            exp(clothes_skirt,bench_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,bench_instance]=True
        close[bench_instance,clothes_skirt]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
  
def has_clothes_on_table(table: item):
    # Function to check if there is at least one clothing item on a specific table
    symbol has_clothes = exists c: item : is_clothes(c) and on(c, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_clothes_on_table(table):
            # Check if there is a table with clothes based on the available information
            bind table: item where:
                is_table(table) and has_clothes_on_table(table)
            # Select a table that has clothes on it
            achieve close_char(char, table)
            # Move the character closer to the table with clothes

        else:
            # If no table with clothes is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table, "Check is there any clothes on the table")
                    # Observe whether each table has any clothes

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def is_clothes_on_table(table:item):
    # Check if theres a shirt or a skirt on the table
    symbol is_clothes_on=exists clothes: item : (is_clothes_shirt(clothes) or is_clothes_skirt(clothes)) and on(clothes, table)
    return is_clothes_on

behavior __goal__():
    body:
        if exists table: item : is_table(table) and is_clothes_on_table(table):
            # If theres a table with a shirt or skirt, approach it
            bind table: item where:
                is_table(table) and is_clothes_on_table(table)
            achieve close_char(char, table)

        else:
            # Check each table that hasnt been visited
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check is there any clothes on the table")

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt and the skirt that need to be ironed.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes_on_table(table:item):
    # Function to check if there are clothes on a specified table
    symbol has_clothes=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_clothes_on_table(table):
            # Check if there is a table with clothes based on the available information
            bind table: item where:
                is_table(table) and has_clothes_on_table(table)
            # Select a table that has clothes on it
            achieve close_char(char, table) 
            # Move the character closer to the table with clothes

        else: 
           # If no table with clothes is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table,"Check is there any shirt or skirt on the table")
                    # Observe whether each table has any shirt or skirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes(item: item):
    # Function to check if an item is a shirt or skirt
    symbol has_item=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, item)
    return has_item

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_clothes(table):
            # If we have already found the table with the shirt or skirt, approach it
            bind table: item where:
                is_table(table) and has_clothes(table)
            achieve close_char(char, table)

        else:
            # Check all tables in the scene that have not been visited
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table,"Check is there any clothes on the table")

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt and the skirt that need to be ironed.  ', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def has_skirt_or_shirt_on_table(table:item):
    # Function to check if a table has a skirt or shirt on it
    symbol has_skirt_or_shirt = exists o: item : (is_clothes_skirt(o) or is_clothes_shirt(o)) and on(o, table)
    return has_skirt_or_shirt

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_skirt_or_shirt_on_table(table):
            # If we have already found the table with clothes, we can directly approach it
            bind table: item where:
                is_table(table) and has_skirt_or_shirt_on_table(table)
            achieve close_char(char, table)

        else:
            # Check all tables in the scene that have not been visited for clothes
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check is there any clothes on the table")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def is_shirt_or_skirt_on_table(table:item):
    # Function to check if there is a shirt or skirt on a specified table
    symbol has_clothes=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and is_shirt_or_skirt_on_table(table):
            # If we have already found the table with either a shirt or skirt, we can approach it directly
            bind table: item where:
                is_table(table) and is_shirt_or_skirt_on_table(table)
            achieve close_char(char, table)

        else:
            # Check all tables in the scene that have not been visited
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table,"Check is there any shirt or skirt on the table")

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt and the skirt that need to be ironed.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def has_shirt_or_skirt_on_table(table: item):
    # Function to check if there are clothes such as a shirt or a skirt on a specified table
    symbol has_shirt_or_skirt = exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_shirt_or_skirt

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_shirt_or_skirt_on_table(table):
            # If we have already found the table with the shirt or skirt, we can directly approach it
            bind table: item where:
                is_table(table) and has_shirt_or_skirt_on_table(table)
            achieve close_char(char, table)

        else:
            # Check all tables in the scene that have not been visited
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check is there any clothes on the table")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
def has_clothes_on_table(table:item):
    # Function to check if there are clothes on a specified table
    symbol has_clothes=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_clothes_on_table(table):
            # Check if there is a table with clothes based on the available information
            bind table: item where:
                is_table(table) and has_clothes_on_table(table)
            # Select a table that has clothes on it
            achieve close_char(char, table)
            # Move the character closer to the table with clothes

        else:
            # If no table with clothes is found, initiate observation to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table,"Check is there any clothes on the table")
                    # Observe whether each table has clothes
#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate the shirt and the skirt that need to be ironed.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior check_table_for_clothes(table:item):
    body:
        observe(table, "Check is there any clothes on the table")

behavior __goal__():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                check_table_for_clothes(table)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes_on_table(table:item):
    # Function to check if there is a shirt or skirt on a specified table
    symbol has_clothes=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_clothes_on_table(table):
            # Check if there is a table with a shirt or skirt based on the available information
            bind table: item where:
                is_table(table) and has_clothes_on_table(table) 
            # Select a table that has a shirt or skirt on it
            achieve close_char(char, table) 
            # Move the character closer to the table with a shirt or skirt

        else: 
           # If no table with a shirt or skirt is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table,"Check is there any clothes on the table")
                    # Observe whether each table has any clothes

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt and the skirt.', '2. Iron the shirt.', '3. Iron the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def is_target_clothes_found(table:item):
    # Function to check if the shirt and skirt are found on a specified table
    symbol target_clothes=exists c: item : (is_clothes_shirt(c) or is_clothes_skirt(c)) and on(c, table)
    return target_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and is_target_clothes_found(table):
            # Check if there is a table with the shirt and skirt based on the available information
            bind table: item where:
                is_table(table) and is_target_clothes_found(table) 
            # Select a table that has the shirt or skirt on it
            achieve close_char(char, table) 
            # Move the character closer to the table with the target clothes

        else: 
           # If no table with the target clothes is found, initiate exploration to locate them
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table,"Check is there any clothes on the table")
                    # Observe whether each table has the shirt or skirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_shirt_or_skirt(table: item):
    # Function to check if there is a shirt or skirt on a specified table
    symbol has_clothes=exists c: item : (is_clothes_shirt(c) or is_clothes_skirt(c)) and on(c, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_shirt_or_skirt(table):
            # Check if there is a table with a shirt or skirt based on the available information
            bind table: item where:
                is_table(table) and has_shirt_or_skirt(table) 
            # Select a table that has a shirt or skirt on it
            achieve close_char(char, table)
            # Move the character closer to the table with a shirt or skirt

        else:
           # If no table with a shirt or skirt is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table, "Check is there any clothes on the table")
                    # Observe whether each table has any clothes

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate the shirt and the skirt.', '2. Iron the shirt and the skirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_bed_197(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_shirt,bed_instance)
        else:
            exp(clothes_shirt,bed_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,bed_instance]=True
        close[bed_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_bed_197(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_skirt,bed_instance)
        else:
            exp(clothes_skirt,bed_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,bed_instance]=True
        close[bed_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def locate_clothes(table: item):
    # Determine if the specified table has clothes on it
    symbol has_clothes = exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        foreach table: item:
            # Check each unvisited table for the presence of the shirt and skirt
            if is_table(table) and not visited(table):
                observe(table, "Check is there any clothes on the table")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_hanger_293(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==293
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_bed_197(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(clothes_skirt,bed_instance)
        else:
            exp(clothes_skirt,bed_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,bed_instance]=True
        close[bed_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes_on_table(table:item):
    # Function to check if there are clothes on a specified table
    symbol has_clothes=exists o: item : is_clothes(o) and on(o, table)
    return has_clothes

def is_visited_and_has_no_clothes(table:item):
    # Function to check if a table has been visited and found to have no clothes
    symbol is_visited_and_empty=visited(table) and not has_clothes_on_table(table)
    return is_visited_and_empty

behavior __goal__():
    body:
        if exists x: item : (is_clothes_shirt(x) or is_clothes_skirt(x)):
            # If we have already found the shirt or skirt, approach them
            if exists c: item : is_clothes_shirt(c):
                bind clothes_item: item where:
                    is_clothes_shirt(clothes_item)
                achieve close_char(char, clothes_item)
            elif exists c: item : is_clothes_skirt(c):
                bind clothes_item: item where:
                    is_clothes_skirt(clothes_item)
                achieve close_char(char, clothes_item)
        else:
            # Check all tables in the scene that have not been visited
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table,"Check is there any clothes on the table")
                elif is_table(table) and is_visited_and_has_no_clothes(table):
                    # If the table is visited and has no clothes, continue to another table
                    continue

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EXISTS', 'exists') at line 5656, column 18.
Expected one of: 
	* LSHIFT
	* AMPERSAND
	* __ANON_6
	* __ANON_7
	* SLASH
	* __ANON_0
	* _NEWLINE
	* SEMICOLON
	* PERCENT
	* OR
	* __ANON_4
	* CIRCUMFLEX
	* MORETHAN
	* IF
	* __ANON_5
	* EQUAL
	* STAR
	* GREATER_EQ
	* __ANON_8
	* __ANON_2
	* NOT_EQ
	* LESS_EQ
	* AND
	* DOUBLE_EQUAL
	* MINUS
	* __ANON_3
	* LESSTHAN
	* __ANON_1
	* VBAR
	* FLOORDIV
	* COMMA
	* AT
	* RSHIFT
	* PLUS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_shirt_2158_around_hanger_293(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==293
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_ironing_board_2144(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_skirt,ironing_board_instance)
        else:
            exp(clothes_skirt,ironing_board_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_skirt]=True
    

#goal_representation
 
behavior __goal__():
    body:
        if exists x: item : (is_clothes_shirt(x) or is_clothes_skirt(x)):
            # If we have already found the shirt or skirt, approach them
            if exists c: item : is_clothes_shirt(c):
                bind clothes_item: item where:
                    is_clothes_shirt(clothes_item)
                achieve close_char(char, clothes_item)
            elif exists c: item : is_clothes_skirt(c):
                bind clothes_item: item where:
                    is_clothes_skirt(clothes_item)
                achieve close_char(char, clothes_item)
        else:
            # Check all tables in the scene that have not been visited
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table,"Check is there any clothes on the table")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EXISTS', 'exists') at line 5646, column 18.
Expected one of: 
	* LSHIFT
	* AMPERSAND
	* __ANON_6
	* __ANON_7
	* SLASH
	* __ANON_0
	* _NEWLINE
	* SEMICOLON
	* PERCENT
	* OR
	* __ANON_4
	* CIRCUMFLEX
	* MORETHAN
	* IF
	* __ANON_5
	* EQUAL
	* STAR
	* GREATER_EQ
	* __ANON_8
	* __ANON_2
	* NOT_EQ
	* LESS_EQ
	* AND
	* DOUBLE_EQUAL
	* MINUS
	* __ANON_3
	* LESSTHAN
	* __ANON_1
	* VBAR
	* FLOORDIV
	* COMMA
	* AT
	* RSHIFT
	* PLUS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_shirt_2158_around_ironing_board_2144(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_clothes_skirt_2160_around_cupboard_118(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(clothes_skirt,cupboard_instance)
        else:
            exp(clothes_skirt,cupboard_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,cupboard_instance]=True
        close[cupboard_instance,clothes_skirt]=True
    

#goal_representation
 
def has_clothes_on_table(table:item):
    # Function to check if there are clothes on a specified table
    symbol has_clothes=exists o: item : (is_clothes_shirt(o) or is_clothes_skirt(o)) and on(o, table)
    return has_clothes

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_clothes_on_table(table):
            # Check if there is a table with clothes based on the available information
            bind clothes_table: item where:
                is_table(clothes_table) and has_clothes_on_table(clothes_table) 
            # Select a table that has clothes on it
            if exists c: item : is_clothes_shirt(c):
                bind clothes_item: item where:
                    is_clothes_shirt(clothes_item)
                achieve close_char(char, clothes_item)
            elif exists c: item : is_clothes_skirt(c):
                bind clothes_item: item where:
                    is_clothes_skirt(clothes_item)
                achieve close_char(char, clothes_item)
        else: 
            # If no table with clothes is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table, "Check is there any clothes on the table")
                    # Observe whether each table has any clothes

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
