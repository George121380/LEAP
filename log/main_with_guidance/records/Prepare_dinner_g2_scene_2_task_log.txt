From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.', '2. Preheat the oven.', '3. Place the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_kitchen_counter_132(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_food_turkey_2071_around_cupboard_131(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_turkey,cupboard_instance)
        else:
            exp(food_turkey,cupboard_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,cupboard_instance]=True
        close[cupboard_instance,food_turkey]=True
    

behavior find_food_onion_2026_around_kitchen_counter_132(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(obj:item):
    body:
        wash(obj)
        # Step to clean the item

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        clean_item(chicken)
        # Clean the chicken

        clean_item(onion)
        # Clean the onion
 
#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior clean_item(obj:item):
    body:
        wash(obj)
        # Step to clean the item

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        clean_item(chicken)
        # Clean the chicken

        clean_item(onion)
        # Clean the onion
 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(food_chicken_2050, kitchen_counter_132)walk_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(kitchen_counter_132)exp(food_onion_2026, kitchen_counter_132)walk_executor(food_onion_2026)wash_executor(food_onion_2026)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Find pot_54. Find tray_142. Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(food_chicken_2050, kitchen_counter_132)
Failed to find food_chicken_2050 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_chicken_2050, cupboard_131)walk_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(cupboard_131)exp(food_onion_2026, cupboard_131)walk_executor(food_onion_2026)wash_executor(food_onion_2026)
##############################
From agent.py
walk_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. Robot is no longer close kitchen_counter_132.
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. 
##############################
From agent.py
exp(food_chicken_2050, cupboard_131)
Failed to find food_chicken_2050 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_141)open_executor(oven_141)exp(food_chicken_2050, oven_141)walk_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(table_193)exp(food_onion_2026, table_193)walk_executor(food_onion_2026)wash_executor(food_onion_2026)
##############################
From agent.py
walk_executor(oven_141)
Find food_butter_2018. Find dough_2021. Find food_onion_2026. Robot is inside dining_room_1. Robot is close food_butter_2018. Robot is close dough_2021. Robot is close food_onion_2026. Robot is close oven_141. Robot is close tray_142. Robot is no longer close cupboard_131.
##############################
From agent.py
open_executor(oven_141)
Robot is inside dining_room_1. Robot is close food_butter_2018. Robot is close dough_2021. Robot is close food_onion_2026. Robot is close oven_141. Robot is close tray_142. 
##############################
From agent.py
exp(food_chicken_2050, oven_141)
Failed to find food_chicken_2050 around oven_141. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.', '2. Place the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_homework_2011_around_computer_2111(homework:item):
    goal: not unknown(homework)
    body:
        assert is_homework(homework)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2111
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(homework,computer_instance)
        else:
            exp(homework,computer_instance)
    eff:
        unknown[homework]=False
        close[homework,computer_instance]=True
        close[computer_instance,homework]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cleaning_solution_2098_around_sink_133(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_location_known_for_chicken(chicken: item):
    # Check if the location of the chicken is already known
    symbol location_known = visited(chicken)
    return location_known

def is_location_known_for_onion(onion: item):
    # Check if the location of the onion is already known
    symbol location_known = visited(onion)
    return location_known

behavior find_chicken(chicken:item):
    body:
        if not is_location_known_for_chicken(chicken):
            # If the chickens location is not known, observe all unvisited items possibly being chicken
            foreach item: item:
                if is_food_chicken(item) and not visited(item):
                    observe(chicken, "Locate the chicken")

behavior find_onion(onion:item):
    body:
        if not is_location_known_for_onion(onion):
            # If the onions location is not known, observe all unvisited items possibly being onion
            foreach item: item:
                if is_food_onion(item) and not visited(item):
                    observe(onion, "Locate the onion")

behavior clean_food_item(food_item:item):
    body:
        wash(food_item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        find_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)
        find_onion(onion)

        clean_food_item(chicken)
        clean_food_item(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_homework_2011_around_computer_2111(homework:item):
    goal: not unknown(homework)
    body:
        assert is_homework(homework)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2111
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(homework,computer_instance)
        else:
            exp(homework,computer_instance)
    eff:
        unknown[homework]=False
        close[homework,computer_instance]=True
        close[computer_instance,homework]=True
    

behavior find_food_fruit_2056_around_kitchen_counter_128(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

#exp_behavior_end

#goal_representation
 
def has_chicken_and_onion():
    # Check for the presence of chicken and onion across known locations
    symbol has_chicken = exists chicken: item : is_food_chicken(chicken)
    symbol has_onion = exists onion: item : is_food_onion(onion)
    return has_chicken and has_onion

behavior find_chicken_and_onion():
    body:
        foreach location: item:
            if not has_chicken_and_onion() and not visited(location):
                observe(location, "Is there chicken or onion here")

behavior clean_food(item: item, sink: item):
    body:
        achieve_once inside(item, sink)
        # Ensure the item is inside the sink for washing
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            wash(item)
            rinse(item)
            achieve_once is_off(faucet)

behavior __goal__():
    body:
        if not has_chicken_and_onion():
            find_chicken_and_onion()

        bind chicken: item where:
            is_food_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)

        bind sink: item where:
            is_sink(sink)

        if dirty(chicken):
            clean_food(chicken, sink)

        if dirty(onion):
            clean_food(onion, sink)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function has_faucet not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_homework_2011_around_bookshelf_137(homework:item):
    goal: not unknown(homework)
    body:
        assert is_homework(homework)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(homework,bookshelf_instance)
        else:
            exp(homework,bookshelf_instance)
    eff:
        unknown[homework]=False
        close[homework,bookshelf_instance]=True
        close[bookshelf_instance,homework]=True
    

behavior find_food_fruit_2056_around_table_127(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_fruit,table_instance)
        else:
            exp(food_fruit,table_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,table_instance]=True
        close[table_instance,food_fruit]=True
    

#goal_representation
 
def has_chicken_and_onion():
    # Check for the presence of chicken and onion across known locations
    symbol has_chicken = exists chicken: item : is_food_chicken(chicken)
    symbol has_onion = exists onion: item : is_food_onion(onion)
    return has_chicken and has_onion

behavior find_chicken_and_onion():
    body:
        foreach location: item:
            if not has_chicken_and_onion() and not visited(location):
                observe(location, "Is there chicken or onion here")

behavior clean_food(item: item, sink: item):
    body:
        achieve_once inside(item, sink)
        # Ensure the item is inside the sink for washing
        if is_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            wash(item)
            rinse(item)
            achieve_once is_off(faucet)

behavior __goal__():
    body:
        if not has_chicken_and_onion():
            find_chicken_and_onion()

        bind chicken: item where:
            is_food_chicken(chicken)

        bind onion: item where:
            is_food_onion(onion)

        bind sink: item where:
            is_sink(sink)

        if dirty(chicken):
            clean_food(chicken, sink)

        if dirty(onion):
            clean_food(onion, sink)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. clean the chicken and onion." ?
Answer: You should replan, as cleaning the chicken and onion is not necessary according to the current suggestions. Focus on placing the chicken and onion in the oven and turning it on.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Place the chicken and onion in the oven and turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_kitchen_counter_128(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_homework_2011_around_bookshelf_137(homework:item):
    goal: not unknown(homework)
    body:
        assert is_homework(homework)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(homework,bookshelf_instance)
        else:
            exp(homework,bookshelf_instance)
    eff:
        unknown[homework]=False
        close[homework,bookshelf_instance]=True
        close[bookshelf_instance,homework]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        achieve inside(onion, oven)

behavior start_oven(oven:item):
    body:
        achieve closed(oven)
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_items_in_oven(chicken, onion, oven)
        start_oven(oven)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(food_chicken_2050, kitchen_counter_128)walk_executor(stove_2090)open_executor(stove_2090)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(stove_2090)putin_executor(food_chicken_2050, stove_2090)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(stove_2090)putin_executor(food_onion_2026, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find cutting_board_2080. Find food_orange_2008. Find spectacles_2106. Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer close food_butter_2018.Robot is no longer close dough_2021.Robot is no longer close food_onion_2026.Robot is no longer close oven_141.Robot is no longer close tray_142.
##############################
From agent.py
exp(food_chicken_2050, kitchen_counter_128)
Failed to find food_chicken_2050 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(food_chicken_2050, kitchen_counter_129)open_executor(stove_2090)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(stove_2090)putin_executor(food_chicken_2050, stove_2090)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(stove_2090)putin_executor(food_onion_2026, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Find oil_2102. Find pot_2093. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is no longer close kitchen_counter_128.Robot is no longer close floor_15.
##############################
From agent.py
exp(food_chicken_2050, kitchen_counter_129)
Failed to find food_chicken_2050 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(freezer_140)switchoff_executor(freezer_140)open_executor(freezer_140)exp(food_chicken_2050, freezer_140)walk_executor(stove_2090)open_executor(stove_2090)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(stove_2090)putin_executor(food_chicken_2050, stove_2090)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(stove_2090)putin_executor(food_onion_2026, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(freezer_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
switchoff_executor(freezer_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(freezer_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(food_chicken_2050, freezer_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(stove_2090)putin_executor(food_chicken_2050, stove_2090)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(stove_2090)putin_executor(food_onion_2026, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close freezer_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
open_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close freezer_140. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close freezer_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close freezer_140.
##############################
From agent.py
putin_executor(food_chicken_2050, stove_2090)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close kitchen_counter_129. Robot is close stove_2090. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(food_onion_2026)
Robot is inside dining_room_1. Robot is close food_onion_2026. Robot is close oven_141. Robot is no longer close kitchen_counter_129.Robot is no longer close food_chicken_2050.Robot is no longer close stove_2090.
##############################
From agent.py
grab_executor(food_onion_2026)
Robot is inside dining_room_1. Robot is close food_onion_2026. Robot is close oven_141. Grabbing food_onion_2026 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close food_onion_2026. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is close food_chicken_2050. Robot is no longer close oven_141.
##############################
From agent.py
putin_executor(food_onion_2026, stove_2090)
Robot is inside dining_room_1. Robot is close food_onion_2026. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is close food_chicken_2050. food_onion_2026 released by right hand. 
##############################
From agent.py
close_executor(stove_2090)
Robot is inside dining_room_1. Robot is close food_onion_2026. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is close food_chicken_2050. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close food_onion_2026. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is close food_chicken_2050. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g2.txt
Checking k1
missed actions: 
missed action num: 0
##############################
