From agent.py
Reset goals: The sub-goals are: 
['1. Find the chicken and onion.  ', '2. Put the chicken and onion into the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_food_2022_around_oven_295(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_food,oven_instance)
        else:
            exp(food_food,oven_instance)
    eff:
        unknown[food_food]=False
        close[food_food,oven_instance]=True
        close[oven_instance,food_food]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_found(room: item):
    # Function to check if the room contains chicken or onion
    symbol has_chicken=exists o: item : is_food_chicken(o) and inside(o, room)
    symbol has_onion=exists o: item : is_food_onion(o) and inside(o, room)
    return has_chicken or has_onion

behavior __goal__():
    body:
        if exists room: item : (is_kitchen(room) or is_fridge(room)) and is_food_found(room):
            # Using known information to approach a location containing chicken or onion
            bind room: item where:
                (is_kitchen(room) or is_fridge(room)) and is_food_found(room)
            achieve close_char(char, room)
        
        else:
            # If food items are not found, inspect kitchen and fridge for unvisited items
            foreach room: item:
                if (is_kitchen(room) or is_fridge(room)) and not visited(room):
                    observe(room, "Check for chicken and onion")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_food_found(room: item):
    # Function to check if the room contains chicken or onion
    symbol has_chicken=exists o: item : is_food_chicken(o) and inside(o, room)
    symbol has_onion=exists o: item : is_food_onion(o) and inside(o, room)
    return has_chicken or has_onion

behavior __goal__():
    body:
        if exists room: item : (is_kitchen(room) or is_fridge(room)) and is_food_found(room):
            # Using known information to approach a location containing chicken or onion
            bind room: item where:
                (is_kitchen(room) or is_fridge(room)) and is_food_found(room)
            achieve close_char(char, room)
        
        else:
            # If food items are not found, inspect kitchen and fridge for unvisited items
            foreach room: item:
                if (is_kitchen(room) or is_fridge(room)) and not visited(room):
                    observe(room, "Check for chicken and onion")

##############################
From agent.py-> find a plan in act()
walk_executor(dining_room_201)obs(dining_room_201, Check for chicken and onion)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)obs(fridge_289, Check for chicken and onion)
##############################
From agent.py
walk_executor(dining_room_201)
Robot is inside dining_room_201. Robot is no longer inside bathroom_1.
##############################
From agent.py
obs(dining_room_201, Check for chicken and onion)
Get this information:  fork_2081 is inside dining_room_201. food_fish_2021 is inside dining_room_201. food_onion_2032 is inside dining_room_201. milk_2043 is inside dining_room_201. wallshelf_234 is inside dining_room_201. door_222 is between dining_room_201. wallshelf_235 is inside dining_room_201. cutting_board_2051 is inside dining_room_201. toaster_292 is inside dining_room_201. food_cake_2013 is inside dining_room_201. ceiling_216 is inside dining_room_201. bench_227 is inside dining_room_201. oven_295 is inside dining_room_201. powersocket_246 is inside dining_room_201. dishwasher_1001 is inside dining_room_201. food_potato_2035 is inside dining_room_201. food_hamburger_2024 is inside dining_room_201. soap_2054 is inside dining_room_201. stove_2065 is inside dining_room_201. food_cheese_2016 is inside dining_room_201. food_kiwi_2027 is inside dining_room_201. napkin_2005 is inside dining_room_201. ceiling_219 is inside dining_room_201. food_steak_2008 is inside dining_room_201. wall_clock_249 is inside dining_room_201. drawing_238 is inside dining_room_201. door_222 is inside dining_room_201. wall_211 is inside dining_room_201. drawing_241 is inside dining_room_201. kitchen_counter_230 is inside dining_room_201. food_donut_2019 is inside dining_room_201. food_snack_2038 is inside dining_room_201. cd_player_2060 is inside dining_room_201. coffe_maker_290 is inside dining_room_201. food_food_2022 is inside dining_room_201. food_banana_2011 is inside dining_room_201. coffee_filter_2000 is inside dining_room_201. wall_213 is inside dining_room_201. oil_2079 is inside dining_room_201. wall_214 is inside dining_room_201. food_oatmeal_2030 is inside dining_room_201. food_vegetable_2041 is inside dining_room_201. drawing_2003 is inside dining_room_201. floor_205 is inside dining_room_201. orchid_244 is inside dining_room_201. bookshelf_233 is inside dining_room_201. floor_206 is inside dining_room_201. doorjamb_346 is between dining_room_201. tvstand_225 is inside dining_room_201. mat_236 is inside dining_room_201. food_carrot_2014 is inside dining_room_201. bowl_2071 is inside dining_room_201. food_peanut_butter_2033 is inside dining_room_201. photoframe_285 is inside dining_room_201. floor_208 is inside dining_room_201. cup_2063 is inside dining_room_201. food_ice_cream_2025 is inside dining_room_201. food_rice_2036 is inside dining_room_201. drawing_239 is inside dining_room_201. bench_228 is inside dining_room_201. tray_296 is inside dining_room_201. food_chicken_2017 is inside dining_room_201. phone_247 is inside dining_room_201. ceiling_220 is inside dining_room_201. wall_209 is inside dining_room_201. stovefan_288 is inside dining_room_201. food_lemon_2028 is inside dining_room_201. food_sugar_2039 is inside dining_room_201. floor_203 is inside dining_room_201. sink_231 is inside dining_room_201. food_apple_2009 is inside dining_room_201. food_egg_2020 is inside dining_room_201. ceilinglamp_223 is inside dining_room_201. wall_212 is inside dining_room_201. pot_2069 is inside dining_room_201. drawing_242 is inside dining_room_201. food_orange_2031 is inside dining_room_201. floor_204 is inside dining_room_201. wall_215 is inside dining_room_201. knife_2050 is inside dining_room_201. bowl_2072 is inside dining_room_201. food_bread_2012 is inside dining_room_201. food_fruit_2023 is inside dining_room_201. fork_2080 is inside dining_room_201. dry_pasta_2042 is inside dining_room_201. food_cereal_2015 is inside dining_room_201. ceiling_217 is inside dining_room_201. light_245 is inside dining_room_201. plate_1000 is inside dining_room_201. floor_207 is inside dining_room_201. ceiling_218 is inside dining_room_201. food_pizza_2034 is inside dining_room_201. cup_2064 is inside dining_room_201. table_226 is inside dining_room_201. television_248 is inside dining_room_201. mat_237 is inside dining_room_201. fryingpan_2083 is inside dining_room_201. wall_210 is inside dining_room_201. cupboard_229 is inside dining_room_201. food_dessert_2018 is inside dining_room_201. cd_2075 is inside dining_room_201. character_65 is inside dining_room_201. food_jam_2026 is inside dining_room_201. food_salt_2037 is inside dining_room_201. fridge_289 is inside dining_room_201. food_bacon_2010 is inside dining_room_201. drawing_240 is inside dining_room_201. microwave_297 is inside dining_room_201. floor_202 is inside dining_room_201. food_noodles_2029 is inside dining_room_201. drawing_243 is inside dining_room_201. faucet_232 is inside dining_room_201. ceiling_221 is inside dining_room_201. sauce_2078 is inside dining_room_201. food_turkey_2040 is inside dining_room_201. ceilinglamp_224 is inside dining_room_201. dining_room_201 is CLEAN.
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Find drawing_239. Find drawing_240. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Find drawing_174. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
obs(fridge_289, Check for chicken and onion)
Get this information:  food_fish_2021 is inside fridge_289. food_onion_2032 is inside fridge_289. milk_2043 is inside fridge_289. food_cake_2013 is inside fridge_289. food_potato_2035 is inside fridge_289. food_hamburger_2024 is inside fridge_289. food_cheese_2016 is inside fridge_289. food_kiwi_2027 is inside fridge_289. food_steak_2008 is inside fridge_289. food_donut_2019 is inside fridge_289. fridge_289 is facing drawing_239. food_snack_2038 is inside fridge_289. food_food_2022 is inside fridge_289. food_banana_2011 is inside fridge_289. food_oatmeal_2030 is inside fridge_289. food_vegetable_2041 is inside fridge_289. food_carrot_2014 is inside fridge_289. food_peanut_butter_2033 is inside fridge_289. food_ice_cream_2025 is inside fridge_289. food_rice_2036 is inside fridge_289. food_chicken_2017 is inside fridge_289. fridge_289 is close to cupboard_229. fridge_289 is close to floor_6. fridge_289 is close to floor_7. fridge_289 is close to kitchen_counter_230. fridge_289 is close to wall_11. fridge_289 is close to wall_14. fridge_289 is close to ceiling_18. fridge_289 is close to mat_22. fridge_289 is close to sauce_2078. fridge_289 is close to shower_36. fridge_289 is close to toilet_37. fridge_289 is close to microwave_297. fridge_289 is close to door_44. fridge_289 is close to doorjamb_45. fridge_289 is close to drawing_174. fridge_289 is close to drawing_239. fridge_289 is close to drawing_240. fridge_289 is close to ceiling_216. fridge_289 is close to floor_202. fridge_289 is close to floor_203. fridge_289 is close to floor_77. fridge_289 is close to wall_211. fridge_289 is close to wall_85. fridge_289 is close to ceiling_95. fridge_289 is close to food_steak_2008. fridge_289 is close to food_apple_2009. fridge_289 is close to food_bacon_2010. fridge_289 is close to food_banana_2011. fridge_289 is close to food_bread_2012. fridge_289 is close to food_cake_2013. fridge_289 is close to food_carrot_2014. fridge_289 is close to food_cereal_2015. fridge_289 is close to food_cheese_2016. fridge_289 is close to food_chicken_2017. fridge_289 is close to food_dessert_2018. fridge_289 is close to food_donut_2019. fridge_289 is close to food_egg_2020. fridge_289 is close to food_fish_2021. fridge_289 is close to food_food_2022. fridge_289 is close to food_fruit_2023. fridge_289 is close to food_hamburger_2024. fridge_289 is close to food_ice_cream_2025. fridge_289 is close to food_jam_2026. fridge_289 is close to food_kiwi_2027. fridge_289 is close to food_lemon_2028. fridge_289 is close to food_noodles_2029. fridge_289 is close to food_oatmeal_2030. fridge_289 is close to food_orange_2031. fridge_289 is close to food_onion_2032. fridge_289 is close to food_peanut_butter_2033. fridge_289 is close to food_pizza_2034. fridge_289 is close to food_potato_2035. fridge_289 is close to food_rice_2036. fridge_289 is close to food_salt_2037. fridge_289 is close to food_snack_2038. fridge_289 is close to food_sugar_2039. fridge_289 is close to food_turkey_2040. fridge_289 is close to food_vegetable_2041. fridge_289 is close to dry_pasta_2042. fridge_289 is close to milk_2043. fridge_289 is close to trashcan_99. fridge_289 is close to character_65. food_lemon_2028 is inside fridge_289. food_sugar_2039 is inside fridge_289. fridge_289 is on floor_202. fridge_289 is on floor_203. food_apple_2009 is inside fridge_289. food_egg_2020 is inside fridge_289. food_orange_2031 is inside fridge_289. food_bread_2012 is inside fridge_289. food_fruit_2023 is inside fridge_289. dry_pasta_2042 is inside fridge_289. food_cereal_2015 is inside fridge_289. food_pizza_2034 is inside fridge_289. food_dessert_2018 is inside fridge_289. food_jam_2026 is inside fridge_289. food_salt_2037 is inside fridge_289. fridge_289 is inside dining_room_201. food_bacon_2010 is inside fridge_289. food_noodles_2029 is inside fridge_289. sauce_2078 is inside fridge_289. food_turkey_2040 is inside fridge_289. fridge_289 is PLUGGED_IN. fridge_289 is OFF. fridge_289 is OPEN. fridge_289 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_kitchen_counter_230(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(tray,kitchen_counter_instance)
        else:
            exp(tray,kitchen_counter_instance)
    eff:
        unknown[tray]=False
        close[tray,kitchen_counter_instance]=True
        close[kitchen_counter_instance,tray]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
markdown
def has_chicken_and_onion(oven:item):
    # Function to check if there is chicken and onion inside the oven
    symbol has_chicken=exists o: item : is_food_chicken(o) and inside(o, oven)
    symbol has_onion=exists o: item : is_food_onion(o) and inside(o, oven)
    return has_chicken and has_onion

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven)
        # Select the oven

        if has_chicken_and_onion(oven):
            # If chicken and onion are already in the oven, ensure they are inside
            achieve inside_char(char, oven)
            achieve closed(oven)
        else:
            # If the chicken and onion are not in the oven, observe the oven to find them
            observe(oven, "Check for chicken and onion inside the oven for roasting")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'markdown') at line 6035, column 1.
Expected one of: 
	* DEF
	* _PRAGMA_KEYWORD
	* GOAL
	* _NEWLINE
	* OBJECTS
	* DOMAIN
	* FEATURE
	* GENERATOR
	* IMPORT
	* INIT
	* UNDIRECTED_GENERATOR
	* CONTROLLER
	* BEHAVIOR
	* TYPEDEF
	* $END
	* INCLUDE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_tray_296_around_kitchen_counter_230(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(tray,kitchen_counter_instance)
        else:
            exp(tray,kitchen_counter_instance)
    eff:
        unknown[tray]=False
        close[tray,kitchen_counter_instance]=True
        close[kitchen_counter_instance,tray]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#goal_representation
markdown
behavior roast_chicken_and_onion(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven
        achieve closed(oven)
        # Close the oven to start roasting

def exists_chicken_and_onion(fridge: item):
    # Checks if chicken and onion are found in the specified fridge
    symbol has_chicken = exists o: item : is_food_chicken(o) and inside(o, fridge)
    symbol has_onion = exists o: item : is_food_onion(o) and inside(o, fridge)
    return has_chicken and has_onion

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven)
        # Select the oven

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        if exists_chicken_and_onion(fridge):
            bind chicken: item where:
                is_food_chicken(chicken) and inside(chicken, fridge)
            # Select the chicken inside the fridge

            bind onion: item where:
                is_food_onion(onion) and inside(onion, fridge)
            # Select the onion inside the fridge

            roast_chicken_and_onion(chicken, onion, oven)
        else:
            observe(fridge, "Check for chicken and onion")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'markdown') at line 6035, column 1.
Expected one of: 
	* DEF
	* _PRAGMA_KEYWORD
	* GOAL
	* _NEWLINE
	* OBJECTS
	* DOMAIN
	* FEATURE
	* GENERATOR
	* IMPORT
	* INIT
	* UNDIRECTED_GENERATOR
	* CONTROLLER
	* BEHAVIOR
	* TYPEDEF
	* $END
	* INCLUDE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_tray_296_around_kitchen_counter_230(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(tray,kitchen_counter_instance)
        else:
            exp(tray,kitchen_counter_instance)
    eff:
        unknown[tray]=False
        close[tray,kitchen_counter_instance]=True
        close[kitchen_counter_instance,tray]=True
    

#goal_representation
 
def exists_chicken_and_onion(fridge: item):
    # Checks if chicken and onion are found in the specified fridge
    symbol has_chicken = exists o: item : is_food_chicken(o) and inside(o, fridge)
    symbol has_onion = exists o: item : is_food_onion(o) and inside(o, fridge)
    return has_chicken and has_onion

behavior roast_chicken_and_onion(chicken: item, onion: item, oven: item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven
        achieve closed(oven)
        # Close the oven to start roasting

behavior __goal__():
    body:
        bind oven: item where:
            is_oven(oven)
        # Select the oven

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        if exists_chicken_and_onion(fridge):
            bind chicken: item where:
                is_food_chicken(chicken) and inside(chicken, fridge)
            # Select the chicken inside the fridge

            bind onion: item where:
                is_food_onion(onion) and inside(onion, fridge)
            # Select the onion inside the fridge

            roast_chicken_and_onion(chicken, onion, oven)
        else:
            observe(fridge, "Check for chicken and onion")


This corrected version addresses the syntax error by removing the markdown keyword and organizing the content into proper behavior and def blocks as required All necessary instances are bound correctly and the behavior calls within __goal__ use the parameters appropriately
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        bind oven: item where:
            is_oven(oven)
        # Select the oven
        
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        
        achieve inside(onion, oven)
        # Place the onion inside the oven

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        bind oven: item where:
            is_oven(oven)
        # Select the oven
        
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        
        achieve inside(onion, oven)
        # Place the onion inside the oven

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(stove_2065)putin_executor(food_chicken_2017, stove_2065)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(stove_2065)putin_executor(food_onion_2032, stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_238. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close stove_2065. Robot is close kitchen_counter_230. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
open_executor(stove_2065)
Robot is inside dining_room_201. Robot is close stove_2065. Robot is close kitchen_counter_230. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_chicken_2017. Robot is no longer close stove_2065.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close stove_2065. Robot is close kitchen_counter_230. Robot is no longer close fridge_289.
##############################
From agent.py
putin_executor(food_chicken_2017, stove_2065)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close stove_2065. Robot is close kitchen_counter_230. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close fridge_289. Robot is no longer close food_chicken_2017.Robot is no longer close stove_2065.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(food_onion_2032)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close fridge_289. Grabbing food_onion_2032 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close stove_2065. Robot is close food_chicken_2017. Robot is close kitchen_counter_230. Robot is no longer close fridge_289.
##############################
From agent.py
putin_executor(food_onion_2032, stove_2065)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close stove_2065. Robot is close food_chicken_2017. Robot is close kitchen_counter_230. food_onion_2032 released by right hand. 
##############################
From agent.py
Human Instruction: You need to make sure both the chicken and the onion are placed inside the oven, not the stove. Move the chicken and onion from the stove to the oven to complete the task.

The actions you have taken:
Action 1: Walk to dining_room_201.
Action 2: Observe around dining_room_201 with the question of Check for chicken and onion.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: Observe around fridge_289 with the question of Check for chicken and onion.
Action 7: Walk to stove_2065.
Action 8: Open stove_2065.
Action 9: Walk to food_chicken_2017.
Action 10: Grab food_chicken_2017.
Action 11: Walk to stove_2065.
Action 12: Put food_chicken_2017 into stove_2065.
Action 13: Walk to food_onion_2032.
Action 14: Grab food_onion_2032.
Action 15: Walk to stove_2065.
Action 16: Put food_onion_2032 into stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_oven_295(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(phone,oven_instance)
        else:
            exp(phone,oven_instance)
    eff:
        unknown[phone]=False
        close[phone,oven_instance]=True
        close[oven_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_item_in_oven(item:item, oven:item):
    body:
        achieve inside(item, oven)
        # Place the item inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        bind oven: item where:
            is_oven(oven)
        # Select the oven item

        place_item_in_oven(chicken, oven)
        place_item_in_oven(onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_oven_295(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(phone,oven_instance)
        else:
            exp(phone,oven_instance)
    eff:
        unknown[phone]=False
        close[phone,oven_instance]=True
        close[oven_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, stove_2065)
        # Select the chicken thats in the stove
        
        bind onion: item where:
            is_food_onion(onion) and inside(onion, stove_2065)
        # Select the onion thats in the stove
        
        bind oven: item where:
            is_oven(oven)
        # Select the oven
        
        place_items_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<chicken: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior place_items_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, stove_2065)
        # Select the chicken thats in the stove
        
        bind onion: item where:
            is_food_onion(onion) and inside(onion, stove_2065)
        # Select the onion thats in the stove
        
        bind stove_2065: item where:
            is_stove(stove_2065)
        # Declare the stove where the items are located

        bind oven: item where:
            is_oven(oven)
        # Select the oven
        
        place_items_in_oven(chicken, onion, oven)
#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the chicken and onion into the oven to roast." ?
Answer: Put the chicken and onion in the oven. Turn on the oven.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        achieve inside(onion, oven)

behavior start_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, onion, oven)
        start_oven(oven)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        achieve inside(onion, oven)

behavior start_oven(oven:item):
    body:
        achieve is_on(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, onion, oven)
        start_oven(oven)

##############################
From agent.py-> find a plan in act()
close_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
close_executor(stove_2065)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close stove_2065. Robot is close food_chicken_2017. Robot is close kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close stove_2065. Robot is close food_chicken_2017. Robot is close kitchen_counter_230. 
##############################
From agent.py
Human Instruction: You need to transfer both the chicken and onion from the stove to the oven. Make sure they are placed inside the oven, then turn on the oven to complete roasting.

Human Guidance: Put the chicken and onion in the oven. Turn on the oven.
The actions you have taken:
Action 1: Walk to dining_room_201.
Action 2: Observe around dining_room_201 with the question of Check for chicken and onion.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: Observe around fridge_289 with the question of Check for chicken and onion.
Action 7: Walk to stove_2065.
Action 8: Open stove_2065.
Action 9: Walk to food_chicken_2017.
Action 10: Grab food_chicken_2017.
Action 11: Walk to stove_2065.
Action 12: Put food_chicken_2017 into stove_2065.
Action 13: Walk to food_onion_2032.
Action 14: Grab food_onion_2032.
Action 15: Walk to stove_2065.
Action 16: Put food_onion_2032 into stove_2065.
Action 17: Close stove_2065.
Action 18: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(item:item, oven:item):
    body:
        achieve inside(item, oven)
        # Place the item inside the oven

behavior start_oven(oven:item):
    body:
        achieve closed(oven) # Ensure the oven is closed
        achieve is_on(oven) # Turn on the oven for roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_in_oven(chicken, oven)
        put_in_oven(onion, oven)
        start_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior achieve_roasting(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven
        achieve closed(oven)
        # Ensure the oven is closed
        achieve is_on(oven)
        # Turn on the oven to roast the chicken and onion

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        achieve_roasting(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(chicken:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven

behavior put_in_oven(onion:item, oven:item):
    body:
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior start_oven(oven:item):
    body:
        achieve closed(oven) # Ensure the oven door is closed
        achieve is_on(oven) # Turn on the oven for roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to roast

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion to roast

        bind oven: item where:
            is_oven(oven) 
        # Select the oven

        put_in_oven(chicken, oven) 
        # Put chicken in oven

        put_in_oven(onion, oven)
        # Put onion in oven

        start_oven(oven)
        # Start oven
 
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Behavior put_in_oven already exists.
##############################
