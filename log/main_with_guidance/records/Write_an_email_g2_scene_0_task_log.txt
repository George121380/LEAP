From agent.py
Reset goals: The sub-goals are: 
['Sit on the chair in front of the computer in the home office and touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2004_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_book_2067_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_mouse_166_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
behavior sit_on_chair_in_home_office(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior turn_on_computer_with_mouse(mouse:item, computer:item):
    body:
        achieve close_char(char, mouse)
        # Move close to the mouse
        achieve facing_char(char, computer)
        # Face the computer
        touch(mouse)
        # Touch the mouse to turn on the computer

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select the chair in the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer in the home office

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        sit_on_chair_in_home_office(chair)
        turn_on_computer_with_mouse(mouse, computer)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_desk_357(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_mouse_166_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior turn_on_computer_with_mouse(computer:item, mouse:item):
    body:
        achieve close_char(char, mouse)
        # Ensure the character is close to the mouse
        touch(mouse)
        # Touch the mouse
        achieve is_on(computer)
        # Turn on the computer

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select the chair in the home office

        sit_on_chair(chair)

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        turn_on_computer_with_mouse(computer, mouse)
#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "sit on the chair in front of the computer in the home office and touch the mouse near the computer to turn it on." ?
Answer: Get close to the computer in the home office. Sit on the chair in front of the computer. Touch the mouse to turn on the computer.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2004_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_mouse_166_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair_and_turn_on_computer(chair:item, mouse:item, computer:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

        achieve close_char(char, mouse)
        # Move close to the mouse

        touch(mouse)
        # Touch the mouse to turn on the computer

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair)
        # Select the chair

        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        sit_on_chair_and_turn_on_computer(chair, mouse, computer)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_mouse_166_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_and_turn_on_computer(chair:item, mouse:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair in front of the computer

        achieve close_char(char, mouse)
        # Be close to the mouse after sitting

        touch(mouse)
        # Touch the mouse to turn on the computer

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select a chair inside the home office

        bind mouse: item where:
            is_mouse(mouse) and inside(mouse, home_office)
        # Select a mouse inside the home office

        sit_and_turn_on_computer(chair, mouse)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Get close to the computer in the home office, sit on the chair in front of the computer, and touch the mouse to turn on the computer.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_mouse_413_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior turn_on_computer(computer:item, mouse:item):
    body:
        achieve is_on(computer)
        # Turn on the computer by interacting with the mouse

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind chair: item where:
            is_chair(chair) and facing(chair, computer)
        # Select the chair facing the computer

        sit_on_chair(chair)

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        turn_on_computer(computer, mouse)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_mouse_166_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior approach_computer_and_sit(computer: item, chair: item):
    body:
        achieve close_char(char, computer)
        achieve on_char(char, chair)

behavior turn_on_computer(computer: item, mouse: item):
    body:
        touch(mouse)
        achieve is_on(computer)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)

        bind chair: item where:
            is_chair(chair) and facing(chair, computer)

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)

        approach_computer_and_sit(computer, chair)
        turn_on_computer(computer, mouse)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Get close to the computer in the home office.', '2. Sit on the chair in front of the computer.', '3. Touch the mouse to turn on the computer.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_desk_357(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_mouse_166_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office
        
        achieve close_char(char, computer)
        # Move close to the computer in the home office
#goal_representation_end

##############################
From agent.py->reset_goal
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office
        
        achieve close_char(char, computer)
        # Move close to the computer in the home office
##############################
From agent.py-> find a plan in act()
walk_executor(computer_417)
##############################
From agent.py
walk_executor(computer_417)
Find chair_356. Find mouse_413. Find keyboard_415. Robot is inside home_office_319. Robot is close computer_417. Robot is no longer inside bathroom_1.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_chair_356(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==356
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_mouse_166_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select the chair inside the home office

        sit_on_chair(chair)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<chair: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_103_around_chair_356(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==356
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_mouse_166_around_desk_357(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(mouse,desk_instance)
        else:
            exp(mouse,desk_instance)
    eff:
        unknown[mouse]=False
        close[mouse,desk_instance]=True
        close[desk_instance,mouse]=True
    

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select the chair inside the home office

        sit_on_chair(chair)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_357(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_mouse_413_around_mouse_413(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==413
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
behavior find_chair(chair:item):
    body:
        if visited(chair):
            # If the chair has already been found, move close to it
            achieve close_char(char, chair)
        else:
            # Observe all unvisited chairs to locate the one in front of the computer
            foreach item: item:
                if is_chair(item) and not visited(item):
                    observe(item, "Locate the chair in front of the computer")

behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair)
        find_chair(chair)
        sit_on_chair(chair)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior find_chair(chair:item):
    body:
        if visited(chair):
            # If the chair has already been found, move close to it
            achieve close_char(char, chair)
        else:
            # Observe all unvisited chairs to locate the one in front of the computer
            foreach item: item:
                if is_chair(item) and not visited(item):
                    observe(item, "Locate the chair in front of the computer")

behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair)
        find_chair(chair)
        sit_on_chair(chair)
##############################
From agent.py-> find a plan in act()
walk_executor(desk_357)exp(chair_103, desk_357)walk_executor(chair_103)obs(chair_103, Locate the chair in front of the computer)walk_executor(desk_357)exp(chair_106, desk_357)walk_executor(chair_106)obs(chair_106, Locate the chair in front of the computer)walk_executor(chair_356)obs(chair_356, Locate the chair in front of the computer)walk_executor(desk_357)exp(chair_2004, desk_357)walk_executor(chair_2004)obs(chair_2004, Locate the chair in front of the computer)walk_executor(chair_103)sit_executor(chair_103)
##############################
From agent.py
walk_executor(desk_357)
Find phone_2077. Find pencil_2001. Find headset_2076. Robot is inside home_office_319. Robot is close desk_357. Robot is close floor_326. Robot is no longer close computer_417.
##############################
From agent.py
exp(chair_103, desk_357)
Failed to find chair_103 around desk_357. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_356)exp(chair_103, chair_356)walk_executor(chair_103)obs(chair_103, Locate the chair in front of the computer)walk_executor(chair_356)exp(chair_106, chair_356)walk_executor(chair_106)obs(chair_106, Locate the chair in front of the computer)walk_executor(chair_356)obs(chair_356, Locate the chair in front of the computer)exp(chair_2004, chair_356)walk_executor(chair_2004)obs(chair_2004, Locate the chair in front of the computer)walk_executor(chair_103)sit_executor(chair_103)
##############################
From agent.py
walk_executor(chair_356)
Robot is inside home_office_319. Robot is close chair_356. Robot is no longer close desk_357.Robot is no longer close floor_326.
##############################
From agent.py
exp(chair_103, chair_356)
Failed to find chair_103 around chair_356. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_355)exp(chair_103, table_355)walk_executor(chair_103)obs(chair_103, Locate the chair in front of the computer)walk_executor(table_355)exp(chair_106, table_355)walk_executor(chair_106)obs(chair_106, Locate the chair in front of the computer)walk_executor(chair_356)obs(chair_356, Locate the chair in front of the computer)walk_executor(table_355)exp(chair_2004, table_355)walk_executor(chair_2004)obs(chair_2004, Locate the chair in front of the computer)walk_executor(chair_103)sit_executor(chair_103)
##############################
From agent.py
walk_executor(table_355)
Robot is inside home_office_319. Robot is close couch_352. Robot is close mat_401. Robot is close table_355. Robot is no longer close chair_356.
##############################
From agent.py
exp(chair_103, table_355)
Failed to find chair_103 around table_355. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_104)exp(chair_103, desk_104)walk_executor(chair_103)obs(chair_103, Locate the chair in front of the computer)walk_executor(desk_104)exp(chair_106, desk_104)walk_executor(chair_106)obs(chair_106, Locate the chair in front of the computer)walk_executor(chair_356)obs(chair_356, Locate the chair in front of the computer)walk_executor(desk_104)exp(chair_2004, desk_104)walk_executor(chair_2004)obs(chair_2004, Locate the chair in front of the computer)walk_executor(chair_103)sit_executor(chair_103)
##############################
From agent.py
walk_executor(desk_104)
Find keyboard_168. Find mouse_166. Find chair_103. Find drawing_175. Robot is inside bedroom_67. Robot is close desk_104. Robot is close floor_75. Robot is no longer inside home_office_319.Robot is no longer close couch_352.Robot is no longer close mat_401.Robot is no longer close table_355.
##############################
From agent.py
exp(chair_103, desk_104)
Find chair_103. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_103)obs(chair_103, Locate the chair in front of the computer)walk_executor(desk_104)exp(chair_106, desk_104)walk_executor(chair_106)obs(chair_106, Locate the chair in front of the computer)walk_executor(chair_356)obs(chair_356, Locate the chair in front of the computer)walk_executor(desk_104)exp(chair_2004, desk_104)walk_executor(chair_2004)obs(chair_2004, Locate the chair in front of the computer)walk_executor(chair_103)sit_executor(chair_103)
##############################
From agent.py
walk_executor(chair_103)
Robot is inside bedroom_67. Robot is close chair_103. Robot is no longer close desk_104.Robot is no longer close floor_75.
##############################
From agent.py
obs(chair_103, Locate the chair in front of the computer)
Get this information:  chair_103 is close to mouse_166. chair_103 is close to mousepad_167. chair_103 is close to keyboard_168. chair_103 is close to desk_104. chair_103 is close to computer_170. chair_103 is close to cpuscreen_171. chair_103 is close to floor_75. chair_103 is close to bookshelf_233. chair_103 is close to light_169. chair_103 is close to floor_76. chair_103 is close to floor_207. chair_103 is close to wall_209. chair_103 is close to wall_210. chair_103 is close to wall_83. chair_103 is close to wall_84. chair_103 is close to ceiling_93. chair_103 is close to character_65. chair_103 is inside bedroom_67. chair_103 is CLEAN.
##############################
From agent.py
walk_executor(desk_104)
Robot is inside bedroom_67. Robot is close desk_104. Robot is close floor_75. Robot is no longer close chair_103.
##############################
From agent.py
exp(chair_106, desk_104)
Failed to find chair_106 around desk_104. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_103)sit_executor(chair_103)
##############################
From agent.py
walk_executor(chair_103)
Robot is inside bedroom_67. Robot is close chair_103. Robot is no longer close desk_104.Robot is no longer close floor_75.
##############################
From agent.py
sit_executor(chair_103)
Robot is inside bedroom_67. Robot is close chair_103. Robot is on chair_103. 
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior touch_mouse(mouse:item):
    body:
        touch(mouse)
        # Touch the mouse to turn on the computer

behavior __goal__():
    body:
        bind mouse: item where:
            is_mouse(mouse)
        # Select the mouse

        touch_mouse(mouse)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior touch_mouse(mouse:item):
    body:
        touch(mouse)
        # Touch the mouse to turn on the computer

behavior __goal__():
    body:
        bind mouse: item where:
            is_mouse(mouse)
        # Select the mouse

        touch_mouse(mouse)

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(mouse_166)touch_executor(mouse_166)
##############################
From agent.py
standup_executor(char)
Robot is inside bedroom_67. Robot is close chair_103. Robot is on chair_103. 
##############################
From agent.py
walk_executor(mouse_166)
Robot is inside bedroom_67. Robot is close desk_104. Robot is close mouse_166. Robot is close mousepad_167. Robot is on chair_103. Robot is no longer close chair_103.
##############################
From agent.py
touch_executor(mouse_166)
Robot is inside bedroom_67. Robot is close desk_104. Robot is close mouse_166. Robot is close mousepad_167. Robot is on chair_103. 
##############################
From evaluation.py
cdl_dataset/dataset/Write_an_email/g2.txt
Checking k1
missed actions: walk_executor(chair_356);sit_executor(chair_356);
missed action num: 2
##############################
From evaluation.py
cdl_dataset/dataset/Write_an_email/g2.txt
Checking k1
missed actions: walk_executor(chair_356);sit_executor(chair_356);
missed action num: 2
##############################
