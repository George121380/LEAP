From agent.py
Reset goals: The sub-goals are: 
['1. Identify all the rooms in the house.', '2. Check if each room has a light turned on. Turn on a light in any room where it is off.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoe_rack_2044_around_cupboard_118(shoe_rack:item):
    goal: not unknown(shoe_rack)
    body:
        assert is_shoe_rack(shoe_rack)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(shoe_rack,cupboard_instance)
        else:
            exp(shoe_rack,cupboard_instance)
    eff:
        unknown[shoe_rack]=False
        close[shoe_rack,cupboard_instance]=True
        close[cupboard_instance,shoe_rack]=True
    

behavior find_vacuum_cleaner_2139_around_washing_machine_2079(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

behavior find_drawing_110_around_home_office_241(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(drawing,home_office_instance)
        else:
            exp(drawing,home_office_instance)
    eff:
        unknown[drawing]=False
        close[drawing,home_office_instance]=True
        close[home_office_instance,drawing]=True
    

#exp_behavior_end

#goal_representation
behavior observe_all_rooms_in_house():
    body:
        foreach room: item:
            if not visited(room):
                observe(room, "Identify the room in the house")

behavior __goal__():
    body:
        observe_all_rooms_in_house()
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2090_around_fridge_126(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_dessert,fridge_instance)
        else:
            exp(food_dessert,fridge_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,fridge_instance]=True
        close[fridge_instance,food_dessert]=True
    

behavior find_chair_2003_around_table_199(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_shoes_2033_around_cupboard_118(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(shoes,cupboard_instance)
        else:
            exp(shoes,cupboard_instance)
    eff:
        unknown[shoes]=False
        close[shoes,cupboard_instance]=True
        close[cupboard_instance,shoes]=True
    

behavior find_shoe_rack_2044_around_cupboard_118(shoe_rack:item):
    goal: not unknown(shoe_rack)
    body:
        assert is_shoe_rack(shoe_rack)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(shoe_rack,cupboard_instance)
        else:
            exp(shoe_rack,cupboard_instance)
    eff:
        unknown[shoe_rack]=False
        close[shoe_rack,cupboard_instance]=True
        close[cupboard_instance,shoe_rack]=True
    

behavior find_toy_2056_around_cupboard_118(toy:item):
    goal: not unknown(toy)
    body:
        assert is_toy(toy)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(toy,cupboard_instance)
        else:
            exp(toy,cupboard_instance)
    eff:
        unknown[toy]=False
        close[toy,cupboard_instance]=True
        close[cupboard_instance,toy]=True
    

behavior find_hanger_292_around_curtain_291(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==291
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(hanger,curtain_instance)
        else:
            exp(hanger,curtain_instance)
    eff:
        unknown[hanger]=False
        close[hanger,curtain_instance]=True
        close[curtain_instance,hanger]=True
    

behavior find_piano_bench_2062_around_bench_113(piano_bench:item):
    goal: not unknown(piano_bench)
    body:
        assert is_piano_bench(piano_bench)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==113
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(piano_bench,bench_instance)
        else:
            exp(piano_bench,bench_instance)
    eff:
        unknown[piano_bench]=False
        close[piano_bench,bench_instance]=True
        close[bench_instance,piano_bench]=True
    

#exp_behavior_end

#goal_representation
 
behavior identify_rooms(room:item):
    body:
        observe(room, "Identify the room in the house")

behavior __goal__():
    body:
        foreach room: item:
            # Identify all rooms in the house by observing them
            identify_rooms(room)

#goal_representation_end

##############################
