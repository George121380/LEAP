From agent.py
Reset goals: The sub-goals are: 
['Cook the bacon.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_142_around_kitchen_counter_132(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(tray,kitchen_counter_instance)
        else:
            exp(tray,kitchen_counter_instance)
    eff:
        unknown[tray]=False
        close[tray,kitchen_counter_instance]=True
        close[kitchen_counter_instance,tray]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
behavior cook_bacon(bacon:item, stove:item, fryingpan:item):
    body:
        achieve inside(bacon, fryingpan)
        # Place the bacon inside the frying pan
        achieve on(fryingpan, stove)
        # Ensure the frying pan is on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the bacon

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        # Select the bacon

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_bacon(bacon, stove, fryingpan)
        # Cook the bacon using the stove and frying pan
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bacon_2044_around_cupboard_131(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bacon,cupboard_instance)
        else:
            exp(food_bacon,cupboard_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,cupboard_instance]=True
        close[cupboard_instance,food_bacon]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_on_stove(fryingpan: item, stove: item):
    # Function to check if the frying pan is on the stove
    symbol on_stove = on(fryingpan, stove)
    return on_stove

behavior cook_bacon_with_fryingpan(bacon:item, fryingpan:item, stove:item):
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        if not is_fryingpan_on_stove(fryingpan, stove):
            achieve on(fryingpan, stove)
            # Place the frying pan on the stove if not already there

        achieve is_on(stove)
        # Turn on the stove to start cooking

        achieve inside(bacon, fryingpan)
        # Place the bacon inside the frying pan

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        # Select the bacon

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_bacon_with_fryingpan(bacon, fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable fryingpan already exists.
##############################
