From agent.py
Reset goals: The sub-goals are: 
['1. Identify the shirt that needs cleaning.', '2. Wash the shirt.', '3. Iron the shirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_dresser_123(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_shirt,dresser_instance)
        else:
            exp(clothes_shirt,dresser_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,dresser_instance]=True
        close[dresser_instance,clothes_shirt]=True
    

behavior find_basket_for_clothes_2006_around_washing_machine_2007(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(basket_for_clothes,washing_machine_instance)
        else:
            exp(basket_for_clothes,washing_machine_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,washing_machine_instance]=True
        close[washing_machine_instance,basket_for_clothes]=True
    

#exp_behavior_end

#goal_representation
 
def is_shirt_dirty(shirt:item):
    # Determine if the shirt is in a dirty state
    symbol dirty_state = dirty(shirt)
    return dirty_state

behavior __goal__():
    body:
        if exists shirt: item : is_clothes_shirt(shirt) and is_shirt_dirty(shirt):
            # Use known information to identify the dirty shirt
            bind shirt: item where:
                is_clothes_shirt(shirt) and is_shirt_dirty(shirt)
            achieve close_char(char, shirt)

        else:
            # Inspect all unvisited shirts to identify the one that needs cleaning
            foreach shirt: item:
                if is_clothes_shirt(shirt) and not visited(shirt):
                    observe(shirt, "Check if the shirt is dirty")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_shirt_dirty(shirt:item):
    # Determine if the shirt is in a dirty state
    symbol dirty_state = dirty(shirt)
    return dirty_state

behavior __goal__():
    body:
        if exists shirt: item : is_clothes_shirt(shirt) and is_shirt_dirty(shirt):
            # Use known information to identify the dirty shirt
            bind shirt: item where:
                is_clothes_shirt(shirt) and is_shirt_dirty(shirt)
            achieve close_char(char, shirt)

        else:
            # Inspect all unvisited shirts to identify the one that needs cleaning
            foreach shirt: item:
                if is_clothes_shirt(shirt) and not visited(shirt):
                    observe(shirt, "Check if the shirt is dirty")

##############################
From agent.py-> find a plan in act()
walk_executor(dresser_123)open_executor(dresser_123)exp(clothes_shirt_2086, dresser_123)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if the shirt is dirty)
##############################
From agent.py
walk_executor(dresser_123)
Find hanger_128. Find hanger_130. Find hanger_132. Find hanger_134. Find hanger_136. Find hanger_138. Find hanger_140. Find hanger_141. Find hanger_142. Find hanger_124. Find hanger_126. Find hanger_110. Find hanger_109. Find hanger_111. Find hanger_112. Find hanger_113. Find hanger_114. Find hanger_115. Find mat_173. Robot is inside bedroom_67. Robot is close hanger_128. Robot is close hanger_130. Robot is close hanger_132. Robot is close hanger_134. Robot is close hanger_136. Robot is close hanger_138. Robot is close hanger_140. Robot is close hanger_141. Robot is close hanger_142. Robot is close closetdrawer_143. Robot is close closetdrawer_146. Robot is close closetdrawer_148. Robot is close closetdrawer_150. Robot is close closetdrawer_154. Robot is close closetdrawer_158. Robot is close closetdrawer_160. Robot is close dresser_123. Robot is close hanger_124. Robot is close hanger_126. Robot is no longer inside bathroom_1.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2086);wash_executor(clothes_shirt_2086);
missed action num: 2
##############################
From agent.py
open_executor(dresser_123)
Robot is inside bedroom_67. Robot is close hanger_128. Robot is close hanger_130. Robot is close hanger_132. Robot is close hanger_134. Robot is close hanger_136. Robot is close hanger_138. Robot is close hanger_140. Robot is close hanger_141. Robot is close hanger_142. Robot is close closetdrawer_143. Robot is close closetdrawer_146. Robot is close closetdrawer_148. Robot is close closetdrawer_150. Robot is close closetdrawer_154. Robot is close closetdrawer_158. Robot is close closetdrawer_160. Robot is close dresser_123. Robot is close hanger_124. Robot is close hanger_126. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2086);wash_executor(clothes_shirt_2086);
missed action num: 2
##############################
From agent.py
exp(clothes_shirt_2086, dresser_123)
Failed to find clothes_shirt_2086 around dresser_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(dresser_108)open_executor(dresser_108)exp(clothes_shirt_2086, dresser_108)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if the shirt is dirty)
##############################
From agent.py
walk_executor(dresser_108)
Robot is inside bedroom_67. Robot is close dresser_108. Robot is close hanger_109. Robot is close hanger_110. Robot is close hanger_111. Robot is close hanger_112. Robot is close hanger_113. Robot is close hanger_114. Robot is close hanger_115. Robot is close closetdrawer_116. Robot is close closetdrawer_117. Robot is close closetdrawer_118. Robot is close closetdrawer_119. Robot is close closetdrawer_120. Robot is close closetdrawer_121. Robot is close closetdrawer_122. Robot is no longer close hanger_128.Robot is no longer close hanger_130.Robot is no longer close hanger_132.Robot is no longer close hanger_134.Robot is no longer close hanger_136.Robot is no longer close hanger_138.Robot is no longer close hanger_140.Robot is no longer close hanger_141.Robot is no longer close hanger_142.Robot is no longer close closetdrawer_143.Robot is no longer close closetdrawer_146.Robot is no longer close closetdrawer_148.Robot is no longer close closetdrawer_150.Robot is no longer close closetdrawer_154.Robot is no longer close closetdrawer_158.Robot is no longer close closetdrawer_160.Robot is no longer close dresser_123.Robot is no longer close hanger_124.Robot is no longer close hanger_126.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2086);wash_executor(clothes_shirt_2086);
missed action num: 2
##############################
From agent.py
open_executor(dresser_108)
Robot is inside bedroom_67. Robot is close dresser_108. Robot is close hanger_109. Robot is close hanger_110. Robot is close hanger_111. Robot is close hanger_112. Robot is close hanger_113. Robot is close hanger_114. Robot is close hanger_115. Robot is close closetdrawer_116. Robot is close closetdrawer_117. Robot is close closetdrawer_118. Robot is close closetdrawer_119. Robot is close closetdrawer_120. Robot is close closetdrawer_121. Robot is close closetdrawer_122. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2086);wash_executor(clothes_shirt_2086);
missed action num: 2
##############################
From agent.py
exp(clothes_shirt_2086, dresser_108)
Failed to find clothes_shirt_2086 around dresser_108. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_394)exp(clothes_shirt_2086, closetdrawer_394)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if the shirt is dirty)
##############################
From agent.py
walk_executor(closetdrawer_394)
Find hanger_361. Find hanger_372. Find hanger_363. Find hanger_374. Find hanger_375. Find hanger_367. Find hanger_359. Find hanger_369. Find hanger_365. Find hanger_376. Robot is inside home_office_319. Robot is close closetdrawer_394. Robot is close dresser_358. Robot is no longer inside bedroom_67.Robot is no longer close dresser_108.Robot is no longer close hanger_109.Robot is no longer close hanger_110.Robot is no longer close hanger_111.Robot is no longer close hanger_112.Robot is no longer close hanger_113.Robot is no longer close hanger_114.Robot is no longer close hanger_115.Robot is no longer close closetdrawer_116.Robot is no longer close closetdrawer_117.Robot is no longer close closetdrawer_118.Robot is no longer close closetdrawer_119.Robot is no longer close closetdrawer_120.Robot is no longer close closetdrawer_121.Robot is no longer close closetdrawer_122.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2086);wash_executor(clothes_shirt_2086);
missed action num: 2
##############################
From agent.py
exp(clothes_shirt_2086, closetdrawer_394)
Failed to find clothes_shirt_2086 around closetdrawer_394. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_377)exp(clothes_shirt_2086, closetdrawer_377)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if the shirt is dirty)
##############################
From agent.py
walk_executor(closetdrawer_377)
Robot is inside home_office_319. Robot is close dresser_358. Robot is close closetdrawer_384. Robot is close closetdrawer_377. Robot is no longer close closetdrawer_394.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2086);wash_executor(clothes_shirt_2086);
missed action num: 2
##############################
From agent.py
exp(clothes_shirt_2086, closetdrawer_377)
Failed to find clothes_shirt_2086 around closetdrawer_377. 
##############################
From agent.py-> find a plan in act()
walk_executor(hanger_363)exp(clothes_shirt_2086, hanger_363)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if the shirt is dirty)
##############################
From agent.py
walk_executor(hanger_363)
Robot is inside home_office_319. Robot is close dresser_358. Robot is close hanger_363. Robot is no longer close closetdrawer_384.Robot is no longer close closetdrawer_377.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2086);wash_executor(clothes_shirt_2086);
missed action num: 2
##############################
From agent.py
exp(clothes_shirt_2086, hanger_363)
Failed to find clothes_shirt_2086 around hanger_363. 
##############################
From agent.py-> find a plan in act()
walk_executor(hanger_374)exp(clothes_shirt_2086, hanger_374)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if the shirt is dirty)
##############################
From agent.py
walk_executor(hanger_374)
Robot is inside home_office_319. Robot is close dresser_358. Robot is close hanger_374. Robot is no longer close hanger_363.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2086);wash_executor(clothes_shirt_2086);
missed action num: 2
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find clothes_shirt_2086 ?
Answer: The clothes_shirt_2086 can be found inside bathroom_1. Look for the basket_for_clothes_2006, and you will find the clothes_shirt_2086 inside this basket.
Re-decompose: None

##############################
From agent.py
Human Instruction: The clothes_shirt_2086 can be found inside bathroom_1. Look for the basket_for_clothes_2006, and you will find the clothes_shirt_2086 inside this basket.

The actions you have taken:
Action 1: Walk to dresser_123.
Action 2: Open dresser_123.
Action 3: look for clothes_shirt_2086 around dresser_123.
Action 4: Walk to dresser_108.
Action 5: Open dresser_108.
Action 6: look for clothes_shirt_2086 around dresser_108.
Action 7: Walk to closetdrawer_394.
Action 8: look for clothes_shirt_2086 around closetdrawer_394.
Action 9: Walk to closetdrawer_377.
Action 10: look for clothes_shirt_2086 around closetdrawer_377.
Action 11: Walk to hanger_363.
Action 12: look for clothes_shirt_2086 around hanger_363.
Action 13: Walk to hanger_374.

##############################
From agent.py
exp(clothes_shirt_2086, hanger_374)
Failed to find clothes_shirt_2086 around hanger_374. 
##############################
From agent.py-> find a plan in act()
walk_executor(washing_machine_2007)open_executor(washing_machine_2007)exp(clothes_shirt_2086, washing_machine_2007)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if the shirt is dirty)
##############################
From agent.py
walk_executor(washing_machine_2007)
Robot is inside bathroom_1. Robot is close washing_machine_2007. Robot is no longer inside home_office_319.Robot is no longer close hanger_374.Robot is no longer close dresser_358.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2086);wash_executor(clothes_shirt_2086);
missed action num: 2
##############################
From agent.py
open_executor(washing_machine_2007)
Robot is inside bathroom_1. Robot is close washing_machine_2007. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2086);wash_executor(clothes_shirt_2086);
missed action num: 2
##############################
From agent.py
exp(clothes_shirt_2086, washing_machine_2007)
Failed to find clothes_shirt_2086 around washing_machine_2007. 
##############################
From agent.py-> find a plan in act()
walk_executor(drawing_400)exp(clothes_shirt_2086, drawing_400)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if the shirt is dirty)
##############################
From agent.py
walk_executor(drawing_400)
Robot is inside home_office_319. Robot is close drawing_400. Robot is no longer inside bathroom_1.Robot is no longer close washing_machine_2007.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2086);wash_executor(clothes_shirt_2086);
missed action num: 2
##############################
From agent.py
exp(clothes_shirt_2086, drawing_400)
Failed to find clothes_shirt_2086 around drawing_400. 
##############################
From agent.py-> find a plan in act()
walk_executor(shower_36)exp(clothes_shirt_2086, shower_36)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if the shirt is dirty)
##############################
From agent.py
walk_executor(shower_36)
Find basket_for_clothes_2006. Robot is inside bathroom_1. Robot is close shower_36. Robot is no longer inside home_office_319.Robot is no longer close drawing_400.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2086);wash_executor(clothes_shirt_2086);
missed action num: 2
##############################
From agent.py
exp(clothes_shirt_2086, shower_36)
Failed to find clothes_shirt_2086 around shower_36. 
##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2006)exp(clothes_shirt_2086, basket_for_clothes_2006)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Check if the shirt is dirty)
##############################
From agent.py
walk_executor(basket_for_clothes_2006)
Find clothes_pants_2085. Find clothes_shirt_2086. Find clothes_socks_2087. Find clothes_skirt_2088. Find towel_rack_33. Find towel_rack_32. Find towel_rack_34. Find mat_22. Find towel_rack_31. Robot is inside bathroom_1. Robot is close clothes_pants_2085. Robot is close clothes_shirt_2086. Robot is close clothes_socks_2087. Robot is close clothes_skirt_2088. Robot is close basket_for_clothes_2006. Robot is no longer close shower_36.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From agent.py
exp(clothes_shirt_2086, basket_for_clothes_2006)
Find clothes_shirt_2086. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt that needs to be cleaned.', '2. Wash the shirt.', '3. Iron the shirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2046_around_closetdrawer_392(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_380(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_380(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_shirt_in_basket(basket:item, shirt:item):
    body:
        if inside(shirt, basket):
            achieve close_char(char, basket)
        else:
            observe(basket, "Look for clothes_shirt_2086 inside basket_for_clothes_2006")

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2086
        bind basket: item where:
            is_basket_for_clothes(basket) and id[basket] == 2006
        find_shirt_in_basket(basket, shirt)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_clothes_inside_basket(basket: item):
    # Function to check if the basket contains clothes
    symbol has_clothes=exists o: item : is_clothes_shirt(o) and inside(o, basket)
    return has_clothes

behavior find_shirt_in_bathroom():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom) and id[bathroom] == 1
        # Select the bathroom with id 1

        bind basket: item where:
            is_basket_for_clothes(basket) and inside(basket, bathroom)
        # Select the basket_for_clothes inside the bathroom

        if not visited(basket):
            observe(basket, "Check if clothes_shirt_2086 is inside the basket")
            # Verify if the specific shirt is inside the clothes basket
        if is_clothes_inside_basket(basket):
            bind shirt: item where:
                is_clothes_shirt(shirt) and inside(shirt, basket)
            # Once identified, establish that the character is close to the basket to retrieve the shirt
            achieve close_char(char, basket)

behavior __goal__():
    body:
        find_shirt_in_bathroom()

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the shirt that needs to be cleaned." ?
Answer: Your current plan of subgoals is not aligned with the necessary steps to complete the task. Please develop a new plan that includes finding the shirt as part of the washing process.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt that needs to be cleaned.', '2. Wash the shirt.', '3. Iron the shirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_detergent_2084_around_bathroom_counter_41(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(detergent,bathroom_counter_instance)
        else:
            exp(detergent,bathroom_counter_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_counter_instance]=True
        close[bathroom_counter_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def has_clothes_shirt_in_basket(basket:item):
    # Function to check if clothes_shirt_2086 is in the basket_for_clothes_2006
    symbol in_basket=exists o: item : is_clothes_shirt(o) and id[o] == 2086 and inside(o, basket)
    return in_basket

behavior __goal__():
    body:
        if exists basket: item : is_basket_for_clothes(basket) and id[basket] == 2006 and has_clothes_shirt_in_basket(basket):
            # Check known information if clothes_shirt_2086 is in basket_for_clothes_2006
            bind basket: item where:
                is_basket_for_clothes(basket) and id[basket] == 2006 and has_clothes_shirt_in_basket(basket)
            bind clothes_shirt: item where:
                is_clothes_shirt(clothes_shirt) and id[clothes_shirt] == 2086
            achieve close_char(char, basket)
            # Approach the basket with the clothes_shirt_2086 inside

        else:
            # If clothes_shirt_2086 is not found, initiate exploration to locate it
            bind basket: item where:
                is_basket_for_clothes(basket) and id[basket] == 2006
            if not visited(basket):
                observe(basket, "Check if clothes_shirt_2086 is inside the basket")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_clothes_in_basket(target_clothes: item, basket: item):
    # Determine if the target clothes are in the specified basket
    symbol in_basket = inside(target_clothes, basket)
    return in_basket

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom) and id[bathroom] == 1
        # Select bathroom with ID 1

        bind basket: item where:
            is_basket_for_clothes(basket) and inside(basket, bathroom)
        # Select the basket for clothes inside bathroom_1

        if is_clothes_in_basket(clothes_shirt_2086, basket):
            achieve inside_char(char, bathroom)
            achieve close_char(char, basket)
            # Move into bathroom_1 and close to basket_for_clothes_2006
            
            observe(basket, "Check for clothes_shirt_2086 in the basket")
            # Observe the basket to find the desired shirt

        else:
            # If the shirt is not found, explore bathroom_1 to locate it
            foreach clothes: item:
                if is_clothes_shirt(clothes) and not visited(clothes):
                    observe(clothes, "Ensure it is clothes_shirt_2086")
                    # Check unvisited clothes to locate clothes_shirt_2086

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: clothes_shirt_2086; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#goal_representation
 
def is_clothes_in_basket(target_clothes: item, basket: item):
    # Determine if the target clothes are in the specified basket
    symbol in_basket = inside(target_clothes, basket)
    return in_basket

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom) and id[bathroom] == 1
        # Select bathroom with ID 1

        bind basket: item where:
            is_basket_for_clothes(basket) and inside(basket, bathroom)
        # Select the basket for clothes inside bathroom_1

        bind clothes_shirt_2086: item where:
            is_clothes_shirt(clothes_shirt_2086)
        # Select the specific shirt item

        if is_clothes_in_basket(clothes_shirt_2086, basket):
            achieve inside_char(char, bathroom)
            achieve close_char(char, basket)
            # Move into bathroom_1 and close to basket_for_clothes_2006
            
            observe(basket, "Check for clothes_shirt_2086 in the basket")
            # Observe the basket to find the desired shirt

        else:
            # If the shirt is not found, explore bathroom_1 to locate it
            foreach clothes: item:
                if is_clothes_shirt(clothes) and not visited(clothes):
                    observe(clothes, "Ensure it is clothes_shirt_2086")
                    # Check unvisited clothes to locate clothes_shirt_2086

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt.', '2. Wash the shirt.', '3. Iron the shirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2046_around_closetdrawer_392(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_392(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_392(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
def find_shirt(basket: item):
    # Define a behavior to find the shirt inside the basket
    body:
        achieve inside(clothes_shirt_2086, basket)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind basket: item where:
            is_basket_for_clothes(basket) and inside(basket, bathroom)
        # Select the basket for clothes inside the bathroom

        find_shirt(basket)
        # Call the behavior to find the shirt inside the selected basket

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 6748, column 9.
Expected one of: 
	* LSHIFT
	* AMPERSAND
	* __ANON_6
	* __ANON_7
	* SLASH
	* __ANON_0
	* _NEWLINE
	* SEMICOLON
	* PERCENT
	* OR
	* __ANON_4
	* CIRCUMFLEX
	* MORETHAN
	* IF
	* __ANON_5
	* EQUAL
	* STAR
	* GREATER_EQ
	* __ANON_8
	* __ANON_2
	* NOT_EQ
	* LESS_EQ
	* AND
	* DOUBLE_EQUAL
	* MINUS
	* __ANON_3
	* LESSTHAN
	* __ANON_1
	* VBAR
	* FLOORDIV
	* COMMA
	* AT
	* RSHIFT
	* PLUS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_gloves_2046_around_closetdrawer_392(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_392(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

#goal_representation
 
behavior find_shirt(basket:item):
    body:
        achieve inside(clothes_shirt_2086, basket)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)

        bind basket: item where:
            is_basket_for_clothes(basket) and inside(basket, bathroom)

        find_shirt(basket)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: clothes_shirt_2086; available variables: [Variable<basket: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior find_shirt(basket: item, shirt: item):
    body:
        achieve inside(shirt, basket)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)

        bind basket: item where:
            is_basket_for_clothes(basket) and inside(basket, bathroom)

        bind shirt: item where:
            is_clothes_shirt(shirt)

        find_shirt(basket, shirt)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2046_around_closetdrawer_392(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_towel_2057_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_shirt(shirt:item, basket:item):
    body:
        achieve inside(shirt, basket)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind basket_for_clothes: item where:
            is_basket_for_clothes(basket_for_clothes) and inside(basket_for_clothes, bathroom)
        # Select the basket for clothes inside the bathroom

        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and inside(clothes_shirt, basket_for_clothes)
        # Select the shirt inside the basket for clothes

        find_shirt(clothes_shirt, basket_for_clothes)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt that needs to be cleaned.', '2. Wash the shirt.', '3. Iron the shirt.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_detergent_2084_around_bathroom_counter_41(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(detergent,bathroom_counter_instance)
        else:
            exp(detergent,bathroom_counter_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_counter_instance]=True
        close[bathroom_counter_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def is_shirt_found(shirt: item):
    # Determine if the shirt has been observed or is known to be in a specific location
    symbol found=visited(shirt)
    return found

behavior find_clothes_shirt(shirt:item):
    body:
        if is_shirt_found(shirt):
            # If the shirt is already found, ensure the character is close to it
            achieve close_char(char, shirt)
        else:
            # If the shirt is not found, observe all unvisited shirts to locate it
            foreach s: item:
                if is_clothes_shirt(s) and not visited(s):
                    observe(s, "Locate the shirt clothes_shirt_2086 in bathroom_1, inside basket_for_clothes_2006")

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2086
        find_clothes_shirt(shirt)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_shirt_found(shirt: item):
    # Determine if the shirt has been observed or is known to be in a specific location
    symbol found=visited(shirt)
    return found

behavior find_clothes_shirt(shirt:item):
    body:
        if is_shirt_found(shirt):
            # If the shirt is already found, ensure the character is close to it
            achieve close_char(char, shirt)
        else:
            # If the shirt is not found, observe all unvisited shirts to locate it
            foreach s: item:
                if is_clothes_shirt(s) and not visited(s):
                    observe(s, "Locate the shirt clothes_shirt_2086 in bathroom_1, inside basket_for_clothes_2006")

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt] == 2086
        find_clothes_shirt(shirt)

##############################
From agent.py-> find a plan in act()
obs(clothes_shirt_2086, Locate the shirt clothes_shirt_2086 in bathroom_1, inside basket_for_clothes_2006)
##############################
From agent.py
obs(clothes_shirt_2086, Locate the shirt clothes_shirt_2086 in bathroom_1, inside basket_for_clothes_2006)
Get this information:  clothes_shirt_2086 is close to basket_for_clothes_2006. clothes_shirt_2086 is close to character_65. clothes_shirt_2086 is inside bathroom_1. clothes_shirt_2086 is inside basket_for_clothes_2006. clothes_shirt_2086 is DIRTY.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_kitchen_counter_230(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(detergent,kitchen_counter_instance)
        else:
            exp(detergent,kitchen_counter_instance)
    eff:
        unknown[detergent]=False
        close[detergent,kitchen_counter_instance]=True
        close[kitchen_counter_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def locate_shirt(shirt:item):
    # Determine if the shirt has been found in the bathroom
    symbol found=exists basket: item : is_basket_for_clothes(basket) and inside(shirt, basket)
    return found

behavior pick_up_shirt(shirt:item):
    body:
        achieve_once inhand(shirt) # Pick up the shirt

behavior place_shirt_in_washer(shirt:item, washer:item):
    body:
        achieve inside(shirt, washer) # Place the shirt inside the washing machine

behavior start_washing_machine(washer:item):
    body:
        achieve closed(washer) # Ensure the washing machine door is closed
        achieve is_on(washer) # Start the washing machine

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and locate_shirt(shirt)
        # Select the shirt located inside the basket in the bathroom

        bind washer: item where:
            is_washing_machine(washer) and id[washer] == 2007
        # Select the washing machine with ID 2007

        pick_up_shirt(shirt)
        place_shirt_in_washer(shirt, washer)
        start_washing_machine(washer)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def locate_shirt(shirt:item):
    # Determine if the shirt has been found in the bathroom
    symbol found=exists basket: item : is_basket_for_clothes(basket) and inside(shirt, basket)
    return found

behavior pick_up_shirt(shirt:item):
    body:
        achieve_once inhand(shirt) # Pick up the shirt

behavior place_shirt_in_washer(shirt:item, washer:item):
    body:
        achieve inside(shirt, washer) # Place the shirt inside the washing machine

behavior start_washing_machine(washer:item):
    body:
        achieve closed(washer) # Ensure the washing machine door is closed
        achieve is_on(washer) # Start the washing machine

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and locate_shirt(shirt)
        # Select the shirt located inside the basket in the bathroom

        bind washer: item where:
            is_washing_machine(washer) and id[washer] == 2007
        # Select the washing machine with ID 2007

        pick_up_shirt(shirt)
        place_shirt_in_washer(shirt, washer)
        start_washing_machine(washer)

##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2086)walk_executor(washing_machine_2007)putin_executor(clothes_shirt_2086, washing_machine_2007)close_executor(washing_machine_2007)plugin_executor(washing_machine_2007)switchon_executor(washing_machine_2007)
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot is inside bathroom_1. Robot is close clothes_pants_2085. Robot is close clothes_shirt_2086. Robot is close clothes_socks_2087. Robot is close clothes_skirt_2088. Robot is close basket_for_clothes_2006. Grabbing clothes_shirt_2086 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From agent.py
walk_executor(washing_machine_2007)
Robot is inside bathroom_1. Robot is close clothes_shirt_2086. Robot is close washing_machine_2007. Robot is no longer close clothes_pants_2085.Robot is no longer close clothes_socks_2087.Robot is no longer close clothes_skirt_2088.Robot is no longer close basket_for_clothes_2006.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From agent.py
putin_executor(clothes_shirt_2086, washing_machine_2007)
Robot is inside bathroom_1. Robot is close clothes_shirt_2086. Robot is close washing_machine_2007. clothes_shirt_2086 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From agent.py
close_executor(washing_machine_2007)
Robot is inside bathroom_1. Robot is close clothes_shirt_2086. Robot is close washing_machine_2007. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From agent.py
plugin_executor(washing_machine_2007)
Robot is inside bathroom_1. Robot is close clothes_shirt_2086. Robot is close washing_machine_2007. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From agent.py
switchon_executor(washing_machine_2007)
Robot is inside bathroom_1. Robot is close clothes_shirt_2086. Robot is close washing_machine_2007. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_iron(iron:item, socket:item):
    body:
        achieve plugged(iron)
        # Ensure the iron is plugged in

behavior heat_up_iron(iron:item):
    body:
        achieve is_on(iron)
        # Turn on the iron to heat it up

behavior iron_the_shirt(shirt:item, ironing_board:item):
    body:
        achieve on(shirt, ironing_board)
        # Place the shirt on the ironing board

        achieve clean(shirt)
        # Assert that the shirt is clean before ironing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select the clean shirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind socket: item where:
            is_powersocket(socket)
        # Select a power socket

        iron_the_shirt(shirt, ironing_board)
        plug_in_iron(iron, socket)
        heat_up_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2044_around_closetdrawer_392(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve on(shirt, ironing_board)
        # Place the shirt on the ironing board

        achieve plugged(iron)
        # Plug in the iron

        achieve is_on(iron)
        # Turn on the iron

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select the cleaned shirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        iron_shirt(shirt, iron, ironing_board)
        # Perform the ironing of the shirt
#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. iron the shirt." ?
Answer: Put the shirt on the ironing board. Turn on the iron. Then put the iron on the shirt, push and pull it on the shirt.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(iron:item, ironing_board:item, shirt:item):
    body:
        achieve on(shirt, ironing_board)
        # Place the shirt on the ironing board

        achieve is_on(iron)
        # Ensure the iron is on

        achieve inside(iron, shirt)
        # Iron the shirt by applying the iron onto it

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select the clean shirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        
        bind iron: item where:
            is_iron(iron)
        # Select the iron

        iron_shirt(iron, ironing_board, shirt)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_chair_356(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==356
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation

behavior prepare_shirt_for_ironing(shirt: item, ironing_board: item, iron: item):
    body:
        achieve on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve is_on(iron)
        # Turn on the iron

behavior iron_shirt(shirt: item, iron: item):
    body:
        achieve achieved_once inhand(iron)
        achieve close_char(char, shirt)
        achieve facing_char(char, shirt)
        # Ensure the character is facing the shirt for proper ironing

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt) and id[shirt] == 2086
        # Select the clean shirt with ID 2086

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        prepare_shirt_for_ironing(shirt, ironing_board, iron)
        iron_shirt(shirt, iron)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'inhand') at line 6740, column 31.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#goal_representation
 
behavior prepare_shirt_for_ironing(shirt: item, ironing_board: item, iron: item):
    body:
        achieve on(shirt, ironing_board)
        achieve is_on(iron)

behavior iron_shirt(shirt: item, iron: item):
    body:
        achieve_once inhand(iron)
        achieve close_char(char, shirt)
        achieve facing_char(char, shirt)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt) and id[shirt] == 2086

        bind ironing_board: item where:
            is_ironing_board(ironing_board)

        bind iron: item where:
            is_iron(iron)

        prepare_shirt_for_ironing(shirt, ironing_board, iron)
        iron_shirt(shirt, iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_closetdrawer_392(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(iron,closetdrawer_instance)
        else:
            exp(iron,closetdrawer_instance)
    eff:
        unknown[iron]=False
        close[iron,closetdrawer_instance]=True
        close[closetdrawer_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
def has_ironing_board(iron:item):
    # Determine whether the ironing board is near the iron
    symbol has_ironing_board=exists ironing_board:item: is_ironing_board(ironing_board) and close(ironing_board, iron)
    return has_ironing_board

behavior place_on_ironing_board(clothes_shirt:item, ironing_board:item):
    body:
        achieve on(clothes_shirt, ironing_board)

behavior turn_on_iron(iron:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)

behavior __goal__():
    body:
        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and clean(clothes_shirt)
        # Select the clean shirt

        bind basket_for_clothes: item where:
            is_basket_for_clothes(basket_for_clothes)
        # Select the basket_for_clothes containing the clean shirt

        bind bathroom: item where:
            is_bathroom(bathroom) and inside(basket_for_clothes, bathroom)
        # Select the bathroom with the basket_for_clothes

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron) and has_ironing_board(iron)
        # Select the iron close to an ironing_board

        place_on_ironing_board(clothes_shirt, ironing_board)
        # Place the clean shirt on the ironing board

        turn_on_iron(iron)
        # Turn on the iron

        achieve close_char(char, ironing_board)
        # Move close to the ironing board with the shirt

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2046_around_closetdrawer_392(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

behavior find_food_hamburger_2024_around_kitchen_counter_230(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve on(shirt, ironing_board)
        # Place the shirt on the ironing board
        achieve is_on(iron)
        # Turn on the iron
        achieve close_char(char, ironing_board)
        # Ensure character is close to the ironing board

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select the clean shirt
        
        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board
        
        bind iron: item where:
            is_iron(iron)
        # Select the iron
        
        iron_shirt(shirt, iron, ironing_board)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2089_around_closetdrawer_392(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(iron,closetdrawer_instance)
        else:
            exp(iron,closetdrawer_instance)
    eff:
        unknown[iron]=False
        close[iron,closetdrawer_instance]=True
        close[closetdrawer_instance,iron]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_ironing_setup(ironing_board:item, shirt:item):
    body:
        achieve on(shirt, ironing_board)
        # Place the shirt on the ironing board

behavior iron_the_shirt(shirt:item, iron:item):
    body:
        achieve is_on(iron) 
        # Turn on the iron
        achieve on(shirt, iron)
        # Iron the shirt by placing the iron on it and moving it across

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) 
        # Select the ironing board

        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        prepare_ironing_setup(ironing_board, shirt)
        iron_the_shirt(shirt, iron)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior prepare_ironing_setup(ironing_board:item, shirt:item):
    body:
        achieve on(shirt, ironing_board)
        # Place the shirt on the ironing board

behavior iron_the_shirt(shirt:item, iron:item):
    body:
        achieve is_on(iron) 
        # Turn on the iron
        achieve on(shirt, iron)
        # Iron the shirt by placing the iron on it and moving it across

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) 
        # Select the ironing board

        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        prepare_ironing_setup(ironing_board, shirt)
        iron_the_shirt(shirt, iron)
##############################
From agent.py-> find a plan in act()
switchoff_executor(washing_machine_2007)open_executor(washing_machine_2007)grab_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)walk_executor(closetdrawer_392)exp(iron_2089, closetdrawer_392)walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)walk_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(iron_2089)put_executor(clothes_shirt_2086, iron_2089)
##############################
From agent.py
switchoff_executor(washing_machine_2007)
Robot is inside bathroom_1. Robot is close clothes_shirt_2086. Robot is close washing_machine_2007. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From agent.py
open_executor(washing_machine_2007)
Robot is inside bathroom_1. Robot is close clothes_shirt_2086. Robot is close washing_machine_2007. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot is inside bathroom_1. Robot is close clothes_shirt_2086. Robot is close washing_machine_2007. Grabbing clothes_shirt_2086 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From agent.py
walk_executor(ironing_board_2074)
Find iron_2089. Robot is inside bathroom_1. Robot is close clothes_shirt_2086. Robot is close ironing_board_2074. Robot is no longer close washing_machine_2007.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From agent.py
put_executor(clothes_shirt_2086, ironing_board_2074)
Robot is inside bathroom_1. Robot is close clothes_shirt_2086. Robot is close ironing_board_2074. clothes_shirt_2086 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From agent.py
walk_executor(closetdrawer_392)
Robot is inside home_office_319. Robot is close closetdrawer_392. Robot is close dresser_358. Robot is no longer inside bathroom_1.Robot is no longer close ironing_board_2074.Robot is no longer close clothes_shirt_2086.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2086);wash_executor(clothes_shirt_2086);
missed action num: 2
##############################
From agent.py
exp(iron_2089, closetdrawer_392)
Find iron_2089. 
##############################
From agent.py-> find a plan in act()
walk_executor(iron_2089)plugin_executor(iron_2089)switchon_executor(iron_2089)walk_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(iron_2089)put_executor(clothes_shirt_2086, iron_2089)
##############################
From agent.py
walk_executor(iron_2089)
Robot is inside bathroom_1. Robot is close iron_2089. Robot is close ironing_board_2074. Robot is no longer inside home_office_319.Robot is no longer close closetdrawer_392.Robot is no longer close dresser_358.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2086);wash_executor(clothes_shirt_2086);
missed action num: 2
##############################
From agent.py
plugin_executor(iron_2089)
Robot is inside bathroom_1. Robot is close iron_2089. Robot is close ironing_board_2074. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2086);wash_executor(clothes_shirt_2086);
missed action num: 2
##############################
From agent.py
switchon_executor(iron_2089)
Robot is inside bathroom_1. Robot is close iron_2089. Robot is close ironing_board_2074. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: walk_executor(clothes_shirt_2086);wash_executor(clothes_shirt_2086);
missed action num: 2
##############################
From agent.py
walk_executor(clothes_shirt_2086)
Robot is inside bathroom_1. Robot is close ironing_board_2074. Robot is close clothes_shirt_2086. Robot is no longer close iron_2089.
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot is inside bathroom_1. Robot is close ironing_board_2074. Robot is close clothes_shirt_2086. Grabbing clothes_shirt_2086 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From agent.py
walk_executor(iron_2089)
Robot is inside bathroom_1. Robot is close ironing_board_2074. Robot is close clothes_shirt_2086. Robot is close iron_2089. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From agent.py
put_executor(clothes_shirt_2086, iron_2089)
Robot is inside bathroom_1. Robot is close ironing_board_2074. Robot is close clothes_shirt_2086. Robot is close iron_2089. clothes_shirt_2086 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From agent.py
Human Instruction: You need to iron the shirt by putting the iron on the shirt and moving it across.

Human Guidance: Put the shirt on the ironing board. Turn on the iron. Then put the iron on the shirt, push and pull it on the shirt.
The actions you have taken:
Action 1: Walk to dresser_123.
Action 2: Open dresser_123.
Action 3: look for clothes_shirt_2086 around dresser_123.
Action 4: Walk to dresser_108.
Action 5: Open dresser_108.
Action 6: look for clothes_shirt_2086 around dresser_108.
Action 7: Walk to closetdrawer_394.
Action 8: look for clothes_shirt_2086 around closetdrawer_394.
Action 9: Walk to closetdrawer_377.
Action 10: look for clothes_shirt_2086 around closetdrawer_377.
Action 11: Walk to hanger_363.
Action 12: look for clothes_shirt_2086 around hanger_363.
Action 13: Walk to hanger_374.
Action 14: look for clothes_shirt_2086 around hanger_374.
Action 15: Walk to washing_machine_2007.
Action 16: Open washing_machine_2007.
Action 17: look for clothes_shirt_2086 around washing_machine_2007.
Action 18: Walk to drawing_400.
Action 19: look for clothes_shirt_2086 around drawing_400.
Action 20: Walk to shower_36.
Action 21: look for clothes_shirt_2086 around shower_36.
Action 22: Walk to basket_for_clothes_2006.
Action 23: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 24: Invalid parameter input.
Action 25: Grab clothes_shirt_2086.
Action 26: Walk to washing_machine_2007.
Action 27: Put clothes_shirt_2086 into washing_machine_2007.
Action 28: Close washing_machine_2007.
Action 29: Plug in washing_machine_2007.
Action 30: Switch on washing_machine_2007.
Action 31: Switch off washing_machine_2007.
Action 32: Open washing_machine_2007.
Action 33: Grab clothes_shirt_2086.
Action 34: Walk to ironing_board_2074.
Action 35: Put clothes_shirt_2086 on ironing_board_2074.
Action 36: Walk to closetdrawer_392.
Action 37: look for iron_2089 around closetdrawer_392.
Action 38: Walk to iron_2089.
Action 39: Plug in iron_2089.
Action 40: Switch on iron_2089.
Action 41: Walk to clothes_shirt_2086.
Action 42: Grab clothes_shirt_2086.
Action 43: Walk to iron_2089.
Action 44: Put clothes_shirt_2086 on iron_2089.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2046_around_closetdrawer_380(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

behavior find_clothes_dress_2044_around_hanger_369(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==369
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_dress,hanger_instance)
        else:
            exp(clothes_dress,hanger_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,hanger_instance]=True
        close[hanger_instance,clothes_dress]=True
    

behavior find_towel_2056_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve on(shirt, ironing_board) 
        # Ensure the shirt is on the ironing board before ironing

        achieve plugged(iron)
        # Ensure the iron is plugged in

        achieve is_on(iron)
        # Ensure the iron is turned on for use
        
        # Since there was an incorrect action put clothes_shirt_2086 on iron_2089,
        # iron the shirt as required without putting it on the iron
        
behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select the clean shirt

        bind iron: item where:
            is_iron(iron)
        # Select the iron being used

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board being used
        
        iron_shirt(shirt, iron, ironing_board)
        # Iron the clean shirt using the selected items
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2046_around_closetdrawer_380(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==380
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_gloves,closetdrawer_instance)
        else:
            exp(clothes_gloves,closetdrawer_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_gloves]=True
    

behavior find_towel_2057_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_shirt_on_ironing_board(shirt:item, ironing_board:item):
    body:
        achieve on(shirt, ironing_board)

behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior iron_shirt(iron:item, shirt:item, ironing_board:item):
    body:
        achieve_once inhand(iron)
        achieve facing(iron, ironing_board)
        achieve_each inhand(shirt)
        # Move the iron back and forth to iron the shirt

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select the clean shirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        place_shirt_on_ironing_board(shirt, ironing_board)
        turn_on_iron(iron)
        iron_shirt(iron, shirt, ironing_board)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'inhand') at line 6752, column 22.
Expected one of: 
	* LSHIFT
	* AMPERSAND
	* __ANON_6
	* __ANON_7
	* SLASH
	* __ANON_0
	* _NEWLINE
	* SEMICOLON
	* PERCENT
	* OR
	* __ANON_4
	* CIRCUMFLEX
	* MORETHAN
	* IF
	* __ANON_5
	* EQUAL
	* STAR
	* GREATER_EQ
	* __ANON_8
	* __ANON_2
	* NOT_EQ
	* LESS_EQ
	* AND
	* DOUBLE_EQUAL
	* MINUS
	* __ANON_3
	* LESSTHAN
	* __ANON_1
	* VBAR
	* FLOORDIV
	* COMMA
	* AT
	* RSHIFT
	* PLUS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_keyboard_415_around_keyboard_415(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind keyboard_instance:item where:
            is_keyboard(keyboard_instance) and id[keyboard_instance]==415
        achieve close_char(char,keyboard_instance)
        if can_open(keyboard_instance):
            achieve_once open(keyboard_instance)
            exp(keyboard,keyboard_instance)
        else:
            exp(keyboard,keyboard_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,keyboard_instance]=True
        close[keyboard_instance,keyboard]=True
    

behavior find_tray_296_around_dishwasher_1001(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

behavior find_cleaning_solution_2073_around_kitchen_counter_230(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cleaning_solution,kitchen_counter_instance)
        else:
            exp(cleaning_solution,kitchen_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cleaning_solution]=True
    

#goal_representation
 
behavior place_shirt_on_ironing_board(shirt:item, ironing_board:item):
    body:
        achieve on(shirt, ironing_board)

behavior turn_on_iron(iron:item):
    body:
        achieve is_on(iron)

behavior iron_shirt(iron:item, shirt:item, ironing_board:item):
    body:
        achieve_once inhand(iron)
        achieve facing(iron, ironing_board)
        # Move the iron back and forth to iron the shirt

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select the clean shirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        place_shirt_on_ironing_board(shirt, ironing_board)
        turn_on_iron(iron)
        iron_shirt(iron, shirt, ironing_board)

#goal_representation_end

##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k1
missed actions: wash_executor(clothes_shirt_2086);
missed action num: 1
##############################
From evaluation.py
cdl_dataset/dataset/Iron_clothes/g1.txt
Checking k2
missed actions: grab_executor(clothes_shirt_2086);put_executor(clothes_shirt_2086, ironing_board_2074);grab_executor(iron_2089);put_executor(iron_2089, clothes_shirt_2086);
missed action num: 4
##############################
