From agent.py
Reset goals: The sub-goals are: 
['1. Find the sink in the bathroom.', '2. Prepare the sink with soapy water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2159_around_nightstand_192(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(clothes_socks,nightstand_instance)
        else:
            exp(clothes_socks,nightstand_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,nightstand_instance]=True
        close[nightstand_instance,clothes_socks]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        if exists sink: item : is_sink(sink) and not visited(sink):
            # Check for any sinks that have not been visited in the bathroom
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Locate the sink in the bathroom")


#goal_representation_end

##############################
From agent.py->reset_goal

behavior __goal__():
    body:
        if exists sink: item : is_sink(sink) and not visited(sink):
            # Check for any sinks that have not been visited in the bathroom
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Locate the sink in the bathroom")


##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)obs(sink_19, Locate the sink in the bathroom)walk_executor(sink_120)obs(sink_120, Locate the sink in the bathroom)
##############################
From agent.py
walk_executor(sink_19)
Find mat_32. Find detergent_2155. Find soap_2125. Find after_shave_2063. Find cleaning_solution_2143. Find drawing_33. Find phone_2029. Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.
##############################
From agent.py
obs(sink_19, Locate the sink in the bathroom)
Get this information:  sink_19 is close to mat_32. sink_19 is close to wall_3. sink_19 is close to wall_4. sink_19 is close to floor_10. sink_19 is close to detergent_2155. sink_19 is close to floor_11. sink_19 is close to soap_2125. sink_19 is close to floor_14. sink_19 is close to after_shave_2063. sink_19 is close to bathroom_cabinet_17. sink_19 is close to bathroom_counter_18. sink_19 is close to faucet_20. sink_19 is close to cleaning_solution_2143. sink_19 is close to character_240. sink_19 is inside bathroom_1. sink_19 is inside bathroom_counter_18. soap_2125 is on sink_19. detergent_2155 is on sink_19. sink_19 is facing drawing_33. after_shave_2063 is inside sink_19. cleaning_solution_2143 is on sink_19. sink_19 is DIRTY.
##############################
From agent.py
walk_executor(sink_120)
Find basket_for_clothes_2078. Find soap_2010. Find pot_2138. Find tray_128. Find ice_2024. Find soap_2126. Find pot_78. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find fork_2151. Robot is inside dining_room_41. Robot is close sink_120. Robot is close kitchen_counter_119. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close sink_19.
##############################
From agent.py
obs(sink_120, Locate the sink in the bathroom)
Get this information:  soap_2010 is inside sink_120. sink_120 is close to wall_64. sink_120 is close to wall_67. sink_120 is close to ice_2024. sink_120 is close to walllamp_140. sink_120 is close to knifeblock_76. sink_120 is close to soap_2126. sink_120 is close to floor_45. sink_120 is close to pot_78. sink_120 is close to floor_46. sink_120 is close to cupboard_117. sink_120 is close to kitchen_counter_119. sink_120 is close to faucet_121. sink_120 is close to soap_2010. sink_120 is close to kitchen_counter_123. sink_120 is close to basket_for_clothes_2078. sink_120 is close to washing_machine_2079. sink_120 is close to character_240. ice_2024 is inside sink_120. soap_2126 is on sink_120. sink_120 is inside dining_room_41. sink_120 is inside kitchen_counter_119. sink_120 is DIRTY.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2159_around_basket_for_clothes_2078(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

behavior find_detergent_2155_around_bathroom_cabinet_17(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink: item):
    # Determine whether the sink has a faucet
    symbol has_faucet = exists faucet: item : is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior prepare_sink_with_soapy_water(sink: item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the sink

        bind soap: item where:
            is_soap(soap)
        achieve_once inhand(soap)
        squeeze(soap)
        # Squeeze soap into the sink to create soapy water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet when done

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 120

        prepare_sink_with_soapy_water(sink)
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_faucet(sink: item):
    # Determine whether the sink has a faucet
    symbol has_faucet = exists faucet: item : is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior prepare_sink_with_soapy_water(sink: item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the sink

        bind soap: item where:
            is_soap(soap)
        achieve_once inhand(soap)
        squeeze(soap)
        # Squeeze soap into the sink to create soapy water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet when done

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 120

        prepare_sink_with_soapy_water(sink)
 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_121)switchon_executor(faucet_121)walk_executor(soap_2125)grab_executor(soap_2125)
##############################
From agent.py
walk_executor(faucet_121)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close faucet_121. Robot is no longer close sink_120.
##############################
From agent.py
switchon_executor(faucet_121)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close faucet_121. 
##############################
From agent.py
walk_executor(soap_2125)
Robot is inside bathroom_1. Robot is close sink_19. Robot is close soap_2125. Robot is no longer inside dining_room_41.Robot is no longer close faucet_121.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
grab_executor(soap_2125)
Robot is inside bathroom_1. Robot is close sink_19. Robot is close soap_2125. Grabbing soap_2125 by right hand. 
##############################
From agent.py
Human Instruction: You need to fill the sink with water by turning on the faucet, squeeze the soap into the sink, and then turn off the faucet to complete the task of preparing the sink with soapy water.

The actions you have taken:
Action 1: Walk to sink_19.
Action 2: Observe around sink_19 with the question of Locate the sink in the bathroom.
Action 3: Walk to sink_120.
Action 4: Observe around sink_120 with the question of Locate the sink in the bathroom.
Action 5: Walk to faucet_121.
Action 6: Switch on faucet_121.
Action 7: Walk to soap_2125.
Action 8: Grab soap_2125.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2011_around_bathroom_cabinet_17(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_clothes_socks_2159_around_basket_for_clothes_2078(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

#exp_behavior_end

#goal_representation
behavior fill_sink_with_soapy_water(sink:item, faucet:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Squeeze soap into the sink
        
        achieve_once is_on(faucet)
        # Turn the faucet on to fill the sink with water

        achieve has_water(sink)
        # Ensure the sink is filled with water

        achieve_once is_off(faucet)
        # Turn the faucet off

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 120
        # Select sink with ID 120

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet close to the sink

        bind soap: item where:
            is_soap(soap) and inhand(soap)
        # Assume soap is already grabbed (in hand)

        fill_sink_with_soapy_water(sink, faucet, soap)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_sink_with_soapy_water(sink:item, faucet:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Squeeze soap into the sink
        
        achieve_once is_on(faucet)
        # Turn the faucet on to fill the sink with water

        achieve has_water(sink)
        # Ensure the sink is filled with water

        achieve_once is_off(faucet)
        # Turn the faucet off

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 120
        # Select sink with ID 120

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet close to the sink

        bind soap: item where:
            is_soap(soap) and inhand(soap)
        # Assume soap is already grabbed (in hand)

        fill_sink_with_soapy_water(sink, faucet, soap)
##############################
From agent.py-> find a plan in act()
walk_executor(sink_120)putin_executor(soap_2125, sink_120)walk_executor(faucet_121)switchoff_executor(faucet_121)
##############################
From agent.py
walk_executor(sink_120)
Robot is inside dining_room_41. Robot is close soap_2125. Robot is close sink_120. Robot is close kitchen_counter_119. Robot is no longer inside bathroom_1.Robot is no longer close sink_19.
##############################
From agent.py
putin_executor(soap_2125, sink_120)
Robot is inside dining_room_41. Robot is close soap_2125. Robot is close sink_120. Robot is close kitchen_counter_119. soap_2125 released by right hand. 
##############################
From agent.py
walk_executor(faucet_121)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close faucet_121. Robot is no longer close sink_120.Robot is no longer close soap_2125.
##############################
From agent.py
switchoff_executor(faucet_121)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close faucet_121. 
##############################
From evaluation.py
cdl_dataset/dataset/Clean_the_bathroom/g2.txt
Checking k1
missed actions: walk_executor(soap_2125);grab_executor(soap_2125);walk_executor(sink_19);putin_executor(soap_2125, sink_19);
missed action num: 4
##############################
From evaluation.py
cdl_dataset/dataset/Clean_the_bathroom/g2.txt
Checking k1
missed actions: walk_executor(soap_2125);grab_executor(soap_2125);walk_executor(sink_19);putin_executor(soap_2125, sink_19);
missed action num: 4
##############################
