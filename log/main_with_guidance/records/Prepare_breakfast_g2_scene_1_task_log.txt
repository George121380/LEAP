From agent.py
Reset goals: The sub-goals are: 
['Scramble the egg using the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_ready(fryingpan: item):
    # Function to check if the frying pan is on the stove and clean, ready for use
    symbol is_on_stove=exists stove: item : is_stove(stove) and on(fryingpan, stove) 
    symbol is_clean_and_ready = clean(fryingpan)
    return is_on_stove and is_clean_and_ready

behavior scramble_egg_in_fryingpan(egg: item, fryingpan: item):
    body:
        achieve clean(egg) # Ensure the egg is clean before scrambling
        achieve is_food_egg(egg) # Confirm the item is an egg

        if is_fryingpan_ready(fryingpan):
            achieve close_char(char, fryingpan) 
            # Ensure you are close to the frying pan
            achieve is_on(fryingpan)
            # Ensure the frying pan is turned on to scramble the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to be scrambled
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan for scrambling

        scramble_egg_in_fryingpan(egg, fryingpan)


#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_fryingpan_ready(fryingpan: item):
    # Function to check if the frying pan is on the stove and clean, ready for use
    symbol is_on_stove=exists stove: item : is_stove(stove) and on(fryingpan, stove) 
    symbol is_clean_and_ready = clean(fryingpan)
    return is_on_stove and is_clean_and_ready

behavior scramble_egg_in_fryingpan(egg: item, fryingpan: item):
    body:
        achieve clean(egg) # Ensure the egg is clean before scrambling
        achieve is_food_egg(egg) # Confirm the item is an egg

        if is_fryingpan_ready(fryingpan):
            achieve close_char(char, fryingpan) 
            # Ensure you are close to the frying pan
            achieve is_on(fryingpan)
            # Ensure the frying pan is turned on to scramble the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to be scrambled
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan for scrambling

        scramble_egg_in_fryingpan(egg, fryingpan)


##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)wash_executor(food_egg_2092)
##############################
From agent.py
walk_executor(fridge_126)
Find food_onion_2048. Find food_food_2046. Find food_food_2073. Find food_steak_2080. Find food_apple_2081. Find food_bacon_2082. Find food_banana_2083. Find food_cake_2085. Find food_carrot_2086. Find food_cereal_2087. Find food_cheese_2088. Find food_chicken_2089. Find food_dessert_2090. Find food_donut_2091. Find food_egg_2092. Find food_fish_2093. Find food_food_2094. Find food_fruit_2095. Find food_hamburger_2096. Find food_ice_cream_2097. Find food_jam_2098. Find food_kiwi_2099. Find food_lemon_2100. Find food_noodles_2101. Find food_oatmeal_2102. Find food_orange_2103. Find food_onion_2104. Find food_peanut_butter_2105. Find food_pizza_2106. Find food_potato_2107. Find food_rice_2108. Find food_salt_2109. Find food_snack_2110. Find food_sugar_2111. Find food_turkey_2112. Find food_vegetable_2113. Find food_food_2001. Find sauce_2148. Find basket_for_clothes_2078. Find food_food_1000. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Find keyboard_211. Find mouse_213. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
open_executor(fridge_126)
Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
exp(food_egg_2092, fridge_126)
Find food_egg_2092. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Use the frying pan to scramble the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_fryingpan_2154_around_cupboard_118(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_egg(fryingpan:item, egg:item):
    body:
        achieve inside(egg, fryingpan)
        # Place the egg inside the frying pan

        achieve is_on(fryingpan)
        # Turn on the frying pan to scramble the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        scramble_egg(fryingpan, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_sauce_2148_around_cupboard_118(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(sauce,cupboard_instance)
        else:
            exp(sauce,cupboard_instance)
    eff:
        unknown[sauce]=False
        close[sauce,cupboard_instance]=True
        close[cupboard_instance,sauce]=True
    

#exp_behavior_end

#goal_representation
 
def find_fryingpan_and_egg():
    # Function to ensure both a frying pan and an egg are present
    symbol fryingpan_exist = exists fryingpan: item : is_fryingpan(fryingpan)
    symbol egg_exist = exists egg: item : is_food_egg(egg)
    return fryingpan_exist and egg_exist

behavior use_fryingpan_to_scramble_egg(fryingpan:item, egg:item):
    body:
        observe(fryingpan, "Ensure readiness to scramble the egg with fryingpan")
        # Verify the status of the frying pan
        achieve clean(fryingpan)
        # Ensure the frying pan is clean for use

behavior __goal__():
    body:
        if find_fryingpan_and_egg():
            # Ensure both a frying pan and an egg are present for use
            bind fryingpan: item where:
                is_fryingpan(fryingpan)
            bind egg: item where:
                is_food_egg(egg)
            use_fryingpan_to_scramble_egg(fryingpan, egg)
        else:
            foreach item: item:
                if not visited(item) and (is_fryingpan(item) or is_food_egg(item)):
                    # Verify the location and status of either item
                    observe(item, "Locate frying pan or egg for scrambling egg process")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def find_fryingpan_and_egg():
    # Function to ensure both a frying pan and an egg are present
    symbol fryingpan_exist = exists fryingpan: item : is_fryingpan(fryingpan)
    symbol egg_exist = exists egg: item : is_food_egg(egg)
    return fryingpan_exist and egg_exist

behavior use_fryingpan_to_scramble_egg(fryingpan:item, egg:item):
    body:
        observe(fryingpan, "Ensure readiness to scramble the egg with fryingpan")
        # Verify the status of the frying pan
        achieve clean(fryingpan)
        # Ensure the frying pan is clean for use

behavior __goal__():
    body:
        if find_fryingpan_and_egg():
            # Ensure both a frying pan and an egg are present for use
            bind fryingpan: item where:
                is_fryingpan(fryingpan)
            bind egg: item where:
                is_food_egg(egg)
            use_fryingpan_to_scramble_egg(fryingpan, egg)
        else:
            foreach item: item:
                if not visited(item) and (is_fryingpan(item) or is_food_egg(item)):
                    # Verify the location and status of either item
                    observe(item, "Locate frying pan or egg for scrambling egg process")

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(fryingpan_2154)obs(fryingpan_2154, Ensure readiness to scramble the egg with fryingpan)wash_executor(fryingpan_2154)
##############################
From agent.py
walk_executor(stove_2135)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close stove_2135. Robot is no longer close food_onion_2048.Robot is no longer close food_food_2046.Robot is no longer close food_food_2073.Robot is no longer close food_steak_2080.Robot is no longer close food_apple_2081.Robot is no longer close food_bacon_2082.Robot is no longer close food_banana_2083.Robot is no longer close food_cake_2085.Robot is no longer close food_carrot_2086.Robot is no longer close food_cereal_2087.Robot is no longer close food_cheese_2088.Robot is no longer close food_chicken_2089.Robot is no longer close food_dessert_2090.Robot is no longer close food_donut_2091.Robot is no longer close food_egg_2092.Robot is no longer close food_fish_2093.Robot is no longer close food_food_2094.Robot is no longer close food_fruit_2095.Robot is no longer close food_hamburger_2096.Robot is no longer close food_ice_cream_2097.Robot is no longer close food_jam_2098.Robot is no longer close food_kiwi_2099.Robot is no longer close food_lemon_2100.Robot is no longer close food_noodles_2101.Robot is no longer close food_oatmeal_2102.Robot is no longer close food_orange_2103.Robot is no longer close food_onion_2104.Robot is no longer close food_peanut_butter_2105.Robot is no longer close food_pizza_2106.Robot is no longer close food_potato_2107.Robot is no longer close food_rice_2108.Robot is no longer close food_salt_2109.Robot is no longer close food_snack_2110.Robot is no longer close food_sugar_2111.Robot is no longer close food_turkey_2112.Robot is no longer close food_vegetable_2113.Robot is no longer close food_food_2001.Robot is no longer close floor_44.Robot is no longer close sauce_2148.Robot is no longer close fridge_126.
##############################
From agent.py
open_executor(stove_2135)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close stove_2135. 
##############################
From agent.py
exp(fryingpan_2154, stove_2135)
Failed to find fryingpan_2154 around stove_2135. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(fryingpan_2154, cupboard_118)walk_executor(fryingpan_2154)obs(fryingpan_2154, Ensure readiness to scramble the egg with fryingpan)wash_executor(fryingpan_2154)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close kitchen_counter_119.Robot is no longer close stove_2135.
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_118)
Failed to find fryingpan_2154 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fryingpan_2154)obs(fryingpan_2154, Ensure readiness to scramble the egg with fryingpan)wash_executor(fryingpan_2154)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Find spectacles_2153. Find fryingpan_2154. Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)obs(fryingpan_2154, Ensure readiness to scramble the egg with fryingpan)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is close fryingpan_2154. 
##############################
From agent.py
obs(fryingpan_2154, Ensure readiness to scramble the egg with fryingpan)
Get this information:  fryingpan_2154 is on kitchen_counter_122. fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to character_240. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py
Human Instruction: You need to use the CLEAN frying pan to scramble the egg, which involves cracking the egg into the frying pan and cooking it, as the final goal of scrambling the egg hasn't been achieved yet.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_egg_2092 around fridge_126.
Action 5: Walk to stove_2135.
Action 6: Open stove_2135.
Action 7: look for fryingpan_2154 around stove_2135.
Action 8: Walk to cupboard_118.
Action 9: Open cupboard_118.
Action 10: look for fryingpan_2154 around cupboard_118.
Action 11: Walk to kitchen_counter_122.
Action 12: look for fryingpan_2154 around kitchen_counter_122.
Action 13: Walk to fryingpan_2154.
Action 14: Observe around fryingpan_2154 with the question of Ensure readiness to scramble the egg with fryingpan.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_ready(pan: item):
    # Determine whether the frying pan is clean and ready for use
    return clean(pan) and visited(pan)

behavior use_frying_pan_to_scramble_egg(pan: item, egg: item):
    body:
        achieve_clause: inhand(egg)
        # Temporarily hold the egg for cracking into the pan

        achieve clean(pan)
        # Assert that the frying pan is clean

        achieve close_char(char, pan)
        # Move close to the frying pan

        achieve open(pan)
        # Open the pan or ensure it is accessible

        achieve cut(egg)
        # Crack the egg into the pan

        achieve dirty(pan)
        # Acknowledge that after use, the pan is no longer clean

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        if not is_fryingpan_ready(pan):
            observe(pan, "Ensure readiness to scramble the egg with fryingpan")
            # Observe the frying pan to ensure it is ready for use

        bind egg: item where:
            is_food_egg(egg)

        use_frying_pan_to_scramble_egg(pan, egg)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5729, column 23.
Expected one of: 
	* LSHIFT
	* AMPERSAND
	* __ANON_6
	* __ANON_7
	* SLASH
	* __ANON_0
	* _NEWLINE
	* SEMICOLON
	* PERCENT
	* OR
	* __ANON_4
	* CIRCUMFLEX
	* MORETHAN
	* IF
	* __ANON_5
	* EQUAL
	* STAR
	* GREATER_EQ
	* __ANON_8
	* __ANON_2
	* NOT_EQ
	* LESS_EQ
	* AND
	* DOUBLE_EQUAL
	* MINUS
	* __ANON_3
	* LESSTHAN
	* __ANON_1
	* VBAR
	* FLOORDIV
	* COMMA
	* AT
	* RSHIFT
	* PLUS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#goal_representation
 
behavior use_frying_pan_to_scramble_egg(pan: item, egg: item):
    body:
        achieve_once inhand(egg)
        # Temporarily hold the egg for cracking into the pan

        achieve close_char(char, pan)
        # Move close to the frying pan

        achieve clean(pan)
        # Assert that the frying pan is clean

        achieve open(pan)
        # Open the pan or ensure it is accessible

        achieve cut(egg)
        # Crack the egg into the pan

        achieve dirty(pan)
        # Acknowledge that after use, the pan is no longer clean

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        if not is_fryingpan_ready(pan):
            observe(pan, "Ensure readiness to scramble the egg with fryingpan")
            # Observe the frying pan to ensure it is ready for use

        bind egg: item where:
            is_food_egg(egg)

        use_frying_pan_to_scramble_egg(pan, egg)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_fryingpan_ready not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#goal_representation
 
behavior use_frying_pan_to_scramble_egg(pan: item, egg: item):
    body:
        achieve_once inhand(egg)
        # Temporarily hold the egg for cracking into the pan

        achieve close_char(char, pan)
        # Move close to the frying pan

        achieve clean(pan)
        # Assert that the frying pan is clean

        achieve open(pan)
        # Open the pan or ensure it is accessible

        achieve cut(egg)
        # Crack the egg into the pan

        achieve dirty(pan)
        # Acknowledge that after use, the pan is no longer clean

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        if not is_fryingpan(pan):
            observe(pan, "Ensure readiness to scramble the egg with fryingpan")
            # Observe the frying pan to ensure it is ready for use

        bind egg: item where:
            is_food_egg(egg)

        use_frying_pan_to_scramble_egg(pan, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_brush_2002_around_bathroom_cabinet_17(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(brush,bathroom_cabinet_instance)
        else:
            exp(brush,bathroom_cabinet_instance)
    eff:
        unknown[brush]=False
        close[brush,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,brush]=True
    

behavior find_mat_102_around_cupboard_117(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(mat,cupboard_instance)
        else:
            exp(mat,cupboard_instance)
    eff:
        unknown[mat]=False
        close[mat,cupboard_instance]=True
        close[cupboard_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def is_egg_inside_fryingpan(fryingpan: item):
    # Determine whether the egg is inside the frying pan
    symbol egg_inside = exists egg: item : is_food_egg(egg) and inside(egg, fryingpan)
    return egg_inside

def is_clean_and_observed(fryingpan: item):
    # Determine if the frying pan is clean and has been observed
    return clean(fryingpan) and visited(fryingpan)

behavior observe_fryingpan(fryingpan:item):
    body:
        observe(fryingpan, "Ensure readiness to scramble the egg with fryingpan")
        # Observe the frying pan to check that it is clean and ready to scramble the egg

behavior crack_and_scramble_egg(fryingpan:item, egg:item):
    body:
        achieve inside(egg, fryingpan)
        # Crack the egg into the frying pan
        achieve is_on(stove)
        # Turn on the stove to cook the egg

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        if not is_clean_and_observed(fryingpan):
            observe_fryingpan(fryingpan)
            # Ensure the frying pan is clean and observed if not already done

        if is_egg_inside_fryingpan(fryingpan):
            crack_and_scramble_egg(fryingpan, egg)
        else:
            # If the egg is not inside the frying pan, crack and scramble it
            bind egg: item where:
                is_food_egg(egg)
            crack_and_scramble_egg(fryingpan, egg)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>, Variable<egg: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2149_around_sink_120(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(oil,sink_instance)
        else:
            exp(oil,sink_instance)
    eff:
        unknown[oil]=False
        close[oil,sink_instance]=True
        close[sink_instance,oil]=True
    

behavior find_pot_2040_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

#goal_representation
 
def is_egg_inside_fryingpan(fryingpan: item):
    # Determine whether the egg is inside the frying pan
    symbol egg_inside = exists egg: item : is_food_egg(egg) and inside(egg, fryingpan)
    return egg_inside

def is_clean_and_observed(fryingpan: item):
    # Determine if the frying pan is clean and has been observed
    return clean(fryingpan) and visited(fryingpan)

behavior observe_fryingpan(fryingpan:item):
    body:
        observe(fryingpan, "Ensure readiness to scramble the egg with fryingpan")
        # Observe the frying pan to check that it is clean and ready to scramble the egg

behavior crack_and_scramble_egg(fryingpan:item, egg:item, stove:item):
    body:
        achieve inside(egg, fryingpan)
        # Crack the egg into the frying pan
        achieve is_on(stove)
        # Turn on the stove to cook the egg

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        if not is_clean_and_observed(fryingpan):
            observe_fryingpan(fryingpan)
            # Ensure the frying pan is clean and observed if not already done

        if is_egg_inside_fryingpan(fryingpan):
            crack_and_scramble_egg(fryingpan, egg, stove)
        else:
            # If the egg is not inside the frying pan, crack and scramble it
            bind egg: item where:
                is_food_egg(egg)
            crack_and_scramble_egg(fryingpan, egg, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: egg; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_sink_120(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(oil,sink_instance)
        else:
            exp(oil,sink_instance)
    eff:
        unknown[oil]=False
        close[oil,sink_instance]=True
        close[sink_instance,oil]=True
    

behavior find_wooden_spoon_2000_around_cupboard_117(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(wooden_spoon,cupboard_instance)
        else:
            exp(wooden_spoon,cupboard_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cupboard_instance]=True
        close[cupboard_instance,wooden_spoon]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
def is_egg_inside_fryingpan(fryingpan: item):
    # Determine whether the egg is inside the frying pan
    symbol egg_inside = exists egg: item : is_food_egg(egg) and inside(egg, fryingpan)
    return egg_inside

def is_clean_and_observed(fryingpan: item):
    # Determine if the frying pan is clean and has been observed
    return clean(fryingpan) and visited(fryingpan)

behavior observe_fryingpan(fryingpan:item):
    body:
        observe(fryingpan, "Ensure readiness to scramble the egg with fryingpan")
        # Observe the frying pan to check that it is clean and ready to scramble the egg

behavior crack_and_scramble_egg(fryingpan:item, egg:item, stove:item):
    body:
        achieve inside(egg, fryingpan)
        # Crack the egg into the frying pan
        achieve is_on(stove)
        # Turn on the stove to cook the egg

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        if not is_clean_and_observed(fryingpan):
            observe_fryingpan(fryingpan)
            # Ensure the frying pan is clean and observed if not already done

        if exists egg: item : is_egg_inside_fryingpan(fryingpan):
            bind egg: item where:
                is_food_egg(egg) and inside(egg, fryingpan)
            crack_and_scramble_egg(fryingpan, egg, stove)
        else:
            # If the egg is not inside the frying pan, crack and scramble it
            bind egg: item where:
                is_food_egg(egg)
            crack_and_scramble_egg(fryingpan, egg, stove)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "use the frying pan to scramble the egg." ?
Answer: Put the pan on the stove. Turn on the stove. Put oil in the pan. Put the egg in the pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put the pan on the stove.', '2. Turn on the stove.', '3. Put oil in the pan.', '4. Put the egg in the pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2158_around_basket_for_clothes_2078(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_instrument_guitar_2028_around_bookshelf_124(instrument_guitar:item):
    goal: not unknown(instrument_guitar)
    body:
        assert is_instrument_guitar(instrument_guitar)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(instrument_guitar,bookshelf_instance)
        else:
            exp(instrument_guitar,bookshelf_instance)
    eff:
        unknown[instrument_guitar]=False
        close[instrument_guitar,bookshelf_instance]=True
        close[bookshelf_instance,instrument_guitar]=True
    

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_frying_pan_cleanliness(fryingpan:item):
    body:
        observe(fryingpan, "Ensure it is clean and suitable for scrambling eggs")

behavior place_pan_on_stove(fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)
        # Place the pan on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        observe_frying_pan_cleanliness(fryingpan)
        place_pan_on_stove(fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior observe_frying_pan_cleanliness(fryingpan:item):
    body:
        observe(fryingpan, "Ensure it is clean and suitable for scrambling eggs")

behavior place_pan_on_stove(fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)
        # Place the pan on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        observe_frying_pan_cleanliness(fryingpan)
        place_pan_on_stove(fryingpan, stove)

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2154, Ensure it is clean and suitable for scrambling eggs)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
obs(fryingpan_2154, Ensure it is clean and suitable for scrambling eggs)
Get this information:  fryingpan_2154 is on kitchen_counter_122. fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to character_240. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is close fryingpan_2154. Grabbing fryingpan_2154 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot is inside dining_room_41. Robot is close fryingpan_2154. Robot is close kitchen_counter_119. Robot is close stove_2135. Robot is no longer close kitchen_counter_122.
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot is inside dining_room_41. Robot is close fryingpan_2154. Robot is close kitchen_counter_119. Robot is close stove_2135. fryingpan_2154 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135
        
        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135
        
        achieve is_on(stove)
        # Turn on the stove

##############################
From agent.py-> find a plan in act()
close_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
close_executor(stove_2135)
Robot is inside dining_room_41. Robot is close fryingpan_2154. Robot is close kitchen_counter_119. Robot is close stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot is inside dining_room_41. Robot is close fryingpan_2154. Robot is close kitchen_counter_119. Robot is close stove_2135. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation

def is_clean_fryingpan_on_stove(fryingpan: item, stove: item):
    # Determine if the fryingpan is clean and placed on the stove
    symbol on_stove_and_clean = on(fryingpan, stove) and clean(fryingpan)
    return on_stove_and_clean

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove 

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and is_clean_fryingpan_on_stove(fryingpan, stove)
        # Select a clean fryingpan that is already on the stove

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        achieve inside(oil, fryingpan)
        # Add oil inside the fryingpan

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_clean_fryingpan_on_stove(fryingpan: item, stove: item):
    # Determine if the fryingpan is clean and placed on the stove
    symbol on_stove_and_clean = on(fryingpan, stove) and clean(fryingpan)
    return on_stove_and_clean

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove 

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and is_clean_fryingpan_on_stove(fryingpan, stove)
        # Select a clean fryingpan that is already on the stove

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        achieve inside(oil, fryingpan)
        # Add oil inside the fryingpan

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(oil_2149, cupboard_117)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close fryingpan_2154.Robot is no longer close kitchen_counter_119.Robot is no longer close stove_2135.
##############################
From agent.py
exp(oil_2149, cupboard_117)
Failed to find oil_2149 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)open_executor(pot_2138)exp(oil_2149, pot_2138)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
open_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. 
##############################
From agent.py
exp(oil_2149, pot_2138)
Failed to find oil_2149 around pot_2138. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(oil_2149, kitchen_counter_123)walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Find oil_2149. Find knife_2035. Find food_kiwi_2054. Find food_orange_2027. Find tray_2068. Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close floor_45. Robot is no longer close pot_2138.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
exp(oil_2149, kitchen_counter_123)
Find oil_2149. 
##############################
From agent.py-> find a plan in act()
walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(oil_2149)
Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close oil_2149. Robot is no longer close floor_45.
##############################
From agent.py
grab_executor(oil_2149)
Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close oil_2149. Grabbing oil_2149 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close oil_2149. Robot is close fryingpan_2154. Robot is close stove_2135. Robot is no longer close kitchen_counter_123.
##############################
From agent.py
putin_executor(oil_2149, fryingpan_2154)
Robot is inside dining_room_41. Robot is close oil_2149. Robot is close fryingpan_2154. Robot is close stove_2135. oil_2149 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_clothes_shirt_2158_around_basket_for_clothes_2078(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_egg_into_pan(egg:item, pan:item):
    body:
        achieve inside(egg, pan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item
        
        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2135)
        # Select the frying pan on the stove with ID 2135

        crack_egg_into_pan(egg, pan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_hanger_293_around_ironing_board_2144(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(hanger,ironing_board_instance)
        else:
            exp(hanger,ironing_board_instance)
    eff:
        unknown[hanger]=False
        close[hanger,ironing_board_instance]=True
        close[ironing_board_instance,hanger]=True
    

#goal_representation
behavior crack_egg_into_pan(egg:item, pan:item):
    body:
        achieve inside(egg, pan)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item
        
        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select the frying pan on the stove with ID 2135

        crack_egg_into_pan(egg, pan)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior crack_egg_into_pan(egg:item, pan:item):
    body:
        achieve inside(egg, pan)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item
        
        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select the frying pan on the stove with ID 2135

        crack_egg_into_pan(egg, pan)
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close fridge_126. Robot is no longer close fryingpan_2154.Robot is no longer close oil_2149.Robot is no longer close stove_2135.
##############################
From agent.py
grab_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close fryingpan_2154. Robot is close stove_2135. Robot is no longer close fridge_126.
##############################
From agent.py
putin_executor(food_egg_2092, fryingpan_2154)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close fryingpan_2154. Robot is close stove_2135. food_egg_2092 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_breakfast/g2.txt
Checking k1
missed actions: 
missed action num: 0
##############################
