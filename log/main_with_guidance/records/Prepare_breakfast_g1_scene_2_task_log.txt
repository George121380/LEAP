From agent.py
Reset goals: The sub-goals are: 
['1. Slice the bread.  ', '2. Toast the sliced bread.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_table_193(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

behavior find_food_fruit_2056_around_kitchen_counter_132(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cutting_board_2080_around_kitchen_counter_132(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
def is_cuttable_bread_on_table(bread: item, table: item):
    # Determine if the bread is cuttable and placed on the table
    symbol on_table_and_cuttable = on(bread, table) and cuttable(bread)
    return on_table_and_cuttable

behavior slice_bread(bread:item, knife:item):
    body:
        achieve cut(bread)
        # Slice the bread using the knife

behavior __goal__():
    body:
        bind table: item where:
            is_table(table)
        # Select a table

        bind bread: item where:
            is_food_bread(bread) and is_cuttable_bread_on_table(bread, table)
        # Select cuttable bread on the table

        bind knife: item where:
            is_knife(knife)
        # Select the knife

        slice_bread(bread, knife)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_bread_2016_around_table_193(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

behavior find_cutting_board_2080_around_kitchen_counter_132(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation

def has_fryingpan_on(counter:item):
    symbol has_pan = exists p: item : is_fryingpan(p) and on(p, counter)
    return has_pan

behavior place_bread_on_cutting_board(bread:item, cutting_board:item):
    body:
        achieve on(bread, cutting_board)

behavior slice_bread(bread:item):
    body:
        achieve cut(bread)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        if not has_fryingpan_on(kitchen_counter):
            foreach board: item:
                if is_cutting_board(board) and not visited(board):
                    observe(board, "Check if there is a cutting board on the kitchen counter")
                    bind cutting_board: item where:
                        is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
                    # Select the cutting board on the kitchen counter
                    break

        else:
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and on(fryingpan, kitchen_counter)
            # Select the pan on the kitchen counter

        bind bread: item where:
            is_food_bread(bread)
        # Select the bread item

        place_bread_on_cutting_board(bread, cutting_board)
        slice_bread(bread)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<board: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bread_2016_around_table_193(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cutting_board_2080_around_kitchen_counter_132(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#goal_representation
 
def has_fryingpan_on(counter:item):
    symbol has_pan = exists p: item : is_fryingpan(p) and on(p, counter)
    return has_pan

behavior place_bread_on_cutting_board(bread:item, cutting_board:item):
    body:
        achieve on(bread, cutting_board)

behavior slice_bread(bread:item):
    body:
        achieve cut(bread)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        if not has_fryingpan_on(kitchen_counter):
            foreach board: item:
                if is_cutting_board(board) and not visited(board):
                    observe(board, "Check if there is a cutting board on the kitchen counter")
                    bind cutting_board: item where:
                        is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
                    # Select the cutting board on the kitchen counter
                    break

        else:
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and on(fryingpan, kitchen_counter)
            # Select the pan on the kitchen counter

        bind bread: item where:
            is_food_bread(bread)
        # Select the bread item

        place_bread_on_cutting_board(bread, cutting_board)
        slice_bread(bread)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<board: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bread_2016_around_table_193(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cutting_board_2080_around_kitchen_counter_132(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#goal_representation
 
def has_fryingpan_on(counter:item):
    symbol has_pan = exists p: item : is_fryingpan(p) and on(p, counter)
    return has_pan

behavior place_bread_on_cutting_board(bread:item, cutting_board:item):
    body:
        achieve on(bread, cutting_board)

behavior slice_bread(bread:item):
    body:
        achieve cut(bread)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        if not has_fryingpan_on(kitchen_counter):
            foreach board: item:
                if is_cutting_board(board) and not visited(board):
                    observe(board, "Check if there is a cutting board on the kitchen counter")
                    bind cutting_board: item where:
                        is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
                    # Select the cutting board on the kitchen counter
                    bind bread: item where:
                        is_food_bread(bread)
                    # Select the bread item
                    place_bread_on_cutting_board(bread, cutting_board)
                    slice_bread(bread)
                    break

        else:
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and on(fryingpan, kitchen_counter)
            # Select the pan on the kitchen counter
            bind bread: item where:
                is_food_bread(bread)
            # Select the bread item

            bind cutting_board: item where:
                is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
            # Select the cutting board on the kitchen counter
            place_bread_on_cutting_board(bread, cutting_board)
            slice_bread(bread)

This modification ensures that the cutting_board variable is consistently declared before its use when calling the place_bread_on_cutting_board behavior, resolving the undefined variable error related to the break statement previously mentioned, and ensuring that all logic flows correctly
#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. slice the bread.  " ?
Answer: Cut the bread.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def has_knifeblock(kitchen_counter:item):
    symbol has_knife=exists knife:item : is_knifeblock(knife) and on(knife, kitchen_counter)
    return has_knife

behavior retrieve_knife(knife:item):
    body:
        achieve_once inhand(knife)

behavior slice_bread(bread:item, knife:item):
    body:
        achieve cut(bread)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread
        
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter
        
        if has_knifeblock(kitchen_counter):
            bind knife: item where:
                is_knifeblock(knife) and on(knife, kitchen_counter)
            # Select a knife on the kitchen counter

            retrieve_knife(knife)
            slice_bread(bread, knife)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_bread(bread: item, knife: item):
    body:
        achieve_once inhand(knife)
        # Hold the knife to slice the bread
        achieve cut(bread)
        # Ensure the bread is sliced

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        bind knife: item where:
            is_knife(knife)
        # Select the knife

        slice_bread(bread, knife)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the bread.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2016_around_table_193(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_bread(bread:item, knife:item):
    body:
        achieve cut(bread)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread) and cuttable(bread)
        # Select the bread that is cuttable

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        cut_bread(bread, knife)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
behavior cut_bread(bread:item):
    body:
        achieve cut(bread)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        cut_bread(bread)
#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the bread.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2016_around_table_193(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation

behavior observe_bread(bread:item):
    body:
        observe(bread, "Check if the bread is cuttable")

behavior cut_bread(bread:item):
    body:
        achieve cut(bread)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread) and cuttable(bread)
        # Select bread that is cuttable

        observe_bread(bread)
        cut_bread(bread)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2016_around_table_193(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_cutting_board_2080_around_kitchen_counter_132(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_fry_pan_cleanliness_before_use(fryingpan:item):
    body:
        observe(fryingpan, "Check cleanliness before use for cutting bread")

behavior prepare_cutting_environment(fryingpan:item, cutting_board:item):
    body:
        achieve on(fryingpan, cutting_board)
        # Place the frying pan on the cutting board as a cutting environment setup

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board

        observe_fry_pan_cleanliness_before_use(fryingpan)
        prepare_cutting_environment(fryingpan, cutting_board)

        bind knife: item where:
            is_knife(knife)
        # Select the knife

        bind bread: item where:
            is_food_bread(bread) and cuttable(bread)
        # Select the cuttable bread

        achieve_once inhand(knife)
        # Temporarily hold the knife
        achieve cut(bread)
        # Cut the bread

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior observe_fry_pan_cleanliness_before_use(fryingpan:item):
    body:
        observe(fryingpan, "Check cleanliness before use for cutting bread")

behavior prepare_cutting_environment(fryingpan:item, cutting_board:item):
    body:
        achieve on(fryingpan, cutting_board)
        # Place the frying pan on the cutting board as a cutting environment setup

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board

        observe_fry_pan_cleanliness_before_use(fryingpan)
        prepare_cutting_environment(fryingpan, cutting_board)

        bind knife: item where:
            is_knife(knife)
        # Select the knife

        bind bread: item where:
            is_food_bread(bread) and cuttable(bread)
        # Select the cuttable bread

        achieve_once inhand(knife)
        # Temporarily hold the knife
        achieve cut(bread)
        # Cut the bread

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(fryingpan_2107, kitchen_counter_132)walk_executor(fryingpan_2107)obs(fryingpan_2107, Check cleanliness before use for cutting bread)walk_executor(kitchen_counter_132)exp(cutting_board_2080, kitchen_counter_132)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(cutting_board_2080)put_executor(fryingpan_2107, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(table_193)exp(food_bread_2016, table_193)walk_executor(food_bread_2016)grab_executor(food_bread_2016)walk_executor(cutting_board_2080)put_executor(food_bread_2016, cutting_board_2080)walk_executor(food_bread_2016)cut_executor(food_bread_2016)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Find pot_54. Find tray_142. Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(fryingpan_2107, kitchen_counter_132)
Failed to find fryingpan_2107 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(fryingpan_2107, cupboard_131)walk_executor(fryingpan_2107)obs(fryingpan_2107, Check cleanliness before use for cutting bread)walk_executor(cupboard_131)exp(cutting_board_2080, cupboard_131)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(cutting_board_2080)put_executor(fryingpan_2107, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(cupboard_131)exp(food_bread_2016, cupboard_131)walk_executor(food_bread_2016)grab_executor(food_bread_2016)walk_executor(cutting_board_2080)put_executor(food_bread_2016, cutting_board_2080)walk_executor(food_bread_2016)cut_executor(food_bread_2016)
##############################
From agent.py
walk_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. Robot is no longer close kitchen_counter_132.
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. 
##############################
From agent.py
exp(fryingpan_2107, cupboard_131)
Failed to find fryingpan_2107 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(fryingpan_2107, cupboard_130)walk_executor(fryingpan_2107)obs(fryingpan_2107, Check cleanliness before use for cutting bread)walk_executor(kitchen_counter_128)exp(cutting_board_2080, kitchen_counter_128)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(cutting_board_2080)put_executor(fryingpan_2107, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(table_193)exp(food_bread_2016, table_193)walk_executor(food_bread_2016)grab_executor(food_bread_2016)walk_executor(cutting_board_2080)put_executor(food_bread_2016, cutting_board_2080)walk_executor(food_bread_2016)cut_executor(food_bread_2016)
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer close cupboard_131.
##############################
From agent.py
exp(fryingpan_2107, cupboard_130)
Failed to find fryingpan_2107 around cupboard_130. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_breakfast/g1.txt
Checking k1
Evaluator failed to find a plan
##############################
