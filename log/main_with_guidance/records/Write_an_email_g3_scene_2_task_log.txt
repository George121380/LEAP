From agent.py
Reset goals: The sub-goals are: 
['1. Find and sit on the chair in front of the computer in the home office.', '2. Touch the mouse near the computer to turn it on.', '3. Type on the keyboard to send an email.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_kitchen_counter_132(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_room(room: item):
    # Check if the specified room is the home office
    symbol is_home_office = is_home_office(room)
    return is_home_office

behavior find_and_sit_on_chair(chair: item):
    body:
        achieve close_char(char, chair)
        # Move close to the chair to ensure effective placement
        achieve facing_char(char, chair)
        # Face the chair for clear visibility    
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        if exists chair: item : is_chair(chair) and inside(chair, home_office):
            # If there is a chair in the home office, proceed to sit on it
            bind chair: item where:
                is_chair(chair) and inside(chair, home_office)
            find_and_sit_on_chair(chair)

        else:
            # If no chair is found, inspect all furniture to locate a chair
            foreach furniture: item:
                if is_chair(furniture) and not visited(furniture):
                    observe(furniture, "Checking if this is the chair in front of the computer in the home office")
                    if inside(furniture, home_office):
                        find_and_sit_on_chair(furniture)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_sittable_chair(chair: item):
    # Function to determine if a chair is sittable
    symbol sittable_chair = sittable(chair)
    return sittable_chair

behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        foreach chair: item:
            if is_chair(chair) and inside(chair, home_office) and is_sittable_chair(chair):
                sit_on_chair(chair)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find and sit on the chair in front of the computer in the home office." ?
Answer: Get close to the computer in the home office. Then sit on the chair in front of the computer.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laptop_2015_around_computer_2111(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2111
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(laptop,computer_instance)
        else:
            exp(laptop,computer_instance)
    eff:
        unknown[laptop]=False
        close[laptop,computer_instance]=True
        close[computer_instance,laptop]=True
    

behavior find_chair_374_around_coffe_maker_147(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(chair,coffe_maker_instance)
        else:
            exp(chair,coffe_maker_instance)
    eff:
        unknown[chair]=False
        close[chair,coffe_maker_instance]=True
        close[coffe_maker_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_chair_in_front_of_computer(chair:item, computer:item):
    body:
        if visited(chair):
            achieve close_char(char, chair)
        else:
            foreach item: item:
                if is_chair(item) and close(item, computer) and not visited(item):
                    observe(item, "Locate the chair in front of the computer")

behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        find_chair_in_front_of_computer(chair, computer)

        sit_on_chair(chair)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_138_around_computer_2111(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2111
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(chair,computer_instance)
        else:
            exp(chair,computer_instance)
    eff:
        unknown[chair]=False
        close[chair,computer_instance]=True
        close[computer_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior observe_chair_in_office(chair:item):
    body:
        observe(chair, "Check if it is the chair in front of the computer in the home office")
        # Observe the chair to ensure it is the correct one in the home office

behavior sit_on_chair(chair:item):
    body:
        achieve close_char(char, chair)
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        if exists chair: item : is_chair(chair) and not visited(chair):
            # If the chair is not yet visited, observe to confirm its location
            bind chair: item where:
                is_chair(chair)
            observe_chair_in_office(chair)

        bind chair: item where:
            is_chair(chair) and visited(chair)
        # Select the chair that has been confirmed and visited

        sit_on_chair(chair)
        # Proceed to sit on the chair once its confirmed and visited
#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(computer_2111)exp(chair_138, computer_2111)walk_executor(chair_138)obs(chair_138, Check if it is the chair in front of the computer in the home office)walk_executor(bench_122)sit_executor(bench_122)
##############################
From agent.py
walk_executor(computer_2111)
Find drawing_196. Find mouse_2112. Find pillow_195. Find mat_201. Find laser_pointer_2025. Find dvd_player_2000. Find oil_2005. Find keyboard_2110. Robot is inside home_office_161. Robot is close table_193. Robot is close computer_2111. 
##############################
From agent.py
exp(chair_138, computer_2111)
Failed to find chair_138 around computer_2111. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_261)exp(chair_138, desk_261)walk_executor(chair_138)obs(chair_138, Check if it is the chair in front of the computer in the home office)walk_executor(bench_122)sit_executor(bench_122)
##############################
From agent.py
walk_executor(desk_261)
Find drawing_238. Find mat_237. Find chair_263. Robot is inside bedroom_220. Robot is close desk_261. Robot is close floor_223. Robot is no longer inside home_office_161.Robot is no longer close table_193.Robot is no longer close computer_2111.
##############################
From agent.py
exp(chair_138, desk_261)
Failed to find chair_138 around desk_261. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_263)exp(chair_138, chair_263)walk_executor(chair_138)obs(chair_138, Check if it is the chair in front of the computer in the home office)walk_executor(bench_122)sit_executor(bench_122)
##############################
From agent.py
walk_executor(chair_263)
Robot is inside bedroom_220. Robot is close chair_263. Robot is no longer close desk_261.Robot is no longer close floor_223.
##############################
From agent.py
exp(chair_138, chair_263)
Failed to find chair_138 around chair_263. 
##############################
From agent.py-> find a plan in act()
obs(chair_263, Check if it is the chair in front of the computer in the home office)walk_executor(bench_122)sit_executor(bench_122)
##############################
From agent.py
obs(chair_263, Check if it is the chair in front of the computer in the home office)
Get this information:  chair_263 is inside bedroom_220. chair_263 is close to floor_224. chair_263 is close to bookshelf_260. chair_263 is close to desk_261. chair_263 is close to wall_231. chair_263 is close to wall_232. chair_263 is close to wall_233. chair_263 is close to mat_237. chair_263 is close to photoframe_246. chair_263 is close to floor_221. chair_263 is close to floor_222. chair_263 is close to floor_223. chair_263 is close to character_219. chair_263 is CLEAN.
##############################
From agent.py
walk_executor(bench_122)
Find mat_114. Robot is inside dining_room_1. Robot is close bench_122. Robot is no longer inside bedroom_220.Robot is no longer close chair_263.
##############################
From agent.py
sit_executor(bench_122)
Robot is inside dining_room_1. Robot is close bench_122. Robot is on bench_122. 
##############################
From agent.py
Human Instruction: You need to find and sit on the chair in front of the computer in the home office. You have not identified or sat on the correct chair near the computer. Continue searching for chair_138 in the home office and sit on it once located.

Human Guidance: Get close to the computer in the home office. Then sit on the chair in front of the computer.
The actions you have taken:
Action 1: Walk to computer_2111.
Action 2: look for chair_138 around computer_2111.
Action 3: Walk to desk_261.
Action 4: look for chair_138 around desk_261.
Action 5: Walk to chair_263.
Action 6: look for chair_138 around chair_263.
Action 7: Observe around chair_263 with the question of Check if it is the chair in front of the computer in the home office.
Action 8: Walk to bench_122.
Action 9: Sit on bench_122.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_263_around_oven_141(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(chair,oven_instance)
        else:
            exp(chair,oven_instance)
    eff:
        unknown[chair]=False
        close[chair,oven_instance]=True
        close[oven_instance,chair]=True
    

#exp_behavior_end

#goal_representation

 
def find_specific_chair(home_office: item):
    # Function to find the specific chair_138 in the home office
    symbol found_chair = exists chair: item : is_chair(chair) and id[chair] == 138 and inside(chair, home_office)
    return found_chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        if find_specific_chair(home_office):
            bind chair_138: item where:
                is_chair(chair_138) and id[chair_138] == 138 and inside(chair_138, home_office)
            # Select the chair with ID 138 inside the home office
            achieve on_char(char, chair_138)
            # Sit on the chair_138
        else:
            # If the specific chair is not found, check all unvisited chairs in the home office
            foreach chair: item:
                if is_chair(chair) and inside(chair, home_office) and not visited(chair):
                    observe(chair, "Check if this is chair_138 near the computer")
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_138_around_computer_379(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(chair,computer_instance)
        else:
            exp(chair,computer_instance)
    eff:
        unknown[chair]=False
        close[chair,computer_instance]=True
        close[computer_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior find_chair(chair:item):
    body:
        if visited(chair):
            # If the chair has already been visited, ensure the character is close to it
            achieve close_char(char, chair)
        else:
            # Observe all unvisited chairs to locate chair_138 in front of computer_2111
            foreach item: item:
                if is_chair(item) and not visited(item):
                    observe(item, "Locate chair_138 in front of the computer_2111")

behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair)
        find_chair(chair)
        sit_on_chair(chair)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior find_chair(chair:item):
    body:
        if visited(chair):
            # If the chair has already been visited, ensure the character is close to it
            achieve close_char(char, chair)
        else:
            # Observe all unvisited chairs to locate chair_138 in front of computer_2111
            foreach item: item:
                if is_chair(item) and not visited(item):
                    observe(item, "Locate chair_138 in front of the computer_2111")

behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair)
        find_chair(chair)
        sit_on_chair(chair)
##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(computer_379)exp(chair_138, computer_379)standup_executor(char)walk_executor(chair_138)obs(chair_138, Locate chair_138 in front of the computer_2111)standup_executor(char)walk_executor(chair_263)obs(chair_263, Locate chair_138 in front of the computer_2111)standup_executor(char)walk_executor(computer_379)exp(chair_374, computer_379)standup_executor(char)walk_executor(chair_374)obs(chair_374, Locate chair_138 in front of the computer_2111)standup_executor(char)walk_executor(chair_138)sit_executor(chair_138)
##############################
From agent.py
standup_executor(char)
Robot is inside dining_room_1. Robot is close bench_122. Robot is on bench_122. 
##############################
From agent.py
walk_executor(computer_379)
Find keyboard_382. Find chair_374. Find mouse_380. Robot is inside bedroom_327. Robot is close computer_379. Robot is on bench_122. Robot is no longer inside dining_room_1.Robot is no longer close bench_122.
##############################
From agent.py
exp(chair_138, computer_379)
Failed to find chair_138 around computer_379. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_374)exp(chair_138, chair_374)walk_executor(chair_138)obs(chair_138, Locate chair_138 in front of the computer_2111)walk_executor(chair_263)obs(chair_263, Locate chair_138 in front of the computer_2111)walk_executor(chair_374)obs(chair_374, Locate chair_138 in front of the computer_2111)walk_executor(chair_138)sit_executor(chair_138)
##############################
From agent.py
walk_executor(chair_374)
Find drawing_387. Robot is inside bedroom_327. Robot is close chair_374. Robot is on bench_122. Robot is no longer close computer_379.
##############################
From agent.py
exp(chair_138, chair_374)
Failed to find chair_138 around chair_374. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)exp(chair_138, faucet_134)walk_executor(chair_138)obs(chair_138, Locate chair_138 in front of the computer_2111)walk_executor(chair_263)obs(chair_263, Locate chair_138 in front of the computer_2111)walk_executor(chair_374)obs(chair_374, Locate chair_138 in front of the computer_2111)walk_executor(chair_138)sit_executor(chair_138)
##############################
From agent.py
walk_executor(faucet_134)
Find pot_54. Find tray_142. Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is on bench_122. Robot is no longer inside bedroom_327.Robot is no longer close chair_374.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find chair_138 ?
Answer: To find chair_138, go to dining_room_1. In this room, look for an area where wall_7, floor_22, and freezer_140 are located near each other. Chair_138 will be positioned close to these objects.
Re-decompose: None

##############################
From agent.py
Human Instruction: You need to find and sit on the chair in front of the computer in the home office. You have not identified or sat on the correct chair near the computer. Continue searching for chair_138 in the home office and sit on it once located.
To find chair_138, go to dining_room_1. In this room, look for an area where wall_7, floor_22, and freezer_140 are located near each other. Chair_138 will be positioned close to these objects.

Human Guidance: Get close to the computer in the home office. Then sit on the chair in front of the computer.
The actions you have taken:
Action 1: Walk to computer_2111.
Action 2: look for chair_138 around computer_2111.
Action 3: Walk to desk_261.
Action 4: look for chair_138 around desk_261.
Action 5: Walk to chair_263.
Action 6: look for chair_138 around chair_263.
Action 7: Observe around chair_263 with the question of Check if it is the chair in front of the computer in the home office.
Action 8: Walk to bench_122.
Action 9: Sit on bench_122.
Action 10: char stand up.
Action 11: Walk to computer_379.
Action 12: look for chair_138 around computer_379.
Action 13: Walk to chair_374.
Action 14: look for chair_138 around chair_374.
Action 15: Walk to faucet_134.

##############################
From agent.py
exp(chair_138, faucet_134)
Failed to find chair_138 around faucet_134. 
##############################
From agent.py-> find a plan in act()
walk_executor(walllamp_290)exp(chair_138, walllamp_290)walk_executor(chair_138)obs(chair_138, Locate chair_138 in front of the computer_2111)walk_executor(chair_263)obs(chair_263, Locate chair_138 in front of the computer_2111)walk_executor(chair_374)obs(chair_374, Locate chair_138 in front of the computer_2111)walk_executor(chair_138)sit_executor(chair_138)
##############################
From agent.py
walk_executor(walllamp_290)
Find towel_rack_298. Robot is inside bathroom_265. Robot is close walllamp_290. Robot is on bench_122. Robot is no longer inside dining_room_1.Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
exp(chair_138, walllamp_290)
Failed to find chair_138 around walllamp_290. 
##############################
From agent.py-> find a plan in act()
walk_executor(freezer_140)switchoff_executor(freezer_140)open_executor(freezer_140)exp(chair_138, freezer_140)walk_executor(chair_138)obs(chair_138, Locate chair_138 in front of the computer_2111)walk_executor(chair_263)obs(chair_263, Locate chair_138 in front of the computer_2111)walk_executor(chair_374)obs(chair_374, Locate chair_138 in front of the computer_2111)walk_executor(chair_138)sit_executor(chair_138)
##############################
From agent.py
walk_executor(freezer_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is on bench_122. Robot is no longer inside bathroom_265.Robot is no longer close walllamp_290.
##############################
From agent.py
switchoff_executor(freezer_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is on bench_122. 
##############################
From agent.py
open_executor(freezer_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is on bench_122. 
##############################
From agent.py
exp(chair_138, freezer_140)
Find chair_138. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_138)obs(chair_138, Locate chair_138 in front of the computer_2111)walk_executor(chair_263)obs(chair_263, Locate chair_138 in front of the computer_2111)walk_executor(chair_374)obs(chair_374, Locate chair_138 in front of the computer_2111)walk_executor(chair_138)sit_executor(chair_138)
##############################
From agent.py
walk_executor(chair_138)
Robot is inside dining_room_1. Robot is close chair_138. Robot is on bench_122. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close freezer_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
obs(chair_138, Locate chair_138 in front of the computer_2111)
Get this information:  chair_138 is inside dining_room_1. chair_138 is close to freezer_140. chair_138 is close to floor_22. chair_138 is close to wall_7. chair_138 is close to character_219. chair_138 is CLEAN.
##############################
From agent.py
walk_executor(chair_263)
Robot is inside bedroom_220. Robot is close chair_263. Robot is on bench_122. Robot is no longer inside dining_room_1.Robot is no longer close chair_138.
##############################
From agent.py
obs(chair_263, Locate chair_138 in front of the computer_2111)
Get this information:  chair_263 is inside bedroom_220. chair_263 is close to floor_224. chair_263 is close to bookshelf_260. chair_263 is close to desk_261. chair_263 is close to wall_231. chair_263 is close to wall_232. chair_263 is close to wall_233. chair_263 is close to mat_237. chair_263 is close to photoframe_246. chair_263 is close to floor_221. chair_263 is close to floor_222. chair_263 is close to floor_223. chair_263 is close to character_219. chair_263 is CLEAN.
##############################
From agent.py
walk_executor(chair_374)
Robot is inside bedroom_327. Robot is close chair_374. Robot is on bench_122. Robot is no longer inside bedroom_220.Robot is no longer close chair_263.
##############################
From agent.py
obs(chair_374, Locate chair_138 in front of the computer_2111)
Get this information:  chair_374 is facing drawing_387. chair_374 is close to ceiling_355. chair_374 is close to floor_332. chair_374 is close to floor_333. chair_374 is close to floor_336. chair_374 is close to floor_337. chair_374 is close to desk_375. chair_374 is close to wall_345. chair_374 is close to computer_379. chair_374 is close to mouse_380. chair_374 is close to mousepad_381. chair_374 is close to keyboard_382. chair_374 is close to cpuscreen_383. chair_374 is close to character_219. chair_374 is inside bedroom_327. chair_374 is CLEAN.
##############################
From agent.py
walk_executor(chair_138)
Robot is inside dining_room_1. Robot is close chair_138. Robot is on bench_122. Robot is no longer inside bedroom_327.Robot is no longer close chair_374.
##############################
From agent.py
sit_executor(chair_138)
Robot is inside dining_room_1. Robot is close chair_138. Robot is on bench_122. Robot is on chair_138. 
##############################
From agent.py
Human Instruction: You have not sat on the chair located in front of the computer in the home office. Ensure you locate the specific chair mentioned in the task and sit on it before moving to the next steps.

Human Guidance: Get close to the computer in the home office. Then sit on the chair in front of the computer.
The actions you have taken:
Action 1: Walk to computer_2111.
Action 2: look for chair_138 around computer_2111.
Action 3: Walk to desk_261.
Action 4: look for chair_138 around desk_261.
Action 5: Walk to chair_263.
Action 6: look for chair_138 around chair_263.
Action 7: Observe around chair_263 with the question of Check if it is the chair in front of the computer in the home office.
Action 8: Walk to bench_122.
Action 9: Sit on bench_122.
Action 10: char stand up.
Action 11: Walk to computer_379.
Action 12: look for chair_138 around computer_379.
Action 13: Walk to chair_374.
Action 14: look for chair_138 around chair_374.
Action 15: Walk to faucet_134.
Action 16: look for chair_138 around faucet_134.
Action 17: Walk to walllamp_290.
Action 18: look for chair_138 around walllamp_290.
Action 19: Walk to freezer_140.
Action 20: Switch off freezer_140.
Action 21: Open freezer_140.
Action 22: look for chair_138 around freezer_140.
Action 23: Walk to chair_138.
Action 24: Observe around chair_138 with the question of Locate chair_138 in front of the computer_2111.
Action 25: Walk to chair_263.
Action 26: Observe around chair_263 with the question of Locate chair_138 in front of the computer_2111.
Action 27: Walk to chair_374.
Action 28: Observe around chair_374 with the question of Locate chair_138 in front of the computer_2111.
Action 29: Walk to chair_138.
Action 30: Sit on chair_138.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_sit_on_chair(chair:item):
    body:
        if visited(chair):
            # If the chair has already been found, ensure the character is close to it
            achieve close_char(char, chair)
            achieve facing_char(char, chair)
            sit_somewhere(chair)
            # Sit on the chair

        else:
            # If the chair is not found, observe all unvisited items that could be the chair to locate it
            foreach item: item:
                if is_chair(item) and not visited(item):
                    observe(item, "Locate and sit on the chair in front of the computer in the home office")

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair] == 138
        find_and_sit_on_chair(chair)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_and_sit_on_chair(chair:item):
    body:
        if visited(chair):
            # If the chair has already been found, ensure the character is close to it
            achieve close_char(char, chair)
            achieve facing_char(char, chair)
            sit_somewhere(chair)
            # Sit on the chair

        else:
            # If the chair is not found, observe all unvisited items that could be the chair to locate it
            foreach item: item:
                if is_chair(item) and not visited(item):
                    observe(item, "Locate and sit on the chair in front of the computer in the home office")

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair] == 138
        find_and_sit_on_chair(chair)

##############################
From agent.py-> find a plan in act()
obs(chair_138, Locate and sit on the chair in front of the computer in the home office)standup_executor(char)walk_executor(chair_263)obs(chair_263, Locate and sit on the chair in front of the computer in the home office)standup_executor(char)walk_executor(chair_374)obs(chair_374, Locate and sit on the chair in front of the computer in the home office)
##############################
From agent.py
obs(chair_138, Locate and sit on the chair in front of the computer in the home office)
Get this information:  chair_138 is inside dining_room_1. chair_138 is close to freezer_140. chair_138 is close to floor_22. chair_138 is close to wall_7. chair_138 is close to character_219. character_219 is on chair_138. chair_138 is CLEAN.
##############################
From agent.py
standup_executor(char)
Robot is inside dining_room_1. Robot is close chair_138. Robot is on bench_122. Robot is on chair_138. 
##############################
From agent.py
walk_executor(chair_263)
Robot is inside bedroom_220. Robot is close chair_263. Robot is on bench_122. Robot is on chair_138. Robot is no longer inside dining_room_1.Robot is no longer close chair_138.
##############################
From agent.py
obs(chair_263, Locate and sit on the chair in front of the computer in the home office)
Get this information:  chair_263 is inside bedroom_220. chair_263 is close to floor_224. chair_263 is close to bookshelf_260. chair_263 is close to desk_261. chair_263 is close to wall_231. chair_263 is close to wall_232. chair_263 is close to wall_233. chair_263 is close to mat_237. chair_263 is close to photoframe_246. chair_263 is close to floor_221. chair_263 is close to floor_222. chair_263 is close to floor_223. chair_263 is close to character_219. chair_263 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

behavior find_phone_47_around_light_49(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==49
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(phone,light_instance)
        else:
            exp(phone,light_instance)
    eff:
        unknown[phone]=False
        close[phone,light_instance]=True
        close[light_instance,phone]=True
    

behavior find_mouse_2003_around_mouse_380(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==380
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
def has_computer_in_front(chair: item):
    # Function to determine if chair is in front of computer
    symbol in_front_of_computer = exists computer: item : is_computer(computer) and facing(computer, chair)
    return in_front_of_computer

behavior __goal__():
    body:
        if exists chair: item : is_chair(chair) and has_computer_in_front(chair):
            # Check if there is a chair in front of the computer
            bind chair: item where:
                is_chair(chair) and has_computer_in_front(chair)
            # Select the chair in front of the computer
            achieve on_char(char, chair)
            # Move to and sit on the chair in front of the computer

        else:
            # If no chair found in front of the computer, inspect all potential options
            foreach chair: item:
                if is_chair(chair) and not visited(chair):
                    observe(chair, "Check if this chair is in front of the computer")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_computer_in_front(chair: item):
    # Function to determine if chair is in front of computer
    symbol in_front_of_computer = exists computer: item : is_computer(computer) and facing(computer, chair)
    return in_front_of_computer

behavior __goal__():
    body:
        if exists chair: item : is_chair(chair) and has_computer_in_front(chair):
            # Check if there is a chair in front of the computer
            bind chair: item where:
                is_chair(chair) and has_computer_in_front(chair)
            # Select the chair in front of the computer
            achieve on_char(char, chair)
            # Move to and sit on the chair in front of the computer

        else:
            # If no chair found in front of the computer, inspect all potential options
            foreach chair: item:
                if is_chair(chair) and not visited(chair):
                    observe(chair, "Check if this chair is in front of the computer")

##############################
From agent.py-> find a plan in act()
walk_executor(chair_138)obs(chair_138, Check if this chair is in front of the computer)walk_executor(chair_263)obs(chair_263, Check if this chair is in front of the computer)walk_executor(chair_374)obs(chair_374, Check if this chair is in front of the computer)
##############################
From agent.py
walk_executor(chair_138)
Robot is inside dining_room_1. Robot is close chair_138. Robot is on bench_122. Robot is on chair_138. Robot is no longer inside bedroom_220.Robot is no longer close chair_263.
##############################
From agent.py
obs(chair_138, Check if this chair is in front of the computer)
Get this information:  chair_138 is inside dining_room_1. chair_138 is close to freezer_140. chair_138 is close to floor_22. chair_138 is close to wall_7. chair_138 is close to character_219. character_219 is on chair_138. chair_138 is CLEAN.
##############################
From agent.py
walk_executor(chair_263)
Robot is inside bedroom_220. Robot is close chair_263. Robot is on bench_122. Robot is on chair_138. Robot is no longer inside dining_room_1.Robot is no longer close chair_138.
##############################
From agent.py
obs(chair_263, Check if this chair is in front of the computer)
Get this information:  chair_263 is inside bedroom_220. chair_263 is close to floor_224. chair_263 is close to bookshelf_260. chair_263 is close to desk_261. chair_263 is close to wall_231. chair_263 is close to wall_232. chair_263 is close to wall_233. chair_263 is close to mat_237. chair_263 is close to photoframe_246. chair_263 is close to floor_221. chair_263 is close to floor_222. chair_263 is close to floor_223. chair_263 is close to character_219. chair_263 is CLEAN.
##############################
From agent.py
walk_executor(chair_374)
Robot is inside bedroom_327. Robot is close chair_374. Robot is on bench_122. Robot is on chair_138. Robot is no longer inside bedroom_220.Robot is no longer close chair_263.
##############################
From agent.py
obs(chair_374, Check if this chair is in front of the computer)
Get this information:  chair_374 is facing drawing_387. chair_374 is close to ceiling_355. chair_374 is close to floor_332. chair_374 is close to floor_333. chair_374 is close to floor_336. chair_374 is close to floor_337. chair_374 is close to desk_375. chair_374 is close to wall_345. chair_374 is close to computer_379. chair_374 is close to mouse_380. chair_374 is close to mousepad_381. chair_374 is close to keyboard_382. chair_374 is close to cpuscreen_383. chair_374 is close to character_219. chair_374 is inside bedroom_327. chair_374 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_380_around_desk_375(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(mouse,desk_instance)
        else:
            exp(mouse,desk_instance)
    eff:
        unknown[mouse]=False
        close[mouse,desk_instance]=True
        close[desk_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_computer_with_mouse(mouse:item):
    body:
        achieve_on(mouse)
        # Turn on the computer using the mouse

behavior __goal__():
    body:
        bind mouse: item where:
            is_mouse(mouse)
        # Select the mouse located near the computer
        
        turn_on_computer_with_mouse(mouse)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_on not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_2112_around_mouse_2112(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==2112
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

#goal_representation
 
behavior turn_on_computer_with_mouse(mouse:item):
    body:
        is_computer(mouse)
        # Turn on the computer using the mouse

behavior __goal__():
    body:
        bind mouse: item where:
            is_mouse(mouse)
        # Select the mouse located near the computer
        
        turn_on_computer_with_mouse(mouse)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Expr statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
