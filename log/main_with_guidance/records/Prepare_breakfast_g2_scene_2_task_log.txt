From agent.py
Reset goals: The sub-goals are: 
['Scramble the egg using the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_kitchen_counter_132(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def has_egg_on_stove(stove:item):
    # Function to check if there is an egg on a stove
    symbol has_egg=exists o: item : is_food_egg(o) and on(o, stove)
    return has_egg

def is_fryingpan_on_stove(fryingpan:item, stove:item):
    # Function to check if a frying pan is on a stove
    symbol fryingpan_on_stove=on(fryingpan, stove)
    return fryingpan_on_stove

behavior scramble_egg(fryingpan:item, egg:item):
    body:
        achieve inside(egg, fryingpan)
        # Place the egg inside the frying pan
        achieve is_on(fryingpan)
        # Turn on the fryingpan to scramble the egg

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and has_egg_on_stove(stove)
        # Select a stove with an egg on it

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and is_fryingpan_on_stove(fryingpan, stove)
        # Select a frying pan on the stove

        bind egg: item where:
            is_food_egg(egg) and on(egg, stove)
        # Select an egg on the stove and frying pan
        
        scramble_egg(fryingpan, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_cupboard_131(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_dessert,cupboard_instance)
        else:
            exp(food_dessert,cupboard_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,cupboard_instance]=True
        close[cupboard_instance,food_dessert]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_egg_2053_around_cupboard_131(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_egg,cupboard_instance)
        else:
            exp(food_egg,cupboard_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,cupboard_instance]=True
        close[cupboard_instance,food_egg]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        achieve cut(egg)
        # Crack the egg open to prepare for scrambling

        achieve inside(egg, frying_pan)
        # Place the egg inside the frying pan

        achieve is_on(frying_pan)
        # Turn on the frying pan for cooking
        
        achieve scrambled(egg)
        # Scramble the egg while it is in the pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function scrambled not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2053_around_kitchen_counter_132(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        achieve cut(egg)
        # Crack the egg open to prepare for scrambling

        achieve inside(egg, frying_pan)
        # Place the egg inside the frying pan

        achieve is_on(frying_pan)
        # Turn on the frying pan for cooking
        
        achieve is_food_food(egg)
        # Scramble the egg while it is in the pan

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "scramble the egg using the frying pan." ?
Answer: Put the pan on the stove. Turn on the stove. Put oil in the pan. Put the egg in the pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put the pan on the stove.', '2. Turn on the stove.', '3. Put oil in the pan.', '4. Crack and put the egg in the pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_crayon_2030_around_table_193(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(crayon,table_instance)
        else:
            exp(crayon,table_instance)
    eff:
        unknown[crayon]=False
        close[crayon,table_instance]=True
        close[table_instance,crayon]=True
    

behavior find_after_shave_2029_around_cupboard_131(after_shave:item):
    goal: not unknown(after_shave)
    body:
        assert is_after_shave(after_shave)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(after_shave,cupboard_instance)
        else:
            exp(after_shave,cupboard_instance)
    eff:
        unknown[after_shave]=False
        close[after_shave,cupboard_instance]=True
        close[cupboard_instance,after_shave]=True
    

behavior find_drawing_196_around_kitchen_counter_132(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(drawing,kitchen_counter_instance)
        else:
            exp(drawing,kitchen_counter_instance)
    eff:
        unknown[drawing]=False
        close[drawing,kitchen_counter_instance]=True
        close[kitchen_counter_instance,drawing]=True
    

behavior find_oil_2005_around_kitchen_counter_132(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2107_around_cupboard_131(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        achieve on(pan, stove)
        # Place the pan on the stove

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(fryingpan_2107, cupboard_131)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)
##############################
From agent.py
walk_executor(cupboard_131)
Find pot_54. Find tray_142. Robot is inside dining_room_1. Robot is close cupboard_131. Robot is no longer inside home_office_161.
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. 
##############################
From agent.py
exp(fryingpan_2107, cupboard_131)
Failed to find fryingpan_2107 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_141)open_executor(oven_141)exp(fryingpan_2107, oven_141)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)
##############################
From agent.py
walk_executor(oven_141)
Find food_butter_2018. Find dough_2021. Find food_onion_2026. Robot is inside dining_room_1. Robot is close food_butter_2018. Robot is close dough_2021. Robot is close food_onion_2026. Robot is close oven_141. Robot is close tray_142. Robot is no longer close cupboard_131.
##############################
From agent.py
open_executor(oven_141)
Robot is inside dining_room_1. Robot is close food_butter_2018. Robot is close dough_2021. Robot is close food_onion_2026. Robot is close oven_141. Robot is close tray_142. 
##############################
From agent.py
exp(fryingpan_2107, oven_141)
Failed to find fryingpan_2107 around oven_141. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(fryingpan_2107, kitchen_counter_132)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is no longer close food_butter_2018.Robot is no longer close dough_2021.Robot is no longer close food_onion_2026.Robot is no longer close oven_141.Robot is no longer close tray_142.
##############################
From agent.py
exp(fryingpan_2107, kitchen_counter_132)
Failed to find fryingpan_2107 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(fryingpan_2107, kitchen_counter_128)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find cutting_board_2080. Find food_orange_2008. Find spectacles_2106. Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer close kitchen_counter_132.
##############################
From agent.py
exp(fryingpan_2107, kitchen_counter_128)
Failed to find fryingpan_2107 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(fryingpan_2107, kitchen_counter_129)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Find oil_2102. Find pot_2093. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is no longer close kitchen_counter_128.Robot is no longer close floor_15.
##############################
From agent.py
exp(fryingpan_2107, kitchen_counter_129)
Find fryingpan_2107. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. 
##############################
From agent.py
grab_executor(fryingpan_2107)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Grabbing fryingpan_2107 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Robot is close stove_2090. 
##############################
From agent.py
put_executor(fryingpan_2107, stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Robot is close stove_2090. fryingpan_2107 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_stereo_2007_around_bookshelf_372(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(stereo,bookshelf_instance)
        else:
            exp(stereo,bookshelf_instance)
    eff:
        unknown[stereo]=False
        close[stereo,bookshelf_instance]=True
        close[bookshelf_instance,stereo]=True
    

behavior find_drawing_389_around_photoframe_246(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==246
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(drawing,photoframe_instance)
        else:
            exp(drawing,photoframe_instance)
    eff:
        unknown[drawing]=False
        close[drawing,photoframe_instance]=True
        close[photoframe_instance,drawing]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        achieve is_on(stove)
        # Turn on the stove

##############################
From agent.py-> find a plan in act()
switchon_executor(stove_2090)
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Robot is close stove_2090. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_oil_2005_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_oil_in_pan(oil:item, pan:item):
    body:
        achieve inside(oil, pan)
        # Place the oil inside the pan

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2090)
        # Select the frying pan on the stove with ID 2090

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        put_oil_in_pan(oil, pan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2090; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_sauce_2101_around_wallshelf_190(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(sauce,wallshelf_instance)
        else:
            exp(sauce,wallshelf_instance)
    eff:
        unknown[sauce]=False
        close[sauce,wallshelf_instance]=True
        close[wallshelf_instance,sauce]=True
    

behavior find_oil_2005_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#goal_representation

behavior put_oil_in_pan(oil:item, pan:item):
    body:
        achieve inside(oil, pan)
        # Place the oil inside the pan

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2090)
        # Select the frying pan on the stove with ID 2090

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        bind stove_2090: item where:
            is_stove(stove_2090)
        # Define stove_2090 as a stove

        put_oil_in_pan(oil, pan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2090; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2005_around_cupboard_130(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#goal_representation

behavior put_oil_in_pan(oil:item, pan:item):
    body:
        achieve inside(oil, pan)
        # Place the oil inside the pan

behavior __goal__():
    body:
        bind stove_2090: item where:
            is_stove(stove_2090)
        # Define stove_2090 as a stove

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2090)
        # Select the frying pan on the stove with ID 2090

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        put_oil_in_pan(oil, pan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior put_oil_in_pan(oil:item, pan:item):
    body:
        achieve inside(oil, pan)
        # Place the oil inside the pan

behavior __goal__():
    body:
        bind stove_2090: item where:
            is_stove(stove_2090)
        # Define stove_2090 as a stove

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2090)
        # Select the frying pan on the stove with ID 2090

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        put_oil_in_pan(oil, pan)

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(fryingpan_2107)putin_executor(oil_2102, fryingpan_2107)
##############################
From agent.py
walk_executor(oil_2102)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close oil_2102. Robot is no longer close stove_2090.Robot is no longer close fryingpan_2107.
##############################
From agent.py
grab_executor(oil_2102)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close oil_2102. Grabbing oil_2102 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot is inside dining_room_1. Robot is close oil_2102. Robot is close stove_2090. Robot is close fryingpan_2107. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
putin_executor(oil_2102, fryingpan_2107)
Robot is inside dining_room_1. Robot is close oil_2102. Robot is close stove_2090. Robot is close fryingpan_2107. oil_2102 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_egg_2053_around_pot_2093(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_egg,pot_instance)
        else:
            exp(food_egg,pot_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,pot_instance]=True
        close[pot_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_egg(egg:item):
    # Function to check if an item is a food egg
    symbol is_egg=exists x: item : is_food_egg(x) and x == egg
    return is_egg

behavior crack_and_put_egg_in_pan(egg:item, pan:item):
    body:
        achieve cut(egg)
        # Crack the egg
        achieve inside(egg, pan)
        # Put the cracked egg into the pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an item that is a food egg

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2090)
        # Select the frying pan on the stove

        crack_and_put_egg_in_pan(egg, pan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2090; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2053_around_pot_2093(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_egg,pot_instance)
        else:
            exp(food_egg,pot_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,pot_instance]=True
        close[pot_instance,food_egg]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
def is_food_egg(egg:item):
    # Function to check if an item is a food egg
    symbol is_egg=exists x: item : is_food_egg(x) and x == egg
    return is_egg

behavior crack_and_put_egg_in_pan(egg:item, pan:item):
    body:
        achieve cut(egg)
        # Crack the egg
        achieve inside(egg, pan)
        # Put the cracked egg into the pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an item that is a food egg

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select the frying pan on the stove

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is turned on

        crack_and_put_egg_in_pan(egg, pan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_egg_2053_around_cupboard_130(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_egg,cupboard_instance)
        else:
            exp(food_egg,cupboard_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,cupboard_instance]=True
        close[cupboard_instance,food_egg]=True
    

#goal_representation
 
def is_food_egg(egg:item):
    # Function to check if an item is a food egg
    symbol is_egg=exists x: item : is_food_egg(x) and x == egg
    return is_egg

behavior crack_and_put_egg_in_pan(egg:item, pan:item):
    body:
        achieve cut(egg)
        # Crack the egg
        achieve inside(egg, pan)
        # Put the cracked egg into the pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an item that is a food egg

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is turned on

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select the frying pan on the stove

        crack_and_put_egg_in_pan(egg, pan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_food_egg(egg:item):
    # Function to check if an item is a food egg
    symbol is_egg=exists x: item : is_food_egg(x) and x == egg
    return is_egg

behavior crack_and_put_egg_in_pan(egg:item, pan:item):
    body:
        achieve cut(egg)
        # Crack the egg
        achieve inside(egg, pan)
        # Put the cracked egg into the pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an item that is a food egg

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is turned on

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select the frying pan on the stove

        crack_and_put_egg_in_pan(egg, pan)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_egg_2053, cupboard_130)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer close stove_2090.Robot is no longer close fryingpan_2107.Robot is no longer close oil_2102.
##############################
From agent.py
exp(food_egg_2053, cupboard_130)
Failed to find food_egg_2053 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_190)exp(food_egg_2053, wallshelf_190)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(wallshelf_190)
Robot is inside home_office_161. Robot is close wallshelf_190. Robot is no longer inside dining_room_1.Robot is no longer close blender_2032.Robot is no longer close tea_bag_2017.Robot is no longer close cupboard_130.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find food_egg_2053 ?
Answer: Go to dining_room_1. Locate freezer_140. The target item, food_egg_2053, is inside freezer_140.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_1. Locate freezer_140. The target item, food_egg_2053, is inside freezer_140.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for fryingpan_2107 around cupboard_131.
Action 4: Walk to oven_141.
Action 5: Open oven_141.
Action 6: look for fryingpan_2107 around oven_141.
Action 7: Walk to kitchen_counter_132.
Action 8: look for fryingpan_2107 around kitchen_counter_132.
Action 9: Walk to kitchen_counter_128.
Action 10: look for fryingpan_2107 around kitchen_counter_128.
Action 11: Walk to kitchen_counter_129.
Action 12: look for fryingpan_2107 around kitchen_counter_129.
Action 13: Walk to fryingpan_2107.
Action 14: Grab fryingpan_2107.
Action 15: Walk to stove_2090.
Action 16: Put fryingpan_2107 on stove_2090.
Action 17: Switch on stove_2090.
Action 18: Walk to oil_2102.
Action 19: Grab oil_2102.
Action 20: Walk to fryingpan_2107.
Action 21: Put oil_2102 into fryingpan_2107.
Action 22: Walk to cupboard_130.
Action 23: look for food_egg_2053 around cupboard_130.
Action 24: Walk to wallshelf_190.

##############################
From agent.py
exp(food_egg_2053, wallshelf_190)
Failed to find food_egg_2053 around wallshelf_190. 
##############################
From agent.py-> find a plan in act()
walk_executor(freezer_140)switchoff_executor(freezer_140)open_executor(freezer_140)exp(food_egg_2053, freezer_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(freezer_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer inside home_office_161.Robot is no longer close wallshelf_190.
##############################
From agent.py
switchoff_executor(freezer_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(freezer_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(food_egg_2053, freezer_140)
Find food_egg_2053. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2053)walk_executor(cutting_board_2080)put_executor(food_egg_2053, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
grab_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close cutting_board_2080. Robot is close kitchen_counter_128. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close freezer_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
put_executor(food_egg_2053, cutting_board_2080)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close cutting_board_2080. Robot is close kitchen_counter_128. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_52)
Robot is inside dining_room_1. Robot is close wall_2. Robot is close knifeblock_52. Robot is no longer close cutting_board_2080.Robot is no longer close kitchen_counter_128.Robot is no longer close food_egg_2053.
##############################
From agent.py
exp(knife_2036, knifeblock_52)
Failed to find knife_2036 around knifeblock_52. 
##############################
From agent.py-> find a plan in act()
walk_executor(television_216)exp(knife_2036, television_216)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(television_216)
Robot is inside home_office_161. Robot is close television_216. Robot is close tvstand_186. Robot is no longer inside dining_room_1.Robot is no longer close wall_2.Robot is no longer close knifeblock_52.
##############################
From agent.py
exp(knife_2036, television_216)
Failed to find knife_2036 around television_216. 
##############################
From agent.py-> find a plan in act()
walk_executor(door_234)exp(knife_2036, door_234)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(door_234)
Find drawing_238. Robot is inside bedroom_220. Robot is close floor_224. Robot is close door_234. Robot is close floor_165. Robot is no longer inside home_office_161.Robot is no longer close television_216.Robot is no longer close tvstand_186.
##############################
From agent.py
exp(knife_2036, door_234)
Failed to find knife_2036 around door_234. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_305)open_executor(bathroom_cabinet_305)exp(knife_2036, bathroom_cabinet_305)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(bathroom_cabinet_305)
Find soap_2038. Find towel_rack_298. Find drawing_296. Robot is inside bathroom_265. Robot is close bathroom_cabinet_305. Robot is close wall_269. Robot is close soap_2038. Robot is no longer inside bedroom_220.Robot is no longer close floor_224.Robot is no longer close door_234.Robot is no longer close floor_165.
##############################
From agent.py
open_executor(bathroom_cabinet_305)
Robot is inside bathroom_265. Robot is close bathroom_cabinet_305. Robot is close wall_269. Robot is close soap_2038. 
##############################
From agent.py
exp(knife_2036, bathroom_cabinet_305)
Failed to find knife_2036 around bathroom_cabinet_305. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(knife_2036, dishwasher_143)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(dishwasher_143)
Find knife_2036. Robot is inside dining_room_1. Robot is close knife_2036. Robot is close floor_21. Robot is close dishwasher_143. Robot is no longer inside bathroom_265.Robot is no longer close bathroom_cabinet_305.Robot is no longer close wall_269.Robot is no longer close soap_2038.
##############################
From agent.py
open_executor(dishwasher_143)
Robot is inside dining_room_1. Robot is close knife_2036. Robot is close floor_21. Robot is close dishwasher_143. 
##############################
From agent.py
exp(knife_2036, dishwasher_143)
Find knife_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2036)walk_executor(food_egg_2053)cut_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
grab_executor(knife_2036)
Robot is inside dining_room_1. Robot is close knife_2036. Robot is close floor_21. Robot is close dishwasher_143. Grabbing knife_2036 by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close knife_2036. Robot is close cutting_board_2080. Robot is close food_egg_2053. Robot is no longer close floor_21.Robot is no longer close dishwasher_143.
##############################
