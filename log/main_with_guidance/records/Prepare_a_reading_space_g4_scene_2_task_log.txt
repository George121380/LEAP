From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the coffee table in the home office.', '2. Prepare a cup of hot milk and place it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def in_home_office(table: item):
    # Determine if the table is in the home office
    symbol in_office=exists room: item : is_home_office(room) and inside(table, room)
    return in_office

behavior bring_book_to_table(book:item, table:item):
    body:
        achieve on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and not visited(book)
        # Select a book that hasnt been visited
        
        bind table: item where:
            is_table(table) and in_home_office(table) and not visited(table)
        # Select a table located in the home office that hasnt been visited
        
        observe(book, "Check the location of the book")
        observe(table, "Check if the table is clear")
        
        achieve close_char(char, book)
        achieve close_char(char, table)

        bring_book_to_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_chair_138_around_table_127(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation

behavior find_book_and_place_on_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table)
        # Select the coffee table

        find_book_and_place_on_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior find_book_and_place_on_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table)
        # Select the coffee table

        find_book_and_place_on_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_372)open_executor(bookshelf_372)exp(book_2091, bookshelf_372)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)
##############################
From agent.py
walk_executor(bookshelf_372)
Find drawing_389. Find stamp_2031. Robot is inside bedroom_327. Robot is close floor_331. Robot is close bookshelf_372. Robot is no longer inside home_office_161.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
open_executor(bookshelf_372)
Find towel_rack_298. Find drawing_296. Robot is inside bedroom_327. Robot is close floor_331. Robot is close bookshelf_372. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
exp(book_2091, bookshelf_372)
Failed to find book_2091 around bookshelf_372. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(book_2091, bookshelf_137)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)
##############################
From agent.py
walk_executor(bookshelf_137)
Find cup_2089. Find book_2092. Find drawing_118. Robot is inside dining_room_1. Robot is close floor_24. Robot is close bookshelf_137. Robot is close photoframe_102. Robot is no longer inside bedroom_327.Robot is no longer close floor_331.Robot is no longer close bookshelf_372.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
open_executor(bookshelf_137)
Find drawing_387. Robot is inside dining_room_1. Robot is close floor_24. Robot is close bookshelf_137. Robot is close photoframe_102. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
exp(book_2091, bookshelf_137)
Failed to find book_2091 around bookshelf_137. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_188)open_executor(bookshelf_188)exp(book_2091, bookshelf_188)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)
##############################
From agent.py
walk_executor(bookshelf_188)
Find drawing_196. Robot is inside home_office_161. Robot is close bookshelf_188. Robot is close floor_165. Robot is no longer inside dining_room_1.Robot is no longer close floor_24.Robot is no longer close bookshelf_137.Robot is no longer close photoframe_102.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
open_executor(bookshelf_188)
Find dvd_player_2000. Find clothes_underwear_2022. Find cat_2082. Find mouse_2112. Find cup_2006. Find laser_pointer_2025. Find drawing_238. Find keyboard_2110. Find pillow_195. Find vacuum_cleaner_2094. Find stereo_2007. Find mat_201. Find cd_2100. Find oil_2005. Find video_game_controller_2019. Robot is inside home_office_161. Robot is close bookshelf_188. Robot is close floor_165. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
exp(book_2091, bookshelf_188)
Failed to find book_2091 around bookshelf_188. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2092)open_executor(book_2092)exp(book_2091, book_2092)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)
##############################
From agent.py
walk_executor(book_2092)
Robot is inside dining_room_1. Robot is close bookshelf_137. Robot is close book_2092. Robot is no longer inside home_office_161.Robot is no longer close bookshelf_188.Robot is no longer close floor_165.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
open_executor(book_2092)
Robot is inside dining_room_1. Robot is close bookshelf_137. Robot is close book_2092. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
exp(book_2091, book_2092)
Failed to find book_2091 around book_2092. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_189)open_executor(bookshelf_189)exp(book_2091, bookshelf_189)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)
##############################
From agent.py
walk_executor(bookshelf_189)
Robot is inside home_office_161. Robot is close bookshelf_189. Robot is close floor_167. Robot is no longer inside dining_room_1.Robot is no longer close bookshelf_137.Robot is no longer close book_2092.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
open_executor(bookshelf_189)
Robot is inside home_office_161. Robot is close bookshelf_189. Robot is close floor_167. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
exp(book_2091, bookshelf_189)
Failed to find book_2091 around bookshelf_189. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_260)open_executor(bookshelf_260)exp(book_2091, bookshelf_260)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)
##############################
From agent.py
walk_executor(bookshelf_260)
Find mat_237. Find chair_263. Robot is inside bedroom_220. Robot is close floor_222. Robot is close bookshelf_260. Robot is close floor_221. Robot is close photoframe_246. Robot is no longer inside home_office_161.Robot is no longer close bookshelf_189.Robot is no longer close floor_167.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
open_executor(bookshelf_260)
Robot is inside bedroom_220. Robot is close floor_222. Robot is close bookshelf_260. Robot is close floor_221. Robot is close photoframe_246. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find book_2091 ?
Answer: Robot, locate the dining_room_1 and find bookshelf_136. You will find book_2091 on bookshelf_136.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, locate the dining_room_1 and find bookshelf_136. You will find book_2091 on bookshelf_136.

The actions you have taken:
Action 1: Walk to bookshelf_372.
Action 2: Open bookshelf_372.
Action 3: look for book_2091 around bookshelf_372.
Action 4: Walk to bookshelf_137.
Action 5: Open bookshelf_137.
Action 6: look for book_2091 around bookshelf_137.
Action 7: Walk to bookshelf_188.
Action 8: Open bookshelf_188.
Action 9: look for book_2091 around bookshelf_188.
Action 10: Walk to book_2092.
Action 11: Open book_2092.
Action 12: look for book_2091 around book_2092.
Action 13: Walk to bookshelf_189.
Action 14: Open bookshelf_189.
Action 15: look for book_2091 around bookshelf_189.
Action 16: Walk to bookshelf_260.
Action 17: Open bookshelf_260.

##############################
From agent.py
exp(book_2091, bookshelf_260)
Failed to find book_2091 around bookshelf_260. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)
##############################
From agent.py
walk_executor(bookshelf_136)
Find book_2091. Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close floor_12. Robot is close floor_13. Robot is no longer inside bedroom_220.Robot is no longer close bookshelf_260.Robot is no longer close floor_221.Robot is no longer close floor_222.Robot is no longer close photoframe_246.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: walk_executor(book_2091);grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 4
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_123)put_executor(book_2091, table_123)
##############################
From agent.py
walk_executor(book_2091)
Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close book_2091. Robot is no longer close floor_12.Robot is no longer close floor_13.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 3
##############################
From agent.py
grab_executor(book_2091)
Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close book_2091. Grabbing book_2091 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 2
##############################
From agent.py
walk_executor(table_123)
Find mat_114. Find shoes_2001. Find fork_2103. Find cup_2087. Find cup_2088. Find bowl_2095. Find mouse_2003. Find homework_2011. Find laptop_2015. Robot is inside dining_room_1. Robot is close book_2091. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close bookshelf_136.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 2
##############################
From agent.py
put_executor(book_2091, table_123)
Robot is inside dining_room_1. Robot is close book_2091. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. book_2091 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: grab_executor(book_2091);walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 3
##############################
From agent.py
Human Instruction: You need to put book_2091 on the coffee table in the home office, not table_123 in the dining_room_1. Move book_2091 to the correct location.

The actions you have taken:
Action 1: Walk to bookshelf_372.
Action 2: Open bookshelf_372.
Action 3: look for book_2091 around bookshelf_372.
Action 4: Walk to bookshelf_137.
Action 5: Open bookshelf_137.
Action 6: look for book_2091 around bookshelf_137.
Action 7: Walk to bookshelf_188.
Action 8: Open bookshelf_188.
Action 9: look for book_2091 around bookshelf_188.
Action 10: Walk to book_2092.
Action 11: Open book_2092.
Action 12: look for book_2091 around book_2092.
Action 13: Walk to bookshelf_189.
Action 14: Open bookshelf_189.
Action 15: look for book_2091 around bookshelf_189.
Action 16: Walk to bookshelf_260.
Action 17: Open bookshelf_260.
Action 18: look for book_2091 around bookshelf_260.
Action 19: Walk to bookshelf_136.
Action 20: look for book_2091 around bookshelf_136.
Action 21: Walk to book_2091.
Action 22: Grab book_2091.
Action 23: Walk to table_123.
Action 24: Put book_2091 on table_123.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_freezer_140(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind freezer_instance:item where:
            is_freezer(freezer_instance) and id[freezer_instance]==140
        achieve close_char(char,freezer_instance)
        if can_open(freezer_instance):
            achieve_once open(freezer_instance)
            exp(novel,freezer_instance)
        else:
            exp(novel,freezer_instance)
    eff:
        unknown[novel]=False
        close[novel,freezer_instance]=True
        close[freezer_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_book_to_coffee_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind book_2091: item where:
            is_book(book_2091) and id[book_2091] == 2091 
        # Select the book with ID 2091
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table] = 123
        # Select a coffee table that is not table_123
        
        move_book_to_coffee_table(book_2091, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5976, column 57.
Expected one of: 
	* _NEWLINE
	* COMMA
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_desk_261(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(novel,desk_instance)
        else:
            exp(novel,desk_instance)
    eff:
        unknown[novel]=False
        close[novel,desk_instance]=True
        close[desk_instance,novel]=True
    

behavior find_book_2092_around_table_127(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(book,table_instance)
        else:
            exp(book,table_instance)
    eff:
        unknown[book]=False
        close[book,table_instance]=True
        close[table_instance,book]=True
    

#goal_representation
 
behavior move_book_to_coffee_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind book_2091: item where:
            is_book(book_2091) and id[book_2091] == 2091 
        # Select the book with ID 2091
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table] = 123
        # Select a coffee table that is not table_123
        
        move_book_to_coffee_table(book_2091, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5994, column 57.
Expected one of: 
	* _NEWLINE
	* COMMA
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_table_127(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(book,table_instance)
        else:
            exp(book,table_instance)
    eff:
        unknown[book]=False
        close[book,table_instance]=True
        close[table_instance,book]=True
    

#goal_representation
 
behavior move_book_to_coffee_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind book_2091: item where:
            is_book(book_2091) and id[book_2091] == 2091 
        # Select the book with ID 2091
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table] = 123
        # Select a coffee table that is not table_123
        
        move_book_to_coffee_table(book_2091, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_table_127(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(book,table_instance)
        else:
            exp(book,table_instance)
    eff:
        unknown[book]=False
        close[book,table_instance]=True
        close[table_instance,book]=True
    

#exp_behavior_end

#goal_representation

def in_home_office(table: item):
    # Function to check if a table is in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(table, room)
    return in_home_office

behavior move_book_to_table(book: item, table: item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select book with ID 2091

        bind table: item where:
            is_table(table) and in_home_office(table)
        # Select a table in the home office

        move_book_to_table(book, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def in_home_office(table: item):
    # Function to check if a table is in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(table, room)
    return in_home_office

behavior move_book_to_table(book: item, table: item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select book with ID 2091

        bind table: item where:
            is_table(table) and in_home_office(table)
        # Select a table in the home office

        move_book_to_table(book, table)

##############################
From agent.py-> find a plan in act()
grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
grab_executor(book_2091)
Robot is inside dining_room_1. Robot is close book_2091. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Grabbing book_2091 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: walk_executor(table_193);put_executor(book_2091, table_193);
missed action num: 2
##############################
From agent.py
walk_executor(table_193)
Robot is inside home_office_161. Robot is close book_2091. Robot is close table_193. Robot is no longer inside dining_room_1.Robot is no longer close table_123.Robot is no longer close floor_17.Robot is no longer close mat_114.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: put_executor(book_2091, table_193);
missed action num: 1
##############################
From agent.py
put_executor(book_2091, table_193)
Robot is inside home_office_161. Robot is close book_2091. Robot is close table_193. book_2091 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k1
missed actions: 
missed action num: 0
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: walk_executor(freezer_140);switchoff_executor(freezer_140);open_executor(freezer_140);walk_executor(milk_2074);grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);walk_executor(microwave_149);open_executor(microwave_149);walk_executor(cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 15
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_cupboard_131(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(milk,cupboard_instance)
        else:
            exp(milk,cupboard_instance)
    eff:
        unknown[milk]=False
        close[milk,cupboard_instance]=True
        close[cupboard_instance,milk]=True
    

behavior find_pot_54_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_hot_milk(milk:item, stove:item, pot:item, stovefan:item):
    body:
        achieve inside(milk, pot)
        achieve inside(pot, stove)
        achieve is_on(stovefan) # Ensure the stove fan is on
        achieve is_on(stove) # Turn on the stove to heat the milk

behavior move_to_table_and_place(item:item, table:item):
    body:
        achieve on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the location home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table, which is inside the home office

        bind milk: item where:
            is_milk(milk)
        # Bind the milk item to heat

        bind stove: item where:
            is_stove(stove)
        # Bind a stove to heat the milk

        bind pot: item where:
            is_pot(pot)
        # Bind a pot to heat the milk

        bind stovefan: item where:
            is_stovefan(stovefan)
        # Bind the stovefan to use while heating the milk

        prepare_hot_milk(milk, stove, pot, stovefan)
        move_to_table_and_place(milk, table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_kitchen_counter_128(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(milk,kitchen_counter_instance)
        else:
            exp(milk,kitchen_counter_instance)
    eff:
        unknown[milk]=False
        close[milk,kitchen_counter_instance]=True
        close[kitchen_counter_instance,milk]=True
    

behavior find_book_2091_around_cup_2006(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2006
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(book,cup_instance)
        else:
            exp(book,cup_instance)
    eff:
        unknown[book]=False
        close[book,cup_instance]=True
        close[cup_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def in_home_office(table:item):
    # Function to check if a table is in the home office
    symbol in_office=exists room: item : is_home_office(room) and inside(table, room)
    return in_office

behavior place_milk_on_table(milk:item, table:item):
    body:
        achieve on(milk, table) # Place the cup of hot milk on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and in_home_office(table)
        # Select the table in the home office
        
        bind milk: item where:
            is_milk(milk)
        # Select the item milk
        
        place_milk_on_table(milk, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def in_home_office(table:item):
    # Function to check if a table is in the home office
    symbol in_office=exists room: item : is_home_office(room) and inside(table, room)
    return in_office

behavior place_milk_on_table(milk:item, table:item):
    body:
        achieve on(milk, table) # Place the cup of hot milk on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and in_home_office(table)
        # Select the table in the home office
        
        bind milk: item where:
            is_milk(milk)
        # Select the item milk
        
        place_milk_on_table(milk, table)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(milk_2074, kitchen_counter_128)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(table_193)put_executor(milk_2074, table_193)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find cutting_board_2080. Find food_orange_2008. Find spectacles_2106. Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer inside home_office_161.Robot is no longer close table_193.Robot is no longer close book_2091.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: walk_executor(freezer_140);switchoff_executor(freezer_140);open_executor(freezer_140);walk_executor(milk_2074);grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);walk_executor(microwave_149);open_executor(microwave_149);walk_executor(cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 15
##############################
From agent.py
exp(milk_2074, kitchen_counter_128)
Failed to find milk_2074 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(milk_2074, cupboard_131)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(table_193)put_executor(milk_2074, table_193)
##############################
From agent.py
walk_executor(cupboard_131)
Find pot_54. Find tray_142. Robot is inside dining_room_1. Robot is close cupboard_131. Robot is no longer close kitchen_counter_128.Robot is no longer close floor_15.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: walk_executor(freezer_140);switchoff_executor(freezer_140);open_executor(freezer_140);walk_executor(milk_2074);grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);walk_executor(microwave_149);open_executor(microwave_149);walk_executor(cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 15
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: walk_executor(freezer_140);switchoff_executor(freezer_140);open_executor(freezer_140);walk_executor(milk_2074);grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);walk_executor(microwave_149);open_executor(microwave_149);walk_executor(cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 15
##############################
From agent.py
exp(milk_2074, cupboard_131)
Failed to find milk_2074 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(milk_2074, cupboard_130)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(table_193)put_executor(milk_2074, table_193)
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer close cupboard_131.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: walk_executor(freezer_140);switchoff_executor(freezer_140);open_executor(freezer_140);walk_executor(milk_2074);grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);walk_executor(microwave_149);open_executor(microwave_149);walk_executor(cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 15
##############################
From agent.py
exp(milk_2074, cupboard_130)
Failed to find milk_2074 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(freezer_140)switchoff_executor(freezer_140)open_executor(freezer_140)exp(milk_2074, freezer_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(table_193)put_executor(milk_2074, table_193)
##############################
From agent.py
walk_executor(freezer_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close blender_2032.Robot is no longer close tea_bag_2017.Robot is no longer close cupboard_130.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: switchoff_executor(freezer_140);open_executor(freezer_140);grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);walk_executor(microwave_149);open_executor(microwave_149);walk_executor(cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 13
##############################
From agent.py
switchoff_executor(freezer_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: open_executor(freezer_140);grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);walk_executor(microwave_149);open_executor(microwave_149);walk_executor(cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 12
##############################
From agent.py
open_executor(freezer_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);walk_executor(microwave_149);open_executor(microwave_149);walk_executor(cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 11
##############################
From agent.py
exp(milk_2074, freezer_140)
Find milk_2074. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2074)walk_executor(table_193)put_executor(milk_2074, table_193)
##############################
From agent.py
grab_executor(milk_2074)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close freezer_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Grabbing milk_2074 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);walk_executor(microwave_149);open_executor(microwave_149);walk_executor(cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 10
##############################
From agent.py
walk_executor(table_193)
Robot is inside home_office_161. Robot is close milk_2074. Robot is close table_193. Robot is no longer inside dining_room_1.Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close freezer_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);walk_executor(microwave_149);open_executor(microwave_149);walk_executor(cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 10
##############################
From agent.py
put_executor(milk_2074, table_193)
Robot is inside home_office_161. Robot is close milk_2074. Robot is close table_193. milk_2074 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);walk_executor(microwave_149);open_executor(microwave_149);walk_executor(cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 11
##############################
From agent.py
Human Instruction: You need to heat the milk before it can be considered "hot milk" for placement on the coffee table in the home office. Ensure the milk is heated and placed on the correct table.

The actions you have taken:
Action 1: Walk to bookshelf_372.
Action 2: Open bookshelf_372.
Action 3: look for book_2091 around bookshelf_372.
Action 4: Walk to bookshelf_137.
Action 5: Open bookshelf_137.
Action 6: look for book_2091 around bookshelf_137.
Action 7: Walk to bookshelf_188.
Action 8: Open bookshelf_188.
Action 9: look for book_2091 around bookshelf_188.
Action 10: Walk to book_2092.
Action 11: Open book_2092.
Action 12: look for book_2091 around book_2092.
Action 13: Walk to bookshelf_189.
Action 14: Open bookshelf_189.
Action 15: look for book_2091 around bookshelf_189.
Action 16: Walk to bookshelf_260.
Action 17: Open bookshelf_260.
Action 18: look for book_2091 around bookshelf_260.
Action 19: Walk to bookshelf_136.
Action 20: look for book_2091 around bookshelf_136.
Action 21: Walk to book_2091.
Action 22: Grab book_2091.
Action 23: Walk to table_123.
Action 24: Put book_2091 on table_123.
Action 25: Grab book_2091.
Action 26: Walk to table_193.
Action 27: Put book_2091 on table_193.
Action 28: Walk to kitchen_counter_128.
Action 29: look for milk_2074 around kitchen_counter_128.
Action 30: Walk to cupboard_131.
Action 31: Open cupboard_131.
Action 32: look for milk_2074 around cupboard_131.
Action 33: Walk to cupboard_130.
Action 34: look for milk_2074 around cupboard_130.
Action 35: Walk to freezer_140.
Action 36: Switch off freezer_140.
Action 37: Open freezer_140.
Action 38: look for milk_2074 around freezer_140.
Action 39: Grab milk_2074.
Action 40: Walk to table_193.
Action 41: Put milk_2074 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_bowl_2095(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2095
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(bowl,bowl_instance)
        else:
            exp(bowl,bowl_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bowl_instance]=True
        close[bowl_instance,bowl]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether the sink has a faucet
    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

def is_in_home_office(obj:item):
    # Check if an item is in the home office
    symbol is_in_home_office=exists room: item: is_home_office(room) and inside(obj, room)
    return is_in_home_office

behavior heat_and_prepare_milk(milk:item, sink:item, microwave:item, cup:item):
    body:
        achieve_once inhand(milk)
        # Grab the milk to move it to necessary locations
        
        if has_faucet(sink):
            # If sink has a faucet, use it to potentially wash or check the cup
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            achieve has_water(sink)
            achieve_once is_off(faucet)
        
        achieve has_water(milk)
        # Ensure the milk has been cleaned if necessary
        
        achieve inside(milk, microwave)
        # Place milk inside microwave
        
        achieve is_on(microwave)
        # Heat the milk in the microwave
        
        achieve inside(milk, cup)
        # Pour milk into cup
        
behavior place_milk_on_table(cup:item, table:item):
    body:
        achieve on(cup, table)
        # Place the cup on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk item
        
        bind sink: item where:
            is_sink(sink) and is_in_home_office(sink)
        # Select sink in home office
        
        bind microwave: item where:
            is_microwave(microwave) and is_in_home_office(microwave)
        # Select microwave in home office
        
        bind cup: item where:
            is_cup(cup) and is_in_home_office(cup)
        # Select a cup present in home office
        
        bind table: item where:
            is_table(table) and is_in_home_office(table)
        # Select table in home office
        
        heat_and_prepare_milk(milk, sink, microwave, cup)
        place_milk_on_table(cup, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_stereo_2007_around_stereo_2007(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind stereo_instance:item where:
            is_stereo(stereo_instance) and id[stereo_instance]==2007
        achieve close_char(char,stereo_instance)
        if can_open(stereo_instance):
            achieve_once open(stereo_instance)
            exp(stereo,stereo_instance)
        else:
            exp(stereo,stereo_instance)
    eff:
        unknown[stereo]=False
        close[stereo,stereo_instance]=True
        close[stereo_instance,stereo]=True
    

#exp_behavior_end

#goal_representation
 
def is_heated(milk:item):
    # Function to check if the milk is heated
    symbol heated = not is_off(stove) and facing(milk, stove)
    return heated

behavior heat_milk(milk:item):
    body:
        # Assuming there is an available method to heat the milk
        if not is_heated(milk):
            # Assume there is a stove present to heat the milk
            bind stove: item where:
                is_stove(stove)  
            achieve facing(milk, stove) 
            # Ensure the milk is facing the stove
            achieve_once is_on(stove)
            # Turn the stove on to heat the milk

        # Ensure the stove remains off after heating
        achieve_once is_off(stove)

behavior put_milk_on_table(milk:item, table:item):
    body:
        achieve on(milk, table) # Place the milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        heat_milk(milk) # Heat the milk
        put_milk_on_table(milk, table) # Place the heated milk on the table
        

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: stove; available variables: [Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_stereo_2007_around_wallshelf_190(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(stereo,wallshelf_instance)
        else:
            exp(stereo,wallshelf_instance)
    eff:
        unknown[stereo]=False
        close[stereo,wallshelf_instance]=True
        close[wallshelf_instance,stereo]=True
    

behavior find_pot_54_around_pot_54(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==54
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#goal_representation

def is_heated(milk:item, stove:item):
    # Function to check if the milk is heated
    symbol heated = not is_off(stove) and facing(milk, stove)
    return heated

behavior heat_milk(milk:item, stove:item):
    body:
        # Assuming there is an available method to heat the milk
        if not is_heated(milk, stove):
            # Ensure the milk is facing the stove
            achieve facing(milk, stove) 
            achieve_once is_on(stove)
            # Turn the stove on to heat the milk

        # Ensure the stove remains off after heating
        achieve_once is_off(stove)

behavior put_milk_on_table(milk:item, table:item):
    body:
        achieve on(milk, table) # Place the milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_milk(milk, stove) # Heat the milk
        put_milk_on_table(milk, table) # Place the heated milk on the table


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#goal_representation
 
def is_heated(milk:item, stove:item):
    # Function to check if the milk is heated
    symbol heated = not is_off(stove) and facing(milk, stove)
    return heated

behavior heat_milk(milk:item, stove:item):
    body:
        # Assuming there is an available method to heat the milk
        if not is_heated(milk, stove):
            # Ensure the milk is facing the stove
            achieve facing(milk, stove) 
            achieve_once is_on(stove)
            # Turn the stove on to heat the milk

        # Ensure the stove remains off after heating
        achieve_once is_off(stove)

behavior put_milk_on_table(milk:item, table:item):
    body:
        achieve on(milk, table) # Place the milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        heat_milk(milk, stove) # Heat the milk
        put_milk_on_table(milk, table) # Place the heated milk on the table

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. prepare a cup of hot milk and place it on the coffee table in the home office." ?
Answer: Find the milk in the fridge, put it in a cup, put the cup in the microwave. Turn on the microwave. Finally, put the cup on the table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_kitchen_counter_132(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_bowl_2097_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_microwave_close(milk:item, microwave:item):
    # Function to check if milk is close to the microwave
    symbol is_close=exists room: item : is_microwave(microwave) and close(milk, microwave)
    return is_close

behavior heat_milk(milk:item, microwave:item):
    body:
        if is_microwave_close(milk, microwave):
            # If milk and microwave are close, put milk inside microwave and switch it on
            achieve inside(milk, microwave)
            achieve_once is_on(microwave)
        else:
            # Move milk closer to the microwave
            move(milk)
            heat_milk(milk, microwave)

behavior prepare_hot_milk():
    body:
        # Heat the milk using the microwave
        bind microwave: item where:
            is_microwave(microwave)
        bind milk: item where:
            is_milk(milk) and close_char(char, milk)
        heat_milk(milk, microwave)

behavior put_on_table(item:item, table:item):
    body:
        achieve on(item, table)

behavior __goal__():
    body:
        # Bind the instances required for actions
        bind table: item where:
            is_table(table) and id[table] == 193
        # Prepare hot milk
        prepare_hot_milk()
        # Place hot milk on the coffee table
        bind milk: item where:
            is_milk(milk) and on(milk, microwave)
        put_on_table(milk, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function heat_milk not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2102_around_kitchen_counter_132(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_plate_2105_around_kitchen_counter_132(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#goal_representation
 
def is_microwave_close(milk:item, microwave:item):
    # Function to check if milk is close to the microwave
    symbol is_close=exists room: item : is_microwave(microwave) and close(milk, microwave)
    return is_close

behavior heat_food(milk:item, microwave:item):  # Replaced undefined category heat_milk with heat_food
    body:
        if is_microwave_close(milk, microwave):
            # If milk and microwave are close, put milk inside microwave and switch it on
            achieve inside(milk, microwave)
            achieve_once is_on(microwave)
        else:
            # Move milk closer to the microwave
            move(milk)
            heat_food(milk, microwave)

behavior prepare_hot_milk():
    body:
        # Heat the milk using the microwave
        bind microwave: item where:
            is_microwave(microwave)
        bind milk: item where:
            is_milk(milk) and close_char(char, milk)
        heat_food(milk, microwave)  # Adjusted to call the updated behavior

behavior put_on_table(item:item, table:item):
    body:
        achieve on(item, table)

behavior __goal__():
    body:
        # Bind the instances required for actions
        bind table: item where:
            is_table(table) and id[table] == 193
        # Prepare hot milk
        prepare_hot_milk()
        # Place hot milk on the coffee table
        bind milk: item where:
            is_milk(milk) and on(milk, microwave)
        put_on_table(milk, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function heat_food not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_juice_2034_around_kitchen_counter_132(juice:item):
    goal: not unknown(juice)
    body:
        assert is_juice(juice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(juice,kitchen_counter_instance)
        else:
            exp(juice,kitchen_counter_instance)
    eff:
        unknown[juice]=False
        close[juice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,juice]=True
    

behavior find_bowl_2095_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#goal_representation
 
def is_microwave_close(milk:item, microwave:item):
    # Function to check if milk is close to the microwave
    symbol is_close=exists room: item : is_microwave(microwave) and close(milk, microwave)
    return is_close

behavior heat_food(milk:item, microwave:item):  # Replaced undefined category heat_milk with heat_food
    body:
        if is_microwave_close(milk, microwave):
            # If milk and microwave are close, put milk inside microwave and switch it on
            achieve inside(milk, microwave)
            achieve_once is_on(microwave)
        else:
            # Move milk closer to the microwave
            move(milk)
            heat_food(milk, microwave)

behavior prepare_hot_milk():
    body:
        # Heat the milk using the microwave
        bind microwave: item where:
            is_microwave(microwave)
        bind milk: item where:
            is_milk(milk) and close_char(char, milk)
        heat_food(milk, microwave)  # Adjusted to call the updated behavior

behavior put_on_table(item:item, table:item):
    body:
        achieve on(item, table)

behavior __goal__():
    body:
        # Bind the instances required for actions
        bind table: item where:
            is_table(table) and id[table] == 193
        # Prepare hot milk
        prepare_hot_milk()
        # Place hot milk on the coffee table
        bind milk: item where:
            is_milk(milk) and on(milk, microwave)
        put_on_table(milk, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_orchid_117(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind orchid_instance:item where:
            is_orchid(orchid_instance) and id[orchid_instance]==117
        achieve close_char(char,orchid_instance)
        if can_open(orchid_instance):
            achieve_once open(orchid_instance)
            exp(bowl,orchid_instance)
        else:
            exp(bowl,orchid_instance)
    eff:
        unknown[bowl]=False
        close[bowl,orchid_instance]=True
        close[orchid_instance,bowl]=True
    

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_oil_2005_around_oil_2005(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2005
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_hot_milk(milk:item):
    # Function to check if the milk is hot
    symbol hot_milk=exists m: item : is_milk(m) and on(m, microwave) and is_on(microwave)
    return hot_milk

behavior heat_milk_in_microwave(milk:item, microwave:item):
    body:
        achieve inside(milk, microwave)
        # Place the milk inside the microwave

        achieve_once is_on(microwave)
        # Heat the milk by turning on the microwave

        if is_hot_milk(milk):
            achieve_once is_off(microwave)
            # Turn off the microwave after the milk is hot

behavior place_cup_on_table(milk:item, table:item):
    body:
        achieve on(milk, table)
        # Place the cup of hot milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select microwave

        bind table: item where:
            is_table(table) and id[table]==193
        # Select the table in the home office

        heat_milk_in_microwave(milk, microwave)
        place_cup_on_table(milk, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: microwave; available variables: [Variable<milk: item>, Variable<m: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_54_around_pot_54(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==54
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_bowl_2097_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#goal_representation
 
def is_hot_milk(milk:item, microwave:item):
    # Function to check if the milk is hot
    symbol hot_milk=exists m: item : is_milk(m) and on(m, microwave) and is_on(microwave)
    return hot_milk

behavior heat_milk_in_microwave(milk:item, microwave:item):
    body:
        achieve inside(milk, microwave)
        # Place the milk inside the microwave

        achieve_once is_on(microwave)
        # Heat the milk by turning on the microwave

        if is_hot_milk(milk, microwave):
            achieve_once is_off(microwave)
            # Turn off the microwave after the milk is hot

behavior place_cup_on_table(milk:item, table:item):
    body:
        achieve on(milk, table)
        # Place the cup of hot milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select microwave

        bind table: item where:
            is_table(table) and id[table]==193
        # Select the table in the home office

        heat_milk_in_microwave(milk, microwave)
        place_cup_on_table(milk, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_hot_milk(milk:item, microwave:item):
    # Function to check if the milk is hot
    symbol hot_milk=exists m: item : is_milk(m) and on(m, microwave) and is_on(microwave)
    return hot_milk

behavior heat_milk_in_microwave(milk:item, microwave:item):
    body:
        achieve inside(milk, microwave)
        # Place the milk inside the microwave

        achieve_once is_on(microwave)
        # Heat the milk by turning on the microwave

        if is_hot_milk(milk, microwave):
            achieve_once is_off(microwave)
            # Turn off the microwave after the milk is hot

behavior place_cup_on_table(milk:item, table:item):
    body:
        achieve on(milk, table)
        # Place the cup of hot milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select microwave

        bind table: item where:
            is_table(table) and id[table]==193
        # Select the table in the home office

        heat_milk_in_microwave(milk, microwave)
        place_cup_on_table(milk, table)

##############################
From agent.py-> find a plan in act()
walk_executor(microwave_149)open_executor(microwave_149)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(microwave_149)putin_executor(milk_2074, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)switchoff_executor(microwave_149)open_executor(microwave_149)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(table_193)put_executor(milk_2074, table_193)
##############################
From agent.py
walk_executor(microwave_149)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close microwave_149. Robot is no longer inside home_office_161.Robot is no longer close table_193.Robot is no longer close milk_2074.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: walk_executor(milk_2074);grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);walk_executor(microwave_149);open_executor(microwave_149);walk_executor(cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 12
##############################
From agent.py
open_executor(microwave_149)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close microwave_149. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: walk_executor(milk_2074);grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 9
##############################
From agent.py
walk_executor(milk_2074)
Robot is inside dining_room_1. Robot is close table_193. Robot is close milk_2074. Robot is no longer close kitchen_counter_132.Robot is no longer close microwave_149.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 8
##############################
From agent.py
grab_executor(milk_2074)
Robot is inside dining_room_1. Robot is close table_193. Robot is close milk_2074. Grabbing milk_2074 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 7
##############################
From agent.py
walk_executor(microwave_149)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close kitchen_counter_132. Robot is close microwave_149. Robot is no longer close table_193.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 7
##############################
From agent.py
putin_executor(milk_2074, microwave_149)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close kitchen_counter_132. Robot is close microwave_149. milk_2074 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 8
##############################
From agent.py
close_executor(microwave_149)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close kitchen_counter_132. Robot is close microwave_149. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: open_executor(microwave_149);grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 9
##############################
From agent.py
switchon_executor(microwave_149)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close kitchen_counter_132. Robot is close microwave_149. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: switchoff_executor(microwave_149);open_executor(microwave_149);grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 10
##############################
From agent.py
switchoff_executor(microwave_149)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close kitchen_counter_132. Robot is close microwave_149. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: open_executor(microwave_149);grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 9
##############################
From agent.py
open_executor(microwave_149)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close kitchen_counter_132. Robot is close microwave_149. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 8
##############################
From agent.py
walk_executor(milk_2074)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close microwave_149. Robot is no longer close kitchen_counter_132.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 8
##############################
From agent.py
grab_executor(milk_2074)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close microwave_149. Grabbing milk_2074 by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 7
##############################
From agent.py
walk_executor(table_193)
Robot is inside home_office_161. Robot is close milk_2074. Robot is close table_193. Robot is no longer inside dining_room_1.Robot is no longer close microwave_149.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 7
##############################
From agent.py
put_executor(milk_2074, table_193)
Robot is inside home_office_161. Robot is close milk_2074. Robot is close table_193. milk_2074 released by right hand. 
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 8
##############################
From agent.py
Human Instruction: You need to place the milk in a cup and ensure the cup is placed on the coffee table in the home office. Currently, the milk is placed on the table in the home office, but it was not mentioned that it was poured into a cup first.

Human Guidance: Find the milk in the fridge, put it in a cup, put the cup in the microwave. Turn on the microwave. Finally, put the cup on the table in the home office.
The actions you have taken:
Action 1: Walk to bookshelf_372.
Action 2: Open bookshelf_372.
Action 3: look for book_2091 around bookshelf_372.
Action 4: Walk to bookshelf_137.
Action 5: Open bookshelf_137.
Action 6: look for book_2091 around bookshelf_137.
Action 7: Walk to bookshelf_188.
Action 8: Open bookshelf_188.
Action 9: look for book_2091 around bookshelf_188.
Action 10: Walk to book_2092.
Action 11: Open book_2092.
Action 12: look for book_2091 around book_2092.
Action 13: Walk to bookshelf_189.
Action 14: Open bookshelf_189.
Action 15: look for book_2091 around bookshelf_189.
Action 16: Walk to bookshelf_260.
Action 17: Open bookshelf_260.
Action 18: look for book_2091 around bookshelf_260.
Action 19: Walk to bookshelf_136.
Action 20: look for book_2091 around bookshelf_136.
Action 21: Walk to book_2091.
Action 22: Grab book_2091.
Action 23: Walk to table_123.
Action 24: Put book_2091 on table_123.
Action 25: Grab book_2091.
Action 26: Walk to table_193.
Action 27: Put book_2091 on table_193.
Action 28: Walk to kitchen_counter_128.
Action 29: look for milk_2074 around kitchen_counter_128.
Action 30: Walk to cupboard_131.
Action 31: Open cupboard_131.
Action 32: look for milk_2074 around cupboard_131.
Action 33: Walk to cupboard_130.
Action 34: look for milk_2074 around cupboard_130.
Action 35: Walk to freezer_140.
Action 36: Switch off freezer_140.
Action 37: Open freezer_140.
Action 38: look for milk_2074 around freezer_140.
Action 39: Grab milk_2074.
Action 40: Walk to table_193.
Action 41: Put milk_2074 on table_193.
Action 42: Walk to microwave_149.
Action 43: Open microwave_149.
Action 44: Walk to milk_2074.
Action 45: Grab milk_2074.
Action 46: Walk to microwave_149.
Action 47: Put milk_2074 into microwave_149.
Action 48: Close microwave_149.
Action 49: Switch on microwave_149.
Action 50: Switch off microwave_149.
Action 51: Open microwave_149.
Action 52: Walk to milk_2074.
Action 53: Grab milk_2074.
Action 54: Walk to table_193.
Action 55: Put milk_2074 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_wallshelf_191(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind milk: item where:
            is_milk(milk) and not inside(milk, cup)
        # Select milk not in a cup

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        achieve_once inhand(milk)
        achieve_once inside(milk, cup)
        # Pour the milk into the cup
        
        achieve_once inhand(cup)
        achieve inside(cup, microwave)
        # Place the cup inside the microwave

        achieve_once closed(microwave)
        achieve_once is_on(microwave)
        # Heat the milk in the microwave

        achieve_once is_off(microwave)
        achieve_once open(microwave)
        achieve_once inhand(cup)
        # After heating, turn off the microwave and take the cup
        
behavior place_on_coffee_table(cup:item, table:item):
    body:
        achieve on(cup, table) 
        # Place the cup on the coffee table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)
        # Select the coffee table in the home office

        prepare_hot_milk()
        bind cup: item where:
            is_cup(cup) and inhand(cup)
        # Select the cup with the heated milk

        place_on_coffee_table(cup, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_bowl_2097_around_wallshelf_191(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#goal_representation

behavior prepare_hot_milk():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind milk: item where:
            is_milk(milk) and not inside(milk, cup)
        # Select milk not in a cup

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        achieve_once inhand(milk)
        achieve_once inside(milk, cup)
        # Pour the milk into the cup
        
        achieve_once inhand(cup)
        achieve inside(cup, microwave)
        # Place the cup inside the microwave

        achieve_once closed(microwave)
        achieve_once is_on(microwave)
        # Heat the milk in the microwave

        achieve_once is_off(microwave)
        achieve_once open(microwave)
        achieve_once inhand(cup)
        # After heating, turn off the microwave and take the cup
        
behavior place_on_coffee_table(cup:item, table:item):
    body:
        achieve on(cup, table) 
        # Place the cup on the coffee table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)
        # Select the coffee table in the home office

        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office

        prepare_hot_milk()
        bind cup: item where:
            is_cup(cup) and inhand(cup)
        # Select the cup with the heated milk

        place_on_coffee_table(cup, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_wallshelf_190(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_sauce_2101_around_kitchen_counter_129(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(sauce,kitchen_counter_instance)
        else:
            exp(sauce,kitchen_counter_instance)
    eff:
        unknown[sauce]=False
        close[sauce,kitchen_counter_instance]=True
        close[kitchen_counter_instance,sauce]=True
    

behavior find_soap_2037_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#goal_representation
 
behavior prepare_hot_milk():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind milk: item where:
            is_milk(milk) and not inside(milk, cup)
        # Select milk not in a cup

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        achieve_once inhand(milk)
        achieve_once inside(milk, cup)
        # Pour the milk into the cup
        
        achieve_once inhand(cup)
        achieve inside(cup, microwave)
        # Place the cup inside the microwave

        achieve_once closed(microwave)
        achieve_once is_on(microwave)
        # Heat the milk in the microwave

        achieve_once is_off(microwave)
        achieve_once open(microwave)
        achieve_once inhand(cup)
        # After heating, turn off the microwave and take the cup

behavior place_on_coffee_table(cup:item, table:item):
    body:
        achieve on(cup, table) 
        # Place the cup on the coffee table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office
        
        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)
        # Select the coffee table in the home office

        prepare_hot_milk()
        bind cup: item where:
            is_cup(cup) and inhand(cup)
        # Select the cup with the heated milk

        place_on_coffee_table(cup, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_wallshelf_190(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_in_cup(milk:item, cup:item):
    # Check if the milk is inside the cup
    symbol milk_in_cup=inside(milk, cup)
    return milk_in_cup

behavior pour_milk_in_cup(milk:item, cup:item):
    body:
        achieve inside(milk, cup) # Pour milk into the cup

behavior heat_cup_in_microwave(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave) # Place the cup inside the microwave
        achieve closed(microwave) # Close the microwave door
        achieve is_on(microwave) # Turn on the microwave
        achieve is_off(microwave) # Turn off the microwave

behavior put_cup_on_table(cup:item, table:item):
    body:
        achieve on(cup, table) # Place the cup on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        bind table: item where:
            is_table(table) and id[table]==193
        # Select the coffee table in the home office
        if not is_milk_in_cup(milk, cup):
            pour_milk_in_cup(milk, cup)
        heat_cup_in_microwave(cup, microwave)
        put_cup_on_table(cup, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_wallshelf_301(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk_and_place_on_table(milk: item, microwave: item, table: item):
    body:
        achieve_once inhand(milk) # Grab the milk
        achieve inside(milk, microwave) # Place the milk inside the microwave
        achieve closed(microwave) # Close the microwave door
        achieve is_on(microwave) # Turn on the microwave
        achieve_once is_off(microwave) # Turn off the microwave after heating
        achieve_once inhand(milk) # Grab the heated milk
        achieve on(milk, table) # Put the hot milk on the coffee table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave
        
        bind table: item where:
            is_table(table) and 
            exists home_office: item : is_home_office(home_office) and inside(table, home_office)
        # Select a table in the home office
        
        prepare_hot_milk_and_place_on_table(milk, microwave, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n            ') at line 6172, column 33.
Expected one of: 
	* LONG_STRING
	* OCT_NUMBER
	* LPAR
	* VARNAME
	* TRUE
	* NOT
	* BIN_NUMBER
	* DEC_NUMBER
	* STRING
	* COLON
	* ELLIPSIS
	* FALSE
	* HEX_NUMBER
	* TILDE
	* MINUS
	* LSQB
	* NONE
	* DO
	* FLOAT_NUMBER
	* IMAG_NUMBER
	* PLUS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2095_around_bowl_2095(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2095
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(bowl,bowl_instance)
        else:
            exp(bowl,bowl_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bowl_instance]=True
        close[bowl_instance,bowl]=True
    

behavior find_bowl_2097_around_cup_2088(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(bowl,cup_instance)
        else:
            exp(bowl,cup_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cup_instance]=True
        close[cup_instance,bowl]=True
    

#goal_representation

behavior move_milk_to_microwave(milk: item, microwave: item):
    body:
        achieve_once inhand(milk) # Grab the milk
        achieve inside(milk, microwave) # Place the milk inside the microwave

behavior start_microwave(microwave: item):
    body:
        achieve closed(microwave) # Close the microwave door
        achieve is_on(microwave) # Turn on the microwave
        achieve_once is_off(microwave) # Turn off the microwave after heating

behavior move_hot_milk_to_table(milk: item, table: item):
    body:
        achieve_once inhand(milk) # Grab the heated milk
        achieve on(milk, table) # Put the hot milk on the coffee table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) # Select the milk item
        
        bind microwave: item where:
            is_microwave(microwave) # Select the microwave
        
        bind table: item where:
            is_table(table) and 
            exists home_office: item : is_home_office(home_office) and inside(table, home_office) # Select a table in the home office
        
        move_milk_to_microwave(milk, microwave) # Move milk to microwave
        start_microwave(microwave) # Start the microwave
        move_hot_milk_to_table(milk, table) # Move hot milk to the table

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n            ') at line 6194, column 33.
Expected one of: 
	* LONG_STRING
	* OCT_NUMBER
	* LPAR
	* VARNAME
	* TRUE
	* NOT
	* BIN_NUMBER
	* DEC_NUMBER
	* STRING
	* COLON
	* ELLIPSIS
	* FALSE
	* HEX_NUMBER
	* TILDE
	* MINUS
	* LSQB
	* NONE
	* DO
	* FLOAT_NUMBER
	* IMAG_NUMBER
	* PLUS

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_kitchen_counter_129(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_bowl_2097_around_wallshelf_190(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#goal_representation
 
behavior move_milk_to_microwave(milk: item, microwave: item):
    body:
        achieve inside(milk, microwave) # Place the milk inside the microwave
        
behavior move_milk_to_cup(milk: item, cup: item):
    body:
        achieve inside(milk, cup) # Pour milk into the cup

behavior start_microwave(microwave: item):
    body:
        achieve closed(microwave) # Close the microwave door
        achieve is_on(microwave) # Turn on the microwave
        achieve_once is_off(microwave) # Turn off the microwave after heating

behavior move_hot_milk_to_table(cup: item, table: item):
    body:
        achieve on(cup, table) # Put the hot milk cup on the coffee table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) # Select the milk item
        
        bind microwave: item where:
            is_microwave(microwave) # Select the microwave
        
        bind table: item where:
            is_table(table) and 
            exists home_office: item : is_home_office(home_office) and inside(table, home_office) # Select a table in the home office

        bind cup: item where:
            is_cup(cup) # Select a cup

        move_milk_to_cup(milk, cup) # Move milk to the cup
        move_milk_to_microwave(cup, microwave) # Move milk cup to microwave
        start_microwave(microwave) # Start the microwave
        move_hot_milk_to_table(cup, table) # Move hot milk cup to the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_wallshelf_190(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk(milk:item, microwave:item):
    body:
        achieve_once inside(milk, microwave)
        achieve closed(microwave)
        achieve is_on(microwave)
        achieve_once not is_on(microwave)
        # Heat the milk in the microwave and turn it off

behavior pour_milk_in_cup(milk:item, cup:item):
    body:
        achieve inside(milk, cup)
        # Pour the milk into the cup

behavior place_on_table(obj:item, table:item):
    body:
        achieve on(obj, table)
        # Place the object on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave
        
        bind table: item where:
            is_table(table) and id[table]==193
        # Select the coffee table with ID 193
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        prepare_hot_milk(milk, microwave)
        pour_milk_in_cup(milk, cup)
        place_on_table(cup, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_bowl_2095(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2095
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(bowl,bowl_instance)
        else:
            exp(bowl,bowl_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bowl_instance]=True
        close[bowl_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_milk_in_cup(milk:item, cup:item):
    body:
        achieve inside(milk, cup)
        # Pour the milk into the cup

behavior heat_milk(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave)
        # Place the cup with milk into the microwave
        achieve closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave
        achieve is_off(microwave)
        # Turn off the microwave after heating
        achieve open(microwave)
        # Open the microwave door

behavior put_cup_on_table(cup:item, table:item):
    body:
        achieve on(cup, table)
        # Place the cup on the coffee table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind milk: item where:
            is_milk(milk)
        # Select milk
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table]==193
        # Select the coffee table with the ID 193 in the home office
        
        put_milk_in_cup(milk, cup)
        heat_milk(cup, microwave)
        put_cup_on_table(cup, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_wallshelf_190(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def is_hot_milk(milk:item):
    symbol is_hot=exists microwave: item : is_microwave(microwave) and inside(milk, microwave) and is_on(microwave)
    return is_hot

behavior heat_milk(milk:item, microwave:item):
    body:
        achieve inside(milk, microwave) # Put the milk inside the microwave
        achieve closed(microwave) # Close the microwave door
        achieve is_on(microwave) # Turn on the microwave to heat the milk

behavior pour_milk_into_cup(milk:item, cup:item):
    body:
        achieve inside(milk, cup) # Pour milk into the cup

behavior place_on_table(cup:item, table:item):
    body:
        achieve on(cup, table) # Put the cup of milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind microwave: item where:
            is_microwave(microwave)
        bind cup: item where:
            is_cup(cup)
        bind table: item where:
            is_table(table) and is_home_office(table) and surfaces(table)
        
        if not is_hot_milk(milk):
            heat_milk(milk, microwave) # Heat the milk if its not already hot

        pour_milk_into_cup(milk, cup) # Pour the milk into a cup
        place_on_table(cup, table) # Place the cup on the table in the home office

#goal_representation_end

##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 8
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k2
missed actions: grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);grab_executor(cup_2087);walk_executor(microwave_149);putin_executor(cup_2087, microwave_149);close_executor(microwave_149);switchon_executor(microwave_149);
missed action num: 8
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_a_reading_space/g4.txt
Checking k3
missed actions: grab_executor(milk_2074);walk_executor(cup_2087);putin_executor(milk_2074, cup_2087);grab_executor(cup_2087);walk_executor(table_193);put_executor(cup_2087, table_193);
missed action num: 6
##############################
