From agent.py
Reset goals: The sub-goals are: 
['1. Find and crack open the eggs into a bowl, then beat them.', '2. Heat oil in a pan and pour the beaten eggs, then scramble them.', '3. Add rice to the pan and stir fry with the eggs until heated through.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_cupboard_131(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_egg,cupboard_instance)
        else:
            exp(food_egg,cupboard_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,cupboard_instance]=True
        close[cupboard_instance,food_egg]=True
    

behavior find_bowl_2096_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_bowl_present(bowl: item):
    # Function to check if a bowl is present
    symbol present = exists b: item : is_bowl(b) and inside(b, kitchen_counter)
    return present

behavior find_and_prepare_bowl(bowl: item):
    body:
        if is_bowl_present(bowl):
            # If a bowl is known to be present, ensure the character is near it
            achieve close_char(char, bowl)
        else:
            # Observe all unvisited bowls to locate one
            foreach item: item:
                if is_bowl(item) and not visited(item):
                    observe(item, "Locate a bowl for egg preparation")

behavior find_egg(egg: item):
    body:
        if visited(egg):
            # If the egg is already found, ensure character is close to it
            achieve close_char(char, egg)
        else:
            # If egg is not found, observe all unvisited items that could be the egg
            foreach item: item:
                if is_food_egg(item) and not visited(item):
                    observe(item, "Locate the egg")

behavior crack_egg_in_bowl(egg: item, bowl: item):
    body:
        achieve inside(egg, bowl)
        # Crack the egg into the bowl

behavior beat_egg_in_bowl(bowl: item):
    body:
        # Beat the eggs in the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and is_bowl_present(bowl)
        # Select the bowl for preparation

        bind egg: item where:
            is_food_egg(egg)
        find_egg(egg) 
        crack_egg_in_bowl(egg, bowl)

        beat_egg_in_bowl(bowl)


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_DEDENT', '') at line 5897, column 10.
Expected one of: 
	* _INDENT

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2053_around_cupboard_131(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_egg,cupboard_instance)
        else:
            exp(food_egg,cupboard_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,cupboard_instance]=True
        close[cupboard_instance,food_egg]=True
    

behavior find_bowl_2095_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#goal_representation
 
def is_bowl_present(bowl: item):
    # Function to check if a bowl is present
    symbol present = exists b: item : is_bowl(b) and inside(b, kitchen_counter)
    return present

behavior find_and_prepare_bowl(bowl: item):
    body:
        if is_bowl_present(bowl):
            # If a bowl is known to be present, ensure the character is near it
            achieve close_char(char, bowl)
        else:
            # Observe all unvisited bowls to locate one
            foreach item: item:
                if is_bowl(item) and not visited(item):
                    observe(item, "Locate a bowl for egg preparation")

behavior find_egg(egg: item):
    body:
        if visited(egg):
            # If the egg is already found, ensure character is close to it
            achieve close_char(char, egg)
        else:
            # If egg is not found, observe all unvisited items that could be the egg
            foreach item: item:
                if is_food_egg(item) and not visited(item):
                    observe(item, "Locate the egg")

behavior crack_egg_in_bowl(egg: item, bowl: item):
    body:
        achieve inside(egg, bowl)
        # Crack the egg into the bowl

behavior beat_egg_in_bowl(bowl: item):
    body:
        # Beat the eggs in the bowl
        achieve clean(bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and is_bowl_present(bowl)
        # Select the bowl for preparation

        bind egg: item where:
            is_food_egg(egg)
        find_egg(egg) 
        crack_egg_in_bowl(egg, bowl)

        beat_egg_in_bowl(bowl)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: kitchen_counter; available variables: [Variable<bowl: item>, Variable<b: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2053_around_kitchen_counter_132(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_bowl_2095_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
def is_bowl_present(bowl: item, kitchen_counter: item):
    # Function to check if a bowl is present
    symbol present = exists b: item : is_bowl(b) and inside(b, kitchen_counter)
    return present

behavior find_and_prepare_bowl(bowl: item, kitchen_counter: item):
    body:
        if is_bowl_present(bowl, kitchen_counter):
            # If a bowl is known to be present, ensure the character is near it
            achieve close_char(char, bowl)
        else:
            # Observe all unvisited bowls to locate one
            foreach item: item:
                if is_bowl(item) and not visited(item):
                    observe(item, "Locate a bowl for egg preparation")

behavior find_egg(egg: item):
    body:
        if visited(egg):
            # If the egg is already found, ensure character is close to it
            achieve close_char(char, egg)
        else:
            # If egg is not found, observe all unvisited items that could be the egg
            foreach item: item:
                if is_food_egg(item) and not visited(item):
                    observe(item, "Locate the egg")

behavior crack_egg_in_bowl(egg: item, bowl: item):
    body:
        achieve inside(egg, bowl)
        # Crack the egg into the bowl

behavior beat_egg_in_bowl(bowl: item):
    body:
        # Beat the eggs in the bowl
        achieve clean(bowl)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        bind bowl: item where:
            is_bowl(bowl) and is_bowl_present(bowl, kitchen_counter)
        # Select the bowl for preparation

        bind egg: item where:
            is_food_egg(egg)
        find_egg(egg) 
        crack_egg_in_bowl(egg, bowl)

        beat_egg_in_bowl(bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_cupboard_131(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_egg,cupboard_instance)
        else:
            exp(food_egg,cupboard_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,cupboard_instance]=True
        close[cupboard_instance,food_egg]=True
    

behavior find_bowl_2096_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_egg(egg:item):
    body:
        if visited(egg):
            achieve close_char(char, egg)
        else:
            observe(egg, "Locate the egg")
            achieve close_char(char, egg)

behavior crack_and_beat_egg(egg:item, bowl:item):
    body:
        achieve inside(egg, bowl)
        # Crack the egg into the bowl
        achieve open(bowl)
        # Assume beating involves opening the bowl to mix

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        find_egg(egg)

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to beat the egg into

        crack_and_beat_egg(egg, bowl)
        # Crack and beat the egg into the bowl

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find and crack open the eggs into a bowl, then beat them." ?
Answer: The initial plan does not align with the necessary steps to achieve the goal.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Gather the rice and eggs needed for the dish.', '2. Cook the rice if it is not yet cooked.', '3. Fry the eggs.', '4. Mix the cooked rice and fried eggs in a pan to make fried rice with egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_cupboard_131(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_egg,cupboard_instance)
        else:
            exp(food_egg,cupboard_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,cupboard_instance]=True
        close[cupboard_instance,food_egg]=True
    

behavior find_food_rice_2067_around_kitchen_counter_132(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
behavior gather_rice_and_eggs(rice: item, eggs: item):
    body:
        achieve close_char(char, rice)
        # Ensure the character is close to the rice

        achieve close_char(char, eggs)
        # Ensure the character is close to the eggs

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        gather_rice_and_eggs(rice, eggs)
        # Gather the rice and eggs needed for the dish
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_cupboard_131(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_egg,cupboard_instance)
        else:
            exp(food_egg,cupboard_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,cupboard_instance]=True
        close[cupboard_instance,food_egg]=True
    

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def gathers_ingredients(item: item):
    # Function to check if the item can be identified as rice or egg
    return is_food_rice(item) or is_food_egg(item)

behavior gather_ingredients(item: item):
    body:
        if is_food_rice(item) or is_food_egg(item):
            achieve close_char(char, item)
        else:
            foreach item: item:
                if gathers_ingredients(item) and not visited(item):
                    observe(item, "Locate the rice and egg needed for fried rice")

behavior __goal__():
    body:
        foreach item: item:
            gather_ingredients(item)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable item already exists.
##############################
