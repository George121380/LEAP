From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind water: item where:
            is_faucet(water) or has_water(water)
        bind coffee_ground: item where:
            is_coffee_ground(coffee_ground)
        bind filter: item where:
            is_coffee_filter(filter)
        bind cup: item where:
            is_cup(cup)
        achieve clean(cup)
        achieve clean(coffee_maker)
        achieve clean(filter)
        achieve_once has_water(coffee_maker)
        achieve_once has(coffee_ground, filter)
        achieve is_on(coffee_maker)
        achieve_once inside(coffee, cup)
        achieve clean(coffee_maker)
        achieve is_off(coffee_maker)
        if drinkable(cup):
            achieve inside(cup, coffee_maker)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_coffee_ground not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2064_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#goal_representation
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind water: item where:
            is_faucet(water) or has_water(water)
        bind coffee_ground: item where:
            is_food_coffee(coffee_ground)
        bind filter: item where:
            is_coffee_filter(filter)
        bind cup: item where:
            is_cup(cup)
        achieve clean(cup)
        achieve clean(coffee_maker)
        achieve clean(filter)
        achieve_once has_water(coffee_maker)
        achieve_once has(coffee_ground, filter)
        achieve is_on(coffee_maker)
        achieve_once inside(coffee, cup)
        achieve clean(coffee_maker)
        achieve is_off(coffee_maker)
        if drinkable(cup):
            achieve inside(cup, coffee_maker)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_food_coffee not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2063_around_coffee_table_2068(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cup,coffee_table_instance)
        else:
            exp(cup,coffee_table_instance)
    eff:
        unknown[cup]=False
        close[cup,coffee_table_instance]=True
        close[coffee_table_instance,cup]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#goal_representation
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind water: item where:
            is_faucet(water) or has_water(water)
        bind coffee_ground: item where:
            is_food_food(coffee_ground)
        bind filter: item where:
            is_coffee_filter(filter)
        bind cup: item where:
            is_cup(cup)
        achieve clean(cup)
        achieve clean(coffee_maker)
        achieve clean(filter)
        achieve_once has_water(coffee_maker)
        achieve_once has(coffee_ground, filter)
        achieve is_on(coffee_maker)
        achieve_once inside(coffee, cup)
        achieve clean(coffee_maker)
        achieve is_off(coffee_maker)
        if drinkable(cup):
            achieve inside(cup, coffee_maker)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2022_around_coffe_maker_290(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(food_food,coffe_maker_instance)
        else:
            exp(food_food,coffe_maker_instance)
    eff:
        unknown[food_food]=False
        close[food_food,coffe_maker_instance]=True
        close[coffe_maker_instance,food_food]=True
    

behavior find_cup_2063_around_coffee_table_2068(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cup,coffee_table_instance)
        else:
            exp(cup,coffee_table_instance)
    eff:
        unknown[cup]=False
        close[cup,coffee_table_instance]=True
        close[coffee_table_instance,cup]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

behavior add_water_to_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve_once has_water(coffee_maker)
        achieve has_water(cup)

behavior add_coffee_to_filter(coffee_filter:item, coffee:item):
    body:
        achieve_once inside(coffee, coffee_filter)

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)
        
behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve_once close(coffee_maker, cup)
        achieve_once drinkable(cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        
        bind cup: item where:
            is_cup(cup)
        
        bind coffee: item where:
            is_food_food(coffee)
        
        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        
        add_water_to_coffee_maker(coffee_maker, cup)
        add_coffee_to_filter(coffee_filter, coffee)
        turn_on_coffee_maker(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_coffee_table_2068(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cup,coffee_table_instance)
        else:
            exp(cup,coffee_table_instance)
    eff:
        unknown[cup]=False
        close[cup,coffee_table_instance]=True
        close[coffee_table_instance,cup]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water(coffee_maker:item):
    body:
        achieve_once has_water(coffee_maker)

behavior plug_in_device(coffee_maker:item, socket:item):
    body:
        achieve_once plugged(coffee_maker)
        achieve_once close(coffee_maker, socket)

behavior turn_on_device(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)

behavior place_coffee_cup(cup:item, coffee_maker:item):
    body:
        achieve_once on(cup, coffee_maker)

behavior __goal__():
    body:
        # Step 1: Bind the coffee maker
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        # Step 2: Bind a cup to use
        bind coffee_cup: item where:
            is_cup(coffee_cup)

        # Step 3: Bind a power socket
        bind power_socket: item where:
            is_powersocket(power_socket)

        # Step 4: Plug in the coffee maker and provide water
        plug_in_device(coffee_maker, power_socket)
        add_water(coffee_maker)

        # Step 5: Place the cup under the coffee maker
        place_coffee_cup(coffee_cup, coffee_maker)

        # Step 6: Turn on the coffee maker and brew the coffee
        turn_on_device(coffee_maker)

#goal_representation_end

##############################
