From agent.py
Reset goals: The sub-goals are: 
['Fried a steak. Then cut it and put it on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_steak_2080_around_kitchen_counter_123(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_steak,kitchen_counter_instance)
        else:
            exp(food_steak,kitchen_counter_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_steak]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_plate_2152_around_kitchen_counter_123(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_steak(steak:item, pan:item):
    body:
        achieve_once inside(steak, pan)
        achieve_once is_on(pan)

behavior cut_steak(steak:item, knife:item):
    body:
        achieve cut(steak)

behavior place_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)

        bind pan: item where:
            is_fryingpan(pan)

        bind knife: item where:
            is_knife(knife)

        bind plate: item where:
            is_plate(plate)

        fry_steak(steak, pan)
        cut_steak(steak, knife)
        place_on_plate(steak, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_steak_2080_around_kitchen_counter_123(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_steak,kitchen_counter_instance)
        else:
            exp(food_steak,kitchen_counter_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_steak]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_123(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_plate_2152_around_kitchen_counter_123(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_steak(steak:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(steak, fryingpan)
        # Place the steak inside the frying pan
        achieve_once inside(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Begin frying the steak by turning on the stove

behavior cut_steak(steak:item, cutting_board:item):
    body:
        achieve_once on(steak, cutting_board)
        # Place the fried steak on the cutting board
        achieve_once cut(steak)
        # Cut the steak

behavior place_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)
        # Place the cut steak on the plate

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind plate: item where:
            is_plate(plate)
        fry_steak(steak, fryingpan, stove)
        cut_steak(steak, cutting_board)
        place_on_plate(steak, plate)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fry_steak(steak:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(steak, fryingpan)
        # Place the steak inside the frying pan
        achieve_once inside(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Begin frying the steak by turning on the stove

behavior cut_steak(steak:item, cutting_board:item):
    body:
        achieve_once on(steak, cutting_board)
        # Place the fried steak on the cutting board
        achieve_once cut(steak)
        # Cut the steak

behavior place_on_plate(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)
        # Place the cut steak on the plate

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind plate: item where:
            is_plate(plate)
        fry_steak(steak, fryingpan, stove)
        cut_steak(steak, cutting_board)
        place_on_plate(steak, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(fryingpan_2154, kitchen_counter_123)exp(food_steak_2080, kitchen_counter_123)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)putin_executor(food_steak_2080, fryingpan_2154)walk_executor(stove_2135)open_executor(stove_2135)walk_executor(fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)putin_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(cutting_board_2123)put_executor(food_steak_2080, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_steak_2080)cut_executor(food_steak_2080)walk_executor(kitchen_counter_123)exp(plate_2152, kitchen_counter_123)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(plate_2152)put_executor(food_steak_2080, plate_2152)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_123)
Fail to find fryingpan_2154 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_steak_2080, fridge_126)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)putin_executor(food_steak_2080, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)putin_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(cutting_board_2123)put_executor(food_steak_2080, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_steak_2080)cut_executor(food_steak_2080)walk_executor(cupboard_117)exp(plate_2152, cupboard_117)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(plate_2152)put_executor(food_steak_2080, plate_2152)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(fryingpan_2154, stove_2135)
Fail to find fryingpan_2154 around stove_2135. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Fried a steak. Then cut it and put it on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_steak_2080_around_fridge_126(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_check_2026_around_plate_2152(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(check,plate_instance)
        else:
            exp(check,plate_instance)
    eff:
        unknown[check]=False
        close[check,plate_instance]=True
        close[plate_instance,check]=True
    

#exp_behavior_end

#goal_representation
 
def is_kitchen_stove(x: item):
    # Function to determine if an item is a stove in the kitchen
    symbol is_kitchen_stove=exists y: item : (is_kitchen(y) and inside(x, y))
    return is_kitchen_stove

behavior fry_steak(fryingpan: item, steak: item, stove: item):
    body:
        achieve_once inside(steak, fryingpan)
        # Place the steak in the frying pan
        achieve inhand(fryingpan)
        # Hold the frying pan to fry the steak
        achieve is_on(stove)
        # Ensure the stove is on to cook the steak

behavior cut_and_plate_steak(steak: item, knife: item, plate: item):
    body:
        achieve_once cut(steak)
        # Cut the steak with the knife
        achieve_once on(steak, plate)
        # Place the cut steak on the plate

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and is_kitchen_stove(stove)
        # Select the stove in the kitchen
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind steak: item where:
            is_food_steak(steak)
        fry_steak(fryingpan, steak, stove)
        # Fry the steak using the frying pan on the kitchen stove
        
        bind knife: item where:
            is_knife(knife)
        bind plate: item where:
            is_plate(plate)
        cut_and_plate_steak(steak, knife, plate)
        # Cut the steak and place it on a plate

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_steak_2080_around_fridge_126(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_fryingpan(steak:item, fryingpan:item):
    # Function to check if the steak is in the frying pan
    symbol is_in_fryingpan = exists o: item : (is_food_steak(o) and inside(o, fryingpan))
    return is_in_fryingpan

def is_on_stove(fryingpan:item, stove:item):
    # Function to check if the frying pan is on the stove
    symbol is_on_stove = exists o: item : (is_fryingpan(o) and on(o, stove))
    return is_on_stove

behavior fry_steak(steak: item, fryingpan: item, stove: item):
    body:
        achieve_once inside(steak, fryingpan) # Place the steak in the frying pan
        achieve_once is_on(fryingpan) # Turn on the frying pan
        achieve is_on(stove) # Ensure the stove stays on
        achieve inside(steak, fryingpan) and on(fryingpan, stove) # Cook the steak on the stove using the frying pan

behavior cut_and_serve(steak: item, plate: item):
    body:
        achieve_once cut(steak) # Cut the steak
        achieve_once on(steak, plate) # Serve the cut steak on a plate

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select the steak to be cooked

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_steak(steak, fryingpan, stove)

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        cut_and_serve(steak, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_steak_2080_around_fridge_126(food_steak:item):
    goal: not unknown(food_steak)
    body:
        assert is_food_steak(food_steak)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_steak,fridge_instance)
        else:
            exp(food_steak,fridge_instance)
    eff:
        unknown[food_steak]=False
        close[food_steak,fridge_instance]=True
        close[fridge_instance,food_steak]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation

behavior fry_steak(steak:item, pan:item, stove:item):
    body:
        achieve_once on(steak, pan) # Place the steak in the frying pan
        achieve_once on(pan, stove) # Place the frying pan on the stove
        achieve is_on(stove) # Ensure the stove is on to fry the steak

behavior cut_steak(steak:item, knife:item, cutting_board:item):
    body:
        achieve_once on(steak, cutting_board) # Place the steak on the cutting board
        achieve_once on(knife, cutting_board) # Ensure the knife is on the cutting board
        achieve_once cut(steak) # Cut the steak

behavior serve_steak(steak:item, plate:item):
    body:
        achieve_once on(steak, plate) # Place the steak pieces on the plate

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select a steak
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        fry_steak(steak, pan, stove)
        cut_steak(steak, knife, cutting_board)
        serve_steak(steak, plate)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior fry_steak(steak:item, pan:item, stove:item):
    body:
        achieve_once on(steak, pan) # Place the steak in the frying pan
        achieve_once on(pan, stove) # Place the frying pan on the stove
        achieve is_on(stove) # Ensure the stove is on to fry the steak

behavior cut_steak(steak:item, knife:item, cutting_board:item):
    body:
        achieve_once on(steak, cutting_board) # Place the steak on the cutting board
        achieve_once on(knife, cutting_board) # Ensure the knife is on the cutting board
        achieve_once cut(steak) # Cut the steak

behavior serve_steak(steak:item, plate:item):
    body:
        achieve_once on(steak, plate) # Place the steak pieces on the plate

behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        # Select a steak
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        fry_steak(steak, pan, stove)
        cut_steak(steak, knife, cutting_board)
        serve_steak(steak, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(fryingpan_2154, cupboard_117)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_steak_2080, fridge_126)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(cutting_board_2123)put_executor(food_steak_2080, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(cutting_board_2123)put_executor(knife_2035, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_steak_2080)cut_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(plate_2152)put_executor(food_steak_2080, plate_2152)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_117)
Fail to find fryingpan_2154 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(fryingpan_2154, cupboard_118)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_steak_2080, fridge_126)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(cutting_board_2123)put_executor(food_steak_2080, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(cutting_board_2123)put_executor(knife_2035, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_steak_2080)cut_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(plate_2152)put_executor(food_steak_2080, plate_2152)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_118)
Fail to find fryingpan_2154 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(fryingpan_2154, fridge_126)exp(food_steak_2080, fridge_126)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(cutting_board_2123)put_executor(food_steak_2080, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(cutting_board_2123)put_executor(knife_2035, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_steak_2080)cut_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(plate_2152)put_executor(food_steak_2080, plate_2152)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(fryingpan_2154, fridge_126)
Fail to find fryingpan_2154 around fridge_126. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Fried a steak. Then cut it and put it on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_fryingpan_2154_around_stovefan_125(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==125
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(fryingpan,stovefan_instance)
        else:
            exp(fryingpan,stovefan_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stovefan_instance]=True
        close[stovefan_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
behavior find_frying_pan():
    body:
        foreach obj: item:
            if is_fryingpan(obj) and not visited(obj):
                observe(obj, "Check if its the required frying pan")

behavior move_the_steak(steak:item, fryingpan:item):
    body:
        achieve_once on(steak, fryingpan)
        
behavior cook_the_steak(stove:item):
    body:
        achieve_once is_on(stove)

behavior cut_steak(steak:item):
    body:
        achieve_once cut(steak)
        
behavior plate_the_steak(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)
        
behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind plate: item where:
            is_plate(plate)

        if not visited(fryingpan):
            find_frying_pan()
        
        move_the_steak(steak, fryingpan)
        cook_the_steak(stove)
        cut_steak(steak)
        plate_the_steak(steak, plate)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_frying_pan():
    body:
        foreach obj: item:
            if is_fryingpan(obj) and not visited(obj):
                observe(obj, "Check if its the required frying pan")

behavior move_the_steak(steak:item, fryingpan:item):
    body:
        achieve_once on(steak, fryingpan)
        
behavior cook_the_steak(stove:item):
    body:
        achieve_once is_on(stove)

behavior cut_steak(steak:item):
    body:
        achieve_once cut(steak)
        
behavior plate_the_steak(steak:item, plate:item):
    body:
        achieve_once on(steak, plate)
        
behavior __goal__():
    body:
        bind steak: item where:
            is_food_steak(steak)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind plate: item where:
            is_plate(plate)

        if not visited(fryingpan):
            find_frying_pan()
        
        move_the_steak(steak, fryingpan)
        cook_the_steak(stove)
        cut_steak(steak)
        plate_the_steak(steak, plate)
##############################
From agent.py-> find a plan in act()
walk_executor(stovefan_125)exp(fryingpan_2154, stovefan_125)walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if its the required frying pan)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(cutting_board_2123)put_executor(food_steak_2080, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_steak_2080)cut_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(plate_2152)put_executor(food_steak_2080, plate_2152)
##############################
From agent.py
walk_executor(stovefan_125)
Robot find: Robot is close to the stovefan_125. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find fryingpan_2154 ?
Answer: The target item, fryingpan_2154, can be found on kitchen_counter_122, which is located inside dining_room_41. Look for kitchen_counter_122, and you should find fryingpan_2154 placed on top of it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, fryingpan_2154, can be found on kitchen_counter_122, which is located inside dining_room_41. Look for kitchen_counter_122, and you should find fryingpan_2154 placed on top of it.

The actions you have taken:
Action 1: Walk to kitchen_counter_123.
Action 2: look for fryingpan_2154 around kitchen_counter_123.
Action 3: Walk to stove_2135.
Action 4: Open stove_2135.
Action 5: look for fryingpan_2154 around stove_2135.
Action 6: Walk to cupboard_117.
Action 7: look for fryingpan_2154 around cupboard_117.
Action 8: Walk to cupboard_118.
Action 9: Open cupboard_118.
Action 10: look for fryingpan_2154 around cupboard_118.
Action 11: Walk to fridge_126.
Action 12: Switch off fridge_126.
Action 13: Open fridge_126.
Action 14: look for fryingpan_2154 around fridge_126.
Action 15: Walk to stovefan_125.

##############################
From agent.py
exp(fryingpan_2154, stovefan_125)
Fail to find fryingpan_2154 around stovefan_125. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if its the required frying pan)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(cutting_board_2123)put_executor(food_steak_2080, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_steak_2080)cut_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(plate_2152)put_executor(food_steak_2080, plate_2152)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if its the required frying pan)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(fryingpan_2154)put_executor(food_steak_2080, fryingpan_2154)walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(cutting_board_2123)put_executor(food_steak_2080, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_steak_2080)cut_executor(food_steak_2080)grab_executor(food_steak_2080)walk_executor(plate_2152)put_executor(food_steak_2080, plate_2152)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. 
##############################
From agent.py
obs(fryingpan_2154, Check if its the required frying pan)
Get this information:  fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to character_240. fryingpan_2154 is on kitchen_counter_122. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py
walk_executor(food_steak_2080)
Robot find: Robot is close to the food_steak_2080. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_steak_2080)
Robot find: Robot is close to the food_steak_2080. Robot is close to the fridge_126. Grabbing food_steak_2080 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_steak_2080. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
put_executor(food_steak_2080, fryingpan_2154)
Robot find: Robot is close to the food_steak_2080. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. food_steak_2080 is close fryingpan_2154. fryingpan_2154 is close food_steak_2080. food_steak_2080 is on fryingpan_2154. food_steak_2080 released by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(food_steak_2080)
Robot find: Robot is close to the food_steak_2080. Robot is close to the fryingpan_2154. 
##############################
From agent.py
grab_executor(food_steak_2080)
Robot find: Robot is close to the food_steak_2080. Robot is close to the fryingpan_2154. Grabbing food_steak_2080 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_steak_2080, cutting_board_2123)
Robot find: Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_steak_2080. food_steak_2080 is close cutting_board_2123. food_steak_2080 is on cutting_board_2123. food_steak_2080 released by right hand. 
##############################
From agent.py
walk_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. 
##############################
From agent.py
grab_executor(knife_2035)
Robot find: Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. Grabbing knife_2035 by right hand. 
##############################
From agent.py
walk_executor(food_steak_2080)
Robot find: Robot is close to the knife_2035. Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. 
##############################
From agent.py
cut_executor(food_steak_2080)
Robot find: Robot is close to the knife_2035. Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. 
##############################
From agent.py
grab_executor(food_steak_2080)
Robot find: Robot is close to the knife_2035. Robot is close to the food_steak_2080. Robot is close to the cutting_board_2123. Grabbing food_steak_2080 by left hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the knife_2035. Robot is close to the food_steak_2080. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_steak_2080, plate_2152)
Robot find: Robot is close to the knife_2035. Robot is close to the food_steak_2080. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. food_steak_2080 is close plate_2152. plate_2152 is close food_steak_2080. food_steak_2080 is on plate_2152. food_steak_2080 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried a steak. Then cut it and put it on a plate.
Action History:
['walk_executor(kitchen_counter_123)', 'walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(stovefan_125)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fryingpan_2154)', 'walk_executor(food_steak_2080)', 'grab_executor(food_steak_2080)', 'walk_executor(fryingpan_2154)', 'put_executor(food_steak_2080, fryingpan_2154)', 'walk_executor(stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_steak_2080)', 'grab_executor(food_steak_2080)', 'walk_executor(cutting_board_2123)', 'put_executor(food_steak_2080, cutting_board_2123)', 'walk_executor(knife_2035)', 'grab_executor(knife_2035)', 'walk_executor(food_steak_2080)', 'cut_executor(food_steak_2080)', 'grab_executor(food_steak_2080)', 'walk_executor(plate_2152)', 'put_executor(food_steak_2080, plate_2152)']
Time info:
Time consume: 310 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0
action_num: 29

Task complete rate:
Keystate: k1 - Requires: 12 steps
Keystate: k2 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
