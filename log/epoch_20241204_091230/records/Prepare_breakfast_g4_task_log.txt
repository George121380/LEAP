From agent.py
Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta separately.', '2. Mix the cooked chicken and pasta together.', '3. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_dry_pasta_2042_around_cupboard_229(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_hanger_142_around_closetdrawer_121(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==121
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
def has_chicken(pot:item):
    # Function to check if there is chicken in a specified pot
    symbol has_chicken=exists o: item : is_food_chicken(o) and inside(o, pot)
    return has_chicken

def has_pasta(pot:item):
    # Function to check if there is pasta in a specified pot
    symbol has_pasta=exists o: item : is_dry_pasta(o) and inside(o, pot)
    return has_pasta

behavior cook_chicken(pot:item, stove:item):
    body:
        assert is_food_chicken(pot)
        achieve inside(pot, stove)
        achieve is_on(stove)
        # Cook the chicken in the pot on the stove

behavior cook_pasta(pot:item, stove:item):
    body:
        assert is_dry_pasta(pot)
        achieve inside(pot, stove)
        achieve is_on(stove)
        # Cook the pasta in the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a cooking pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if has_chicken(pot):
            cook_chicken(pot, stove)
            # Cook chicken separately
        
        if has_pasta(pot):
            cook_pasta(pot, stove)
            # Cook pasta separately

#goal_representation_end

##############################
