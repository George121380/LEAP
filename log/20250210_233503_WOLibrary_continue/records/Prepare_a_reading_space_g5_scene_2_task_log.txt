From agent.py
Reset goals: The sub-goals are: 
['1. Find your spectacles and put them on the coffee table in the home office.', '2. Find the book and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2106_around_wallshelf_301(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==301
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(spectacles,wallshelf_instance)
        else:
            exp(spectacles,wallshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,wallshelf_instance]=True
        close[wallshelf_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation

behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        foreach table: item:
            if is_table(table) and inside(table, home_office):
                place_spectacles_on_table(spectacles, table)
                # Place the spectacles on the table in the home office

#goal_representation_end

##############################
From agent.py->reset_goal

behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        foreach table: item:
            if is_table(table) and inside(table, home_office):
                place_spectacles_on_table(spectacles, table)
                # Place the spectacles on the table in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_301)exp(spectacles_2106, wallshelf_301)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(wallshelf_301)
Robot find: towel_rack_299, towel_rack_300, drawing_296, Robot is close to the wallshelf_301. 
##############################
From agent.py
exp(spectacles_2106, wallshelf_301)
Fail to find spectacles_2106 around wallshelf_301. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_187)exp(spectacles_2106, wallshelf_187)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(wallshelf_187)
Robot find: Robot is close to the wallshelf_187. 
##############################
From agent.py
exp(spectacles_2106, wallshelf_187)
Fail to find spectacles_2106 around wallshelf_187. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_191)exp(spectacles_2106, wallshelf_191)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(wallshelf_191)
Robot find: Robot is close to the wallshelf_191. 
##############################
From agent.py
exp(spectacles_2106, wallshelf_191)
Fail to find spectacles_2106 around wallshelf_191. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_190)exp(spectacles_2106, wallshelf_190)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(wallshelf_190)
Robot find: Robot is close to the wallshelf_190. 
##############################
From agent.py
exp(spectacles_2106, wallshelf_190)
Fail to find spectacles_2106 around wallshelf_190. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_188)open_executor(bookshelf_188)exp(spectacles_2106, bookshelf_188)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(bookshelf_188)
Robot find: drawing_196, Robot is close to the bookshelf_188. 
##############################
From agent.py
open_executor(bookshelf_188)
Robot find: Robot is close to the bookshelf_188. bookshelf_188 is opened. 
##############################
From agent.py
exp(spectacles_2106, bookshelf_188)
Fail to find spectacles_2106 around bookshelf_188. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_189)open_executor(bookshelf_189)exp(spectacles_2106, bookshelf_189)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. 
##############################
From agent.py
open_executor(bookshelf_189)
Robot find: Robot is close to the bookshelf_189. bookshelf_189 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find spectacles_2106 ?
Answer: The spectacles_2106 are located on kitchen_counter_128 inside dining_room_1. Look for kitchen_counter_128 in dining_room_1, and you will find spectacles_2106 on top of it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The spectacles_2106 are located on kitchen_counter_128 inside dining_room_1. Look for kitchen_counter_128 in dining_room_1, and you will find spectacles_2106 on top of it.

The actions you have taken:
Action 1: Walk to wallshelf_301.
Action 2: look for spectacles_2106 around wallshelf_301.
Action 3: Walk to wallshelf_187.
Action 4: look for spectacles_2106 around wallshelf_187.
Action 5: Walk to wallshelf_191.
Action 6: look for spectacles_2106 around wallshelf_191.
Action 7: Walk to wallshelf_190.
Action 8: look for spectacles_2106 around wallshelf_190.
Action 9: Walk to bookshelf_188.
Action 10: Open bookshelf_188.
Action 11: look for spectacles_2106 around bookshelf_188.
Action 12: Walk to bookshelf_189.
Action 13: Open bookshelf_189.

##############################
From agent.py
exp(spectacles_2106, bookshelf_189)
Fail to find spectacles_2106 around bookshelf_189. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(spectacles_2106, kitchen_counter_128)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(spectacles_2106, kitchen_counter_128)
Find spectacles_2106. 
##############################
From agent.py-> find a plan in act()
walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(spectacles_2106)
Robot find: Robot is close to the kitchen_counter_128. Robot is close to the spectacles_2106. 
##############################
From agent.py
grab_executor(spectacles_2106)
Robot find: Robot is close to the kitchen_counter_128. Robot is close to the spectacles_2106. Grabbing spectacles_2106 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, Robot is close to the spectacles_2106. Robot is close to the table_193. 
##############################
From agent.py
put_executor(spectacles_2106, table_193)
Robot find: Robot is close to the spectacles_2106. Robot is close to the table_193. table_193 is close spectacles_2106. spectacles_2106 is close table_193. spectacles_2106 is on table_193. spectacles_2106 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put the spectacles on the coffee table located in the home office, not just any table. Please ensure you place the spectacles on the correct table in the specified location.
##############################
From agent.py
Human Instruction: You need to put the spectacles on the coffee table located in the home office, not just any table. Please ensure you place the spectacles on the correct table in the specified location.

The actions you have taken:
Action 1: Walk to wallshelf_301.
Action 2: look for spectacles_2106 around wallshelf_301.
Action 3: Walk to wallshelf_187.
Action 4: look for spectacles_2106 around wallshelf_187.
Action 5: Walk to wallshelf_191.
Action 6: look for spectacles_2106 around wallshelf_191.
Action 7: Walk to wallshelf_190.
Action 8: look for spectacles_2106 around wallshelf_190.
Action 9: Walk to bookshelf_188.
Action 10: Open bookshelf_188.
Action 11: look for spectacles_2106 around bookshelf_188.
Action 12: Walk to bookshelf_189.
Action 13: Open bookshelf_189.
Action 14: look for spectacles_2106 around bookshelf_189.
Action 15: Walk to kitchen_counter_128.
Action 16: look for spectacles_2106 around kitchen_counter_128.
Action 17: Walk to spectacles_2106.
Action 18: Grab spectacles_2106.
Action 19: Walk to table_193.
Action 20: Put spectacles_2106 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2081_around_tvstand_186(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles
        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)
        # Select the coffee table in the home office
        place_spectacles_on_table(spectacles, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles
        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office room
        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)
        # Select the coffee table in the home office
        place_spectacles_on_table(spectacles, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2112_around_keyboard_2111(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind keyboard_instance:item where:
            is_keyboard(keyboard_instance) and id[keyboard_instance]==2111
        achieve close_char(char,keyboard_instance)
        if can_open(keyboard_instance):
            achieve_once open(keyboard_instance)
            exp(mouse,keyboard_instance)
        else:
            exp(mouse,keyboard_instance)
    eff:
        unknown[mouse]=False
        close[mouse,keyboard_instance]=True
        close[keyboard_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_spectacles_on_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles
        
        bind coffee_table: item where:
            surfaces(coffee_table) and recipient(coffee_table) and inside(coffee_table, coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table located in the home office

        put_spectacles_on_coffee_table(spectacles, coffee_table)
        # Place spectacles on the coffee table located in home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior put_spectacles_on_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles

        bind coffee_table: item where:
            surfaces(coffee_table) and recipient(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table located in the home office
        
        bind home_office: item where:
            is_home_office(home_office)
        # Define home_office instance

        put_spectacles_on_coffee_table(spectacles, coffee_table)
        # Place spectacles on the coffee table located in home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_keyboard_2111_around_keyboard_2111(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind keyboard_instance:item where:
            is_keyboard(keyboard_instance) and id[keyboard_instance]==2111
        achieve close_char(char,keyboard_instance)
        if can_open(keyboard_instance):
            achieve_once open(keyboard_instance)
            exp(keyboard,keyboard_instance)
        else:
            exp(keyboard,keyboard_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,keyboard_instance]=True
        close[keyboard_instance,keyboard]=True
    

behavior find_headset_2086_around_bookshelf_260(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(headset,bookshelf_instance)
        else:
            exp(headset,bookshelf_instance)
    eff:
        unknown[headset]=False
        close[headset,bookshelf_instance]=True
        close[bookshelf_instance,headset]=True
    

behavior find_chair_263_around_home_office_161(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#goal_representation
 
behavior put_spectacles_on_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles

        bind home_office: item where:
            is_home_office(home_office)
        # Define home_office instance

        bind coffee_table: item where:
            surfaces(coffee_table) and recipient(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table located in the home office

        put_spectacles_on_coffee_table(spectacles, coffee_table)
        # Place spectacles on the coffee table located in home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles item
        
        bind table: item where:
            is_table(table) and inside(table, home_office) and id[table] == 193
        # Select the coffee table located in the home office with ID 193
        
        place_spectacles_on_table(spectacles, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_380_around_mouse_2112(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==2112
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

#goal_representation
 
behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles item

        bind table: item where:
            is_table(table) and inside(table, home_office) and id[table] == 193
        # Select the coffee table located in the home office with ID 193 and ensure it is inside the home office
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office to ensure table is correctly located

        place_spectacles_on_table(spectacles, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_video_game_controller_2019_around_tvstand_186(video_game_controller:item):
    goal: not unknown(video_game_controller)
    body:
        assert is_video_game_controller(video_game_controller)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(video_game_controller,tvstand_instance)
        else:
            exp(video_game_controller,tvstand_instance)
    eff:
        unknown[video_game_controller]=False
        close[video_game_controller,tvstand_instance]=True
        close[tvstand_instance,video_game_controller]=True
    

#goal_representation
 
behavior place_spectacles_on_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles item

        bind table: item where:
            is_table(table) and inside(table, home_office) and id[table] == 193
        # Select the coffee table located in the home office with ID 193 and ensure it is inside the home office

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office to ensure table is correctly located

        place_spectacles_on_table(spectacles, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find your spectacles and put them on the coffee table in the home office." ?
Answer: Find the spectacles and put them on the coffee table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles item

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        achieve_once on(spectacles, coffee_table)
        # Place spectacles on the coffee table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_powersocket_48(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==48
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(phone,powersocket_instance)
        else:
            exp(phone,powersocket_instance)
    eff:
        unknown[phone]=False
        close[phone,powersocket_instance]=True
        close[powersocket_instance,phone]=True
    

behavior find_remote_control_2081_around_tvstand_186(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_stereo_2007_around_tvstand_135(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table located in the home office
        achieve on(spectacles, coffee_table)
        # Place the spectacles on the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_phone_47_around_walllamp_291(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==291
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(phone,walllamp_instance)
        else:
            exp(phone,walllamp_instance)
    eff:
        unknown[phone]=False
        close[phone,walllamp_instance]=True
        close[walllamp_instance,phone]=True
    

behavior find_chair_374_around_chair_2119(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==2119
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table located in the home office
        achieve on(spectacles, coffee_table)
        # Place the spectacles on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table]==193
        place_spectacles_on_coffee_table(spectacles, coffee_table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the spectacles and put them on the coffee table in the home office.', '2. Find the book and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_380_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles item
        bind coffee_table: item where:
            is_table(coffee_table)
            and inside(coffee_table, home_office)
        # Select coffee table located in the home office
        place_spectacles_on_coffee_table(spectacles, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'inside') at line 5786, column 17.
Expected one of: 
	* RSHIFT
	* STAR
	* LSHIFT
	* NOT_EQ
	* AMPERSAND
	* __ANON_6
	* __ANON_5
	* __ANON_0
	* AND
	* __ANON_7
	* EQUAL
	* DOUBLE_EQUAL
	* __ANON_8
	* MINUS
	* __ANON_1
	* PERCENT
	* SLASH
	* LESSTHAN
	* OR
	* COMMA
	* MORETHAN
	* __ANON_4
	* PLUS
	* LESS_EQ
	* AT
	* FLOORDIV
	* SEMICOLON
	* _NEWLINE
	* CIRCUMFLEX
	* __ANON_2
	* GREATER_EQ
	* __ANON_3
	* IF
	* VBAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_drawing_387_around_drawing_296(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#goal_representation
 
behavior place_spectacles_on_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles item
        bind coffee_table: item where:
            is_table(coffee_table)
            and inside(coffee_table, home_office)
        # Select coffee table located in the home office
        place_spectacles_on_coffee_table(spectacles, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'inside') at line 5804, column 17.
Expected one of: 
	* RSHIFT
	* STAR
	* LSHIFT
	* NOT_EQ
	* AMPERSAND
	* __ANON_6
	* __ANON_5
	* __ANON_0
	* AND
	* __ANON_7
	* EQUAL
	* DOUBLE_EQUAL
	* __ANON_8
	* MINUS
	* __ANON_1
	* PERCENT
	* SLASH
	* LESSTHAN
	* OR
	* COMMA
	* MORETHAN
	* __ANON_4
	* PLUS
	* LESS_EQ
	* AT
	* FLOORDIV
	* SEMICOLON
	* _NEWLINE
	* CIRCUMFLEX
	* __ANON_2
	* GREATER_EQ
	* __ANON_3
	* IF
	* VBAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_380_around_mousepad_381(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==381
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#goal_representation
 
behavior place_spectacles_on_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles item
        bind coffee_table: item where:
            is_table(coffee_table)
            and is_home_office(home_office)
            and inside(coffee_table, home_office)
        # Select coffee table located in the home office
        place_spectacles_on_coffee_table(spectacles, coffee_table)

bind home_office: item where:
    is_home_office(home_office)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles instance
        bind coffee_table: item where:
            is_table(coffee_table) and exists room: item : (is_home_office(room) and inside(coffee_table, room))
        # Select the coffee table in the home office
        achieve on(spectacles, coffee_table)
        # Place the spectacles on the coffee table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5763, column 47.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_380_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_drawing_238_around_drawing_296(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

behavior find_cup_2088_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_video_game_controller_2019_around_tvstand_135(video_game_controller:item):
    goal: not unknown(video_game_controller)
    body:
        assert is_video_game_controller(video_game_controller)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(video_game_controller,tvstand_instance)
        else:
            exp(video_game_controller,tvstand_instance)
    eff:
        unknown[video_game_controller]=False
        close[video_game_controller,tvstand_instance]=True
        close[tvstand_instance,video_game_controller]=True
    

#goal_representation

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles instance
        bind coffee_table: item where:
            is_table(coffee_table) and exists room: item : (is_home_office(room) and inside(coffee_table, room))
        # Select the coffee table in the home office
        achieve on(spectacles, coffee_table)
        # Place the spectacles on the coffee table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5853, column 47.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_phone_47_around_powersocket_48(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==48
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(phone,powersocket_instance)
        else:
            exp(phone,powersocket_instance)
    eff:
        unknown[phone]=False
        close[phone,powersocket_instance]=True
        close[powersocket_instance,phone]=True
    

#goal_representation

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles instance
        bind coffee_table: item where:
            is_table(coffee_table) and exists room: item : (is_home_office(room) and inside(coffee_table, room))
        # Select the coffee table in the home office
        achieve on(spectacles, coffee_table)
        # Place the spectacles on the coffee table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_video_game_controller_2019_around_tvstand_186(video_game_controller:item):
    goal: not unknown(video_game_controller)
    body:
        assert is_video_game_controller(video_game_controller)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(video_game_controller,tvstand_instance)
        else:
            exp(video_game_controller,tvstand_instance)
    eff:
        unknown[video_game_controller]=False
        close[video_game_controller,tvstand_instance]=True
        close[tvstand_instance,video_game_controller]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_spectacles_to_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)
        # Place the spectacles on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and id[spectacles] == 2106
        # Select spectacles with ID 2106
        
        bind table: item where:
            is_table(table) and id[table] == 193
        # Select table with ID 193

        move_spectacles_to_table(spectacles, table)
        # Move the spectacles to the coffee table in the home office

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the spectacles and put them on the coffee table in the home office." ?
Answer: Find the spectacles and put them on the coffee table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_136(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

def is_home_office_table(table:item):
    symbol is_home_office_table= exists room: item : (is_home_office(room) and inside(table, room))
    return is_home_office_table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        
        bind table: item where:
            is_table(table) and is_home_office_table(table)
        # Select the coffee table in the home office

        place_spectacles_on_table(spectacles, table)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2003_around_mouse_2112(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==2112
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior find_and_place_spectacles_in_home_office():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Check if this is the coffee table in the home office")
                if is_home_office(table):
                    bind spectacles: item where:
                        is_spectacles(spectacles)
                    place_spectacles_on_table(spectacles, table)
                    achieve close_char(char, table)
                    break

behavior __goal__():
    body:
        find_and_place_spectacles_in_home_office()

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dvd_player_2000_around_dvd_player_2000(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind dvd_player_instance:item where:
            is_dvd_player(dvd_player_instance) and id[dvd_player_instance]==2000
        achieve close_char(char,dvd_player_instance)
        if can_open(dvd_player_instance):
            achieve_once open(dvd_player_instance)
            exp(dvd_player,dvd_player_instance)
        else:
            exp(dvd_player,dvd_player_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,dvd_player_instance]=True
        close[dvd_player_instance,dvd_player]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior find_and_place_spectacles_in_home_office():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Check if this is the coffee table in the home office")
                if is_home_office(table):
                    bind spectacles: item where:
                        is_spectacles(spectacles)
                    place_spectacles_on_table(spectacles, table)
                    achieve_once close_char(char, table)
                    break

behavior __goal__():
    body:
        find_and_place_spectacles_in_home_office()

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table)

behavior find_and_place_spectacles_in_home_office():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Check if this is the coffee table in the home office")
                if is_home_office(table):
                    bind spectacles: item where:
                        is_spectacles(spectacles)
                    place_spectacles_on_table(spectacles, table)
                    achieve_once close_char(char, table)
                    break

behavior __goal__():
    body:
        find_and_place_spectacles_in_home_office()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_powersocket_48(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==48
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(phone,powersocket_instance)
        else:
            exp(phone,powersocket_instance)
    eff:
        unknown[phone]=False
        close[phone,powersocket_instance]=True
        close[powersocket_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
def is_correct_table(table: item):
    # Function to check if the table is the coffee table in the home office
    symbol is_correct_table = exists room: item : (is_home_office(room) and inside(table, room))
    return is_correct_table

behavior move_spectacles_to_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)
        # Place the spectacles on the table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and on(spectacles, table_193)
        # Select spectacles that are already on table_193

        if is_correct_table(table_193):
            achieve close_char(char, table_193)
            # Move towards the table if its the correct one
            
        else:
            foreach table: item:
                if is_table(table) and is_correct_table(table):
                    move_spectacles_to_table(spectacles, table)
                    # Move the spectacles to the correct table in home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: table_193; available variables: [Variable<spectacles: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_console_2027_around_tvstand_135(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(console,tvstand_instance)
        else:
            exp(console,tvstand_instance)
    eff:
        unknown[console]=False
        close[console,tvstand_instance]=True
        close[tvstand_instance,console]=True
    

behavior find_keyboard_382_around_desk_261(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

behavior find_laptop_2015_around_computer_2110(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(laptop,computer_instance)
        else:
            exp(laptop,computer_instance)
    eff:
        unknown[laptop]=False
        close[laptop,computer_instance]=True
        close[computer_instance,laptop]=True
    

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#goal_representation
 
def is_correct_table(table: item):
    # Function to check if the table is the coffee table in the home office
    symbol is_correct_table = exists room: item : (is_home_office(room) and inside(table, room))
    return is_correct_table

behavior move_spectacles_to_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)
        # Place the spectacles on the table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and on(spectacles, table)
        # Select spectacles that are already on any table

        bind table_193: item where:
            is_table(table_193) and id[table_193] == 193
        # Define table_193

        if is_correct_table(table_193):
            achieve close_char(char, table_193)
            # Move towards the table if its the correct one
            
        else:
            foreach table: item:
                if is_table(table) and is_correct_table(table):
                    move_spectacles_to_table(spectacles, table)
                    # Move the spectacles to the correct table in home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: table; available variables: [Variable<spectacles: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_correct_table(table: item):
    # Function to check if the table is the coffee table in the home office
    symbol is_correct_table = exists room: item : (is_home_office(room) and inside(table, room))
    return is_correct_table

behavior move_spectacles_to_table(spectacles: item, table: item):
    body:
        achieve_once on(spectacles, table)
        # Place the spectacles on the table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles

        bind table_193: item where:
            is_table(table_193) and id[table_193] == 193
        # Define table_193

        if is_correct_table(table_193):
            achieve close_char(char, table_193)
            # Move towards the table if its the correct one
            
        else:
            foreach table: item:
                if is_table(table) and is_correct_table(table):
                    move_spectacles_to_table(spectacles, table)
                    # Move the spectacles to the correct table in home office

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the spectacles and put them on the coffee table in the home office.', '2. Find the book and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_380_around_mousepad_381(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==381
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_video_game_controller_2019_around_tvstand_135(video_game_controller:item):
    goal: not unknown(video_game_controller)
    body:
        assert is_video_game_controller(video_game_controller)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(video_game_controller,tvstand_instance)
        else:
            exp(video_game_controller,tvstand_instance)
    eff:
        unknown[video_game_controller]=False
        close[video_game_controller,tvstand_instance]=True
        close[tvstand_instance,video_game_controller]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office
        achieve close_char(char, spectacles)
        # Approach the spectacles
        achieve_once inhand(spectacles)
        # Pick up the spectacles
        achieve close_char(char, coffee_table)
        # Move closer to the coffee table
        achieve_once on(spectacles, coffee_table)
        # Place the spectacles on the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        achieve close_char(char, spectacles)
        # Approach the spectacles

        achieve_once inhand(spectacles)
        # Pick up the spectacles

        achieve close_char(char, coffee_table)
        # Move closer to the coffee table

        achieve_once on(spectacles, coffee_table)
        # Place the spectacles on the coffee table

#goal_representation_end

##############################
From agent.py->reset_goal

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table inside the home office

        achieve close_char(char, spectacles)
        # Approach the spectacles

        achieve_once inhand(spectacles)
        # Pick up the spectacles

        achieve close_char(char, coffee_table)
        # Move closer to the coffee table

        achieve_once on(spectacles, coffee_table)
        # Place the spectacles on the coffee table

##############################
From agent.py-> find a plan in act()
grab_executor(spectacles_2106)put_executor(spectacles_2106, table_193)
##############################
From agent.py
grab_executor(spectacles_2106)
Robot find: Robot is close to the spectacles_2106. Robot is close to the table_193. Grabbing spectacles_2106 by right hand. 
##############################
From agent.py
put_executor(spectacles_2106, table_193)
Robot find: Robot is close to the spectacles_2106. Robot is close to the table_193. spectacles_2106 is close table_193. spectacles_2106 is on table_193. spectacles_2106 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to move the spectacles from table_193 to the coffee table located in the home office. Make sure that you place them on the correct table in the specified location.
##############################
From agent.py
Human Instruction: You need to move the spectacles from table_193 to the coffee table located in the home office. Make sure that you place them on the correct table in the specified location.

Human Guidance: Find the spectacles and put them on the coffee table in the home office.
The actions you have taken:
Action 1: Walk to wallshelf_301.
Action 2: look for spectacles_2106 around wallshelf_301.
Action 3: Walk to wallshelf_187.
Action 4: look for spectacles_2106 around wallshelf_187.
Action 5: Walk to wallshelf_191.
Action 6: look for spectacles_2106 around wallshelf_191.
Action 7: Walk to wallshelf_190.
Action 8: look for spectacles_2106 around wallshelf_190.
Action 9: Walk to bookshelf_188.
Action 10: Open bookshelf_188.
Action 11: look for spectacles_2106 around bookshelf_188.
Action 12: Walk to bookshelf_189.
Action 13: Open bookshelf_189.
Action 14: look for spectacles_2106 around bookshelf_189.
Action 15: Walk to kitchen_counter_128.
Action 16: look for spectacles_2106 around kitchen_counter_128.
Action 17: Walk to spectacles_2106.
Action 18: Grab spectacles_2106.
Action 19: Walk to table_193.
Action 20: Put spectacles_2106 on table_193.
Action 21: Grab spectacles_2106.
Action 22: Put spectacles_2106 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_glue_2013_around_kitchen_counter_129(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(glue,kitchen_counter_instance)
        else:
            exp(glue,kitchen_counter_instance)
    eff:
        unknown[glue]=False
        close[glue,kitchen_counter_instance]=True
        close[kitchen_counter_instance,glue]=True
    

behavior find_laptop_2015_around_computer_2110(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(laptop,computer_instance)
        else:
            exp(laptop,computer_instance)
    eff:
        unknown[laptop]=False
        close[laptop,computer_instance]=True
        close[computer_instance,laptop]=True
    

behavior find_stereo_2007_around_tvstand_135(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

#exp_behavior_end

#goal_representation
 
def is_spectacles_safely_placed(table:item):
    # Function to check if the spectacles are placed on the coffee table in the home office
    symbol spectacles_safe= exists s: item : (is_spectacles(s) and on(s, table))
    return spectacles_safe

behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table) # Achieve placing spectacles on the table

behavior find_and_place_spectacles():
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office) 
        # Select the table located in the home office labeled as coffee table

        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        if not is_spectacles_safely_placed(coffee_table):
            place_spectacles_on_table(spectacles, coffee_table)
            
behavior __goal__():
    body:
        find_and_place_spectacles()

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_alcohol_2002_around_bathroom_counter_306(alcohol:item):
    goal: not unknown(alcohol)
    body:
        assert is_alcohol(alcohol)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(alcohol,bathroom_counter_instance)
        else:
            exp(alcohol,bathroom_counter_instance)
    eff:
        unknown[alcohol]=False
        close[alcohol,bathroom_counter_instance]=True
        close[bathroom_counter_instance,alcohol]=True
    

#goal_representation
 
def is_spectacles_safely_placed(table:item):
    # Function to check if the spectacles are placed on the coffee table in the home office
    symbol spectacles_safe= exists s: item : (is_spectacles(s) and on(s, table))
    return spectacles_safe

behavior place_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve_once on(spectacles, table) # Achieve placing spectacles on the table

behavior find_and_place_spectacles(home_office:item):
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office) 
        # Select the table located in the home office labeled as coffee table

        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        if not is_spectacles_safely_placed(coffee_table):
            place_spectacles_on_table(spectacles, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        find_and_place_spectacles(home_office)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2003_around_fridge_140(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(mouse,fridge_instance)
        else:
            exp(mouse,fridge_instance)
    eff:
        unknown[mouse]=False
        close[mouse,fridge_instance]=True
        close[fridge_instance,mouse]=True
    

behavior find_phone_47_around_powersocket_48(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==48
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(phone,powersocket_instance)
        else:
            exp(phone,powersocket_instance)
    eff:
        unknown[phone]=False
        close[phone,powersocket_instance]=True
        close[powersocket_instance,phone]=True
    

behavior find_video_game_controller_2019_around_tvstand_135(video_game_controller:item):
    goal: not unknown(video_game_controller)
    body:
        assert is_video_game_controller(video_game_controller)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(video_game_controller,tvstand_instance)
        else:
            exp(video_game_controller,tvstand_instance)
    eff:
        unknown[video_game_controller]=False
        close[video_game_controller,tvstand_instance]=True
        close[tvstand_instance,video_game_controller]=True
    

#exp_behavior_end

#goal_representation

def is_coffee_table(table:item):
    symbol is_coffee_table=exists room: item : (is_home_office(room) and inside(table, room) and surfaces(table))
    return is_coffee_table

behavior place_on_coffee_table(obj:item, table:item):
    body:
        achieve_once on(obj, table)
        # Place the item on the coffee table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_coffee_table(table)
        # Select a coffee table in the home office

        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        place_on_coffee_table(spectacles, table)
        # Place spectacles on the coffee table

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_380_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_phone_47_around_powersocket_48(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==48
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(phone,powersocket_instance)
        else:
            exp(phone,powersocket_instance)
    eff:
        unknown[phone]=False
        close[phone,powersocket_instance]=True
        close[powersocket_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_spectacles_to_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table located in the home office

        move_spectacles_to_coffee_table(spectacles, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_console_2027_around_tvstand_186(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(console,tvstand_instance)
        else:
            exp(console,tvstand_instance)
    eff:
        unknown[console]=False
        close[console,tvstand_instance]=True
        close[tvstand_instance,console]=True
    

behavior find_laptop_2015_around_bed_376(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(laptop,bed_instance)
        else:
            exp(laptop,bed_instance)
    eff:
        unknown[laptop]=False
        close[laptop,bed_instance]=True
        close[bed_instance,laptop]=True
    

#goal_representation

behavior move_spectacles_to_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles
        bind home_office: item where:
            is_home_office(home_office)
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table located in the home office

        move_spectacles_to_coffee_table(spectacles, coffee_table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the spectacles and put them on the coffee table in the home office." ?
Answer: Find the spectacles and put them on the coffee table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_374_around_nightstand_373(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==373
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(chair,nightstand_instance)
        else:
            exp(chair,nightstand_instance)
    eff:
        unknown[chair]=False
        close[chair,nightstand_instance]=True
        close[nightstand_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_spectacles_and_place_on_table(spectacles:item, coffee_table:item, home_office:item):
    body:
        # Place the spectacles on the coffee table
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        # Identify the spectacles and the coffee table in the home office
        bind spectacles: item where:
            is_spectacles(spectacles)
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        bind home_office: item where:
            is_home_office(home_office)
        # Execute the behavior to find spectacles and place them on the coffee table
        find_spectacles_and_place_on_table(spectacles, coffee_table, home_office)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_2112_around_mousepad_381(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==381
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

#goal_representation
 
behavior find_spectacles_and_place_on_table(spectacles:item, coffee_table:item):
    body:
        # Place the spectacles on the coffee table
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        # Identify the home office first, then identify the spectacles and the coffee table
        bind home_office: item where:
            is_home_office(home_office)
        bind spectacles: item where:
            is_spectacles(spectacles)
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Execute the behavior to find spectacles and place them on the coffee table
        find_spectacles_and_place_on_table(spectacles, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_136(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_laptop_2015_around_computer_2110(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(laptop,computer_instance)
        else:
            exp(laptop,computer_instance)
    eff:
        unknown[laptop]=False
        close[laptop,computer_instance]=True
        close[computer_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_spectacles_on_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles item
        
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select the coffee table with surface
        
        achieve close_char(char, spectacles)
        # Move the character closer to the spectacles
        
        place_spectacles_on_coffee_table(spectacles, coffee_table)
        # Place spectacles on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_spectacles(table:item):
    symbol spectacles_exist=exists o: item : (is_spectacles(o) and on(o, table))
    return spectacles_exist

behavior place_spectacles_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
            
        bind coffee_table: item where:
            is_table(coffee_table) and is_home_office(table) and surfaces(coffee_table)
        
        place_spectacles_on_coffee_table(spectacles, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: table; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_spectacles(table:item):
    symbol spectacles_exist=exists o: item : (is_spectacles(o) and on(o, table))
    return spectacles_exist

behavior place_spectacles_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve_once on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
            
        bind coffee_table: item where:
            is_table(coffee_table) and is_home_office(coffee_table) and surfaces(coffee_table)
        
        place_spectacles_on_coffee_table(spectacles, coffee_table)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(wallshelf_301)', 'walk_executor(wallshelf_187)', 'walk_executor(wallshelf_191)', 'walk_executor(wallshelf_190)', 'walk_executor(bookshelf_188)', 'open_executor(bookshelf_188)', 'walk_executor(bookshelf_189)', 'open_executor(bookshelf_189)', 'walk_executor(kitchen_counter_128)', 'walk_executor(spectacles_2106)', 'grab_executor(spectacles_2106)', 'walk_executor(table_193)', 'put_executor(spectacles_2106, table_193)', 'grab_executor(spectacles_2106)', 'put_executor(spectacles_2106, table_193)']
Time info:
Time consume: 423 seconds
Exp_helper query times: 1
Guidance query times: 3
library scale: 0
goal generate times: 20
goal correct times: 7
action_num: 15

Task complete rate:
Keystate: k1 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
