From agent.py
Reset goals: The sub-goals are: 
['1. Fill a bowl with water.', '2. Place the bowl of water on the table in the home office.', '3. Find the cat and put it on the table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_kitchen_counter_128(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl from available items

        bind sink: item where:
            is_sink(sink)
        # Select a sink from available items

        achieve_once close_char(char, sink)
        # Ensure the character is close to the sink
        
        achieve has_water(bowl)
        # Fill the bowl with water

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl from available items

        bind sink: item where:
            is_sink(sink)
        # Select a sink from available items

        achieve_once close_char(char, sink)
        # Ensure the character is close to the sink
        
        achieve has_water(bowl)
        # Fill the bowl with water

##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)walk_executor(kitchen_counter_128)exp(bowl_2095, kitchen_counter_128)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, pot_54, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(bowl_2095, kitchen_counter_128)
Fail to find bowl_2095 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)walk_executor(cupboard_130)exp(bowl_2095, cupboard_130)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(sink_133)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(bowl_2095, cupboard_130)
Fail to find bowl_2095 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)walk_executor(wallshelf_301)exp(bowl_2095, wallshelf_301)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(sink_133)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
walk_executor(wallshelf_301)
Robot find: towel_rack_299, towel_rack_300, drawing_296, Robot is close to the wallshelf_301. 
##############################
From agent.py
exp(bowl_2095, wallshelf_301)
Fail to find bowl_2095 around wallshelf_301. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)walk_executor(cupboard_131)open_executor(cupboard_131)exp(bowl_2095, cupboard_131)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(sink_133)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(bowl_2095, cupboard_131)
Fail to find bowl_2095 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)walk_executor(tvstand_186)exp(bowl_2095, tvstand_186)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(sink_133)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
walk_executor(tvstand_186)
Robot find: mat_201, cd_2100, Robot is close to the tvstand_186. 
##############################
From agent.py
exp(bowl_2095, tvstand_186)
Fail to find bowl_2095 around tvstand_186. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)walk_executor(cutting_board_2080)exp(bowl_2095, cutting_board_2080)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(sink_133)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
walk_executor(cutting_board_2080)
Robot find: Robot is close to the cutting_board_2080. Robot is close to the kitchen_counter_128. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2095 ?
Answer: The target item, bowl_2095, is located inside dining_room_1. It is on table_123. Please go to dining_room_1, locate table_123, and you will find bowl_2095 on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, bowl_2095, is located inside dining_room_1. It is on table_123. Please go to dining_room_1, locate table_123, and you will find bowl_2095 on it.

The actions you have taken:
Action 1: Walk to sink_133.
Action 2: Walk to kitchen_counter_128.
Action 3: look for bowl_2095 around kitchen_counter_128.
Action 4: Walk to sink_133.
Action 5: Walk to cupboard_130.
Action 6: look for bowl_2095 around cupboard_130.
Action 7: Walk to sink_133.
Action 8: Walk to wallshelf_301.
Action 9: look for bowl_2095 around wallshelf_301.
Action 10: Walk to sink_133.
Action 11: Walk to cupboard_131.
Action 12: Open cupboard_131.
Action 13: look for bowl_2095 around cupboard_131.
Action 14: Walk to sink_133.
Action 15: Walk to tvstand_186.
Action 16: look for bowl_2095 around tvstand_186.
Action 17: Walk to sink_133.
Action 18: Walk to cutting_board_2080.

##############################
From agent.py
exp(bowl_2095, cutting_board_2080)
Fail to find bowl_2095 around cutting_board_2080. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)walk_executor(table_127)exp(bowl_2095, table_127)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(sink_133)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, drawing_118, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(bowl_2095, table_127)
Fail to find bowl_2095 around table_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)walk_executor(bowl_2096)grab_executor(bowl_2096)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(sink_133)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py
walk_executor(bowl_2096)
Robot find: Robot is close to the bowl_2096. Robot is close to the table_127. 
##############################
From agent.py
grab_executor(bowl_2096)
Robot find: Robot is close to the bowl_2096. Robot is close to the table_127. Grabbing bowl_2096 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the bowl_2096. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the bowl_2096. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill the bowl with water. It has successfully grabbed bowl_2096 and reached the faucet_134, but it has not executed the action to fill the bowl with water.
##############################
From agent.py
Human Instruction: The robot needs to fill the bowl with water. It has successfully grabbed bowl_2096 and reached the faucet_134, but it has not executed the action to fill the bowl with water.

The actions you have taken:
Action 1: Walk to sink_133.
Action 2: Walk to kitchen_counter_128.
Action 3: look for bowl_2095 around kitchen_counter_128.
Action 4: Walk to sink_133.
Action 5: Walk to cupboard_130.
Action 6: look for bowl_2095 around cupboard_130.
Action 7: Walk to sink_133.
Action 8: Walk to wallshelf_301.
Action 9: look for bowl_2095 around wallshelf_301.
Action 10: Walk to sink_133.
Action 11: Walk to cupboard_131.
Action 12: Open cupboard_131.
Action 13: look for bowl_2095 around cupboard_131.
Action 14: Walk to sink_133.
Action 15: Walk to tvstand_186.
Action 16: look for bowl_2095 around tvstand_186.
Action 17: Walk to sink_133.
Action 18: Walk to cutting_board_2080.
Action 19: look for bowl_2095 around cutting_board_2080.
Action 20: Walk to sink_133.
Action 21: Walk to table_127.
Action 22: look for bowl_2095 around table_127.
Action 23: Walk to sink_133.
Action 24: Walk to bowl_2096.
Action 25: Grab bowl_2096.
Action 26: Walk to faucet_134.
Action 27: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_wallshelf_190(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==190
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve has_water(bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2096
        # Select the bowl with ID 2096

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        fill_bowl_with_water(bowl, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve has_water(bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2096
        # Select the bowl with ID 2096

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        fill_bowl_with_water(bowl, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: towel_rack_298, Robot is close to the bowl_2096. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the bowl_2096. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to turn on faucet_134 while holding bowl_2096 to fill the bowl with water.
##############################
From agent.py
Human Instruction: You need to turn on faucet_134 while holding bowl_2096 to fill the bowl with water.

The actions you have taken:
Action 1: Walk to sink_133.
Action 2: Walk to kitchen_counter_128.
Action 3: look for bowl_2095 around kitchen_counter_128.
Action 4: Walk to sink_133.
Action 5: Walk to cupboard_130.
Action 6: look for bowl_2095 around cupboard_130.
Action 7: Walk to sink_133.
Action 8: Walk to wallshelf_301.
Action 9: look for bowl_2095 around wallshelf_301.
Action 10: Walk to sink_133.
Action 11: Walk to cupboard_131.
Action 12: Open cupboard_131.
Action 13: look for bowl_2095 around cupboard_131.
Action 14: Walk to sink_133.
Action 15: Walk to tvstand_186.
Action 16: look for bowl_2095 around tvstand_186.
Action 17: Walk to sink_133.
Action 18: Walk to cutting_board_2080.
Action 19: look for bowl_2095 around cutting_board_2080.
Action 20: Walk to sink_133.
Action 21: Walk to table_127.
Action 22: look for bowl_2095 around table_127.
Action 23: Walk to sink_133.
Action 24: Walk to bowl_2096.
Action 25: Grab bowl_2096.
Action 26: Walk to faucet_134.
Action 27: Switch off faucet_134.
Action 28: Walk to faucet_308.
Action 29: Switch off faucet_308.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_bowl_2096_around_window_40(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind window_instance:item where:
            is_window(window_instance) and id[window_instance]==40
        achieve close_char(char,window_instance)
        if can_open(window_instance):
            achieve_once open(window_instance)
            exp(bowl,window_instance)
        else:
            exp(bowl,window_instance)
    eff:
        unknown[bowl]=False
        close[bowl,window_instance]=True
        close[window_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once inhand(bowl)
        achieve has_water(bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2096
        # Select the bowl with ID 2096
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134
        
        fill_bowl_with_water(bowl, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve_once inhand(bowl)
        achieve has_water(bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and id[bowl]==2096
        # Select the bowl with ID 2096
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134
        
        fill_bowl_with_water(bowl, faucet)

##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
switchon_executor(faucet_308)
Robot find: Robot is close to the bowl_2096. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the bowl_2096. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to turn on faucet_134 while holding bowl_2096 to fill the bowl with water.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_home_office_161(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(bowl,home_office_instance)
        else:
            exp(bowl,home_office_instance)
    eff:
        unknown[bowl]=False
        close[bowl,home_office_instance]=True
        close[home_office_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl) # A bowl with water
        bind table: item where:
            is_table(table) and inside(table, home_office) # A table inside the home office
        place_bowl_on_table(bowl, table) # Place the bowl with water on the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2096_around_home_office_161(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(bowl,home_office_instance)
        else:
            exp(bowl,home_office_instance)
    eff:
        unknown[bowl]=False
        close[bowl,home_office_instance]=True
        close[home_office_instance,bowl]=True
    

#goal_representation

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl) # A bowl with water
        bind table: item where:
            is_table(table) 
        bind home_office: item where:
            is_home_office(home_office)
        place_bowl_on_table(bowl, table) # Place the bowl with water on the table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl) # A bowl with water
        bind table: item where:
            is_table(table) 
        bind home_office: item where:
            is_home_office(home_office)
        place_bowl_on_table(bowl, table) # Place the bowl with water on the table in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(table_123)put_executor(bowl_2096, table_123)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, Robot is close to the bowl_2096. Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
put_executor(bowl_2096, table_123)
Robot find: Robot is close to the bowl_2096. Robot is close to the mat_114. Robot is close to the table_123. bowl_2096 is on table_123. bowl_2096 is close table_123. table_123 is close bowl_2096. bowl_2096 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the bowl with water as the action of switching on faucet_134 has not been executed while holding the bowl. After filling the bowl with water, place it on the table in the home office.
##############################
From agent.py
Human Instruction: You need to fill the bowl with water as the action of switching on faucet_134 has not been executed while holding the bowl. After filling the bowl with water, place it on the table in the home office.

The actions you have taken:
Action 1: Walk to sink_133.
Action 2: Walk to kitchen_counter_128.
Action 3: look for bowl_2095 around kitchen_counter_128.
Action 4: Walk to sink_133.
Action 5: Walk to cupboard_130.
Action 6: look for bowl_2095 around cupboard_130.
Action 7: Walk to sink_133.
Action 8: Walk to wallshelf_301.
Action 9: look for bowl_2095 around wallshelf_301.
Action 10: Walk to sink_133.
Action 11: Walk to cupboard_131.
Action 12: Open cupboard_131.
Action 13: look for bowl_2095 around cupboard_131.
Action 14: Walk to sink_133.
Action 15: Walk to tvstand_186.
Action 16: look for bowl_2095 around tvstand_186.
Action 17: Walk to sink_133.
Action 18: Walk to cutting_board_2080.
Action 19: look for bowl_2095 around cutting_board_2080.
Action 20: Walk to sink_133.
Action 21: Walk to table_127.
Action 22: look for bowl_2095 around table_127.
Action 23: Walk to sink_133.
Action 24: Walk to bowl_2096.
Action 25: Grab bowl_2096.
Action 26: Walk to faucet_134.
Action 27: Switch off faucet_134.
Action 28: Walk to faucet_308.
Action 29: Switch off faucet_308.
Action 30: Switch on faucet_308.
Action 31: Switch off faucet_308.
Action 32: Walk to table_123.
Action 33: Put bowl_2096 on table_123.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_basket_for_clothes_2040(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(cup,basket_for_clothes_instance)
        else:
            exp(cup,basket_for_clothes_instance)
    eff:
        unknown[cup]=False
        close[cup,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Ensure a bowl with water is selected
        
        bind home_office: item where:
            is_home_office(home_office)
        # Ensure the home office is selected

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Ensure a table in the home office is selected

        achieve_once on(bowl, table)
        # Place the bowl of water onto the table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Ensure a bowl with water is selected
        
        bind home_office: item where:
            is_home_office(home_office)
        # Ensure the home office is selected

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Ensure a table in the home office is selected

        achieve_once on(bowl, table)
        # Place the bowl of water onto the table in the home office

##############################
From agent.py-> find a plan in act()
grab_executor(bowl_2096)walk_executor(table_193)put_executor(bowl_2096, table_193)
##############################
From agent.py
grab_executor(bowl_2096)
Robot find: Robot is close to the bowl_2096. Robot is close to the mat_114. Robot is close to the table_123. Grabbing bowl_2096 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the bowl_2096. Robot is close to the table_193. 
##############################
From agent.py
put_executor(bowl_2096, table_193)
Robot find: Robot is close to the bowl_2096. Robot is close to the table_193. bowl_2096 is on table_193. bowl_2096 is close table_193. table_193 is close bowl_2096. bowl_2096 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the bowl with water before placing it on the table in the home office. There is no action indicating the bowl has been filled with water yet.
##############################
From agent.py
Human Instruction: You need to fill the bowl with water before placing it on the table in the home office. There is no action indicating the bowl has been filled with water yet.

The actions you have taken:
Action 1: Walk to sink_133.
Action 2: Walk to kitchen_counter_128.
Action 3: look for bowl_2095 around kitchen_counter_128.
Action 4: Walk to sink_133.
Action 5: Walk to cupboard_130.
Action 6: look for bowl_2095 around cupboard_130.
Action 7: Walk to sink_133.
Action 8: Walk to wallshelf_301.
Action 9: look for bowl_2095 around wallshelf_301.
Action 10: Walk to sink_133.
Action 11: Walk to cupboard_131.
Action 12: Open cupboard_131.
Action 13: look for bowl_2095 around cupboard_131.
Action 14: Walk to sink_133.
Action 15: Walk to tvstand_186.
Action 16: look for bowl_2095 around tvstand_186.
Action 17: Walk to sink_133.
Action 18: Walk to cutting_board_2080.
Action 19: look for bowl_2095 around cutting_board_2080.
Action 20: Walk to sink_133.
Action 21: Walk to table_127.
Action 22: look for bowl_2095 around table_127.
Action 23: Walk to sink_133.
Action 24: Walk to bowl_2096.
Action 25: Grab bowl_2096.
Action 26: Walk to faucet_134.
Action 27: Switch off faucet_134.
Action 28: Walk to faucet_308.
Action 29: Switch off faucet_308.
Action 30: Switch on faucet_308.
Action 31: Switch off faucet_308.
Action 32: Walk to table_123.
Action 33: Put bowl_2096 on table_123.
Action 34: Grab bowl_2096.
Action 35: Walk to table_193.
Action 36: Put bowl_2096 on table_193.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_cup_2087(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2087
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water in it

        bind table: item where:
            is_table(table) and is_home_office(table)
        # Select the table in the home office

        place_bowl_on_table(bowl, table)
        # Place the bowl with water on the table in the home office

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)
        # Select a table within the home office with a surface
        
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl that has water in it
        
        achieve on(bowl, table)
        # Place the bowl on the selected table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_clothes_gloves_2077_around_basket_for_clothes_2040(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, home_office)
        # Select a table within the home office with a surface

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl that has water in it

        achieve on(bowl, table)
        # Place the bowl on the selected table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water
        
        bind home_office: item where:
            is_home_office(home_office)
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        put_bowl_on_table(bowl, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place the bowl of water on the table in the home office." ?
Answer: Put the bowl on the table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_tvstand_135(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cup,tvstand_instance)
        else:
            exp(cup,tvstand_instance)
    eff:
        unknown[cup]=False
        close[cup,tvstand_instance]=True
        close[tvstand_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table) # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl that has water
        
        bind home_office: item where:
            is_home_office(home_office)
        # Identify the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office
        
        place_bowl_on_table(bowl, table)
        # Call the behavior to place the bowl of water on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2077_around_basket_for_clothes_2040(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl with water

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        place_bowl_on_table(bowl, table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2088_around_tvstand_135(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cup,tvstand_instance)
        else:
            exp(cup,tvstand_instance)
    eff:
        unknown[cup]=False
        close[cup,tvstand_instance]=True
        close[tvstand_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl with water

        bind table: item where:
            is_table(table) and exists room: item : (is_home_office(room) and inside(table, room))
        # Select a table in the home office

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5934, column 40.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_clothes_gloves_2077_around_basket_for_clothes_2040(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl with water

        bind table: item where:
            is_table(table) and exists room: item : (is_home_office(room) and inside(table, room))
        # Select a table in the home office

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_cup_2087(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2087
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_clothes_gloves_2077_around_basket_for_clothes_2040(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table in the home office
        achieve on(bowl, table) 
        # Place the bowl on the table in the home office

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2077_around_basket_for_clothes_2040(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_table(table:item, bowl:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table)
            is_home_office(room) and inside(table, room) # Ensure the table is in the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water in it

        put_on_table(table, bowl)
        # Execute the behavior to put the bowl on the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_cup_2089_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#goal_representation
 
behavior put_on_table(table:item, bowl:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind room: item where:
            is_home_office(room)
        # Ensure the room is the home office

        bind table: item where:
            is_table(table) and inside(table, room)
        # Ensure the table is in the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water in it

        put_on_table(table, bowl)
        # Execute the behavior to put the bowl on the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve has_water(bowl)
        # Ensures the bowl has water inside
        achieve_once on(bowl, table)
        # Places the bowl on the table in the home office

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office room
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table that is inside the home office

        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_cup_2087(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2087
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table) 

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl that has water
        
        bind home_office: item where:
            is_home_office(home_office)
            
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place the bowl of water on the table in the home office." ?
Answer: Put the bowl on the table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_cup_2087(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2087
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_home_office(table)
        # Select a table in the home office
        
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water
        
        place_bowl_on_table(bowl, table)
        # Place the bowl on the selected table in the home office
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2077_around_basket_for_clothes_2040(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the specified table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        move_bowl_to_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
javascript
behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the specified table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        bind home_office: item where:
            is_home_office(home_office)
        # Define home_office as an item of type home_office

        move_bowl_to_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'javascript') at line 5939, column 1.
Expected one of: 
	* OBJECTS
	* INIT
	* GOAL
	* TYPEDEF
	* BEHAVIOR
	* UNDIRECTED_GENERATOR
	* _PRAGMA_KEYWORD
	* DEF
	* INCLUDE
	* $END
	* DOMAIN
	* FEATURE
	* GENERATOR
	* IMPORT
	* CONTROLLER
	* _NEWLINE
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_cup_2088_around_trashcan_360(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==360
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(cup,trashcan_instance)
        else:
            exp(cup,trashcan_instance)
    eff:
        unknown[cup]=False
        close[cup,trashcan_instance]=True
        close[trashcan_instance,cup]=True
    

#goal_representation

behavior move_bowl_to_table(bowl:item, table:item):
    body:
        achieve_once on(bowl, table)
        # Place the bowl on the specified table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl that has water
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        move_bowl_to_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_clothes_gloves_2077_around_basket_for_clothes_2040(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        achieve on(bowl, table)
        # Place the bowl filled with water on the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_clothes_gloves_2077_around_basket_for_clothes_2040(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind table: item where:
            is_table(table) and exists room: item : (is_home_office(room) and inside(table, room))
        # Select a table in the home office

        achieve on(bowl, table)
        # Place the bowl filled with water on the table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5929, column 40.
Expected one of: 
	* SEMICOLON
	* _NEWLINE
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_box_2023_around_home_office_161(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(box,home_office_instance)
        else:
            exp(box,home_office_instance)
    eff:
        unknown[box]=False
        close[box,home_office_instance]=True
        close[home_office_instance,box]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind table: item where:
            is_table(table) and exists room: item : (is_home_office(room) and inside(table, room))
        # Select a table in the home office

        achieve on(bowl, table)
        # Place the bowl filled with water on the table in the home office

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(sink_133)', 'walk_executor(kitchen_counter_128)', 'walk_executor(sink_133)', 'walk_executor(cupboard_130)', 'walk_executor(sink_133)', 'walk_executor(wallshelf_301)', 'walk_executor(sink_133)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(sink_133)', 'walk_executor(tvstand_186)', 'walk_executor(sink_133)', 'walk_executor(cutting_board_2080)', 'walk_executor(sink_133)', 'walk_executor(table_127)', 'walk_executor(sink_133)', 'walk_executor(bowl_2096)', 'grab_executor(bowl_2096)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'switchon_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(table_123)', 'put_executor(bowl_2096, table_123)', 'grab_executor(bowl_2096)', 'walk_executor(table_193)', 'put_executor(bowl_2096, table_193)']
Time info:
Time consume: 467 seconds
Exp_helper query times: 1
Guidance query times: 2
library scale: 0
goal generate times: 17
goal correct times: 3
action_num: 29

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
