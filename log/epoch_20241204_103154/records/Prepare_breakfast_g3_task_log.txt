From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2023_around_fridge_289(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fruit,fridge_instance)
        else:
            exp(food_fruit,fridge_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,fridge_instance]=True
        close[fridge_instance,food_fruit]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def has_free_stove_pot_pot_with_water(pot:item, stove:item):
    # Determine if the pot is a free stove pot with water
    symbol has_water_and_on_stove = has_water(pot) and on(pot, stove)
    return has_water_and_on_stove

behavior boil_water(pot:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior put_egg_in_water(egg:item, pot:item):
    body:
        achieve inside(egg, pot)
        # Place the egg inside the pot

behavior observe_item_status(item:item):
    body:
        observe(item, "Check the items status")
        # Observe the items current status

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Identify an egg

        bind stove: item where:
            is_stove(stove)
        # Identify a stove

        bind pot: item where:
            is_pot(pot) and has_free_stove_pot_pot_with_water(pot, stove)
        # Identify a pot that is on the stove and has water

        boil_water(pot)
        put_egg_in_water(egg, pot)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_fruit_2023_around_fridge_289(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fruit,fridge_instance)
        else:
            exp(food_fruit,fridge_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,fridge_instance]=True
        close[fridge_instance,food_fruit]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation

def has_free_stove_pot_pot_with_water(pot:item, stove:item):
    # Determine if the pot is a free stove pot with water
    symbol has_water_and_on_stove = has_water(pot) and on(pot, stove)
    return has_water_and_on_stove

behavior boil_water(pot:item, stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior put_egg_in_water(egg:item, pot:item):
    body:
        achieve inside(egg, pot)
        # Place the egg inside the pot

behavior observe_item_status(item:item):
    body:
        observe(item, "Check the items status")
        # Observe the items current status

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Identify an egg

        bind stove: item where:
            is_stove(stove)
        # Identify a stove

        bind pot: item where:
            is_pot(pot) and has_free_stove_pot_pot_with_water(pot, stove)
        # Identify a pot that is on the stove and has water

        boil_water(pot, stove)
        put_egg_in_water(egg, pot)

#goal_representation_end

##############################
