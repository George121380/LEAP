{
    "behavior_data": {
        "Prepare dinner": [
            {
                "usage_description": "",
                "cdl": "behavior clean_item(item:item, sink:item):\n    body:\n        achieve inside(item, sink) # Ensure the item is placed inside the sink\n\n        if exists faucet: item: is_faucet(faucet) and close(faucet, sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_on(faucet) # Turn on the faucet if its available\n\n        wash(item) # Wash the item\n\n        if exists faucet: item: is_faucet(faucet) and close(faucet, sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_off(faucet) # Turn off the faucet after washing\n",
                "source_sub_task": "1. Clean the chicken and onions.",
                "functions": []
            },
            {
                "usage_description": "",
                "cdl": "behavior move_items_to_oven(chicken:item, onion:item, oven:item):\n    # Define the behavior to move chicken and onions into the oven\n    body:\n        achieve inside(chicken, oven)\n        # Achieve moving chicken inside the oven\n        achieve inside(onion, oven)\n        # Achieve moving onion inside the oven\n",
                "source_sub_task": "2. Put the chicken and onions in the oven to roast.",
                "functions": [
                    "def has_faucet_1(sink:item):\n    # Determine whether this sink has a faucet\n    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)\n    return has_faucet\n"
                ]
            },
            {
                "usage_description": "",
                "cdl": "behavior close_the_oven_door(oven:item):\n    # Define the behavior to close the oven door\n    body:\n        achieve closed(oven)\n",
                "source_sub_task": "2. Put the chicken and onions in the oven to roast.",
                "functions": [
                    "def has_faucet_1(sink:item):\n    # Determine whether this sink has a faucet\n    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)\n    return has_faucet\n"
                ]
            }
        ]
    },
    "function_name_mapping": {
        "has_faucet": "has_faucet_1"
    },
    "function_name_counts": {
        "has_faucet": 2
    }
}