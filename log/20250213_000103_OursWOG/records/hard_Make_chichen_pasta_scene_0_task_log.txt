From agent.py
Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta separately.', '2. Mix the cooked chicken and pasta together.', '3. Put the chicken pasta mixture onto a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_dry_pasta_2042_around_kitchen_counter_230(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_chicken(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior cook_pasta(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        bind pot_chicken: item where:
            is_pot(pot_chicken)

        bind pot_pasta: item where:
            is_pot(pot_pasta)

        fill_pot_with_water(pot_chicken, faucet)
        fill_pot_with_water(pot_pasta, faucet)

        place_pot_on_stove(pot_chicken, stove)
        place_pot_on_stove(pot_pasta, stove)

        turn_on_stove(stove)

        cook_chicken(chicken, pot_chicken)
        cook_pasta(pasta, pot_pasta)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_close_char not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_dry_pasta_2042_around_kitchen_counter_230(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_cat_2055_around_washing_machine_2007(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cat,washing_machine_instance)
        else:
            exp(cat,washing_machine_instance)
    eff:
        unknown[cat]=False
        close[cat,washing_machine_instance]=True
        close[washing_machine_instance,cat]=True
    

behavior find_hairbrush_2002_around_bathroom_counter_41(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(hairbrush,bathroom_counter_instance)
        else:
            exp(hairbrush,bathroom_counter_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,bathroom_counter_instance]=True
        close[bathroom_counter_instance,hairbrush]=True
    

#goal_representation

behavior cook_chicken(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior cook_pasta(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        bind pot_chicken: item where:
            is_pot(pot_chicken)

        bind pot_pasta: item where:
            is_pot(pot_pasta)

        fill_pot_with_water(pot_chicken, faucet)
        fill_pot_with_water(pot_pasta, faucet)

        place_pot_on_stove(pot_chicken, stove)
        place_pot_on_stove(pot_pasta, stove)

        turn_on_stove(stove)

        cook_chicken(chicken, pot_chicken)
        cook_pasta(pasta, pot_pasta)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior cook_chicken(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior cook_pasta(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        bind pot_chicken: item where:
            is_pot(pot_chicken)

        bind pot_pasta: item where:
            is_pot(pot_pasta)

        fill_pot_with_water(pot_chicken, faucet)
        fill_pot_with_water(pot_pasta, faucet)

        place_pot_on_stove(pot_chicken, stove)
        place_pot_on_stove(pot_pasta, stove)

        turn_on_stove(stove)

        cook_chicken(chicken, pot_chicken)
        cook_pasta(pasta, pot_pasta)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)switchon_executor(faucet_43)walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(kitchen_counter_230)exp(dry_pasta_2042, kitchen_counter_230)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(kitchen_counter_230)exp(dry_pasta_2042, kitchen_counter_230)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_232)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. faucet_232 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Robot is close to the faucet_232. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the fridge_289. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the pot_2069. 
##############################
From agent.py
putin_executor(food_chicken_2017, pot_2069)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the stove_2065. Robot is close to the pot_2069. pot_2069 is close food_chicken_2017. food_chicken_2017 is inside pot_2069. food_chicken_2017 is close pot_2069. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(dry_pasta_2042)
Robot find: Robot is close to the fridge_289. Robot is close to the dry_pasta_2042. 
##############################
From agent.py
grab_executor(dry_pasta_2042)
Robot find: Robot is close to the fridge_289. Robot is close to the dry_pasta_2042. Grabbing dry_pasta_2042 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the dry_pasta_2042. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Robot is close to the stove_2065. 
##############################
From agent.py
putin_executor(dry_pasta_2042, pot_2069)
Robot find: Robot is close to the dry_pasta_2042. Robot is close to the food_chicken_2017. Robot is close to the pot_2069. Robot is close to the stove_2065. pot_2069 is close dry_pasta_2042. dry_pasta_2042 is close pot_2069. dry_pasta_2042 is inside pot_2069. dry_pasta_2042 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to cook the chicken and pasta separately. Currently, both chicken and dry pasta have been placed into the same pot, which does not meet the sub-task requirement to cook them separately. You need to use separate pots for cooking the chicken and the pasta.
##############################
From agent.py
Human Instruction: You need to cook the chicken and pasta separately. Currently, both chicken and dry pasta have been placed into the same pot, which does not meet the sub-task requirement to cook them separately. You need to use separate pots for cooking the chicken and the pasta.

The actions you have taken:
Action 1: Walk to faucet_43.
Action 2: Switch on faucet_43.
Action 3: Walk to kitchen_counter_230.
Action 4: look for pot_2069 around kitchen_counter_230.
Action 5: Walk to faucet_43.
Action 6: Walk to pot_2069.
Action 7: Open pot_2069.
Action 8: Grab pot_2069.
Action 9: Walk to faucet_232.
Action 10: Switch on faucet_232.
Action 11: Switch off faucet_232.
Action 12: Walk to faucet_43.
Action 13: Walk to stove_2065.
Action 14: Put pot_2069 on stove_2065.
Action 15: Switch on stove_2065.
Action 16: Walk to fridge_289.
Action 17: Switch off fridge_289.
Action 18: Open fridge_289.
Action 19: look for food_chicken_2017 around fridge_289.
Action 20: Walk to faucet_43.
Action 21: Walk to food_chicken_2017.
Action 22: Grab food_chicken_2017.
Action 23: Walk to pot_2069.
Action 24: Put food_chicken_2017 into pot_2069.
Action 25: Walk to dry_pasta_2042.
Action 26: Grab dry_pasta_2042.
Action 27: Walk to pot_2069.
Action 28: Put dry_pasta_2042 into pot_2069.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_table_355(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_chicken_separately(chicken:item, pot:item, stove:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior cook_pasta_separately(pasta:item, pot:item, stove:item, faucet:item):
    body:
        achieve has_water(pot)
        achieve_once inside(pasta, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot) and id[pot]==2069

        bind stove: item where:
            is_stove(stove) and id[stove]==2065

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43

        cook_chicken_separately(chicken, pot, stove)

        bind pot_new: item where:
            is_pot(pot_new) and pot_new=pot

        cook_pasta_separately(pasta, pot_new, stove, faucet)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5845, column 40.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fork_2080_around_dishwasher_1001(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_116(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_cd_2075_around_drawing_239(cd:item):
    goal: not unknown(cd)
    body:
        assert is_cd(cd)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==239
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(cd,drawing_instance)
        else:
            exp(cd,drawing_instance)
    eff:
        unknown[cd]=False
        close[cd,drawing_instance]=True
        close[drawing_instance,cd]=True
    

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve is_on(faucet)
        achieve has_water(pot)

behavior place_chicken_in_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior place_pasta_in_pot(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot) and id[pot]==2069

        bind stove: item where:
            is_stove(stove) and id[stove]==2065

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43

        bind pot_new: item where:
            is_pot(pot_new) and pot_new=pot

        # Cook chicken separately
        place_chicken_in_pot(chicken, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

        # Cook pasta separately
        fill_pot_with_water(pot_new, faucet)
        place_pasta_in_pot(pasta, pot_new)
        place_pot_on_stove(pot_new, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5886, column 40.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_keyboard_415_around_closetdrawer_158(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(keyboard,closetdrawer_instance)
        else:
            exp(keyboard,closetdrawer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,closetdrawer_instance]=True
        close[closetdrawer_instance,keyboard]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve is_on(faucet)
        achieve has_water(pot)

behavior place_chicken_in_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior place_pasta_in_pot(pasta:item, pot_new:item):
    body:
        achieve_once inside(pasta, pot_new)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        
        bind pot_new: item where:
            is_pot(pot_new) and pot_new=pot

        bind stove: item where:
            is_stove(stove) and id[stove]==2065

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==43

        # Cook chicken separately
        place_chicken_in_pot(chicken, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

        # Cook pasta separately
        fill_pot_with_water(pot_new, faucet)
        place_pasta_in_pot(pasta, pot_new)
        place_pot_on_stove(pot_new, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_dishwasher_1001(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet) 
        achieve has_water(pot)

behavior place_chicken_in_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior place_pasta_in_pot(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior ensure_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot_chicken: item where:
            is_pot(pot_chicken) and id[pot_chicken]==2069

        bind pot_pasta: item where:
            is_pot(pot_pasta) and pot_pasta = pot_chicken

        bind stove_chicken: item where:
            is_stove(stove_chicken) and id[stove_chicken]==2065

        bind stove_pasta: item where:
            is_stove(stove_pasta) and stove_chicken = stove_pasta

        bind faucet1: item where:
            is_faucet(faucet1) and id[faucet1]==232

        bind faucet2: item where:
            is_faucet(faucet2) and faucet1 = faucet2
        
        fill_pot_with_water(pot_chicken, faucet1)
        fill_pot_with_water(pot_pasta, faucet2)
        place_chicken_in_pot(chicken, pot_chicken)
        place_pasta_in_pot(pasta, pot_pasta)
        ensure_pot_on_stove(pot_chicken, stove_chicken)
        ensure_pot_on_stove(pot_pasta, stove_pasta)
        turn_on_stove(stove_chicken)
        turn_on_stove(stove_pasta)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5846, column 45.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fork_2081_around_dishwasher_1001(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(pot)

behavior place_chicken_in_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior place_pasta_in_pot(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior ensure_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot_chicken: item where:
            is_pot(pot_chicken) and id[pot_chicken]==2069

        bind pot_pasta: item where:
            is_pot(pot_pasta) and pot_pasta=pot_chicken

        bind stove_chicken: item where:
            is_stove(stove_chicken) and id[stove_chicken]==2065

        bind stove_pasta: item where:
            is_stove(stove_pasta) and stove_chicken=stove_pasta

        bind faucet1: item where:
            is_faucet(faucet1) and id[faucet1]==232

        bind faucet2: item where:
            is_faucet(faucet2) and faucet1=faucet2
        
        fill_pot_with_water(pot_chicken, faucet1)
        fill_pot_with_water(pot_pasta, faucet2)
        place_chicken_in_pot(chicken, pot_chicken)
        place_pasta_in_pot(pasta, pot_pasta)
        ensure_pot_on_stove(pot_chicken, stove_chicken)
        ensure_pot_on_stove(pot_pasta, stove_pasta)
        turn_on_stove(stove_chicken)
        turn_on_stove(stove_pasta)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5863, column 44.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(pot)

behavior place_chicken_in_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior place_pasta_in_pot(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior ensure_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot_chicken: item where:
            is_pot(pot_chicken) and id[pot_chicken]==2069

        bind pot_pasta: item where:
            is_pot(pot_pasta) and pot_pasta=pot_chicken

        bind stove_chicken: item where:
            is_stove(stove_chicken) and id[stove_chicken]==2065

        bind stove_pasta: item where:
            is_stove(stove_pasta) and stove_chicken=stove_pasta

        bind faucet1: item where:
            is_faucet(faucet1) and id[faucet1]==232

        bind faucet2: item where:
            is_faucet(faucet2) and faucet1=faucet2
        
        fill_pot_with_water(pot_chicken, faucet1)
        fill_pot_with_water(pot_pasta, faucet2)
        place_chicken_in_pot(chicken, pot_chicken)
        place_pasta_in_pot(pasta, pot_pasta)
        ensure_pot_on_stove(pot_chicken, stove_chicken)
        ensure_pot_on_stove(pot_pasta, stove_pasta)
        turn_on_stove(stove_chicken)
        turn_on_stove(stove_pasta)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior separate_pasta_and_chicken(pasta:item, chicken:item, pot:item):
    body:
        achieve_once inside(pasta, pot)
        achieve_once inside(chicken, pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior cook_pasta_or_chicken(item:item, stove:item, pot:item):
    body:
        achieve_once inside(item, pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)

        bind pot_for_chicken: item where:
            is_pot(pot_for_chicken)

        bind pot_for_pasta: item where:
            is_pot(pot_for_pasta) and pot_for_pasta = pot_for_chicken

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        separate_pasta_and_chicken(dry_pasta, chicken, pot_for_pasta)
        fill_pot_with_water(pot_for_pasta, faucet)
        place_pot_on_stove(pot_for_pasta, stove)
        cook_pasta_or_chicken(dry_pasta, stove, pot_for_pasta)

        fill_pot_with_water(pot_for_chicken, faucet)
        place_pot_on_stove(pot_for_chicken, stove)
        cook_pasta_or_chicken(chicken, stove, pot_for_chicken)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5882, column 53.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fork_2080_around_dishwasher_1001(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

#goal_representation

behavior separate_pasta_and_chicken(pasta:item, chicken:item, pot_for_pasta:item, pot_for_chicken:item):
    body:
        achieve_once inside(pasta, pot_for_pasta)
        achieve_once inside(chicken, pot_for_chicken)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior cook_pasta_or_chicken(item:item, stove:item, pot:item):
    body:
        achieve_once inside(item, pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)

        bind pot_for_chicken: item where:
            is_pot(pot_for_chicken)

        bind pot_for_pasta: item where:
            is_pot(pot_for_pasta) and pot_for_pasta = pot_for_chicken

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        separate_pasta_and_chicken(dry_pasta, chicken, pot_for_pasta, pot_for_chicken)
        fill_pot_with_water(pot_for_pasta, faucet)
        place_pot_on_stove(pot_for_pasta, stove)
        cook_pasta_or_chicken(dry_pasta, stove, pot_for_pasta)

        fill_pot_with_water(pot_for_chicken, faucet)
        place_pot_on_stove(pot_for_chicken, stove)
        cook_pasta_or_chicken(chicken, stove, pot_for_chicken)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5846, column 53.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_mat_237_around_closetdrawer_117(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==117
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(mat,closetdrawer_instance)
        else:
            exp(mat,closetdrawer_instance)
    eff:
        unknown[mat]=False
        close[mat,closetdrawer_instance]=True
        close[closetdrawer_instance,mat]=True
    

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#goal_representation

behavior separate_pasta_and_chicken(pasta:item, chicken:item, pot_for_pasta:item, pot_for_chicken:item):
    body:
        achieve_once inside(pasta, pot_for_pasta)
        achieve_once inside(chicken, pot_for_chicken)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior cook_pasta_or_chicken(item:item, stove:item, pot:item):
    body:
        achieve_once inside(item, pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)

        bind pot_for_chicken: item where:
            is_pot(pot_for_chicken)

        bind pot_for_pasta: item where:
            is_pot(pot_for_pasta) and pot_for_pasta = pot_for_chicken

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        separate_pasta_and_chicken(dry_pasta, chicken, pot_for_pasta, pot_for_chicken)
        fill_pot_with_water(pot_for_pasta, faucet)
        place_pot_on_stove(pot_for_pasta, stove)
        cook_pasta_or_chicken(dry_pasta, stove, pot_for_pasta)

        fill_pot_with_water(pot_for_chicken, faucet)
        place_pot_on_stove(pot_for_chicken, stove)
        cook_pasta_or_chicken(chicken, stove, pot_for_chicken)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'walk_executor(kitchen_counter_230)', 'walk_executor(faucet_43)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_232)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'walk_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(faucet_43)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(pot_2069)', 'putin_executor(food_chicken_2017, pot_2069)', 'walk_executor(dry_pasta_2042)', 'grab_executor(dry_pasta_2042)', 'walk_executor(pot_2069)', 'putin_executor(dry_pasta_2042, pot_2069)']
Time info:
Time consume: 386 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 75
goal generate times: 4
goal correct times: 3
action_num: 26

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 11 steps
Keystate: k3 - Requires: 7 steps
Keystate: k4 - Requires: 7 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
