From agent.py
Reset goals: The sub-goals are: 
['1. Find and clean the fish.', '2. Prepare the other ingredients (e.g., vegetables, spices).', '3. Cook the ingredients and fish together to make the soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2054_around_kitchen_counter_129(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation

behavior find_and_clean_fish(fish:item):
    body:
        achieve_once visited(fish)
        # Visit the fish to find it
        achieve clean(fish)
        # Clean the fish

behavior __goal__():
    body:
        foreach fish: item:
            if is_food_fish(fish) and (not visited(fish) or dirty(fish)):
                find_and_clean_fish(fish)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior find_and_clean_fish(fish:item):
    body:
        achieve_once visited(fish)
        # Visit the fish to find it
        achieve clean(fish)
        # Clean the fish

behavior __goal__():
    body:
        foreach fish: item:
            if is_food_fish(fish) and (not visited(fish) or dirty(fish)):
                find_and_clean_fish(fish)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(food_fish_2054, kitchen_counter_129)walk_executor(food_fish_2054)obs(food_fish_2054, look around this place)grab_executor(food_fish_2054)wash_executor(food_fish_2054)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(food_fish_2054, kitchen_counter_129)
Fail to find food_fish_2054 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_fish_2054, cupboard_130)walk_executor(food_fish_2054)obs(food_fish_2054, look around this place)grab_executor(food_fish_2054)wash_executor(food_fish_2054)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(food_fish_2054, cupboard_130)
Fail to find food_fish_2054 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_fish_2054, fridge_140)walk_executor(food_fish_2054)obs(food_fish_2054, look around this place)grab_executor(food_fish_2054)wash_executor(food_fish_2054)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_fish_2054, fridge_140)
Find food_fish_2054. 
##############################
From agent.py-> find a plan in act()
obs(food_fish_2054, look around this place)grab_executor(food_fish_2054)wash_executor(food_fish_2054)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
obs(food_fish_2054, look around this place)
Get this information:  food_fish_2054 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_fish_2054 is close to fridge_140. food_fish_2054 is close to character_219. food_fish_2054 is DIRTY.
##############################
From agent.py
grab_executor(food_fish_2054)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
wash_executor(food_fish_2054)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. food_fish_2054 is cleaned. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_fish_2054. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_vegetables_and_spices(vegetable:item, spice:item):
    body:
        achieve_once visited(vegetable)
        # Find and visit the vegetable to prepare it
        achieve_once visited(spice)
        # Find and visit the spice to prepare it

behavior clean_vegetable(vegetable:item):
    body:
        achieve clean(vegetable)
        # Clean the vegetable

behavior prepare_spices(spice:item):
    body:
        achieve_once inhand(spice)
        # Temporarily hold the spice in hand for preparation

behavior place_vegetable_on_cutting_board(vegetable:item, board:item):
    body:
        achieve_once on(vegetable, board)
        # Place the vegetable on the cutting board

behavior cut_vegetable(vegetable:item, knife:item):
    body:
        achieve_once cut(vegetable)
        # Cut the vegetable

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                find_vegetables_and_spices(vegetable, spice)

        bind vegetable: item where:
            is_food_vegetable(vegetable) and visited(vegetable)

        foreach spice: item:
            if is_sauce(spice) and not visited(spice):
                find_vegetables_and_spices(vegetable, spice)

        bind spice: item where:
            is_sauce(spice) and visited(spice)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        clean_vegetable(vegetable)
        prepare_spices(spice)
        place_vegetable_on_cutting_board(vegetable, cutting_board)
        cut_vegetable(vegetable, knife)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: spice; available variables: [Variable<vegetable: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#goal_representation
behavior find_vegetables_and_spices(vegetable:item, spice:item):
    body:
        achieve_once visited(vegetable)
        # Find and visit the vegetable to prepare it
        achieve_once visited(spice)
        # Find and visit the spice to prepare it

behavior clean_vegetable(vegetable:item):
    body:
        achieve clean(vegetable)
        # Clean the vegetable

behavior prepare_spices(spice:item):
    body:
        achieve_once inhand(spice)
        # Temporarily hold the spice in hand for preparation

behavior place_vegetable_on_cutting_board(vegetable:item, board:item):
    body:
        achieve_once on(vegetable, board)
        # Place the vegetable on the cutting board

behavior cut_vegetable(vegetable:item, knife:item):
    body:
        achieve_once cut(vegetable)
        # Cut the vegetable

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                foreach spice: item:
                    if is_sauce(spice) and not visited(spice):
                        find_vegetables_and_spices(vegetable, spice)

        bind vegetable: item where:
            is_food_vegetable(vegetable) and visited(vegetable)

        bind spice: item where:
            is_sauce(spice) and visited(spice)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        clean_vegetable(vegetable)
        prepare_spices(spice)
        place_vegetable_on_cutting_board(vegetable, cutting_board)
        cut_vegetable(vegetable, knife)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior find_vegetables_and_spices(vegetable:item, spice:item):
    body:
        achieve_once visited(vegetable)
        # Find and visit the vegetable to prepare it
        achieve_once visited(spice)
        # Find and visit the spice to prepare it

behavior clean_vegetable(vegetable:item):
    body:
        achieve clean(vegetable)
        # Clean the vegetable

behavior prepare_spices(spice:item):
    body:
        achieve_once inhand(spice)
        # Temporarily hold the spice in hand for preparation

behavior place_vegetable_on_cutting_board(vegetable:item, board:item):
    body:
        achieve_once on(vegetable, board)
        # Place the vegetable on the cutting board

behavior cut_vegetable(vegetable:item, knife:item):
    body:
        achieve_once cut(vegetable)
        # Cut the vegetable

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                foreach spice: item:
                    if is_sauce(spice) and not visited(spice):
                        find_vegetables_and_spices(vegetable, spice)

        bind vegetable: item where:
            is_food_vegetable(vegetable) and visited(vegetable)

        bind spice: item where:
            is_sauce(spice) and visited(spice)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        clean_vegetable(vegetable)
        prepare_spices(spice)
        place_vegetable_on_cutting_board(vegetable, cutting_board)
        cut_vegetable(vegetable, knife)
##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2072)obs(food_vegetable_2072, look around this place)walk_executor(sauce_2101)obs(sauce_2101, look around this place)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(sauce_2101)grab_executor(sauce_2101)walk_executor(cutting_board_2080)put_executor(food_vegetable_2072, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_vegetable_2072)cut_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. 
##############################
From agent.py
obs(food_vegetable_2072, look around this place)
Get this information:  food_vegetable_2072 is close to fridge_140. food_vegetable_2072 is close to character_219. food_vegetable_2072 is inside dining_room_1. food_vegetable_2072 is inside fridge_140. food_vegetable_2072 is DIRTY.
##############################
From agent.py
walk_executor(sauce_2101)
Robot find: Robot is close to the food_fish_2054. Robot is close to the fridge_140. Robot is close to the sauce_2101. 
##############################
From agent.py
obs(sauce_2101, look around this place)
Get this information:  sauce_2101 is close to fridge_140. sauce_2101 is close to character_219. sauce_2101 is inside dining_room_1. sauce_2101 is inside fridge_140.
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the fridge_140. Robot is close to the food_vegetable_2072. 
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the fridge_140. Robot is close to the food_vegetable_2072. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_fish_2054. Robot is close to the fridge_140. Robot is close to the food_vegetable_2072. food_vegetable_2072 is cleaned. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(sauce_2101)
Robot find: Robot is close to the food_fish_2054. Robot is close to the food_vegetable_2072. Robot is close to the fridge_140. Robot is close to the sauce_2101. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_stove_2090(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_napkin_2014_around_kitchen_counter_128(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(napkin,kitchen_counter_instance)
        else:
            exp(napkin,kitchen_counter_instance)
    eff:
        unknown[napkin]=False
        close[napkin,kitchen_counter_instance]=True
        close[kitchen_counter_instance,napkin]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_and_prepare_vegetables(vegetable:item, faucet:item):
    body:
        if dirty(vegetable):
            # Wash the vegetable if it is dirty
            achieve clean(vegetable)

behavior prepare_spices(spice:item):
    body:
        achieve_once visited(spice)
        # Check and prepare the spice

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and dirty(vegetable):
                bind faucet: item where:
                    is_faucet(faucet)
                clean_and_prepare_vegetables(vegetable, faucet)

        foreach spice: item:
            if is_sauce(spice) and not visited(spice):
                prepare_spices(spice)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior gather_ingredients(vegetable:item, spice:item):
    body:
        achieve_once visited(vegetable)
        achieve_once clean(vegetable)
        # Visit and clean the vegetable

        achieve_once visited(spice)
        # Visit the spice to find it

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                gather_ingredients(vegetable, none)

        bind vegetable: item where:
            is_food_vegetable(vegetable) and visited(vegetable)

        foreach spice: item:
            if is_sauce(spice) and not visited(spice):
                gather_ingredients(none, spice)

        bind spice: item where:
            is_sauce(spice) and visited(spice) and id[spice] = 2101

        gather_ingredients(vegetable, spice)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5908, column 62.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#goal_representation
 
behavior gather_ingredients(vegetable:item, spice:item):
    body:
        achieve_once visited(vegetable)
        achieve_once clean(vegetable)
        # Visit and clean the vegetable

        achieve_once visited(spice)
        # Visit the spice to find it

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                gather_ingredients(vegetable, none)

        bind vegetable: item where:
            is_food_vegetable(vegetable) and visited(vegetable)

        foreach spice: item:
            if is_sauce(spice) and not visited(spice):
                gather_ingredients(none, spice)

        bind spice: item where:
            is_sauce(spice) and visited(spice) and id[spice] == 2101

        gather_ingredients(vegetable, spice)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: none; available variables: [Variable<vegetable: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_oil_2005_around_kitchen_counter_128(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#goal_representation
 
behavior gather_ingredients(vegetable:item, spice:item):
    body:
        achieve_once visited(vegetable)
        achieve_once clean(vegetable)
        # Visit and clean the vegetable

        achieve_once visited(spice)
        # Visit the spice to find it

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                gather_ingredients(vegetable, spice:none)

        bind vegetable: item where:
            is_food_vegetable(vegetable) and visited(vegetable)

        foreach spice: item:
            if is_sauce(spice) and not visited(spice):
                gather_ingredients(vegetable:none, spice)

        bind spice: item where:
            is_sauce(spice) and visited(spice) and id[spice] == 2101

        gather_ingredients(vegetable, spice)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation

def has_clean_vegetables():
    # Check if there are any washed vegetables by checking the state clean and type is_food_vegetable
    symbol is_cleaned_vegetable = exists v: item : (is_food_vegetable(v) and clean(v))
    return is_cleaned_vegetable

behavior find_and_clean_vegetables(vegetable:item):
    body:
        achieve_once visited(vegetable)
        # Mark the vegetable as visited after searching
        achieve clean(vegetable)
        # Ensure the vegetable is clean

behavior __goal__():
    body:
        if not has_clean_vegetables():
            # If no clean vegetables are found, search and clean
            foreach vegetable: item:
                if is_food_vegetable(vegetable) and not visited(vegetable):
                    find_and_clean_vegetables(vegetable)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
def is_food_item_observed(food_item:item):
    # Function to check if the food item (vegetables or spices) has been observed
    symbol observed=visited(food_item)
    return observed

behavior search_for_ingredients(food_item:item):
    body:
        achieve_once visited(food_item)
        # Visit the food item to find it

behavior clean_ingredient(ingredient:item):
    body:
        achieve clean(ingredient)
        # Clean the ingredient

behavior __goal__():
    body:
        foreach food_item: item:
            if (is_food_vegetable(food_item) or is_sauce(food_item)) and not is_food_item_observed(food_item):
                # Check all unvisited food items that are either vegetables or spices
                search_for_ingredients(food_item)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and dirty(vegetable):
                clean_ingredient(vegetable)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_oil_2102_around_kitchen_counter_128(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_vegetables(vegetable:item):
    body:
        achieve_once visited(vegetable)

behavior clean_vegetables(vegetable:item):
    body:
        achieve clean(vegetable)

behavior observe_spices(spice:item):
    body:
        achieve_once visited(spice)

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                observe_vegetables(vegetable)
        
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and dirty(vegetable):
                clean_vegetables(vegetable)
        
        foreach spice: item:
            if is_sauce(spice) and not visited(spice):
                observe_spices(spice)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_stamp_2031_around_basket_for_clothes_2040(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(stamp,basket_for_clothes_instance)
        else:
            exp(stamp,basket_for_clothes_instance)
    eff:
        unknown[stamp]=False
        close[stamp,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,stamp]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_vegetables_and_spices(vegetable:item, spices:item):
    body:
        achieve_once inhand(vegetable)
        # Although inhand is typically avoided, it is used here to temporarily hold the vegetable for washing

behavior clean_vegetable(vegetable:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to wash the vegetable
        achieve is_on(faucet) # Ensure the faucet is on
        achieve clean(vegetable) 
        # Wash the vegetable until it is clean

behavior observe_spices(spices:item):
    body:
        achieve_once visited(spices)
        # Observe the spices after washing the vegetable

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable) and not clean(vegetable)
        # Select a dirty vegetable

        bind spices: item where:
            is_sauce(spices) and visited(spices)
        # Select visited spices, although sauce cannot be grabbed according to trial and error information

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        prepare_vegetables_and_spices(vegetable, spices)
        clean_vegetable(vegetable, faucet)
        observe_spices(spices)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_item_observed(item:item):
    # Function to check if the item has been observed
    symbol observed=visited(item)
    return observed

behavior find_and_prepare_ingredients(ingredient:item):
    body:
        achieve_once visited(ingredient)
        # Visit the ingredient to find it

behavior clean_ingredient(ingredient:item):
    body:
        achieve clean(ingredient)
        # Clean the ingredient

behavior __goal__():
    body:
        foreach item: item:
            if (is_food_vegetable(item) or is_sauce(item)) and not is_item_observed(item):
                # Check all unvisited items that are vegetables or sauces
                find_and_prepare_ingredients(item)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and dirty(vegetable):
                # Clean all dirty vegetables
                clean_ingredient(vegetable)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_dresser_377(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior clean_ingredients(vegetable:item):
    body:
        achieve clean(vegetable)

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and dirty(vegetable):
                clean_ingredients(vegetable)
        
        foreach spices: item:
            if is_food_food(spices) and dirty(spices):
                clean_ingredients(spices)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation

behavior find_and_clean_vegetables(vegetable:item):
    body:
        achieve_once visited(vegetable)
        achieve clean(vegetable)

behavior find_and_gather_spices(spice:item):
    body:
        achieve_once visited(spice)

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                find_and_clean_vegetables(vegetable)

        foreach spice: item:
            if is_sauce(spice) and not visited(spice):
                if spice = sauce_2101:
                    find_and_gather_spices(spice)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('EQUAL', '=') at line 5903, column 26.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#goal_representation
behavior find_and_clean_vegetables(vegetable:item):
    body:
        achieve_once visited(vegetable)
        achieve clean(vegetable)

behavior find_and_gather_spices(spice:item):
    body:
        achieve_once visited(spice)

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                find_and_clean_vegetables(vegetable)

        foreach spice: item:
            if is_sauce(spice) and not visited(spice):
                if spice == sauce_2101:
                    find_and_gather_spices(spice)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: sauce_2101; available variables: [Variable<spice: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fork_2103_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_oil_2005_around_kitchen_counter_128(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#goal_representation
behavior find_and_clean_vegetables(vegetable:item):
    body:
        achieve_once visited(vegetable)
        achieve clean(vegetable)

behavior find_and_gather_spices(spice:item):
    body:
        achieve_once visited(spice)

behavior __goal__():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and not visited(vegetable):
                find_and_clean_vegetables(vegetable)

        bind sauce_2101: item where:
            is_sauce(sauce_2101)

        if not visited(sauce_2101):
            find_and_gather_spices(sauce_2101)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Cook a pot of fish soup.
Action History:
['walk_executor(kitchen_counter_129)', 'walk_executor(cupboard_130)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_fish_2054)', 'wash_executor(food_fish_2054)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(food_vegetable_2072)', 'walk_executor(sauce_2101)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'wash_executor(food_vegetable_2072)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(sauce_2101)', 'grab_executor(sauce_2101) (Failed)']
Time info:
Time consume: 261 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 66
goal generate times: 11
goal correct times: 3
action_num: 18

Task complete rate:
Keystate: k1 - Requires: 23 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
