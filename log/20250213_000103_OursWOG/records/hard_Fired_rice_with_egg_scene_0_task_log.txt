From agent.py
Reset goals: The sub-goals are: 
['1. Gather rice, eggs, and any additional ingredients needed for the fried rice.', '2. Cook the rice and scramble the eggs separately.', '3. Combine the cooked rice and scrambled eggs in a pan and fry together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_sauce_2078_around_kitchen_counter_230(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(sauce,kitchen_counter_instance)
        else:
            exp(sauce,kitchen_counter_instance)
    eff:
        unknown[sauce]=False
        close[sauce,kitchen_counter_instance]=True
        close[kitchen_counter_instance,sauce]=True
    

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
behavior find_rice_and_eggs(rice:item, egg:item):
    body:
        achieve_once visited(rice)
        achieve_once visited(egg)

behavior find_additional_ingredients(ingredient:item):
    body:
        achieve_once visited(ingredient)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        find_rice_and_eggs(rice, egg)

        foreach ingredient: item:
            if (is_food_vegetable(ingredient) or is_sauce(ingredient)) and not visited(ingredient):
                find_additional_ingredients(ingredient)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_rice_and_eggs(rice:item, egg:item):
    body:
        achieve_once visited(rice)
        achieve_once visited(egg)

behavior find_additional_ingredients(ingredient:item):
    body:
        achieve_once visited(ingredient)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        find_rice_and_eggs(rice, egg)

        foreach ingredient: item:
            if (is_food_vegetable(ingredient) or is_sauce(ingredient)) and not visited(ingredient):
                find_additional_ingredients(ingredient)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_rice_2036, kitchen_counter_230)walk_executor(food_rice_2036)obs(food_rice_2036, look around this place)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)obs(food_egg_2020, look around this place)walk_executor(kitchen_counter_230)exp(food_vegetable_2041, kitchen_counter_230)walk_executor(food_vegetable_2041)obs(food_vegetable_2041, look around this place)walk_executor(kitchen_counter_230)exp(sauce_2078, kitchen_counter_230)walk_executor(sauce_2078)obs(sauce_2078, look around this place)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_rice_2036, kitchen_counter_230)
Fail to find food_rice_2036 around kitchen_counter_230. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find and crack an egg into a bowl, and beat it well.', '2. Fry the rice with the beaten egg in a pan until evenly cooked.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_break_egg(egg:item, bowl:item):
    body:
        achieve_once visited(egg)
        achieve_once inside(egg, bowl)

behavior beat_egg_in_bowl(bowl:item):
    body:
        achieve clean(bowl)
        # Assume clean indicates the egg is beaten well

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind bowl: item where:
            is_bowl(bowl)

        find_and_break_egg(egg, bowl)
        beat_egg_in_bowl(bowl)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_break_egg(egg:item, bowl:item):
    body:
        achieve_once visited(egg)
        achieve_once inside(egg, bowl)

behavior beat_egg_in_bowl(bowl:item):
    body:
        achieve clean(bowl)
        # Assume clean indicates the egg is beaten well

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind bowl: item where:
            is_bowl(bowl)

        find_and_break_egg(egg, bowl)
        beat_egg_in_bowl(bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)obs(food_egg_2020, look around this place)walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(bowl_2071, dishwasher_1001)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(bowl_2071)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
obs(food_egg_2020, look around this place)walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(bowl_2071, dishwasher_1001)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(bowl_2071)switchoff_executor(faucet_43)
##############################
From agent.py
obs(food_egg_2020, look around this place)
Get this information:  food_egg_2020 is inside fridge_289. food_egg_2020 is inside dining_room_201. food_egg_2020 is close to fridge_289. food_egg_2020 is close to character_65. food_egg_2020 is CLEAN.
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
exp(bowl_2071, dishwasher_1001)
Fail to find bowl_2071 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(curtain_25)open_executor(curtain_25)exp(bowl_2071, curtain_25)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(bowl_2071)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(curtain_25)
Robot find: Robot is close to the curtain_25. 
##############################
From agent.py
open_executor(curtain_25)
Robot find: Robot is close to the curtain_25. curtain_25 is opened. 
##############################
From agent.py
exp(bowl_2071, curtain_25)
Fail to find bowl_2071 around curtain_25. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_295)open_executor(oven_295)exp(bowl_2071, oven_295)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(bowl_2071)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py
exp(bowl_2071, oven_295)
Fail to find bowl_2071 around oven_295. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(bowl_2071, cupboard_229)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(bowl_2071)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(bowl_2071, cupboard_229)
Fail to find bowl_2071 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(washing_machine_2007)open_executor(washing_machine_2007)exp(bowl_2071, washing_machine_2007)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(bowl_2071)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(washing_machine_2007)
Robot find: Robot is close to the washing_machine_2007. 
##############################
From agent.py
open_executor(washing_machine_2007)
Robot find: Robot is close to the washing_machine_2007. washing_machine_2007 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2071 ?
Answer: Go to dining_room_201. You will find bowl_2071 on top of table_226. The bowl is positioned near the center area of the table.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_201. You will find bowl_2071 on top of table_226. The bowl is positioned near the center area of the table.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_rice_2036 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Observe around food_egg_2020 with the question of look around this place.
Action 8: Walk to dishwasher_1001.
Action 9: Open dishwasher_1001.
Action 10: look for bowl_2071 around dishwasher_1001.
Action 11: Walk to curtain_25.
Action 12: Open curtain_25.
Action 13: look for bowl_2071 around curtain_25.
Action 14: Walk to oven_295.
Action 15: Open oven_295.
Action 16: look for bowl_2071 around oven_295.
Action 17: Walk to cupboard_229.
Action 18: Open cupboard_229.
Action 19: look for bowl_2071 around cupboard_229.
Action 20: Walk to washing_machine_2007.
Action 21: Open washing_machine_2007.

##############################
From agent.py
exp(bowl_2071, washing_machine_2007)
Fail to find bowl_2071 around washing_machine_2007. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(bowl_2071, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(bowl_2071)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py
exp(bowl_2071, table_226)
Find bowl_2071. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)grab_executor(bowl_2071)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(bowl_2071)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the food_egg_2020. Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py
putin_executor(food_egg_2020, bowl_2071)
Robot find: Robot is close to the food_egg_2020. Robot is close to the table_226. Robot is close to the bowl_2071. bowl_2071 is close food_egg_2020. food_egg_2020 is inside bowl_2071. food_egg_2020 is close bowl_2071. food_egg_2020 released by right hand. 
##############################
From agent.py
grab_executor(bowl_2071)
Robot find: Robot is close to the food_egg_2020. Robot is close to the table_226. Robot is close to the bowl_2071. Grabbing bowl_2071 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
wash_executor(bowl_2071)
Robot find: Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. bowl_2071 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the bowl_2071. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to beat the egg in the bowl.
##############################
From agent.py
Human Instruction: You need to beat the egg in the bowl.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_rice_2036 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Observe around food_egg_2020 with the question of look around this place.
Action 8: Walk to dishwasher_1001.
Action 9: Open dishwasher_1001.
Action 10: look for bowl_2071 around dishwasher_1001.
Action 11: Walk to curtain_25.
Action 12: Open curtain_25.
Action 13: look for bowl_2071 around curtain_25.
Action 14: Walk to oven_295.
Action 15: Open oven_295.
Action 16: look for bowl_2071 around oven_295.
Action 17: Walk to cupboard_229.
Action 18: Open cupboard_229.
Action 19: look for bowl_2071 around cupboard_229.
Action 20: Walk to washing_machine_2007.
Action 21: Open washing_machine_2007.
Action 22: look for bowl_2071 around washing_machine_2007.
Action 23: Walk to table_226.
Action 24: look for bowl_2071 around table_226.
Action 25: Walk to food_egg_2020.
Action 26: Grab food_egg_2020.
Action 27: Walk to bowl_2071.
Action 28: Put food_egg_2020 into bowl_2071.
Action 29: Grab bowl_2071.
Action 30: Walk to faucet_43.
Action 31: Switch on faucet_43.
Action 32: Wash bowl_2071.
Action 33: Switch off faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior find_and_beat_egg(egg:item, bowl:item):
    body:
        achieve_once close_char(char, egg)
        # Approach the egg to observe its condition
        achieve_once visited(egg)
        achieve_once inside(egg, bowl)
        # Crack and place the egg inside the bowl
        achieve clean(bowl)
        # Ensure the bowl is clean
        achieve_once inside_char(char, bowl)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind bowl: item where:
            is_bowl(bowl)

        find_and_beat_egg(egg, bowl)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_mousepad_167(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(pencil,mousepad_instance)
        else:
            exp(pencil,mousepad_instance)
    eff:
        unknown[pencil]=False
        close[pencil,mousepad_instance]=True
        close[mousepad_instance,pencil]=True
    

behavior find_towel_2058_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_prepare_egg(egg:item, bowl:item):
    body:
        achieve_once visited(egg)
        # Observe the egg to confirm location and state
        achieve_once visited(bowl)
        # Observe the bowl to confirm location and state

behavior crack_and_beat_egg(egg:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        # Crack the egg into the bowl
        achieve cut(egg)
        # Beat the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to use

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to use

        find_and_prepare_egg(egg, bowl)
        crack_and_beat_egg(egg, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_and_prepare_egg(egg:item, bowl:item):
    body:
        achieve_once visited(egg)
        # Observe the egg to confirm location and state
        achieve_once visited(bowl)
        # Observe the bowl to confirm location and state

behavior crack_and_beat_egg(egg:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        # Crack the egg into the bowl
        achieve cut(egg)
        # Beat the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to use

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to use

        find_and_prepare_egg(egg, bowl)
        crack_and_beat_egg(egg, bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)obs(food_egg_2020, look around this place)obs(bowl_2071, look around this place)grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_egg_2020. 
##############################
From agent.py
obs(food_egg_2020, look around this place)
Get this information:  food_egg_2020 is inside dining_room_201. food_egg_2020 is inside bowl_2071. food_egg_2020 is close to bowl_2071. food_egg_2020 is close to character_65. food_egg_2020 is CLEAN.
##############################
From agent.py
obs(bowl_2071, look around this place)
Get this information:  bowl_2071 is close to character_65. bowl_2071 is inside dining_room_201. food_egg_2020 is inside bowl_2071. bowl_2071 is CLEAN.
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_egg_2020, cutting_board_2051)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_egg_2020. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_egg_2020. food_egg_2020 is close cutting_board_2051. food_egg_2020 is on cutting_board_2051. food_egg_2020 released by left hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the bowl_2071. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the bowl_2071. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by left hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the bowl_2071. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py
cut_executor(food_egg_2020)
Robot find: Robot is close to the bowl_2071. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to beat the egg that has been cracked into the bowl.
##############################
From agent.py
Human Instruction: The robot needs to beat the egg that has been cracked into the bowl.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_rice_2036 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Observe around food_egg_2020 with the question of look around this place.
Action 8: Walk to dishwasher_1001.
Action 9: Open dishwasher_1001.
Action 10: look for bowl_2071 around dishwasher_1001.
Action 11: Walk to curtain_25.
Action 12: Open curtain_25.
Action 13: look for bowl_2071 around curtain_25.
Action 14: Walk to oven_295.
Action 15: Open oven_295.
Action 16: look for bowl_2071 around oven_295.
Action 17: Walk to cupboard_229.
Action 18: Open cupboard_229.
Action 19: look for bowl_2071 around cupboard_229.
Action 20: Walk to washing_machine_2007.
Action 21: Open washing_machine_2007.
Action 22: look for bowl_2071 around washing_machine_2007.
Action 23: Walk to table_226.
Action 24: look for bowl_2071 around table_226.
Action 25: Walk to food_egg_2020.
Action 26: Grab food_egg_2020.
Action 27: Walk to bowl_2071.
Action 28: Put food_egg_2020 into bowl_2071.
Action 29: Grab bowl_2071.
Action 30: Walk to faucet_43.
Action 31: Switch on faucet_43.
Action 32: Wash bowl_2071.
Action 33: Switch off faucet_43.
Action 34: Walk to food_egg_2020.
Action 35: Observe around food_egg_2020 with the question of look around this place.
Action 36: Observe around bowl_2071 with the question of look around this place.
Action 37: Grab food_egg_2020.
Action 38: Walk to cutting_board_2051.
Action 39: Put food_egg_2020 on cutting_board_2051.
Action 40: Walk to knife_2050.
Action 41: Grab knife_2050.
Action 42: Walk to food_egg_2020.
Action 43: Cut food_egg_2020.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_stove_2065(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(plate,stove_instance)
        else:
            exp(plate,stove_instance)
    eff:
        unknown[plate]=False
        close[plate,stove_instance]=True
        close[stove_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_bowl(bowl:item):
    body:
        achieve_once visited(bowl)

behavior crack_and_beat_egg(egg:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        achieve cut(egg) # Assume cut indicates cracking
        achieve clean(bowl) # Assume cleaning implies thorough beating

behavior __goal__():
    body:
        foreach bowl: item:
            if is_bowl(bowl) and not visited(bowl):
                find_bowl(bowl)
                
        bind bowl: item where:
            is_bowl(bowl) and visited(bowl)

        bind egg: item where:
            is_food_egg(egg)

        crack_and_beat_egg(egg, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_bowl(bowl:item):
    body:
        achieve_once visited(bowl)

behavior crack_and_beat_egg(egg:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        achieve cut(egg) # Assume cut indicates cracking
        achieve clean(bowl) # Assume cleaning implies thorough beating

behavior __goal__():
    body:
        foreach bowl: item:
            if is_bowl(bowl) and not visited(bowl):
                find_bowl(bowl)
                
        bind bowl: item where:
            is_bowl(bowl) and visited(bowl)

        bind egg: item where:
            is_food_egg(egg)

        crack_and_beat_egg(egg, bowl)

##############################
From agent.py-> find a plan in act()
obs(bowl_2071, look around this place)walk_executor(bowl_2072)obs(bowl_2072, look around this place)walk_executor(kitchen_counter_230)put_executor(knife_2050, kitchen_counter_230)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(bowl_2071)putin_executor(food_egg_2020, bowl_2071)
##############################
From agent.py
obs(bowl_2071, look around this place)
Get this information:  bowl_2071 is close to character_65. bowl_2071 is inside dining_room_201. bowl_2071 is CLEAN.
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the bowl_2071. Robot is close to the knife_2050. Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
obs(bowl_2072, look around this place)
Get this information:  bowl_2072 is close to table_226. bowl_2072 is close to character_65. bowl_2072 is on table_226. bowl_2072 is inside dining_room_201. bowl_2072 is DIRTY.
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the bowl_2071. Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(knife_2050, kitchen_counter_230)
Robot find: Robot is close to the bowl_2071. Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. knife_2050 is close kitchen_counter_230. knife_2050 is on kitchen_counter_230. knife_2050 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the bowl_2071. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the bowl_2071. Robot is close to the cutting_board_2051. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_egg_2020. 
##############################
From agent.py
putin_executor(food_egg_2020, bowl_2071)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_egg_2020. bowl_2071 is close food_egg_2020. food_egg_2020 is inside bowl_2071. food_egg_2020 is close bowl_2071. food_egg_2020 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot has put the egg in the bowl and cracked it by cutting. However, the robot needs to beat the egg inside the bowl, which has not yet been done.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_powersocket_412(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==412
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(mouse,powersocket_instance)
        else:
            exp(mouse,powersocket_instance)
    eff:
        unknown[mouse]=False
        close[mouse,powersocket_instance]=True
        close[powersocket_instance,mouse]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_150(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

behavior find_clothes_skirt_2088_around_closetdrawer_150(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_skirt,closetdrawer_instance)
        else:
            exp(clothes_skirt,closetdrawer_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior fry_rice_with_egg(rice:item, egg:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan)
        achieve_once inside(egg, fryingpan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        add_oil_to_pan(oil, pan)
        turn_on_stove(stove)
        fry_rice_with_egg(rice, egg, pan)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior fry_rice_with_egg(rice:item, egg:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan)
        achieve_once inside(egg, fryingpan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        add_oil_to_pan(oil, pan)
        turn_on_stove(stove)
        fry_rice_with_egg(rice, egg, pan)
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)obs(fryingpan_2083, look around this place)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(fryingpan_2083)putin_executor(food_rice_2036, fryingpan_2083)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the bowl_2071. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
obs(fryingpan_2083, look around this place)
Get this information:  fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to kitchen_counter_230. fryingpan_2083 is close to character_65. fryingpan_2083 is on kitchen_counter_230. fryingpan_2083 is CLEAN.
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the bowl_2071. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing fryingpan_2083 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the bowl_2071. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the bowl_2071. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by left hand. 
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the bowl_2071. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the bowl_2071. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the bowl_2071. Robot is close to the oil_2079. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the bowl_2071. Robot is close to the oil_2079. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the bowl_2071. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the bowl_2071. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the bowl_2071. Robot is close to the fridge_289. Robot is close to the food_rice_2036. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the bowl_2071. Robot is close to the fridge_289. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_rice_2036. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_rice_2036, fryingpan_2083)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_rice_2036. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_rice_2036 is inside fryingpan_2083. food_rice_2036 is close fryingpan_2083. fryingpan_2083 is close food_rice_2036. food_rice_2036 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the bowl_2071. Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close food_egg_2020. food_egg_2020 is close fryingpan_2083. food_egg_2020 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that the egg is beaten before being added to the pan. This step is necessary for the sub-task "fry the rice with the beaten egg in a pan until evenly cooked" to be considered complete.
##############################
From agent.py
Human Instruction: The robot needs to ensure that the egg is beaten before being added to the pan. This step is necessary for the sub-task "fry the rice with the beaten egg in a pan until evenly cooked" to be considered complete.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_rice_2036 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Observe around food_egg_2020 with the question of look around this place.
Action 8: Walk to dishwasher_1001.
Action 9: Open dishwasher_1001.
Action 10: look for bowl_2071 around dishwasher_1001.
Action 11: Walk to curtain_25.
Action 12: Open curtain_25.
Action 13: look for bowl_2071 around curtain_25.
Action 14: Walk to oven_295.
Action 15: Open oven_295.
Action 16: look for bowl_2071 around oven_295.
Action 17: Walk to cupboard_229.
Action 18: Open cupboard_229.
Action 19: look for bowl_2071 around cupboard_229.
Action 20: Walk to washing_machine_2007.
Action 21: Open washing_machine_2007.
Action 22: look for bowl_2071 around washing_machine_2007.
Action 23: Walk to table_226.
Action 24: look for bowl_2071 around table_226.
Action 25: Walk to food_egg_2020.
Action 26: Grab food_egg_2020.
Action 27: Walk to bowl_2071.
Action 28: Put food_egg_2020 into bowl_2071.
Action 29: Grab bowl_2071.
Action 30: Walk to faucet_43.
Action 31: Switch on faucet_43.
Action 32: Wash bowl_2071.
Action 33: Switch off faucet_43.
Action 34: Walk to food_egg_2020.
Action 35: Observe around food_egg_2020 with the question of look around this place.
Action 36: Observe around bowl_2071 with the question of look around this place.
Action 37: Grab food_egg_2020.
Action 38: Walk to cutting_board_2051.
Action 39: Put food_egg_2020 on cutting_board_2051.
Action 40: Walk to knife_2050.
Action 41: Grab knife_2050.
Action 42: Walk to food_egg_2020.
Action 43: Cut food_egg_2020.
Action 44: Observe around bowl_2071 with the question of look around this place.
Action 45: Walk to bowl_2072.
Action 46: Observe around bowl_2072 with the question of look around this place.
Action 47: Walk to kitchen_counter_230.
Action 48: Put knife_2050 on kitchen_counter_230.
Action 49: Walk to food_egg_2020.
Action 50: Grab food_egg_2020.
Action 51: Walk to bowl_2071.
Action 52: Put food_egg_2020 into bowl_2071.
Action 53: Walk to fryingpan_2083.
Action 54: Observe around fryingpan_2083 with the question of look around this place.
Action 55: Grab fryingpan_2083.
Action 56: Walk to stove_2065.
Action 57: Put fryingpan_2083 on stove_2065.
Action 58: Walk to oil_2079.
Action 59: Grab oil_2079.
Action 60: Walk to fryingpan_2083.
Action 61: Put oil_2079 into fryingpan_2083.
Action 62: Walk to stove_2065.
Action 63: Switch on stove_2065.
Action 64: Walk to food_rice_2036.
Action 65: Grab food_rice_2036.
Action 66: Walk to fryingpan_2083.
Action 67: Put food_rice_2036 into fryingpan_2083.
Action 68: Walk to food_egg_2020.
Action 69: Grab food_egg_2020.
Action 70: Walk to fryingpan_2083.
Action 71: Put food_egg_2020 into fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2058_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_mouse_166_around_doorjamb_165(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==165
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(mouse,doorjamb_instance)
        else:
            exp(mouse,doorjamb_instance)
    eff:
        unknown[mouse]=False
        close[mouse,doorjamb_instance]=True
        close[doorjamb_instance,mouse]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_150(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior fry_rice_with_beaten_egg(rice:item, egg:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan)
        achieve_once inside(egg, fryingpan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        add_oil_to_pan(oil, pan)
        turn_on_stove(stove)
        fry_rice_with_beaten_egg(rice, egg, pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_toaster_292(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==292
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(plate,toaster_instance)
        else:
            exp(plate,toaster_instance)
    eff:
        unknown[plate]=False
        close[plate,toaster_instance]=True
        close[toaster_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior find_frying_pan(pan:item):
    body:
        achieve_once visited(pan)

behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior fry_rice_with_egg(rice:item, egg:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan)
        achieve_once inside(egg, fryingpan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        find_frying_pan(pan)
        place_pan_on_stove(pan, stove)
        add_oil_to_pan(oil, pan)
        turn_on_stove(stove)
        fry_rice_with_egg(rice, egg, pan)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_166_around_walllamp_351(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==351
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(mouse,walllamp_instance)
        else:
            exp(mouse,walllamp_instance)
    eff:
        unknown[mouse]=False
        close[mouse,walllamp_instance]=True
        close[walllamp_instance,mouse]=True
    

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_soap_2053_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior fry_rice_with_beaten_egg(rice:item, egg:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan)
        achieve_once inside(egg, fryingpan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind stove: item where:
            is_stove(stove) and is_on(stove)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)

        fry_rice_with_beaten_egg(rice, egg, fryingpan)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_nightstand_102(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(chair,nightstand_instance)
        else:
            exp(chair,nightstand_instance)
    eff:
        unknown[chair]=False
        close[chair,nightstand_instance]=True
        close[nightstand_instance,chair]=True
    

behavior find_mouse_413_around_powersocket_412(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==412
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(mouse,powersocket_instance)
        else:
            exp(mouse,powersocket_instance)
    eff:
        unknown[mouse]=False
        close[mouse,powersocket_instance]=True
        close[powersocket_instance,mouse]=True
    

behavior find_clothes_skirt_2088_around_basket_for_clothes_2006(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2006
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_skirt,basket_for_clothes_instance)
        else:
            exp(clothes_skirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_beaten_egg(rice:item, egg:item, pan:item):
    body:
        achieve_once inside(rice, pan)
        achieve_once inside(egg, pan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        fry_rice_with_beaten_egg(rice, egg, pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_beaten_egg(rice:item, egg:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan)
        achieve_once inside(egg, fryingpan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg) and cut(egg)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        fry_rice_with_beaten_egg(rice, egg, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_166_around_cpuscreen_171(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==171
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(mouse,cpuscreen_instance)
        else:
            exp(mouse,cpuscreen_instance)
    eff:
        unknown[mouse]=False
        close[mouse,cpuscreen_instance]=True
        close[cpuscreen_instance,mouse]=True
    

behavior find_plate_1000_around_toaster_292(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==292
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(plate,toaster_instance)
        else:
            exp(plate,toaster_instance)
    eff:
        unknown[plate]=False
        close[plate,toaster_instance]=True
        close[toaster_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior fry_rice_with_egg(rice:item, egg:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan)
        achieve_once inside(egg, fryingpan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        fry_rice_with_egg(rice, egg, fryingpan)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(curtain_25)', 'open_executor(curtain_25)', 'walk_executor(oven_295)', 'open_executor(oven_295)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(washing_machine_2007)', 'open_executor(washing_machine_2007)', 'walk_executor(table_226)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(bowl_2071)', 'putin_executor(food_egg_2020, bowl_2071)', 'grab_executor(bowl_2071)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(bowl_2071)', 'switchoff_executor(faucet_43)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(cutting_board_2051)', 'put_executor(food_egg_2020, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_egg_2020)', 'cut_executor(food_egg_2020)', 'walk_executor(bowl_2072)', 'walk_executor(kitchen_counter_230)', 'put_executor(knife_2050, kitchen_counter_230)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(bowl_2071)', 'putin_executor(food_egg_2020, bowl_2071)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_rice_2036, fryingpan_2083)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_egg_2020, fryingpan_2083)']
Time info:
Time consume: 550 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 69
goal generate times: 12
goal correct times: 0
action_num: 57

Task complete rate:
Keystate: k1 - Requires: 12 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
