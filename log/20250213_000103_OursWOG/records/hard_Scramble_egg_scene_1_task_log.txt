From agent.py
Reset goals: The sub-goals are: 
['1. Crack the eggs into a bowl and beat them until smooth.', '2. Heat the frying pan and pour in the beaten eggs.', '3. Stir the eggs gently with a spatula until they are fully scrambled.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2142_around_kitchen_counter_122(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
behavior crack_and_beat_eggs(eggs:item, bowl:item):
    body:
        achieve_once inside(eggs, bowl)

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)

        bind bowl: item where:
            is_bowl(bowl)

        crack_and_beat_eggs(eggs, bowl)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior crack_and_beat_eggs(eggs:item, bowl:item):
    body:
        achieve_once inside(eggs, bowl)

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)

        bind bowl: item where:
            is_bowl(bowl)

        crack_and_beat_eggs(eggs, bowl)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(bowl_2140, kitchen_counter_122)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2140)putin_executor(food_egg_2092, bowl_2140)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_122)
Fail to find bowl_2140 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(bowl_2140, kitchen_counter_123)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2140)putin_executor(food_egg_2092, bowl_2140)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_123)
Fail to find bowl_2140 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(bowl_2140, kitchen_counter_119)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2140)putin_executor(food_egg_2092, bowl_2140)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_119)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2140)putin_executor(food_egg_2092, bowl_2140)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_egg_2092, fridge_126)
Find food_egg_2092. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)walk_executor(bowl_2140)putin_executor(food_egg_2092, bowl_2140)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the food_egg_2092. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
putin_executor(food_egg_2092, bowl_2140)
Robot find: Robot is close to the food_egg_2092. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. bowl_2140 is close food_egg_2092. food_egg_2092 is inside bowl_2140. food_egg_2092 is close bowl_2140. food_egg_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to beat the eggs in the bowl until smooth. Currently, the eggs have only been placed into the bowl.
##############################
From agent.py
Human Instruction: You need to beat the eggs in the bowl until smooth. Currently, the eggs have only been placed into the bowl.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for bowl_2140 around kitchen_counter_122.
Action 3: Walk to kitchen_counter_123.
Action 4: look for bowl_2140 around kitchen_counter_123.
Action 5: Walk to kitchen_counter_119.
Action 6: look for bowl_2140 around kitchen_counter_119.
Action 7: Walk to fridge_126.
Action 8: Switch off fridge_126.
Action 9: Open fridge_126.
Action 10: look for food_egg_2092 around fridge_126.
Action 11: Grab food_egg_2092.
Action 12: Walk to bowl_2140.
Action 13: Put food_egg_2092 into bowl_2140.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_cupboard_117(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(wooden_spoon,cupboard_instance)
        else:
            exp(wooden_spoon,cupboard_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cupboard_instance]=True
        close[cupboard_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation
 
behavior beat_eggs_in_bowl(eggs:item, bowl:item):
    body:
        achieve_once inside(eggs, bowl)
        # Ensure the eggs are in the bowl before beating

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind bowl: item where:
            is_bowl(bowl) and inside(eggs, bowl)
        # Select the bowl containing the eggs

        beat_eggs_in_bowl(eggs, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_cupboard_117(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(wooden_spoon,cupboard_instance)
        else:
            exp(wooden_spoon,cupboard_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cupboard_instance]=True
        close[cupboard_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation

behavior crack_eggs_into_bowl(egg:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        # Crack and place the egg inside the bowl

behavior beat_eggs_in_bowl(bowl:item):
    body:
        achieve is_clean(bowl)
        # Ensure the bowl is clean before beating the eggs
        achieve close_char(char, bowl)
        # Position close to the bowl to beat the eggs

def eggs_in_bowl(bowl:item):
    # Function to check if there are eggs inside the bowl
    symbol contains_eggs = exists egg: item : (is_food_egg(egg) and inside(egg, bowl))
    return contains_eggs

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and eggs_in_bowl(bowl)
        # Select the bowl that contains eggs

        foreach egg: item:
            if is_food_egg(egg) and not inside(egg, bowl):
                crack_eggs_into_bowl(egg, bowl)

        beat_eggs_in_bowl(bowl)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_clean not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_wooden_spoon_2000_around_cupboard_117(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(wooden_spoon,cupboard_instance)
        else:
            exp(wooden_spoon,cupboard_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cupboard_instance]=True
        close[cupboard_instance,wooden_spoon]=True
    

#goal_representation
 
behavior crack_eggs_into_bowl(egg:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        # Crack and place the egg inside the bowl

behavior beat_eggs_in_bowl(bowl:item):
    body:
        achieve clean(bowl)
        # Ensure the bowl is clean before beating the eggs
        achieve close_char(char, bowl)
        # Position close to the bowl to beat the eggs

def eggs_in_bowl(bowl:item):
    # Function to check if there are eggs inside the bowl
    symbol contains_eggs = exists egg: item : (is_food_egg(egg) and inside(egg, bowl))
    return contains_eggs

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and eggs_in_bowl(bowl)
        # Select the bowl that contains eggs

        foreach egg: item:
            if is_food_egg(egg) and not inside(egg, bowl):
                crack_eggs_into_bowl(egg, bowl)

        beat_eggs_in_bowl(bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior crack_eggs_into_bowl(egg:item, bowl:item):
    body:
        achieve_once inside(egg, bowl)
        # Crack and place the egg inside the bowl

behavior beat_eggs_in_bowl(bowl:item):
    body:
        achieve clean(bowl)
        # Ensure the bowl is clean before beating the eggs
        achieve close_char(char, bowl)
        # Position close to the bowl to beat the eggs

def eggs_in_bowl(bowl:item):
    # Function to check if there are eggs inside the bowl
    symbol contains_eggs = exists egg: item : (is_food_egg(egg) and inside(egg, bowl))
    return contains_eggs

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and eggs_in_bowl(bowl)
        # Select the bowl that contains eggs

        foreach egg: item:
            if is_food_egg(egg) and not inside(egg, bowl):
                crack_eggs_into_bowl(egg, bowl)

        beat_eggs_in_bowl(bowl)

##############################
From agent.py-> find a plan in act()
grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(bowl_2140)switchoff_executor(faucet_20)walk_executor(bowl_2140)
##############################
From agent.py
grab_executor(bowl_2140)
Robot find: Robot is close to the food_egg_2092. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(bowl_2140)
Robot find: Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. bowl_2140 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the bowl_2140. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the bowl_2140. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to beat the eggs in the bowl until they are smooth. Currently, the eggs have only been placed into the bowl.
##############################
From agent.py
Human Instruction: You need to beat the eggs in the bowl until they are smooth. Currently, the eggs have only been placed into the bowl.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for bowl_2140 around kitchen_counter_122.
Action 3: Walk to kitchen_counter_123.
Action 4: look for bowl_2140 around kitchen_counter_123.
Action 5: Walk to kitchen_counter_119.
Action 6: look for bowl_2140 around kitchen_counter_119.
Action 7: Walk to fridge_126.
Action 8: Switch off fridge_126.
Action 9: Open fridge_126.
Action 10: look for food_egg_2092 around fridge_126.
Action 11: Grab food_egg_2092.
Action 12: Walk to bowl_2140.
Action 13: Put food_egg_2092 into bowl_2140.
Action 14: Grab bowl_2140.
Action 15: Walk to faucet_20.
Action 16: Switch on faucet_20.
Action 17: Wash bowl_2140.
Action 18: Switch off faucet_20.
Action 19: Walk to bowl_2140.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_cupboard_117(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(wooden_spoon,cupboard_instance)
        else:
            exp(wooden_spoon,cupboard_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cupboard_instance]=True
        close[cupboard_instance,wooden_spoon]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_eggs_on_board(eggs:item, board:item):
    body:
        achieve_once on(eggs, board)

behavior beat_the_eggs(eggs:item):
    body:
        achieve cut(eggs)

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        place_eggs_on_board(eggs, cutting_board)
        beat_the_eggs(eggs)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_eggs_on_board(eggs:item, board:item):
    body:
        achieve_once on(eggs, board)

behavior beat_the_eggs(eggs:item):
    body:
        achieve cut(eggs)

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        place_eggs_on_board(eggs, cutting_board)
        beat_the_eggs(eggs)

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(cutting_board_2123)put_executor(food_egg_2092, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_egg_2092)cut_executor(food_egg_2092)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the bowl_2140. Robot is close to the food_egg_2092. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the bowl_2140. Robot is close to the food_egg_2092. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the bowl_2140. Robot is close to the food_egg_2092. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_egg_2092, cutting_board_2123)
Robot find: Robot is close to the bowl_2140. Robot is close to the food_egg_2092. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_egg_2092. food_egg_2092 is close cutting_board_2123. food_egg_2092 is on cutting_board_2123. food_egg_2092 released by left hand. 
##############################
From agent.py
walk_executor(knife_2035)
Robot find: Robot is close to the bowl_2140. Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. 
##############################
From agent.py
grab_executor(knife_2035)
Robot find: Robot is close to the bowl_2140. Robot is close to the kitchen_counter_123. Robot is close to the knife_2035. Grabbing knife_2035 by left hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the bowl_2140. Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_egg_2092. 
##############################
From agent.py
cut_executor(food_egg_2092)
Robot find: Robot is close to the bowl_2140. Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_egg_2092. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2116_around_dresser_274(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

behavior find_stereo_2050_around_desk_193(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(stereo,desk_instance)
        else:
            exp(stereo,desk_instance)
    eff:
        unknown[stereo]=False
        close[stereo,desk_instance]=True
        close[desk_instance,stereo]=True
    

behavior find_oil_2013_around_stovefan_125(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==125
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(oil,stovefan_instance)
        else:
            exp(oil,stovefan_instance)
    eff:
        unknown[oil]=False
        close[oil,stovefan_instance]=True
        close[stovefan_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_frying_pan_and_add_eggs(pan:item, stove:item, eggs:item):
    body:
        achieve_once on(pan, stove)
        # Place the frying pan on the stove

        achieve is_on(stove)
        # Turn on the stove to heat the frying pan

        achieve_once inside(eggs, pan)
        # Pour the beaten eggs into the heated frying pan

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        # Select the eggs that have been beaten

        heat_frying_pan_and_add_eggs(pan, stove, eggs)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2116_around_dresser_274(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_frying_pan(fryingpan:item, stove:item):
    body:
        achieve_once on(fryingpan, stove)
        achieve is_on(stove)

behavior pour_beaten_eggs(fryingpan:item, eggs:item):
    body:
        achieve_once inside(eggs, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        bind beaten_eggs: item where:
            is_food_egg(beaten_eggs)

        heat_frying_pan(fryingpan, stove)
        pour_beaten_eggs(fryingpan, beaten_eggs)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_frying_pan(fryingpan:item, stove:item):
    body:
        achieve_once on(fryingpan, stove)
        achieve is_on(stove)

behavior pour_beaten_eggs(fryingpan:item, eggs:item):
    body:
        achieve_once inside(eggs, fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        bind beaten_eggs: item where:
            is_food_egg(beaten_eggs)

        heat_frying_pan(fryingpan, stove)
        pour_beaten_eggs(fryingpan, beaten_eggs)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)put_executor(bowl_2140, kitchen_counter_122)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: Robot is close to the bowl_2140. Robot is close to the knife_2035. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
put_executor(bowl_2140, kitchen_counter_122)
Robot find: Robot is close to the bowl_2140. Robot is close to the knife_2035. Robot is close to the kitchen_counter_122. bowl_2140 is close kitchen_counter_122. kitchen_counter_122 is close bowl_2140. bowl_2140 is on kitchen_counter_122. bowl_2140 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the bowl_2140. Robot is close to the knife_2035. Robot is close to the kitchen_counter_122. Robot is close to the fryingpan_2154. Grabbing fryingpan_2154 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close fryingpan_2154. fryingpan_2154 is close stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the knife_2035. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_egg_2092. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the knife_2035. Robot is close to the cutting_board_2123. Robot is close to the food_egg_2092. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_egg_2092, fryingpan_2154)
Robot find: Robot is close to the knife_2035. Robot is close to the food_egg_2092. Robot is close to the fryingpan_2154. Robot is close to the stove_2135. food_egg_2092 is inside fryingpan_2154. fryingpan_2154 is close food_egg_2092. food_egg_2092 is close fryingpan_2154. food_egg_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to beat the eggs until they are smooth before pouring them into the frying pan. This step is necessary before adding the eggs to the pan as beaten eggs, as specified in the human instruction and goal representation.
##############################
From agent.py
Human Instruction: The robot needs to beat the eggs until they are smooth before pouring them into the frying pan. This step is necessary before adding the eggs to the pan as beaten eggs, as specified in the human instruction and goal representation.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for bowl_2140 around kitchen_counter_122.
Action 3: Walk to kitchen_counter_123.
Action 4: look for bowl_2140 around kitchen_counter_123.
Action 5: Walk to kitchen_counter_119.
Action 6: look for bowl_2140 around kitchen_counter_119.
Action 7: Walk to fridge_126.
Action 8: Switch off fridge_126.
Action 9: Open fridge_126.
Action 10: look for food_egg_2092 around fridge_126.
Action 11: Grab food_egg_2092.
Action 12: Walk to bowl_2140.
Action 13: Put food_egg_2092 into bowl_2140.
Action 14: Grab bowl_2140.
Action 15: Walk to faucet_20.
Action 16: Switch on faucet_20.
Action 17: Wash bowl_2140.
Action 18: Switch off faucet_20.
Action 19: Walk to bowl_2140.
Action 20: Walk to food_egg_2092.
Action 21: Grab food_egg_2092.
Action 22: Walk to cutting_board_2123.
Action 23: Put food_egg_2092 on cutting_board_2123.
Action 24: Walk to knife_2035.
Action 25: Grab knife_2035.
Action 26: Walk to food_egg_2092.
Action 27: Cut food_egg_2092.
Action 28: Walk to kitchen_counter_122.
Action 29: Put bowl_2140 on kitchen_counter_122.
Action 30: Grab fryingpan_2154.
Action 31: Walk to stove_2135.
Action 32: Put fryingpan_2154 on stove_2135.
Action 33: Switch on stove_2135.
Action 34: Walk to food_egg_2092.
Action 35: Grab food_egg_2092.
Action 36: Walk to fryingpan_2154.
Action 37: Put food_egg_2092 into fryingpan_2154.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_cupboard_117(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_wooden_spoon_2000_around_cupboard_117(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(wooden_spoon,cupboard_instance)
        else:
            exp(wooden_spoon,cupboard_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cupboard_instance]=True
        close[cupboard_instance,wooden_spoon]=True
    

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior ensure_beat_eggs(eggs:item):
    body:
        achieve cut(eggs)

behavior heat_fryingpan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)
        achieve is_on(stove)

behavior pour_eggs_into_pan(eggs:item, pan:item):
    body:
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        # Select eggs that have been beaten

        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        ensure_beat_eggs(eggs)
        heat_fryingpan_on_stove(pan, stove)
        pour_eggs_into_pan(eggs, pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2116_around_dresser_274(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

behavior find_food_butter_2007_around_cupboard_117(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior heat_frying_pan(stove:item, fryingpan:item):
    body:
        achieve is_on(stove)
        # Turn on the stove
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove

behavior pour_beaten_eggs_into_pan(eggs:item, fryingpan:item):
    body:
        achieve_once inside(eggs, fryingpan)
        # Pour the beaten eggs into the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        # Select the smooth beaten eggs

        heat_frying_pan(stove, fryingpan)
        pour_beaten_eggs_into_pan(eggs, fryingpan)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior heat_pan_and_pour_eggs(pan:item, eggs:item):
    body:
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove) and is_on(stove)
        # Select a frying pan that is already on the stove and the stove is on

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        # Select eggs that have been beaten

        heat_pan_and_pour_eggs(pan, eggs)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_butter_2007_around_cupboard_117(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_stereo_2050_around_desk_193(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(stereo,desk_instance)
        else:
            exp(stereo,desk_instance)
    eff:
        unknown[stereo]=False
        close[stereo,desk_instance]=True
        close[desk_instance,stereo]=True
    

#goal_representation

behavior heat_pan_and_pour_eggs(pan:item, eggs:item, stove:item):
    body:
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select a stove that is on

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select a frying pan that is on the stove

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        # Select eggs that have been beaten

        heat_pan_and_pour_eggs(pan, eggs, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_frying_pan_and_add_eggs(stove:item, fryingpan:item, eggs:item):
    body:
        achieve is_on(stove) # Ensure the stove is on
        achieve_once inside(eggs, fryingpan) # Pour the beaten eggs into the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select a stove that is already on

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select a frying pan that is on the stove

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        # Select beaten eggs

        heat_frying_pan_and_add_eggs(stove, fryingpan, eggs)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2116_around_washing_machine_2079(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_dress,washing_machine_instance)
        else:
            exp(clothes_dress,washing_machine_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,washing_machine_instance]=True
        close[washing_machine_instance,clothes_dress]=True
    

behavior find_stereo_2050_around_desk_193(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(stereo,desk_instance)
        else:
            exp(stereo,desk_instance)
    eff:
        unknown[stereo]=False
        close[stereo,desk_instance]=True
        close[desk_instance,stereo]=True
    

behavior find_food_food_2094_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior heat_the_frying_pan(stove:item, pan:item):
    body:
        achieve_once on(pan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the frying pan

behavior pour_beaten_eggs_into_pan(eggs:item, pan:item):
    body:
        achieve_once inside(eggs, pan)
        # Pour the beaten eggs into the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select the frying pan that is on the stove

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        # Select the beaten eggs

        heat_the_frying_pan(stove, pan)
        pour_beaten_eggs_into_pan(eggs, pan)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2033_around_dresser_274(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_heat_frying_pan(pan:item, stove:item):
    body:
        achieve_once visited(pan)
        # Look for the frying pan
        achieve_once on(pan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn the stove on

behavior pour_eggs_into_pan(eggs:item, pan:item):
    body:
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        # Select the beaten eggs

        find_and_heat_frying_pan(pan, stove)
        pour_eggs_into_pan(eggs, pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_cupboard_117(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_the_fryingpan_and_pour_eggs(pan:item, stove:item, eggs:item):
    body:
        achieve_once on(pan, stove)
        achieve is_on(stove)
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        bind eggs: item where:
            is_food_egg(eggs) and beaten(eggs)
        
        heat_the_fryingpan_and_pour_eggs(fryingpan, stove, eggs)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function beaten not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#goal_representation
behavior heat_the_fryingpan_and_pour_eggs(pan:item, stove:item, eggs:item):
    body:
        achieve_once on(pan, stove)
        achieve is_on(stove)
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        
        heat_the_fryingpan_and_pour_eggs(fryingpan, stove, eggs)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2116_around_dresser_274(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

behavior find_stereo_2050_around_desk_193(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(stereo,desk_instance)
        else:
            exp(stereo,desk_instance)
    eff:
        unknown[stereo]=False
        close[stereo,desk_instance]=True
        close[desk_instance,stereo]=True
    

behavior find_clothes_underwear_2121_around_basket_for_clothes_2078(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

behavior find_oil_2013_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior pour_eggs_into_pan(pan:item, eggs:item):
    body:
        achieve_once inside(eggs, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        
        place_pan_on_stove(pan, stove)
        turn_on_stove(stove)
        pour_eggs_into_pan(pan, eggs)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2116_around_dresser_274(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior heat_frying_pan_and_add_eggs(stove:item, fryingpan:item, beaten_eggs:item):
    body:
        achieve_once on(fryingpan, stove)
        # Ensure the frying pan is on the stove
        achieve is_on(stove)
        # Turn on the stove
        achieve_once inside(beaten_eggs, fryingpan)
        # Pour the beaten eggs into the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Ensure the frying pan is on the stove

        bind beaten_eggs: item where:
            is_food_egg(beaten_eggs) and cut(beaten_eggs)
        # Use beaten eggs that are smooth

        heat_frying_pan_and_add_eggs(stove, fryingpan, beaten_eggs)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Scramble egg by the fryingpan.
Action History:
['walk_executor(kitchen_counter_122)', 'walk_executor(kitchen_counter_123)', 'walk_executor(kitchen_counter_119)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_egg_2092)', 'walk_executor(bowl_2140)', 'putin_executor(food_egg_2092, bowl_2140)', 'grab_executor(bowl_2140)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(bowl_2140)', 'switchoff_executor(faucet_20)', 'walk_executor(bowl_2140)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(cutting_board_2123)', 'put_executor(food_egg_2092, cutting_board_2123)', 'walk_executor(knife_2035)', 'grab_executor(knife_2035)', 'walk_executor(food_egg_2092)', 'cut_executor(food_egg_2092)', 'walk_executor(kitchen_counter_122)', 'put_executor(bowl_2140, kitchen_counter_122)', 'grab_executor(fryingpan_2154)', 'walk_executor(stove_2135)', 'put_executor(fryingpan_2154, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_egg_2092, fryingpan_2154)']
Time info:
Time consume: 327 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 59
goal generate times: 15
goal correct times: 2
action_num: 33

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 7 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
