From agent.py
Reset goals: The sub-goals are: 
['1. Cook the pasta and chicken separately.', '2. Mix the cooked pasta and chicken together.', '3. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_chicken_2050_around_cupboard_130(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_chicken,cupboard_instance)
        else:
            exp(food_chicken,cupboard_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,cupboard_instance]=True
        close[cupboard_instance,food_chicken]=True
    

behavior find_fryingpan_2107_around_cupboard_130(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_dry_pasta_2073_around_cupboard_130(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior cook_pasta(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior place_chicken_on_board(chicken:item, board:item):
    body:
        achieve_once on(chicken, board)

behavior cut_the_chicken(chicken:item, knife:item):
    body:
        achieve_once cut(chicken)

behavior fry_chicken(chicken:item, fryingpan:item):
    body:
        achieve_once inside(chicken, fryingpan)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pan: item where:
            is_fryingpan(pan)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        cook_pasta(pasta, pot)
        
        place_chicken_on_board(chicken, cutting_board)
        cut_the_chicken(chicken, knife)
        fry_chicken(chicken, pan)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior cook_pasta(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior place_chicken_on_board(chicken:item, board:item):
    body:
        achieve_once on(chicken, board)

behavior cut_the_chicken(chicken:item, knife:item):
    body:
        achieve_once cut(chicken)

behavior fry_chicken(chicken:item, fryingpan:item):
    body:
        achieve_once inside(chicken, fryingpan)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pan: item where:
            is_fryingpan(pan)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        cook_pasta(pasta, pot)
        
        place_chicken_on_board(chicken, cutting_board)
        cut_the_chicken(chicken, knife)
        fry_chicken(chicken, pan)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)walk_executor(cupboard_130)exp(pot_2093, cupboard_130)walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)walk_executor(cupboard_130)exp(dry_pasta_2073, cupboard_130)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)walk_executor(cupboard_130)exp(food_chicken_2050, cupboard_130)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(cutting_board_2080)put_executor(food_chicken_2050, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)walk_executor(cupboard_130)exp(fryingpan_2107, cupboard_130)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)putin_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: pot_54, Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(pot_2093, cupboard_130)
Fail to find pot_2093 around cupboard_130. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil pasta and cook chicken.', '2. Combine cooked chicken and pasta.', '3. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_sink_133(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_food_chicken_2050_around_kitchen_counter_129(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_dry_pasta_2073_around_kitchen_counter_129(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_coin_2004_around_kitchen_counter_129(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coin,kitchen_counter_instance)
        else:
            exp(coin,kitchen_counter_instance)
    eff:
        unknown[coin]=False
        close[coin,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coin]=True
    

#exp_behavior_end

#goal_representation

behavior boil_pasta_and_cook_chicken(pasta:item, chicken:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot)
        achieve cleaned(chicken)
        achieve_once inside(chicken, pot)
        achieve has_water(pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind pot: item where:
            is_pot(pot) and id[pot]==2093

        bind stove: item where:
            is_stove(stove)

        boil_pasta_and_cook_chicken(pasta, chicken, pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function cleaned not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_54_around_pot_54(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==54
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_dry_pasta_2073_around_kitchen_counter_129(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_coin_2004_around_kitchen_counter_129(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coin,kitchen_counter_instance)
        else:
            exp(coin,kitchen_counter_instance)
    eff:
        unknown[coin]=False
        close[coin,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coin]=True
    

#goal_representation

behavior boil_pasta_and_cook_chicken(pasta:item, chicken:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot)
        achieve clean(chicken) # Corrected cleaned to clean
        achieve_once inside(chicken, pot)
        achieve has_water(pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind pot: item where:
            is_pot(pot) and id[pot]==2093

        bind stove: item where:
            is_stove(stove)

        boil_pasta_and_cook_chicken(pasta, chicken, pot, stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_kitchen_counter_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_dry_pasta_2073_around_kitchen_counter_129(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot) # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior cook_chicken(chicken:item, fryingpan:item):
    body:
        achieve_once inside(chicken, fryingpan)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2093
        # Select pot with ID 2093

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        bind chicken: item where:
            is_food_chicken(chicken)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Assume there is a frying pan on the stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        cook_chicken(chicken, fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_kitchen_counter_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_chicken_2050_around_kitchen_counter_129(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_dry_pasta_2073_around_kitchen_counter_129(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior cook_pasta(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior find_and_clean_chicken(chicken:item):
    body:
        achieve_once visited(chicken)
        achieve clean(chicken)

behavior cut_chicken(chicken:item, cutting_board:item, knife:item):
    body:
        achieve_once on(chicken, cutting_board)
        achieve_once cut(chicken)

behavior cook_chicken(chicken:item, fryingpan:item):
    body:
        achieve_once inside(chicken, fryingpan)

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        place_pot_on_stove(pot, stove)
        fill_pot_with_water(pot)
        cook_pasta(pasta, pot)
        turn_on_stove(stove)

        find_and_clean_chicken(chicken)
        cut_chicken(chicken, cutting_board, knife)

        place_pan_on_stove(fryingpan, stove)
        cook_chicken(chicken, fryingpan)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function place_pan_on_stove not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_dry_pasta_2073_around_kitchen_counter_129(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

#goal_representation

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior cook_pasta(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior find_and_clean_chicken(chicken:item):
    body:
        achieve_once visited(chicken)
        achieve clean(chicken)

behavior cut_chicken(chicken:item, cutting_board:item, knife:item):
    body:
        achieve_once on(chicken, cutting_board)
        achieve_once cut(chicken)

behavior cook_chicken(chicken:item, fryingpan:item):
    body:
        achieve_once inside(chicken, fryingpan)

behavior place_pan_on_stove(fryingpan:item, stove:item):
    body:
        achieve_once on(fryingpan, stove)

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        place_pot_on_stove(pot, stove)
        fill_pot_with_water(pot)
        cook_pasta(pasta, pot)
        turn_on_stove(stove)

        find_and_clean_chicken(chicken)
        cut_chicken(chicken, cutting_board, knife)

        place_pan_on_stove(fryingpan, stove)
        cook_chicken(chicken, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior cook_pasta(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior find_and_clean_chicken(chicken:item):
    body:
        achieve_once visited(chicken)
        achieve clean(chicken)

behavior cut_chicken(chicken:item, cutting_board:item, knife:item):
    body:
        achieve_once on(chicken, cutting_board)
        achieve_once cut(chicken)

behavior cook_chicken(chicken:item, fryingpan:item):
    body:
        achieve_once inside(chicken, fryingpan)

behavior place_pan_on_stove(fryingpan:item, stove:item):
    body:
        achieve_once on(fryingpan, stove)

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind knife: item where:
            is_knife(knife)

        bind cutting_board: item where:
            is_cutting_board(cutting_board)

        place_pot_on_stove(pot, stove)
        fill_pot_with_water(pot)
        cook_pasta(pasta, pot)
        turn_on_stove(stove)

        find_and_clean_chicken(chicken)
        cut_chicken(chicken, cutting_board, knife)

        place_pan_on_stove(fryingpan, stove)
        cook_chicken(chicken, fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_2093, stove_2090)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(kitchen_counter_129)exp(dry_pasta_2073, kitchen_counter_129)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)obs(food_chicken_2050, look around this place)grab_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(kitchen_counter_132)put_executor(pot_2093, kitchen_counter_132)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_chicken_2050, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)walk_executor(stove_2090)exp(fryingpan_2107, stove_2090)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)putin_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(pot_2093, stove_2090)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)walk_executor(pot_2093)open_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(kitchen_counter_129)exp(dry_pasta_2073, kitchen_counter_129)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)obs(food_chicken_2050, look around this place)grab_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(kitchen_counter_132)put_executor(pot_2093, kitchen_counter_132)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_chicken_2050, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)putin_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. stove_2090 is close pot_2093. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the stove_2090. pot_2093 is opened. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the stove_2090. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_2093. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(dry_pasta_2073, kitchen_counter_129)
Fail to find dry_pasta_2073 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)put_executor(pot_2093, stove_2090)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_128)exp(dry_pasta_2073, kitchen_counter_128)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(kitchen_counter_128)exp(food_chicken_2050, kitchen_counter_128)walk_executor(food_chicken_2050)obs(food_chicken_2050, look around this place)grab_executor(food_chicken_2050)walk_executor(kitchen_counter_132)put_executor(pot_2093, kitchen_counter_132)switchon_executor(faucet_134)wash_executor(food_chicken_2050)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_chicken_2050, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)putin_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the stove_2090. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the stove_2090. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the pot_2093. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(dry_pasta_2073, kitchen_counter_128)
Fail to find dry_pasta_2073 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)put_executor(pot_2093, stove_2090)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(cupboard_131)open_executor(cupboard_131)exp(dry_pasta_2073, cupboard_131)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)obs(food_chicken_2050, look around this place)grab_executor(food_chicken_2050)walk_executor(kitchen_counter_132)put_executor(pot_2093, kitchen_counter_132)switchon_executor(faucet_134)wash_executor(food_chicken_2050)switchoff_executor(faucet_134)walk_executor(cutting_board_2080)put_executor(food_chicken_2050, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_chicken_2050)cut_executor(food_chicken_2050)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)putin_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the stove_2090. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the pot_2093. Robot is close to the stove_2090. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the pot_2093. Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the pot_2093. Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(dry_pasta_2073, cupboard_131)
Fail to find dry_pasta_2073 around cupboard_131. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta together.', '2. Put the chicken pasta in a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_dry_pasta_2073_around_bed_376(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(dry_pasta,bed_instance)
        else:
            exp(dry_pasta,bed_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,bed_instance]=True
        close[bed_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior place_chicken_and_pasta_in_pot(chicken:item, pasta:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once inside(pasta, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot)
        place_chicken_and_pasta_in_pot(chicken, pasta, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior place_chicken_and_pasta_in_pot(chicken:item, pasta:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once inside(pasta, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot)
        place_chicken_and_pasta_in_pot(chicken, pasta, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(bed_376)exp(dry_pasta_2073, bed_376)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_2093. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the pot_2093. Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_2093. Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by left hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_2093. Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_2093. Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_2093. Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_dishwasher_143(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_chicken,dishwasher_instance)
        else:
            exp(food_chicken,dishwasher_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,dishwasher_instance]=True
        close[dishwasher_instance,food_chicken]=True
    

behavior find_food_noodles_2062_around_dry_pasta_2073(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind dry_pasta_instance:item where:
            is_dry_pasta(dry_pasta_instance) and id[dry_pasta_instance]==2073
        achieve close_char(char,dry_pasta_instance)
        if can_open(dry_pasta_instance):
            achieve_once open(dry_pasta_instance)
            exp(food_noodles,dry_pasta_instance)
        else:
            exp(food_noodles,dry_pasta_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,dry_pasta_instance]=True
        close[dry_pasta_instance,food_noodles]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_chicken_and_pasta_in_pot(chicken:item, pasta:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once inside(pasta, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)
        place_chicken_and_pasta_in_pot(chicken, pasta, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_dishwasher_143(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_chicken,dishwasher_instance)
        else:
            exp(food_chicken,dishwasher_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,dishwasher_instance]=True
        close[dishwasher_instance,food_chicken]=True
    

behavior find_food_noodles_2062_around_dry_pasta_2073(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind dry_pasta_instance:item where:
            is_dry_pasta(dry_pasta_instance) and id[dry_pasta_instance]==2073
        achieve close_char(char,dry_pasta_instance)
        if can_open(dry_pasta_instance):
            achieve_once open(dry_pasta_instance)
            exp(food_noodles,dry_pasta_instance)
        else:
            exp(food_noodles,dry_pasta_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,dry_pasta_instance]=True
        close[dry_pasta_instance,food_noodles]=True
    

#exp_behavior_end

#goal_representation

behavior find_chicken(chicken:item):
    body:
        achieve_once visited(chicken)

behavior find_dry_pasta(pasta:item):
    body:
        achieve_once visited(pasta)

behavior place_chicken_in_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior place_pasta_in_pot(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2093

        bind stove: item where:
            is_stove(stove) and id[stove]==2090

        bind faucet: item where:
            is_faucet(faucet)

        foreach chicken: item:
            if is_food_chicken(chicken) and not visited(chicken):
                find_chicken(chicken)
                # Locate the chicken
                place_chicken_in_pot(chicken, pot)

        foreach pasta: item:
            if is_dry_pasta(pasta) and not visited(pasta):
                find_dry_pasta(pasta)
                # Locate the dry pasta
                place_pasta_in_pot(pasta, pot)

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_doorjamb_37(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==37
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(food_butter,doorjamb_instance)
        else:
            exp(food_butter,doorjamb_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,doorjamb_instance]=True
        close[doorjamb_instance,food_butter]=True
    

behavior find_food_food_2055_around_dry_pasta_2073(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind dry_pasta_instance:item where:
            is_dry_pasta(dry_pasta_instance) and id[dry_pasta_instance]==2073
        achieve close_char(char,dry_pasta_instance)
        if can_open(dry_pasta_instance):
            achieve_once open(dry_pasta_instance)
            exp(food_food,dry_pasta_instance)
        else:
            exp(food_food,dry_pasta_instance)
    eff:
        unknown[food_food]=False
        close[food_food,dry_pasta_instance]=True
        close[dry_pasta_instance,food_food]=True
    

behavior find_food_chicken_2050_around_microwave_149(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_chicken,microwave_instance)
        else:
            exp(food_chicken,microwave_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,microwave_instance]=True
        close[microwave_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_and_pasta_in_pot(chicken:item, pasta:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once inside(pasta, pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the pot with the ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with the ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the correct faucet by ID

        place_chicken_and_pasta_in_pot(chicken, pasta, pot)
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_chicken_and_pasta_in_pot(chicken:item, pasta:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once inside(pasta, pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the pot with the ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with the ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the correct faucet by ID

        place_chicken_and_pasta_in_pot(chicken, pasta, pot)
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(microwave_149)walk_executor(kitchen_counter_132)put_executor(pot_2093, kitchen_counter_132)open_executor(microwave_149)exp(food_chicken_2050, microwave_149)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(microwave_149)
Robot find: Robot is close to the pot_2093. Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the microwave_149. 
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the pot_2093. Robot is close to the pot_54. Robot is close to the kitchen_counter_132. 
##############################
From agent.py
put_executor(pot_2093, kitchen_counter_132)
Robot find: Robot is close to the pot_2093. Robot is close to the pot_54. Robot is close to the kitchen_counter_132. pot_2093 is close kitchen_counter_132. pot_2093 is on kitchen_counter_132. kitchen_counter_132 is close pot_2093. pot_2093 released by right hand. 
##############################
From agent.py
open_executor(microwave_149)
Robot find: Robot is close to the pot_2093. Robot is close to the pot_54. Robot is close to the kitchen_counter_132. microwave_149 is opened. 
##############################
From agent.py
exp(food_chicken_2050, microwave_149)
Fail to find food_chicken_2050 around microwave_149. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(food_chicken_2050, dishwasher_143)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(dishwasher_143)
Robot find: Robot is close to the pot_54. Robot is close to the dishwasher_143. 
##############################
From agent.py
open_executor(dishwasher_143)
Robot find: knife_2036, Robot is close to the pot_54. Robot is close to the knife_2036. Robot is close to the dishwasher_143. dishwasher_143 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find food_chicken_2050 ?
Answer: Robot, please go to the dining_room_1 and locate fridge_140. The target item, food_chicken_2050, is inside fridge_140.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, please go to the dining_room_1 and locate fridge_140. The target item, food_chicken_2050, is inside fridge_140.

Trial and Error: You can not open fridge_140
The actions you have taken:
Action 1: Walk to faucet_134.
Action 2: Walk to cupboard_130.
Action 3: look for pot_2093 around cupboard_130.
Action 4: Walk to stove_2090.
Action 5: Open stove_2090.
Action 6: look for pot_2093 around stove_2090.
Action 7: Walk to pot_2093.
Action 8: Grab pot_2093.
Action 9: Walk to stove_2090.
Action 10: Put pot_2093 on stove_2090.
Action 11: Walk to pot_2093.
Action 12: Open pot_2093.
Action 13: Grab pot_2093.
Action 14: Walk to faucet_308.
Action 15: Switch off faucet_308.
Action 16: Walk to kitchen_counter_129.
Action 17: look for dry_pasta_2073 around kitchen_counter_129.
Action 18: Walk to stove_2090.
Action 19: Put pot_2093 on stove_2090.
Action 20: Walk to pot_2093.
Action 21: Grab pot_2093.
Action 22: Walk to faucet_134.
Action 23: Switch off faucet_134.
Action 24: Walk to kitchen_counter_128.
Action 25: look for dry_pasta_2073 around kitchen_counter_128.
Action 26: Walk to stove_2090.
Action 27: Put pot_2093 on stove_2090.
Action 28: Walk to pot_2093.
Action 29: Grab pot_2093.
Action 30: Walk to faucet_134.
Action 31: Switch on faucet_134.
Action 32: Switch off faucet_134.
Action 33: Walk to cupboard_131.
Action 34: Open cupboard_131.
Action 35: look for dry_pasta_2073 around cupboard_131.
Action 36: Walk to pot_54.
Action 37: Open pot_54.
Action 38: Grab pot_54.
Action 39: Walk to faucet_134.
Action 40: Switch on faucet_134.
Action 41: Switch off faucet_134.
Action 42: Walk to fridge_140.
Action 43: Switch off fridge_140.
Action 44: Walk to microwave_149.
Action 45: Walk to kitchen_counter_132.
Action 46: Put pot_2093 on kitchen_counter_132.
Action 47: Open microwave_149.
Action 48: look for food_chicken_2050 around microwave_149.
Action 49: Walk to dishwasher_143.
Action 50: Open dishwasher_143.

##############################
From agent.py
exp(food_chicken_2050, dishwasher_143)
Fail to find food_chicken_2050 around dishwasher_143. 
##############################
Task Summary:
Task Goal:
Make chicken pasta, put it in a plate.
Action History:
['walk_executor(faucet_134)', 'walk_executor(cupboard_130)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)', 'walk_executor(pot_2093)', 'open_executor(pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(kitchen_counter_129)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)', 'walk_executor(pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(kitchen_counter_128)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)', 'walk_executor(pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140) (Failed)', 'walk_executor(microwave_149)', 'walk_executor(kitchen_counter_132)', 'put_executor(pot_2093, kitchen_counter_132)', 'open_executor(microwave_149)', 'walk_executor(dishwasher_143)', 'open_executor(dishwasher_143)']
Time info:
Time consume: 655 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 82
goal generate times: 8
goal correct times: 1
action_num: 45

Task complete rate:
Keystate: k1 - Requires: 7 steps
Keystate: k2 - Requires: 14 steps
Keystate: k3 - Requires: 10 steps
Keystate: k4 - Requires: 10 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
