From agent.py
Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta separately.', '2. Combine them on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_dry_pasta_2114_around_kitchen_counter_122(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_chicken(chicken:item, stove:item, pan:item):
    body:
        achieve_once inside(chicken, pan) # Place chicken inside the pan
        achieve_once on(pan, stove) # Place the pan on the stove
        achieve is_on(stove) # Turn on the stove to cook the chicken

behavior boil_pasta(pasta:item, stove:item, pot:item):
    body:
        achieve_once inside(pasta, pot) # Place pasta inside the pot
        achieve has_water(pot) # Fill the pot with water
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind stove: item where:
            is_stove(stove)

        bind pan: item where:
            is_fryingpan(pan)

        bind pot: item where:
            is_pot(pot)

        cook_chicken(chicken, stove, pan)
        boil_pasta(pasta, stove, pot)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior cook_chicken(chicken:item, stove:item, pan:item):
    body:
        achieve_once inside(chicken, pan) # Place chicken inside the pan
        achieve_once on(pan, stove) # Place the pan on the stove
        achieve is_on(stove) # Turn on the stove to cook the chicken

behavior boil_pasta(pasta:item, stove:item, pot:item):
    body:
        achieve_once inside(pasta, pot) # Place pasta inside the pot
        achieve has_water(pot) # Fill the pot with water
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pasta: item where:
            is_dry_pasta(pasta)

        bind stove: item where:
            is_stove(stove)

        bind pan: item where:
            is_fryingpan(pan)

        bind pot: item where:
            is_pot(pot)

        cook_chicken(chicken, stove, pan)
        boil_pasta(pasta, stove, pot)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(fryingpan_2154)putin_executor(food_chicken_2089, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(kitchen_counter_122)exp(pot_2138, kitchen_counter_122)exp(dry_pasta_2114, kitchen_counter_122)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_2138)putin_executor(dry_pasta_2114, pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(fryingpan_2154, stove_2135)
Fail to find fryingpan_2154 around stove_2135. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(fryingpan_2154)putin_executor(food_chicken_2089, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(cupboard_117)exp(dry_pasta_2114, cupboard_117)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(fryingpan_2154)putin_executor(food_chicken_2089, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(cupboard_117)exp(dry_pasta_2114, cupboard_117)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_chicken_2089, fridge_126)
Find food_chicken_2089. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2089)walk_executor(fryingpan_2154)putin_executor(food_chicken_2089, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)switchon_executor(stove_2135)walk_executor(cupboard_117)exp(dry_pasta_2114, cupboard_117)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(food_chicken_2089, fryingpan_2154)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. food_chicken_2089 is inside fryingpan_2154. fryingpan_2154 is close food_chicken_2089. food_chicken_2089 is close fryingpan_2154. food_chicken_2089 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. Grabbing fryingpan_2154 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is close fryingpan_2154. fryingpan_2154 is close stove_2135. fryingpan_2154 is on stove_2135. fryingpan_2154 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(dry_pasta_2114, cupboard_117)
Fail to find dry_pasta_2114 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(dry_pasta_2114, cupboard_118)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(dry_pasta_2114, cupboard_118)
Fail to find dry_pasta_2114 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(doorjamb_190)exp(dry_pasta_2114, doorjamb_190)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(doorjamb_190)
Robot find: mouse_213, drawing_202, Robot is close to the doorjamb_190. 
##############################
From agent.py
exp(dry_pasta_2114, doorjamb_190)
Fail to find dry_pasta_2114 around doorjamb_190. 
##############################
From agent.py-> find a plan in act()
walk_executor(shower_16)exp(dry_pasta_2114, shower_16)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(shower_16)
Robot find: mat_32, drawing_33, Robot is close to the shower_16. 
##############################
From agent.py
exp(dry_pasta_2114, shower_16)
Fail to find dry_pasta_2114 around shower_16. 
##############################
From agent.py-> find a plan in act()
walk_executor(powersocket_72)exp(dry_pasta_2114, powersocket_72)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(powersocket_72)
Robot find: Robot is close to the powersocket_72. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find dry_pasta_2114 ?
Answer: Go to dining_room_41. Locate table_114. You will find dry_pasta_2114 on top of table_114.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_41. Locate table_114. You will find dry_pasta_2114 on top of table_114.

The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Open stove_2135.
Action 3: look for fryingpan_2154 around stove_2135.
Action 4: Walk to kitchen_counter_122.
Action 5: look for fryingpan_2154 around kitchen_counter_122.
Action 6: Walk to fridge_126.
Action 7: Switch off fridge_126.
Action 8: Open fridge_126.
Action 9: look for food_chicken_2089 around fridge_126.
Action 10: Grab food_chicken_2089.
Action 11: Walk to fryingpan_2154.
Action 12: Put food_chicken_2089 into fryingpan_2154.
Action 13: Grab fryingpan_2154.
Action 14: Walk to stove_2135.
Action 15: Put fryingpan_2154 on stove_2135.
Action 16: Switch on stove_2135.
Action 17: Walk to cupboard_117.
Action 18: look for dry_pasta_2114 around cupboard_117.
Action 19: Walk to cupboard_118.
Action 20: Open cupboard_118.
Action 21: look for dry_pasta_2114 around cupboard_118.
Action 22: Walk to doorjamb_190.
Action 23: look for dry_pasta_2114 around doorjamb_190.
Action 24: Walk to shower_16.
Action 25: look for dry_pasta_2114 around shower_16.
Action 26: Walk to powersocket_72.

##############################
From agent.py
exp(dry_pasta_2114, powersocket_72)
Fail to find dry_pasta_2114 around powersocket_72. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta.', '2. Mix the cooked chicken and pasta together.', '3. Put the chicken pasta onto a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_toy_2056_around_table_114(toy:item):
    goal: not unknown(toy)
    body:
        assert is_toy(toy)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(toy,table_instance)
        else:
            exp(toy,table_instance)
    eff:
        unknown[toy]=False
        close[toy,table_instance]=True
        close[table_instance,toy]=True
    

#exp_behavior_end

#goal_representation
behavior cook_chicken_in_fryingpan(chicken:item, fryingpan:item):
    body:
        achieve_once inside(chicken, fryingpan)

behavior ensure_stove_is_on(stove:item):
    body:
        achieve is_on(stove)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior cook_pasta_in_pot(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)

        bind stove: item where:
            is_stove(stove) and is_on(stove)

        bind pot: item where:
            is_pot(pot) and has_water(pot)

        bind faucet: item where:
            is_faucet(faucet)
        
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        cook_chicken_in_fryingpan(chicken, fryingpan)
        ensure_stove_is_on(stove)
        cook_pasta_in_pot(dry_pasta, pot)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

behavior find_toy_2056_around_door_62(toy:item):
    goal: not unknown(toy)
    body:
        assert is_toy(toy)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==62
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(toy,door_instance)
        else:
            exp(toy,door_instance)
    eff:
        unknown[toy]=False
        close[toy,door_instance]=True
        close[door_instance,toy]=True
    

behavior find_dry_pasta_2114_around_table_114(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(dry_pasta,table_instance)
        else:
            exp(dry_pasta,table_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,table_instance]=True
        close[table_instance,dry_pasta]=True
    

#goal_representation
behavior cook_chicken_in_fryingpan(chicken:item, fryingpan:item):
    body:
        achieve_once inside(chicken, fryingpan)

behavior ensure_stove_is_on(stove:item):
    body:
        achieve is_on(stove)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior cook_pasta_in_pot(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)

        bind stove: item where:
            is_stove(stove) and is_on(stove)

        bind pot: item where:
            is_pot(pot) and has_water(pot)

        bind faucet: item where:
            is_faucet(faucet)
        
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        cook_chicken_in_fryingpan(chicken, fryingpan)
        ensure_stove_is_on(stove)
        cook_pasta_in_pot(dry_pasta, pot)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_78_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

behavior find_dry_pasta_2114_around_table_114(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(dry_pasta,table_instance)
        else:
            exp(dry_pasta,table_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,table_instance]=True
        close[table_instance,dry_pasta]=True
    

#goal_representation
behavior cook_chicken_in_fryingpan(chicken:item, fryingpan:item):
    body:
        achieve_once inside(chicken, fryingpan)

behavior ensure_stove_is_on(stove:item):
    body:
        achieve is_on(stove)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(pot)

behavior cook_pasta_in_pot(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        bind pot: item where:
            is_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)

        cook_chicken_in_fryingpan(chicken, fryingpan)
        ensure_stove_is_on(stove)
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        cook_pasta_in_pot(dry_pasta, pot)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior cook_chicken_in_fryingpan(chicken:item, fryingpan:item):
    body:
        achieve_once inside(chicken, fryingpan)

behavior ensure_stove_is_on(stove:item):
    body:
        achieve is_on(stove)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(pot)

behavior cook_pasta_in_pot(pasta:item, pot:item):
    body:
        achieve_once inside(pasta, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        bind pot: item where:
            is_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)

        cook_chicken_in_fryingpan(chicken, fryingpan)
        ensure_stove_is_on(stove)
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        cook_pasta_in_pot(dry_pasta, pot)
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_121)switchon_executor(faucet_121)switchoff_executor(faucet_121)walk_executor(stove_2135)put_executor(pot_78, stove_2135)walk_executor(table_114)exp(dry_pasta_2114, table_114)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: phone_2029, Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_121)
Robot find: Robot is close to the pot_78. Robot is close to the faucet_121. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
switchon_executor(faucet_121)
Robot find: Robot is close to the pot_78. Robot is close to the faucet_121. Robot is close to the kitchen_counter_119. faucet_121 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_121)
Robot find: Robot is close to the pot_78. Robot is close to the faucet_121. Robot is close to the kitchen_counter_119. faucet_121 is turned off. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(dry_pasta_2114, table_114)
Find dry_pasta_2114. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_78)putin_executor(dry_pasta_2114, pot_78)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
walk_executor(dry_pasta_2114)
Robot find: Robot is close to the dry_pasta_2114. Robot is close to the table_114. 
##############################
From agent.py
grab_executor(dry_pasta_2114)
Robot find: Robot is close to the dry_pasta_2114. Robot is close to the table_114. Grabbing dry_pasta_2114 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the dry_pasta_2114. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(dry_pasta_2114, pot_78)
Robot find: Robot is close to the dry_pasta_2114. Robot is close to the pot_78. Robot is close to the stove_2135. dry_pasta_2114 is inside pot_78. pot_78 is close dry_pasta_2114. dry_pasta_2114 is close pot_78. dry_pasta_2114 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_window_2156(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind window_instance:item where:
            is_window(window_instance) and id[window_instance]==2156
        achieve close_char(char,window_instance)
        if can_open(window_instance):
            achieve_once open(window_instance)
            exp(pot,window_instance)
        else:
            exp(pot,window_instance)
    eff:
        unknown[pot]=False
        close[pot,window_instance]=True
        close[window_instance,pot]=True
    

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_chicken_and_pasta(chicken:item, pasta:item, container:item):
    body:
        achieve_once inside(chicken, container)
        achieve_once inside(pasta, container)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the cooked chicken

        bind pasta: item where:
            is_dry_pasta(pasta) and has_water(pasta)
        # Select the cooked pasta

        bind container: item where:
            is_pot(container) or is_food_food(container)
        # Select a suitable container for mixing

        mix_chicken_and_pasta(chicken, pasta, container)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_wooden_spoon_2000_around_kitchen_counter_123(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_chicken_and_pasta(chicken:item, pasta:item, bowl:item):
    body:
        achieve_once inside(chicken, bowl)
        achieve_once inside(pasta, bowl)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the cooked and cut chicken

        bind pasta: item where:
            is_dry_pasta(pasta) and cooked(pasta)
        # Select the cooked pasta

        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl for mixing

        mix_chicken_and_pasta(chicken, pasta, bowl)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function cooked not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_knife_2122_around_knife_2122(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2122
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(knife,knife_instance)
        else:
            exp(knife,knife_instance)
    eff:
        unknown[knife]=False
        close[knife,knife_instance]=True
        close[knife_instance,knife]=True
    

#goal_representation
behavior mix_chicken_and_pasta(chicken:item, pasta:item, bowl:item):
    body:
        achieve_once inside(chicken, bowl)
        achieve_once inside(pasta, bowl)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the cooked and cut chicken

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the cooked pasta

        bind bowl: item where:
            is_bowl(bowl) and containers(bowl)
        # Select a bowl for mixing

        mix_chicken_and_pasta(chicken, pasta, bowl)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_wooden_spoon_2000_around_kitchen_counter_123(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_chicken_and_pasta(chicken:item, pasta:item, container:item):
    body:
        achieve_once inside(chicken, container)
        achieve_once inside(pasta, container)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
                
        bind pasta: item where:
            is_dry_pasta(pasta)

        bind container: item where:
            is_pot(container) and has_water(container)
        
        mix_chicken_and_pasta(chicken, pasta, container)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_wooden_spoon_2000_around_kitchen_counter_123(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_chicken_and_pasta(chicken:item, pasta:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once inside(pasta, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        
        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot)

        bind pot: item where:
            is_pot(pot)

        mix_chicken_and_pasta(chicken, pasta, pot)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<pasta: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

#goal_representation
 
behavior mix_chicken_and_pasta(chicken:item, pasta:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once inside(pasta, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        
        bind pasta: item where:
            is_dry_pasta(pasta)

        bind pot: item where:
            is_pot(pot) and inside(pasta, pot)

        mix_chicken_and_pasta(chicken, pasta, pot)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_basket_for_clothes_2078(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(pot,basket_for_clothes_instance)
        else:
            exp(pot,basket_for_clothes_instance)
    eff:
        unknown[pot]=False
        close[pot,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,pot]=True
    

behavior find_food_butter_2007_around_curtain_290(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==290
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(food_butter,curtain_instance)
        else:
            exp(food_butter,curtain_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,curtain_instance]=True
        close[curtain_instance,food_butter]=True
    

behavior find_wooden_spoon_2000_around_kitchen_counter_123(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_chicken_and_pasta(chicken:item, pasta:item, container:item):
    body:
        achieve_once inside(chicken, container)
        achieve_once inside(pasta, container)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the cooked chicken

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the dry pasta

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot with water

        mix_chicken_and_pasta(chicken, pasta, pot)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_window_2156(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind window_instance:item where:
            is_window(window_instance) and id[window_instance]==2156
        achieve close_char(char,window_instance)
        if can_open(window_instance):
            achieve_once open(window_instance)
            exp(pot,window_instance)
        else:
            exp(pot,window_instance)
    eff:
        unknown[pot]=False
        close[pot,window_instance]=True
        close[window_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_chicken_and_pasta(chicken:item, pasta:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once inside(pasta, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the cooked chicken

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the cooked pasta

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that was used for cooking

        mix_chicken_and_pasta(chicken, pasta, pot)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior mix_chicken_and_pasta(chicken:item, pasta:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once inside(pasta, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the cooked chicken

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the cooked pasta

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that was used for cooking

        mix_chicken_and_pasta(chicken, pasta, pot)

##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(pot_78)putin_executor(food_chicken_2089, pot_78)
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fryingpan_2154. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fryingpan_2154. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the dry_pasta_2114. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_chicken_2089, pot_78)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the dry_pasta_2114. Robot is close to the pot_78. Robot is close to the stove_2135. pot_78 is close food_chicken_2089. food_chicken_2089 is inside pot_78. food_chicken_2089 is close pot_78. food_chicken_2089 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_basket_for_clothes_2078(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(pot,basket_for_clothes_instance)
        else:
            exp(pot,basket_for_clothes_instance)
    eff:
        unknown[pot]=False
        close[pot,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,pot]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_tray_2068_around_dishwasher_129(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve_once on(chicken_pasta, plate)

behavior __goal__():
    body:
        bind chicken_pasta: item where:
            is_food(chicken_pasta) # Assuming the mixed dish of chicken and pasta can be considered as food

        bind plate: item where:
            is_plate(plate)

        put_chicken_pasta_on_plate(chicken_pasta, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve_once on(chicken_pasta, plate)

behavior __goal__():
    body:
        bind chicken_pasta: item where:
            is_food(chicken_pasta) # Assuming the mixed dish of chicken and pasta can be considered as food

        bind plate: item where:
            is_plate(plate)

        put_chicken_pasta_on_plate(chicken_pasta, plate)

##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2089)walk_executor(plate_2152)put_executor(food_chicken_2089, plate_2152)
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the dry_pasta_2114. Robot is close to the pot_78. Robot is close to the stove_2135. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_chicken_2089, plate_2152)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. food_chicken_2089 is close plate_2152. plate_2152 is close food_chicken_2089. food_chicken_2089 is on plate_2152. food_chicken_2089 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make chicken pasta, put it in a plate.
Action History:
['walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_chicken_2089)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_chicken_2089, fryingpan_2154)', 'grab_executor(fryingpan_2154)', 'walk_executor(stove_2135)', 'put_executor(fryingpan_2154, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(doorjamb_190)', 'walk_executor(shower_16)', 'walk_executor(powersocket_72)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_121)', 'switchon_executor(faucet_121)', 'switchoff_executor(faucet_121)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'walk_executor(table_114)', 'walk_executor(faucet_20)', 'walk_executor(dry_pasta_2114)', 'grab_executor(dry_pasta_2114)', 'walk_executor(pot_78)', 'putin_executor(dry_pasta_2114, pot_78)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(pot_78)', 'putin_executor(food_chicken_2089, pot_78)', 'grab_executor(food_chicken_2089)', 'walk_executor(plate_2152)', 'put_executor(food_chicken_2089, plate_2152)']
Time info:
Time consume: 529 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 66
goal generate times: 9
goal correct times: 2
action_num: 41

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 8 steps
Keystate: k3 - Requires: 6 steps
Keystate: k4 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
