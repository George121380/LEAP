From agent.py
Reset goals: The sub-goals are: 
['Slice and toast the bread.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_bread(bread: item, knife: item):
    body:
        achieve cut(bread) # Cut the bread into slices

behavior toast_bread(bread: item, toaster: item):
    body:
        achieve inside(bread, toaster) # Place the bread inside the toaster
        achieve is_on(toaster) # Turn on the toaster

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select bread from the available items
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife to use for slicing the bread

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster to use for toasting the bread
        
        cut_bread(bread, knife)
        toast_bread(bread, toaster)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior cut_bread(bread: item, knife: item):
    body:
        achieve cut(bread) # Cut the bread into slices

behavior toast_bread(bread: item, toaster: item):
    body:
        achieve inside(bread, toaster) # Place the bread inside the toaster
        achieve is_on(toaster) # Turn on the toaster

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select bread from the available items
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife to use for slicing the bread

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster to use for toasting the bread
        
        cut_bread(bread, knife)
        toast_bread(bread, toaster)

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you tell me how to slice and toast the bread.
Answer: Need to replan: No  
Guidance: Cut the bread and put it in the toaster. Turn on the toaster.

##############################
From agent.py
Reset goals: The sub-goals are: 
['Slice the bread and then toast it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
bind bread: item where:
    is_food_bread(bread)
    
bind knife: item where:
    is_knife(knife)
    
bind toaster: item where:
    is_toaster(toaster)

behavior cut_bread(bread:item, knife:item):
    body:
        achieve_once inhand(knife)
        achieve cut(bread)

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        achieve plugged(toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        cut_bread(bread, knife)
        toast_bread(bread, toaster)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BIND', 'bind') at line 5839, column 1.
Expected one of: 
	* IMPORT
	* DOMAIN
	* $END
	* UNDIRECTED_GENERATOR
	* TYPEDEF
	* DEF
	* GENERATOR
	* OBJECTS
	* _PRAGMA_KEYWORD
	* _NEWLINE
	* INIT
	* CONTROLLER
	* INCLUDE
	* GOAL
	* FEATURE
	* BEHAVIOR
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n \n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2050_around_cupboard_229(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        
        bind knife: item where:
            is_knife(knife)
        
        bind toaster: item where:
            is_toaster(toaster)
        
        cut_bread(bread, knife)
        toast_bread(bread, toaster)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function cut_bread not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#goal_representation

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        
        bind knife: item where:
            is_knife(knife)
        
        bind toaster: item where:
            is_toaster(toaster)
        
        is_cutting_board(bread, knife)
        toast_bread(bread, toaster)

#goal_representation_end

##############################
