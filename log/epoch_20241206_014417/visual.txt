############################################################
When the sub-task is: 1. Put cleaning solution in the dishwasher.
A successful representation:
 
def has_cleaning_solution(dishwasher:item):
    # Function to check if the dishwasher has cleaning solution inside it
    symbol has_solution=exists o: item : is_cleaning_solution(o) and inside(o, dishwasher)
    return has_solution

behavior put_cleaning_solution_in_dishwasher(solution:item, dishwasher:item):
    body:
        achieve inside(solution, dishwasher)
        # Place the cleaning solution inside the dishwasher

behavior __goal__():
    body:
        if exists dishwasher: item : is_dishwasher(dishwasher) and not has_cleaning_solution(dishwasher):
            # If the dishwasher doesnt have cleaning solution, proceed to place it inside
            bind dishwasher: item where:
                is_dishwasher(dishwasher) and not has_cleaning_solution(dishwasher)
            # Select the dishwasher that doesnt have cleaning solution

            bind cleaning_solution: item where:
                is_cleaning_solution(cleaning_solution)
            # Select the cleaning solution

            put_cleaning_solution_in_dishwasher(cleaning_solution, dishwasher)

############################################################
When the sub-task is: 2. Load the bowls and plates into the dishwasher.
A successful representation:
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher
        foreach o: item:
        # Load all plates and bowls into the dishwasher
            if is_plate(o) or is_bowl(o):
                load_dishwasher(o, dishwasher)

############################################################
When the sub-task is: 3. Start the dishwasher to wash the bowls and plates.
A successful representation:
 
behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher
        start_dishwasher(dishwasher) # Start the dishwasher

############################################################
When the sub-task is: 1. Identify all the rooms.
A successful representation:
 
def is_room(item:item):
    # Function to determine if an item is a room
    symbol is_a_room=exists room: item : (is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room)) and item==room
    return is_a_room

behavior identify_rooms():
    body:
        bind room: item where:
            is_room(room)
        # Select any item that is identified as a room
        achieve visited(room)
        # Mark room as visited

behavior __goal__():
    body:
        foreach room: item:
            # Identify all rooms by checking each item if it is a room
            if is_room(room) and not visited(room):
                observe(room, "Identify and confirm all rooms")

############################################################
When the sub-task is: 2. Check if there are any lights on in each room.
A successful representation:
behavior check_lights_in_room(room:item):
    body:
        # Observe the room to check if the lights are on
        foreach light: item:
            if is_light(light) and inside(light, room) and not visited(light):
                observe(light, "Check if light is on in the room")

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_dining_room(room) or is_bedroom(room) or is_home_office(room):
                check_lights_in_room(room)
############################################################
When the sub-task is: 3. Turn on the lights in rooms where no lights are currently on.
A successful representation:
 
def has_lights_off_in_room(room:item):
    # Function to check if there is a light that is off in a specified room
    symbol lights_off=exists light: item : is_light(light) and is_off(light) and inside(light, room)
    return lights_off

behavior turn_on_lights_in_room(room:item):
    body:
        foreach light: item:
            if is_light(light) and is_off(light) and inside(light, room):
                achieve is_on(light)
                # Turn on each light that is off in the room

behavior __goal__():
    body:
        foreach room: item:
            if has_lights_off_in_room(room):
                # If any lights are off in the room, turn them on
                turn_on_lights_in_room(room)

