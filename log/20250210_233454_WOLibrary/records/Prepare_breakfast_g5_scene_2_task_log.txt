From agent.py
Reset goals: The sub-goals are: 
['1. Find the milk and cereal.', '2. Pour the milk into a pot and heat it until hot.', '3. Pour the hot milk into a cup and add the cereal.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_cereal_2048_around_kitchen_counter_128(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_or_cereal(item:item):
    # Function to check if the item is milk or cereal
    symbol is_milk_cereal= is_milk(item) or is_food_cereal(item)
    return is_milk_cereal

behavior __goal__():
    body:
        if exists item: item : (is_milk_or_cereal(item)):
            # Check if there is any milk or cereal present in the known information
            foreach item: item:
                if is_milk_or_cereal(item):
                    achieve_once visited(item)
                    # Mark the item as visited
           
        else:
            # If no milk or cereal is found, initiate searching to locate them
            foreach item: item:
                if not visited(item):
                    # Check all unvisited items
                    observe(item,"Is this milk or cereal")
                    # Check if the item is milk or cereal

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_milk_or_cereal(item:item):
    # Function to check if the item is milk or cereal
    symbol is_milk_cereal= is_milk(item) or is_food_cereal(item)
    return is_milk_cereal

behavior __goal__():
    body:
        if exists item: item : (is_milk_or_cereal(item)):
            # Check if there is any milk or cereal present in the known information
            foreach item: item:
                if is_milk_or_cereal(item):
                    achieve_once visited(item)
                    # Mark the item as visited
           
        else:
            # If no milk or cereal is found, initiate searching to locate them
            foreach item: item:
                if not visited(item):
                    # Check all unvisited items
                    observe(item,"Is this milk or cereal")
                    # Check if the item is milk or cereal

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(food_cereal_2048, kitchen_counter_128)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)obs(milk_2074, look around this place)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_cereal_2048, kitchen_counter_128)
Fail to find food_cereal_2048 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_cereal_2048, cupboard_131)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)obs(milk_2074, look around this place)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(food_cereal_2048, cupboard_131)
Fail to find food_cereal_2048 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_cereal_2048, cupboard_130)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)obs(milk_2074, look around this place)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(food_cereal_2048, cupboard_130)
Fail to find food_cereal_2048 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_190)exp(food_cereal_2048, wallshelf_190)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)obs(milk_2074, look around this place)
##############################
From agent.py
walk_executor(wallshelf_190)
Robot find: Robot is close to the wallshelf_190. 
##############################
From agent.py
exp(food_cereal_2048, wallshelf_190)
Fail to find food_cereal_2048 around wallshelf_190. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_191)exp(food_cereal_2048, wallshelf_191)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)obs(milk_2074, look around this place)
##############################
From agent.py
walk_executor(wallshelf_191)
Robot find: Robot is close to the wallshelf_191. 
##############################
From agent.py
exp(food_cereal_2048, wallshelf_191)
Fail to find food_cereal_2048 around wallshelf_191. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_cereal_2048, fridge_140)walk_executor(food_cereal_2048)open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)walk_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)obs(milk_2074, look around this place)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_cereal_2048, fridge_140)
Find food_cereal_2048. 
##############################
From agent.py-> find a plan in act()
open_executor(food_cereal_2048)obs(food_cereal_2048, look around this place)walk_executor(milk_2074)obs(milk_2074, look around this place)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_juice_2034_around_kitchen_counter_132(juice:item):
    goal: not unknown(juice)
    body:
        assert is_juice(juice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(juice,kitchen_counter_instance)
        else:
            exp(juice,kitchen_counter_instance)
    eff:
        unknown[juice]=False
        close[juice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,juice]=True
    

behavior find_food_bread_2016_around_kitchen_counter_129(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_or_cereal_in_container(container:item):
    # Function to check if there is milk or cereal in a specified container
    symbol has_milk_or_cereal= exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside(o, container))
    return has_milk_or_cereal

behavior __goal__():
    body:
        if exists container: item : (is_containers(container) and has_milk_or_cereal_in_container(container)):
            # If we have already found the container with milk or cereal, we can directly approach it
            bind container: item where:
                is_containers(container) and has_milk_or_cereal_in_container(container)
            achieve close_char(char, container)

        else:
            # Check all containers that have not been visited in the scene
            foreach container: item:
                if is_containers(container) and not visited(container):
                    observe(container, "Check is there any milk or cereal in the container")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_containers not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bread_2016_around_table_123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

behavior find_food_butter_2018_around_oven_141(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

#goal_representation
 
def has_milk_or_cereal_in_container(container:item):
    # Function to check if there is milk or cereal in a specified container
    symbol has_milk_or_cereal= exists o: item : ((is_milk(o) or is_food_cereal(o)) and inside(o, container))
    return has_milk_or_cereal

behavior __goal__():
    body:
        if exists container: item : (containers(container) and has_milk_or_cereal_in_container(container)):
            # If we have already found the container with milk or cereal, we can directly approach it
            bind container: item where:
                containers(container) and has_milk_or_cereal_in_container(container)
            achieve close_char(char, container)

        else:
            # Check all containers that have not been visited in the scene
            foreach container: item:
                if containers(container) and not visited(container):
                    observe(container, "Check is there any milk or cereal in the container")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_stove_2090(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_bread,stove_instance)
        else:
            exp(food_bread,stove_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,stove_instance]=True
        close[stove_instance,food_bread]=True
    

behavior find_food_butter_2018_around_chair_138(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==138
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(food_butter,chair_instance)
        else:
            exp(food_butter,chair_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,chair_instance]=True
        close[chair_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Bind the fridge to find the milk
        if not visited(fridge):
            observe(fridge, "Check if there is milk inside")
            # Observe the fridge to check for milk
            
        foreach location: item:
            if is_wallshelf(location) or is_cupboard(location) or is_kitchen_counter(location):
                # Check all potential storage locations
                if not visited(location):
                    observe(location, "Check if there is cereal")
                    # Observe each location to check for cereal
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Bind the fridge to find the milk
        if not visited(fridge):
            observe(fridge, "Check if there is milk inside")
            # Observe the fridge to check for milk
            
        foreach location: item:
            if is_wallshelf(location) or is_cupboard(location) or is_kitchen_counter(location):
                # Check all potential storage locations
                if not visited(location):
                    observe(location, "Check if there is cereal")
                    # Observe each location to check for cereal
##############################
From agent.py-> find a plan in act()
obs(fridge_140, Check if there is milk inside)walk_executor(kitchen_counter_128)obs(kitchen_counter_128, Check if there is cereal)walk_executor(kitchen_counter_129)obs(kitchen_counter_129, Check if there is cereal)walk_executor(cupboard_130)obs(cupboard_130, Check if there is cereal)walk_executor(cupboard_131)obs(cupboard_131, Check if there is cereal)walk_executor(kitchen_counter_132)obs(kitchen_counter_132, Check if there is cereal)walk_executor(wallshelf_187)obs(wallshelf_187, Check if there is cereal)walk_executor(wallshelf_190)obs(wallshelf_190, Check if there is cereal)walk_executor(wallshelf_191)obs(wallshelf_191, Check if there is cereal)walk_executor(wallshelf_301)obs(wallshelf_301, Check if there is cereal)
##############################
From agent.py
obs(fridge_140, Check if there is milk inside)
Get this information:  food_rice_2067 is inside fridge_140. food_jam_2059 is inside fridge_140. food_sugar_2070 is inside fridge_140. food_apple_2043 is inside fridge_140. food_dessert_2051 is inside fridge_140. food_noodles_2062 is inside fridge_140. fridge_140 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_pizza_2065 is inside fridge_140. food_cake_2046 is inside fridge_140. food_hamburger_2057 is inside fridge_140. food_salt_2068 is inside fridge_140. food_cheese_2049 is inside fridge_140. food_kiwi_2060 is inside fridge_140. food_donut_2052 is inside fridge_140. food_turkey_2071 is inside fridge_140. food_bacon_2044 is inside fridge_140. sauce_2101 is inside fridge_140. food_oatmeal_2063 is inside fridge_140. dry_pasta_2073 is on fridge_140. food_food_2055 is inside fridge_140. food_carrot_2047 is inside fridge_140. food_potato_2066 is inside fridge_140. food_ice_cream_2058 is inside fridge_140. food_snack_2069 is inside fridge_140. food_chicken_2050 is inside fridge_140. food_lemon_2061 is inside fridge_140. food_vegetable_2072 is inside fridge_140. fridge_140 is close to food_cereal_2048. fridge_140 is close to food_cheese_2049. fridge_140 is close to food_chicken_2050. fridge_140 is close to food_dessert_2051. fridge_140 is close to food_donut_2052. fridge_140 is close to food_egg_2053. fridge_140 is close to food_fish_2054. fridge_140 is close to food_food_2055. fridge_140 is close to food_fruit_2056. fridge_140 is close to food_hamburger_2057. fridge_140 is close to food_ice_cream_2058. fridge_140 is close to food_jam_2059. fridge_140 is close to food_kiwi_2060. fridge_140 is close to food_lemon_2061. fridge_140 is close to food_noodles_2062. fridge_140 is close to food_oatmeal_2063. fridge_140 is close to food_peanut_butter_2064. fridge_140 is close to food_pizza_2065. fridge_140 is close to food_potato_2066. fridge_140 is close to food_rice_2067. fridge_140 is close to food_salt_2068. fridge_140 is close to food_snack_2069. fridge_140 is close to food_sugar_2070. fridge_140 is close to food_turkey_2071. fridge_140 is close to food_vegetable_2072. fridge_140 is close to dry_pasta_2073. fridge_140 is close to milk_2074. fridge_140 is close to cupboard_131. fridge_140 is close to floor_22. fridge_140 is close to ceiling_34. fridge_140 is close to wall_7. fridge_140 is close to wall_8. fridge_140 is close to kitchen_counter_129. fridge_140 is close to sauce_2101. fridge_140 is close to chair_138. fridge_140 is close to toaster_144. fridge_140 is close to food_steak_2042. fridge_140 is close to food_apple_2043. fridge_140 is close to food_bacon_2044. fridge_140 is close to food_banana_2045. fridge_140 is close to food_cake_2046. fridge_140 is close to food_carrot_2047. fridge_140 is close to character_219. food_steak_2042 is inside fridge_140. food_egg_2053 is inside fridge_140. fridge_140 is on floor_22. food_peanut_butter_2064 is inside fridge_140. milk_2074 is on fridge_140. food_banana_2045 is inside fridge_140. food_fruit_2056 is inside fridge_140. food_cereal_2048 is inside fridge_140. fridge_140 is OFF. fridge_140 is OPEN. fridge_140 is PLUGGED_IN. fridge_140 is CLEAN.
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: Robot is close to the kitchen_counter_128. 
##############################
From agent.py
obs(kitchen_counter_128, Check if there is cereal)
Get this information:  kitchen_counter_128 is inside dining_room_1. cutting_board_2080 is on kitchen_counter_128. kitchen_counter_128 is close to cutting_board_2080. kitchen_counter_128 is close to cupboard_130. kitchen_counter_128 is close to kitchen_counter_132. kitchen_counter_128 is close to sink_133. kitchen_counter_128 is close to wall_6. kitchen_counter_128 is close to floor_167. kitchen_counter_128 is close to floor_165. kitchen_counter_128 is close to wall_172. kitchen_counter_128 is close to wall_174. kitchen_counter_128 is close to floor_15. kitchen_counter_128 is close to microwave_149. kitchen_counter_128 is close to food_orange_2008. kitchen_counter_128 is close to spectacles_2106. kitchen_counter_128 is close to ceiling_27. kitchen_counter_128 is close to bookshelf_188. kitchen_counter_128 is close to bookshelf_189. kitchen_counter_128 is close to character_219. kitchen_counter_128 is on floor_15. food_orange_2008 is on kitchen_counter_128. spectacles_2106 is on kitchen_counter_128. kitchen_counter_128 is CLOSED. kitchen_counter_128 is CLEAN.
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
obs(kitchen_counter_129, Check if there is cereal)
Get this information:  fryingpan_2107 is on kitchen_counter_129. coffe_maker_147 is on kitchen_counter_129. toaster_144 is on kitchen_counter_129. kitchen_counter_129 is inside dining_room_1. stove_2090 is on kitchen_counter_129. kitchen_counter_129 is close to wall_2. kitchen_counter_129 is close to cupboard_131. kitchen_counter_129 is close to wall_7. kitchen_counter_129 is close to wall_8. kitchen_counter_129 is close to stovefan_139. kitchen_counter_129 is close to fridge_140. kitchen_counter_129 is close to oven_141. kitchen_counter_129 is close to tray_142. kitchen_counter_129 is close to dishwasher_143. kitchen_counter_129 is close to toaster_144. kitchen_counter_129 is close to floor_16. kitchen_counter_129 is close to coffe_maker_147. kitchen_counter_129 is close to floor_21. kitchen_counter_129 is close to floor_22. kitchen_counter_129 is close to stove_2090. kitchen_counter_129 is close to walllamp_44. kitchen_counter_129 is close to pot_2093. kitchen_counter_129 is close to walllamp_46. kitchen_counter_129 is close to oil_2102. kitchen_counter_129 is close to pot_54. kitchen_counter_129 is close to fryingpan_2107. kitchen_counter_129 is close to character_219. pot_2093 is on kitchen_counter_129. oil_2102 is on kitchen_counter_129. kitchen_counter_129 is CLOSED. kitchen_counter_129 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
obs(cupboard_130, Check if there is cereal)
Get this information:  blender_2032 is inside cupboard_130. cupboard_130 is close to kitchen_counter_128. cupboard_130 is close to wall_2. cupboard_130 is close to kitchen_counter_132. cupboard_130 is close to sink_133. cupboard_130 is close to faucet_134. cupboard_130 is close to wall_6. cupboard_130 is close to stovefan_139. cupboard_130 is close to oven_141. cupboard_130 is close to tray_142. cupboard_130 is close to microwave_149. cupboard_130 is close to ceiling_27. cupboard_130 is close to ceiling_28. cupboard_130 is close to wall_172. cupboard_130 is close to walllamp_45. cupboard_130 is close to walllamp_46. cupboard_130 is close to knifeblock_52. cupboard_130 is close to pot_54. cupboard_130 is close to tea_bag_2017. cupboard_130 is close to blender_2032. cupboard_130 is close to character_219. tea_bag_2017 is inside cupboard_130. cupboard_130 is inside dining_room_1. cupboard_130 is OPEN. cupboard_130 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
obs(cupboard_131, Check if there is cereal)
Get this information:  cupboard_131 is close to ceiling_33. cupboard_131 is close to kitchen_counter_129. cupboard_131 is close to wall_2. cupboard_131 is close to ceiling_34. cupboard_131 is close to wall_7. cupboard_131 is close to wall_8. cupboard_131 is close to stovefan_139. cupboard_131 is close to walllamp_44. cupboard_131 is close to fridge_140. cupboard_131 is close to walllamp_46. cupboard_131 is close to dishwasher_143. cupboard_131 is close to toaster_144. cupboard_131 is close to tray_142. cupboard_131 is close to oven_141. cupboard_131 is close to coffe_maker_147. cupboard_131 is close to pot_54. cupboard_131 is close to character_219. cupboard_131 is inside dining_room_1. cupboard_131 is OPEN. cupboard_131 is CLEAN.
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
obs(kitchen_counter_132, Check if there is cereal)
Get this information:  microwave_149 is on kitchen_counter_132. kitchen_counter_132 is inside dining_room_1. faucet_134 is on kitchen_counter_132. kitchen_counter_132 is close to kitchen_counter_128. kitchen_counter_132 is close to wall_2. kitchen_counter_132 is close to cupboard_130. kitchen_counter_132 is close to sink_133. kitchen_counter_132 is close to faucet_134. kitchen_counter_132 is close to wall_6. kitchen_counter_132 is close to stovefan_139. kitchen_counter_132 is close to wall_172. kitchen_counter_132 is close to walllamp_45. kitchen_counter_132 is close to oven_141. kitchen_counter_132 is close to floor_15. kitchen_counter_132 is close to floor_16. kitchen_counter_132 is close to tray_142. kitchen_counter_132 is close to walllamp_46. kitchen_counter_132 is close to knifeblock_52. kitchen_counter_132 is close to microwave_149. kitchen_counter_132 is close to pot_54. kitchen_counter_132 is close to character_219. sink_133 is inside kitchen_counter_132. kitchen_counter_132 is OPEN. kitchen_counter_132 is CLEAN.
##############################
From agent.py
walk_executor(wallshelf_187)
Robot find: Robot is close to the wallshelf_187. 
##############################
From agent.py
obs(wallshelf_187, Check if there is cereal)
Get this information:  wallshelf_187 is close to floor_162. wallshelf_187 is close to floor_163. wallshelf_187 is close to curtain_197. wallshelf_187 is close to curtain_198. wallshelf_187 is close to floor_168. wallshelf_187 is close to wall_169. wallshelf_187 is close to wall_267. wallshelf_187 is close to wall_173. wallshelf_187 is close to shower_303. wallshelf_187 is close to photoframe_210. wallshelf_187 is close to window_181. wallshelf_187 is close to floor_278. wallshelf_187 is close to walllamp_184. wallshelf_187 is close to tvstand_186. wallshelf_187 is close to wallshelf_190. wallshelf_187 is close to wallshelf_191. wallshelf_187 is close to character_219. photoframe_210 is on wallshelf_187. wallshelf_187 is inside home_office_161. wallshelf_187 is facing television_216. wallshelf_187 is CLEAN.
##############################
From agent.py
walk_executor(wallshelf_190)
Robot find: Robot is close to the wallshelf_190. 
##############################
From agent.py
obs(wallshelf_190, Check if there is cereal)
Get this information:  wallshelf_190 is close to floor_162. wallshelf_190 is close to floor_163. wallshelf_190 is close to curtain_197. wallshelf_190 is close to curtain_198. wallshelf_190 is close to wall_169. wallshelf_190 is close to wall_267. wallshelf_190 is close to wall_173. wallshelf_190 is close to ceiling_175. wallshelf_190 is close to shower_303. wallshelf_190 is close to photoframe_210. wallshelf_190 is close to window_181. wallshelf_190 is close to walllamp_184. wallshelf_190 is close to tvstand_186. wallshelf_190 is close to wallshelf_187. wallshelf_190 is close to wallshelf_191. wallshelf_190 is close to character_219. wallshelf_190 is facing television_216. wallshelf_190 is inside home_office_161. wallshelf_190 is CLEAN.
##############################
From agent.py
walk_executor(wallshelf_191)
Robot find: Robot is close to the wallshelf_191. 
##############################
From agent.py
obs(wallshelf_191, Check if there is cereal)
Get this information:  wallshelf_191 is facing television_216. wallshelf_191 is close to curtain_197. wallshelf_191 is close to curtain_198. wallshelf_191 is close to wall_169. wallshelf_191 is close to wall_267. wallshelf_191 is close to wall_173. wallshelf_191 is close to ceiling_175. wallshelf_191 is close to shower_303. wallshelf_191 is close to photoframe_210. wallshelf_191 is close to window_181. wallshelf_191 is close to walllamp_184. wallshelf_191 is close to wallshelf_187. wallshelf_191 is close to wallshelf_190. wallshelf_191 is close to character_219. wallshelf_191 is inside home_office_161. wallshelf_191 is CLEAN.
##############################
From agent.py
walk_executor(wallshelf_301)
Robot find: towel_rack_299, towel_rack_300, drawing_296, Robot is close to the wallshelf_301. 
##############################
From agent.py
obs(wallshelf_301, Check if there is cereal)
Get this information:  wallshelf_301 is close to walllamp_289. wallshelf_301 is close to bathtub_297. wallshelf_301 is close to wall_266. wallshelf_301 is close to towel_rack_299. wallshelf_301 is close to towel_rack_300. wallshelf_301 is close to wall_270. wallshelf_301 is close to ceiling_283. wallshelf_301 is close to ceiling_284. wallshelf_301 is close to character_219. wallshelf_301 is facing drawing_296. wallshelf_301 is inside bathroom_265. wallshelf_301 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_sink_133(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(fork,sink_instance)
        else:
            exp(fork,sink_instance)
    eff:
        unknown[fork]=False
        close[fork,sink_instance]=True
        close[sink_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
def is_hot(item: item):
    # Function to check if the milk is hot
    # This function needs to be implemented using available states or known details, for now, it is a placeholder
    pass 

behavior heat_milk(milk:item, stove:item, pot:item):
    body:
        achieve_once inside(milk, pot)
        # Pour the milk into the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the milk until it is hot
        # A check to see if the milk is hot can be added, here we assume it will be handled automatically

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        heat_milk(milk, stove, pot)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_hot(item: item):
    # Function to check if the milk is hot
    # This function needs to be implemented using available states or known details, for now, it is a placeholder
    pass 

behavior heat_milk(milk:item, stove:item, pot:item):
    body:
        achieve_once inside(milk, pot)
        # Pour the milk into the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to heat the milk until it is hot
        # A check to see if the milk is hot can be added, here we assume it will be handled automatically

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        heat_milk(milk, stove, pot)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(pot_2093)putin_executor(milk_2074, pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the fridge_140. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
putin_executor(milk_2074, pot_2093)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. milk_2074 is close pot_2093. milk_2074 is inside pot_2093. pot_2093 is close milk_2074. milk_2074 released by right hand. 
##############################
From agent.py
grab_executor(pot_2093)
Robot find: Robot is close to the milk_2074. Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. stove_2090 is close pot_2093. pot_2093 is close stove_2090. pot_2093 is on stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_sink_133(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_hot_milk_into_cup_and_add_cereal(cup:item, milk:item, cereal:item):
    body:
        achieve_once inside(milk, cup)
        # Pour the hot milk into the cup
        achieve_once inside(cereal, cup)
        # Add the cereal into the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        # Select a cup that can receive liquid

        bind milk: item where:
            is_milk(milk) and pourable(milk)
        # Select milk that can be poured

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal for adding
        
        pour_hot_milk_into_cup_and_add_cereal(cup, milk, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior pour_hot_milk_into_cup_and_add_cereal(cup:item, milk:item, cereal:item):
    body:
        achieve_once inside(milk, cup)
        # Pour the hot milk into the cup
        achieve_once inside(cereal, cup)
        # Add the cereal into the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        # Select a cup that can receive liquid

        bind milk: item where:
            is_milk(milk) and pourable(milk)
        # Select milk that can be poured

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal for adding
        
        pour_hot_milk_into_cup_and_add_cereal(cup, milk, cereal)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)exp(cup_2087, sink_133)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(sink_133)
Robot find: after_shave_2029, cleaning_solution_2098, juice_2034, Robot is close to the kitchen_counter_132. Robot is close to the sink_133. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2087 ?
Answer: Cup_2087 is located in dining room 1. You will find it on table_123. Look for the table, and the cup, cup_2087, should be on top of it.
Re-decompose: None

##############################
From agent.py
Human Instruction: Cup_2087 is located in dining room 1. You will find it on table_123. Look for the table, and the cup, cup_2087, should be on top of it.

Trial and Error: You can not open food_cereal_2048
The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: look for food_cereal_2048 around kitchen_counter_128.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for food_cereal_2048 around cupboard_131.
Action 6: Walk to cupboard_130.
Action 7: look for food_cereal_2048 around cupboard_130.
Action 8: Walk to wallshelf_190.
Action 9: look for food_cereal_2048 around wallshelf_190.
Action 10: Walk to wallshelf_191.
Action 11: look for food_cereal_2048 around wallshelf_191.
Action 12: Walk to fridge_140.
Action 13: Switch off fridge_140.
Action 14: Open fridge_140.
Action 15: look for food_cereal_2048 around fridge_140.
Action 16: Observe around fridge_140 with the question of Check if there is milk inside.
Action 17: Walk to kitchen_counter_128.
Action 18: Observe around kitchen_counter_128 with the question of Check if there is cereal.
Action 19: Walk to kitchen_counter_129.
Action 20: Observe around kitchen_counter_129 with the question of Check if there is cereal.
Action 21: Walk to cupboard_130.
Action 22: Observe around cupboard_130 with the question of Check if there is cereal.
Action 23: Walk to cupboard_131.
Action 24: Observe around cupboard_131 with the question of Check if there is cereal.
Action 25: Walk to kitchen_counter_132.
Action 26: Observe around kitchen_counter_132 with the question of Check if there is cereal.
Action 27: Walk to wallshelf_187.
Action 28: Observe around wallshelf_187 with the question of Check if there is cereal.
Action 29: Walk to wallshelf_190.
Action 30: Observe around wallshelf_190 with the question of Check if there is cereal.
Action 31: Walk to wallshelf_191.
Action 32: Observe around wallshelf_191 with the question of Check if there is cereal.
Action 33: Walk to wallshelf_301.
Action 34: Observe around wallshelf_301 with the question of Check if there is cereal.
Action 35: Walk to pot_2093.
Action 36: Open pot_2093.
Action 37: Walk to milk_2074.
Action 38: Grab milk_2074.
Action 39: Walk to pot_2093.
Action 40: Put milk_2074 into pot_2093.
Action 41: Grab pot_2093.
Action 42: Walk to stove_2090.
Action 43: Put pot_2093 on stove_2090.
Action 44: Switch on stove_2090.
Action 45: Walk to sink_133.

##############################
From agent.py
exp(cup_2087, sink_133)
Fail to find cup_2087 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(cup_2087, table_123)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(food_cereal_2048)grab_executor(food_cereal_2048)walk_executor(cup_2087)putin_executor(food_cereal_2048, cup_2087)
##############################
From agent.py
walk_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the pot_2093. 
##############################
From agent.py
grab_executor(milk_2074)
Robot find: Robot is close to the milk_2074. Robot is close to the pot_2093. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
putin_executor(milk_2074, cup_2087)
Robot find: Robot is close to the milk_2074. Robot is close to the table_123. Robot is close to the cup_2087. milk_2074 is close cup_2087. milk_2074 is inside cup_2087. cup_2087 is close milk_2074. milk_2074 released by right hand. 
##############################
From agent.py
walk_executor(food_cereal_2048)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_cereal_2048)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the fridge_140. Grabbing food_cereal_2048 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
putin_executor(food_cereal_2048, cup_2087)
Robot find: Robot is close to the food_cereal_2048. Robot is close to the table_123. Robot is close to the cup_2087. food_cereal_2048 is close cup_2087. cup_2087 is close food_cereal_2048. food_cereal_2048 is inside cup_2087. food_cereal_2048 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(kitchen_counter_128)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(cupboard_130)', 'walk_executor(wallshelf_190)', 'walk_executor(wallshelf_191)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'open_executor(food_cereal_2048) (Failed)', 'walk_executor(kitchen_counter_128)', 'walk_executor(kitchen_counter_129)', 'walk_executor(cupboard_130)', 'walk_executor(cupboard_131)', 'walk_executor(kitchen_counter_132)', 'walk_executor(wallshelf_187)', 'walk_executor(wallshelf_190)', 'walk_executor(wallshelf_191)', 'walk_executor(wallshelf_301)', 'walk_executor(pot_2093)', 'open_executor(pot_2093)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(pot_2093)', 'putin_executor(milk_2074, pot_2093)', 'grab_executor(pot_2093)', 'walk_executor(stove_2090)', 'put_executor(pot_2093, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(sink_133)', 'walk_executor(table_123)', 'walk_executor(milk_2074)', 'grab_executor(milk_2074)', 'walk_executor(cup_2087)', 'putin_executor(milk_2074, cup_2087)', 'walk_executor(food_cereal_2048)', 'grab_executor(food_cereal_2048)', 'walk_executor(cup_2087)', 'putin_executor(food_cereal_2048, cup_2087)']
Time info:
Time consume: 277 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 5
goal correct times: 0
action_num: 39

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
