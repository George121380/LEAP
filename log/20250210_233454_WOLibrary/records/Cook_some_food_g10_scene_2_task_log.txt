From agent.py
Reset goals: The sub-goals are: 
['1. Find the noodles and chicken in the kitchen.', '2. Boil the noodles and chicken together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2073_around_kitchen_counter_132(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_noodles_2062_around_fridge_140(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_noodles,fridge_instance)
        else:
            exp(food_noodles,fridge_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,fridge_instance]=True
        close[fridge_instance,food_noodles]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        foreach item: item:
            if (item == noodles or item == chicken) and not visited(item):
                observe(item, "Check location of the item")
                # Observe the location of the noodles and chicken

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        foreach item: item:
            if (item == noodles or item == chicken) and not visited(item):
                observe(item, "Check location of the item")
                # Observe the location of the noodles and chicken

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)obs(food_chicken_2050, Check location of the item)walk_executor(fridge_140)exp(food_noodles_2062, fridge_140)walk_executor(food_noodles_2062)obs(food_noodles_2062, Check location of the item)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
obs(food_chicken_2050, Check location of the item)obs(food_noodles_2062, Check location of the item)
##############################
From agent.py
obs(food_chicken_2050, Check location of the item)
Get this information:  food_chicken_2050 is close to fridge_140. food_chicken_2050 is close to character_219. food_chicken_2050 is inside dining_room_1. food_chicken_2050 is inside fridge_140. food_chicken_2050 is CLEAN.
##############################
From agent.py
obs(food_noodles_2062, Check location of the item)
Get this information:  food_noodles_2062 is inside dining_room_1. food_noodles_2062 is inside fridge_140. food_noodles_2062 is close to fridge_140. food_noodles_2062 is close to character_219. food_noodles_2062 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_fork_2103_around_kitchen_counter_132(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_oil_2005_around_cupboard_131(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_noodles_and_chicken(noodles:item, chicken:item, pot:item, stove:item):
    body:
        achieve has_water(pot) # Ensure theres water in the pot for boiling
        achieve_once inside(noodles, pot) # Ensure noodles are in the pot
        achieve_once inside(chicken, pot) # Ensure chicken is in the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        boil_noodles_and_chicken(noodles, chicken, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_noodles_and_chicken(noodles:item, chicken:item, pot:item, stove:item):
    body:
        achieve has_water(pot) # Ensure theres water in the pot for boiling
        achieve_once inside(noodles, pot) # Ensure noodles are in the pot
        achieve_once inside(chicken, pot) # Ensure chicken is in the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        boil_noodles_and_chicken(noodles, chicken, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_54, stove_2090)walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)walk_executor(pot_54)putin_executor(food_noodles_2062, pot_54)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(pot_54, stove_2090)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)walk_executor(pot_54)putin_executor(food_noodles_2062, pot_54)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(food_noodles_2062)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. Robot is close to the food_noodles_2062. 
##############################
From agent.py
grab_executor(food_noodles_2062)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. Robot is close to the food_noodles_2062. Grabbing food_noodles_2062 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_noodles_2062. 
##############################
From agent.py
putin_executor(food_noodles_2062, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_noodles_2062. food_noodles_2062 is inside pot_54. pot_54 is close food_noodles_2062. food_noodles_2062 is close pot_54. food_noodles_2062 released by left hand. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the pot_54. Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the pot_54. Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_chicken_2050. Robot is close to the food_noodles_2062. 
##############################
From agent.py
putin_executor(food_chicken_2050, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_chicken_2050. Robot is close to the food_noodles_2062. food_chicken_2050 is close pot_54. pot_54 is close food_chicken_2050. food_chicken_2050 is inside pot_54. food_chicken_2050 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure there is water in pot_54 before boiling the noodles and chicken.
##############################
From agent.py
Human Instruction: Ensure there is water in pot_54 before boiling the noodles and chicken.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_chicken_2050 around fridge_140.
Action 5: Observe around food_chicken_2050 with the question of Check location of the item.
Action 6: Observe around food_noodles_2062 with the question of Check location of the item.
Action 7: Walk to stove_2090.
Action 8: Open stove_2090.
Action 9: look for pot_54 around stove_2090.
Action 10: Walk to pot_54.
Action 11: Open pot_54.
Action 12: Grab pot_54.
Action 13: Walk to faucet_134.
Action 14: Switch off faucet_134.
Action 15: Walk to food_noodles_2062.
Action 16: Grab food_noodles_2062.
Action 17: Walk to pot_54.
Action 18: Put food_noodles_2062 into pot_54.
Action 19: Walk to food_chicken_2050.
Action 20: Grab food_chicken_2050.
Action 21: Walk to pot_54.
Action 22: Put food_chicken_2050 into pot_54.
Action 23: Walk to stove_2090.
Action 24: Put pot_54 on stove_2090.
Action 25: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_dresser_377(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

behavior find_fork_2104_around_table_123(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_to_pot(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve has_water(pot)
        
behavior boil_content(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090

        if not has_water(pot):
            add_water_to_pot(pot, faucet) # Add water to the pot if needed

        boil_content(pot, stove) # Boil the contents (noodles and chicken) in the pot

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_dresser_377(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

behavior find_box_2023_around_pot_2093(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(box,pot_instance)
        else:
            exp(box,pot_instance)
    eff:
        unknown[box]=False
        close[box,pot_instance]=True
        close[pot_instance,box]=True
    

behavior find_oil_2005_around_microwave_149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_contents(pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once inside(food_noodles_2062, pot)
        # Ensure the noodles are inside the pot
        achieve_once inside(food_chicken_2050, pot)
        # Ensure the chicken is inside the pot
        achieve on(pot, stove)
        # Ensure the pot is on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090

        boil_contents(pot, stove)
        # Boil noodles and chicken in the pot on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_noodles_2062; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_shoes_2001_around_dresser_377(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

behavior find_box_2023_around_filing_cabinet_378(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==378
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(box,filing_cabinet_instance)
        else:
            exp(box,filing_cabinet_instance)
    eff:
        unknown[box]=False
        close[box,filing_cabinet_instance]=True
        close[filing_cabinet_instance,box]=True
    

#goal_representation
 
behavior boil_contents(pot:item, stove:item, noodles:item, chicken:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once inside(noodles, pot)
        # Ensure the noodles are inside the pot
        achieve_once inside(chicken, pot)
        # Ensure the chicken is inside the pot
        achieve on(pot, stove)
        # Ensure the pot is on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090

        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles]==2062
        # Select noodles with ID 2062

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2050
        # Select chicken with ID 2050

        boil_contents(pot, stove, noodles, chicken)
        # Boil noodles and chicken in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior boil_contents(pot:item, stove:item, noodles:item, chicken:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once inside(noodles, pot)
        # Ensure the noodles are inside the pot
        achieve_once inside(chicken, pot)
        # Ensure the chicken is inside the pot
        achieve on(pot, stove)
        # Ensure the pot is on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090

        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles]==2062
        # Select noodles with ID 2062

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2050
        # Select chicken with ID 2050

        boil_contents(pot, stove, noodles, chicken)
        # Boil noodles and chicken in the pot on the stove

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure there is water in pot_54 before proceeding with boiling the noodles and chicken.
##############################
From agent.py
Human Instruction: Ensure there is water in pot_54 before proceeding with boiling the noodles and chicken.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_chicken_2050 around fridge_140.
Action 5: Observe around food_chicken_2050 with the question of Check location of the item.
Action 6: Observe around food_noodles_2062 with the question of Check location of the item.
Action 7: Walk to stove_2090.
Action 8: Open stove_2090.
Action 9: look for pot_54 around stove_2090.
Action 10: Walk to pot_54.
Action 11: Open pot_54.
Action 12: Grab pot_54.
Action 13: Walk to faucet_134.
Action 14: Switch off faucet_134.
Action 15: Walk to food_noodles_2062.
Action 16: Grab food_noodles_2062.
Action 17: Walk to pot_54.
Action 18: Put food_noodles_2062 into pot_54.
Action 19: Walk to food_chicken_2050.
Action 20: Grab food_chicken_2050.
Action 21: Walk to pot_54.
Action 22: Put food_chicken_2050 into pot_54.
Action 23: Walk to stove_2090.
Action 24: Put pot_54 on stove_2090.
Action 25: Switch on stove_2090.
Action 26: Grab pot_54.
Action 27: Walk to faucet_308.
Action 28: Switch off faucet_308.
Action 29: Walk to stove_2090.
Action 30: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_dresser_377(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

#exp_behavior_end

#goal_representation

behavior check_pot_water(pot:item):
    body:
        if not has_water(pot):
            achieve has_water(pot)
        # Ensure there is water in the pot

behavior boil_noodles_and_chicken(pot:item, stove:item, noodles:item, chicken:item):
    body:
        achieve_once inside(noodles, pot)
        # Put noodles inside the pot
        achieve_once inside(chicken, pot)
        # Put chicken inside the pot
        achieve_on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the contents

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090
        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles] == 2062
        # Select the noodles with ID 2062
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select the chicken with ID 2050
        check_pot_water(pot)
        boil_noodles_and_chicken(pot, stove, noodles, chicken)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_on not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_shoes_2001_around_dresser_377(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

behavior find_box_2023_around_sink_133(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(box,sink_instance)
        else:
            exp(box,sink_instance)
    eff:
        unknown[box]=False
        close[box,sink_instance]=True
        close[sink_instance,box]=True
    

#goal_representation
behavior check_pot_water(pot:item):
    body:
        if not has_water(pot):
            achieve has_water(pot)
        # Ensure there is water in the pot

behavior boil_noodles_and_chicken(pot:item, stove:item, noodles:item, chicken:item):
    body:
        achieve_once inside(noodles, pot)
        # Put noodles inside the pot
        achieve_once inside(chicken, pot)
        # Put chicken inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the contents

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090
        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles] == 2062
        # Select the noodles with ID 2062
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select the chicken with ID 2050
        check_pot_water(pot)
        boil_noodles_and_chicken(pot, stove, noodles, chicken)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior check_pot_water(pot:item):
    body:
        if not has_water(pot):
            achieve has_water(pot)
        # Ensure there is water in the pot

behavior boil_noodles_and_chicken(pot:item, stove:item, noodles:item, chicken:item):
    body:
        achieve_once inside(noodles, pot)
        # Put noodles inside the pot
        achieve_once inside(chicken, pot)
        # Put chicken inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the contents

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090
        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles] == 2062
        # Select the noodles with ID 2062
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select the chicken with ID 2050
        check_pot_water(pot)
        boil_noodles_and_chicken(pot, stove, noodles, chicken)
##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure pot_54 has water in it before proceeding with boiling. The necessary step missing is filling the pot with water from the faucet before boiling the noodles and chicken on the stove.
##############################
Task Summary:
Task Goal:
Boil some noodles with chicken.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(food_noodles_2062)', 'grab_executor(food_noodles_2062)', 'walk_executor(pot_54)', 'putin_executor(food_noodles_2062, pot_54)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(pot_54)', 'putin_executor(food_chicken_2050, pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)']
Time info:
Time consume: 201 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 5
goal correct times: 2
action_num: 32

Task complete rate:
Keystate: k1 - Requires: 13 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
