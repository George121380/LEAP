From agent.py
Reset goals: The sub-goals are: 
['1. Boil the pasta and cook the chicken.', '2. Combine the cooked pasta and chicken, then put them on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2073_around_kitchen_counter_132(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_54_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation

def has_water_in_pot(pot:item):
    # Function to check if there is water in the pot
    symbol has_water=has_water(pot)
    return has_water

behavior boil_pasta(pot:item, pasta:item):
    body:
        achieve_once has_water(pot)
        achieve_once inside(pasta, pot)
        # Ensure the pasta is inside the pot with water

behavior cook_chicken(pan:item, chicken:item):
    body:
        achieve_once inside(chicken, pan)
        # Ensure the chicken is inside the pan

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta
        
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a piece of chicken
        
        if not has_water_in_pot(pot):
            observe(pot, "Check whether the pot has water")
        # Check if theres water in the pot if not, observe it

        boil_pasta(pot, pasta)
        cook_chicken(pan, chicken)

#goal_representation_end

##############################
From agent.py->reset_goal

def has_water_in_pot(pot:item):
    # Function to check if there is water in the pot
    symbol has_water=has_water(pot)
    return has_water

behavior boil_pasta(pot:item, pasta:item):
    body:
        achieve_once has_water(pot)
        achieve_once inside(pasta, pot)
        # Ensure the pasta is inside the pot with water

behavior cook_chicken(pan:item, chicken:item):
    body:
        achieve_once inside(chicken, pan)
        # Ensure the chicken is inside the pan

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta
        
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a piece of chicken
        
        if not has_water_in_pot(pot):
            observe(pot, "Check whether the pot has water")
        # Check if theres water in the pot if not, observe it

        boil_pasta(pot, pasta)
        cook_chicken(pan, chicken)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(pot_2093, kitchen_counter_132)walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, Check whether the pot has water)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_132)exp(dry_pasta_2073, kitchen_counter_132)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)walk_executor(kitchen_counter_132)exp(fryingpan_2107, kitchen_counter_132)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)putin_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: pot_54, Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(pot_2093, kitchen_counter_132)
Fail to find pot_2093 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)obs(pot_54, Check whether the pot has water)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(cupboard_131)open_executor(cupboard_131)exp(dry_pasta_2073, cupboard_131)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(stove_2090)open_executor(stove_2090)exp(fryingpan_2107, stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)putin_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
obs(pot_54, Check whether the pot has water)
Get this information:  pot_54 is on oven_141. pot_54 is close to ceiling_33. pot_54 is close to wall_2. pot_54 is close to cupboard_130. pot_54 is close to kitchen_counter_132. pot_54 is close to sink_133. pot_54 is close to kitchen_counter_129. pot_54 is close to cupboard_131. pot_54 is close to wall_8. pot_54 is close to stovefan_139. pot_54 is close to oven_141. pot_54 is close to walllamp_46. pot_54 is close to tray_142. pot_54 is close to floor_16. pot_54 is close to knifeblock_52. pot_54 is close to floor_21. pot_54 is close to ceiling_28. pot_54 is close to character_219. pot_54 is inside dining_room_1. pot_54 is OPEN. pot_54 is CLEAN.
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the pot_54. Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the pot_54. Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(dry_pasta_2073, cupboard_131)
Fail to find dry_pasta_2073 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
obs(pot_54, Check whether the pot has water)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(wallshelf_190)exp(dry_pasta_2073, wallshelf_190)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(stove_2090)open_executor(stove_2090)exp(fryingpan_2107, stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)putin_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
obs(pot_54, Check whether the pot has water)
Get this information:  pot_54 is close to character_219. pot_54 is inside dining_room_1. pot_54 is OPEN. pot_54 is CLEAN.
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(wallshelf_190)
Robot find: Robot is close to the pot_54. Robot is close to the wallshelf_190. 
##############################
From agent.py
exp(dry_pasta_2073, wallshelf_190)
Fail to find dry_pasta_2073 around wallshelf_190. 
##############################
From agent.py-> find a plan in act()
obs(pot_54, Check whether the pot has water)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(wallshelf_301)exp(dry_pasta_2073, wallshelf_301)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(wallshelf_187)exp(fryingpan_2107, wallshelf_187)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)putin_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
obs(pot_54, Check whether the pot has water)
Get this information:  pot_54 is close to character_219. pot_54 is inside home_office_161. pot_54 is OPEN. pot_54 is CLEAN.
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(wallshelf_301)
Robot find: towel_rack_299, towel_rack_300, Robot is close to the pot_54. Robot is close to the wallshelf_301. 
##############################
From agent.py
exp(dry_pasta_2073, wallshelf_301)
Fail to find dry_pasta_2073 around wallshelf_301. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_191)exp(dry_pasta_2073, wallshelf_191)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(stove_2090)open_executor(stove_2090)exp(fryingpan_2107, stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)putin_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(wallshelf_191)
Robot find: Robot is close to the pot_54. Robot is close to the wallshelf_191. 
##############################
From agent.py
exp(dry_pasta_2073, wallshelf_191)
Fail to find dry_pasta_2073 around wallshelf_191. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(dry_pasta_2073, cupboard_130)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(stove_2090)open_executor(stove_2090)exp(fryingpan_2107, stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)putin_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the pot_54. Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find dry_pasta_2073 ?
Answer: The dry_pasta_2073 is located in dining_room_1. You will find it on top of fridge_140. Look for the dry pasta package sitting directly on the fridge. Fridge_140 is the large kitchen appliance nearby; the dry pasta is positioned on its surface.
Re-decompose: None

##############################
From agent.py
Human Instruction: The dry_pasta_2073 is located in dining_room_1. You will find it on top of fridge_140. Look for the dry pasta package sitting directly on the fridge. Fridge_140 is the large kitchen appliance nearby; the dry pasta is positioned on its surface.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for pot_2093 around kitchen_counter_132.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Observe around pot_54 with the question of Check whether the pot has water.
Action 6: Grab pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for dry_pasta_2073 around cupboard_131.
Action 12: Observe around pot_54 with the question of Check whether the pot has water.
Action 13: Walk to faucet_308.
Action 14: Switch off faucet_308.
Action 15: Walk to wallshelf_190.
Action 16: look for dry_pasta_2073 around wallshelf_190.
Action 17: Observe around pot_54 with the question of Check whether the pot has water.
Action 18: Walk to faucet_134.
Action 19: Switch on faucet_134.
Action 20: Switch off faucet_134.
Action 21: Walk to wallshelf_301.
Action 22: look for dry_pasta_2073 around wallshelf_301.
Action 23: Walk to wallshelf_191.
Action 24: look for dry_pasta_2073 around wallshelf_191.
Action 25: Walk to cupboard_130.

##############################
From agent.py
exp(dry_pasta_2073, cupboard_130)
Fail to find dry_pasta_2073 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(dry_pasta_2073, fridge_140)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(stove_2090)open_executor(stove_2090)exp(fryingpan_2107, stove_2090)walk_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)putin_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(dry_pasta_2073, fridge_140)
Find dry_pasta_2073. 
##############################
From agent.py-> find a plan in act()
walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_54)putin_executor(dry_pasta_2073, pot_54)walk_executor(stove_2090)open_executor(stove_2090)exp(fryingpan_2107, stove_2090)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)putin_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(dry_pasta_2073)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. Robot is close to the dry_pasta_2073. 
##############################
From agent.py
grab_executor(dry_pasta_2073)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. Robot is close to the dry_pasta_2073. Grabbing dry_pasta_2073 by left hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the dry_pasta_2073. 
##############################
From agent.py
putin_executor(dry_pasta_2073, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the dry_pasta_2073. dry_pasta_2073 is inside pot_54. dry_pasta_2073 is close pot_54. pot_54 is close dry_pasta_2073. dry_pasta_2073 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(fryingpan_2107, stove_2090)
Find fryingpan_2107. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)putin_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the pot_54. Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the pot_54. Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the pot_54. Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(food_chicken_2050, fryingpan_2107)
Robot find: Robot is close to the pot_54. Robot is close to the food_chicken_2050. Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. food_chicken_2050 is close fryingpan_2107. food_chicken_2050 is inside fryingpan_2107. fryingpan_2107 is close food_chicken_2050. food_chicken_2050 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure there is water in pot_54 to meet the condition for boiling pasta. Additionally, you need to switch on a heat source, such as a stove, to complete the process of boiling the pasta and cooking the chicken.
##############################
From agent.py
Human Instruction: You need to ensure there is water in pot_54 to meet the condition for boiling pasta. Additionally, you need to switch on a heat source, such as a stove, to complete the process of boiling the pasta and cooking the chicken.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for pot_2093 around kitchen_counter_132.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Observe around pot_54 with the question of Check whether the pot has water.
Action 6: Grab pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for dry_pasta_2073 around cupboard_131.
Action 12: Observe around pot_54 with the question of Check whether the pot has water.
Action 13: Walk to faucet_308.
Action 14: Switch off faucet_308.
Action 15: Walk to wallshelf_190.
Action 16: look for dry_pasta_2073 around wallshelf_190.
Action 17: Observe around pot_54 with the question of Check whether the pot has water.
Action 18: Walk to faucet_134.
Action 19: Switch on faucet_134.
Action 20: Switch off faucet_134.
Action 21: Walk to wallshelf_301.
Action 22: look for dry_pasta_2073 around wallshelf_301.
Action 23: Walk to wallshelf_191.
Action 24: look for dry_pasta_2073 around wallshelf_191.
Action 25: Walk to cupboard_130.
Action 26: look for dry_pasta_2073 around cupboard_130.
Action 27: Walk to fridge_140.
Action 28: Switch off fridge_140.
Action 29: Open fridge_140.
Action 30: look for dry_pasta_2073 around fridge_140.
Action 31: Walk to dry_pasta_2073.
Action 32: Grab dry_pasta_2073.
Action 33: Walk to pot_54.
Action 34: Put dry_pasta_2073 into pot_54.
Action 35: Walk to stove_2090.
Action 36: Open stove_2090.
Action 37: look for fryingpan_2107 around stove_2090.
Action 38: Walk to food_chicken_2050.
Action 39: Grab food_chicken_2050.
Action 40: Walk to fryingpan_2107.
Action 41: Put food_chicken_2050 into fryingpan_2107.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_microwave_149(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_bread,microwave_instance)
        else:
            exp(food_bread,microwave_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,microwave_instance]=True
        close[microwave_instance,food_bread]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once open(pot)
        achieve has_water(pot)
        # Open the pot and fill it with water using the faucet

behavior boil_pasta_and_cook_chicken(pot:item, stove:item, fryingpan:item, food_chicken:item):
    body:
        achieve_once inside(food_chicken, fryingpan)
        # Place the chicken inside the frying pan
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve open(stove)
        # Open the stove
        achieve_once is_on(stove)
        # Turn on the stove to boil pasta and cook chicken

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        # Select frying pan with ID 2107
        bind food_chicken: item where:
            is_food_chicken(food_chicken) and id[food_chicken] == 2050
        # Select food chicken with ID 2050
        fill_pot_with_water(pot, faucet)
        boil_pasta_and_cook_chicken(pot, stove, fryingpan, food_chicken)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once open(pot)
        achieve has_water(pot)
        # Open the pot and fill it with water using the faucet

behavior boil_pasta_and_cook_chicken(pot:item, stove:item, fryingpan:item, food_chicken:item):
    body:
        achieve_once inside(food_chicken, fryingpan)
        # Place the chicken inside the frying pan
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve open(stove)
        # Open the stove
        achieve_once is_on(stove)
        # Turn on the stove to boil pasta and cook chicken

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        # Select frying pan with ID 2107
        bind food_chicken: item where:
            is_food_chicken(food_chicken) and id[food_chicken] == 2050
        # Select food chicken with ID 2050
        fill_pot_with_water(pot, faucet)
        boil_pasta_and_cook_chicken(pot, stove, fryingpan, food_chicken)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill pot_54 with water. Although it checked the pot several times and switched the faucet on and off, there is no confirmation that the pot contains water.
##############################
From agent.py
Human Instruction: The robot needs to fill pot_54 with water. Although it checked the pot several times and switched the faucet on and off, there is no confirmation that the pot contains water.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for pot_2093 around kitchen_counter_132.
Action 3: Walk to pot_54.
Action 4: Open pot_54.
Action 5: Observe around pot_54 with the question of Check whether the pot has water.
Action 6: Grab pot_54.
Action 7: Walk to faucet_134.
Action 8: Switch off faucet_134.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for dry_pasta_2073 around cupboard_131.
Action 12: Observe around pot_54 with the question of Check whether the pot has water.
Action 13: Walk to faucet_308.
Action 14: Switch off faucet_308.
Action 15: Walk to wallshelf_190.
Action 16: look for dry_pasta_2073 around wallshelf_190.
Action 17: Observe around pot_54 with the question of Check whether the pot has water.
Action 18: Walk to faucet_134.
Action 19: Switch on faucet_134.
Action 20: Switch off faucet_134.
Action 21: Walk to wallshelf_301.
Action 22: look for dry_pasta_2073 around wallshelf_301.
Action 23: Walk to wallshelf_191.
Action 24: look for dry_pasta_2073 around wallshelf_191.
Action 25: Walk to cupboard_130.
Action 26: look for dry_pasta_2073 around cupboard_130.
Action 27: Walk to fridge_140.
Action 28: Switch off fridge_140.
Action 29: Open fridge_140.
Action 30: look for dry_pasta_2073 around fridge_140.
Action 31: Walk to dry_pasta_2073.
Action 32: Grab dry_pasta_2073.
Action 33: Walk to pot_54.
Action 34: Put dry_pasta_2073 into pot_54.
Action 35: Walk to stove_2090.
Action 36: Open stove_2090.
Action 37: look for fryingpan_2107 around stove_2090.
Action 38: Walk to food_chicken_2050.
Action 39: Grab food_chicken_2050.
Action 40: Walk to fryingpan_2107.
Action 41: Put food_chicken_2050 into fryingpan_2107.
Action 42: Walk to stove_2090.
Action 43: Put pot_54 on stove_2090.
Action 44: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_table_123(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if there is water in the specified pot
    symbol has_water=exists o: item : (has_water(o) and inside(o, pot))
    return has_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) # Fill the pot with water
        achieve_once closed(faucet) # Ensure the faucet is turned off after filling

behavior cook_pasta_and_chicken(pot:item, stove:item, fryingpan:item, pasta:item, chicken:item):
    body:
        achieve inside(pasta, pot) # Add dry pasta to pot
        achieve inside(chicken, fryingpan) # Add chicken to fryingpan
        achieve_once on(pot, stove) # Place pot on stove
        achieve_once on(fryingpan, stove) # Place fryingpan on stove
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select pot with ID 54
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2107
        # Select fryingpan with ID 2107
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and id[dry_pasta]==2073
        # Select dry pasta with ID 2073
        bind food_chicken: item where:
            is_food_chicken(food_chicken) and id[food_chicken]==2050
        # Select chicken with ID 2050

        if not has_water_in_pot(pot):
            fill_pot_with_water(pot, faucet)

        cook_pasta_and_chicken(pot, stove, fryingpan, dry_pasta, food_chicken)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2102_around_microwave_149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

behavior find_fork_2104_around_table_123(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        achieve_once is_off(faucet)

behavior cook_pasta_and_chicken(pot:item, stove:item, dry_pasta:item, chicken:item, fryingpan:item):
    body:
        achieve_once inside(dry_pasta, pot)
        achieve_once is_on(stove) 
        achieve_once inside(chicken, fryingpan)
        achieve_once on(pot, stove) 

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and id[dry_pasta] == 2073
        # Select dry pasta with ID 2073

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select food chicken with ID 2050
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        # Select fryingpan with ID 2107

        fill_pot_with_water(pot, faucet)
        cook_pasta_and_chicken(pot, stove, dry_pasta, chicken, fryingpan)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_table_123(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve open(pot)
        # Ensure the pot is open to fill with water
        achieve has_water(pot)
        # Fill the pot with water from the faucet
        achieve_once closed(pot)
        # Close the pot after filling it

behavior boil_pasta(pot:item, stove:item):
    body:
        achieve_once inside(dry_pasta_2073, pot)
        # Insert dry pasta into the pot with water
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the pasta

behavior cook_chicken(food:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(food, fryingpan)
        # Place chicken in the frying pan
        achieve on(fryingpan, stove)
        # Place the pan on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134

        fill_pot_with_water(pot, faucet)
        # Fill pot with water for boiling pasta

        boil_pasta(pot, stove)
        # Boil pasta in the pot

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        # Select frying pan with ID 2107

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select food chicken with ID 2050

        cook_chicken(chicken, fryingpan, stove)
        # Cook the chicken in the frying pan
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dry_pasta_2073; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fork_2103_around_table_123(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve open(pot)
        # Ensure the pot is open to fill with water
        achieve has_water(pot)
        # Fill the pot with water from the faucet
        achieve_once closed(pot)
        # Close the pot after filling it

behavior boil_pasta(pot:item, stove:item, pasta:item):
    body:
        achieve_once inside(pasta, pot)
        # Insert dry pasta into the pot with water
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the pasta

behavior cook_chicken(food:item, fryingpan:item, stove:item):
    body:
        achieve_once inside(food, fryingpan)
        # Place chicken in the frying pan
        achieve on(fryingpan, stove)
        # Place the pan on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134

        fill_pot_with_water(pot, faucet)
        # Fill pot with water for boiling pasta

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select dry pasta

        boil_pasta(pot, stove, dry_pasta)
        # Boil pasta in the pot

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        # Select frying pan with ID 2107

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        # Select food chicken with ID 2050

        cook_chicken(chicken, fryingpan, stove)
        # Cook the chicken in the frying pan

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. boil the pasta and cook the chicken." ?
Answer: Fill a pot with water and put it on the stove. Turn on the stove and add the pasta to the pot. Put some oil in a frying pan and place it on the stove. Turn on the stove and add the chicken to the frying pan.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot) # Fill the pot with water

behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot) # Put pasta into the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve_once is_on(stove) # Turn on the stove to cook the pasta

behavior prep_chicken(chicken:item, fryingpan:item, stove:item):
    body:
        bind oil: item where:
            is_oil(oil)
        achieve_once inside(oil, fryingpan) # Add oil to the frying pan
        achieve_once inside(chicken, fryingpan) # Add chicken to the frying pan
        achieve_once on(fryingpan, stove) # Place the frying pan on the stove
        achieve_once is_on(stove) # Turn on the stove to cook the chicken

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        bind pasta: item where:
            is_dry_pasta(pasta) and id[pasta] == 2073
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        fill_pot_with_water(pot, faucet)
        cook_pasta(pasta, pot, stove)
        prep_chicken(chicken, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot) # Fill the pot with water

behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve_once inside(pasta, pot) # Put pasta into the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve_once is_on(stove) # Turn on the stove to cook the pasta

behavior prep_chicken(chicken:item, fryingpan:item, stove:item):
    body:
        bind oil: item where:
            is_oil(oil)
        achieve_once inside(oil, fryingpan) # Add oil to the frying pan
        achieve_once inside(chicken, fryingpan) # Add chicken to the frying pan
        achieve_once on(fryingpan, stove) # Place the frying pan on the stove
        achieve_once is_on(stove) # Turn on the stove to cook the chicken

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        bind pasta: item where:
            is_dry_pasta(pasta) and id[pasta] == 2073
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2050
        fill_pot_with_water(pot, faucet)
        cook_pasta(pasta, pot, stove)
        prep_chicken(chicken, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(fryingpan_2107)putin_executor(oil_2102, fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)
##############################
From agent.py
walk_executor(oil_2102)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. 
##############################
From agent.py
grab_executor(oil_2102)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. Grabbing oil_2102 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. Robot is close to the fryingpan_2107. 
##############################
From agent.py
putin_executor(oil_2102, fryingpan_2107)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. Robot is close to the fryingpan_2107. oil_2102 is close fryingpan_2107. oil_2102 is inside fryingpan_2107. fryingpan_2107 is close oil_2102. oil_2102 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2107)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the oil_2102. Robot is close to the fryingpan_2107. Grabbing fryingpan_2107 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(fryingpan_2107, stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the fryingpan_2107. Robot is close to the stove_2090. fryingpan_2107 is on stove_2090. stove_2090 is close fryingpan_2107. fryingpan_2107 is close stove_2090. fryingpan_2107 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that pot_54 is filled with water before boiling the pasta. Make sure the pot has water by turning on faucet_134 and filling it.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_table_123(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(fork,table_instance)
        else:
            exp(fork,table_instance)
    eff:
        unknown[fork]=False
        close[fork,table_instance]=True
        close[table_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_plate_2105_around_table_123(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior combine_pasta_and_chicken(pasta:item, chicken:item, plate:item):
    body:
        achieve_once on(pasta, plate)
        achieve_once on(chicken, plate)

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select cooked pasta
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select cooked chicken
        
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        combine_pasta_and_chicken(pasta, chicken, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior combine_pasta_and_chicken(pasta:item, chicken:item, plate:item):
    body:
        achieve_once on(pasta, plate)
        achieve_once on(chicken, plate)

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select cooked pasta
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select cooked chicken
        
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        combine_pasta_and_chicken(pasta, chicken, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(plate_2105, table_123)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(plate_2105)put_executor(dry_pasta_2073, plate_2105)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(plate_2105)put_executor(food_chicken_2050, plate_2105)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(plate_2105, table_123)
Fail to find plate_2105 around table_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(plate_2105, kitchen_counter_128)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(plate_2105)put_executor(dry_pasta_2073, plate_2105)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(plate_2105)put_executor(food_chicken_2050, plate_2105)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(plate_2105, kitchen_counter_128)
Fail to find plate_2105 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_193)exp(plate_2105, table_193)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(plate_2105)put_executor(dry_pasta_2073, plate_2105)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(plate_2105)put_executor(food_chicken_2050, plate_2105)
##############################
From agent.py
walk_executor(table_193)
Robot find: dvd_player_2000, pillow_195, laser_pointer_2025, mat_201, mouse_2112, chair_2119, oil_2005, keyboard_2111, drawing_196, Robot is close to the table_193. 
##############################
From agent.py
exp(plate_2105, table_193)
Fail to find plate_2105 around table_193. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(plate_2105, table_127)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(plate_2105)put_executor(dry_pasta_2073, plate_2105)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(plate_2105)put_executor(food_chicken_2050, plate_2105)
##############################
From agent.py
walk_executor(table_127)
Robot find: mat_115, fork_2104, console_2027, crayon_2030, bowl_2096, bowl_2097, napkin_2014, plate_2105, Robot is close to the mat_115. Robot is close to the table_127. 
##############################
From agent.py
exp(plate_2105, table_127)
Find plate_2105. 
##############################
From agent.py-> find a plan in act()
walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(plate_2105)put_executor(dry_pasta_2073, plate_2105)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(plate_2105)put_executor(food_chicken_2050, plate_2105)
##############################
From agent.py
walk_executor(dry_pasta_2073)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(dry_pasta_2073)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the pot_54. Grabbing dry_pasta_2073 by right hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(dry_pasta_2073, plate_2105)
Robot find: Robot is close to the dry_pasta_2073. Robot is close to the plate_2105. Robot is close to the table_127. dry_pasta_2073 is close plate_2105. dry_pasta_2073 is on plate_2105. plate_2105 is close dry_pasta_2073. dry_pasta_2073 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fryingpan_2107. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fryingpan_2107. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the plate_2105. Robot is close to the table_127. 
##############################
From agent.py
put_executor(food_chicken_2050, plate_2105)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the plate_2105. Robot is close to the table_127. food_chicken_2050 is close plate_2105. plate_2105 is close food_chicken_2050. food_chicken_2050 is on plate_2105. food_chicken_2050 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make chicken pasta, put it in a plate.
Action History:
['walk_executor(kitchen_counter_132)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(wallshelf_190)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(wallshelf_301)', 'walk_executor(wallshelf_191)', 'walk_executor(cupboard_130)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(dry_pasta_2073)', 'grab_executor(dry_pasta_2073)', 'walk_executor(pot_54)', 'putin_executor(dry_pasta_2073, pot_54)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(fryingpan_2107)', 'putin_executor(food_chicken_2050, fryingpan_2107)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(oil_2102)', 'grab_executor(oil_2102)', 'walk_executor(fryingpan_2107)', 'putin_executor(oil_2102, fryingpan_2107)', 'grab_executor(fryingpan_2107)', 'walk_executor(stove_2090)', 'put_executor(fryingpan_2107, stove_2090)', 'walk_executor(table_123)', 'walk_executor(kitchen_counter_128)', 'walk_executor(table_193)', 'walk_executor(table_127)', 'walk_executor(dry_pasta_2073)', 'grab_executor(dry_pasta_2073)', 'walk_executor(plate_2105)', 'put_executor(dry_pasta_2073, plate_2105)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(plate_2105)', 'put_executor(food_chicken_2050, plate_2105)']
Time info:
Time consume: 666 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 0
goal generate times: 7
goal correct times: 1
action_num: 52

Task complete rate:
1
Scene_id: 2
##############################
