From agent.py
Reset goals: The sub-goals are: 
['1. Find the frying pan and place it on the stove.', '2. Crack the egg into the pan and scramble it on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_peanut_butter_2033_around_fridge_289(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_peanut_butter,fridge_instance)
        else:
            exp(food_peanut_butter,fridge_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,fridge_instance]=True
        close[fridge_instance,food_peanut_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_place_fryingpan(fryingpan:item, stove:item):
    body:
        achieve close_char(char, fryingpan)
        # Ensure the character is close to the frying pan

        achieve_once inhand(fryingpan)
        # Grasp the frying pan briefly to move it

        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        find_and_place_fryingpan(fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_peanut_butter_2033_around_fridge_289(food_peanut_butter:item):
    goal: not unknown(food_peanut_butter)
    body:
        assert is_food_peanut_butter(food_peanut_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_peanut_butter,fridge_instance)
        else:
            exp(food_peanut_butter,fridge_instance)
    eff:
        unknown[food_peanut_butter]=False
        close[food_peanut_butter,fridge_instance]=True
        close[fridge_instance,food_peanut_butter]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_fryingpan_on_stove(fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove to place the frying pan on

        place_fryingpan_on_stove(fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior place_fryingpan_on_stove(fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove to place the frying pan on

        place_fryingpan_on_stove(fryingpan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(fryingpan_2083, kitchen_counter_230)walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find cutting_board_2051. Find pot_2069. Find knife_2050. Find napkin_2005. Find drawing_238. Find drawing_239. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Find cup_2064. Find cup_2063. Find oil_2079. Find fryingpan_2083. Find tray_296. Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(fryingpan_2083, kitchen_counter_230)
Find fryingpan_2083. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_and_scramble_egg(egg:item, fryingpan:item, stove:item):
    body:
        achieve_once inhand(egg) # Hold the egg only until it is cracked into the pan
        achieve inside(egg, fryingpan) # Crack the egg into the frying pan
        achieve is_on(stove) # Ensure the stove is turned on

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to crack and scramble
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select a frying pan that is on the stove

        bind stove: item where:
            is_stove(stove)
        # Select the stove to use

        crack_and_scramble_egg(egg, fryingpan, stove)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation
 
behavior crack_and_scramble_egg(egg:item, fryingpan:item, stove:item):
    body:
        achieve_once inhand(egg) # Hold the egg only until it is cracked into the pan
        achieve inside(egg, fryingpan) # Crack the egg into the frying pan
        achieve is_on(stove) # Ensure the stove is turned on

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to crack and scramble
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select a frying pan that is on the stove

        bind stove: item where:
            is_stove(stove)
        # Select the stove to use

        crack_and_scramble_egg(egg, fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation
 
behavior crack_and_scramble_egg(egg:item, fryingpan:item, stove:item):
    body:
        achieve_once inhand(egg) # Hold the egg only until it is cracked into the pan
        achieve inside(egg, fryingpan) # Crack the egg into the frying pan
        achieve is_on(stove) # Ensure the stove is turned on

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to crack and scramble
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and exists stove: item : is_stove(stove) and on(fryingpan, stove)
        # Select a frying pan that is on the stove

        bind stove: item where:
            is_stove(stove)
        # Select the stove to use

        crack_and_scramble_egg(egg, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_and_scramble_egg(egg:item, frying_pan:item, stove:item):
    body:
        achieve inside(egg, frying_pan)
        # Ensure the egg is inside the frying pan

        achieve is_on(stove)
        # Make sure the stove is on

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and scrambled

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, stove)
        # Select the frying pan that is on the stove

        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        crack_and_scramble_egg(egg, frying_pan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<frying_pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation
 
behavior crack_and_scramble_egg(egg:item, frying_pan:item, stove:item):
    body:
        achieve inside(egg, frying_pan)
        # Ensure the egg is inside the frying pan

        achieve is_on(stove)
        # Make sure the stove is on

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and scrambled

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, stove)
        # Select the frying pan that is on the stove

        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        crack_and_scramble_egg(egg, frying_pan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<frying_pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_remote_control_2052_around_couch_352(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(remote_control,couch_instance)
        else:
            exp(remote_control,couch_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,couch_instance]=True
        close[couch_instance,remote_control]=True
    

#goal_representation
 
behavior crack_and_scramble_egg(egg:item, frying_pan:item, stove:item):
    body:
        achieve inside(egg, frying_pan)
        # Ensure the egg is inside the frying pan

        achieve is_on(stove)
        # Make sure the stove is on

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and scrambled

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, stove)
        # Select the frying pan that is on the stove

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        crack_and_scramble_egg(egg, frying_pan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def has_egg(thing:item):
    # Function to check if the item is an egg
    symbol egg=exists o: item : is_food_egg(o) and id[o]==thing
    return egg

behavior crack_and_scramble_egg(egg:item, pan:item, stove:item):
    body:
        achieve inside(egg, pan)
        # Add cracked egg into the frying pan
        achieve is_on(stove)
        # Ensure the stove is on for scrambling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and scrambled

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2065)
        # Select the frying pan that has been placed on the stove with ID 2065

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        crack_and_scramble_egg(egg, pan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Invalid comparison: id(V::o) vs V::thing
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation
 
behavior crack_and_scramble_egg(egg:item, pan:item, stove:item):
    body:
        achieve inside(egg, pan) # Move to the cracking stage
        achieve is_on(stove) # Ensure stove is on for scrambling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and scrambled

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove_2065)
        # Select the frying pan that has been placed on the stove with ID 2065

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        crack_and_scramble_egg(egg, pan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#goal_representation
 
behavior crack_and_scramble_egg(egg:item, pan:item, stove:item):
    body:
        achieve inside(egg, pan) # Move to the cracking stage
        achieve is_on(stove) # Ensure stove is on for scrambling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg to be cracked and scrambled

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select the frying pan that has been placed on the stove with ID 2065

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        crack_and_scramble_egg(egg, pan, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)']
Time info:
Time consume: 110 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 10
goal generate times: 5
goal correct times: 2

Task complete rate:
Keystate: k1 - Requires: 12 steps
Keystate: k2 - Requires: 12 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
