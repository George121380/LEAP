From agent.py
Reset goals: The sub-goals are: 
['1. Find the shirt that needs to be ironed.', '2. Iron the shirt.', '3. Put the ironed shirt on the bed.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_ironing_board_2074(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_iron_2089_around_ironing_board_2074(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_shirt(shirt:item):
    body:
        observe(shirt, "Is this the shirt that needs to be ironed")

behavior __goal__():
    body:
        foreach shirt: item:
            if is_clothes_shirt(shirt) and not visited(shirt):
                find_shirt(shirt)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_shirt(shirt:item):
    body:
        observe(shirt, "Is this the shirt that needs to be ironed")

behavior __goal__():
    body:
        foreach shirt: item:
            if is_clothes_shirt(shirt) and not visited(shirt):
                find_shirt(shirt)

##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2074)exp(clothes_shirt_2086, ironing_board_2074)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Is this the shirt that needs to be ironed)
##############################
From agent.py
walk_executor(ironing_board_2074)
Find iron_2089. Robot is inside the bathroom_1. Robot is close to the ironing_board_2074. 
##############################
From agent.py
exp(clothes_shirt_2086, ironing_board_2074)
Fail to find clothes_shirt_2086 around ironing_board_2074. 
##############################
From agent.py-> find a plan in act()
walk_executor(washing_machine_2007)open_executor(washing_machine_2007)exp(clothes_shirt_2086, washing_machine_2007)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Is this the shirt that needs to be ironed)
##############################
From agent.py
walk_executor(washing_machine_2007)
Robot is inside the bathroom_1. Robot is close to the washing_machine_2007. Robot is no longer close ironing_board_2074.
##############################
From agent.py
open_executor(washing_machine_2007)
Robot is inside the bathroom_1. Robot is close to the washing_machine_2007. 
##############################
From agent.py
exp(clothes_shirt_2086, washing_machine_2007)
Fail to find clothes_shirt_2086 around washing_machine_2007. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Iron the shirt.', '2. Put the shirt on the bed.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_154(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt(shirt:item, iron:item):
    body:
        achieve clean(shirt)
        # Ensure the shirt is clean after ironing

behavior prepare_ironing_board(board:item, shirt:item):
    body:
        achieve on(shirt, board)
        # Place the shirt on the ironing board

behavior start_ironing_process(iron:item):
    body:
        achieve is_on(iron)
        # Turn on the iron for ironing the shirt

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind shirt: item where:
            is_clothes_shirt(shirt) and id[clothes_shirt_2086]
        # Select the shirt with ID 2086

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        prepare_ironing_board(ironing_board, shirt)
        # Place the shirt on the ironing board

        start_ironing_process(iron)
        # Turn on the iron

        iron_shirt(shirt, iron)
        # Iron the shirt to ensure it is clean

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: clothes_shirt_2086; available variables: [Variable<shirt: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_154(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

#goal_representation
behavior iron_shirt(shirt:item, iron:item):
    body:
        achieve clean(shirt)

behavior prepare_ironing_board(board:item, shirt:item):
    body:
        achieve on(shirt, board)

behavior start_ironing_process(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074

        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086

        bind iron: item where:
            is_iron(iron)

        prepare_ironing_board(ironing_board, shirt)
        start_ironing_process(iron)
        iron_shirt(shirt, iron)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior iron_shirt(shirt:item, iron:item):
    body:
        achieve clean(shirt)

behavior prepare_ironing_board(board:item, shirt:item):
    body:
        achieve on(shirt, board)

behavior start_ironing_process(iron:item):
    body:
        achieve is_on(iron)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074

        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086

        bind iron: item where:
            is_iron(iron)

        prepare_ironing_board(ironing_board, shirt)
        start_ironing_process(iron)
        iron_shirt(shirt, iron)
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_154)exp(clothes_shirt_2086, closetdrawer_154)walk_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)plugin_executor(iron_2089)switchon_executor(iron_2089)walk_executor(clothes_shirt_2086)wash_executor(clothes_shirt_2086)
##############################
From agent.py
walk_executor(closetdrawer_154)
Find hanger_109. Find hanger_110. Find hanger_132. Find hanger_140. Find hanger_141. Find hanger_124. Find hanger_115. Find hanger_134. Find mat_173. Find hanger_136. Find hanger_128. Find hanger_130. Find hanger_138. Find hanger_142. Find hanger_126. Find hanger_111. Find hanger_113. Find hanger_114. Find hanger_112. Robot is inside the bedroom_67. Robot is close to the closetdrawer_160. Robot is close to the closetdrawer_154. Robot is close to the dresser_123. Robot is no longer inside bathroom_1.Robot is no longer close washing_machine_2007.
##############################
From agent.py
exp(clothes_shirt_2086, closetdrawer_154)
Fail to find clothes_shirt_2086 around closetdrawer_154. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Iron the shirt and put it on the bed.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_clothes_shirt_2086_around_hanger_109(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==109
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
behavior iron_shirt_and_place_on_bed(shirt:item, bed:item, iron:item, ironing_board:item):
    body:
        achieve clean(shirt) 
        # Ensure the shirt is clean before ironing it

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Select the ironing board for the task

        achieve inside(shirt, ironing_board)
        # Place the shirt on the ironing board for ironing

        bind iron: item where:
            is_iron(iron)
        # Select an iron for ironing the shirt

        achieve plugged(iron) # Plug in the iron
        achieve is_on(iron)   # Turn on the iron

        achieve_once inhand(iron)   
        # Temporarily hold the iron for the task until complete

        observe(ironing_board, "Iron the shirt placed on the ironing board")

        achieve_on_char(iron, ironing_board)
        # Place the iron back on the ironing board after use

        achieve on(shirt, bed) 
        # Place the ironed shirt neatly on the bed

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and clean(shirt)
        # Select the shirt that is to be ironed

        bind bed: item where:
            is_bed(bed)
        # Select the bed for placing the shirt after ironing

        bind iron: item where:
            is_iron(iron)
        # Bind an iron for use in ironing the shirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board) 
        # Bind an ironing board for the shirt

        iron_shirt_and_place_on_bed(shirt, bed, iron, ironing_board)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable ironing_board already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_shirt_2086_around_hanger_142(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==142
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

#goal_representation
behavior iron_shirt_and_place_on_bed(shirt:item, bed:item, iron:item, ironing_board:item):
    body:
        achieve clean(shirt) 
        # Ensure the shirt is clean before ironing it

        achieve inside(shirt, ironing_board)
        # Place the shirt on the ironing board for ironing

        achieve plugged(iron) # Plug in the iron
        achieve is_on(iron)   # Turn on the iron

        achieve_once inhand(iron)   
        # Temporarily hold the iron for the task until complete

        observe(ironing_board, "Iron the shirt placed on the ironing board")

        achieve on(shirt, bed) 
        # Place the ironed shirt neatly on the bed

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt)
        # Select the shirt that is to be ironed

        bind bed: item where:
            is_bed(bed)
        # Select the bed for placing the shirt after ironing

        bind iron: item where:
            is_iron(iron)
        # Bind an iron for use in ironing the shirt

        bind ironing_board: item where:
            is_ironing_board(ironing_board)
        # Bind an ironing board for the shirt

        iron_shirt_and_place_on_bed(shirt, bed, iron, ironing_board)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_basket_for_clothes_2006_around_cupboard_229(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(basket_for_clothes,cupboard_instance)
        else:
            exp(basket_for_clothes,cupboard_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,cupboard_instance]=True
        close[cupboard_instance,basket_for_clothes]=True
    

behavior find_hanger_114_around_closetdrawer_150(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_clothes_shirt_2086_around_hanger_114(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==114
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
def find_shirt_location(item: item):
    # Function to check the location of clothes_shirt_2086
    observe(item, "Check where clothes_shirt_2086 is located")

behavior iron_shirt_and_place_on_bed(shirt: item, ironing_board: item, bed: item):
    body:
        achieve plugged(ironing_board)
        achieve is_on(ironing_board)
        achieve clean(shirt)
        achieve on(shirt, drying_rack) 
        # Note: An intermediary state as the shirt needs to be hung
        achieve plugged(ironing_board)
        achieve open(clothes_wardrobe)
        achieve inside(shirt, clothes_wardrobe)
        # This is assumed as returning to wardrobe after ironing

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)

        bind clothes_shirt_2086: item where:
            is_clothes_shirt(clothes_shirt_2086)

        if not visited(clothes_shirt_2086):
            # Check if clothes_shirt_2086 has already been located
            find_shirt_location(clothes_shirt_2086)

        bind bed: item where:
            is_bed(bed)
            
        iron_shirt_and_place_on_bed(clothes_shirt_2086, ironing_board, bed)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_hanger_140_around_hanger_140(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==140
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(hanger,hanger_instance)
        else:
            exp(hanger,hanger_instance)
    eff:
        unknown[hanger]=False
        close[hanger,hanger_instance]=True
        close[hanger_instance,hanger]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_158(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==158
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

#goal_representation
 
behavior iron_shirt_and_place_on_bed(shirt: item, ironing_board: item, bed: item):
    body:
        achieve plugged(ironing_board)
        achieve is_on(ironing_board)
        achieve clean(shirt)
        achieve on(shirt, bed)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)

        bind clothes_shirt_2086: item where:
            is_clothes_shirt(clothes_shirt_2086)

        # Check if clothes_shirt_2086 has already been located
        if not visited(clothes_shirt_2086):
            find_shirt_location(clothes_shirt_2086)

        bind bed: item where:
            is_bed(bed)

        iron_shirt_and_place_on_bed(clothes_shirt_2086, ironing_board, bed)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function find_shirt_location not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_shirt_2086_around_hanger_142(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==142
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_basket_for_clothes_2006_around_coffee_table_2068(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(basket_for_clothes,coffee_table_instance)
        else:
            exp(basket_for_clothes,coffee_table_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,coffee_table_instance]=True
        close[coffee_table_instance,basket_for_clothes]=True
    

#goal_representation
 
behavior iron_shirt_and_place_on_bed(shirt: item, ironing_board: item, bed: item):
    body:
        achieve plugged(ironing_board)
        achieve is_on(ironing_board)
        achieve clean(shirt)
        achieve on(shirt, bed)

behavior locate_shirt(shirt: item):
    body:
        observe(shirt, "Locate the shirt")

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board)

        bind clothes_shirt_2086: item where:
            is_clothes_shirt(clothes_shirt_2086)

        # Check if clothes_shirt_2086 has already been located
        if not visited(clothes_shirt_2086):
            locate_shirt(clothes_shirt_2086)

        bind bed: item where:
            is_bed(bed)

        iron_shirt_and_place_on_bed(clothes_shirt_2086, ironing_board, bed)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_hanger_114(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==114
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_shirt,hanger_instance)
        else:
            exp(clothes_shirt,hanger_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,hanger_instance]=True
        close[hanger_instance,clothes_shirt]=True
    

behavior find_chair_103_around_table_226(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_clothes_shirt_near(ironing_board: item):
    # Determine if there is a shirt near the ironing board
    symbol shirt_near=exists shirt: item: is_clothes_shirt(shirt) and close(shirt, ironing_board)
    return shirt_near

behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)
        achieve on(shirt, ironing_board)
        # Assume ironing process requires the shirt to be on the board and the iron to be active

behavior unplug_and_cool_down_iron(iron:item):
    body:
        achieve unplugged(iron)
        achieve is_off(iron)
        # After ironing, unplug and turn off the iron

behavior place_shirt_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)
        # Place the shirt on the bed

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        if is_clothes_shirt_near(ironing_board):
            bind shirt: item where:
                is_clothes_shirt(shirt) and close(shirt, ironing_board)
            # Select the shirt that is close to the ironing board

            iron_shirt(shirt, iron, ironing_board)
            # Iron the shirt

            unplug_and_cool_down_iron(iron)
            # Unplug and cool down the iron

            bind bed: item where:
                is_bed(bed)
            # Select a bed to place the shirt on

            place_shirt_on_bed(shirt, bed)
            # Place the shirt on the bed

        else:
            # If no shirt is found near the ironing board, further observation may be needed
            foreach shirt: item:
                if is_clothes_shirt(shirt) and not visited(shirt):
                    observe(shirt, "Find shirt_2086 around")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_clothes_shirt_near(ironing_board: item):
    # Determine if there is a shirt near the ironing board
    symbol shirt_near=exists shirt: item: is_clothes_shirt(shirt) and close(shirt, ironing_board)
    return shirt_near

behavior iron_shirt(shirt:item, iron:item, ironing_board:item):
    body:
        achieve plugged(iron)
        achieve is_on(iron)
        achieve on(shirt, ironing_board)
        # Assume ironing process requires the shirt to be on the board and the iron to be active

behavior unplug_and_cool_down_iron(iron:item):
    body:
        achieve unplugged(iron)
        achieve is_off(iron)
        # After ironing, unplug and turn off the iron

behavior place_shirt_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)
        # Place the shirt on the bed

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind iron: item where:
            is_iron(iron)
        # Select an iron

        if is_clothes_shirt_near(ironing_board):
            bind shirt: item where:
                is_clothes_shirt(shirt) and close(shirt, ironing_board)
            # Select the shirt that is close to the ironing board

            iron_shirt(shirt, iron, ironing_board)
            # Iron the shirt

            unplug_and_cool_down_iron(iron)
            # Unplug and cool down the iron

            bind bed: item where:
                is_bed(bed)
            # Select a bed to place the shirt on

            place_shirt_on_bed(shirt, bed)
            # Place the shirt on the bed

        else:
            # If no shirt is found near the ironing board, further observation may be needed
            foreach shirt: item:
                if is_clothes_shirt(shirt) and not visited(shirt):
                    observe(shirt, "Find shirt_2086 around")

##############################
From agent.py-> find a plan in act()
walk_executor(hanger_114)exp(clothes_shirt_2086, hanger_114)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Find shirt_2086 around)
##############################
From agent.py
walk_executor(hanger_114)
Robot is inside the bedroom_67. Robot is close to the hanger_114. Robot is close to the dresser_108. Robot is no longer close closetdrawer_160.Robot is no longer close closetdrawer_154.Robot is no longer close dresser_123.
##############################
From agent.py
exp(clothes_shirt_2086, hanger_114)
Fail to find clothes_shirt_2086 around hanger_114. 
##############################
From agent.py-> find a plan in act()
walk_executor(hanger_113)exp(clothes_shirt_2086, hanger_113)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Find shirt_2086 around)
##############################
From agent.py
walk_executor(hanger_113)
Robot is inside the bedroom_67. Robot is close to the dresser_108. Robot is close to the hanger_113. Robot is no longer close hanger_114.
##############################
From agent.py
exp(clothes_shirt_2086, hanger_113)
Fail to find clothes_shirt_2086 around hanger_113. 
##############################
From agent.py-> find a plan in act()
walk_executor(hanger_130)exp(clothes_shirt_2086, hanger_130)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Find shirt_2086 around)
##############################
From agent.py
walk_executor(hanger_130)
Robot is inside the bedroom_67. Robot is close to the hanger_130. Robot is close to the dresser_123. Robot is no longer close hanger_113.Robot is no longer close dresser_108.
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find clothes_shirt_2086 ?
Answer: The target item, clothes_shirt_2086, is located inside bathroom_1. You can find it inside the basket_for_clothes_2006. Look for the basket for clothes, and the shirt will be inside it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, clothes_shirt_2086, is located inside bathroom_1. You can find it inside the basket_for_clothes_2006. Look for the basket for clothes, and the shirt will be inside it.

The actions you have taken:
Action 1: Walk to ironing_board_2074.
Action 2: look for clothes_shirt_2086 around ironing_board_2074.
Action 3: Walk to washing_machine_2007.
Action 4: Open washing_machine_2007.
Action 5: look for clothes_shirt_2086 around washing_machine_2007.
Action 6: Walk to closetdrawer_154.
Action 7: look for clothes_shirt_2086 around closetdrawer_154.
Action 8: Walk to hanger_114.
Action 9: look for clothes_shirt_2086 around hanger_114.
Action 10: Walk to hanger_113.
Action 11: look for clothes_shirt_2086 around hanger_113.
Action 12: Walk to hanger_130.

##############################
From agent.py
exp(clothes_shirt_2086, hanger_130)
Fail to find clothes_shirt_2086 around hanger_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)exp(clothes_shirt_2086, sink_42)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Find shirt_2086 around)
##############################
From agent.py
walk_executor(sink_42)
Find towel_rack_32. Find towel_rack_34. Find towel_rack_31. Find detergent_2084. Find soap_2053. Find basket_for_clothes_2006. Find cleaning_solution_2073. Robot is inside the bathroom_1. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. Robot is no longer inside bedroom_67.Robot is no longer close hanger_130.Robot is no longer close dresser_123.
##############################
From agent.py
exp(clothes_shirt_2086, sink_42)
Fail to find clothes_shirt_2086 around sink_42. 
##############################
From agent.py-> find a plan in act()
walk_executor(basket_for_clothes_2006)exp(clothes_shirt_2086, basket_for_clothes_2006)walk_executor(clothes_shirt_2086)obs(clothes_shirt_2086, Find shirt_2086 around)
##############################
From agent.py
walk_executor(basket_for_clothes_2006)
Find clothes_pants_2085. Find clothes_shirt_2086. Find clothes_socks_2087. Find clothes_skirt_2088. Find mat_22. Find towel_rack_33. Robot is inside the bathroom_1. Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. Robot is no longer close bathroom_counter_41.Robot is no longer close sink_42.
##############################
From agent.py
exp(clothes_shirt_2086, basket_for_clothes_2006)
Find clothes_shirt_2086. 
##############################
From agent.py-> find a plan in act()
obs(clothes_shirt_2086, Find shirt_2086 around)
##############################
From agent.py
obs(clothes_shirt_2086, Find shirt_2086 around)
Get this information:  clothes_shirt_2086 is inside bathroom_1. clothes_shirt_2086 is inside basket_for_clothes_2006. clothes_shirt_2086 is close to basket_for_clothes_2006. clothes_shirt_2086 is close to character_65. clothes_shirt_2086 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to clean or iron clothes_shirt_2086, as it was found to be dirty inside the basket_for_clothes_2006. Proceed by ensuring the shirt is cleaned, either through washing or another cleaning method, and then iron it. Once the shirt is ironed, place it on the bed.
##############################
From agent.py
Human Instruction: You need to clean or iron clothes_shirt_2086, as it was found to be dirty inside the basket_for_clothes_2006. Proceed by ensuring the shirt is cleaned, either through washing or another cleaning method, and then iron it. Once the shirt is ironed, place it on the bed.

The actions you have taken:
Action 1: Walk to ironing_board_2074.
Action 2: look for clothes_shirt_2086 around ironing_board_2074.
Action 3: Walk to washing_machine_2007.
Action 4: Open washing_machine_2007.
Action 5: look for clothes_shirt_2086 around washing_machine_2007.
Action 6: Walk to closetdrawer_154.
Action 7: look for clothes_shirt_2086 around closetdrawer_154.
Action 8: Walk to hanger_114.
Action 9: look for clothes_shirt_2086 around hanger_114.
Action 10: Walk to hanger_113.
Action 11: look for clothes_shirt_2086 around hanger_113.
Action 12: Walk to hanger_130.
Action 13: look for clothes_shirt_2086 around hanger_130.
Action 14: Walk to sink_42.
Action 15: look for clothes_shirt_2086 around sink_42.
Action 16: Walk to basket_for_clothes_2006.
Action 17: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 18: Observe around clothes_shirt_2086 with the question of Find shirt_2086 around.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2048_around_hanger_142(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==142
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_scarf,hanger_instance)
        else:
            exp(clothes_scarf,hanger_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,hanger_instance]=True
        close[hanger_instance,clothes_scarf]=True
    

behavior find_clothes_hat_2045_around_hanger_142(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==142
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_hat,hanger_instance)
        else:
            exp(clothes_hat,hanger_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,hanger_instance]=True
        close[hanger_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
def has_water(bed:item):
    # Function to check if the shirt is on the bed
    symbol has_water=exists o: item : (is_bed(o)) and inside(char, bed)
    return has_water

behavior iron_shirt(shirt:item):
    body:
        achieve is_clothes(shirt)
        # Ensure the shirt is ironed

behavior place_shirt_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)
        # Ensure the shirt is placed on the bed

behavior __goal__():
    body:
        bind clothes_shirt_2086: item where:
            is_clothes_shirt(clothes_shirt_2086)
        # Select the shirt with ID 2086

        bind bed: item where:
            is_bed(bed)
        # Select a bed

        iron_shirt(clothes_shirt_2086)
        # Iron the shirt
        place_shirt_on_bed(clothes_shirt_2086, bed)
        # Place the shirt on the bed

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Error during applying inside[observation, state](x: item, y: item).
  Arguments: O::char, V::bed
Argument #0 type does not match: expect item, got character.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_hanger_140_around_hanger_140(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==140
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(hanger,hanger_instance)
        else:
            exp(hanger,hanger_instance)
    eff:
        unknown[hanger]=False
        close[hanger,hanger_instance]=True
        close[hanger_instance,hanger]=True
    

#goal_representation
behavior iron_shirt(shirt:item):
    body:
        achieve is_clothes(shirt)
        # Ensure the shirt is ironed

behavior place_shirt_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)
        # Ensure the shirt is placed on the bed

behavior __goal__():
    body:
        bind clothes_shirt_2086: item where:
            is_clothes_shirt(clothes_shirt_2086)
        # Select the shirt with ID 2086

        bind bed: item where:
            is_bed(bed)
        # Select a bed

        iron_shirt(clothes_shirt_2086)
        # Iron the shirt
        place_shirt_on_bed(clothes_shirt_2086, bed)
        # Place the shirt on the bed
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior iron_shirt(shirt:item):
    body:
        achieve is_clothes(shirt)
        # Ensure the shirt is ironed

behavior place_shirt_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)
        # Ensure the shirt is placed on the bed

behavior __goal__():
    body:
        bind clothes_shirt_2086: item where:
            is_clothes_shirt(clothes_shirt_2086)
        # Select the shirt with ID 2086

        bind bed: item where:
            is_bed(bed)
        # Select a bed

        iron_shirt(clothes_shirt_2086)
        # Iron the shirt
        place_shirt_on_bed(clothes_shirt_2086, bed)
        # Place the shirt on the bed
##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2086)walk_executor(bed_105)put_executor(clothes_shirt_2086, bed_105)
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot is inside the bathroom_1. Robot is close to the clothes_pants_2085. Robot is close to the clothes_shirt_2086. Robot is close to the clothes_socks_2087. Robot is close to the clothes_skirt_2088. Robot is close to the basket_for_clothes_2006. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(bed_105)
Find pillow_182. Find pillow_183. Find chair_106. Find clothes_underwear_2049. Find clothes_dress_2044. Find clothes_scarf_2048. Robot is inside the bedroom_67. Robot is close to the clothes_shirt_2086. Robot is close to the bed_105. Robot is close to the mat_173. Robot is close to the floor_70. Robot is no longer inside bathroom_1.Robot is no longer close clothes_pants_2085.Robot is no longer close clothes_socks_2087.Robot is no longer close clothes_skirt_2088.Robot is no longer close basket_for_clothes_2006.
##############################
From agent.py
put_executor(clothes_shirt_2086, bed_105)
Robot is inside the bedroom_67. Robot is close to the clothes_shirt_2086. Robot is close to the bed_105. Robot is close to the mat_173. Robot is close to the floor_70. clothes_shirt_2086 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You found the clothes_shirt_2086 and placed it on the bed, but you did not iron it first. You need to go back, clean the shirt if necessary, and then iron it before placing it back on the bed.
##############################
From agent.py
Human Instruction: You found the clothes_shirt_2086 and placed it on the bed, but you did not iron it first. You need to go back, clean the shirt if necessary, and then iron it before placing it back on the bed.

The actions you have taken:
Action 1: Walk to ironing_board_2074.
Action 2: look for clothes_shirt_2086 around ironing_board_2074.
Action 3: Walk to washing_machine_2007.
Action 4: Open washing_machine_2007.
Action 5: look for clothes_shirt_2086 around washing_machine_2007.
Action 6: Walk to closetdrawer_154.
Action 7: look for clothes_shirt_2086 around closetdrawer_154.
Action 8: Walk to hanger_114.
Action 9: look for clothes_shirt_2086 around hanger_114.
Action 10: Walk to hanger_113.
Action 11: look for clothes_shirt_2086 around hanger_113.
Action 12: Walk to hanger_130.
Action 13: look for clothes_shirt_2086 around hanger_130.
Action 14: Walk to sink_42.
Action 15: look for clothes_shirt_2086 around sink_42.
Action 16: Walk to basket_for_clothes_2006.
Action 17: look for clothes_shirt_2086 around basket_for_clothes_2006.
Action 18: Observe around clothes_shirt_2086 with the question of Find shirt_2086 around.
Action 19: Grab clothes_shirt_2086.
Action 20: Walk to bed_105.
Action 21: Put clothes_shirt_2086 on bed_105.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_shirt(shirt:item, sink:item):
    body:
        if dirty(shirt):
            achieve_once inside(shirt, sink)
            wash(shirt)
            achieve clean(shirt)

behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve_once inhand(shirt)
        achieve plugged(iron)
        achieve is_on(iron)
        achieve inside(shirt, ironing_board)
        # Assume ironing requires the shirt to be on the ironing board

behavior place_shirt_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind iron: item where:
            is_iron(iron)
        # Select the iron item
        
        bind bed: item where:
            is_bed(bed) and id[bed]==105
        # Select the bed with ID 105

        assert visited(shirt)
        clean_shirt(shirt, sink)
        iron_shirt(shirt, ironing_board, iron)
        place_shirt_on_bed(shirt, bed)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_clean_shirt(shirt:item, sink:item):
    # Function to ensure the shirt is clean, wash if necessary
    if dirty(shirt):
        achieve_once inside(shirt, sink)
        wash(shirt)
        # Wash the shirt if it is dirty

def iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve inside(shirt, ironing_board)
        # Place the shirt on the ironing board
        if not is_on(iron):
            achieve_once plugged(iron) # Plug in the iron if not plugged
            achieve_once is_on(iron) # Turn on the iron
        achieve clean(shirt) 
        # Ensure the shirt is clean and ready for ironing

behavior place_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)

behavior turn_off_and_unplug_iron(iron:item):
    body:
        achieve is_off(iron)
        achieve unplugged(iron)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind bed: item where:
            is_bed(bed) and id[bed]==105
        # Select the bed with ID 105

        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select sink with ID 42 for washing if necessary

        ensure_clean_shirt(shirt, sink)
        iron_shirt(shirt, ironing_board, iron)
        place_on_bed(shirt, bed)
        turn_off_and_unplug_iron(iron)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5999, column 9.
Expected one of: 
	* EQUAL
	* PERCENT
	* STAR
	* __ANON_5
	* FLOORDIV
	* SLASH
	* GREATER_EQ
	* __ANON_1
	* __ANON_8
	* COMMA
	* __ANON_3
	* MINUS
	* PLUS
	* __ANON_0
	* CIRCUMFLEX
	* NOT_EQ
	* LESSTHAN
	* RSHIFT
	* AT
	* SEMICOLON
	* __ANON_2
	* __ANON_4
	* AMPERSAND
	* AND
	* LSHIFT
	* IF
	* MORETHAN
	* OR
	* __ANON_6
	* LESS_EQ
	* __ANON_7
	* VBAR
	* DOUBLE_EQUAL
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#goal_representation
 
def ensure_clean_shirt(shirt:item, sink:item):
    # Function to ensure the shirt is clean, wash if necessary
    if dirty(shirt):
        achieve_once inside(shirt, sink)
        wash(shirt)

def iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve inside(shirt, ironing_board)
        # Place the shirt on the ironing board
        if not is_on(iron):
            achieve_once plugged(iron) # Plug in the iron if not plugged
            achieve_once is_on(iron) # Turn on the iron

behavior place_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)

behavior turn_off_and_unplug_iron(iron:item):
    body:
        achieve is_off(iron)
        achieve unplugged(iron)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind bed: item where:
            is_bed(bed) and id[bed]==105
        # Select the bed with ID 105

        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select sink with ID 42 for washing if necessary

        ensure_clean_shirt(shirt, sink)
        iron_shirt(shirt, ironing_board, iron)
        place_on_bed(shirt, bed)
        turn_off_and_unplug_iron(iron)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5998, column 9.
Expected one of: 
	* EQUAL
	* PERCENT
	* STAR
	* __ANON_5
	* FLOORDIV
	* SLASH
	* GREATER_EQ
	* __ANON_1
	* __ANON_8
	* COMMA
	* __ANON_3
	* MINUS
	* PLUS
	* __ANON_0
	* CIRCUMFLEX
	* NOT_EQ
	* LESSTHAN
	* RSHIFT
	* AT
	* SEMICOLON
	* __ANON_2
	* __ANON_4
	* AMPERSAND
	* AND
	* LSHIFT
	* IF
	* MORETHAN
	* OR
	* __ANON_6
	* LESS_EQ
	* __ANON_7
	* VBAR
	* DOUBLE_EQUAL
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_vacuum_cleaner_2070_around_dishwasher_1001(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(vacuum_cleaner,dishwasher_instance)
        else:
            exp(vacuum_cleaner,dishwasher_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,dishwasher_instance]=True
        close[dishwasher_instance,vacuum_cleaner]=True
    

behavior find_soap_2054_around_shower_36(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

#goal_representation
 
def ensure_clean_shirt(shirt:item, sink:item):
    # Function to ensure the shirt is clean, wash if necessary
    if dirty(shirt):
        achieve_once inside(shirt, sink)
        wash(shirt)

behavior iron_shirt(shirt:item, ironing_board:item, iron:item):
    body:
        achieve inside(shirt, ironing_board)
        # Place the shirt on the ironing board
        if not is_on(iron):
            achieve_once plugged(iron) # Plug in the iron if not plugged
            achieve_once is_on(iron) # Turn on the iron

behavior place_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)

behavior turn_off_and_unplug_iron(iron:item):
    body:
        achieve is_off(iron)
        achieve unplugged(iron)

behavior __goal__():
    body:
        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086

        bind iron: item where:
            is_iron(iron)
        # Select the iron

        bind bed: item where:
            is_bed(bed) and id[bed]==105
        # Select the bed with ID 105

        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select sink with ID 42 for washing if necessary

        ensure_clean_shirt(shirt, sink)
        iron_shirt(shirt, ironing_board, iron)
        place_on_bed(shirt, bed)
        turn_off_and_unplug_iron(iron)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def has_iron_on_ironing_board(ironing_board: item):
    # Function to check if there is an iron on a specified ironing board
    symbol has_iron=exists o: item : is_iron(o) and on(o, ironing_board)
    return has_iron

behavior clean_shirt_if_needed(shirt:item, sink:item):
    body:
        if dirty(shirt):
            # Check if the shirt is dirty
            achieve_once inside(shirt, sink)
            # Place shirt inside sink for cleaning
            wash(shirt)
            # Wash the shirt if it is dirty

behavior iron_shirt(ironing_board:item, shirt:item):
    body:
        achieve on(shirt, ironing_board)
        # Place the shirt on the ironing board
        if has_iron_on_ironing_board(ironing_board):
            bind iron: item where:
                is_iron(iron) and on(iron, ironing_board)
            achieve plugged(iron)
            # Ensure the iron is plugged in
            achieve is_on(iron)
            # Turn on the iron

behavior place_shirt_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)
        # Ensure the shirt is placed on the bed

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086

        bind sink: item where:
            is_sink(sink)
        # Select a sink for cleaning

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind bed: item where:
            is_bed(bed) and id[bed]==105
        # Select the bed with ID 105

        clean_shirt_if_needed(shirt, sink)
        iron_shirt(ironing_board, shirt)
        place_shirt_on_bed(shirt, bed)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_iron_on_ironing_board(ironing_board: item):
    # Function to check if there is an iron on a specified ironing board
    symbol has_iron=exists o: item : is_iron(o) and on(o, ironing_board)
    return has_iron

behavior clean_shirt_if_needed(shirt:item, sink:item):
    body:
        if dirty(shirt):
            # Check if the shirt is dirty
            achieve_once inside(shirt, sink)
            # Place shirt inside sink for cleaning
            wash(shirt)
            # Wash the shirt if it is dirty

behavior iron_shirt(ironing_board:item, shirt:item):
    body:
        achieve on(shirt, ironing_board)
        # Place the shirt on the ironing board
        if has_iron_on_ironing_board(ironing_board):
            bind iron: item where:
                is_iron(iron) and on(iron, ironing_board)
            achieve plugged(iron)
            # Ensure the iron is plugged in
            achieve is_on(iron)
            # Turn on the iron

behavior place_shirt_on_bed(shirt:item, bed:item):
    body:
        achieve on(shirt, bed)
        # Ensure the shirt is placed on the bed

behavior __goal__():
    body:
        bind shirt: item where:
            is_clothes_shirt(shirt) and id[shirt]==2086
        # Select the shirt with ID 2086

        bind sink: item where:
            is_sink(sink)
        # Select a sink for cleaning

        bind ironing_board: item where:
            is_ironing_board(ironing_board) and id[ironing_board]==2074
        # Select the ironing board with ID 2074

        bind bed: item where:
            is_bed(bed) and id[bed]==105
        # Select the bed with ID 105

        clean_shirt_if_needed(shirt, sink)
        iron_shirt(ironing_board, shirt)
        place_shirt_on_bed(shirt, bed)

##############################
From agent.py-> find a plan in act()
grab_executor(clothes_shirt_2086)walk_executor(sink_42)putin_executor(clothes_shirt_2086, sink_42)walk_executor(clothes_shirt_2086)wash_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(ironing_board_2074)put_executor(clothes_shirt_2086, ironing_board_2074)plugin_executor(iron_2089)switchon_executor(iron_2089)walk_executor(clothes_shirt_2086)grab_executor(clothes_shirt_2086)walk_executor(bed_105)put_executor(clothes_shirt_2086, bed_105)
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot is inside the bedroom_67. Robot is close to the clothes_shirt_2086. Robot is close to the bed_105. Robot is close to the mat_173. Robot is close to the floor_70. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot is inside the bathroom_1. Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. Robot is no longer inside bedroom_67.Robot is no longer close floor_70.Robot is no longer close mat_173.Robot is no longer close bed_105.
##############################
From agent.py
putin_executor(clothes_shirt_2086, sink_42)
Robot is inside the bathroom_1. Robot is close to the clothes_shirt_2086. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. clothes_shirt_2086 released by right hand. 
##############################
From agent.py
walk_executor(clothes_shirt_2086)
Robot is inside the bedroom_67. Robot is close to the clothes_shirt_2086. Robot is close to the sink_42. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_41.
##############################
From agent.py
wash_executor(clothes_shirt_2086)
Robot is inside the bedroom_67. Robot is close to the clothes_shirt_2086. Robot is close to the sink_42. 
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot is inside the bedroom_67. Robot is close to the clothes_shirt_2086. Robot is close to the sink_42. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(ironing_board_2074)
Robot is inside the bathroom_1. Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. Robot is no longer inside bedroom_67.Robot is no longer close sink_42.
##############################
From agent.py
put_executor(clothes_shirt_2086, ironing_board_2074)
Robot is inside the bathroom_1. Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. clothes_shirt_2086 released by right hand. 
##############################
From agent.py
plugin_executor(iron_2089)
Robot is inside the bathroom_1. Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. 
##############################
From agent.py
switchon_executor(iron_2089)
Robot is inside the bathroom_1. Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. 
##############################
From agent.py
walk_executor(clothes_shirt_2086)
Robot is inside the bedroom_67. Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. Robot is no longer inside bathroom_1.
##############################
From agent.py
grab_executor(clothes_shirt_2086)
Robot is inside the bedroom_67. Robot is close to the clothes_shirt_2086. Robot is close to the ironing_board_2074. Grabbing clothes_shirt_2086 by right hand. 
##############################
From agent.py
walk_executor(bed_105)
Robot is inside the bedroom_67. Robot is close to the clothes_shirt_2086. Robot is close to the bed_105. Robot is close to the mat_173. Robot is close to the floor_70. Robot is no longer close ironing_board_2074.
##############################
From agent.py
put_executor(clothes_shirt_2086, bed_105)
Robot is inside the bedroom_67. Robot is close to the clothes_shirt_2086. Robot is close to the bed_105. Robot is close to the mat_173. Robot is close to the floor_70. clothes_shirt_2086 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to iron the shirt. While you've placed the iron on the ironing board and turned it on, the actions don't clearly show you actually used the iron on the shirt. Ensure the shirt is ironed before placing it back on the bed.
##############################
Task Summary:
Task Goal:
Iron a shirt, and put it in on the bed.
Action History:
['walk_executor(ironing_board_2074)', 'walk_executor(washing_machine_2007)', 'open_executor(washing_machine_2007)', 'walk_executor(closetdrawer_154)', 'walk_executor(hanger_114)', 'walk_executor(hanger_113)', 'walk_executor(hanger_130)', 'walk_executor(sink_42)', 'walk_executor(basket_for_clothes_2006)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(bed_105)', 'put_executor(clothes_shirt_2086, bed_105)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(sink_42)', 'putin_executor(clothes_shirt_2086, sink_42)', 'walk_executor(clothes_shirt_2086)', 'wash_executor(clothes_shirt_2086)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(ironing_board_2074)', 'put_executor(clothes_shirt_2086, ironing_board_2074)', 'plugin_executor(iron_2089)', 'switchon_executor(iron_2089)', 'walk_executor(clothes_shirt_2086)', 'grab_executor(clothes_shirt_2086)', 'walk_executor(bed_105)', 'put_executor(clothes_shirt_2086, bed_105)']
Time info:
Time consume: 331 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 49
goal generate times: 9
goal correct times: 2

Task complete rate:
Keystate: k1 - Requires: 6 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
