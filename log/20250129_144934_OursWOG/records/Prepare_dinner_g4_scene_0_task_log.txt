From agent.py
Reset goals: The sub-goals are: 
['1. Gather the necessary ingredients for fried rice with egg.', '2. Cook the rice and scramble the egg.', '3. Combine the cooked rice and scrambled egg, and fry them together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_onion_2032_around_fridge_289(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_salt_2037_around_kitchen_counter_230(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

#exp_behavior_end

#goal_representation
 
def has_essential_ingredients_for_fried_rice(room:item):
    # Check if fried rice essential ingredients are present
    symbol has_ingredients=exists item1: item : (is_food_rice(item1) or is_food_egg(item1) or is_food_onion(item1) or is_food_vegetable(item1)) and inside(item1, room)
    return has_ingredients

behavior observe_room_for_ingredients(room:item):
    body:
        observe(room, "Identify fried rice ingredients in the room")

behavior __goal__():
    body:
        if exists room: item : is_kitchen(room) and has_essential_ingredients_for_fried_rice(room):
            # Check if there is a kitchen with essential ingredients for fried rice
            bind room: item where:
                is_kitchen(room) and has_essential_ingredients_for_fried_rice(room)
            achieve close_char(char, room)

        else:
            # Check all rooms categorized as kitchen not visited for fried rice ingredients
            foreach room: item:
                if is_kitchen(room) and not visited(room):
                    observe_room_for_ingredients(room)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_fridge_289(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_food_onion_2032_around_fridge_289(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_salt_2037_around_kitchen_counter_230(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_sauce_2078_around_fridge_289(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(sauce,fridge_instance)
        else:
            exp(sauce,fridge_instance)
    eff:
        unknown[sauce]=False
        close[sauce,fridge_instance]=True
        close[fridge_instance,sauce]=True
    

#exp_behavior_end

#goal_representation
 
def has_ingredient(item: item):
    # Determine if the item is a necessary ingredient for fried rice with egg
    symbol needed_ingredient = is_food_rice(item) or is_food_egg(item) or is_food_vegetable(item) or is_food_salt(item) or is_oil(item) or is_sauce(item)
    return needed_ingredient

behavior gather_ingredient(item: item, kitchen_counter: item):
    body:
        achieve on(item, kitchen_counter) # Place the ingredient on the kitchen counter

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter as the gathering place

        foreach item: item:
            if has_ingredient(item) and not on(item, kitchen_counter):
                gather_ingredient(item, kitchen_counter)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_ingredient(item: item):
    # Determine if the item is a necessary ingredient for fried rice with egg
    symbol needed_ingredient = is_food_rice(item) or is_food_egg(item) or is_food_vegetable(item) or is_food_salt(item) or is_oil(item) or is_sauce(item)
    return needed_ingredient

behavior gather_ingredient(item: item, kitchen_counter: item):
    body:
        achieve on(item, kitchen_counter) # Place the ingredient on the kitchen counter

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter as the gathering place

        foreach item: item:
            if has_ingredient(item) and not on(item, kitchen_counter):
                gather_ingredient(item, kitchen_counter)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(kitchen_counter_230)put_executor(food_egg_2020, kitchen_counter_230)walk_executor(fridge_289)exp(food_rice_2036, fridge_289)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(kitchen_counter_230)put_executor(food_rice_2036, kitchen_counter_230)exp(food_salt_2037, kitchen_counter_230)walk_executor(food_salt_2037)grab_executor(food_salt_2037)walk_executor(kitchen_counter_230)put_executor(food_salt_2037, kitchen_counter_230)walk_executor(fridge_289)exp(food_vegetable_2041, fridge_289)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(kitchen_counter_230)put_executor(food_vegetable_2041, kitchen_counter_230)walk_executor(fridge_289)exp(sauce_2078, fridge_289)walk_executor(sauce_2078)grab_executor(sauce_2078)walk_executor(kitchen_counter_230)put_executor(sauce_2078, kitchen_counter_230)exp(oil_2079, kitchen_counter_230)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(kitchen_counter_230)put_executor(oil_2079, kitchen_counter_230)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Find drawing_239. Find drawing_240. Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the floor_202. Robot is close to the floor_203. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Robot is no longer inside bathroom_1.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Find drawing_174. Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the floor_202. Robot is close to the floor_203. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the floor_202. Robot is close to the floor_203. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)walk_executor(kitchen_counter_230)put_executor(food_egg_2020, kitchen_counter_230)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(kitchen_counter_230)put_executor(food_rice_2036, kitchen_counter_230)walk_executor(food_salt_2037)grab_executor(food_salt_2037)walk_executor(kitchen_counter_230)put_executor(food_salt_2037, kitchen_counter_230)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(kitchen_counter_230)put_executor(food_vegetable_2041, kitchen_counter_230)walk_executor(sauce_2078)grab_executor(sauce_2078)walk_executor(kitchen_counter_230)put_executor(sauce_2078, kitchen_counter_230)exp(oil_2079, kitchen_counter_230)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(kitchen_counter_230)put_executor(oil_2079, kitchen_counter_230)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the floor_202. Robot is close to the floor_203. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find cutting_board_2051. Find pot_2069. Find knife_2050. Find napkin_2005. Find drawing_238. Find drawing_241. Find drawing_242. Find drawing_243. Find cup_2064. Find cup_2063. Find oil_2079. Find fryingpan_2083. Find tray_296. Robot is inside the dining_room_201. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
put_executor(food_egg_2020, kitchen_counter_230)
Robot is inside the dining_room_201. Robot is close to the food_egg_2020. Robot is close to the kitchen_counter_230. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(food_rice_2036)
Robot is inside the dining_room_201. Robot is close to the fridge_289. Robot is close to the food_rice_2036. Robot is no longer close food_egg_2020.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(food_rice_2036)
Robot is inside the dining_room_201. Robot is close to the fridge_289. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot is inside the dining_room_201. Robot is close to the food_rice_2036. Robot is close to the kitchen_counter_230. Robot is no longer close fridge_289.
##############################
From agent.py
put_executor(food_rice_2036, kitchen_counter_230)
Robot is inside the dining_room_201. Robot is close to the food_rice_2036. Robot is close to the kitchen_counter_230. food_rice_2036 released by right hand. 
##############################
From agent.py
walk_executor(food_salt_2037)
Robot is inside the dining_room_201. Robot is close to the fridge_289. Robot is close to the food_salt_2037. Robot is no longer close food_rice_2036.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(food_salt_2037)
Robot is inside the dining_room_201. Robot is close to the fridge_289. Robot is close to the food_salt_2037. Grabbing food_salt_2037 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot is inside the dining_room_201. Robot is close to the food_salt_2037. Robot is close to the kitchen_counter_230. Robot is no longer close fridge_289.
##############################
From agent.py
put_executor(food_salt_2037, kitchen_counter_230)
Robot is inside the dining_room_201. Robot is close to the food_salt_2037. Robot is close to the kitchen_counter_230. food_salt_2037 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot is inside the dining_room_201. Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Robot is no longer close food_salt_2037.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot is inside the dining_room_201. Robot is close to the fridge_289. Robot is close to the food_vegetable_2041. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot is inside the dining_room_201. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. Robot is no longer close fridge_289.
##############################
From agent.py
put_executor(food_vegetable_2041, kitchen_counter_230)
Robot is inside the dining_room_201. Robot is close to the food_vegetable_2041. Robot is close to the kitchen_counter_230. food_vegetable_2041 released by right hand. 
##############################
From agent.py
walk_executor(sauce_2078)
Robot is inside the dining_room_201. Robot is close to the fridge_289. Robot is close to the sauce_2078. Robot is no longer close food_vegetable_2041.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(sauce_2078)
Robot is inside the dining_room_201. Robot is close to the fridge_289. Robot is close to the sauce_2078. Grabbing sauce_2078 by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the kitchen_counter_230. Robot is no longer close fridge_289.
##############################
From agent.py
put_executor(sauce_2078, kitchen_counter_230)
Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the kitchen_counter_230. sauce_2078 released by right hand. 
##############################
From agent.py
exp(oil_2079, kitchen_counter_230)
Find oil_2079. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find and cook the rice.', '2. Scramble the eggs.', '3. Combine the cooked rice and scrambled eggs in a pan and fry them together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_rack_33_around_shower_36(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel_rack,shower_instance)
        else:
            exp(towel_rack,shower_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,shower_instance]=True
        close[shower_instance,towel_rack]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_rice_cooked(rice:item):
    # Determine whether the rice is cooked
    symbol cooked_rice=exists stove:item: is_stove(stove) and inside(rice, stove) and is_on(stove)
    return cooked_rice

behavior check_rice_on_stove(rice:item, stove:item):
    body:
        achieve inside(rice, stove) 
        achieve is_on(stove) 

behavior check_if_rice_cooked(rice:item):
    body:
        if not is_rice_cooked(rice):
            foreach stove: item:
                if is_stove(stove):
                    check_rice_on_stove(rice, stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to be cooked
        
        check_if_rice_cooked(rice)
        # Check if the rice is cooked

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_rice_cooked(rice:item):
    # Determine whether the rice is cooked
    symbol cooked_rice=exists stove:item: is_stove(stove) and inside(rice, stove) and is_on(stove)
    return cooked_rice

behavior check_rice_on_stove(rice:item, stove:item):
    body:
        achieve inside(rice, stove) 
        achieve is_on(stove) 

behavior check_if_rice_cooked(rice:item):
    body:
        if not is_rice_cooked(rice):
            foreach stove: item:
                if is_stove(stove):
                    check_rice_on_stove(rice, stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to be cooked
        
        check_if_rice_cooked(rice)
        # Check if the rice is cooked

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(stove_2065)putin_executor(food_rice_2036, stove_2065)close_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. Robot is no longer close sauce_2078.
##############################
From agent.py
open_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
walk_executor(food_rice_2036)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the food_rice_2036. Robot is no longer close stove_2065.
##############################
From agent.py
grab_executor(food_rice_2036)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the food_rice_2036. Robot is close to the stove_2065. 
##############################
From agent.py
putin_executor(food_rice_2036, stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the food_rice_2036. Robot is close to the stove_2065. food_rice_2036 released by right hand. 
##############################
From agent.py
close_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the food_rice_2036. Robot is close to the stove_2065. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the food_rice_2036. Robot is close to the stove_2065. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_coffee_table_2068(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(fork,coffee_table_instance)
        else:
            exp(fork,coffee_table_instance)
    eff:
        unknown[fork]=False
        close[fork,coffee_table_instance]=True
        close[coffee_table_instance,fork]=True
    

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_to_scramble_eggs(egg: item, kitchen_counter: item, fryingpan: item):
    body:
        achieve_once inhand(egg)
        achieve cut(egg)
        achieve inside(egg, fryingpan)
        # Crack and scramble the egg, placing it inside the frying pan

behavior heat_fryingpan(fryingpan: item, stove: item):
    body:
        achieve inside(fryingpan, stove)
        achieve is_on(stove)
        # Ensure the frying pan is on the stove and the stove is turned on for scrambling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and on(egg, kitchen_counter_230)
        # Select the egg on the kitchen counter

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan for scrambling the egg

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        prepare_to_scramble_eggs(egg, kitchen_counter_230, fryingpan)
        heat_fryingpan(fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter_230; available variables: [Variable<egg: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation

behavior prepare_to_scramble_eggs(egg: item, kitchen_counter: item, fryingpan: item):
    body:
        achieve_once inhand(egg)
        achieve cut(egg)
        achieve inside(egg, fryingpan)

behavior heat_fryingpan(fryingpan: item, stove: item):
    body:
        achieve inside(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and on(egg, kitchen_counter)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter]==230

        prepare_to_scramble_eggs(egg, kitchen_counter, fryingpan)
        heat_fryingpan(fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter; available variables: [Variable<egg: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_2004_around_couch_352(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
behavior prepare_to_scramble_eggs(egg: item, kitchen_counter: item, fryingpan: item):
    body:
        achieve_once inhand(egg)
        achieve cut(egg)
        achieve inside(egg, fryingpan)

behavior heat_fryingpan(fryingpan: item, stove: item):
    body:
        achieve inside(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and on(egg, kitchen_counter)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter) and id[kitchen_counter]==230

        prepare_to_scramble_eggs(egg, kitchen_counter, fryingpan)
        heat_fryingpan(fryingpan, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_eggs(eggs:item, pan:item, stove:item):
    body:
        achieve inside(eggs, pan)
        # Ensure eggs are inside the frying pan

        achieve clean(pan)
        # Ensure the frying pan is clean

        achieve inside(pan, stove)
        achieve is_on(stove)
        # Ensure the pan is on the stove and the stove is turned on for cooking

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs item

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan for scrambling

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking

        scramble_eggs(eggs, pan, stove)
        # Execute the behavior to scramble the eggs with the selected items

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior scramble_eggs(eggs:item, pan:item, stove:item):
    body:
        achieve inside(eggs, pan)
        # Ensure eggs are inside the frying pan

        achieve clean(pan)
        # Ensure the frying pan is clean

        achieve inside(pan, stove)
        achieve is_on(stove)
        # Ensure the pan is on the stove and the stove is turned on for cooking

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs item

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan for scrambling

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking

        scramble_eggs(eggs, pan, stove)
        # Execute the behavior to scramble the eggs with the selected items

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)walk_executor(stove_2065)switchoff_executor(stove_2065)open_executor(stove_2065)walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)putin_executor(fryingpan_2083, stove_2065)close_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. Robot is no longer close stove_2065.Robot is no longer close food_rice_2036.
##############################
From agent.py
grab_executor(food_egg_2020)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the food_egg_2020. Robot is close to the fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. Robot is close to the food_rice_2036. Robot is no longer close fryingpan_2083.Robot is no longer close food_egg_2020.
##############################
From agent.py
switchoff_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. Robot is close to the food_rice_2036. 
##############################
From agent.py
open_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. Robot is close to the food_rice_2036. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is no longer close stove_2065.Robot is no longer close food_rice_2036.
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. Robot is close to the food_rice_2036. 
##############################
From agent.py
putin_executor(fryingpan_2083, stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. Robot is close to the food_rice_2036. fryingpan_2083 released by right hand. 
##############################
From agent.py
close_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. Robot is close to the food_rice_2036. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. Robot is close to the food_rice_2036. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The eggs need to be scrambled. Ensure that the eggs are fully cooked as scrambled eggs in the pan. Currently, the eggs are only placed in the frying pan and both are on the stove, but there are no actions indicating that the eggs were scrambled or cooked.
##############################
From agent.py
Human Instruction: The eggs need to be scrambled. Ensure that the eggs are fully cooked as scrambled eggs in the pan. Currently, the eggs are only placed in the frying pan and both are on the stove, but there are no actions indicating that the eggs were scrambled or cooked.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_egg_2020 around fridge_289.
Action 5: Grab food_egg_2020.
Action 6: Walk to kitchen_counter_230.
Action 7: Put food_egg_2020 on kitchen_counter_230.
Action 8: Walk to food_rice_2036.
Action 9: Grab food_rice_2036.
Action 10: Walk to kitchen_counter_230.
Action 11: Put food_rice_2036 on kitchen_counter_230.
Action 12: Walk to food_salt_2037.
Action 13: Grab food_salt_2037.
Action 14: Walk to kitchen_counter_230.
Action 15: Put food_salt_2037 on kitchen_counter_230.
Action 16: Walk to food_vegetable_2041.
Action 17: Grab food_vegetable_2041.
Action 18: Walk to kitchen_counter_230.
Action 19: Put food_vegetable_2041 on kitchen_counter_230.
Action 20: Walk to sauce_2078.
Action 21: Grab sauce_2078.
Action 22: Walk to kitchen_counter_230.
Action 23: Put sauce_2078 on kitchen_counter_230.
Action 24: look for oil_2079 around kitchen_counter_230.
Action 25: Walk to stove_2065.
Action 26: Open stove_2065.
Action 27: Walk to food_rice_2036.
Action 28: Grab food_rice_2036.
Action 29: Walk to stove_2065.
Action 30: Put food_rice_2036 into stove_2065.
Action 31: Close stove_2065.
Action 32: Switch on stove_2065.
Action 33: Walk to food_egg_2020.
Action 34: Grab food_egg_2020.
Action 35: Walk to fryingpan_2083.
Action 36: Put food_egg_2020 into fryingpan_2083.
Action 37: Walk to stove_2065.
Action 38: Switch off stove_2065.
Action 39: Open stove_2065.
Action 40: Walk to fryingpan_2083.
Action 41: Grab fryingpan_2083.
Action 42: Walk to stove_2065.
Action 43: Put fryingpan_2083 into stove_2065.
Action 44: Close stove_2065.
Action 45: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior scramble_eggs(eggs:item, fryingpan:item, stove:item):
    body:
        achieve inside(eggs, fryingpan)
        # Eggs should be inside the frying pan
        achieve is_on(stove)
        # Ensure the stove is turned on for cooking

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan_2083)
        # Select the eggs that are in the frying pan

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2083
        # Select the frying pan with ID 2083

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        scramble_eggs(eggs, fryingpan, stove)
        # Scramble and cook the eggs

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior scramble_eggs_in_pan(eggs: item, fryingpan: item, stove: item):
    body:
        achieve inside(eggs, fryingpan)
        # Ensure the eggs are inside the frying pan

        achieve is_on(stove)
        # Ensure the stove is on for cooking

        achieve cooked(eggs)
        # Ensure the eggs are fully cooked as scrambled eggs

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan_2083)
        # Select the eggs placed in the frying pan

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2083
        # Select the frying pan with ID 2083

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        scramble_eggs_in_pan(eggs, fryingpan, stove)
        # Execute the behavior to scramble the eggs using the frying pan on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function cooked not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior scramble_eggs_in_pan(eggs: item, fryingpan: item, stove: item):
    body:
        achieve inside(eggs, fryingpan)
        # Ensure the eggs are inside the frying pan

        achieve is_on(stove)
        # Ensure the stove is on for cooking

        observe(fryingpan, "Check if the eggs are being scrambled")
        # Observe to confirm the eggs are being scrambled in the frying pan

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan_2083)
        # Select the eggs placed in the frying pan

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2083
        # Select the frying pan with ID 2083

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        scramble_eggs_in_pan(eggs, fryingpan, stove)
        # Execute the behavior to scramble the eggs using the frying pan on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior scramble_eggs_in_pan(eggs: item, fryingpan: item, stove: item):
    body:
        achieve inside(eggs, fryingpan)
        # Ensure the eggs are inside the frying pan

        achieve is_on(stove)
        # Ensure the stove is on for cooking

        observe(fryingpan, "Check if the eggs are being scrambled")
        # Observe to confirm the eggs are being scrambled in the frying pan

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan_2083)
        # Select the eggs placed in the frying pan

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2083
        # Select the frying pan with ID 2083

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        scramble_eggs_in_pan(eggs, fryingpan, stove)
        # Execute the behavior to scramble the eggs using the frying pan on the stove

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2083, Check if the eggs are being scrambled)
##############################
From agent.py
obs(fryingpan_2083, Check if the eggs are being scrambled)
Get this information:  food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is inside dining_room_201. fryingpan_2083 is inside stove_2065. fryingpan_2083 is close to character_65. fryingpan_2083 is close to stove_2065. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to actively scramble the eggs inside the frying pan. The actions list does not indicate that the eggs were scrambled; they were only placed in the frying pan, and no indication of scrambling or further cooking was recorded.
##############################
From agent.py
Human Instruction: You need to actively scramble the eggs inside the frying pan. The actions list does not indicate that the eggs were scrambled; they were only placed in the frying pan, and no indication of scrambling or further cooking was recorded.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_egg_2020 around fridge_289.
Action 5: Grab food_egg_2020.
Action 6: Walk to kitchen_counter_230.
Action 7: Put food_egg_2020 on kitchen_counter_230.
Action 8: Walk to food_rice_2036.
Action 9: Grab food_rice_2036.
Action 10: Walk to kitchen_counter_230.
Action 11: Put food_rice_2036 on kitchen_counter_230.
Action 12: Walk to food_salt_2037.
Action 13: Grab food_salt_2037.
Action 14: Walk to kitchen_counter_230.
Action 15: Put food_salt_2037 on kitchen_counter_230.
Action 16: Walk to food_vegetable_2041.
Action 17: Grab food_vegetable_2041.
Action 18: Walk to kitchen_counter_230.
Action 19: Put food_vegetable_2041 on kitchen_counter_230.
Action 20: Walk to sauce_2078.
Action 21: Grab sauce_2078.
Action 22: Walk to kitchen_counter_230.
Action 23: Put sauce_2078 on kitchen_counter_230.
Action 24: look for oil_2079 around kitchen_counter_230.
Action 25: Walk to stove_2065.
Action 26: Open stove_2065.
Action 27: Walk to food_rice_2036.
Action 28: Grab food_rice_2036.
Action 29: Walk to stove_2065.
Action 30: Put food_rice_2036 into stove_2065.
Action 31: Close stove_2065.
Action 32: Switch on stove_2065.
Action 33: Walk to food_egg_2020.
Action 34: Grab food_egg_2020.
Action 35: Walk to fryingpan_2083.
Action 36: Put food_egg_2020 into fryingpan_2083.
Action 37: Walk to stove_2065.
Action 38: Switch off stove_2065.
Action 39: Open stove_2065.
Action 40: Walk to fryingpan_2083.
Action 41: Grab fryingpan_2083.
Action 42: Walk to stove_2065.
Action 43: Put fryingpan_2083 into stove_2065.
Action 44: Close stove_2065.
Action 45: Switch on stove_2065.
Action 46: Observe around fryingpan_2083 with the question of Check if the eggs are being scrambled.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_knife_2050(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2050
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(fork,knife_instance)
        else:
            exp(fork,knife_instance)
    eff:
        unknown[fork]=False
        close[fork,knife_instance]=True
        close[knife_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_eggs(fryingpan:item):
    body:
        achieve dirty(fryingpan)  
        # Ensure the frying pan is being used, making it dirty

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan being used for the eggs
        
        scramble_eggs(fryingpan)
        # Execute the scrambling process in the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_cutting_board_2051(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(fork,cutting_board_instance)
        else:
            exp(fork,cutting_board_instance)
    eff:
        unknown[fork]=False
        close[fork,cutting_board_instance]=True
        close[cutting_board_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_eggs(fryingpan:item):
    body:
        achieve cut(fryingpan)
        # Ensure the eggs in the frying pan are scrambled

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        scramble_eggs(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_tray_296(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==296
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(fork,tray_instance)
        else:
            exp(fork,tray_instance)
    eff:
        unknown[fork]=False
        close[fork,tray_instance]=True
        close[tray_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior scramble_eggs(eggs:item, fryingpan:item):
    body:
        observe(fryingpan, "Check if the eggs are being scrambled")
        # Observe the frying pan to ensure the eggs are scrambled

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs to be scrambled

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan where the eggs will be scrambled

        scramble_eggs(eggs, fryingpan)
        # Execute the scrambling of the eggs
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior scramble_eggs(eggs:item, fryingpan:item):
    body:
        observe(fryingpan, "Check if the eggs are being scrambled")
        # Observe the frying pan to ensure the eggs are scrambled

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs to be scrambled

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan where the eggs will be scrambled

        scramble_eggs(eggs, fryingpan)
        # Execute the scrambling of the eggs
##############################
From agent.py-> find a plan in act()
obs(fryingpan_2083, Check if the eggs are being scrambled)
##############################
From agent.py
obs(fryingpan_2083, Check if the eggs are being scrambled)
Get this information:  food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is inside dining_room_201. fryingpan_2083 is inside stove_2065. fryingpan_2083 is close to character_65. fryingpan_2083 is close to stove_2065. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to actively scramble the eggs in the frying pan. The current actions only indicate that the eggs have been placed in the frying pan, but no scrambling action has been executed.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_clothes_underwear_2049_around_closetdrawer_154(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_underwear,closetdrawer_instance)
        else:
            exp(clothes_underwear,closetdrawer_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_rice_and_eggs(rice:item, eggs:item, fryingpan:item, stove:item):
    body:
        achieve inside(rice, fryingpan)
        # Ensure the rice is placed inside the frying pan
        
        achieve inside(eggs, fryingpan)
        # Ensure the scrambled eggs are placed inside the frying pan
        
        achieve inside(fryingpan, stove)
        achieve is_on(stove)
        # Ensure the frying pan is on the stove and the stove is turned on

behavior __goal__():
    body:
        bind food_rice: item where:
            is_food_rice(food_rice) and id[food_rice]==2036
        # Select the cooked rice

        bind food_egg: item where:
            is_food_egg(food_egg) and id[food_egg]==2020
        # Select the scrambled eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2083
        # Select a frying pan

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select a stove

        combine_rice_and_eggs(food_rice, food_egg, fryingpan, stove)
        # Execute the behavior to fry the rice and eggs together

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior combine_rice_and_eggs(rice:item, eggs:item, fryingpan:item, stove:item):
    body:
        achieve inside(rice, fryingpan)
        # Ensure the rice is placed inside the frying pan
        
        achieve inside(eggs, fryingpan)
        # Ensure the scrambled eggs are placed inside the frying pan
        
        achieve inside(fryingpan, stove)
        achieve is_on(stove)
        # Ensure the frying pan is on the stove and the stove is turned on

behavior __goal__():
    body:
        bind food_rice: item where:
            is_food_rice(food_rice) and id[food_rice]==2036
        # Select the cooked rice

        bind food_egg: item where:
            is_food_egg(food_egg) and id[food_egg]==2020
        # Select the scrambled eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2083
        # Select a frying pan

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select a stove

        combine_rice_and_eggs(food_rice, food_egg, fryingpan, stove)
        # Execute the behavior to fry the rice and eggs together

##############################
From agent.py-> find a plan in act()
switchoff_executor(stove_2065)open_executor(stove_2065)grab_executor(food_rice_2036)putin_executor(food_rice_2036, fryingpan_2083)close_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
switchoff_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. Robot is close to the food_rice_2036. 
##############################
From agent.py
open_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. Robot is close to the food_rice_2036. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
putin_executor(food_rice_2036, fryingpan_2083)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. Robot is close to the food_rice_2036. food_rice_2036 released by right hand. 
##############################
From agent.py
close_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. Robot is close to the food_rice_2036. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. Robot is close to the food_rice_2036. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to actively scramble the eggs after placing them in the frying pan. Review if this action has taken place and if not, complete it before considering the sub-task completed.
##############################
From agent.py
Human Instruction: The robot needs to actively scramble the eggs after placing them in the frying pan. Review if this action has taken place and if not, complete it before considering the sub-task completed.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_egg_2020 around fridge_289.
Action 5: Grab food_egg_2020.
Action 6: Walk to kitchen_counter_230.
Action 7: Put food_egg_2020 on kitchen_counter_230.
Action 8: Walk to food_rice_2036.
Action 9: Grab food_rice_2036.
Action 10: Walk to kitchen_counter_230.
Action 11: Put food_rice_2036 on kitchen_counter_230.
Action 12: Walk to food_salt_2037.
Action 13: Grab food_salt_2037.
Action 14: Walk to kitchen_counter_230.
Action 15: Put food_salt_2037 on kitchen_counter_230.
Action 16: Walk to food_vegetable_2041.
Action 17: Grab food_vegetable_2041.
Action 18: Walk to kitchen_counter_230.
Action 19: Put food_vegetable_2041 on kitchen_counter_230.
Action 20: Walk to sauce_2078.
Action 21: Grab sauce_2078.
Action 22: Walk to kitchen_counter_230.
Action 23: Put sauce_2078 on kitchen_counter_230.
Action 24: look for oil_2079 around kitchen_counter_230.
Action 25: Walk to stove_2065.
Action 26: Open stove_2065.
Action 27: Walk to food_rice_2036.
Action 28: Grab food_rice_2036.
Action 29: Walk to stove_2065.
Action 30: Put food_rice_2036 into stove_2065.
Action 31: Close stove_2065.
Action 32: Switch on stove_2065.
Action 33: Walk to food_egg_2020.
Action 34: Grab food_egg_2020.
Action 35: Walk to fryingpan_2083.
Action 36: Put food_egg_2020 into fryingpan_2083.
Action 37: Walk to stove_2065.
Action 38: Switch off stove_2065.
Action 39: Open stove_2065.
Action 40: Walk to fryingpan_2083.
Action 41: Grab fryingpan_2083.
Action 42: Walk to stove_2065.
Action 43: Put fryingpan_2083 into stove_2065.
Action 44: Close stove_2065.
Action 45: Switch on stove_2065.
Action 46: Observe around fryingpan_2083 with the question of Check if the eggs are being scrambled.
Action 47: Observe around fryingpan_2083 with the question of Check if the eggs are being scrambled.
Action 48: Switch off stove_2065.
Action 49: Open stove_2065.
Action 50: Grab food_rice_2036.
Action 51: Put food_rice_2036 into fryingpan_2083.
Action 52: Close stove_2065.
Action 53: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dvd_player_2061_around_television_248(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==248
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(dvd_player,television_instance)
        else:
            exp(dvd_player,television_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,television_instance]=True
        close[television_instance,dvd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_and_fry_rice_and_eggs(rice:item, eggs:item, frying_pan:item, stove:item):
    body:
        achieve inside(rice, frying_pan)
        # Ensure the cooked rice is inside the frying pan

        achieve inside(eggs, frying_pan)
        # Ensure the scrambled eggs are inside the frying pan

        achieve inside(frying_pan, stove)
        achieve is_on(stove)
        # Ensure the frying pan is on the stove and the stove is turned on for frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and id[rice]==2036
        # Select the cooked rice

        bind eggs: item where:
            is_food_egg(eggs) and id[eggs]==2020
        # Select the scrambled eggs

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and id[frying_pan]==2083
        # Select the frying pan

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove

        combine_and_fry_rice_and_eggs(rice, eggs, frying_pan, stove)
        # Execute the combining and frying behavior with the selected items

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_dvd_player_2061_around_tablelamp_97(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tablelamp_instance:item where:
            is_tablelamp(tablelamp_instance) and id[tablelamp_instance]==97
        achieve close_char(char,tablelamp_instance)
        if can_open(tablelamp_instance):
            achieve_once open(tablelamp_instance)
            exp(dvd_player,tablelamp_instance)
        else:
            exp(dvd_player,tablelamp_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tablelamp_instance]=True
        close[tablelamp_instance,dvd_player]=True
    

#exp_behavior_end

#goal_representation
 
def has_scrambled_eggs(pan: item):
    # Determine if there are scrambled eggs in the fryingpan
    symbol eggs_scrambled = exists eggs: item: is_food_egg(eggs) and inside(eggs, pan) and is_scrambled(eggs)
    return eggs_scrambled

behavior combine_and_fry(rice: item, pan: item):
    body:
        achieve inside(rice, pan)
        achieve is_on(stove_2065)

behavior ensure_eggs_scrambled(pan: item):
    body:
        if not has_scrambled_eggs(pan):
            observe(pan, "Check if the eggs are being scrambled")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and visited(fryingpan)
        
        ensure_eggs_scrambled(fryingpan)
        combine_and_fry(rice, fryingpan)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

'Function is_scrambled not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dvd_player_2061_around_oven_295(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(dvd_player,oven_instance)
        else:
            exp(dvd_player,oven_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,oven_instance]=True
        close[oven_instance,dvd_player]=True
    

#goal_representation
 
def has_scrambled_eggs(pan: item):
    # Determine if there are scrambled eggs in the fryingpan
    symbol eggs_scrambled = exists eggs: item: is_food_egg(eggs) and inside(eggs, pan) and cut(eggs)
    return eggs_scrambled

behavior combine_and_fry(rice: item, pan: item):
    body:
        achieve inside(rice, pan)
        achieve is_on(stove_2065)

behavior ensure_eggs_scrambled(pan: item):
    body:
        if not has_scrambled_eggs(pan):
            observe(pan, "Check if the eggs are being scrambled")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and visited(fryingpan)
        
        ensure_eggs_scrambled(fryingpan)
        combine_and_fry(rice, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<rice: item>, Variable<pan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_scrambled_eggs(pan: item):
    # Determine if there are scrambled eggs in the fryingpan
    symbol eggs_scrambled = exists eggs: item: is_food_egg(eggs) and inside(eggs, pan) and cut(eggs)
    return eggs_scrambled

behavior combine_and_fry(rice: item, pan: item, stove: item):
    body:
        achieve inside(rice, pan)
        achieve is_on(stove)

behavior ensure_eggs_scrambled(pan: item):
    body:
        if not has_scrambled_eggs(pan):
            observe(pan, "Check if the eggs are being scrambled")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and visited(fryingpan)
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065

        ensure_eggs_scrambled(fryingpan)
        combine_and_fry(rice, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_pot_2069(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(fork,pot_instance)
        else:
            exp(fork,pot_instance)
    eff:
        unknown[fork]=False
        close[fork,pot_instance]=True
        close[pot_instance,fork]=True
    

behavior find_dvd_player_2061_around_television_248(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==248
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(dvd_player,television_instance)
        else:
            exp(dvd_player,television_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,television_instance]=True
        close[television_instance,dvd_player]=True
    

#exp_behavior_end

#goal_representation
 
def check_scrambled(eggs: item):
    # Function to check if the eggs have been scrambled
    observe(eggs, "Check if the eggs are being scrambled")
    
def scramble_eggs(fryingpan: item, stove: item):
    # Behavior to scramble the eggs
    body:
        achieve inside(fryingpan, stove)
        # Ensure the frying pan is in the stove
        achieve is_on(stove)
        # Ensure the stove is on
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan)
        check_scrambled(eggs)
        # Check if the eggs have been scrambled If not, scramble them

behavior combine_and_fry(rice: item, fryingpan: item, stove: item):
    body:
        achieve inside(rice, fryingpan)
        # Ensure the rice is inside the frying pan
        scramble_eggs(fryingpan, stove)
        # Ensure the eggs are scrambled if not already
        achieve inside(fryingpan, stove)
        # Ensure the frying pan is back on the stove
        achieve is_on(stove)
        # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the cooked rice
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        bind stove: item where:
            is_stove(stove)
        # Select the stove
       
        combine_and_fry(rice, fryingpan, stove)


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5843, column 9.
Expected one of: 
	* EQUAL
	* PERCENT
	* STAR
	* __ANON_5
	* FLOORDIV
	* SLASH
	* GREATER_EQ
	* __ANON_1
	* __ANON_8
	* COMMA
	* __ANON_3
	* MINUS
	* PLUS
	* __ANON_0
	* CIRCUMFLEX
	* NOT_EQ
	* LESSTHAN
	* RSHIFT
	* AT
	* SEMICOLON
	* __ANON_2
	* __ANON_4
	* AMPERSAND
	* AND
	* LSHIFT
	* IF
	* MORETHAN
	* OR
	* __ANON_6
	* LESS_EQ
	* __ANON_7
	* VBAR
	* DOUBLE_EQUAL
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_103_around_table_107(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#goal_representation
 
def check_scrambled(eggs: item):
    # Function to check if the eggs have been scrambled
    observe(eggs, "Check if the eggs are being scrambled")

behavior scramble_eggs(fryingpan: item, stove: item):
    body:
        achieve inside(fryingpan, stove)
        # Ensure the frying pan is in the stove
        achieve is_on(stove)
        # Ensure the stove is on
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan)
        check_scrambled(eggs)
        # Check if the eggs have been scrambled If not, scramble them by additional actions (not explicitly defined here)

behavior combine_and_fry(rice: item, fryingpan: item, stove: item):
    body:
        achieve inside(rice, fryingpan)
        # Ensure the rice is inside the frying pan
        scramble_eggs(fryingpan, stove)
        # Ensure the eggs are scrambled if not already
        achieve inside(fryingpan, stove)
        # Ensure the frying pan is back on the stove
        achieve is_on(stove)
        # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the cooked rice
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        combine_and_fry(rice, fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Behavior body statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
def check_scrambled(eggs: item):
    # Function to check if the eggs have been scrambled
    observe(eggs, "Check if the eggs are being scrambled")

behavior scramble_eggs(fryingpan: item, stove: item):
    body:
        achieve inside(fryingpan, stove)
        # Ensure the frying pan is in the stove
        achieve is_on(stove)
        # Ensure the stove is on
        bind eggs: item where:
            is_food_egg(eggs) and inside(eggs, fryingpan)
        check_scrambled(eggs)
        # Check if the eggs have been scrambled If not, scramble them by additional actions (not explicitly defined here)

behavior combine_and_fry(rice: item, fryingpan: item, stove: item):
    body:
        achieve inside(rice, fryingpan)
        # Ensure the rice is inside the frying pan
        scramble_eggs(fryingpan, stove)
        # Ensure the eggs are scrambled if not already
        achieve inside(fryingpan, stove)
        # Ensure the frying pan is back on the stove
        achieve is_on(stove)
        # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the cooked rice
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        combine_and_fry(rice, fryingpan, stove)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_egg_2020)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_egg_2020, kitchen_counter_230)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_rice_2036, kitchen_counter_230)', 'walk_executor(food_salt_2037)', 'grab_executor(food_salt_2037)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_salt_2037, kitchen_counter_230)', 'walk_executor(food_vegetable_2041)', 'grab_executor(food_vegetable_2041)', 'walk_executor(kitchen_counter_230)', 'put_executor(food_vegetable_2041, kitchen_counter_230)', 'walk_executor(sauce_2078)', 'grab_executor(sauce_2078)', 'walk_executor(kitchen_counter_230)', 'put_executor(sauce_2078, kitchen_counter_230)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'walk_executor(stove_2065)', 'putin_executor(food_rice_2036, stove_2065)', 'close_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_egg_2020, fryingpan_2083)', 'walk_executor(stove_2065)', 'switchoff_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'putin_executor(fryingpan_2083, stove_2065)', 'close_executor(stove_2065)', 'switchon_executor(stove_2065)', 'switchoff_executor(stove_2065)', 'open_executor(stove_2065)', 'grab_executor(food_rice_2036)', 'putin_executor(food_rice_2036, fryingpan_2083)', 'close_executor(stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 471 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 51
goal generate times: 14
goal correct times: 3

Task complete rate:
Keystate: k1 - Requires: 13 steps
Keystate: k2 - Requires: 10 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
