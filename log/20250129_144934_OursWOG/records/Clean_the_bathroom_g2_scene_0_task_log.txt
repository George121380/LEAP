From agent.py
Reset goals: The sub-goals are: 
['1. Find the sink in the bathroom.', '2. Fill the sink with water and add soap to create soapy water.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior find_sink_in_bathroom(sink:item, bathroom:item):
    body:
        achieve inside(sink, bathroom)
        # Verify the sink is inside the bathroom

behavior observe_unvisited_sink(sink:item):
    body:
        observe(sink, "Is this sink inside the bathroom")

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        if exists sink: item : is_sink(sink) and inside(sink, bathroom):
            # If a sinks location in the bathroom is already known
            bind sink: item where:
                is_sink(sink) and inside(sink, bathroom)
            achieve close_char(char, sink)

        else:
            # Check all sinks in the scene that have not been visited
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe_unvisited_sink(sink)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_sink_in_bathroom(sink:item, bathroom:item):
    body:
        achieve inside(sink, bathroom)
        # Verify the sink is inside the bathroom

behavior observe_unvisited_sink(sink:item):
    body:
        observe(sink, "Is this sink inside the bathroom")

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        if exists sink: item : is_sink(sink) and inside(sink, bathroom):
            # If a sinks location in the bathroom is already known
            bind sink: item where:
                is_sink(sink) and inside(sink, bathroom)
            achieve close_char(char, sink)

        else:
            # Check all sinks in the scene that have not been visited
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe_unvisited_sink(sink)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)
##############################
From agent.py
walk_executor(sink_42)
Find towel_rack_32. Find towel_rack_34. Find towel_rack_31. Find detergent_2084. Find soap_2053. Find basket_for_clothes_2006. Find cleaning_solution_2073. Robot is inside the bathroom_1. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether the sink has a faucet nearby
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

def is_soap_nearby(sink:item):
    # Check if soap is nearby the sink area
    symbol soap_near=exists soap:item: is_soap(soap) and close(soap,sink)
    return soap_near

behavior fill_sink_with_water_and_soap(sink:item):
    body:
        achieve has_water(sink) # Fill the sink with water
        if is_soap_nearby(sink):
            bind soap: item where:
                is_soap(soap) and close(soap,sink)
            achieve inside(soap, sink) # Add soap into the sink to create soapy water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select the sink with ID 42 which was found
        if not has_water(sink):
            # If the sink does not currently have water, fill it
            fill_sink_with_water_and_soap(sink)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_faucet(sink:item):
    # Determine whether the sink has a faucet nearby
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

def is_soap_nearby(sink:item):
    # Check if soap is nearby the sink area
    symbol soap_near=exists soap:item: is_soap(soap) and close(soap,sink)
    return soap_near

behavior fill_sink_with_water_and_soap(sink:item):
    body:
        achieve has_water(sink) # Fill the sink with water
        if is_soap_nearby(sink):
            bind soap: item where:
                is_soap(soap) and close(soap,sink)
            achieve inside(soap, sink) # Add soap into the sink to create soapy water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select the sink with ID 42 which was found
        if not has_water(sink):
            # If the sink does not currently have water, fill it
            fill_sink_with_water_and_soap(sink)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(soap_2053)grab_executor(soap_2053)walk_executor(sink_42)putin_executor(soap_2053, sink_42)
##############################
From agent.py
walk_executor(faucet_43)
Robot is inside the bathroom_1. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. Robot is no longer close sink_42.
##############################
From agent.py
switchon_executor(faucet_43)
Find drawing_176. Robot is inside the bathroom_1. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot is inside the bathroom_1. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
walk_executor(soap_2053)
Robot is inside the bathroom_1. Robot is close to the sink_42. Robot is close to the soap_2053. Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From agent.py
grab_executor(soap_2053)
Robot is inside the bathroom_1. Robot is close to the sink_42. Robot is close to the soap_2053. Grabbing soap_2053 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot is inside the bathroom_1. Robot is close to the sink_42. Robot is close to the soap_2053. Robot is close to the bathroom_counter_41. 
##############################
From agent.py
putin_executor(soap_2053, sink_42)
Robot is inside the bathroom_1. Robot is close to the sink_42. Robot is close to the soap_2053. Robot is close to the bathroom_counter_41. soap_2053 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a sink of soapy water in the bathroom.
Action History:
['walk_executor(sink_42)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(soap_2053)', 'grab_executor(soap_2053)', 'walk_executor(sink_42)', 'putin_executor(soap_2053, sink_42)']
Time info:
Time consume: 50 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 49
goal generate times: 2
goal correct times: 0

Task complete rate:
1
Scene_id: 0
##############################
