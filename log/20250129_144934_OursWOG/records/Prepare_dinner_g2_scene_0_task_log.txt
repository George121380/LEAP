From agent.py
Reset goals: The sub-goals are: 
['1. Prepare the chicken and onion by cleaning and cutting them if needed.', '2. Place the chicken and onion in the baking tray.', '3. Put the tray in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2032_around_fridge_289(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_cutting_board(floor:item):
    # Determine whether the kitchen floor has a cutting board
    symbol has_cutting_board=exists cutting_board: item: is_cutting_board(cutting_board) and on(cutting_board, floor)
    return has_cutting_board

behavior clean_chicken_and_onion(chicken:item, onion:item, sink:item):
    body:
        achieve_once inside(chicken, sink)
        # Ensure the chicken is placed inside the sink

        achieve_once inside(onion, sink)
        # Place the onion inside the sink

        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to clean

        wash(chicken)
        wash(onion)
        # Wash both the chicken and the onion

        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after cleaning

behavior cut_chicken_and_onion(chicken:item, onion:item, floor:item):
    body:
        if has_cutting_board(floor):
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and on(cutting_board, floor)
            achieve_once inside(chicken, cutting_board)
            achieve_once inside(onion, cutting_board)
        # Place chicken and onion on the cutting board

        achieve cut(chicken)
        achieve cut(onion)
        # Cut both chicken and onion

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        bind sink: item where:
            is_sink(sink)
        # Select a sink to use

        bind floor: item where:
            is_floor(floor)
        # Select the kitchen floor for cutting board

        clean_chicken_and_onion(chicken, onion, sink)
        cut_chicken_and_onion(chicken, onion, floor)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_cutting_board(floor:item):
    # Determine whether the kitchen floor has a cutting board
    symbol has_cutting_board=exists cutting_board: item: is_cutting_board(cutting_board) and on(cutting_board, floor)
    return has_cutting_board

behavior clean_chicken_and_onion(chicken:item, onion:item, sink:item):
    body:
        achieve_once inside(chicken, sink)
        # Ensure the chicken is placed inside the sink

        achieve_once inside(onion, sink)
        # Place the onion inside the sink

        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to clean

        wash(chicken)
        wash(onion)
        # Wash both the chicken and the onion

        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after cleaning

behavior cut_chicken_and_onion(chicken:item, onion:item, floor:item):
    body:
        if has_cutting_board(floor):
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and on(cutting_board, floor)
            achieve_once inside(chicken, cutting_board)
            achieve_once inside(onion, cutting_board)
        # Place chicken and onion on the cutting board

        achieve cut(chicken)
        achieve cut(onion)
        # Cut both chicken and onion

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        bind sink: item where:
            is_sink(sink)
        # Select a sink to use

        bind floor: item where:
            is_floor(floor)
        # Select the kitchen floor for cutting board

        clean_chicken_and_onion(chicken, onion, sink)
        cut_chicken_and_onion(chicken, onion, floor)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(sink_42)putin_executor(food_chicken_2017, sink_42)walk_executor(fridge_289)exp(food_onion_2032, fridge_289)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(sink_42)putin_executor(food_onion_2032, sink_42)walk_executor(faucet_43)switchon_executor(faucet_43)walk_executor(food_chicken_2017)wash_executor(food_chicken_2017)walk_executor(food_onion_2032)wash_executor(food_onion_2032)walk_executor(kitchen_counter_230)exp(cutting_board_2051, kitchen_counter_230)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_chicken_2017)cut_executor(food_chicken_2017)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(cutting_board_2051)put_executor(food_onion_2032, cutting_board_2051)walk_executor(food_onion_2032)cut_executor(food_onion_2032)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Find drawing_239. Find drawing_240. Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the floor_202. Robot is close to the floor_203. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Robot is no longer inside bathroom_1.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Find drawing_174. Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the floor_202. Robot is close to the floor_203. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the floor_202. Robot is close to the floor_203. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2017)walk_executor(sink_42)putin_executor(food_chicken_2017, sink_42)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(sink_42)putin_executor(food_onion_2032, sink_42)walk_executor(faucet_43)switchon_executor(faucet_43)walk_executor(food_chicken_2017)wash_executor(food_chicken_2017)walk_executor(food_onion_2032)wash_executor(food_onion_2032)walk_executor(kitchen_counter_230)exp(cutting_board_2051, kitchen_counter_230)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_chicken_2017)cut_executor(food_chicken_2017)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(cutting_board_2051)put_executor(food_onion_2032, cutting_board_2051)walk_executor(food_onion_2032)cut_executor(food_onion_2032)
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the floor_202. Robot is close to the floor_203. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Find towel_rack_32. Find towel_rack_34. Find towel_rack_31. Find detergent_2084. Find soap_2053. Find basket_for_clothes_2006. Find cleaning_solution_2073. Robot is inside the bathroom_1. Robot is close to the food_chicken_2017. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. Robot is no longer inside dining_room_201.Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
putin_executor(food_chicken_2017, sink_42)
Find drawing_176. Robot is inside the bathroom_1. Robot is close to the food_chicken_2017. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot is inside the dining_room_201. Robot is close to the food_onion_2032. Robot is close to the fridge_289. Robot is no longer inside bathroom_1.Robot is no longer close food_chicken_2017.Robot is no longer close sink_42.Robot is no longer close bathroom_counter_41.
##############################
From agent.py
grab_executor(food_onion_2032)
Robot is inside the dining_room_201. Robot is close to the food_onion_2032. Robot is close to the fridge_289. Grabbing food_onion_2032 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot is inside the bathroom_1. Robot is close to the food_onion_2032. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. Robot is no longer inside dining_room_201.Robot is no longer close fridge_289.
##############################
From agent.py
putin_executor(food_onion_2032, sink_42)
Robot is inside the bathroom_1. Robot is close to the food_onion_2032. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. food_onion_2032 released by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot is inside the bathroom_1. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. Robot is no longer close food_onion_2032.Robot is no longer close sink_42.
##############################
From agent.py
switchon_executor(faucet_43)
Robot is inside the bathroom_1. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot is inside the dining_room_201. Robot is close to the food_chicken_2017. Robot is close to the sink_42. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From agent.py
wash_executor(food_chicken_2017)
Robot is inside the dining_room_201. Robot is close to the food_chicken_2017. Robot is close to the sink_42. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot is inside the dining_room_201. Robot is close to the sink_42. Robot is close to the food_onion_2032. Robot is no longer close food_chicken_2017.
##############################
From agent.py
wash_executor(food_onion_2032)
Robot is inside the dining_room_201. Robot is close to the sink_42. Robot is close to the food_onion_2032. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find cutting_board_2051. Find pot_2069. Find knife_2050. Find napkin_2005. Find drawing_238. Find drawing_241. Find drawing_242. Find drawing_243. Find cup_2064. Find cup_2063. Find oil_2079. Find fryingpan_2083. Find tray_296. Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is no longer close food_onion_2032.Robot is no longer close sink_42.
##############################
From agent.py
exp(cutting_board_2051, kitchen_counter_230)
Find cutting_board_2051. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)wash_executor(food_chicken_2017)walk_executor(food_onion_2032)wash_executor(food_onion_2032)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_chicken_2017)cut_executor(food_chicken_2017)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(cutting_board_2051)put_executor(food_onion_2032, cutting_board_2051)walk_executor(food_onion_2032)cut_executor(food_onion_2032)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot is inside the dining_room_201. Robot is close to the food_chicken_2017. Robot is close to the sink_42. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
wash_executor(food_chicken_2017)
Robot is inside the dining_room_201. Robot is close to the food_chicken_2017. Robot is close to the sink_42. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot is inside the dining_room_201. Robot is close to the sink_42. Robot is close to the food_onion_2032. Robot is no longer close food_chicken_2017.
##############################
From agent.py
wash_executor(food_onion_2032)
Robot is inside the dining_room_201. Robot is close to the sink_42. Robot is close to the food_onion_2032. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot is inside the dining_room_201. Robot is close to the sink_42. Robot is close to the food_chicken_2017. Robot is no longer close food_onion_2032.
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot is inside the dining_room_201. Robot is close to the sink_42. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot is inside the dining_room_201. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. Robot is no longer close sink_42.
##############################
From agent.py
put_executor(food_chicken_2017, cutting_board_2051)
Robot is inside the dining_room_201. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Robot is no longer close food_chicken_2017.Robot is no longer close cutting_board_2051.
##############################
From agent.py
grab_executor(knife_2050)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
cut_executor(food_chicken_2017)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the cutting_board_2051. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the sink_42. Robot is no longer close food_chicken_2017.Robot is no longer close cutting_board_2051.
##############################
From agent.py
grab_executor(food_onion_2032)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the sink_42. Grabbing food_onion_2032 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. Robot is no longer close sink_42.
##############################
From agent.py
put_executor(food_onion_2032, cutting_board_2051)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. food_onion_2032 released by left hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
cut_executor(food_onion_2032)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior place_in_baking_tray(chicken:item, onion:item, tray:item):
    body:
        achieve inside(chicken, tray)
        achieve inside(onion, tray)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        bind tray: item where:
            is_tray(tray)
        # Select a baking tray

        place_in_baking_tray(chicken, onion, tray)
        # Place the chicken and onion in the baking tray
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_on_baking_tray(chicken:item, onion:item, tray:item):
    body:
        achieve on(chicken, tray)
        achieve on(onion, tray)

behavior __goal__():
    body:
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select the chicken item

        bind food_onion: item where:
            is_food_onion(food_onion)
        # Select the onion item

        bind baking_tray: item where:
            is_tray(baking_tray)
        # Select the baking tray

        place_on_baking_tray(food_chicken, food_onion, baking_tray)
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_on_baking_tray(chicken:item, onion:item, tray:item):
    body:
        achieve on(chicken, tray)
        achieve on(onion, tray)

behavior __goal__():
    body:
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select the chicken item

        bind food_onion: item where:
            is_food_onion(food_onion)
        # Select the onion item

        bind baking_tray: item where:
            is_tray(baking_tray)
        # Select the baking tray

        place_on_baking_tray(food_chicken, food_onion, baking_tray)
 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(tray_296)put_executor(food_chicken_2017, tray_296)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(tray_296)put_executor(food_onion_2032, tray_296)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_chicken_2017. Robot is no longer close food_onion_2032.
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_chicken_2017. Grabbing food_chicken_2017 by left hand. 
##############################
From agent.py
walk_executor(tray_296)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. Robot is no longer close cutting_board_2051.
##############################
From agent.py
put_executor(food_chicken_2017, tray_296)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. food_chicken_2017 released by left hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. Robot is no longer close tray_296.Robot is no longer close food_chicken_2017.Robot is no longer close oven_295.
##############################
From agent.py
grab_executor(food_onion_2032)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the cutting_board_2051. Grabbing food_onion_2032 by left hand. 
##############################
From agent.py
walk_executor(tray_296)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the tray_296. Robot is close to the oven_295. Robot is no longer close cutting_board_2051.
##############################
From agent.py
put_executor(food_onion_2032, tray_296)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_onion_2032. Robot is close to the tray_296. Robot is close to the oven_295. food_onion_2032 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_rack_34_around_towel_rack_34(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel_rack,towel_rack_instance)
        else:
            exp(towel_rack,towel_rack_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,towel_rack_instance]=True
        close[towel_rack_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve inside(tray, oven)
        # Place the tray inside the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and id[tray]==296
        # Select the baking tray with chicken and onion

        bind oven: item where:
            is_oven(oven)
        # Select an oven to place the tray in

        place_tray_in_oven(tray, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_rack_34_around_towel_rack_34(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel_rack,towel_rack_instance)
        else:
            exp(towel_rack,towel_rack_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,towel_rack_instance]=True
        close[towel_rack_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray: item, oven: item):
    body:
        achieve inside(tray, oven)
        # Move the tray inside the oven

behavior close_oven_door(oven: item):
    body:
        achieve closed(oven)
        # Close the oven door

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and (on(food_chicken_2017, tray) or on(food_onion_2032, tray))
        # Select the tray with chicken and onion
        
        bind oven: item where:
            is_oven(oven)
        # Select the oven to roast the chicken and onion

        place_tray_in_oven(tray, oven)
        close_oven_door(oven)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_chicken_2017; available variables: [Variable<tray: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior place_tray_in_oven(tray: item, oven: item):
    body:
        achieve inside(tray, oven)
        # Move the tray inside the oven

behavior close_oven_door(oven: item):
    body:
        achieve closed(oven)
        # Close the oven door

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and (on(food_chicken_2017, tray) or on(food_onion_2032, tray))
        # Select the tray with chicken and onion
        
        bind oven: item where:
            is_oven(oven)
        # Select the oven to roast the chicken and onion

        place_tray_in_oven(tray, oven)
        close_oven_door(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior roast_in_oven(tray:item, oven:item):
    body:
        achieve inside(tray, oven)
        # Place the tray inside the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and on(food_chicken_2017, tray) and on(food_onion_2032, tray)
        # Select the tray that contains both food_chicken_2017 and food_onion_2032

        bind oven: item where:
            is_oven(oven)
        # Select an oven

        roast_in_oven(tray, oven)
        # Place the tray with chicken and onion in the oven to roast

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_tray_in_oven(tray:item, oven:item):
    body:
        achieve inside(tray, oven)

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and id[tray]==296
        # Select the tray with ID 296

        bind oven: item where:
            is_oven(oven)
        # Select an oven

        put_tray_in_oven(tray, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_rack_34_around_towel_rack_34(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel_rack,towel_rack_instance)
        else:
            exp(towel_rack,towel_rack_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,towel_rack_instance]=True
        close[towel_rack_instance,towel_rack]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_tray_in_oven(tray:item, oven:item):
    body:
        achieve inside(tray, oven)
        # Ensure the tray is placed inside the oven

behavior close_oven(oven:item):
    body:
        achieve closed(oven)
        # Ensure the oven door is closed after placing the tray inside

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and id[tray]==296
        # Select tray with ID 296

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_tray_in_oven(tray, oven)
        close_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_table_226(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve inside(tray, oven)

behavior close_the_oven_door(oven:item):
    body:
        achieve closed(oven)

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and id[tray]==296
        # Select the tray with ID 296

        bind oven: item where:
            is_oven(oven)
        # Select an oven in the environment

        place_tray_in_oven(tray, oven)
        close_the_oven_door(oven)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve inside(tray, oven)
        # Place the tray with chicken and onion inside the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and on(food_chicken_2017, tray) and on(food_onion_2032, tray)
        # Select the tray with the chicken and onion

        bind oven: item where:
            is_oven(oven)
        # Select an oven to roast the chicken and onion

        place_tray_in_oven(tray, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_tray_in_oven(tray:item, oven:item):
    body:
        achieve inside(tray, oven)
        # Place the tray inside the oven

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray)
        # Select the tray with chicken and onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_tray_in_oven(tray, oven)
        # Execute the behavior to place the tray in the oven to roast

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def has_food_on_tray(tray: item):
    # Function to check if there is food on a specified tray
    symbol food_on_tray=exists o: item : (is_food_chicken(o) or is_food_onion(o)) and on(o, tray)
    return food_on_tray

behavior __goal__():
    body:
        bind tray: item where:
            is_tray(tray) and id[tray]==296
        # Select tray with ID 296

        if has_food_on_tray(tray):
            # Check if there is food on the tray based on the available information
            bind oven: item where:
                is_oven(oven)
            # Select the oven

            achieve inside(tray, oven)
            # Place the tray inside the oven to roast
        else:
            # Observe the tray to check for food if not confirmed by available information
            observe(tray, "Check is there any food on the tray")

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Roast chicken with onion in the oven.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_chicken_2017)', 'walk_executor(sink_42)', 'putin_executor(food_chicken_2017, sink_42)', 'walk_executor(food_onion_2032)', 'grab_executor(food_onion_2032)', 'walk_executor(sink_42)', 'putin_executor(food_onion_2032, sink_42)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'walk_executor(food_chicken_2017)', 'wash_executor(food_chicken_2017)', 'walk_executor(food_onion_2032)', 'wash_executor(food_onion_2032)', 'walk_executor(kitchen_counter_230)', 'walk_executor(food_chicken_2017)', 'wash_executor(food_chicken_2017)', 'walk_executor(food_onion_2032)', 'wash_executor(food_onion_2032)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(cutting_board_2051)', 'put_executor(food_chicken_2017, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_chicken_2017)', 'cut_executor(food_chicken_2017)', 'walk_executor(food_onion_2032)', 'grab_executor(food_onion_2032)', 'walk_executor(cutting_board_2051)', 'put_executor(food_onion_2032, cutting_board_2051)', 'walk_executor(food_onion_2032)', 'cut_executor(food_onion_2032)', 'walk_executor(food_chicken_2017)', 'grab_executor(food_chicken_2017)', 'walk_executor(tray_296)', 'put_executor(food_chicken_2017, tray_296)', 'walk_executor(food_onion_2032)', 'grab_executor(food_onion_2032)', 'walk_executor(tray_296)', 'put_executor(food_onion_2032, tray_296)']
Time info:
Time consume: 168 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 36
goal generate times: 12
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 10 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
