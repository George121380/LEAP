From agent.py
Reset goals: The sub-goals are: 
['Slice and toast the bread.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior slice_bread(bread:item, knife:item):
    body:
        achieve cut(bread)
        # Ensure the bread is sliced

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the sliced bread inside the toaster
        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread to be sliced and toasted

        bind knife: item where:
            is_knife(knife)
        # Select a knife to slice the bread
        
        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster to toast the bread

        slice_bread(bread, knife)
        toast_bread(bread, toaster)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2012_around_fridge_289(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
def has_toaster_plugged_in(toaster:item):
    # Determine if the toaster is plugged in
    symbol plugged_in=exists outlet: item : is_powersocket(outlet) and plugged(toaster)
    return plugged_in

def is_bread_sliced(bread:item):
    # Determine if the bread is already sliced
    symbol sliced=cut(bread)
    return sliced

behavior slice_bread(bread:item, knife:item, cutting_board:item):
    body:
        achieve inside(bread, cutting_board)
        achieve cut(bread)
        # Ensure bread is sliced on the cutting board

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        achieve is_on(toaster)
        # Ensure bread is inside the toaster and the toaster is on

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select a bread item to be sliced and toasted

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster

        bind knife: item where:
            is_knife(knife)
        # Select a knife for slicing bread

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board for slicing bread

        if not is_bread_sliced(bread):
            achieve_once inhand(knife)
            slice_bread(bread, knife, cutting_board)
            # Slice the bread if its not already sliced

        if not has_toaster_plugged_in(toaster):
            observe(toaster, "Check if the toaster is plugged in")
            # Ensure the toaster is plugged in before use

        toast_bread(bread, toaster)
        # Toast the sliced bread

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_instance_in_kitchen_counter(obj: item):
    # Function to check if an object is on the kitchen counter
    symbol on_kitchen_counter=exists counter: item : is_kitchen_counter(counter) and on(obj, counter)
    return on_kitchen_counter

def is_power_on_toaster(toaster: item):
    # Function to check if the toaster is powered on
    symbol power_on=plugged(toaster) and is_on(toaster)
    return power_on

behavior cut_bread(bread: item):
    body:
        achieve cut(bread)
        # Ensure the bread is sliced

behavior insert_bread_into_toaster(bread: item, toaster: item):
    body:
        achieve inside(bread, toaster)
        # Insert the sliced bread into the toaster

behavior toast_bread(toaster: item):
    body:
        achieve is_on(toaster)
        # Ensure the toaster is on for toasting bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread) # Select the bread to be sliced and toasted

        bind toaster: item where:
            is_toaster(toaster) and is_power_on_toaster(toaster)
        # Select a toaster that is powered on

        if not is_instance_in_kitchen_counter(bread):
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter)
            # Move the bread to the kitchen counter to slice it in a suitable location
            achieve on(bread, kitchen_counter)

        cut_bread(bread)
        insert_bread_into_toaster(bread, toaster)
        toast_bread(toaster)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Slice the bread and toast it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2012_around_fridge_289(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_knife():
    # Check if there is a knife available
    symbol knife_exists=exists knife: item : is_knife(knife)
    return knife_exists

def is_toaster_available():
    # Check if there is a toaster in the scene
    symbol toaster_exists=exists toaster: item : is_toaster(toaster)
    return toaster_exists

behavior slice_bread(bread:item, knife:item):
    body:
        bind knife: item where:
            is_knife(knife)
        achieve cut(bread)
        # Ensure the bread is sliced with a knife

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve plugged(toaster) 
        # Ensure the toaster is plugged in

        achieve is_on(toaster)
        # Turn on the toaster

        achieve inside(bread, toaster)
        # Put the bread inside the toaster

        # The bread will be toasted inside the toaster

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread to be sliced and toasted
        
        if has_knife():
            bind knife: item where:
                is_knife(knife)
            slice_bread(bread, knife)
        
        if is_toaster_available():
            bind toaster: item where:
                is_toaster(toaster)
            toast_bread(bread, toaster)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable knife already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bread_2012_around_fridge_289(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#goal_representation
 
def has_knife():
    # Check if there is a knife available
    symbol knife_exists=exists knife: item : is_knife(knife)
    return knife_exists

def is_toaster_available():
    # Check if there is a toaster in the scene
    symbol toaster_exists=exists toaster: item : is_toaster(toaster)
    return toaster_exists

behavior slice_bread(bread:item, knife:item):
    body:
        achieve cut(bread)
        # Ensure the bread is sliced with a knife

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve plugged(toaster) 
        # Ensure the toaster is plugged in

        achieve is_on(toaster)
        # Turn on the toaster

        achieve inside(bread, toaster)
        # Put the bread inside the toaster

        # The bread will be toasted inside the toaster

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread to be sliced and toasted
        
        if has_knife():
            bind knife: item where:
                is_knife(knife)
            slice_bread(bread, knife)
        
        if is_toaster_available():
            bind toaster: item where:
                is_toaster(toaster)
            toast_bread(bread, toaster)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2012_around_fridge_289(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_bread(bread:item, knife:item):
    body:
        achieve cut(bread)

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve is_on(toaster)
        achieve inside(bread, toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread to slice and toast
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife to slice the bread
        
        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster to toast the bread
        
        slice_bread(bread, knife)
        toast_bread(bread, toaster)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2012_around_fridge_289(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_bread(bread:item, knife:item):
    body:
        achieve cut(bread)
        # Achieve the goal of cutting the bread

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the bread inside the toaster for toasting
        achieve closed(toaster)
        # Close the toaster door
        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread to be sliced and toasted

        bind knife: item where:
            is_knife(knife)
        # Select a knife to slice the bread

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster to toast the bread

        slice_bread(bread, knife)
        toast_bread(bread, toaster)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Slice the bread and toast it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2012_around_fridge_289(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior slice_bread(bread:item):
    body:
        achieve cut(bread)
        # Ensure the bread is sliced

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        achieve is_on(toaster)
        # Ensure the bread is inside the toaster and the toaster is turned on

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select a bread item to slice and toast

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster for toasting the bread

        slice_bread(bread)
        toast_bread(bread, toaster)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior slice_bread(bread:item):
    body:
        achieve cut(bread)
        # Ensure the bread is sliced

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        achieve is_on(toaster)
        # Ensure the bread is inside the toaster and the toaster is turned on

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select a bread item to slice and toast

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster for toasting the bread

        slice_bread(bread)
        toast_bread(bread, toaster)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_bread_2012, fridge_289)walk_executor(kitchen_counter_230)exp(cutting_board_2051, kitchen_counter_230)walk_executor(food_bread_2012)grab_executor(food_bread_2012)walk_executor(cutting_board_2051)put_executor(food_bread_2012, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_bread_2012)cut_executor(food_bread_2012)grab_executor(food_bread_2012)walk_executor(toaster_292)putin_executor(food_bread_2012, toaster_292)switchon_executor(toaster_292)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Find drawing_239. Find drawing_240. Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the floor_202. Robot is close to the floor_203. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Robot is no longer inside bathroom_1.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Find drawing_174. Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the floor_202. Robot is close to the floor_203. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside the dining_room_201. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the floor_202. Robot is close to the floor_203. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. 
##############################
From agent.py
exp(food_bread_2012, fridge_289)
Find food_bread_2012. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cutting_board_2051, kitchen_counter_230)walk_executor(food_bread_2012)grab_executor(food_bread_2012)walk_executor(cutting_board_2051)put_executor(food_bread_2012, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_bread_2012)cut_executor(food_bread_2012)grab_executor(food_bread_2012)walk_executor(toaster_292)putin_executor(food_bread_2012, toaster_292)switchon_executor(toaster_292)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find cutting_board_2051. Find pot_2069. Find knife_2050. Find napkin_2005. Find drawing_238. Find drawing_241. Find drawing_242. Find drawing_243. Find cup_2064. Find cup_2063. Find oil_2079. Find fryingpan_2083. Find tray_296. Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
exp(cutting_board_2051, kitchen_counter_230)
Find cutting_board_2051. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_bread_2012)grab_executor(food_bread_2012)walk_executor(cutting_board_2051)put_executor(food_bread_2012, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_bread_2012)cut_executor(food_bread_2012)grab_executor(food_bread_2012)walk_executor(toaster_292)putin_executor(food_bread_2012, toaster_292)switchon_executor(toaster_292)
##############################
From agent.py
walk_executor(food_bread_2012)
Robot is inside the dining_room_201. Robot is close to the fridge_289. Robot is close to the food_bread_2012. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(food_bread_2012)
Robot is inside the dining_room_201. Robot is close to the fridge_289. Robot is close to the food_bread_2012. Grabbing food_bread_2012 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot is inside the dining_room_201. Robot is close to the food_bread_2012. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. Robot is no longer close fridge_289.
##############################
From agent.py
put_executor(food_bread_2012, cutting_board_2051)
Robot is inside the dining_room_201. Robot is close to the food_bread_2012. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. food_bread_2012 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Robot is no longer close cutting_board_2051.Robot is no longer close food_bread_2012.
##############################
From agent.py
grab_executor(knife_2050)
Robot is inside the dining_room_201. Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_bread_2012)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_bread_2012. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
cut_executor(food_bread_2012)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_bread_2012. 
##############################
From agent.py
grab_executor(food_bread_2012)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_bread_2012. Grabbing food_bread_2012 by left hand. 
##############################
From agent.py
walk_executor(toaster_292)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_bread_2012. Robot is close to the toaster_292. Robot is close to the kitchen_counter_230. Robot is no longer close cutting_board_2051.
##############################
From agent.py
putin_executor(food_bread_2012, toaster_292)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_bread_2012. Robot is close to the toaster_292. Robot is close to the kitchen_counter_230. food_bread_2012 released by left hand. 
##############################
From agent.py
switchon_executor(toaster_292)
Robot is inside the dining_room_201. Robot is close to the knife_2050. Robot is close to the food_bread_2012. Robot is close to the toaster_292. Robot is close to the kitchen_counter_230. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Slice and toast bread.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(kitchen_counter_230)', 'walk_executor(food_bread_2012)', 'grab_executor(food_bread_2012)', 'walk_executor(cutting_board_2051)', 'put_executor(food_bread_2012, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_bread_2012)', 'cut_executor(food_bread_2012)', 'grab_executor(food_bread_2012)', 'walk_executor(toaster_292)', 'putin_executor(food_bread_2012, toaster_292)', 'switchon_executor(toaster_292)']
Time info:
Time consume: 123 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 21
goal generate times: 7
goal correct times: 0

Task complete rate:
1
Scene_id: 0
##############################
