############################################################
When the sub-task is: 1. Prepare a bowl of water and put it on the table in the home office.
A successful representation:
 
def is_in_home_office(table: item):
    # Function to check if a table is in the home office
    symbol is_home_office = exists room: item : is_home_office(room) and inside(table, room)
    return is_home_office

behavior fill_bowl_with_water(bowl: item):
    body:
        achieve has_water(bowl)

behavior place_on_table(bowl: item, table: item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to be filled with water and placed
        
        bind table: item where:
            is_table(table) and is_in_home_office(table)
        # Select a table that is in the home office
        
        fill_bowl_with_water(bowl)
        
        place_on_table(bowl, table)

############################################################
When the sub-task is: 2. Find the cat and put it on the table.
A successful representation:
 
behavior pick_up_cat(cat:item, table:item):
    body:
        achieve on(cat, table)
        # Place the cat on the table

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and id[cat]==2055
        # Select the cat with ID 2055
        bind table: item where:
            is_table(table) and id[table]==355
        # Select the table with ID 355
        pick_up_cat(cat, table)

############################################################
When the sub-task is: 1. Identify the location of all the bowls and plates.
A successful representation:
 
behavior identify_location(item:item):
    body:
        observe(item, "Determine the location of the item")

behavior __goal__():
    body:
        foreach item: item:
            if is_bowl(item) or is_plate(item) and not visited(item):
                identify_location(item)

############################################################
When the sub-task is: 2. Load the bowls and plates into the dishwasher.
A successful representation:
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher]==1001
        bind bowl_2071: item where:
            is_bowl(bowl_2071) and id[bowl_2071]==2071
        bind bowl_2072: item where:
            is_bowl(bowl_2072) and id[bowl_2072]==2072
        load_dishwasher(bowl_2071, dishwasher)
        load_dishwasher(bowl_2072, dishwasher)

############################################################
When the sub-task is: 3. Run the dishwasher to wash the bowls and plates.
A successful representation:
 
behavior run_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Ensure the dishwasher door is closed
        achieve plugged(dishwasher) # Ensure the dishwasher is plugged
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher]==1001
        # Select the dishwasher with ID 1001
        run_dishwasher(dishwasher)
        # Run the dishwasher to wash the bowls and plates

############################################################
When the sub-task is: Clean the bathroom sink directly.
A successful representation:
 
behavior clean_sink(sink:item):
    body:
        achieve clean(sink)
        # Ensure the sink is clean

behavior __goal__():
    body:
        bind sink_42: item where:
            id[sink_42]==42 and is_sink(sink_42)
        # Select sink with ID 42
        assert dirty(sink_42)
        # Confirm the sink is dirty before cleaning
        clean_sink(sink_42)

############################################################
When the sub-task is: Cut the chicken into pieces and put them back into the fridge.
A successful representation:
 
behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken)
        # Ensure the chicken is cut into pieces

behavior store_chicken_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge)
        # Place the chicken pieces inside the fridge

behavior close_fridge(fridge:item):
    body:
        achieve closed(fridge)
        # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item to be cut and stored
        
        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge to store the chicken pieces
        
        cut_chicken(chicken)
        store_chicken_in_fridge(chicken, fridge)
        close_fridge(fridge)

############################################################
When the sub-task is: 1. Identify all the rooms in the environment.
A successful representation:
 
behavior identify_rooms(room:item):
    body:
        observe(room, "Identify the location and presence of the room")
        
behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_kitchen(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room) and not visited(room):
                identify_rooms(room)

############################################################
When the sub-task is: 2. Check if the lights in each room are on.
A successful representation:
 
def has_light_on(room:item):
    # Function to check if there is any light on in a specified room
    symbol light_on=exists light: item : is_light(light) and is_on(light) and inside(light, room)
    return light_on

behavior check_lights_in_room(room:item):
    body:
        if not has_light_on(room):
            # If no light is on in the room, observe the room to check light states
            observe(room, "Check if there is any light on in the room")

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):
                # Check lights in each room
                check_lights_in_room(room)

############################################################
When the sub-task is: 3. Turn on a light in any room where no lights are currently on.
A successful representation:
 
def has_light_off(room:item):
    # Function to check if there is a light in the room that is off
    symbol light_off=exists light: item : is_light(light) and inside(light, room) and is_off(light)
    return light_off

behavior turn_on_light(light:item):
    body:
        achieve is_on(light)
        # Turn on the light

behavior __goal__():
    body:
        foreach room: item:
            # Iterate through each room to find one with a light that is off
            if has_light_off(room):
                # If a room with a light off is found, proceed to handle it
                bind light: item where:
                    is_light(light) and inside(light, room) and is_off(light)
                # Select the light in the room that is off
                turn_on_light(light)
                # Execute the behavior to turn on the light

############################################################
When the sub-task is: 1. Place the bowls and plates in the dishwasher and start the washing cycle.
A successful representation:
 
behavior load_dishwasher(o: item, dishwasher: item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher: item):
    body:
        achieve closed(dishwasher) # Ensure the dishwasher door is closed
        achieve is_on(dishwasher) # Start the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher in the scenario
        
        foreach item: item:
            if is_bowl(item) or is_plate(item):
                load_dishwasher(item, dishwasher)
                # Load all bowls and plates into the dishwasher

        start_dishwasher(dishwasher)
        # Start the dishwasher to wash the bowls and plates

############################################################
When the sub-task is: 2. Wash the forks by hand.
A successful representation:
 
behavior wash_forks_by_hand(fork:item):
    body:
        achieve clean(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork) and not clean(fork):
                wash_forks_by_hand(fork)
 
############################################################
When the sub-task is: Open the windows in the bathroom.
A successful representation:
 
behavior open_bathroom_window(window:item, bath:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        bind window: item where:
            is_window(window) and inside(window, bathroom)
        open_bathroom_window(window, bathroom)

############################################################
When the sub-task is: 1. Boil the vegetables in a pot.  
A successful representation:
 
behavior boil_vegetables(vegetables: item, pot: item, stove: item):
    body:
        achieve inside(vegetables, pot) 
        # Ensure the vegetables are inside the pot
        
        achieve has_water(pot)
        # Ensure the pot has water
        
        achieve inside(pot, stove)
        achieve is_on(stove)
        # Ensure the pot is on the stove and the stove is turned on for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling the vegetables

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to be boiled

        bind stove: item where:
            is_stove(stove)
        # Select a stove for boiling

        boil_vegetables(vegetables, pot, stove)
        # Execute the boiling behavior with the selected items

############################################################
When the sub-task is: 2. Store the entire pot in the fridge.
A successful representation:

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve inside(pot, fridge)

behavior close_fridge(fridge:item):
    body:
        achieve closed(fridge)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        store_pot_in_fridge(pot, fridge)
        close_fridge(fridge)

############################################################
When the sub-task is: 1. Find the table in the dining room.
A successful representation:

def is_in_dining_room(table: item):
    # Function to check if a table is in the dining room
    symbol is_dining_room_table=exists room: item : is_dining_room(room) and inside(table, room)
    return is_dining_room_table

behavior identify_table_in_dining_room(table: item):
    body:
        observe(table, "Identify the table in the dining room")

behavior __goal__():
    body:
        if exists table: item : is_table(table) and is_in_dining_room(table):
            # If we already know the table is in the dining room based on available information
            bind table: item where:
                is_table(table) and is_in_dining_room(table)
            achieve close_char(char, table)

        else:
            # Check all tables in the scene that have not been visited to find the one in the dining room
            foreach table: item:
                if is_table(table) and not visited(table):
                    identify_table_in_dining_room(table)

############################################################
When the sub-task is: 2. Place the milk, turkey, egg, fish, and chicken on the table.
A successful representation:
 
behavior place_on_table(item:item, table:item):
    body:
        achieve on(item, table)
        # Ensure the item is placed on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table]==226
        # Select the table with ID 226 in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select milk item

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey item

        bind egg: item where:
            is_food_egg(egg)
        # Select egg item

        bind fish: item where:
            is_food_fish(fish)
        # Select fish item

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken item
        
        place_on_table(milk, table)
        place_on_table(turkey, table)
        place_on_table(egg, table)
        place_on_table(fish, table)
        place_on_table(chicken, table)

############################################################
When the sub-task is: 1. Find the CD player.
A successful representation:
 
behavior find_cd_player(cd_player:item):
    body:
        observe(cd_player, "Locate the CD player")

behavior __goal__():
    body:
        if exists cd_player: item : is_cd_player(cd_player):
            # If we already know the CD players location based on available information
            bind cd_player: item where:
                is_cd_player(cd_player)
            achieve close_char(char, cd_player)

        else:
            # Check all items categorized as CD players that have not been visited
            foreach cd_player: item:
                if is_cd_player(cd_player) and not visited(cd_player):
                    find_cd_player(cd_player)

############################################################
When the sub-task is: 2. Insert the CD into the CD player.
A successful representation:
 
behavior insert_cd_into_cd_player(cd:item, cd_player:item):
    body:
        achieve inside(cd, cd_player)
        # Insert the CD into the CD player

behavior __goal__():
    body:
        bind cd: item where:
            is_cd(cd)
        # Select a CD to insert into the CD player
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind tvstand: item where:
            is_tvstand(tvstand) and inside(tvstand, dining_room)
        # Select the TV stand inside the dining room

        bind cd_player: item where:
            is_cd_player(cd_player) and on(cd_player, tvstand)
        # Select the CD player on the TV stand

        insert_cd_into_cd_player(cd, cd_player)

############################################################
When the sub-task is: 3. Play the music using the CD player.
A successful representation:
 
behavior turn_on_cd_player(cd_player:item):
    body:
        achieve is_on(cd_player)
        # Turn on the CD player to play music

behavior play_music(cd_player:item, cd:item):
    body:
        achieve inside(cd, cd_player)
        # Ensure the CD is inside the player

behavior __goal__():
    body:
        bind cd_player: item where:
            is_cd_player(cd_player) and id[cd_player]==2060
        # Select the CD player with ID 2060

        bind cd: item where:
            is_cd(cd) and inside(cd, cd_player)
        # Select the CD that is inside the CD player

        turn_on_cd_player(cd_player) # Turn on the CD player
        play_music(cd_player, cd) # Play the music using the CD player

############################################################
When the sub-task is: Slice the bread and toast it.
A successful representation:

behavior slice_bread(bread:item):
    body:
        achieve cut(bread)
        # Ensure the bread is sliced

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        achieve is_on(toaster)
        # Ensure the bread is inside the toaster and the toaster is turned on

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select a bread item to slice and toast

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster for toasting the bread

        slice_bread(bread)
        toast_bread(bread, toaster)

############################################################
When the sub-task is: 1. Put the milk and egg on one of the tables in the dining room.
A successful representation:
 
behavior place_on_table(milk:item, egg:item, table:item):
    body:
        achieve on(milk, table)
        achieve on(egg, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select one of the tables in the dining room

        place_on_table(milk, egg, table)

############################################################
When the sub-task is: 2. Throw all the items in the fridge into the trashcan.
A successful representation:
 
behavior throw_items_in_trash(item:item, trashcan:item):
    body:
        achieve inside(item, trashcan)

behavior close_the_fridge_door(fridge:item):
    body:
        achieve closed(fridge)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==289
        # Select fridge with ID 289

        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select a trashcan

        foreach item: item:
            if inside(item, fridge):
                # Throw each item inside the fridge into the trashcan
                throw_items_in_trash(item, trashcan)

        close_the_fridge_door(fridge)
        # Close the fridge after throwing its contents in the trashcan

############################################################
When the sub-task is: 3. Put the milk and egg back in the fridge.
A successful representation:
 
behavior place_items_in_fridge(item:item, fridge:item):
    body:
        achieve inside(item, fridge)
        # Ensure the item is placed inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve closed(fridge)
        # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Bind the milk item

        bind egg: item where:
            is_food_egg(egg)
        # Bind the egg item

        bind fridge: item where:
            is_fridge(fridge)
        # Bind the fridge item

        place_items_in_fridge(milk, fridge)
        place_items_in_fridge(egg, fridge)
        close_the_fridge_door(fridge)

############################################################
When the sub-task is: 1. Find and open the dishwasher.
A successful representation:
 
behavior find_dishwasher(dishwasher:item):
    body:
        observe(dishwasher, "Locate the dishwasher and check if it can be opened")

behavior __goal__():
    body:
        foreach dishwasher: item:
            if is_dishwasher(dishwasher) and not visited(dishwasher):
                find_dishwasher(dishwasher)

############################################################
When the sub-task is: 2. Put cleaning solution in the dishwasher.
A successful representation:
 
behavior put_cleaning_solution(dishwasher:item, cleaning_solution:item):
    body:
        achieve inside(cleaning_solution, dishwasher)
        # Place the cleaning solution inside the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher]==1001
        # Select the dishwasher with ID 1001

        bind cleaning_solution: item where:
            is_cleaning_solution(cleaning_solution) and id[cleaning_solution]==2073
        # Select the cleaning solution with ID 2073

        put_cleaning_solution(dishwasher, cleaning_solution)
        # Execute the behavior to put the cleaning solution in the dishwasher

############################################################
When the sub-task is: 3. Place the bowls and plates in the dishwasher.
A successful representation:
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher]==1001
        # Select the dishwasher with ID 1001

        foreach o: item:
            if is_bowl(o) or is_plate(o):
                # Load all bowls and plates into the dishwasher
                load_dishwasher(o, dishwasher)

############################################################
When the sub-task is: 4. Start the dishwasher to wash the bowls and plates.
A successful representation:
 
behavior run_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Ensure the dishwasher door is closed
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher]==1001
        # Select the dishwasher with ID 1001
        run_dishwasher(dishwasher)
        # Run the dishwasher to wash the bowls and plates

############################################################
When the sub-task is: Wipe the toilet with toilet paper, and then throw it into the toilet.
A successful representation:
 
behavior wipe_toilet(toilet:item, toilet_paper:item):
    body:
        achieve_once inhand(toilet_paper)
        wipe(toilet)
        # Use toilet paper to wipe the toilet

behavior throw_in_toilet(toilet_paper:item, toilet:item):
    body:
        achieve inside(toilet_paper, toilet)
        # Throw toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select the toilet
        
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select the toilet paper

        wipe_toilet(toilet, toilet_paper)
        throw_in_toilet(toilet_paper, toilet)

############################################################
When the sub-task is: 1. Find the book and put it on the table in the home office.  
A successful representation:
 
def is_in_home_office(table: item):
    # Function to check if a table is in the home office
    symbol is_home_office = exists room: item : is_home_office(room) and inside(table, room)
    return is_home_office

behavior find_book_and_place_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        
behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book that needs to be placed

        bind table: item where:
            is_table(table) and is_in_home_office(table)
        # Select a table in the home office

        find_book_and_place_on_table(book, table)

############################################################
When the sub-task is: 2. Turn on the light in the home office.
A successful representation:
 
behavior turn_on_light_in_home_office(light:item):
    body:
        achieve is_on(light)
        # Ensure the light is turned on

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office
        
        bind light: item where:
            is_light(light) and inside(light, home_office)
        # Select the light inside the home office

        turn_on_light_in_home_office(light)
 
############################################################
When the sub-task is: Wash your cat in a sink.
A successful representation:
 
behavior prepare_sink(cat:item, sink:item):
    body:
        achieve inside(cat, sink) 
        achieve has_water(sink)

behavior clean_cat(cat:item):
    body:
        wash(cat) 
        achieve clean(cat)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        prepare_sink(cat, sink) 
        clean_cat(cat) 

############################################################
When the sub-task is: Touch the remote control to turn on the TV.
A successful representation:

behavior touch_remote_control(remote_control:item):
    body:
        touch(remote_control)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control item

        touch_remote_control(remote_control)
        # Execute the behavior to touch the remote control to turn on the TV

############################################################
When the sub-task is: 1. Find the basket that contains clothes.
A successful representation:
 
behavior locate_basket_for_clothes(basket:item):
    body:
        observe(basket, "Is this the basket containing clothes")
        
behavior __goal__():
    body:
        foreach basket: item:
            if is_basket_for_clothes(basket) and not visited(basket):
                locate_basket_for_clothes(basket)

############################################################
When the sub-task is: 2. Put the clothes into the washing machine and wash them.
A successful representation:
 
behavior load_clothes_into_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)
        # Ensure clothes are moved into the washing machine

behavior start_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine) # Close the washing machine door
        achieve is_on(washing_machine) # Turn on the washing machine

behavior __goal__():
    body:
        bind basket_for_clothes: item where:
            is_basket_for_clothes(basket_for_clothes) and id[basket_for_clothes]==2006
        # Select the basket containing the clothes
        
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine in the environment

        foreach clothes: item:
        # Load all clothes from the basket into the washing machine
            if is_clothes(clothes) and (inside(clothes, basket_for_clothes) or close(clothes, basket_for_clothes)):
                load_clothes_into_washing_machine(clothes, washing_machine)

        start_washing_machine(washing_machine) # Start the washing cycle

############################################################
When the sub-task is: Turn on the lights in the bathroom.
A successful representation:
behavior turn_on_bathroom_light(light:item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        bind light: item where:
            is_light(light) and inside(light, bathroom)
        turn_on_bathroom_light(light)
############################################################
When the sub-task is: 1. Locate the book.
A successful representation:
 
behavior locate_book(book:item):
    body:
        observe(book, "Locate the book")

behavior __goal__():
    body:
        foreach book: item:
            if is_book(book) and not visited(book):
                locate_book(book)

############################################################
When the sub-task is: 2. Place the book on the coffee table in the home office.
A successful representation:
 
def is_in_home_office(table: item):
    # Function to check if a table is in the home office
    symbol is_home_office = exists room: item : is_home_office(room) and inside(table, room)
    return is_home_office

behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the located book to be placed

        bind table: item where:
            is_table(table) and is_in_home_office(table)
        # Select a table that is in the home office

        place_book_on_table(book, table)

############################################################
When the sub-task is: 1. Hand wash the jacket.
A successful representation:
 
behavior find_and_wash_jacket(jacket:item, home_office:item, couch:item):
    body:
        # Ensure the jacket is grasped and handwashed
        achieve_once inhand(jacket)
        wash(jacket)

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket) and id[jacket]==2047

        bind home_office: item where:
            is_home_office(home_office) and id[home_office]==319

        bind couch: item where:
            is_couch(couch) and id[couch]==352
            
        if not (inside(jacket, home_office) and on(jacket, couch)):
            # Need to observe to confirm location of the jacket
            observe(couch, "Check if clothes_jacket_2047 is on the couch_352")
            observe(home_office, "Check if couch_352 is inside home_office_319")
        
        find_and_wash_jacket(jacket, home_office, couch)

############################################################
When the sub-task is: 2. Wash the jacket using the washing machine.
A successful representation:
 
behavior start_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine) # Ensure the washing machine door is closed
        achieve is_on(washing_machine) # Turn on the washing machine

behavior __goal__():
    body:
        bind clothes_jacket: item where:
            is_clothes_jacket(clothes_jacket) and id[clothes_jacket]==2047
        # Select the jacket with ID 2047

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine for washing the jacket

        achieve inside(clothes_jacket, washing_machine)
        # Move the jacket into the washing machine

        start_washing_machine(washing_machine)
        # Start the washing machine to wash the jacket

############################################################
When the sub-task is: 1. Find the sink and shower the cat there.
A successful representation:
 
behavior find_shower_and_cat(sink:item, cat:item):
    body:
        achieve inside(cat, sink)
        # Ensure the cat is inside the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select the sink

        bind cat: item where:
            is_cat(cat) and id[cat]==2055
        # Select the cat with ID 2055

        find_shower_and_cat(sink, cat)

############################################################
When the sub-task is: 2. Use a towel to dry the cat.
A successful representation:
 
behavior dry_cat_with_towel(cat: item, towel: item):
    body:
        achieve_once inhand(towel)
        # Temporarily hold the towel to dry the cat
        achieve close_char(char, cat)
        wipe(cat)
        # Wipe the cat dry with the towel

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and id[cat] == 2055
        # Select the cat with ID 2055

        bind towel: item where:
            is_towel(towel)
        # Select a towel

        dry_cat_with_towel(cat, towel)

############################################################
When the sub-task is: 1. Find a cup and fill it with water.
A successful representation:
 
behavior find_and_fill_cup_with_water(cup:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup to be filled with water
        
        find_and_fill_cup_with_water(cup)

############################################################
When the sub-task is: 2. Slice the kiwi and add it to the cup of water.
A successful representation:
 
behavior add_sliced_kiwi_to_cup(food_kiwi:item, cup:item):
    body:
        achieve inside(food_kiwi, cup)
        # Ensure the sliced kiwi is added to the cup of water

behavior __goal__():
    body:
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi) and cut(food_kiwi)
        # Select the sliced kiwi

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup with water

        add_sliced_kiwi_to_cup(food_kiwi, cup)

############################################################
When the sub-task is: 1. Find the basket that contains clothes.
A successful representation:
 
behavior locate_basket_for_clothes(basket:item):
    body:
        observe(basket, "Is this the basket containing clothes")
        
behavior __goal__():
    body:
        foreach basket: item:
            if is_basket_for_clothes(basket) and not visited(basket):
                locate_basket_for_clothes(basket)

############################################################
When the sub-task is: 2. Add soap to the washing machine.
A successful representation:
 
behavior add_soap_to_washing_machine(soap:item, washing_machine:item):
    body:
        achieve inside(soap, washing_machine)
        # Ensure soap is added inside the washing machine

behavior __goal__():
    body:
        bind soap: item where:
            is_soap(soap) and id[soap]==2053
        # Select the soap with ID 2053
        
        bind washing_machine: item where:
            is_washing_machine(washing_machine) and id[washing_machine]==2007
        # Select the washing machine with ID 2007

        add_soap_to_washing_machine(soap, washing_machine)

############################################################
When the sub-task is: 3. Put the clothes from the basket into the washing machine and run it.
A successful representation:
behavior load_clothes_into_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)
        # Ensure clothes are placed inside the washing machine

behavior start_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine) # Ensure the washing machine door is closed
        achieve is_on(washing_machine) # Turn on the washing machine

behavior __goal__():
    body:
        bind basket_for_clothes: item where:
            is_basket_for_clothes(basket_for_clothes) and id[basket_for_clothes]==2006
        # Select the basket with clothes
        
        bind washing_machine: item where:
            is_washing_machine(washing_machine) and id[washing_machine]==2007
        # Select the washing machine with ID 2007

        foreach clothes: item:
        # Load all clothes from the basket into the washing machine
            if is_clothes(clothes) and (inside(clothes, basket_for_clothes) or close(clothes, basket_for_clothes)):
                load_clothes_into_washing_machine(clothes, washing_machine)

        start_washing_machine(washing_machine) # Start the washing cycle
############################################################
When the sub-task is: 1. Find the sink in the bathroom.
A successful representation:
 
behavior find_sink_in_bathroom(sink:item, bathroom:item):
    body:
        achieve inside(sink, bathroom)
        # Verify the sink is inside the bathroom

behavior observe_unvisited_sink(sink:item):
    body:
        observe(sink, "Is this sink inside the bathroom")

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        if exists sink: item : is_sink(sink) and inside(sink, bathroom):
            # If a sinks location in the bathroom is already known
            bind sink: item where:
                is_sink(sink) and inside(sink, bathroom)
            achieve close_char(char, sink)

        else:
            # Check all sinks in the scene that have not been visited
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe_unvisited_sink(sink)

############################################################
When the sub-task is: 2. Fill the sink with water and add soap to create soapy water.
A successful representation:
 
def has_faucet(sink:item):
    # Determine whether the sink has a faucet nearby
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

def is_soap_nearby(sink:item):
    # Check if soap is nearby the sink area
    symbol soap_near=exists soap:item: is_soap(soap) and close(soap,sink)
    return soap_near

behavior fill_sink_with_water_and_soap(sink:item):
    body:
        achieve has_water(sink) # Fill the sink with water
        if is_soap_nearby(sink):
            bind soap: item where:
                is_soap(soap) and close(soap,sink)
            achieve inside(soap, sink) # Add soap into the sink to create soapy water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select the sink with ID 42 which was found
        if not has_water(sink):
            # If the sink does not currently have water, fill it
            fill_sink_with_water_and_soap(sink)

############################################################
When the sub-task is: 1. Find milk and pour it into a cup.
A successful representation:
 
behavior find_and_fill_milk(milk:item, cup:item):
    body:
        achieve inside(milk, cup)
        # Ensure the milk is inside the cup

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item

        bind cup: item where:
            is_cup(cup)
        # Select a cup to pour milk into

        find_and_fill_milk(milk, cup)

############################################################
When the sub-task is: 2. Heat the cup of milk in the microwave.
A successful representation:
 
behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave) # Place the cup inside the microwave
        achieve is_on(microwave) # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Select the cup with ID 2063

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave in the environment

        heat_milk_in_microwave(cup, microwave)

############################################################
When the sub-task is: 1. Identify all the windows in the house.
A successful representation:
 
behavior identify_windows(window:item):
    body:
        observe(window, "Identify the window in the house")
        
behavior __goal__():
    body:
        foreach window: item:
            if is_window(window) and not visited(window):
                identify_windows(window)

############################################################
When the sub-task is: 2. Wipe each window with a towel.
A successful representation:
 
behavior wipe_window(window:item, towel:item):
    body:
        achieve_once inhand(towel)
        # Temporarily hold the towel to wipe the window
        wipe(window)
        # Wipe the window

behavior __goal__():
    body:
        foreach window: item:
            if is_window(window) and not clean(window):
                bind towel: item where:
                    is_towel(towel)
                wipe_window(window, towel)

############################################################
When the sub-task is: Turn on the lights in the bedroom. Then turn on the lights in the bathroom.
A successful representation:
behavior turn_on_bedroom_light(light:item):
    body:
        achieve is_on(light)

behavior turn_on_bathroom_light(light:item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        bind light_bedroom: item where:
            is_light(light_bedroom) and inside(light_bedroom, bedroom)
        # Turn on the bedroom light
        turn_on_bedroom_light(light_bedroom)

        bind bathroom: item where:
            is_bathroom(bathroom)
        bind light_bathroom: item where:
            is_light(light_bathroom) and inside(light_bathroom, bathroom)
        # Turn on the bathroom light
        turn_on_bathroom_light(light_bathroom)
