[
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Prepare a bowl of water and put it on the table in the home office.",
        "cdl": " \ndef is_in_home_office(table: item):\n    # Function to check if a table is in the home office\n    symbol is_home_office = exists room: item : is_home_office(room) and inside(table, room)\n    return is_home_office\n\nbehavior fill_bowl_with_water(bowl: item):\n    body:\n        achieve has_water(bowl)\n\nbehavior place_on_table(bowl: item, table: item):\n    body:\n        achieve on(bowl, table)\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl)\n        # Select a bowl to be filled with water and placed\n        \n        bind table: item where:\n            is_table(table) and is_in_home_office(table)\n        # Select a table that is in the home office\n        \n        fill_bowl_with_water(bowl)\n        \n        place_on_table(bowl, table)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Find the cat and put it on the table.",
        "cdl": " \nbehavior pick_up_cat(cat:item, table:item):\n    body:\n        achieve on(cat, table)\n        # Place the cat on the table\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat) and id[cat]==2055\n        # Select the cat with ID 2055\n        bind table: item where:\n            is_table(table) and id[table]==355\n        # Select the table with ID 355\n        pick_up_cat(cat, table)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Identify the location of all the bowls and plates.",
        "cdl": " \nbehavior identify_location(item:item):\n    body:\n        observe(item, \"Determine the location of the item\")\n\nbehavior __goal__():\n    body:\n        foreach item: item:\n            if is_bowl(item) or is_plate(item) and not visited(item):\n                identify_location(item)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Load the bowls and plates into the dishwasher.",
        "cdl": " \nbehavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher) and id[dishwasher]==1001\n        bind bowl_2071: item where:\n            is_bowl(bowl_2071) and id[bowl_2071]==2071\n        bind bowl_2072: item where:\n            is_bowl(bowl_2072) and id[bowl_2072]==2072\n        load_dishwasher(bowl_2071, dishwasher)\n        load_dishwasher(bowl_2072, dishwasher)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "3. Run the dishwasher to wash the bowls and plates.",
        "cdl": " \nbehavior run_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher) # Ensure the dishwasher door is closed\n        achieve plugged(dishwasher) # Ensure the dishwasher is plugged\n        achieve is_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher) and id[dishwasher]==1001\n        # Select the dishwasher with ID 1001\n        run_dishwasher(dishwasher)\n        # Run the dishwasher to wash the bowls and plates\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Clean the bathroom sink directly.",
        "cdl": " \nbehavior clean_sink(sink:item):\n    body:\n        achieve clean(sink)\n        # Ensure the sink is clean\n\nbehavior __goal__():\n    body:\n        bind sink_42: item where:\n            id[sink_42]==42 and is_sink(sink_42)\n        # Select sink with ID 42\n        assert dirty(sink_42)\n        # Confirm the sink is dirty before cleaning\n        clean_sink(sink_42)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces and put them back into the fridge.",
        "cdl": " \nbehavior cut_chicken(chicken:item):\n    body:\n        achieve cut(chicken)\n        # Ensure the chicken is cut into pieces\n\nbehavior store_chicken_in_fridge(chicken:item, fridge:item):\n    body:\n        achieve inside(chicken, fridge)\n        # Place the chicken pieces inside the fridge\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve closed(fridge)\n        # Ensure the fridge door is closed\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken item to be cut and stored\n        \n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select a fridge to store the chicken pieces\n        \n        cut_chicken(chicken)\n        store_chicken_in_fridge(chicken, fridge)\n        close_fridge(fridge)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all the rooms in the environment.",
        "cdl": " \nbehavior identify_rooms(room:item):\n    body:\n        observe(room, \"Identify the location and presence of the room\")\n        \nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_bathroom(room) or is_kitchen(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room) and not visited(room):\n                identify_rooms(room)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Check if the lights in each room are on.",
        "cdl": " \ndef has_light_on(room:item):\n    # Function to check if there is any light on in a specified room\n    symbol light_on=exists light: item : is_light(light) and is_on(light) and inside(light, room)\n    return light_on\n\nbehavior check_lights_in_room(room:item):\n    body:\n        if not has_light_on(room):\n            # If no light is on in the room, observe the room to check light states\n            observe(room, \"Check if there is any light on in the room\")\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):\n                # Check lights in each room\n                check_lights_in_room(room)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "3. Turn on a light in any room where no lights are currently on.",
        "cdl": " \ndef has_light_off(room:item):\n    # Function to check if there is a light in the room that is off\n    symbol light_off=exists light: item : is_light(light) and inside(light, room) and is_off(light)\n    return light_off\n\nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light)\n        # Turn on the light\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            # Iterate through each room to find one with a light that is off\n            if has_light_off(room):\n                # If a room with a light off is found, proceed to handle it\n                bind light: item where:\n                    is_light(light) and inside(light, room) and is_off(light)\n                # Select the light in the room that is off\n                turn_on_light(light)\n                # Execute the behavior to turn on the light\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Place the bowls and plates in the dishwasher and start the washing cycle.",
        "cdl": " \nbehavior load_dishwasher(o: item, dishwasher: item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher: item):\n    body:\n        achieve closed(dishwasher) # Ensure the dishwasher door is closed\n        achieve is_on(dishwasher) # Start the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher in the scenario\n        \n        foreach item: item:\n            if is_bowl(item) or is_plate(item):\n                load_dishwasher(item, dishwasher)\n                # Load all bowls and plates into the dishwasher\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher to wash the bowls and plates\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the forks by hand.",
        "cdl": " \nbehavior wash_forks_by_hand(fork:item):\n    body:\n        achieve clean(fork)\n\nbehavior __goal__():\n    body:\n        foreach fork: item:\n            if is_fork(fork) and not clean(fork):\n                wash_forks_by_hand(fork)\n "
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \nbehavior open_bathroom_window(window:item, bath:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        bind window: item where:\n            is_window(window) and inside(window, bathroom)\n        open_bathroom_window(window, bathroom)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "1. Boil the vegetables in a pot.  ",
        "cdl": " \nbehavior boil_vegetables(vegetables: item, pot: item, stove: item):\n    body:\n        achieve inside(vegetables, pot) \n        # Ensure the vegetables are inside the pot\n        \n        achieve has_water(pot)\n        # Ensure the pot has water\n        \n        achieve inside(pot, stove)\n        achieve is_on(stove)\n        # Ensure the pot is on the stove and the stove is turned on for boiling\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        # Select a pot for boiling the vegetables\n\n        bind vegetables: item where:\n            is_food_vegetable(vegetables)\n        # Select vegetables to be boiled\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove for boiling\n\n        boil_vegetables(vegetables, pot, stove)\n        # Execute the boiling behavior with the selected items\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "2. Store the entire pot in the fridge.",
        "cdl": "\nbehavior store_pot_in_fridge(pot:item, fridge:item):\n    body:\n        achieve inside(pot, fridge)\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve closed(fridge)\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        # Select the pot\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        store_pot_in_fridge(pot, fridge)\n        close_fridge(fridge)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find the table in the dining room.",
        "cdl": "\ndef is_in_dining_room(table: item):\n    # Function to check if a table is in the dining room\n    symbol is_dining_room_table=exists room: item : is_dining_room(room) and inside(table, room)\n    return is_dining_room_table\n\nbehavior identify_table_in_dining_room(table: item):\n    body:\n        observe(table, \"Identify the table in the dining room\")\n\nbehavior __goal__():\n    body:\n        if exists table: item : is_table(table) and is_in_dining_room(table):\n            # If we already know the table is in the dining room based on available information\n            bind table: item where:\n                is_table(table) and is_in_dining_room(table)\n            achieve close_char(char, table)\n\n        else:\n            # Check all tables in the scene that have not been visited to find the one in the dining room\n            foreach table: item:\n                if is_table(table) and not visited(table):\n                    identify_table_in_dining_room(table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place the milk, turkey, egg, fish, and chicken on the table.",
        "cdl": " \nbehavior place_on_table(item:item, table:item):\n    body:\n        achieve on(item, table)\n        # Ensure the item is placed on the table\n\nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table) and id[table]==226\n        # Select the table with ID 226 in the dining room\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk item\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select turkey item\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select egg item\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select fish item\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select chicken item\n        \n        place_on_table(milk, table)\n        place_on_table(turkey, table)\n        place_on_table(egg, table)\n        place_on_table(fish, table)\n        place_on_table(chicken, table)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "1. Find the CD player.",
        "cdl": " \nbehavior find_cd_player(cd_player:item):\n    body:\n        observe(cd_player, \"Locate the CD player\")\n\nbehavior __goal__():\n    body:\n        if exists cd_player: item : is_cd_player(cd_player):\n            # If we already know the CD players location based on available information\n            bind cd_player: item where:\n                is_cd_player(cd_player)\n            achieve close_char(char, cd_player)\n\n        else:\n            # Check all items categorized as CD players that have not been visited\n            foreach cd_player: item:\n                if is_cd_player(cd_player) and not visited(cd_player):\n                    find_cd_player(cd_player)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "2. Insert the CD into the CD player.",
        "cdl": " \nbehavior insert_cd_into_cd_player(cd:item, cd_player:item):\n    body:\n        achieve inside(cd, cd_player)\n        # Insert the CD into the CD player\n\nbehavior __goal__():\n    body:\n        bind cd: item where:\n            is_cd(cd)\n        # Select a CD to insert into the CD player\n        \n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Select the dining room\n\n        bind tvstand: item where:\n            is_tvstand(tvstand) and inside(tvstand, dining_room)\n        # Select the TV stand inside the dining room\n\n        bind cd_player: item where:\n            is_cd_player(cd_player) and on(cd_player, tvstand)\n        # Select the CD player on the TV stand\n\n        insert_cd_into_cd_player(cd, cd_player)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "3. Play the music using the CD player.",
        "cdl": " \nbehavior turn_on_cd_player(cd_player:item):\n    body:\n        achieve is_on(cd_player)\n        # Turn on the CD player to play music\n\nbehavior play_music(cd_player:item, cd:item):\n    body:\n        achieve inside(cd, cd_player)\n        # Ensure the CD is inside the player\n\nbehavior __goal__():\n    body:\n        bind cd_player: item where:\n            is_cd_player(cd_player) and id[cd_player]==2060\n        # Select the CD player with ID 2060\n\n        bind cd: item where:\n            is_cd(cd) and inside(cd, cd_player)\n        # Select the CD that is inside the CD player\n\n        turn_on_cd_player(cd_player) # Turn on the CD player\n        play_music(cd_player, cd) # Play the music using the CD player\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Slice the bread and toast it.",
        "cdl": "\nbehavior slice_bread(bread:item):\n    body:\n        achieve cut(bread)\n        # Ensure the bread is sliced\n\nbehavior toast_bread(bread:item, toaster:item):\n    body:\n        achieve inside(bread, toaster)\n        achieve is_on(toaster)\n        # Ensure the bread is inside the toaster and the toaster is turned on\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            is_food_bread(bread)\n        # Select a bread item to slice and toast\n\n        bind toaster: item where:\n            is_toaster(toaster)\n        # Select a toaster for toasting the bread\n\n        slice_bread(bread)\n        toast_bread(bread, toaster)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Put the milk and egg on one of the tables in the dining room.",
        "cdl": " \nbehavior place_on_table(milk:item, egg:item, table:item):\n    body:\n        achieve on(milk, table)\n        achieve on(egg, table)\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk item\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg item\n\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Select the dining room\n\n        bind table: item where:\n            is_table(table) and inside(table, dining_room)\n        # Select one of the tables in the dining room\n\n        place_on_table(milk, egg, table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items in the fridge into the trashcan.",
        "cdl": " \nbehavior throw_items_in_trash(item:item, trashcan:item):\n    body:\n        achieve inside(item, trashcan)\n\nbehavior close_the_fridge_door(fridge:item):\n    body:\n        achieve closed(fridge)\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge]==289\n        # Select fridge with ID 289\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select a trashcan\n\n        foreach item: item:\n            if inside(item, fridge):\n                # Throw each item inside the fridge into the trashcan\n                throw_items_in_trash(item, trashcan)\n\n        close_the_fridge_door(fridge)\n        # Close the fridge after throwing its contents in the trashcan\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put the milk and egg back in the fridge.",
        "cdl": " \nbehavior place_items_in_fridge(item:item, fridge:item):\n    body:\n        achieve inside(item, fridge)\n        # Ensure the item is placed inside the fridge\n\nbehavior close_the_fridge_door(fridge:item):\n    body:\n        achieve closed(fridge)\n        # Ensure the fridge door is closed\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Bind the milk item\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Bind the egg item\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Bind the fridge item\n\n        place_items_in_fridge(milk, fridge)\n        place_items_in_fridge(egg, fridge)\n        close_the_fridge_door(fridge)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Find and open the dishwasher.",
        "cdl": " \nbehavior find_dishwasher(dishwasher:item):\n    body:\n        observe(dishwasher, \"Locate the dishwasher and check if it can be opened\")\n\nbehavior __goal__():\n    body:\n        foreach dishwasher: item:\n            if is_dishwasher(dishwasher) and not visited(dishwasher):\n                find_dishwasher(dishwasher)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Put cleaning solution in the dishwasher.",
        "cdl": " \nbehavior put_cleaning_solution(dishwasher:item, cleaning_solution:item):\n    body:\n        achieve inside(cleaning_solution, dishwasher)\n        # Place the cleaning solution inside the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher) and id[dishwasher]==1001\n        # Select the dishwasher with ID 1001\n\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution) and id[cleaning_solution]==2073\n        # Select the cleaning solution with ID 2073\n\n        put_cleaning_solution(dishwasher, cleaning_solution)\n        # Execute the behavior to put the cleaning solution in the dishwasher\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "3. Place the bowls and plates in the dishwasher.",
        "cdl": " \nbehavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher) and id[dishwasher]==1001\n        # Select the dishwasher with ID 1001\n\n        foreach o: item:\n            if is_bowl(o) or is_plate(o):\n                # Load all bowls and plates into the dishwasher\n                load_dishwasher(o, dishwasher)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "4. Start the dishwasher to wash the bowls and plates.",
        "cdl": " \nbehavior run_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher) # Ensure the dishwasher door is closed\n        achieve is_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher) and id[dishwasher]==1001\n        # Select the dishwasher with ID 1001\n        run_dishwasher(dishwasher)\n        # Run the dishwasher to wash the bowls and plates\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Wipe the toilet with toilet paper, and then throw it into the toilet.",
        "cdl": " \nbehavior wipe_toilet(toilet:item, toilet_paper:item):\n    body:\n        achieve_once inhand(toilet_paper)\n        wipe(toilet)\n        # Use toilet paper to wipe the toilet\n\nbehavior throw_in_toilet(toilet_paper:item, toilet:item):\n    body:\n        achieve inside(toilet_paper, toilet)\n        # Throw toilet paper into the toilet\n\nbehavior __goal__():\n    body:\n        bind toilet: item where:\n            is_toilet(toilet)\n        # Select the toilet\n        \n        bind toilet_paper: item where:\n            is_toilet_paper(toilet_paper)\n        # Select the toilet paper\n\n        wipe_toilet(toilet, toilet_paper)\n        throw_in_toilet(toilet_paper, toilet)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and put it on the table in the home office.  ",
        "cdl": " \ndef is_in_home_office(table: item):\n    # Function to check if a table is in the home office\n    symbol is_home_office = exists room: item : is_home_office(room) and inside(table, room)\n    return is_home_office\n\nbehavior find_book_and_place_on_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n        \nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book that needs to be placed\n\n        bind table: item where:\n            is_table(table) and is_in_home_office(table)\n        # Select a table in the home office\n\n        find_book_and_place_on_table(book, table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Turn on the light in the home office.",
        "cdl": " \nbehavior turn_on_light_in_home_office(light:item):\n    body:\n        achieve is_on(light)\n        # Ensure the light is turned on\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n        \n        bind light: item where:\n            is_light(light) and inside(light, home_office)\n        # Select the light inside the home office\n\n        turn_on_light_in_home_office(light)\n "
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Wash your cat in a sink.",
        "cdl": " \nbehavior prepare_sink(cat:item, sink:item):\n    body:\n        achieve inside(cat, sink) \n        achieve has_water(sink)\n\nbehavior clean_cat(cat:item):\n    body:\n        wash(cat) \n        achieve clean(cat)\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n\n        prepare_sink(cat, sink) \n        clean_cat(cat) \n"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Touch the remote control to turn on the TV.",
        "cdl": "\nbehavior touch_remote_control(remote_control:item):\n    body:\n        touch(remote_control)\n\nbehavior __goal__():\n    body:\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        # Select the remote control item\n\n        touch_remote_control(remote_control)\n        # Execute the behavior to touch the remote control to turn on the TV\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket that contains clothes.",
        "cdl": " \nbehavior locate_basket_for_clothes(basket:item):\n    body:\n        observe(basket, \"Is this the basket containing clothes\")\n        \nbehavior __goal__():\n    body:\n        foreach basket: item:\n            if is_basket_for_clothes(basket) and not visited(basket):\n                locate_basket_for_clothes(basket)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Put the clothes into the washing machine and wash them.",
        "cdl": " \nbehavior load_clothes_into_washing_machine(clothes:item, washing_machine:item):\n    body:\n        achieve inside(clothes, washing_machine)\n        # Ensure clothes are moved into the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve closed(washing_machine) # Close the washing machine door\n        achieve is_on(washing_machine) # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind basket_for_clothes: item where:\n            is_basket_for_clothes(basket_for_clothes) and id[basket_for_clothes]==2006\n        # Select the basket containing the clothes\n        \n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine in the environment\n\n        foreach clothes: item:\n        # Load all clothes from the basket into the washing machine\n            if is_clothes(clothes) and (inside(clothes, basket_for_clothes) or close(clothes, basket_for_clothes)):\n                load_clothes_into_washing_machine(clothes, washing_machine)\n\n        start_washing_machine(washing_machine) # Start the washing cycle\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": "behavior turn_on_bathroom_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        bind light: item where:\n            is_light(light) and inside(light, bathroom)\n        turn_on_bathroom_light(light)"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the book.",
        "cdl": " \nbehavior locate_book(book:item):\n    body:\n        observe(book, \"Locate the book\")\n\nbehavior __goal__():\n    body:\n        foreach book: item:\n            if is_book(book) and not visited(book):\n                locate_book(book)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Place the book on the coffee table in the home office.",
        "cdl": " \ndef is_in_home_office(table: item):\n    # Function to check if a table is in the home office\n    symbol is_home_office = exists room: item : is_home_office(room) and inside(table, room)\n    return is_home_office\n\nbehavior place_book_on_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select the located book to be placed\n\n        bind table: item where:\n            is_table(table) and is_in_home_office(table)\n        # Select a table that is in the home office\n\n        place_book_on_table(book, table)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": " \nbehavior find_and_wash_jacket(jacket:item, home_office:item, couch:item):\n    body:\n        # Ensure the jacket is grasped and handwashed\n        achieve_once inhand(jacket)\n        wash(jacket)\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket) and id[jacket]==2047\n\n        bind home_office: item where:\n            is_home_office(home_office) and id[home_office]==319\n\n        bind couch: item where:\n            is_couch(couch) and id[couch]==352\n            \n        if not (inside(jacket, home_office) and on(jacket, couch)):\n            # Need to observe to confirm location of the jacket\n            observe(couch, \"Check if clothes_jacket_2047 is on the couch_352\")\n            observe(home_office, \"Check if couch_352 is inside home_office_319\")\n        \n        find_and_wash_jacket(jacket, home_office, couch)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the jacket using the washing machine.",
        "cdl": " \nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve closed(washing_machine) # Ensure the washing machine door is closed\n        achieve is_on(washing_machine) # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind clothes_jacket: item where:\n            is_clothes_jacket(clothes_jacket) and id[clothes_jacket]==2047\n        # Select the jacket with ID 2047\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine for washing the jacket\n\n        achieve inside(clothes_jacket, washing_machine)\n        # Move the jacket into the washing machine\n\n        start_washing_machine(washing_machine)\n        # Start the washing machine to wash the jacket\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Find the sink and shower the cat there.",
        "cdl": " \nbehavior find_shower_and_cat(sink:item, cat:item):\n    body:\n        achieve inside(cat, sink)\n        # Ensure the cat is inside the sink\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink)\n        # Select the sink\n\n        bind cat: item where:\n            is_cat(cat) and id[cat]==2055\n        # Select the cat with ID 2055\n\n        find_shower_and_cat(sink, cat)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Use a towel to dry the cat.",
        "cdl": " \nbehavior dry_cat_with_towel(cat: item, towel: item):\n    body:\n        achieve_once inhand(towel)\n        # Temporarily hold the towel to dry the cat\n        achieve close_char(char, cat)\n        wipe(cat)\n        # Wipe the cat dry with the towel\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat) and id[cat] == 2055\n        # Select the cat with ID 2055\n\n        bind towel: item where:\n            is_towel(towel)\n        # Select a towel\n\n        dry_cat_with_towel(cat, towel)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and fill it with water.",
        "cdl": " \nbehavior find_and_fill_cup_with_water(cup:item):\n    body:\n        achieve has_water(cup)\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup to be filled with water\n        \n        find_and_fill_cup_with_water(cup)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Slice the kiwi and add it to the cup of water.",
        "cdl": " \nbehavior add_sliced_kiwi_to_cup(food_kiwi:item, cup:item):\n    body:\n        achieve inside(food_kiwi, cup)\n        # Ensure the sliced kiwi is added to the cup of water\n\nbehavior __goal__():\n    body:\n        bind food_kiwi: item where:\n            is_food_kiwi(food_kiwi) and cut(food_kiwi)\n        # Select the sliced kiwi\n\n        bind cup: item where:\n            is_cup(cup) and has_water(cup)\n        # Select the cup with water\n\n        add_sliced_kiwi_to_cup(food_kiwi, cup)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket that contains clothes.",
        "cdl": " \nbehavior locate_basket_for_clothes(basket:item):\n    body:\n        observe(basket, \"Is this the basket containing clothes\")\n        \nbehavior __goal__():\n    body:\n        foreach basket: item:\n            if is_basket_for_clothes(basket) and not visited(basket):\n                locate_basket_for_clothes(basket)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add soap to the washing machine.",
        "cdl": " \nbehavior add_soap_to_washing_machine(soap:item, washing_machine:item):\n    body:\n        achieve inside(soap, washing_machine)\n        # Ensure soap is added inside the washing machine\n\nbehavior __goal__():\n    body:\n        bind soap: item where:\n            is_soap(soap) and id[soap]==2053\n        # Select the soap with ID 2053\n        \n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine]==2007\n        # Select the washing machine with ID 2007\n\n        add_soap_to_washing_machine(soap, washing_machine)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Put the clothes from the basket into the washing machine and run it.",
        "cdl": "behavior load_clothes_into_washing_machine(clothes:item, washing_machine:item):\n    body:\n        achieve inside(clothes, washing_machine)\n        # Ensure clothes are placed inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve closed(washing_machine) # Ensure the washing machine door is closed\n        achieve is_on(washing_machine) # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind basket_for_clothes: item where:\n            is_basket_for_clothes(basket_for_clothes) and id[basket_for_clothes]==2006\n        # Select the basket with clothes\n        \n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine]==2007\n        # Select the washing machine with ID 2007\n\n        foreach clothes: item:\n        # Load all clothes from the basket into the washing machine\n            if is_clothes(clothes) and (inside(clothes, basket_for_clothes) or close(clothes, basket_for_clothes)):\n                load_clothes_into_washing_machine(clothes, washing_machine)\n\n        start_washing_machine(washing_machine) # Start the washing cycle"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "1. Find the sink in the bathroom.",
        "cdl": " \nbehavior find_sink_in_bathroom(sink:item, bathroom:item):\n    body:\n        achieve inside(sink, bathroom)\n        # Verify the sink is inside the bathroom\n\nbehavior observe_unvisited_sink(sink:item):\n    body:\n        observe(sink, \"Is this sink inside the bathroom\")\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        if exists sink: item : is_sink(sink) and inside(sink, bathroom):\n            # If a sinks location in the bathroom is already known\n            bind sink: item where:\n                is_sink(sink) and inside(sink, bathroom)\n            achieve close_char(char, sink)\n\n        else:\n            # Check all sinks in the scene that have not been visited\n            foreach sink: item:\n                if is_sink(sink) and not visited(sink):\n                    observe_unvisited_sink(sink)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "2. Fill the sink with water and add soap to create soapy water.",
        "cdl": " \ndef has_faucet(sink:item):\n    # Determine whether the sink has a faucet nearby\n    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)\n    return has_faucet\n\ndef is_soap_nearby(sink:item):\n    # Check if soap is nearby the sink area\n    symbol soap_near=exists soap:item: is_soap(soap) and close(soap,sink)\n    return soap_near\n\nbehavior fill_sink_with_water_and_soap(sink:item):\n    body:\n        achieve has_water(sink) # Fill the sink with water\n        if is_soap_nearby(sink):\n            bind soap: item where:\n                is_soap(soap) and close(soap,sink)\n            achieve inside(soap, sink) # Add soap into the sink to create soapy water\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink) and id[sink]==42\n        # Select the sink with ID 42 which was found\n        if not has_water(sink):\n            # If the sink does not currently have water, fill it\n            fill_sink_with_water_and_soap(sink)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find milk and pour it into a cup.",
        "cdl": " \nbehavior find_and_fill_milk(milk:item, cup:item):\n    body:\n        achieve inside(milk, cup)\n        # Ensure the milk is inside the cup\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk item\n\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup to pour milk into\n\n        find_and_fill_milk(milk, cup)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk in the microwave.",
        "cdl": " \nbehavior heat_milk_in_microwave(cup:item, microwave:item):\n    body:\n        achieve inside(cup, microwave) # Place the cup inside the microwave\n        achieve is_on(microwave) # Turn on the microwave to heat the milk\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup]==2063\n        # Select the cup with ID 2063\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select a microwave in the environment\n\n        heat_milk_in_microwave(cup, microwave)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Identify all the windows in the house.",
        "cdl": " \nbehavior identify_windows(window:item):\n    body:\n        observe(window, \"Identify the window in the house\")\n        \nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window(window) and not visited(window):\n                identify_windows(window)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Wipe each window with a towel.",
        "cdl": " \nbehavior wipe_window(window:item, towel:item):\n    body:\n        achieve_once inhand(towel)\n        # Temporarily hold the towel to wipe the window\n        wipe(window)\n        # Wipe the window\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window(window) and not clean(window):\n                bind towel: item where:\n                    is_towel(towel)\n                wipe_window(window, towel)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bedroom. Then turn on the lights in the bathroom.",
        "cdl": "behavior turn_on_bedroom_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior turn_on_bathroom_light(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bedroom: item where:\n            is_bedroom(bedroom)\n        bind light_bedroom: item where:\n            is_light(light_bedroom) and inside(light_bedroom, bedroom)\n        # Turn on the bedroom light\n        turn_on_bedroom_light(light_bedroom)\n\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        bind light_bathroom: item where:\n            is_light(light_bathroom) and inside(light_bathroom, bathroom)\n        # Turn on the bathroom light\n        turn_on_bathroom_light(light_bathroom)"
    }
]