From agent.py
Reset goals: The sub-goals are: 
['Make chicken pasta, put it in a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_fryingpan_2154_around_kitchen_counter_122(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_sauce_2148_around_fridge_126(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(sauce,fridge_instance)
        else:
            exp(sauce,fridge_instance)
    eff:
        unknown[sauce]=False
        close[sauce,fridge_instance]=True
        close[fridge_instance,sauce]=True
    

behavior find_food_food_2021_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_plate_2152_around_cupboard_118(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_chicken_pasta(stove: item, frying_pan: item, chicken: item, pasta: item, sauce: item):
    body:
        assert is_food_chicken(chicken) and is_dry_pasta(pasta) and is_sauce(sauce)
        # Ensure the ingredients are correctly identified
        achieve inside(chicken, frying_pan)
        # Chicken is placed in the frying pan
        achieve is_on(stove)
        # Turn the stove on to cook
        achieve is_food_chicken(chicken) and inside(chicken, frying_pan)
        # Ensure chicken is cooked
        achieve inside(pasta, pot)
        # Place pasta in a pot on the stove
        achieve is_food_noodles(pasta) and inside(pasta, pot)
        # Ensure pasta is cooked
        achieve on(sauce, frying_pan)
        # Add sauce to the pan with chicken
        achieve inside(chicken, frying_pan) and inside(pasta, frying_pan)
        # Add pasta to the frying pan with chicken and sauce

behavior serve_on_plate(pasta_dish: item, plate: item):
    body:
        assert is_food_food(pasta_dish) and is_plate(plate)
        # Ensure these are the correct items
        achieve on(pasta_dish, plate)
        # Serve the pasta dish onto the plate

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select pasta
        bind sauce: item where:
            is_sauce(sauce)
        # Select sauce
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        cook_chicken_pasta(stove, frying_pan, chicken, pasta, sauce)
        # Cook the chicken pasta
        
        bind pasta_dish: item where:
            is_food_food(pasta_dish) and inside(pasta_dish, frying_pan)
        # Select the prepared chicken pasta dish
        
        serve_on_plate(pasta_dish, plate)
        # Serve the cooked pasta on a plate

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<stove: item>, Variable<frying_pan: item>, Variable<chicken: item>, Variable<pasta: item>, Variable<sauce: item>].
##############################
