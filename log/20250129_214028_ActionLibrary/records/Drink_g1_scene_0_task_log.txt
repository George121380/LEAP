From agent.py
Reset goals: The sub-goals are: 
['Get a cup and fill it with water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

behavior find_cup_2064_around_coffee_table_2068(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cup,coffee_table_instance)
        else:
            exp(cup,coffee_table_instance)
    eff:
        unknown[cup]=False
        close[cup,coffee_table_instance]=True
        close[coffee_table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior pick_cup(cup:item):
    body:
        achieve_once inhand(cup)
        # Temporarily hold the cup

behavior fill_with_water(cup:item, faucet:item):
    body:
        achieve_once is_on(faucet)
        # Turn on the faucet

        achieve has_water(cup)
        # Fill the cup with water

        achieve_once is_off(faucet)
        # Turn off the faucet after filling the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind sink: item where:
            is_sink(sink)

        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
                # Bind a faucet close to the sink if available

            pick_cup(cup)
            fill_with_water(cup, faucet)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior pick_cup(cup:item):
    body:
        achieve_once inhand(cup)
        # Temporarily hold the cup

behavior fill_with_water(cup:item, faucet:item):
    body:
        achieve_once is_on(faucet)
        # Turn on the faucet

        achieve has_water(cup)
        # Fill the cup with water

        achieve_once is_off(faucet)
        # Turn off the faucet after filling the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind sink: item where:
            is_sink(sink)

        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
                # Bind a faucet close to the sink if available

            pick_cup(cup)
            fill_with_water(cup, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(cup_2063, coffee_table_2068)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
