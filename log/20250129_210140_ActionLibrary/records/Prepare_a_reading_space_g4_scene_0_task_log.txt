From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the coffee table in the home office.', '2. Prepare a cup of hot milk and put it on the table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book_put_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table in the home office

        bind book: item where:
            is_book(book)
        # Select a book

        find_book_put_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_book_put_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table in the home office

        bind book: item where:
            is_book(book)
        # Select a book

        find_book_put_on_coffee_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_354)
Find book_2066. Find drawing_402. Find book_2067. Find drawing_403. Find drawing_404. Robot is inside the home_office_319. Robot is close to the floor_320. Robot is close to the bookshelf_354. Robot is close to the photoframe_430. Robot is no longer inside bathroom_1.
##############################
From agent.py
open_executor(bookshelf_354)
Find hanger_361. Find spectacles_2082. Find hanger_372. Find cat_2055. Find clothes_jacket_2047. Find chair_356. Find phone_2077. Find mouse_413. Find hanger_375. Find pencil_2001. Find pillow_405. Find hanger_367. Find pillow_406. Find drawing_241. Find remote_control_2052. Find hanger_359. Find dvd_player_2061. Find drawing_400. Find hanger_365. Find hanger_376. Find keyboard_415. Find hairbrush_2002. Find vacuum_cleaner_2070. Find drawing_242. Find headset_2062. Find drawing_243. Find mat_401. Find hanger_363. Find hanger_374. Find headset_2076. Find hanger_369. Robot is inside the home_office_319. Robot is close to the floor_320. Robot is close to the bookshelf_354. Robot is close to the photoframe_430. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(book_2066)
Robot is inside the home_office_319. Robot is close to the bookshelf_354. Robot is close to the book_2066. Robot is no longer close floor_320.Robot is no longer close photoframe_430.
##############################
From agent.py
grab_executor(book_2066)
Robot is inside the home_office_319. Robot is close to the bookshelf_354. Robot is close to the book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot is inside the home_office_319. Robot is close to the book_2066. Robot is close to the coffee_table_2068. Robot is no longer close bookshelf_354.
##############################
From agent.py
put_executor(book_2066, coffee_table_2068)
Robot is inside the home_office_319. Robot is close to the book_2066. Robot is close to the coffee_table_2068. book_2066 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_hot_milk_and_place_on_table(milk: item, tabletop: item):
    body:
        achieve clean(milk)
        # Ensure the milk is clean

        achieve close_char(char, milk)
        # Character is close to milk for heating

        achieve is_on(milk)
        # Heat the milk

        achieve off(char)
        # Ensure character has control to turn off heating appliance

        achieve on(milk, tabletop)
        # Place the cup of hot milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table
        
        prepare_hot_milk_and_place_on_table(milk, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function off not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation
behavior prepare_hot_milk_and_place_on_table(milk: item, tabletop: item):
    body:
        achieve clean(milk)
        # Ensure the milk is clean

        achieve close_char(char, milk)
        # Character is close to milk for heating

        achieve is_on(milk)
        # Heat the milk

        achieve has_a_free_hand(char)
        # Ensure character has a free hand after heating

        achieve on(milk, tabletop)
        # Place the cup of hot milk on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table
        
        prepare_hot_milk_and_place_on_table(milk, coffee_table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_milk_and_cup(obj:item):
    # Check if the item is both milk and a cup
    return is_milk(obj) and is_cup(obj)

behavior prepare_hot_milk(cup:item, stove:item, saucepan:item):
    body:
        achieve inside(cup, saucepan)
        # Pour the milk into the saucepan
        achieve inhand(saucepan)
        # Hold the saucepan to heat it

        achieve is_on(stove)
        # Turn on the stove
        achieve_once inhand(cup)
        # Hold the cup to pour the milk back
        achieve is_off(stove)
        # Turn off the stove after heating

behavior put_on_coffee_table(item:item, coffee_table:item):
    body:
        achieve on(item, coffee_table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table in the home office
        
        bind cup_of_milk: item where:
            is_milk_and_cup(cup_of_milk)
        # Find a cup to prepare hot milk
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove for heating
        
        bind saucepan: item where:
            is_pot(saucepan)
        # Select a saucepan to heat the milk
        
        prepare_hot_milk(cup_of_milk, stove, saucepan)
        put_on_coffee_table(cup_of_milk, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(milk:item, stove:item, cup:item):
    body:
        achieve plugged(stove) # Ensure the stove is plugged in
        achieve is_on(stove) # Turn on the stove
        achieve has_water(cup) # Add water to the cup for heating milk purpose
        
behavior put_on_table(item:item, table:item):
    body:
        achieve on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind table: item where:
            is_coffee_table(table) and inside(table, home_office)
        # Select the coffee table in the home office

        heat_milk(milk, stove, cup) # Heat the milk on the stove using the cup
        put_on_table(cup, table) # Put the cup of hot milk on the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#goal_representation
 
behavior heat_milk(milk:item, stove:item, cup:item):
    body:
        achieve plugged(stove) # Ensure the stove is plugged in
        achieve is_on(stove) # Turn on the stove
        achieve has_water(cup) # Add water to the cup for heating milk purpose

behavior put_on_table(item:item, table:item):
    body:
        achieve on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind table: item where:
            is_coffee_table(table) and exists home_office: item : is_home_office(home_office) and inside(table, home_office)
        # Select the coffee table in the home office

        heat_milk(milk, stove, cup) # Heat the milk on the stove using the cup
        put_on_table(cup, table) # Put the cup of hot milk on the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'home_office') at line 5743, column 47.
Expected one of: 
	* _NEWLINE
	* SEMICOLON
	* COMMA

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_table_226(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==226
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#goal_representation
 
behavior heat_milk(milk:item, stove:item, cup:item):
    body:
        achieve plugged(stove) # Ensure the stove is plugged in
        achieve is_on(stove) # Turn on the stove
        achieve_once inhand(milk)
        achieve inhand(cup)
        achieve has_water(cup) # Add water to the cup for heating milk purpose
        achieve in(cup, stove) # Place the cup on the stove
        achieve is_hot(milk) # Heat the milk

behavior put_on_table(item:item, table:item):
    body:
        achieve on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind table: item where:
            is_coffee_table(table) and exists home_office: item: is_home_office(home_office) and inside(table, home_office)
        # Select the coffee table in the home office

        heat_milk(milk, stove, cup) # Heat the milk on the stove using the cup
        put_on_table(cup, table) # Put the cup of hot milk on the coffee table

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. prepare a cup of hot milk and put it on the table." ?
Answer: Find the milk in the fridge, put it in a cup, put the cup in the microwave. Turn on the microwave. Finally, put the cup on the table in the home office.
Re-decompose: False

##############################
Error record: 'ActionLibrary' object has no attribute 'refineme'
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'grab_executor(book_2066)', 'walk_executor(coffee_table_2068)', 'put_executor(book_2066, coffee_table_2068)']
Time info:
Time consume: 130 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 4
goal correct times: 2

Task complete rate:
Keystate: k1 - Requires: 3 steps
Keystate: k2 - Requires: 16 steps
Keystate: k3 - Requires: 10 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
