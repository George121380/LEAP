From agent.py
Reset goals: The sub-goals are: 
['Boil the rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_54_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation

def has_rice(pot:item):
    # Function to check if there is rice in a specified pot
    symbol has_rice=exists o: item : is_food_rice(o) and inside(o, pot)
    return has_rice

def has_water_in_pot(pot:item):
    # Function to check if a pot has water in it
    symbol has_water=has_water(pot)
    return has_water

behavior boil_rice(pot:item, stove:item):
    body:
        achieve inside(stove, pot)
        achieve is_on(stove)
        # Ensure the stove is turned on while boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if has_rice(pot) and has_water_in_pot(pot):
            # If the pot has both rice and water, proceed to boil the rice
            achieve close_char(char, stove)
            boil_rice(pot, stove)
        else:
            # If the pot does not have rice or water, check to add them
            if not has_rice(pot):
                observe(pot, "Check if there is any rice in the pot")
            if not has_water_in_pot(pot):
                observe(pot, "Check if there is water in the pot")

#goal_representation_end

##############################
From agent.py->reset_goal

def has_rice(pot:item):
    # Function to check if there is rice in a specified pot
    symbol has_rice=exists o: item : is_food_rice(o) and inside(o, pot)
    return has_rice

def has_water_in_pot(pot:item):
    # Function to check if a pot has water in it
    symbol has_water=has_water(pot)
    return has_water

behavior boil_rice(pot:item, stove:item):
    body:
        achieve inside(stove, pot)
        achieve is_on(stove)
        # Ensure the stove is turned on while boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if has_rice(pot) and has_water_in_pot(pot):
            # If the pot has both rice and water, proceed to boil the rice
            achieve close_char(char, stove)
            boil_rice(pot, stove)
        else:
            # If the pot does not have rice or water, check to add them
            if not has_rice(pot):
                observe(pot, "Check if there is any rice in the pot")
            if not has_water_in_pot(pot):
                observe(pot, "Check if there is water in the pot")

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(pot_2093, cupboard_131)walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, Check if there is any rice in the pot)obs(pot_2093, Check if there is water in the pot)
##############################
From agent.py
walk_executor(cupboard_131)
Find pot_54. Find tray_142. Robot is inside dining_room_1. Robot is close cupboard_131. Robot is no longer inside home_office_161.
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. 
##############################
From agent.py
exp(pot_2093, cupboard_131)
Failed to find pot_2093 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)exp(pot_2093, pot_54)walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, Check if there is any rice in the pot)obs(pot_2093, Check if there is water in the pot)
##############################
From agent.py
walk_executor(pot_54)
Find food_butter_2018. Find dough_2021. Find food_onion_2026. Robot is inside dining_room_1. Robot is close oven_141. Robot is close pot_54. Robot is no longer close cupboard_131.
##############################
From agent.py
open_executor(pot_54)
Robot is inside dining_room_1. Robot is close oven_141. Robot is close pot_54. 
##############################
From agent.py
exp(pot_2093, pot_54)
Failed to find pot_2093 around pot_54. 
##############################
From agent.py-> find a plan in act()
obs(pot_54, Check if there is any rice in the pot)obs(pot_54, Check if there is water in the pot)
##############################
From agent.py
obs(pot_54, Check if there is any rice in the pot)
Get this information:  pot_54 is close to ceiling_33. pot_54 is close to wall_2. pot_54 is close to cupboard_130. pot_54 is close to kitchen_counter_132. pot_54 is close to sink_133. pot_54 is close to kitchen_counter_129. pot_54 is close to cupboard_131. pot_54 is close to wall_8. pot_54 is close to stovefan_139. pot_54 is close to oven_141. pot_54 is close to walllamp_46. pot_54 is close to tray_142. pot_54 is close to floor_16. pot_54 is close to knifeblock_52. pot_54 is close to floor_21. pot_54 is close to ceiling_28. pot_54 is close to character_219. pot_54 is on oven_141. pot_54 is inside dining_room_1. pot_54 is OPEN. pot_54 is CLEAN.
##############################
From agent.py
obs(pot_54, Check if there is water in the pot)
Get this information:  pot_54 is close to ceiling_33. pot_54 is close to wall_2. pot_54 is close to cupboard_130. pot_54 is close to kitchen_counter_132. pot_54 is close to sink_133. pot_54 is close to kitchen_counter_129. pot_54 is close to cupboard_131. pot_54 is close to wall_8. pot_54 is close to stovefan_139. pot_54 is close to oven_141. pot_54 is close to walllamp_46. pot_54 is close to tray_142. pot_54 is close to floor_16. pot_54 is close to knifeblock_52. pot_54 is close to floor_21. pot_54 is close to ceiling_28. pot_54 is close to character_219. pot_54 is on oven_141. pot_54 is inside dining_room_1. pot_54 is OPEN. pot_54 is CLEAN.
##############################
From agent.py
Human Instruction: You need to make sure there is rice and water in the pot before proceeding to boil the rice. Currently, it is unclear whether the pot contains rice or water. You should add rice and water to the pot if they are absent, then place the pot on the stove and ensure the stove is turned on for the boiling process.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_2093 around cupboard_131.
Action 4: Walk to pot_54.
Action 5: Open pot_54.
Action 6: look for pot_2093 around pot_54.
Action 7: Observe around pot_54 with the question of Check if there is any rice in the pot.
Action 8: Observe around pot_54 with the question of Check if there is water in the pot.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_rice_2067_around_kitchen_counter_132(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def contains_rice_or_water(pot:item):
    # Function to check if the pot contains rice or water
    symbol has_rice_water=exists content: item : (is_food_rice(content) or has_water(pot)) and inside(content, pot)
    return has_rice_water

behavior add_ingredients(pot:item):
    # Add rice and water to the pot if they are not present
    body:
        if not is_food_rice:
            symbol rice: item where:
                is_food_rice(rice) and not inside(rice, pot)
            achieve inside(rice, pot)
        
        if not has_water(pot):
            water(pot)

behavior start_boiling(pot:item, stove:item):
    # Start the boiling process on the stove
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        
        if not visited(pot):
            observe(pot, "Check if there is any rice or water in the pot")
        
        if not contains_rice_or_water(pot):
            add_ingredients(pot)
            
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        start_boiling(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5943, column 24.
Expected one of: 
	* EQUAL
Previous tokens: [Token('VARNAME', 'rice')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2005_around_kitchen_counter_132(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_rice_2067_around_kitchen_counter_128(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#goal_representation
 
def contains_rice_or_water(pot:item):
    # Function to check if the pot contains rice or water
    symbol has_rice_water=exists content: item : (is_food_rice(content) or has_water(pot)) and inside(content, pot)
    return has_rice_water

behavior add_ingredients(pot:item):
    # Add rice and water to the pot if they are not present
    body:
        if not exists content: item : is_food_rice(content) and inside(content, pot):
            bind rice: item where:
                is_food_rice(rice)
            achieve inside(rice, pot)
        
        if not has_water(pot):
            water(pot)

behavior start_boiling(pot:item, stove:item):
    # Start the boiling process on the stove
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        
        if not visited(pot):
            observe(pot, "Check if there is any rice or water in the pot")
        
        if not contains_rice_or_water(pot):
            add_ingredients(pot)
            
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        start_boiling(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'content') at line 5942, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_rice_2067_around_kitchen_counter_132(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_crayon_2030_around_bookshelf_188(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(crayon,bookshelf_instance)
        else:
            exp(crayon,bookshelf_instance)
    eff:
        unknown[crayon]=False
        close[crayon,bookshelf_instance]=True
        close[bookshelf_instance,crayon]=True
    

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#goal_representation
 
def contains_rice_or_water(pot:item):
    # Function to check if the pot contains rice or water
    symbol has_rice_water=exists content: item : (is_food_rice(content) or has_water(content)) and inside(content, pot)
    return has_rice_water

behavior add_ingredients(pot:item):
    # Add rice and water to the pot if they are not present
    body:
        if not exists content: item : is_food_rice(content) and inside(content, pot):
            bind rice: item where:
                is_food_rice(rice)
            achieve inside(rice, pot)
        
        if not has_water(pot):
            water(pot)

behavior start_boiling(pot:item, stove:item):
    # Start the boiling process on the stove
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        
        if not visited(pot):
            observe(pot, "Check if there is any rice or water in the pot")
        
        if not contains_rice_or_water(pot):
            add_ingredients(pot)
            
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        start_boiling(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_rice_2067_around_kitchen_counter_128(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_and_rice_in_pot(pot:item):
    # Function to check if there is rice and water in the specified pot
    symbol has_both=exists rice: item, water: item : is_food_rice(rice) and inside(rice, pot) and has_water(pot)
    return has_both

behavior fill_pot(pot:item):
    body:
        if not has_water_and_rice_in_pot(pot):
            if not exists rice: item : is_food_rice(rice) and inside(rice, pot):
                observe(pot, "Check if there is any rice in the pot")
                # Add rice to the pot if absent
            if not has_water(pot):
                observe(pot, "Check if there is water in the pot")
                # Fill the pot with water if absent

behavior start_boiling(pot:item, stove:item):
    body:
        achieve on(pot, stove)  # Place the pot on the stove
        achieve is_on(stove)  # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54  # Select the pot with ID 54
        bind stove: item where:
            is_stove(stove)
        fill_pot(pot)
        start_boiling(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'rice') at line 5924, column 27.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2067_around_kitchen_counter_128(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_dessert_2051_around_table_193(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_dessert,table_instance)
        else:
            exp(food_dessert,table_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,table_instance]=True
        close[table_instance,food_dessert]=True
    

#goal_representation
 
def has_water_and_rice_in_pot(pot:item):
    # Function to check if there is rice and water in the specified pot
    symbol has_both=exists rice: item : is_food_rice(rice) and inside(rice, pot) and has_water(pot)
    return has_both

behavior fill_pot(pot:item):
    body:
        if not has_water_and_rice_in_pot(pot):
            if not exists rice: item : is_food_rice(rice) and inside(rice, pot):
                observe(pot, "Check if there is any rice in the pot")
                # Add rice to the pot if absent
            if not has_water(pot):
                observe(pot, "Check if there is water in the pot")
                # Fill the pot with water if absent

behavior start_boiling(pot:item, stove:item):
    body:
        achieve on(pot, stove)  # Place the pot on the stove
        achieve is_on(stove)  # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54  # Select the pot with ID 54
        bind stove: item where:
            is_stove(stove)
        fill_pot(pot)
        start_boiling(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'rice') at line 5924, column 27.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_crayon_2020_around_bookshelf_372(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(crayon,bookshelf_instance)
        else:
            exp(crayon,bookshelf_instance)
    eff:
        unknown[crayon]=False
        close[crayon,bookshelf_instance]=True
        close[bookshelf_instance,crayon]=True
    

behavior find_food_rice_2067_around_kitchen_counter_128(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#goal_representation
 
def has_water_and_rice_in_pot(pot:item):
    # Function to check if there is rice and water in the specified pot
    symbol has_both=exists rice: item : is_food_rice(rice) and inside(rice, pot) and has_water(pot)
    return has_both

behavior fill_pot(pot:item):
    body:
        if not has_water_and_rice_in_pot(pot):
            if not exists rice: item : is_food_rice(rice) and inside(rice, pot):
                observe(pot, "Check if there is any rice in the pot")
                # Add rice to the pot if absent
            if not has_water(pot):
                observe(pot, "Check if there is water in the pot")
                # Fill the pot with water if absent

behavior start_boiling(pot:item, stove:item):
    body:
        achieve on(pot, stove)  # Place the pot on the stove
        achieve is_on(stove)  # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54  # Select the pot with ID 54
        bind stove: item where:
            is_stove(stove)
        fill_pot(pot)
        start_boiling(pot, stove)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil the rice in a pot." ?
Answer: Fill the pot with water. Put the rice in the pot. Put the pot on the stove and turn on the stove.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water and add the rice.', '2. Put the pot on the stove and turn on the stove to boil the rice.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_rice_2067_around_kitchen_counter_132(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_crayon_2020_around_table_193(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(crayon,table_instance)
        else:
            exp(crayon,table_instance)
    eff:
        unknown[crayon]=False
        close[crayon,table_instance]=True
        close[table_instance,crayon]=True
    

#exp_behavior_end

#goal_representation
 
def pot_has_water_or_rice(pot:item):
    # Function to check if the pot has water or rice inside
    symbol has_water_or_rice=exists o: item : (is_food_rice(o) or has_water(o)) and inside(o, pot)
    return has_water_or_rice

def is_stove_on(stove:item):
    # Function to check if the stove is on
    symbol stove_on=exists state: is_on(stove)
    return stove_on

behavior add_water(pot:item):
    body:
        achieve has_water(pot)

behavior add_rice(pot:item):
    body:
        # Assume the rice is in a manageable container to add to the pot
        achieve inside(minimum_rice_quantity, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Find a pot

        bind stove: item where:
            is_stove(stove)
        # Find a stove

        if not pot_has_water_or_rice(pot):
            # If the pot doesnt have water or rice, add them
            add_water(pot)
            add_rice(pot)

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

        if not is_stove_on(stove):
            turn_on_stove(stove)
        # Turn on the stove if its not already on

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('LPAR', '(') at line 5941, column 40.
Expected one of: 
	* LSQB
	* WHERE
	* COMMA
	* COLON
Previous tokens: [Token('BASIC_TYPENAME', 'is_on')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_rice_2067_around_kitchen_counter_132(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_crayon_2030_around_bookshelf_372(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(crayon,bookshelf_instance)
        else:
            exp(crayon,bookshelf_instance)
    eff:
        unknown[crayon]=False
        close[crayon,bookshelf_instance]=True
        close[bookshelf_instance,crayon]=True
    

#goal_representation
 
def pot_has_water_or_rice(pot:item):
    # Corrected function to check if the pot has water or rice inside
    symbol has_water_or_rice=exists o: item : is_food_rice(o) or (has_water(o) and inside(o, pot))
    return has_water_or_rice

behavior add_water(pot:item):
    body:
        achieve has_water(pot)

behavior add_rice(pot:item):
    body:
        achieve inside(minimum_rice_quantity, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Find a pot

        bind stove: item where:
            is_stove(stove)
        # Find a stove

        if not pot_has_water_or_rice(pot):
            # If the pot doesnt have water or rice, add them
            add_water(pot)
            add_rice(pot)

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

        if not is_stove_on(stove):
            turn_on_stove(stove)
        # Turn on the stove if its not already on

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: minimum_rice_quantity; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_54_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_rice_2067_around_kitchen_counter_132(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#goal_representation
 
def pot_has_water_or_rice(pot:item):
    # Corrected function to check if the pot has water or rice inside
    symbol has_water_or_rice=exists o: item : is_food_rice(o) or (has_water(o) and inside(o, pot))
    return has_water_or_rice

behavior add_water(pot:item):
    body:
        achieve has_water(pot)

behavior add_rice(pot:item, minimum_rice_quantity: item):
    body:
        achieve inside(minimum_rice_quantity, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Find a pot

        bind stove: item where:
            is_stove(stove)
        # Find a stove

        bind minimum_rice_quantity: item where:
            is_food_rice(minimum_rice_quantity)

        if not pot_has_water_or_rice(pot):
            # If the pot doesnt have water or rice, add them
            add_water(pot)
            add_rice(pot, minimum_rice_quantity)

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

        if not is_stove_on(stove):
            turn_on_stove(stove)
        # Turn on the stove if its not already on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_54_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_rice_2067_around_kitchen_counter_128(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation

def pot_for_boiling_rice(pot:item):
    # Determine if the pot is suitable for boiling rice, ie, its a pot and needs water and rice
    symbol requires_content=exists rice: item : is_food_rice(rice) and not inside(rice, pot)
    symbol requires_water=not has_water(pot)
    return requires_content and requires_water

behavior fill_pot_with_water(pot:item):
    body:
        water(pot)
        # Fill the pot with water

behavior add_rice_to_pot(pot:item, rice:item):
    body:
        achieve inside(rice, pot)
        # Place the rice in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and pot_for_boiling_rice(pot)
        # Select a suitable pot for boiling rice

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to add to the pot

        fill_pot_with_water(pot)
        add_rice_to_pot(pot, rice)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_rice_2067_around_kitchen_counter_132(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#goal_representation
 
def pot_for_boiling_rice(pot:item):
    # Determine if the pot is suitable for boiling rice, ie, its a pot and needs water and rice
    symbol requires_content=exists rice: item : is_food_rice(rice) and not inside(rice, pot)
    symbol requires_water=not has_water(pot)
    return requires_content and requires_water

behavior fill_pot_with_water(pot:item):
    body:
        is_sink(pot)
        # Fill the pot with water

behavior add_rice_to_pot(pot:item, rice:item):
    body:
        achieve inside(rice, pot)
        # Place the rice in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and pot_for_boiling_rice(pot)
        # Select a suitable pot for boiling rice

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice to add to the pot

        fill_pot_with_water(pot)
        add_rice_to_pot(pot, rice)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Expr statements are not allowed in the current mode: SymbolicExecutionMode.BEHAVIOR
##############################
