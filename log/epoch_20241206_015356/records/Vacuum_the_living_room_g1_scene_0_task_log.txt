From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2070_around_kitchen_counter_230(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(vacuum_cleaner,kitchen_counter_instance)
        else:
            exp(vacuum_cleaner,kitchen_counter_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,kitchen_counter_instance]=True
        close[kitchen_counter_instance,vacuum_cleaner]=True
    

behavior find_mat_173_around_coffee_table_2068(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(mat,coffee_table_instance)
        else:
            exp(mat,coffee_table_instance)
    eff:
        unknown[mat]=False
        close[mat,coffee_table_instance]=True
        close[coffee_table_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_vacuum_cleaner(vacuum_cleaner:item):
    body:
        if visited(vacuum_cleaner):
            achieve close_char(char, vacuum_cleaner)
        else:
            observe(vacuum_cleaner, "Locate the vacuum cleaner")
            achieve close_char(char, vacuum_cleaner)

behavior __goal__():
    body:
        bind floor: item where:
            is_floor(floor)
        # Select the floor to be vacuumed

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        locate_vacuum_cleaner(vacuum_cleaner)
        # Locate the vacuum cleaner

        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in

        achieve is_on(vacuum_cleaner)
        # Turn on the vacuum cleaner

        achieve clean(floor)
        # Vacuum the floor to clean it

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior locate_vacuum_cleaner(vacuum_cleaner:item):
    body:
        if visited(vacuum_cleaner):
            achieve close_char(char, vacuum_cleaner)
        else:
            observe(vacuum_cleaner, "Locate the vacuum cleaner")
            achieve close_char(char, vacuum_cleaner)

behavior __goal__():
    body:
        bind floor: item where:
            is_floor(floor)
        # Select the floor to be vacuumed

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        locate_vacuum_cleaner(vacuum_cleaner)
        # Locate the vacuum cleaner

        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in

        achieve is_on(vacuum_cleaner)
        # Turn on the vacuum cleaner

        achieve clean(floor)
        # Vacuum the floor to clean it

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(vacuum_cleaner_2070, kitchen_counter_230)walk_executor(vacuum_cleaner_2070)obs(vacuum_cleaner_2070, Locate the vacuum cleaner)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)walk_executor(floor_2)wash_executor(floor_2)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(vacuum_cleaner_2070, kitchen_counter_230)
Failed to find vacuum_cleaner_2070 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_392)exp(vacuum_cleaner_2070, closetdrawer_392)walk_executor(vacuum_cleaner_2070)obs(vacuum_cleaner_2070, Locate the vacuum cleaner)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)walk_executor(floor_2)wash_executor(floor_2)
##############################
From agent.py
walk_executor(closetdrawer_392)
Find hanger_361. Find hanger_372. Find hanger_363. Find hanger_374. Find hanger_375. Find hanger_367. Find hanger_359. Find hanger_369. Find hanger_365. Find hanger_376. Robot is inside home_office_319. Robot is close closetdrawer_392. Robot is close dresser_358. Robot is no longer inside dining_room_201.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
exp(vacuum_cleaner_2070, closetdrawer_392)
Find vacuum_cleaner_2070. 
##############################
From agent.py-> find a plan in act()
walk_executor(vacuum_cleaner_2070)obs(vacuum_cleaner_2070, Locate the vacuum cleaner)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)walk_executor(floor_2)wash_executor(floor_2)
##############################
From agent.py
walk_executor(vacuum_cleaner_2070)
Robot is inside home_office_319. Robot is close vacuum_cleaner_2070. Robot is no longer close closetdrawer_392.Robot is no longer close dresser_358.
##############################
From agent.py
obs(vacuum_cleaner_2070, Locate the vacuum cleaner)
Get this information:  vacuum_cleaner_2070 is inside home_office_319. vacuum_cleaner_2070 is close to couch_352. vacuum_cleaner_2070 is close to character_65. vacuum_cleaner_2070 is PLUGGED_OUT. vacuum_cleaner_2070 is CLEAN. vacuum_cleaner_2070 is OFF.
##############################
From agent.py
plugin_executor(vacuum_cleaner_2070)
Robot is inside home_office_319. Robot is close vacuum_cleaner_2070. 
##############################
From agent.py
switchon_executor(vacuum_cleaner_2070)
Robot is inside home_office_319. Robot is close vacuum_cleaner_2070. 
##############################
From agent.py
walk_executor(floor_2)
Robot is inside bathroom_1. Robot is close floor_2. Robot is no longer inside home_office_319.Robot is no longer close vacuum_cleaner_2070.
##############################
From agent.py
wash_executor(floor_2)
Robot is inside bathroom_1. Robot is close floor_2. 
##############################
From agent.py
Human Instruction: You need to vacuum the floor. The last action taken was washing the floor, not vacuuming it. Please use the vacuum cleaner to clean the floor as required by the task.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for vacuum_cleaner_2070 around kitchen_counter_230.
Action 3: Walk to closetdrawer_392.
Action 4: look for vacuum_cleaner_2070 around closetdrawer_392.
Action 5: Walk to vacuum_cleaner_2070.
Action 6: Observe around vacuum_cleaner_2070 with the question of Locate the vacuum cleaner.
Action 7: Plug in vacuum_cleaner_2070.
Action 8: Switch on vacuum_cleaner_2070.
Action 9: Walk to floor_2.
Action 10: Wash floor_2.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind vacuum: item where:
            is_vacuum_cleaner(vacuum) and id[vacuum] == 2070
        # Select the vacuum cleaner with ID 2070

        bind floor: item where:
            is_floor(floor) and id[floor] == 2
        # Select the floor with ID 2

        achieve clean(floor)
        # Clean the specified floor using the vacuum cleaner

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_soap_2053_around_shower_36(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_floor_is_clean(floor: item):
    body:
        achieve clean(floor)
        # Ensure the floor is clean
        
def is_vacuum_cleaner_ready(vacuum: item, floor: item):
    # Check if the vacuum cleaner is plugged and turned on, and the floor is dirty
    symbol ready = plugged(vacuum) and is_on(vacuum) and dirty(floor)
    return ready

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner) and is_on(vacuum_cleaner)
        # Select the vacuum cleaner which is plugged in and turned on

        bind floor: item where:
            is_floor(floor) and dirty(floor)
        # Select a floor that is dirty

        ensure_floor_is_clean(floor)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior ensure_floor_is_clean(floor: item):
    body:
        achieve clean(floor)
        # Ensure the floor is clean
        
def is_vacuum_cleaner_ready(vacuum: item, floor: item):
    # Check if the vacuum cleaner is plugged and turned on, and the floor is dirty
    symbol ready = plugged(vacuum) and is_on(vacuum) and dirty(floor)
    return ready

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner) and is_on(vacuum_cleaner)
        # Select the vacuum cleaner which is plugged in and turned on

        bind floor: item where:
            is_floor(floor) and dirty(floor)
        # Select a floor that is dirty

        ensure_floor_is_clean(floor)

##############################
From agent.py-> find a plan in act()
walk_executor(floor_4)wash_executor(floor_4)
##############################
From agent.py
walk_executor(floor_4)
Robot is inside bathroom_1. Robot is close floor_4. Robot is no longer close floor_2.
##############################
From agent.py
wash_executor(floor_4)
Robot is inside bathroom_1. Robot is close floor_4. 
##############################
From agent.py
Human Instruction: You have plugged in and turned on the vacuum cleaner. However, instead of vacuuming, you washed the floors. You need to use the vacuum cleaner to vacuum the floor as required by the task.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for vacuum_cleaner_2070 around kitchen_counter_230.
Action 3: Walk to closetdrawer_392.
Action 4: look for vacuum_cleaner_2070 around closetdrawer_392.
Action 5: Walk to vacuum_cleaner_2070.
Action 6: Observe around vacuum_cleaner_2070 with the question of Locate the vacuum cleaner.
Action 7: Plug in vacuum_cleaner_2070.
Action 8: Switch on vacuum_cleaner_2070.
Action 9: Walk to floor_2.
Action 10: Wash floor_2.
Action 11: Walk to floor_4.
Action 12: Wash floor_4.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_tvstand_225(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(mat,tvstand_instance)
        else:
            exp(mat,tvstand_instance)
    eff:
        unknown[mat]=False
        close[mat,tvstand_instance]=True
        close[tvstand_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor_with_vacuum_cleaner(vacuum_cleaner:item, floor:item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on
        achieve close_char(char, floor)
        # Move close to the floor you want to vacuum
        achieve clean(floor)
        # Achieve a clean state for the floor

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner) and is_on(vacuum_cleaner)
        # Select the vacuum cleaner which is already plugged in and turned on

        bind floor: item where:
            is_floor(floor) and not clean(floor)
        # Select the floor that needs vacuuming

        vacuum_floor_with_vacuum_cleaner(vacuum_cleaner, floor)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior vacuum_floor_with_vacuum_cleaner(vacuum_cleaner:item, floor:item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on
        achieve close_char(char, floor)
        # Move close to the floor you want to vacuum
        achieve clean(floor)
        # Achieve a clean state for the floor

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner) and is_on(vacuum_cleaner)
        # Select the vacuum cleaner which is already plugged in and turned on

        bind floor: item where:
            is_floor(floor) and not clean(floor)
        # Select the floor that needs vacuuming

        vacuum_floor_with_vacuum_cleaner(vacuum_cleaner, floor)

##############################
From agent.py-> find a plan in act()
walk_executor(floor_5)wash_executor(floor_5)
##############################
From agent.py
walk_executor(floor_5)
Robot is inside bathroom_1. Robot is close floor_5. Robot is no longer close floor_4.
##############################
From agent.py
wash_executor(floor_5)
Robot is inside bathroom_1. Robot is close floor_5. 
##############################
From evaluation.py
cdl_dataset/dataset/Vacuum_the_living_room/g1.txt
Checking k1
missed actions: walk_executor(vacuum_cleaner_2070);grab_executor(vacuum_cleaner_2070);
missed action num: 2
##############################
From evaluation.py
cdl_dataset/dataset/Vacuum_the_living_room/g1.txt
Checking k1
missed actions: walk_executor(vacuum_cleaner_2070);grab_executor(vacuum_cleaner_2070);
missed action num: 2
##############################
