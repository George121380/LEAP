From agent.py
Reset goals: The sub-goals are: 
['1. Gather the ingredients needed for fried rice with egg and wash them.', '2. Cook the rice and scramble the egg.', '3. Combine the cooked rice and scrambled egg, and stir-fry them together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_cupboard_118(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_oil_2013_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_food_onion_2104_around_cupboard_118(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_rice_2108_around_kitchen_counter_119(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_potato_2107_around_cupboard_118(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_potato,cupboard_instance)
        else:
            exp(food_potato,cupboard_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,cupboard_instance]=True
        close[cupboard_instance,food_potato]=True
    

#exp_behavior_end

#goal_representation
 
def is_ingredient_needed(item: item):
    # Determine if the item is one of the ingredients needed for fried rice with egg
    symbol needed = is_food_egg(item) or is_food_rice(item) or is_food_vegetable(item) or is_food_onion(item) or is_oil(item)
    return needed

behavior wash_ingredient(ingredient:item):
    body:
        achieve clean(ingredient)
        # Wash the ingredient to be clean

behavior __goal__():
    body:
        # Check if any unvisited items are needed ingredients for fried rice with egg
        foreach ingredient: item:
            if is_ingredient_needed(ingredient) and not visited(ingredient):
                observe(ingredient, "Verify ingredient and check if it needs washing")
                # Observe the ingredient for verification and washing

        # Bind ingredients and wash them
        foreach ingredient: item:
            if is_ingredient_needed(ingredient) and dirty(ingredient):
                wash_ingredient(ingredient)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_fridge_126(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def requires_washing(ingredient: item):
    symbol needs_cleaning = dirty(ingredient)
    return needs_cleaning

behavior wash_ingredient(ingredient: item):
    body:
        if requires_washing(ingredient):
            wash(ingredient)

behavior __goal__():
    body:
        # Gather relevant ingredients and ensure they are washed
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind vegetable: item where:
            is_food_vegetable(vegetable)

        wash_ingredient(rice)
        wash_ingredient(egg)
        wash_ingredient(vegetable)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. gather the ingredients needed for fried rice with egg and wash them." ?
Answer: The current plan does not mention gathering or washing the ingredients, which are essential steps for your subgoal. Reconsider your plan to ensure these crucial steps are included.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Gather and wash all the ingredients needed for the fried rice with egg.', '2. Cook the rice and prepare the egg by frying it.', '3. Mix the cooked rice and fried egg together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_vegetable_2113_around_cupboard_118(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_and_wash_ingredients(ingredient:item):
    body:
        achieve inside(ingredient, kitchen_counter)
        wash(ingredient)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice item
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetable item

        gather_and_wash_ingredients(rice)
        gather_and_wash_ingredients(egg)
        gather_and_wash_ingredients(vegetable)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter; available variables: [Variable<ingredient: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2113_around_cupboard_118(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

#goal_representation

behavior gather_and_wash_ingredients(ingredient:item, location:item):
    body:
        achieve inside(ingredient, location)
        wash(ingredient)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice item

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg item

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetable item

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        gather_and_wash_ingredients(rice, kitchen_counter)
        gather_and_wash_ingredients(egg, kitchen_counter)
        gather_and_wash_ingredients(vegetable, kitchen_counter)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_rice_or_egg(item: item):
    # Function to check if an item is rice or an egg
    symbol is_rice_or_egg = is_food_rice(item) or is_food_egg(item)
    return is_rice_or_egg

def is_ingredient_need_washing(item: item):
    # Function to check if an ingredient needs washing
    symbol need_washing = dirty(item)
    return need_washing

behavior __goal__():
    body:
        foreach item: item:
            # For all items that are rice or eggs and need washing
            if is_food_rice_or_egg(item) and is_ingredient_need_washing(item):
                observe(item, "Gather and wash the ingredient")
        # Once all ingredients are gathered and checked for dirtiness, wash them
        foreach item: item:
            # For all items identified as needing washing
            if is_food_rice_or_egg(item) and is_ingredient_need_washing(item):
                wash(item)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Gather and wash the ingredients for the fried rice with egg.', '2. Cook the rice and scramble the eggs.', '3. Combine the rice and eggs in a pan to fry them together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_fridge_126(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_food_1000_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior gather_and_wash_ingredient(ingredient:item, sink:item):
    body:
        achieve_once inside(ingredient, sink)
        # Ensure the ingredient is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to clean
        
        wash(ingredient) # This is the key step of the behavior, used for cleaning an ingredient

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # If the sink has a faucet, turn it off after cleaning

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink

        foreach ingredient: item:
        # Iterate over all unvisited food items to gather and wash
            if is_food_food(ingredient) and not visited(ingredient):
                observe(ingredient, "Gather the ingredient for washing")
                achieve close_char(char, ingredient)
                gather_and_wash_ingredient(ingredient, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_dirty_ingredient_sink(sink: item):
    # Function to check if a sink has any dirty ingredients inside
    symbol has_dirty_ingredients = exists o: item : (is_food_rice(o) or is_food_egg(o)) and inside(o, sink) and dirty(o)
    return has_dirty_ingredients

behavior wash_ingredient(ingredient: item, sink: item):
    body:
        achieve inside(ingredient, sink)
        # Ensure the ingredient is inside the sink for washing

        wash(ingredient)
        # Perform the washing on the ingredient

behavior __goal__():
    body:
        if exists sink: item : is_sink(sink) and has_dirty_ingredient_sink(sink):
            # If theres already a sink known to have dirty ingredients
            bind sink: item where:
                is_sink(sink) and has_dirty_ingredient_sink(sink)
                
            foreach ingredient: item:
            # Wash each dirty rice or egg in the sink
                if (is_food_rice(ingredient) or is_food_egg(ingredient)) and inside(ingredient, sink) and dirty(ingredient):
                    wash_ingredient(ingredient, sink)
                    
        else:
            # Check all sinks in the scene that have not been visited
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check for dirty ingredients like rice or egg for washing")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_dirty_ingredient_sink(sink: item):
    # Function to check if a sink has any dirty ingredients inside
    symbol has_dirty_ingredients = exists o: item : (is_food_rice(o) or is_food_egg(o)) and inside(o, sink) and dirty(o)
    return has_dirty_ingredients

behavior wash_ingredient(ingredient: item, sink: item):
    body:
        achieve inside(ingredient, sink)
        # Ensure the ingredient is inside the sink for washing

        wash(ingredient)
        # Perform the washing on the ingredient

behavior __goal__():
    body:
        if exists sink: item : is_sink(sink) and has_dirty_ingredient_sink(sink):
            # If theres already a sink known to have dirty ingredients
            bind sink: item where:
                is_sink(sink) and has_dirty_ingredient_sink(sink)
                
            foreach ingredient: item:
            # Wash each dirty rice or egg in the sink
                if (is_food_rice(ingredient) or is_food_egg(ingredient)) and inside(ingredient, sink) and dirty(ingredient):
                    wash_ingredient(ingredient, sink)
                    
        else:
            # Check all sinks in the scene that have not been visited
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check for dirty ingredients like rice or egg for washing")

##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)obs(sink_19, Check for dirty ingredients like rice or egg for washing)walk_executor(sink_120)obs(sink_120, Check for dirty ingredients like rice or egg for washing)
##############################
From agent.py
walk_executor(sink_19)
Find mat_32. Find detergent_2155. Find soap_2125. Find after_shave_2063. Find cleaning_solution_2143. Find drawing_33. Find phone_2029. Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchon_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(fridge_126);switchoff_executor(fridge_126);open_executor(fridge_126);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 17
##############################
From agent.py
obs(sink_19, Check for dirty ingredients like rice or egg for washing)
Get this information:  sink_19 is close to mat_32. sink_19 is close to wall_3. sink_19 is close to wall_4. sink_19 is close to floor_10. sink_19 is close to detergent_2155. sink_19 is close to floor_11. sink_19 is close to soap_2125. sink_19 is close to floor_14. sink_19 is close to after_shave_2063. sink_19 is close to bathroom_cabinet_17. sink_19 is close to bathroom_counter_18. sink_19 is close to faucet_20. sink_19 is close to cleaning_solution_2143. sink_19 is close to character_240. sink_19 is inside bathroom_1. sink_19 is inside bathroom_counter_18. soap_2125 is on sink_19. detergent_2155 is on sink_19. sink_19 is facing drawing_33. after_shave_2063 is inside sink_19. cleaning_solution_2143 is on sink_19. sink_19 is DIRTY.
##############################
From agent.py
walk_executor(sink_120)
Find basket_for_clothes_2078. Find soap_2010. Find pot_2138. Find tray_128. Find ice_2024. Find soap_2126. Find pot_78. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find fork_2151. Robot is inside dining_room_41. Robot is close sink_120. Robot is close kitchen_counter_119. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close sink_19.
##############################
From evaluation.py
cdl_dataset/dataset/Prepare_dinner/g4.txt
Checking k1
missed actions: walk_executor(pot_2138);grab_executor(pot_2138);walk_executor(faucet_20);switchon_executor(faucet_20);switchoff_executor(faucet_20);walk_executor(pot_2138);open_executor(pot_2138);walk_executor(fridge_126);switchoff_executor(fridge_126);open_executor(fridge_126);walk_executor(food_rice_2108);grab_executor(food_rice_2108);walk_executor(pot_2138);putin_executor(food_rice_2108, pot_2138);walk_executor(stove_2135);put_executor(pot_2138, stove_2135);switchon_executor(stove_2135);
missed action num: 17
##############################
From agent.py
obs(sink_120, Check for dirty ingredients like rice or egg for washing)
Get this information:  soap_2010 is inside sink_120. sink_120 is close to wall_64. sink_120 is close to wall_67. sink_120 is close to ice_2024. sink_120 is close to walllamp_140. sink_120 is close to knifeblock_76. sink_120 is close to soap_2126. sink_120 is close to floor_45. sink_120 is close to pot_78. sink_120 is close to floor_46. sink_120 is close to cupboard_117. sink_120 is close to kitchen_counter_119. sink_120 is close to faucet_121. sink_120 is close to soap_2010. sink_120 is close to kitchen_counter_123. sink_120 is close to basket_for_clothes_2078. sink_120 is close to washing_machine_2079. sink_120 is close to character_240. ice_2024 is inside sink_120. soap_2126 is on sink_120. sink_120 is inside dining_room_41. sink_120 is inside kitchen_counter_119. sink_120 is DIRTY.
##############################
From agent.py
Human Instruction: You need to gather the ingredients for the fried rice with egg and check for any dirty ingredients. Then, wash the rice and egg before proceeding to the next sub-task. Ensure that these actions are completed in a clean sink.

Human Guidance: The current plan does not mention gathering or washing the ingredients, which are essential steps for your subgoal. Reconsider your plan to ensure these crucial steps are included.
The actions you have taken:
Action 1: Walk to sink_19.
Action 2: Observe around sink_19 with the question of Check for dirty ingredients like rice or egg for washing.
Action 3: Walk to sink_120.
Action 4: Observe around sink_120 with the question of Check for dirty ingredients like rice or egg for washing.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

def is_necessary_gathering_ingredients():
    # Determine if gathering needed ingredients is necessary
    symbol gathering_required=exists o: item: (is_food_rice(o) or is_food_egg(o)) and dirty(o)
    return not gathering_required

behavior clean_ingredient(ingredient:item, sink:item):
    # Clean a specific ingredient in the sink
    body:
        achieve_once inside(ingredient, sink)
        # Place the ingredient in the sink
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to clean the ingredient

        wash(ingredient) # Perform the main cleaning action
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after cleaning
        
behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Verify any available sink

        # First, ensure to gather rice and eggs for the recipe
        if not is_necessary_gathering_ingredients():
            achieve close_char(char, sink)
            # Move close to the sink to gather necessary ingredients

        # After gathering, focus on cleaning rice and egg
        bind rice: item where:
            is_food_rice(rice) and dirty(rice)
        clean_ingredient(rice, sink)

        bind egg: item where:
            is_food_egg(egg) and dirty(egg)
        clean_ingredient(egg, sink)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_dirty_ingredients(sink:item):
    # Check if there are any dirty rice or egg near the sink
    symbol has_dirty=exists o: item : (is_food_rice(o) or is_food_egg(o)) and dirty(o) and close(o, sink)
    return has_dirty

behavior gather_and_wash_ingredients(sink:item):
    body:
        foreach ingredient: item:
            if is_food_rice(ingredient) or is_food_egg(ingredient) and dirty(ingredient) and close(ingredient, sink):
                wash(ingredient)

behavior __goal__():
    body:
        if exists sink: item : is_sink(sink) and has_dirty_ingredients(sink):
            # Check if there is a sink with dirty ingredients nearby
            bind sink: item where:
                is_sink(sink) and has_dirty_ingredients(sink)
            # Gather and wash the dirty ingredients near this sink
            gather_and_wash_ingredients(sink) 

        else:
            # If no sink with dirty ingredients is found, inspect the sinks
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink,"Check for dirty ingredients like rice or egg for washing")

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Gather and wash the ingredients for the fried rice with egg.', '2. Cook the rice.', '3. Fry the rice with egg in a pan.', '4. Serve the fried rice with egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_dirty_ingredients(sink:item):
    # Function to check if there are dirty ingredients like rice or egg in the sink
    symbol has_dirty_ingredients=exists o: item : (is_food_rice(o) or is_food_egg(o)) and dirty(o)
    return has_dirty_ingredients

behavior wash_ingredients(rice:item, egg:item, sink:item):
    body:
        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):
            achieve_once is_on(faucet)
            # Turn on the faucet if present

        wash(rice)
        wash(egg)
        # Wash rice and egg

        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        if exists sink: item : is_sink(sink) and has_dirty_ingredients(sink):
            bind sink: item where:
                is_sink(sink) and has_dirty_ingredients(sink)
            # Find sink with dirty ingredients

            bind rice: item where:
                is_food_rice(rice) and inside(rice, sink) and dirty(rice)
            # Select dirty rice inside the sink

            bind egg: item where:
                is_food_egg(egg) and inside(egg, sink) and dirty(egg)
            # Select dirty egg inside the sink

            wash_ingredients(rice, egg, sink)
            # Wash ingredients

        else:
            # Explore sinks to find dirty ingredients
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check for dirty ingredients like rice or egg for washing")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: faucet; available variables: [Variable<rice: item>, Variable<egg: item>, Variable<sink: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#goal_representation
 
def has_dirty_ingredients(sink:item):
    # Function to check if there are dirty ingredients like rice or egg in the sink
    symbol has_dirty_ingredients=exists o: item : (is_food_rice(o) or is_food_egg(o)) and dirty(o)
    return has_dirty_ingredients

behavior wash_ingredients(rice:item, egg:item, sink:item, faucet:item):
    body:
        if is_faucet(faucet) and close(faucet, sink):
            achieve_once is_on(faucet)
            # Turn on the faucet if present

        wash(rice)
        wash(egg)
        # Wash rice and egg

        if is_faucet(faucet) and close(faucet, sink):
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        if exists sink: item : is_sink(sink) and has_dirty_ingredients(sink):
            bind sink: item where:
                is_sink(sink) and has_dirty_ingredients(sink)
            # Find sink with dirty ingredients

            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            # Select a faucet close to the sink

            bind rice: item where:
                is_food_rice(rice) and inside(rice, sink) and dirty(rice)
            # Select dirty rice inside the sink

            bind egg: item where:
                is_food_egg(egg) and inside(egg, sink) and dirty(egg)
            # Select dirty egg inside the sink

            wash_ingredients(rice, egg, sink, faucet)
            # Wash ingredients

        else:
            # Explore sinks to find dirty ingredients
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check for dirty ingredients like rice or egg for washing")

#goal_representation_end

##############################
