From agent.py
Reset goals: The sub-goals are: 
['1. Identify all the windows in the house that need to be wiped.', '2. Use a towel to wipe each window until clean.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
def is_window_dirty(window: item):
    # Function to check if a window is dirty
    symbol is_dirty = dirty(window)
    return is_dirty

behavior identify_dirty_windows():
    body:
        foreach window: item:
            # Check each unvisited window in the house
            if is_window(window) and not visited(window):
                observe(window, "Check if the window is dirty")
                # Observe if the window is dirty

behavior __goal__():
    body:
        # Call the behavior to identify all dirty windows
        identify_dirty_windows()
#goal_representation_end

##############################
From agent.py->reset_goal
def is_window_dirty(window: item):
    # Function to check if a window is dirty
    symbol is_dirty = dirty(window)
    return is_dirty

behavior identify_dirty_windows():
    body:
        foreach window: item:
            # Check each unvisited window in the house
            if is_window(window) and not visited(window):
                observe(window, "Check if the window is dirty")
                # Observe if the window is dirty

behavior __goal__():
    body:
        # Call the behavior to identify all dirty windows
        identify_dirty_windows()
##############################
From agent.py-> find a plan in act()
walk_executor(window_2109)open_executor(window_2109)obs(window_2109, Check if the window is dirty)walk_executor(window_40)obs(window_40, Check if the window is dirty)walk_executor(window_181)obs(window_181, Check if the window is dirty)walk_executor(window_287)obs(window_287, Check if the window is dirty)walk_executor(window_346)obs(window_346, Check if the window is dirty)
##############################
From agent.py
walk_executor(window_2109)
Robot is inside dining_room_1. Robot is close window_2109. Robot is no longer inside home_office_161.
##############################
From agent.py
open_executor(window_2109)
Robot is inside dining_room_1. Robot is close window_2109. 
##############################
From agent.py
obs(window_2109, Check if the window is dirty)
Get this information:  window_2109 is inside dining_room_1. window_2109 is close to dining_room_1. window_2109 is close to character_219. window_2109 is OPEN. window_2109 is DIRTY.
##############################
From agent.py
walk_executor(window_40)
Robot is inside dining_room_1. Robot is close window_40. Robot is no longer close window_2109.
##############################
From agent.py
obs(window_40, Check if the window is dirty)
Get this information:  window_40 is inside dining_room_1. window_40 is close to ceiling_35. window_40 is close to wall_4. window_40 is close to doorjamb_39. window_40 is close to wall_7. window_40 is close to ceilinglamp_43. window_40 is close to wall_11. window_40 is close to floor_23. window_40 is close to curtain_119. window_40 is close to curtain_120. window_40 is close to curtain_121. window_40 is close to character_219. window_40 is CLOSED. window_40 is DIRTY.
##############################
From agent.py
walk_executor(window_181)
Find drawing_196. Robot is inside home_office_161. Robot is close window_181. Robot is no longer inside dining_room_1.Robot is no longer close window_40.
##############################
From agent.py
obs(window_181, Check if the window is dirty)
Get this information:  window_181 is inside home_office_161. window_181 is facing television_216. window_181 is facing drawing_196. window_181 is close to curtain_197. window_181 is close to curtain_198. window_181 is close to curtain_199. window_181 is close to floor_168. window_181 is close to wall_169. window_181 is close to wall_170. window_181 is close to wall_173. window_181 is close to ceiling_178. window_181 is close to photoframe_210. window_181 is close to wallshelf_187. window_181 is close to wallshelf_190. window_181 is close to wallshelf_191. window_181 is close to character_219. window_181 is CLOSED. window_181 is DIRTY.
##############################
From agent.py
walk_executor(window_287)
Find basket_for_clothes_2040. Find towel_rack_299. Robot is inside bathroom_265. Robot is close window_287. Robot is no longer inside home_office_161.Robot is no longer close window_181.
##############################
From agent.py
obs(window_287, Check if the window is dirty)
Get this information:  window_287 is close to curtain_293. window_287 is close to curtain_294. window_287 is close to bathtub_297. window_287 is close to wall_266. window_287 is close to towel_rack_299. window_287 is close to wall_267. window_287 is close to wall_270. window_287 is close to floor_275. window_287 is close to basket_for_clothes_2040. window_287 is close to washing_machine_2041. window_287 is close to ceiling_283. window_287 is close to character_219. window_287 is inside bathroom_265. window_287 is CLOSED. window_287 is DIRTY.
##############################
From agent.py
walk_executor(window_346)
Find mat_386. Find drawing_389. Find pillow_368. Find pillow_370. Find drawing_388. Robot is inside bedroom_327. Robot is close window_346. Robot is no longer inside bathroom_265.Robot is no longer close window_287.
##############################
From agent.py
obs(window_346, Check if the window is dirty)
Get this information:  window_346 is close to mat_386. window_346 is close to drawing_389. window_346 is close to curtain_390. window_346 is close to curtain_391. window_346 is close to curtain_392. window_346 is close to tablelamp_359. window_346 is close to tablelamp_358. window_346 is close to floor_330. window_346 is close to pillow_368. window_346 is close to pillow_370. window_346 is close to wall_340. window_346 is close to nightstand_373. window_346 is close to wall_341. window_346 is close to wall_342. window_346 is close to bed_376. window_346 is close to ceiling_348. window_346 is close to character_219. window_346 is inside bedroom_327. window_346 is facing drawing_388. window_346 is CLOSED. window_346 is DIRTY.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2083_around_towel_rack_299(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==299
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_detergent_2108_around_cupboard_131(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(detergent,cupboard_instance)
        else:
            exp(detergent,cupboard_instance)
    eff:
        unknown[detergent]=False
        close[detergent,cupboard_instance]=True
        close[cupboard_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def is_dirty_window(window: item):
    # Determine if the window is dirty
    symbol is_dirty = dirty(window)
    return is_dirty

behavior wipe_window(window: item):
    body:
        achieve clean(window)
        # Achieve a clean state for the window

behavior __goal__():
    body:
        foreach window: item:
            # Iterate through each window in the house
            if is_window(window) and not visited(window):
                observe(window, "Check if the window is dirty")
                # Observe each unvisited window to check if its dirty
                
        foreach window: item:
            # After observation, clean each window that is dirty
            if is_window(window) and is_dirty_window(window):
                wipe_window(window)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_dirty_window(window: item):
    # Determine if the window is dirty
    symbol is_dirty = dirty(window)
    return is_dirty

behavior wipe_window(window: item):
    body:
        achieve clean(window)
        # Achieve a clean state for the window

behavior __goal__():
    body:
        foreach window: item:
            # Iterate through each window in the house
            if is_window(window) and not visited(window):
                observe(window, "Check if the window is dirty")
                # Observe each unvisited window to check if its dirty
                
        foreach window: item:
            # After observation, clean each window that is dirty
            if is_window(window) and is_dirty_window(window):
                wipe_window(window)

##############################
From agent.py-> find a plan in act()
walk_executor(window_2109)obs(window_2109, Check if the window is dirty)walk_executor(window_40)obs(window_40, Check if the window is dirty)walk_executor(window_181)obs(window_181, Check if the window is dirty)walk_executor(window_287)obs(window_287, Check if the window is dirty)walk_executor(window_346)obs(window_346, Check if the window is dirty)walk_executor(window_2109)wash_executor(window_2109)walk_executor(window_40)wash_executor(window_40)walk_executor(window_181)wash_executor(window_181)walk_executor(window_287)wash_executor(window_287)walk_executor(window_346)wash_executor(window_346)
##############################
From agent.py
walk_executor(window_2109)
Robot is inside dining_room_1. Robot is close window_2109. Robot is no longer inside bedroom_327.Robot is no longer close window_346.
##############################
From agent.py
obs(window_2109, Check if the window is dirty)
Get this information:  window_2109 is inside dining_room_1. window_2109 is close to dining_room_1. window_2109 is close to character_219. window_2109 is OPEN. window_2109 is DIRTY.
##############################
From agent.py
walk_executor(window_40)
Robot is inside dining_room_1. Robot is close window_40. Robot is no longer close window_2109.
##############################
From agent.py
obs(window_40, Check if the window is dirty)
Get this information:  window_40 is inside dining_room_1. window_40 is close to ceiling_35. window_40 is close to wall_4. window_40 is close to doorjamb_39. window_40 is close to wall_7. window_40 is close to ceilinglamp_43. window_40 is close to wall_11. window_40 is close to floor_23. window_40 is close to curtain_119. window_40 is close to curtain_120. window_40 is close to curtain_121. window_40 is close to character_219. window_40 is CLOSED. window_40 is DIRTY.
##############################
From agent.py
walk_executor(window_181)
Robot is inside home_office_161. Robot is close window_181. Robot is no longer inside dining_room_1.Robot is no longer close window_40.
##############################
From agent.py
obs(window_181, Check if the window is dirty)
Get this information:  window_181 is inside home_office_161. window_181 is facing television_216. window_181 is facing drawing_196. window_181 is close to curtain_197. window_181 is close to curtain_198. window_181 is close to curtain_199. window_181 is close to floor_168. window_181 is close to wall_169. window_181 is close to wall_170. window_181 is close to wall_173. window_181 is close to ceiling_178. window_181 is close to photoframe_210. window_181 is close to wallshelf_187. window_181 is close to wallshelf_190. window_181 is close to wallshelf_191. window_181 is close to character_219. window_181 is CLOSED. window_181 is DIRTY.
##############################
From agent.py
walk_executor(window_287)
Robot is inside bathroom_265. Robot is close window_287. Robot is no longer inside home_office_161.Robot is no longer close window_181.
##############################
From agent.py
obs(window_287, Check if the window is dirty)
Get this information:  window_287 is close to curtain_293. window_287 is close to curtain_294. window_287 is close to bathtub_297. window_287 is close to wall_266. window_287 is close to towel_rack_299. window_287 is close to wall_267. window_287 is close to wall_270. window_287 is close to floor_275. window_287 is close to basket_for_clothes_2040. window_287 is close to washing_machine_2041. window_287 is close to ceiling_283. window_287 is close to character_219. window_287 is inside bathroom_265. window_287 is CLOSED. window_287 is DIRTY.
##############################
From agent.py
walk_executor(window_346)
Robot is inside bedroom_327. Robot is close window_346. Robot is no longer inside bathroom_265.Robot is no longer close window_287.
##############################
From agent.py
obs(window_346, Check if the window is dirty)
Get this information:  window_346 is close to mat_386. window_346 is close to drawing_389. window_346 is close to curtain_390. window_346 is close to curtain_391. window_346 is close to curtain_392. window_346 is close to tablelamp_359. window_346 is close to tablelamp_358. window_346 is close to floor_330. window_346 is close to pillow_368. window_346 is close to pillow_370. window_346 is close to wall_340. window_346 is close to nightstand_373. window_346 is close to wall_341. window_346 is close to wall_342. window_346 is close to bed_376. window_346 is close to ceiling_348. window_346 is close to character_219. window_346 is inside bedroom_327. window_346 is facing drawing_388. window_346 is CLOSED. window_346 is DIRTY.
##############################
From agent.py
walk_executor(window_2109)
Robot is inside dining_room_1. Robot is close window_2109. Robot is no longer inside bedroom_327.Robot is no longer close window_346.
##############################
From agent.py
wash_executor(window_2109)
Robot is inside dining_room_1. Robot is close window_2109. 
##############################
From agent.py
walk_executor(window_40)
Robot is inside dining_room_1. Robot is close window_40. Robot is no longer close window_2109.
##############################
From agent.py
wash_executor(window_40)
Robot is inside dining_room_1. Robot is close window_40. 
##############################
From agent.py
walk_executor(window_181)
Robot is inside home_office_161. Robot is close window_181. Robot is no longer inside dining_room_1.Robot is no longer close window_40.
##############################
From agent.py
wash_executor(window_181)
Robot is inside home_office_161. Robot is close window_181. 
##############################
From agent.py
walk_executor(window_287)
Robot is inside bathroom_265. Robot is close window_287. Robot is no longer inside home_office_161.Robot is no longer close window_181.
##############################
From agent.py
wash_executor(window_287)
Robot is inside bathroom_265. Robot is close window_287. 
##############################
From agent.py
walk_executor(window_346)
Robot is inside bedroom_327. Robot is close window_346. Robot is no longer inside bathroom_265.Robot is no longer close window_287.
##############################
From agent.py
wash_executor(window_346)
Robot is inside bedroom_327. Robot is close window_346. 
##############################
From evaluation.py
cdl_dataset/dataset/Wash_windows/g2.txt
Checking k1
missed actions: walk_executor(towel_2083);grab_executor(towel_2083);
missed action num: 2
##############################
From evaluation.py
cdl_dataset/dataset/Wash_windows/g2.txt
Checking k1
missed actions: walk_executor(towel_2083);grab_executor(towel_2083);
missed action num: 2
##############################
