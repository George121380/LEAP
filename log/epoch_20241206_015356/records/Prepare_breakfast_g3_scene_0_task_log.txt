From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior find_pot_for_boiling_water(pot:item):
    body:
        if visited(pot):
            # If the pot has been found already, ensure it is nearby
            achieve close_char(char, pot)
        else:
            # If not yet found, observe to locate the pot
            foreach item: item:
                if is_pot(item) and not visited(item):
                    observe(item, "Locate the pot")

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water for boiling

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        find_pot_for_boiling_water(pot)
        fill_pot_with_water(pot)

        bind stove: item where:
            is_stove(stove)
        # Select the stove to place the pot

        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_pot_for_boiling_water(pot:item):
    body:
        if visited(pot):
            # If the pot has been found already, ensure it is nearby
            achieve close_char(char, pot)
        else:
            # If not yet found, observe to locate the pot
            foreach item: item:
                if is_pot(item) and not visited(item):
                    observe(item, "Locate the pot")

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water for boiling

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        find_pot_for_boiling_water(pot)
        fill_pot_with_water(pot)

        bind stove: item where:
            is_stove(stove)
        # Select the stove to place the pot

        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)obs(pot_2069, Locate the pot)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)obs(pot_2069, Locate the pot)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. 
##############################
From agent.py
obs(pot_2069, Locate the pot)
Get this information:  pot_2069 is on kitchen_counter_230. pot_2069 is close to kitchen_counter_230. pot_2069 is close to character_65. pot_2069 is inside dining_room_201. pot_2069 is OPEN.
##############################
From agent.py
grab_executor(pot_2069)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Find basket_for_clothes_2006. Find towel_rack_34. Find towel_rack_32. Find towel_rack_31. Robot is inside bathroom_1. Robot is close pot_2069. Robot is close bathroom_counter_41. Robot is close faucet_43. Robot is no longer inside dining_room_201.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchon_executor(faucet_43)
Find drawing_176. Robot is inside bathroom_1. Robot is close pot_2069. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot is inside bathroom_1. Robot is close pot_2069. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close stove_2065. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close stove_2065. Robot is close kitchen_counter_230. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close stove_2065. Robot is close kitchen_counter_230. 
##############################
From agent.py
Human Instruction: The egg needs to be placed into the pot with water on the stove for it to boil. Ensure that the egg is in the pot with water and that the stove is on for boiling.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Observe around pot_2069 with the question of Locate the pot.
Action 6: Grab pot_2069.
Action 7: Walk to faucet_43.
Action 8: Switch on faucet_43.
Action 9: Switch off faucet_43.
Action 10: Walk to stove_2065.
Action 11: Put pot_2069 on stove_2065.
Action 12: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
behavior observe_egg(egg:item):
    body:
        observe(egg, "Ensure its suitable for boiling")

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve inside(egg, pot)
        # Place the egg inside the pot

behavior boil_egg(pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water

        achieve on(pot, stove)
        # Ensure the pot is on the stove

        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        observe_egg(egg)

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        place_egg_in_pot(egg, pot)

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        boil_egg(pot, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior observe_egg(egg:item):
    body:
        observe(egg, "Ensure its suitable for boiling")

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve inside(egg, pot)
        # Place the egg inside the pot

behavior boil_egg(pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water

        achieve on(pot, stove)
        # Ensure the pot is on the stove

        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        observe_egg(egg)

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        place_egg_in_pot(egg, pot)

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        boil_egg(pot, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)obs(food_egg_2020, Ensure its suitable for boiling)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer close stove_2065.Robot is no longer close pot_2069.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
obs(food_egg_2020, Ensure its suitable for boiling)grab_executor(food_egg_2020)walk_executor(pot_2069)putin_executor(food_egg_2020, pot_2069)
##############################
From agent.py
obs(food_egg_2020, Ensure its suitable for boiling)
Get this information:  food_egg_2020 is close to fridge_289. food_egg_2020 is close to character_65. food_egg_2020 is inside fridge_289. food_egg_2020 is inside dining_room_201. food_egg_2020 is CLEAN.
##############################
From agent.py
grab_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside bathroom_1. Robot is close food_egg_2020. Robot is close stove_2065. Robot is close pot_2069. Robot is no longer inside dining_room_201.Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
putin_executor(food_egg_2020, pot_2069)
Robot is inside bathroom_1. Robot is close food_egg_2020. Robot is close stove_2065. Robot is close pot_2069. food_egg_2020 released by right hand. 
##############################
From agent.py
Human Instruction: The pot must have water for the egg to boil. You need to ensure that water is present in the pot before the egg will boil successfully on the stove.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Observe around pot_2069 with the question of Locate the pot.
Action 6: Grab pot_2069.
Action 7: Walk to faucet_43.
Action 8: Switch on faucet_43.
Action 9: Switch off faucet_43.
Action 10: Walk to stove_2065.
Action 11: Put pot_2069 on stove_2065.
Action 12: Switch on stove_2065.
Action 13: Walk to fridge_289.
Action 14: Switch off fridge_289.
Action 15: Open fridge_289.
Action 16: look for food_egg_2020 around fridge_289.
Action 17: Observe around food_egg_2020 with the question of Ensure its suitable for boiling.
Action 18: Grab food_egg_2020.
Action 19: Walk to pot_2069.
Action 20: Put food_egg_2020 into pot_2069.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_2077_around_dresser_123(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(phone,dresser_instance)
        else:
            exp(phone,dresser_instance)
    eff:
        unknown[phone]=False
        close[phone,dresser_instance]=True
        close[dresser_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_egg_in_pot(egg:item, pot:item):
    body:
        achieve has_water(pot)
        # Ensure that the pot has water to boil the egg

        achieve inside(egg, pot)
        # Place the egg inside the pot with water

behavior heat_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Put the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to boil water in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select the egg with ID 2020

        boil_egg_in_pot(egg, pot)
        heat_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_dresser_123(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(phone,dresser_instance)
        else:
            exp(phone,dresser_instance)
    eff:
        unknown[phone]=False
        close[phone,dresser_instance]=True
        close[dresser_instance,phone]=True
    

behavior find_wall_clock_249_around_window_86(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind window_instance:item where:
            is_window(window_instance) and id[window_instance]==86
        achieve close_char(char,window_instance)
        if can_open(window_instance):
            achieve_once open(window_instance)
            exp(wall_clock,window_instance)
        else:
            exp(wall_clock,window_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,window_instance]=True
        close[window_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind pot: item where:
            is_pot(pot) and on(pot, stove) and has_water(pot)
        # Select a pot that is on the stove and has water

        bind egg: item where:
            is_food_egg(egg) and inside(egg, pot)
        # Select the egg inside the pot

        achieve is_on(stove)
        # Turn on the stove to boil the egg in the pot
#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil the egg." ?
Answer: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water and put it on the stove.', '2. Turn on the stove and put the egg in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_247_around_knife_2050(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2050
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(phone,knife_instance)
        else:
            exp(phone,knife_instance)
    eff:
        unknown[phone]=False
        close[phone,knife_instance]=True
        close[knife_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the pot with water
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once is_off(faucet)
        # Turn off the faucet once the pot is filled

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the pot with water
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once is_off(faucet)
        # Turn off the faucet once the pot is filled

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(faucet_43)
Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close faucet_43. Robot is no longer close stove_2065.Robot is no longer close food_egg_2020.Robot is no longer close pot_2069.
##############################
From agent.py
switchon_executor(faucet_43)
Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
Human Instruction: Ensure the pot (pot_2069) is filled with water before proceeding. The actions taken involved turning the faucet on and off, but it's not confirmed that the pot was actually filled with water. Ensure water was added to pot_2069 before placing the pot on the stove and turning it on.

Human Guidance: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Observe around pot_2069 with the question of Locate the pot.
Action 6: Grab pot_2069.
Action 7: Walk to faucet_43.
Action 8: Switch on faucet_43.
Action 9: Switch off faucet_43.
Action 10: Walk to stove_2065.
Action 11: Put pot_2069 on stove_2065.
Action 12: Switch on stove_2065.
Action 13: Walk to fridge_289.
Action 14: Switch off fridge_289.
Action 15: Open fridge_289.
Action 16: look for food_egg_2020 around fridge_289.
Action 17: Observe around food_egg_2020 with the question of Ensure its suitable for boiling.
Action 18: Grab food_egg_2020.
Action 19: Walk to pot_2069.
Action 20: Put food_egg_2020 into pot_2069.
Action 21: Walk to faucet_43.
Action 22: Switch on faucet_43.
Action 23: Switch off faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_2077_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_wall_clock_249_around_closetdrawer_392(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(wall_clock,closetdrawer_instance)
        else:
            exp(wall_clock,closetdrawer_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,closetdrawer_instance]=True
        close[closetdrawer_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation

def has_faucet(next_to_faucet:item):
    # Determine whether there is a faucet close to the item
    symbol is_next_to_faucet = exists faucet:item: is_faucet(faucet) and close(faucet, next_to_faucet)
    return is_next_to_faucet

behavior fill_pot_with_water(pot:item):
    body:
        if has_faucet(pot):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, pot)
            achieve_once is_on(faucet)
            achieve has_water(pot)
            achieve_once is_off(faucet)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_shower_36(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_filled(pot:item):
    # Function to check if the pot is filled with water
    symbol filled = has_water(pot)
    return filled

behavior ensure_pot_filled_before_placing_on_stove(pot:item, faucet:item):
    body:
        if not is_pot_filled(pot):
            achieve close_char(char, pot)
            achieve close_char(char, faucet)
            achieve_once inhand(pot)
            achieve has_water(pot)

behavior place_pot_on_stove_and_turn_on(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select pot with ID 2069

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove with ID 2065

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        ensure_pot_filled_before_placing_on_stove(pot, faucet)
        place_pot_on_stove_and_turn_on(pot, stove)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water.', '2. Put the pot on the stove and turn on the stove.', '3. Put the egg in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
def is_pot_found(pot: item):
    # Check if the pot has already been located or visited
    symbol found = visited(pot)
    return found

behavior find_pot(pot:item):
    body:
        if is_pot_found(pot):
            # If the pot is already found, move close to it
            achieve close_char(char, pot)
        else:
            # Observe all unvisited pots to locate the required pot
            foreach item: item:
                if is_pot(item) and not visited(item):
                    observe(item, "Locate the pot")

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        find_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet close to pot_2069

        fill_pot_with_water(pot)
        # Fill the selected pot with water from the faucet
#goal_representation_end

##############################
From agent.py->reset_goal
def is_pot_found(pot: item):
    # Check if the pot has already been located or visited
    symbol found = visited(pot)
    return found

behavior find_pot(pot:item):
    body:
        if is_pot_found(pot):
            # If the pot is already found, move close to it
            achieve close_char(char, pot)
        else:
            # Observe all unvisited pots to locate the required pot
            foreach item: item:
                if is_pot(item) and not visited(item):
                    observe(item, "Locate the pot")

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        find_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet close to pot_2069

        fill_pot_with_water(pot)
        # Fill the selected pot with water from the faucet
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)obs(pot_2069, Locate the pot)
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside bathroom_1. Robot is close stove_2065. Robot is close food_egg_2020. Robot is close pot_2069. Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From agent.py
obs(pot_2069, Locate the pot)
Get this information:  pot_2069 is on stove_2065. pot_2069 is close to stove_2065. pot_2069 is close to food_egg_2020. pot_2069 is close to character_65. food_egg_2020 is inside pot_2069. pot_2069 is inside bathroom_1. pot_2069 is OPEN.
##############################
From agent.py
Human Instruction: The robot must ensure that water has been added to pot_2069. The actions included turning the faucet on and off, but there's no confirmation that the pot was actually filled with water. You need to verify that the pot is indeed filled with water before proceeding with the task.

Human Guidance: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Observe around pot_2069 with the question of Locate the pot.
Action 6: Grab pot_2069.
Action 7: Walk to faucet_43.
Action 8: Switch on faucet_43.
Action 9: Switch off faucet_43.
Action 10: Walk to stove_2065.
Action 11: Put pot_2069 on stove_2065.
Action 12: Switch on stove_2065.
Action 13: Walk to fridge_289.
Action 14: Switch off fridge_289.
Action 15: Open fridge_289.
Action 16: look for food_egg_2020 around fridge_289.
Action 17: Observe around food_egg_2020 with the question of Ensure its suitable for boiling.
Action 18: Grab food_egg_2020.
Action 19: Walk to pot_2069.
Action 20: Put food_egg_2020 into pot_2069.
Action 21: Walk to faucet_43.
Action 22: Switch on faucet_43.
Action 23: Switch off faucet_43.
Action 24: Walk to pot_2069.
Action 25: Observe around pot_2069 with the question of Locate the pot.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_2077_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation

def has_faucet_close(pot:item):
    # Determine whether the pot is near the faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,pot)
    return has_faucet

behavior fill_pot_with_water(pot:item):
    body:
        if has_faucet_close(pot):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, pot)
            achieve_once is_on(faucet)
            # Turn on the faucet if it is close to the pot
            
        observe(pot, "Verify the pot is filled with water")
        # Verify and confirm that the pot is filled with water

        if has_faucet_close(pot):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, pot)
            achieve_once is_off(faucet)
            # Turn off the faucet

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Bind pot with ID 2069
        fill_pot_with_water(pot)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def has_faucet_close(pot:item):
    # Determine whether the pot is near the faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,pot)
    return has_faucet

behavior fill_pot_with_water(pot:item):
    body:
        if has_faucet_close(pot):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, pot)
            achieve_once is_on(faucet)
            # Turn on the faucet if it is close to the pot
            
        observe(pot, "Verify the pot is filled with water")
        # Verify and confirm that the pot is filled with water

        if has_faucet_close(pot):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, pot)
            achieve_once is_off(faucet)
            # Turn off the faucet

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Bind pot with ID 2069
        fill_pot_with_water(pot)

##############################
From agent.py-> find a plan in act()
obs(pot_2069, Verify the pot is filled with water)
##############################
From agent.py
obs(pot_2069, Verify the pot is filled with water)
Get this information:  pot_2069 is on stove_2065. pot_2069 is close to stove_2065. pot_2069 is close to food_egg_2020. pot_2069 is close to character_65. food_egg_2020 is inside pot_2069. pot_2069 is inside bathroom_1. pot_2069 is OPEN.
##############################
From agent.py
Human Instruction: You need to ensure the pot is filled with water. The actions that have been performed included switching the faucet on and off, but there is no confirmation that the pot was actually filled with water. Verify that the pot is indeed filled with water before proceeding with the next sub-task.

Human Guidance: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Observe around pot_2069 with the question of Locate the pot.
Action 6: Grab pot_2069.
Action 7: Walk to faucet_43.
Action 8: Switch on faucet_43.
Action 9: Switch off faucet_43.
Action 10: Walk to stove_2065.
Action 11: Put pot_2069 on stove_2065.
Action 12: Switch on stove_2065.
Action 13: Walk to fridge_289.
Action 14: Switch off fridge_289.
Action 15: Open fridge_289.
Action 16: look for food_egg_2020 around fridge_289.
Action 17: Observe around food_egg_2020 with the question of Ensure its suitable for boiling.
Action 18: Grab food_egg_2020.
Action 19: Walk to pot_2069.
Action 20: Put food_egg_2020 into pot_2069.
Action 21: Walk to faucet_43.
Action 22: Switch on faucet_43.
Action 23: Switch off faucet_43.
Action 24: Walk to pot_2069.
Action 25: Observe around pot_2069 with the question of Locate the pot.
Action 26: Observe around pot_2069 with the question of Verify the pot is filled with water.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_2077_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
behavior is_pot_filled(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

def faucet_is_close_to_pot(faucet: item, pot: item):
    # Determine if the faucet is close to the pot
    symbol close_to_pot = close(faucet, pot)
    return close_to_pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069
        
        if has_water(pot):
            # Verify if the pot already has water
            achieve has_water(pot)

        else:
            # If not filled, ensure the faucet is used to fill the pot
            bind faucet: item where:
                is_faucet(faucet) and faucet_is_close_to_pot(faucet, pot)
            achieve_once is_on(faucet)
            # Turn on the faucet
            achieve has_water(pot)
            # Fill the pot with water
            achieve_once is_off(faucet)
            # Turn off the faucet after use
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_2077_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_filled(pot: item):
    # Check if the pot is filled with water
    symbol filled = has_water(pot)
    return filled

behavior fill_pot_with_water(pot: item):
    body:
        if is_faucet(pot):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, pot)
            achieve_once is_on(faucet)
            achieve has_water(pot)
            achieve_once is_off(faucet)

behavior verify_pot_filled(pot: item):
    body:
        if not visited(pot):
            observe(pot, "Verify the pot is filled with water")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Check if the pot is filled with water
        if not is_pot_filled(pot):
            fill_pot_with_water(pot)
        verify_pot_filled(pot)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water and put it on the stove.', '2. Turn on the stove and put the egg in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
def verify_pot_has_water(pot:item):
    # Function to check if the pot is filled with water
    symbol has_water_check=has_water(pot)
    return has_water_check

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close(pot, faucet)
        # Ensure the pot is close to the faucet
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the pot with water
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once is_off(faucet)
        # Turn off the faucet once the pot is filled

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and verify_pot_has_water(pot)
        # Select the pot already confirmed to have water, if available

        if not verify_pot_has_water(pot):
            # If the pot is not filled with water, proceed to fill it
            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet to fill the pot with water
            fill_pot_with_water(pot, faucet)
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove to place the pot on

        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_247_around_powersocket_246(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==246
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(phone,powersocket_instance)
        else:
            exp(phone,powersocket_instance)
    eff:
        unknown[phone]=False
        close[phone,powersocket_instance]=True
        close[powersocket_instance,phone]=True
    

behavior find_wall_clock_249_around_walllamp_350(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==350
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(wall_clock,walllamp_instance)
        else:
            exp(wall_clock,walllamp_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,walllamp_instance]=True
        close[walllamp_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
 
def verify_pot_with_water(pot: item):
    symbol has_water_status = has_water(pot)
    return has_water_status

behavior fill_pot_with_water(pot: item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        if not verify_pot_with_water(pot):
            fill_pot_with_water(pot)
        bind stove: item where:
            is_stove(stove)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Fill the pot with water, put the pot on the stove, turn on the stove, and put the egg in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_powersocket_246(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==246
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(phone,powersocket_instance)
        else:
            exp(phone,powersocket_instance)
    eff:
        unknown[phone]=False
        close[phone,powersocket_instance]=True
        close[powersocket_instance,phone]=True
    

behavior find_hairbrush_2002_around_dresser_123(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(hairbrush,dresser_instance)
        else:
            exp(hairbrush,dresser_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,dresser_instance]=True
        close[dresser_instance,hairbrush]=True
    

#exp_behavior_end

#goal_representation

def is_pot_filled_with_water(pot: item):
    # Determine if the pot has water inside
    symbol filled_with_water = has_water(pot)
    return filled_with_water

behavior verify_and_fill_pot(pot:item):
    body:
        if not is_pot_filled_with_water(pot):
            observe(pot, "Verify the pot is filled with water")
            # If the pot is not filled, observe to ensure it is

behavior place_pot_on_stove_and_turn_on(pot:item, stove:item):
    body:
        achieve on(pot, stove) 
        # Place the pot on the stove
        achieve is_on(stove) 
        # Turn on the stove

behavior put_egg_in_pot(pot:item, egg:item):
    body:
        achieve inside(egg, pot)
        # Place the egg inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        
        verify_and_fill_pot(pot)

        bind stove: item where:
            is_stove(stove)
        # Select the stove 

        place_pot_on_stove_and_turn_on(pot, stove)

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select the egg with ID 2020

        put_egg_in_pot(pot, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_150(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_247_around_powersocket_246(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==246
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(phone,powersocket_instance)
        else:
            exp(phone,powersocket_instance)
    eff:
        unknown[phone]=False
        close[phone,powersocket_instance]=True
        close[powersocket_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_with_water(pot: item):
    # Check if the pot is filled with water
    symbol pot_filled = has_water(pot)
    return pot_filled

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        assert is_faucet(faucet)
        achieve_once is_on(faucet)
        # Turn on the faucet
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once is_off(faucet)
        # Turn off the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior boil_egg_in_pot(pot: item, stove: item, egg: item):
    body:
        achieve inside(egg, pot)
        # Place the egg in the pot
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        if not is_pot_with_water(pot):
            bind faucet: item where:
                is_faucet(faucet)
            fill_pot_with_water(pot, faucet)
        
        bind stove: item where:
            is_stove(stove)
        place_pot_on_stove(pot, stove)

        bind egg: item where:
            is_food_egg(egg)
        boil_egg_in_pot(pot, stove, egg)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water and place it on the stove.', '2. Turn on the stove and put the egg in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_2077_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water_and_position_on_stove(pot:item, stove:item, faucet: item):
    body:
        achieve close_char(char, pot)
        bind faucet_nearby: item where:
            is_faucet(faucet_nearby) and faucet_nearby == faucet
        achieve_once is_on(faucet_nearby)
        achieve has_water(pot)
        achieve_once is_off(faucet_nearby)
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        fill_pot_with_water_and_position_on_stove(pot, stove, faucet)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_2077_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether the sink has a faucet nearby
    symbol has_faucet = exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

def is_pot_with_water(pot:item):
    # Check if the pot has water
    symbol has_water = has_water(pot)
    return has_water

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on faucet to fill the pot
            
            achieve_once inhand(pot)
            # Temporarily hold the pot to fill it with water
            achieve has_water(pot)
            # Ensure the pot is filled with water
            
            achieve_once is_off(faucet)
            # Turn off the faucet after filling

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not is_pot_with_water(pot)
        # Select an unfilled pot
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        fill_pot_with_water(pot, sink)

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water and place it on the stove.', '2. Turn on the stove and put the egg in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Determine if the pot is filled with water
    symbol filled_with_water = has_water(pot)
    return filled_with_water

behavior fill_pot_with_water(pot:item):
    body:
        if not has_water_in_pot(pot):
            # Proceed to fill the pot with water if its not already filled
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, pot)
            achieve_once is_on(faucet) 
            # Turn on the faucet to start filling the pot
            achieve has_water(pot)
            # Ensure the pot is filled with water
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2069
        # Select the pot with ID 2069
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_wall_clock_249_around_walllamp_29(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==29
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(wall_clock,walllamp_instance)
        else:
            exp(wall_clock,walllamp_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,walllamp_instance]=True
        close[walllamp_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_pot_has_water(pot:item):
    body:
        observe(pot, "Verify the pot is filled with water")
        # Ensure the pot is filled with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot for boiling

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        ensure_pot_has_water(pot)
        # Ensure the pot has water before placing it on the stove

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior ensure_pot_has_water(pot:item):
    body:
        observe(pot, "Verify the pot is filled with water")
        # Ensure the pot is filled with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot for boiling

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        ensure_pot_has_water(pot)
        # Ensure the pot has water before placing it on the stove

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

##############################
From agent.py-> find a plan in act()
obs(pot_2069, Verify the pot is filled with water)
##############################
From agent.py
obs(pot_2069, Verify the pot is filled with water)
Get this information:  pot_2069 is on stove_2065. pot_2069 is close to stove_2065. pot_2069 is close to food_egg_2020. pot_2069 is close to character_65. food_egg_2020 is inside pot_2069. pot_2069 is inside bathroom_1. pot_2069 is OPEN.
##############################
From agent.py
Human Instruction: Verify that the pot is actually filled with water before placing it on the stove. The current observations do not confirm that the pot has been filled with water.

Human Guidance: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Observe around pot_2069 with the question of Locate the pot.
Action 6: Grab pot_2069.
Action 7: Walk to faucet_43.
Action 8: Switch on faucet_43.
Action 9: Switch off faucet_43.
Action 10: Walk to stove_2065.
Action 11: Put pot_2069 on stove_2065.
Action 12: Switch on stove_2065.
Action 13: Walk to fridge_289.
Action 14: Switch off fridge_289.
Action 15: Open fridge_289.
Action 16: look for food_egg_2020 around fridge_289.
Action 17: Observe around food_egg_2020 with the question of Ensure its suitable for boiling.
Action 18: Grab food_egg_2020.
Action 19: Walk to pot_2069.
Action 20: Put food_egg_2020 into pot_2069.
Action 21: Walk to faucet_43.
Action 22: Switch on faucet_43.
Action 23: Switch off faucet_43.
Action 24: Walk to pot_2069.
Action 25: Observe around pot_2069 with the question of Locate the pot.
Action 26: Observe around pot_2069 with the question of Verify the pot is filled with water.
Action 27: Observe around pot_2069 with the question of Verify the pot is filled with water.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_2077_around_closetdrawer_392(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(phone,closetdrawer_instance)
        else:
            exp(phone,closetdrawer_instance)
    eff:
        unknown[phone]=False
        close[phone,closetdrawer_instance]=True
        close[closetdrawer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
def is_filled_with_water(pot: item):
    # Function to check if the pot is filled with water
    symbol filled = has_water(pot)
    return filled

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once is_on(faucet)
        # Temporarily turn on the faucet
        achieve has_water(pot)
        # Fill the pot with water
        achieve_once is_off(faucet)
        # Turn off the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        if not is_filled_with_water(pot):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, pot)
            # Select the faucet close to the pot
            fill_pot_with_water(pot, faucet)

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_247_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve close_char(char, pot)
        # Move close to the pot to interact with it
        observe(pot, "Verify the pot is filled with water")
        # Verify if the pot has been filled with water
        achieve close_char(char, faucet)
        # Move close to the faucet to interact with it
        achieve_once is_on(faucet)
        # Temporarily turn on the faucet to fill the pot with water
        achieve has_water(pot)
        # Ensure the pot is filled with water
        achieve_once is_off(faucet)
        # Turn off the faucet after filling the pot with water

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve close_char(char, stove)
        # Move close to the stove to interact with it
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, pot)
        # Select the faucet close to the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Fill the pot with water, put the pot on the stove, turn on the stove, and put the egg in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
behavior verify_water_in_pot(pot:item):
    body:
        observe(pot, "Verify the pot is filled with water")

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve inside(egg, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        verify_water_in_pot(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        place_egg_in_pot(egg, pot)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior verify_water_in_pot(pot:item):
    body:
        observe(pot, "Verify the pot is filled with water")

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        achieve inside(egg, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        verify_water_in_pot(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        place_egg_in_pot(egg, pot)
##############################
From agent.py-> find a plan in act()
obs(pot_2069, Verify the pot is filled with water)
##############################
From agent.py
obs(pot_2069, Verify the pot is filled with water)
Get this information:  pot_2069 is on stove_2065. pot_2069 is close to stove_2065. pot_2069 is close to food_egg_2020. pot_2069 is close to character_65. food_egg_2020 is inside pot_2069. pot_2069 is inside bathroom_1. pot_2069 is OPEN.
##############################
From agent.py
Human Instruction: You need to confirm that the pot is filled with water before placing it on the stove, as this has not been verified yet.

Human Guidance: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Observe around pot_2069 with the question of Locate the pot.
Action 6: Grab pot_2069.
Action 7: Walk to faucet_43.
Action 8: Switch on faucet_43.
Action 9: Switch off faucet_43.
Action 10: Walk to stove_2065.
Action 11: Put pot_2069 on stove_2065.
Action 12: Switch on stove_2065.
Action 13: Walk to fridge_289.
Action 14: Switch off fridge_289.
Action 15: Open fridge_289.
Action 16: look for food_egg_2020 around fridge_289.
Action 17: Observe around food_egg_2020 with the question of Ensure its suitable for boiling.
Action 18: Grab food_egg_2020.
Action 19: Walk to pot_2069.
Action 20: Put food_egg_2020 into pot_2069.
Action 21: Walk to faucet_43.
Action 22: Switch on faucet_43.
Action 23: Switch off faucet_43.
Action 24: Walk to pot_2069.
Action 25: Observe around pot_2069 with the question of Locate the pot.
Action 26: Observe around pot_2069 with the question of Verify the pot is filled with water.
Action 27: Observe around pot_2069 with the question of Verify the pot is filled with water.
Action 28: Observe around pot_2069 with the question of Verify the pot is filled with water.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_window_86(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind window_instance:item where:
            is_window(window_instance) and id[window_instance]==86
        achieve close_char(char,window_instance)
        if can_open(window_instance):
            achieve_once open(window_instance)
            exp(phone,window_instance)
        else:
            exp(phone,window_instance)
    eff:
        unknown[phone]=False
        close[phone,window_instance]=True
        close[window_instance,phone]=True
    

behavior find_hairbrush_2002_around_dresser_123(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(hairbrush,dresser_instance)
        else:
            exp(hairbrush,dresser_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,dresser_instance]=True
        close[dresser_instance,hairbrush]=True
    

behavior find_bowl_2072_around_oven_295(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(bowl,oven_instance)
        else:
            exp(bowl,oven_instance)
    eff:
        unknown[bowl]=False
        close[bowl,oven_instance]=True
        close[oven_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_filled_with_water(pot: item):
    # Check if the pot is filled with water
    symbol filled_with_water = has_water(pot)
    return filled_with_water

behavior fill_pot_with_water(pot:item):
    body:
        if not is_filled_with_water(pot):
            achieve has_water(pot)
        # Ensure the pot is filled with water

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn the stove on

behavior put_egg_in_pot(egg:item, pot:item):
    body:
        achieve inside(egg, pot)
        # Put the egg inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        fill_pot_with_water(pot)
        put_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        put_egg_in_pot(egg, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_phone_2077_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_hairbrush_2002_around_closetdrawer_392(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hairbrush,closetdrawer_instance)
        else:
            exp(hairbrush,closetdrawer_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,closetdrawer_instance]=True
        close[closetdrawer_instance,hairbrush]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_filled_with_water(pot: item):
    # Checks if the pot is filled with water
    symbol has_water = has_water(pot)
    return has_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not is_pot_filled_with_water(pot):
            # If the pot is not filled with water, ensure the faucet is used to fill it
            achieve close_char(char, faucet)
            achieve_once is_on(faucet)
            achieve has_water(pot)
            achieve_once is_off(faucet)

behavior prepare_to_boil_egg(pot:item, stove:item, egg:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove
        achieve inside(egg, pot)
        # Place the egg inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        fill_pot_with_water(pot, faucet)
        prepare_to_boil_egg(pot, stove, egg)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water and put it on the stove.', '2. Turn on the stove and put the egg in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_bowl_2071_around_oven_295(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(bowl,oven_instance)
        else:
            exp(bowl,oven_instance)
    eff:
        unknown[bowl]=False
        close[bowl,oven_instance]=True
        close[oven_instance,bowl]=True
    

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        achieve has_water(pot)
        # Ensure the pot is filled with water

        achieve on(pot, stove)
        # Place the pot with water on the stove

        achieve is_on(stove)
        # Turn on the stove to start boiling

        achieve inside(egg, pot)
        # Add the egg into the pot to boil
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_wall_clock_249_around_wallshelf_35(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation

def is_pot_filled_with_water(pot: item):
    # Verify if the pot is filled with water
    symbol filled = has_water(pot)
    return filled

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and is_pot_filled_with_water(pot)
        # Select a pot that is filled with water

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve on(pot, stove)
        # Place the pot filled with water on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water.', '2. Put the pot on the stove.', '3. Turn on the stove.', '4. Put the egg in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

def has_faucet(sink: item):
    # Determine whether the sink has a faucet
    symbol has_faucet = exists faucet: item : is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once inside(pot, sink)
        # Place the pot inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the pot

        achieve has_water(pot)
        # Ensure the pot is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the pot
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        
        bind sink: item where:
            is_sink(sink) and clean(sink)
        # Select a clean sink

        fill_pot_with_water(pot, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
def is_sink_with_faucet(sink: item):
    # Determine if a sink has a faucet
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_pot_with_water(pot: item, sink: item, faucet: item):
    body:
        achieve_once inside(pot, sink)
        # Place the pot inside the sink for filling
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the pot
        achieve has_water(pot)
        # Ensure the pot is filled with water
        achieve_once is_off(faucet)
        # Turn off the faucet after filling the pot

behavior locate_faucet(sink: item):
    body:
        observe(sink, "Find a faucet near the sink") 

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot for filling with water

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        if is_sink_with_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            fill_pot_with_water(pot, sink, faucet)
        else:
            locate_faucet(sink)
            if is_sink_with_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet,sink)
                fill_pot_with_water(pot, sink, faucet)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_sink_with_faucet(sink: item):
    # Determine if a sink has a faucet
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_pot_with_water(pot: item, sink: item, faucet: item):
    body:
        achieve_once inside(pot, sink)
        # Place the pot inside the sink for filling
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the pot
        achieve has_water(pot)
        # Ensure the pot is filled with water
        achieve_once is_off(faucet)
        # Turn off the faucet after filling the pot

behavior locate_faucet(sink: item):
    body:
        observe(sink, "Find a faucet near the sink") 

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot for filling with water

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        if is_sink_with_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            fill_pot_with_water(pot, sink, faucet)
        else:
            locate_faucet(sink)
            if is_sink_with_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet,sink)
                fill_pot_with_water(pot, sink, faucet)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2069)walk_executor(sink_42)putin_executor(pot_2069, sink_42)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
grab_executor(pot_2069)
Robot is inside bathroom_1. Robot is close stove_2065. Robot is close food_egg_2020. Robot is close pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Find detergent_2084. Find soap_2053. Find cleaning_solution_2073. Robot is inside bathroom_1. Robot is close pot_2069. Robot is close bathroom_counter_41. Robot is close sink_42. Robot is no longer close stove_2065.Robot is no longer close food_egg_2020.
##############################
From agent.py
putin_executor(pot_2069, sink_42)
Robot is inside bathroom_1. Robot is close pot_2069. Robot is close bathroom_counter_41. Robot is close sink_42. pot_2069 released by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close faucet_43. Robot is no longer close sink_42.Robot is no longer close pot_2069.
##############################
From agent.py
switchon_executor(faucet_43)
Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Determine if the pot has water inside
    symbol has_water=has_water(pot)
    return has_water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        # Place the pot on the stove if it has water
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        if not has_water_in_pot(pot):
            observe(pot, "Verify pot is filled with water")
            # Confirm the pot is filled with water

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_water_in_pot(pot:item):
    # Determine if the pot has water inside
    symbol has_water=has_water(pot)
    return has_water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        # Place the pot on the stove if it has water
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        if not has_water_in_pot(pot):
            observe(pot, "Verify pot is filled with water")
            # Confirm the pot is filled with water

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside bathroom_1. Robot is close sink_42. Robot is close food_egg_2020. Robot is close pot_2069. Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From agent.py
grab_executor(pot_2069)
Robot is inside bathroom_1. Robot is close sink_42. Robot is close food_egg_2020. Robot is close pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close stove_2065. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.Robot is no longer close sink_42.Robot is no longer close food_egg_2020.
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close stove_2065. Robot is close kitchen_counter_230. pot_2069 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. turn on the stove." ?
Answer: Turn on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065
        
        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot that has water

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve on(pot, stove)
        # Ensure the pot is on the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_cpuscreen_171(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==171
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(phone,cpuscreen_instance)
        else:
            exp(phone,cpuscreen_instance)
    eff:
        unknown[phone]=False
        close[phone,cpuscreen_instance]=True
        close[cpuscreen_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_dishwasher_1001(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(phone,dishwasher_instance)
        else:
            exp(phone,dishwasher_instance)
    eff:
        unknown[phone]=False
        close[phone,dishwasher_instance]=True
        close[dishwasher_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_tvstand_225(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(phone,tvstand_instance)
        else:
            exp(phone,tvstand_instance)
    eff:
        unknown[phone]=False
        close[phone,tvstand_instance]=True
        close[tvstand_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Bind the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_dishwasher_1001(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(phone,dishwasher_instance)
        else:
            exp(phone,dishwasher_instance)
    eff:
        unknown[phone]=False
        close[phone,dishwasher_instance]=True
        close[dishwasher_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065
        
        if not is_on(stove):
            achieve is_on(stove)
        # Ensure the stove is turned on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065
        
        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        achieve is_on(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_dresser_123(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(phone,dresser_instance)
        else:
            exp(phone,dresser_instance)
    eff:
        unknown[phone]=False
        close[phone,dresser_instance]=True
        close[dresser_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065
        
        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_dishwasher_1001(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(phone,dishwasher_instance)
        else:
            exp(phone,dishwasher_instance)
    eff:
        unknown[phone]=False
        close[phone,dishwasher_instance]=True
        close[dishwasher_instance,phone]=True
    

behavior find_clothes_jacket_2047_around_closetdrawer_394(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_wall_clock_249_around_television_248(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==248
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(wall_clock,television_instance)
        else:
            exp(wall_clock,television_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,television_instance]=True
        close[television_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_pot_has_water(pot:item):
    body:
        if not has_water(pot):
            observe(pot, "Verify the pot is filled with water")
            
behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        
        bind pot: item where:
            is_pot(pot)
        
        ensure_pot_has_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove to ensure you can control it

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_clothes_jacket_2047_around_tvstand_225(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(clothes_jacket,tvstand_instance)
        else:
            exp(clothes_jacket,tvstand_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,tvstand_instance]=True
        close[tvstand_instance,clothes_jacket]=True
    

behavior find_wall_clock_249_around_television_248(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==248
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(wall_clock,television_instance)
        else:
            exp(wall_clock,television_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,television_instance]=True
        close[television_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind pot: item where:
            is_pot(pot) and on(pot, stove) and has_water(pot)
        # Ensure the pot with water is on the selected stove

        achieve is_on(stove)
        # Turn on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior ensure_pot_has_water(pot:item):
    body:
        if not has_water(pot):
            observe(pot, "Verify the pot is filled with water")
            achieve has_water(pot)

behavior turn_on_stove_for_boiling(stove:item):
    body:
        achieve is_on(stove)
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        ensure_pot_has_water(pot)
        # Ensure the pot has water before proceeding

        achieve on(pot, stove)
        # Place the pot on the stove

        turn_on_stove_for_boiling(stove)
        # Turn on the stove to begin boiling the water

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_dishwasher_1001(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(phone,dishwasher_instance)
        else:
            exp(phone,dishwasher_instance)
    eff:
        unknown[phone]=False
        close[phone,dishwasher_instance]=True
        close[dishwasher_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_dresser_123(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==123
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(phone,dresser_instance)
        else:
            exp(phone,dresser_instance)
    eff:
        unknown[phone]=False
        close[phone,dresser_instance]=True
        close[dresser_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_tvstand_225(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(phone,tvstand_instance)
        else:
            exp(phone,tvstand_instance)
    eff:
        unknown[phone]=False
        close[phone,tvstand_instance]=True
        close[tvstand_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_cat_2055_around_tvstand_225(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cat,tvstand_instance)
        else:
            exp(cat,tvstand_instance)
    eff:
        unknown[cat]=False
        close[cat,tvstand_instance]=True
        close[tvstand_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_shower_36(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(phone,shower_instance)
        else:
            exp(phone,shower_instance)
    eff:
        unknown[phone]=False
        close[phone,shower_instance]=True
        close[shower_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and has_switch(stove)
        # Select the stove that has a switch

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_bowl_2072_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Verify the pot is on the stove with ID 2065

        assert has_water(pot)
        # Assert that the pot has water

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_tvstand_225(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(phone,tvstand_instance)
        else:
            exp(phone,tvstand_instance)
    eff:
        unknown[phone]=False
        close[phone,tvstand_instance]=True
        close[tvstand_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065
        
        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065
        
        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove in the environment

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_150(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_392(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==392
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_wall_clock_249_around_computer_170(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(wall_clock,computer_instance)
        else:
            exp(wall_clock,computer_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,computer_instance]=True
        close[computer_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_jacket_2047_around_closetdrawer_150(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_jacket,closetdrawer_instance)
        else:
            exp(clothes_jacket,closetdrawer_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_jacket]=True
    

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065
        
        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_cpuscreen_171(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==171
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(phone,cpuscreen_instance)
        else:
            exp(phone,cpuscreen_instance)
    eff:
        unknown[phone]=False
        close[phone,cpuscreen_instance]=True
        close[cpuscreen_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065
        
        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Ensure the pot has water

        bind stove: item where:
            is_stove(stove) and on(pot, stove)
        # Select the stove where the pot is placed

        turn_on_stove(stove)
        # Execute the behavior to turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        achieve is_on(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_cat_2055_around_shower_36(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==36
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(cat,shower_instance)
        else:
            exp(cat,shower_instance)
    eff:
        unknown[cat]=False
        close[cat,shower_instance]=True
        close[shower_instance,cat]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_walllamp_28(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==28
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(phone,walllamp_instance)
        else:
            exp(phone,walllamp_instance)
    eff:
        unknown[phone]=False
        close[phone,walllamp_instance]=True
        close[walllamp_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind pot: item where:
            is_pot(pot) and on(pot, stove) and has_water(pot)
        # Select the pot on the stove that is filled with water
        
        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065
        
        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065
        
        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_desk_104(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065) and has_water(pot)
        # Ensure the pot is filled with water and placed on the stove with ID 2065
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove with ID 2065

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_phone_2077_around_desk_357(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#goal_representation

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove) and has_water(pot)
        # Ensure the pot is filled with water and placed on the stove with ID 2065

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove with ID 2065

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_phone_247_around_computer_170(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#goal_representation

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove) and has_water(pot)
        # Ensure the pot is filled with water and placed on the stove with ID 2065

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        achieve is_on(stove)
        # Turn on the stove with ID 2065

#goal_representation_end

##############################
