From agent.py
Reset goals: The sub-goals are: 
['1. Find the computer and chair in the home office and sit on the chair.  ', '2. Touch the mouse near the computer to turn it on.  ', '3. Type on the keyboard to send an e-mail.  ']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def has_computer_and_chair(home_office:item):
    # Function to check if the home office contains a computer and a chair
    symbol has_computer = exists o: item : is_computer(o) and inside(o, home_office)
    symbol has_chair = exists o: item : is_chair(o) and inside(o, home_office)
    return has_computer and has_chair

behavior __goal__():
    body:
        if exists home_office: item : is_home_office(home_office) and has_computer_and_chair(home_office):
            # Use known information to approach the home office containing the computer and chair
            bind home_office: item where:
                is_home_office(home_office) and has_computer_and_chair(home_office)
            achieve inside_char(char, home_office)
            # Enter the home office

            bind chair: item where:
                is_chair(chair) and inside(chair, home_office)
            achieve on_char(char, chair)
            # Sit on the chair

        else:
            # If the home office with the computer and chair is not confirmed, inspect each unvisited home office
            foreach home_office: item:
                if is_home_office(home_office) and not visited(home_office):
                    observe(home_office, "Check for a computer and a chair in the home office")
                    # Check if there is a computer and a chair in the home office

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_computer_and_chair(home_office:item):
    # Function to check if the home office contains a computer and a chair
    symbol has_computer = exists o: item : is_computer(o) and inside(o, home_office)
    symbol has_chair = exists o: item : is_chair(o) and inside(o, home_office)
    return has_computer and has_chair

behavior __goal__():
    body:
        if exists home_office: item : is_home_office(home_office) and has_computer_and_chair(home_office):
            # Use known information to approach the home office containing the computer and chair
            bind home_office: item where:
                is_home_office(home_office) and has_computer_and_chair(home_office)
            achieve inside_char(char, home_office)
            # Enter the home office

            bind chair: item where:
                is_chair(chair) and inside(chair, home_office)
            achieve on_char(char, chair)
            # Sit on the chair

        else:
            # If the home office with the computer and chair is not confirmed, inspect each unvisited home office
            foreach home_office: item:
                if is_home_office(home_office) and not visited(home_office):
                    observe(home_office, "Check for a computer and a chair in the home office")
                    # Check if there is a computer and a chair in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(home_office_319)obs(home_office_319, Check for a computer and a chair in the home office)
##############################
From agent.py
walk_executor(home_office_319)
Robot is inside home_office_319. Robot is no longer inside bathroom_1.
##############################
From agent.py
obs(home_office_319, Check for a computer and a chair in the home office)
Get this information:  ceilinglamp_349 is inside home_office_319. vacuum_cleaner_2070 is inside home_office_319. computer_417 is inside home_office_319. ceiling_341 is inside home_office_319. couch_352 is inside home_office_319. wall_330 is inside home_office_319. headset_2062 is inside home_office_319. curtain_409 is inside home_office_319. floor_322 is inside home_office_319. wall_333 is inside home_office_319. closetdrawer_382 is inside home_office_319. ceiling_344 is inside home_office_319. mat_401 is inside home_office_319. powersocket_412 is inside home_office_319. hanger_363 is inside home_office_319. hanger_374 is inside home_office_319. floor_325 is inside home_office_319. wall_336 is inside home_office_319. drawing_404 is inside home_office_319. table_355 is inside home_office_319. coffee_table_2068 is inside home_office_319. keyboard_415 is inside home_office_319. closetdrawer_377 is inside home_office_319. headset_2076 is inside home_office_319. floor_328 is inside home_office_319. ceiling_339 is inside home_office_319. curtain_407 is inside home_office_319. hanger_369 is inside home_office_319. doorjamb_347 is inside home_office_319. dresser_358 is inside home_office_319. wall_331 is inside home_office_319. floor_320 is inside home_office_319. closetdrawer_388 is inside home_office_319. walllamp_350 is inside home_office_319. remote_control_2052 is inside home_office_319. doorjamb_346 is between home_office_319. filing_cabinet_399 is inside home_office_319. television_410 is inside home_office_319. hanger_361 is inside home_office_319. spectacles_2082 is inside home_office_319. floor_323 is inside home_office_319. closetdrawer_380 is inside home_office_319. drawing_402 is inside home_office_319. tvstand_353 is inside home_office_319. ceiling_342 is inside home_office_319. hanger_372 is inside home_office_319. ceiling_345 is inside home_office_319. wall_334 is inside home_office_319. cat_2055 is inside home_office_319. clothes_jacket_2047 is inside home_office_319. closetdrawer_394 is inside home_office_319. floor_326 is inside home_office_319. home_office_319 is close to coffee_table_2068. chair_356 is inside home_office_319. book_2066 is inside home_office_319. phone_2077 is inside home_office_319. mouse_413 is inside home_office_319. hanger_375 is inside home_office_319. pencil_2001 is inside home_office_319. window_348 is inside home_office_319. ceiling_337 is inside home_office_319. cpuscreen_416 is inside home_office_319. pillow_405 is inside home_office_319. hanger_367 is inside home_office_319. wall_329 is inside home_office_319. ceiling_340 is inside home_office_319. hanger_359 is inside home_office_319. dvd_player_2061 is inside home_office_319. curtain_408 is inside home_office_319. floor_321 is inside home_office_319. wall_332 is inside home_office_319. drawing_400 is inside home_office_319. walllamp_351 is inside home_office_319. photoframe_430 is inside home_office_319. floor_324 is inside home_office_319. light_411 is inside home_office_319. ceiling_343 is inside home_office_319. wall_335 is inside home_office_319. closetdrawer_392 is inside home_office_319. drawing_403 is inside home_office_319. bookshelf_354 is inside home_office_319. hanger_365 is inside home_office_319. floor_327 is inside home_office_319. character_65 is inside home_office_319. closetdrawer_384 is inside home_office_319. doorjamb_346 is inside home_office_319. desk_357 is inside home_office_319. book_2067 is inside home_office_319. mousepad_414 is inside home_office_319. hanger_376 is inside home_office_319. pillow_406 is inside home_office_319. ceiling_338 is inside home_office_319. hairbrush_2002 is inside home_office_319. home_office_319 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_mouse_413_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation

def is_mouse_near_computer(mouse: item, computer: item):
    # Check whether the mouse is near the computer
    symbol is_near = close(mouse, computer)
    return is_near

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer

        if exists mouse: item : is_mouse(mouse) and is_mouse_near_computer(mouse, computer):
            # If a mouse is identified to be near the computer
            bind mouse: item where:
                is_mouse(mouse) and is_mouse_near_computer(mouse, computer)
            achieve close_char(char, mouse)
            # Approach the mouse

            touch(mouse)
            # Touch the mouse to interact

            achieve is_on(computer)
            # Ensure the computer is on

        else:
            # Look for a mouse near the computer if not already identified
            foreach mouse: item:
                if is_mouse(mouse):
                    observe(mouse, "Check if mouse is near the computer")
                    if is_mouse_near_computer(mouse, computer):
                        achieve close_char(char, mouse)
                        touch(mouse)
                        achieve is_on(computer)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_mouse_near_computer(mouse: item, computer: item):
    # Check whether the mouse is near the computer
    symbol is_near = close(mouse, computer)
    return is_near

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer

        if exists mouse: item : is_mouse(mouse) and is_mouse_near_computer(mouse, computer):
            # If a mouse is identified to be near the computer
            bind mouse: item where:
                is_mouse(mouse) and is_mouse_near_computer(mouse, computer)
            achieve close_char(char, mouse)
            # Approach the mouse

            touch(mouse)
            # Touch the mouse to interact

            achieve is_on(computer)
            # Ensure the computer is on

        else:
            # Look for a mouse near the computer if not already identified
            foreach mouse: item:
                if is_mouse(mouse):
                    observe(mouse, "Check if mouse is near the computer")
                    if is_mouse_near_computer(mouse, computer):
                        achieve close_char(char, mouse)
                        touch(mouse)
                        achieve is_on(computer)

##############################
From agent.py-> find a plan in act()
walk_executor(computer_170)exp(mouse_166, computer_170)walk_executor(mouse_166)obs(mouse_166, Check if mouse is near the computer)walk_executor(mouse_413)obs(mouse_413, Check if mouse is near the computer)
##############################
From agent.py
walk_executor(computer_170)
Find mouse_166. Find chair_103. Find keyboard_168. Find hanger_112. Find hanger_115. Find hanger_113. Robot is inside bedroom_67. Robot is close computer_170. Robot is no longer inside home_office_319.
##############################
From agent.py
exp(mouse_166, computer_170)
Find mouse_166. 
##############################
From agent.py-> find a plan in act()
walk_executor(mouse_166)obs(mouse_166, Check if mouse is near the computer)walk_executor(mouse_413)obs(mouse_413, Check if mouse is near the computer)
##############################
From agent.py
walk_executor(mouse_166)
Find drawing_175. Robot is inside bedroom_67. Robot is close desk_104. Robot is close mouse_166. Robot is close mousepad_167. Robot is no longer close computer_170.
##############################
From agent.py
obs(mouse_166, Check if mouse is near the computer)
Get this information:  mouse_166 is inside bedroom_67. mouse_166 is facing drawing_175. mouse_166 is on desk_104. mouse_166 is on mousepad_167. mouse_166 is close to chair_103. mouse_166 is close to keyboard_168. mouse_166 is close to desk_104. mouse_166 is close to mousepad_167. mouse_166 is close to cpuscreen_171. mouse_166 is close to floor_75. mouse_166 is close to bookshelf_233. mouse_166 is close to computer_170. mouse_166 is close to drawing_175. mouse_166 is close to floor_207. mouse_166 is close to wall_210. mouse_166 is close to wall_83. mouse_166 is close to character_65. mouse_166 is PLUGGED_OUT. mouse_166 is CLEAN.
##############################
From agent.py
walk_executor(mouse_413)
Robot is inside home_office_319. Robot is close desk_357. Robot is close mouse_413. Robot is close mousepad_414. Robot is no longer inside bedroom_67.Robot is no longer close desk_104.Robot is no longer close mouse_166.Robot is no longer close mousepad_167.
##############################
From agent.py
obs(mouse_413, Check if mouse is near the computer)
Get this information:  mouse_413 is close to cpuscreen_416. mouse_413 is close to computer_417. mouse_413 is close to chair_356. mouse_413 is close to desk_357. mouse_413 is close to floor_326. mouse_413 is close to floor_325. mouse_413 is close to wall_330. mouse_413 is close to wall_331. mouse_413 is close to floor_208. mouse_413 is close to wall_213. mouse_413 is close to doorjamb_346. mouse_413 is close to powersocket_412. mouse_413 is close to mousepad_414. mouse_413 is close to keyboard_415. mouse_413 is close to character_65. mouse_413 is inside home_office_319. mouse_413 is on desk_357. mouse_413 is on mousepad_414. mouse_413 is PLUGGED_IN. mouse_413 is CLEAN.
##############################
From agent.py
Human Instruction: You need to touch the mouse near the computer to turn it on. The mouse is currently identified and near the computer, but the action to touch it has not been performed yet.

The actions you have taken:
Action 1: Walk to home_office_319.
Action 2: Observe around home_office_319 with the question of Check for a computer and a chair in the home office.
Action 3: Walk to computer_170.
Action 4: look for mouse_166 around computer_170.
Action 5: Walk to mouse_166.
Action 6: Observe around mouse_166 with the question of Check if mouse is near the computer.
Action 7: Walk to mouse_413.
Action 8: Observe around mouse_413 with the question of Check if mouse is near the computer.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior turn_on_computer_with_mouse(mouse:item, computer:item):
    body:
        achieve close_char(char, mouse)
        # Ensure the character is close to the mouse
        achieve close(mouse, computer)
        # Ensure the mouse is close to the computer
        touch(mouse)
        # Touch the mouse to turn on the computer

behavior __goal__():
    body:
        bind mouse: item where:
            is_mouse(mouse) and id[mouse] == 166
        # Select the mouse with ID 166

        bind computer: item where:
            is_computer(computer) and id[computer] == 170
        # Select the computer with ID 170
        
        turn_on_computer_with_mouse(mouse, computer)
        # Execute behavior to turn on the computer using the mouse
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior turn_on_computer_with_mouse(mouse:item, computer:item):
    body:
        achieve close_char(char, mouse)
        # Ensure the character is close to the mouse
        achieve close(mouse, computer)
        # Ensure the mouse is close to the computer
        touch(mouse)
        # Touch the mouse to turn on the computer

behavior __goal__():
    body:
        bind mouse: item where:
            is_mouse(mouse) and id[mouse] == 166
        # Select the mouse with ID 166

        bind computer: item where:
            is_computer(computer) and id[computer] == 170
        # Select the computer with ID 170
        
        turn_on_computer_with_mouse(mouse, computer)
        # Execute behavior to turn on the computer using the mouse
##############################
From agent.py-> find a plan in act()
walk_executor(mouse_166)touch_executor(mouse_166)
##############################
From agent.py
walk_executor(mouse_166)
Robot is inside bedroom_67. Robot is close desk_104. Robot is close mouse_166. Robot is close mousepad_167. Robot is no longer inside home_office_319.Robot is no longer close mousepad_414.Robot is no longer close desk_357.Robot is no longer close mouse_413.
##############################
From agent.py
touch_executor(mouse_166)
Robot is inside bedroom_67. Robot is close desk_104. Robot is close mouse_166. Robot is close mousepad_167. 
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior type_email_on_keyboard(keyboard:item):
    body:
        achieve close_char(char, keyboard)
        # Move close to the keyboard for interaction
        type(keyboard)
        # Type on the keyboard to send the email

behavior __goal__():
    body:
        bind keyboard: item where:
            is_keyboard(keyboard)
        # Select the keyboard
        type_email_on_keyboard(keyboard)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior type_email_on_keyboard(keyboard:item):
    body:
        achieve close_char(char, keyboard)
        # Move close to the keyboard for interaction
        type(keyboard)
        # Type on the keyboard to send the email

behavior __goal__():
    body:
        bind keyboard: item where:
            is_keyboard(keyboard)
        # Select the keyboard
        type_email_on_keyboard(keyboard)

##############################
From agent.py-> find a plan in act()
walk_executor(keyboard_168)type_executor(keyboard_168)
##############################
From agent.py
walk_executor(keyboard_168)
Robot is inside bedroom_67. Robot is close desk_104. Robot is close keyboard_168. Robot is no longer close mouse_166.Robot is no longer close mousepad_167.
##############################
From agent.py
type_executor(keyboard_168)
Robot is inside bedroom_67. Robot is close desk_104. Robot is close keyboard_168. 
##############################
From evaluation.py
cdl_dataset/dataset/Write_an_email/g3.txt
Checking k1
missed actions: walk_executor(computer_417);switchon_executor(computer_417);walk_executor(chair_356);sit_executor(chair_356);
missed action num: 4
##############################
From evaluation.py
cdl_dataset/dataset/Write_an_email/g3.txt
Checking k1
missed actions: walk_executor(computer_417);switchon_executor(computer_417);walk_executor(chair_356);sit_executor(chair_356);
missed action num: 4
##############################
