From agent.py
Reset goals: The sub-goals are: 
['1. Boil the pasta and cook the chicken separately.', '2. Combine the pasta and chicken.', '3. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_turkey_2071_around_fridge_140(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_chicken_2050_around_kitchen_counter_132(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_dry_pasta_2073_around_cupboard_130(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def has_pasta_ready(pot: item):
    # Check if the pasta is ready by verifying if boiled water and pasta are inside the pot
    symbol has_ready_pasta = has_water(pot) and exists pasta: item : is_dry_pasta(pasta) and inside(pasta, pot)
    return has_ready_pasta

behavior boil_pasta_in_pot(pasta:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Place pasta inside the pot
        achieve has_water(pot)
        # Ensure the pot has water
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the pasta

behavior cook_chicken_in_fryingpan(chicken:item, fryingpan:item, stove:item):
    body:
        achieve clean(fryingpan)
        # Ensure fryingpan is clean
        achieve inside(chicken, fryingpan)
        # Place chicken in the frying pan
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the chicken
        
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a fryingpan

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        boil_pasta_in_pot(pasta, pot, stove)
        # Boil the pasta
        
        cook_chicken_in_fryingpan(chicken, fryingpan, stove)
        # Cook chicken in the fryingpan

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'pasta') at line 5937, column 56.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
