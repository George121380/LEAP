From agent.py
Reset goals: The sub-goals are: 
['1. Boil the pasta and chicken separately.', '2. Combine the boiled pasta and chicken on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2073_around_cupboard_130(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_chicken_2050_around_kitchen_counter_132(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_pot_2093_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_boiled(item: item):
    # Function to check if an item is boiled
    symbol is_boiled_item = (is_food_noodles(item) or is_food_chicken(item)) and clean(item)
    return is_boiled_item

behavior boil_pasta_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove

behavior boil_pasta_stove_for_pasta_and_chicken(pasta:item, chicken:item, pot:item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot

        achieve inside(chicken, pot)
        # Place the chicken inside the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot with water

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select the dry pasta

        bind food_chicken: item where:
            is_food_chicken(food_chicken) and cut(food_chicken)
        # Select the cut chicken

        boil_pasta_stove_for_pasta_and_chicken(dry_pasta, food_chicken, pot)
        boil_pasta_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2073_around_cupboard_130(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_54_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_lemon_2061_around_kitchen_counter_132(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
def ohos_boiling_setup(pasta:item, chicken:item):
    # Ensure pasta and chicken in hand for boiling preparation
    achieve_once inhand(pasta)
    achieve_once inhand(chicken)

behavior boil_pasta_and_chicken_separately(pasta:item, chicken:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        achieve inside(chicken, pot)
        # Place pasta and chicken separately in separate pots

        achieve has_water(pot)
        # Ensure the pot contains water

        achieve on(pot1, stove)
        achieve on(pot2, stove)
        # Place both pots on the stove

        achieve is_on(stove)
        # Turn on the stove to boil the contents of the pots

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the dry pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind pot1: item where:
            is_pot(pot1) and has_water(pot1)
        # Select a pot that has water for boiling pasta

        bind pot2: item where:
            is_pot(pot2) and has_water(pot2)
        # Select another pot that has water for boiling chicken

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        ohos_boiling_setup(pasta, chicken)
        boil_pasta_and_chicken_separately(pasta, chicken, pot1, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
