From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.', '2. Place the chicken and onion into the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2104_around_kitchen_counter_122(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_food_1000_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#exp_behavior_end

#goal_representation


behavior clean_chicken(chicken:item):
    body:
        achieve clean(chicken)
        
behavior clean_onion(onion:item):
    body:
        achieve clean(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        clean_chicken(chicken)
        clean_onion(onion)

#goal_representation_end

##############################
From agent.py->reset_goal


behavior clean_chicken(chicken:item):
    body:
        achieve clean(chicken)
        
behavior clean_onion(onion:item):
    body:
        achieve clean(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        clean_chicken(chicken)
        clean_onion(onion)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)wash_executor(food_chicken_2089)walk_executor(kitchen_counter_122)exp(food_onion_2104, kitchen_counter_122)walk_executor(food_onion_2104)wash_executor(food_onion_2104)
##############################
From agent.py
walk_executor(fridge_126)
Find food_onion_2048. Find food_food_2046. Find food_food_2073. Find food_steak_2080. Find food_apple_2081. Find food_bacon_2082. Find food_banana_2083. Find food_cake_2085. Find food_carrot_2086. Find food_cereal_2087. Find food_cheese_2088. Find food_chicken_2089. Find food_dessert_2090. Find food_donut_2091. Find food_egg_2092. Find food_fish_2093. Find food_food_2094. Find food_fruit_2095. Find food_hamburger_2096. Find food_ice_cream_2097. Find food_jam_2098. Find food_kiwi_2099. Find food_lemon_2100. Find food_noodles_2101. Find food_oatmeal_2102. Find food_orange_2103. Find food_onion_2104. Find food_peanut_butter_2105. Find food_pizza_2106. Find food_potato_2107. Find food_rice_2108. Find food_salt_2109. Find food_snack_2110. Find food_sugar_2111. Find food_turkey_2112. Find food_vegetable_2113. Find food_food_2001. Find sauce_2148. Find basket_for_clothes_2078. Find food_food_1000. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Find keyboard_211. Find mouse_213. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
open_executor(fridge_126)
Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
exp(food_chicken_2089, fridge_126)
Find food_chicken_2089. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.  ', '2. Cut the onion as desired.  ', '3. Put the chicken and onion into the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2048_around_kitchen_counter_122(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_food_2074_around_kitchen_counter_122(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior clean_item(item:item):
    body:
        achieve clean(item)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Select the fridge with ID 126

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        clean_item(chicken)
        clean_item(onion)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2104_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_food_1000_around_kitchen_counter_122(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior clean_chicken_and_onion(chicken:item, onion:item):
    body:
        achieve clean(chicken)
        achieve clean(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) # Select the chicken
        bind onion: item where:
            is_food_onion(onion) # Select the onion
        clean_chicken_and_onion(chicken, onion)
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onions.', '2. Place the chicken and onions in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2104_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_food_2094_around_cupboard_117(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_food,cupboard_instance)
        else:
            exp(food_food,cupboard_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cupboard_instance]=True
        close[cupboard_instance,food_food]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_chicken(item: item):
    # Determine if an item is a chicken
    symbol chicken_exists = exists chicken: item: is_food_chicken(chicken) and close(chicken, item)
    return chicken_exists

def is_food_onion(item: item):
    # Determine if an item is an onion
    symbol onion_exists = exists onion: item: is_food_onion(onion) and close(onion, item)
    return onion_exists

behavior clean_item(item:item):
    body:
        achieve clean(item)
        # Clean the specified item

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Select the fridge with ID 126

        bind chicken: item where:
            is_food_chicken(chicken) and close(chicken, fridge)
        # Select the chicken close to the fridge

        bind onion: item where:
            is_food_onion(onion) and close(onion, fridge)
        # Select the onion close to the fridge

        clean_item(chicken)
        clean_item(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_turkey_2112_around_cupboard_117(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_turkey,cupboard_instance)
        else:
            exp(food_turkey,cupboard_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,cupboard_instance]=True
        close[cupboard_instance,food_turkey]=True
    

behavior find_food_onion_2104_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_food_2001_around_cupboard_118(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_food,cupboard_instance)
        else:
            exp(food_food,cupboard_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cupboard_instance]=True
        close[cupboard_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
def has_kitchen_sink():
    symbol kitchen_sink_exists=exists sink: item : is_sink(sink) and exists room: item : is_kitchen(room) and inside(sink, room)
    return kitchen_sink_exists

behavior clean_chicken(chicken:item, sink:item):
    body:
        achieve inside(chicken, sink)
        # Ensure the chicken is placed inside the sink
        
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        
        achieve_once is_on(faucet)
        wash(chicken)
        achieve_once is_off(faucet)
        # Wash the chicken

behavior clean_onions(onion:item, sink:item):
    body:
        achieve inside(onion, sink)
        # Ensure the onion is placed inside the sink
        
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        
        achieve_once is_on(faucet)
        wash(onion)
        achieve_once is_off(faucet)
        # Wash the onion

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        if has_kitchen_sink():
            bind sink: item where:
                is_sink(sink) and exists room: item : is_kitchen(room) and inside(sink, room)
            # Select the kitchen sink

            clean_chicken(chicken, sink)
            clean_onions(onion, sink)
        else:
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check if there is any sink that can be used for washing")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5740, column 77.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2104_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_food_turkey_2112_around_cupboard_117(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_turkey,cupboard_instance)
        else:
            exp(food_turkey,cupboard_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,cupboard_instance]=True
        close[cupboard_instance,food_turkey]=True
    

#goal_representation
 
def has_kitchen_sink():
    symbol kitchen_sink_exists=exists sink: item: is_sink(sink) and exists room: item: is_kitchen(room) and inside(sink, room)
    return kitchen_sink_exists

behavior clean_chicken(chicken:item, sink:item):
    body:
        achieve inside(chicken, sink)
        # Ensure the chicken is placed inside the sink
        
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        
        achieve_once is_on(faucet)
        wash(chicken)
        achieve_once is_off(faucet)
        # Wash the chicken

behavior clean_onions(onion:item, sink:item):
    body:
        achieve inside(onion, sink)
        # Ensure the onion is placed inside the sink
        
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        
        achieve_once is_on(faucet)
        wash(onion)
        achieve_once is_off(faucet)
        # Wash the onion

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        if has_kitchen_sink():
            bind sink: item where:
                is_sink(sink) and exists room: item : is_kitchen(room) and inside(sink, room)
            # Select the kitchen sink

            clean_chicken(chicken, sink)
            clean_onions(onion, sink)
        else:
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check if there is any sink that can be used for washing")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'room') at line 5740, column 76.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2104_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_food_2021_around_cupboard_118(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_food,cupboard_instance)
        else:
            exp(food_food,cupboard_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cupboard_instance]=True
        close[cupboard_instance,food_food]=True
    

behavior find_food_food_2074_around_cupboard_118(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_food,cupboard_instance)
        else:
            exp(food_food,cupboard_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cupboard_instance]=True
        close[cupboard_instance,food_food]=True
    

#goal_representation
 
def has_kitchen_sink():
    symbol kitchen_sink_exists=exists sink: item: is_sink(sink) and exists room: item: is_kitchen(room) and inside(sink, room)
    return kitchen_sink_exists

behavior clean_chicken(chicken:item, sink:item):
    body:
        achieve inside(chicken, sink)
        # Ensure the chicken is placed inside the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        
        achieve_once is_on(faucet)
        wash(chicken)
        achieve_once is_off(faucet)
        # Wash the chicken

behavior clean_onions(onion:item, sink:item):
    body:
        achieve inside(onion, sink)
        # Ensure the onion is placed inside the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        
        achieve_once is_on(faucet)
        wash(onion)
        achieve_once is_off(faucet)
        # Wash the onion

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        if has_kitchen_sink():
            bind sink: item where:
                is_sink(sink) and exists room: item: is_kitchen(room) and inside(sink, room)
            # Select the kitchen sink

            clean_chicken(chicken, sink)
            clean_onions(onion, sink)
        else:
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check if there is any sink that can be used for washing")

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
