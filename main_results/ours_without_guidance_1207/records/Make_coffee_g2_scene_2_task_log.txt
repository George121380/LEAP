From agent.py
Reset goals: The sub-goals are: 
['1. Use the coffee maker to make a cup of coffee.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_coffee_filter_2035_around_cupboard_131(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior use_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        use_coffee_maker(coffee_maker, cup)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior use_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        use_coffee_maker(coffee_maker, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(cup_2087, cupboard_131)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_131)
Find tray_142. Find pot_54. Robot is inside dining_room_1. Robot is close cupboard_131. Robot is no longer inside home_office_161.
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. 
##############################
From agent.py
exp(cup_2087, cupboard_131)
Fail to find cup_2087 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer close cupboard_131.
##############################
From agent.py
exp(cup_2087, cupboard_130)
Fail to find cup_2087 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_301)exp(cup_2087, wallshelf_301)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(wallshelf_301)
Find towel_rack_300. Find drawing_296. Find towel_rack_299. Robot is inside bathroom_265. Robot is close wallshelf_301. Robot is no longer inside dining_room_1.Robot is no longer close blender_2032.Robot is no longer close tea_bag_2017.Robot is no longer close cupboard_130.
##############################
From agent.py
exp(cup_2087, wallshelf_301)
Fail to find cup_2087 around wallshelf_301. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_190)exp(cup_2087, wallshelf_190)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(wallshelf_190)
Robot is inside home_office_161. Robot is close wallshelf_190. Robot is no longer inside bathroom_265.Robot is no longer close wallshelf_301.
##############################
From agent.py
exp(cup_2087, wallshelf_190)
Fail to find cup_2087 around wallshelf_190. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(cup_2087, kitchen_counter_128)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find spectacles_2106. Find cutting_board_2080. Find food_orange_2008. Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer inside home_office_161.Robot is no longer close wallshelf_190.
##############################
From agent.py
exp(cup_2087, kitchen_counter_128)
Fail to find cup_2087 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(cup_2087, kitchen_counter_132)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is no longer close kitchen_counter_128.Robot is no longer close floor_15.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2087 ?
Answer: Go to dining_room_1. Locate table_123, and you will find cup_2087 on it. The cup will be near the center of the table, easily identifiable by its location on table_123.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_1. Locate table_123, and you will find cup_2087 on it. The cup will be near the center of the table, easily identifiable by its location on table_123.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for cup_2087 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for cup_2087 around cupboard_130.
Action 6: Walk to wallshelf_301.
Action 7: look for cup_2087 around wallshelf_301.
Action 8: Walk to wallshelf_190.
Action 9: look for cup_2087 around wallshelf_190.
Action 10: Walk to kitchen_counter_128.
Action 11: look for cup_2087 around kitchen_counter_128.
Action 12: Walk to kitchen_counter_132.

##############################
From agent.py
exp(cup_2087, kitchen_counter_132)
Fail to find cup_2087 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(cup_2087, table_123)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(table_123)
Find mat_114. Find drawing_118. Find laptop_2015. Find fork_2103. Find bowl_2095. Find cup_2087. Find cup_2088. Find mouse_2003. Find homework_2011. Find shoes_2001. Robot is inside dining_room_1. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close kitchen_counter_132.
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cup_2087)
Robot is inside dining_room_1. Robot is close table_123. Robot is close cup_2087. Robot is no longer close floor_17.Robot is no longer close mat_114.
##############################
From agent.py
grab_executor(cup_2087)
Robot is inside dining_room_1. Robot is close table_123. Robot is close cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close table_123.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
Human Instruction: You need to ensure that the cup is filled with water and then use the coffee maker to brew coffee into the cup. The actions taken so far include locating and grabbing the cup but have not yet involved actual coffee-making steps.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for cup_2087 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for cup_2087 around cupboard_130.
Action 6: Walk to wallshelf_301.
Action 7: look for cup_2087 around wallshelf_301.
Action 8: Walk to wallshelf_190.
Action 9: look for cup_2087 around wallshelf_190.
Action 10: Walk to kitchen_counter_128.
Action 11: look for cup_2087 around kitchen_counter_128.
Action 12: Walk to kitchen_counter_132.
Action 13: look for cup_2087 around kitchen_counter_132.
Action 14: Walk to table_123.
Action 15: look for cup_2087 around table_123.
Action 16: Walk to cup_2087.
Action 17: Grab cup_2087.
Action 18: Walk to faucet_134.
Action 19: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        achieve has_water(cup) # Ensure the cup is filled with water
        achieve inside(cup, coffee_maker) # Place the cup under the coffee makers outlet
        achieve plugged(coffee_maker) # Ensure the coffee maker is plugged in
        achieve is_on(coffee_maker) # Turn on the coffee maker
        achieve has_water(coffee_maker) # Ensure the coffee maker has water for brewing

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup 2087

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        if not has_water(cup):
            prepare_coffee(cup, coffee_maker)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        achieve has_water(cup) # Ensure the cup is filled with water
        achieve inside(cup, coffee_maker) # Place the cup under the coffee makers outlet
        achieve plugged(coffee_maker) # Ensure the coffee maker is plugged in
        achieve is_on(coffee_maker) # Turn on the coffee maker
        achieve has_water(coffee_maker) # Ensure the coffee maker has water for brewing

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup 2087

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        if not has_water(cup):
            prepare_coffee(cup, coffee_maker)
##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(coffe_maker_147)open_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(coffe_maker_147)
Find pot_2093. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
open_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
putin_executor(cup_2087, coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. cup_2087 released by right hand. 
##############################
From agent.py
close_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
Human Instruction: The current sub-task is incomplete because the cup was placed inside the coffee maker without verifying that it was filled with water. Ensure that the cup is filled with water before placing it inside the coffee maker. Additionally, ensure the coffee maker has water for brewing and is plugged in before turning it on.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for cup_2087 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for cup_2087 around cupboard_130.
Action 6: Walk to wallshelf_301.
Action 7: look for cup_2087 around wallshelf_301.
Action 8: Walk to wallshelf_190.
Action 9: look for cup_2087 around wallshelf_190.
Action 10: Walk to kitchen_counter_128.
Action 11: look for cup_2087 around kitchen_counter_128.
Action 12: Walk to kitchen_counter_132.
Action 13: look for cup_2087 around kitchen_counter_132.
Action 14: Walk to table_123.
Action 15: look for cup_2087 around table_123.
Action 16: Walk to cup_2087.
Action 17: Grab cup_2087.
Action 18: Walk to faucet_134.
Action 19: Switch off faucet_134.
Action 20: Switch on faucet_134.
Action 21: Switch off faucet_134.
Action 22: Walk to coffe_maker_147.
Action 23: Open coffe_maker_147.
Action 24: Put cup_2087 into coffe_maker_147.
Action 25: Close coffe_maker_147.
Action 26: Switch on coffe_maker_147.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_coffee_filter_2035_around_oven_141(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(coffee_filter,oven_instance)
        else:
            exp(coffee_filter,oven_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,oven_instance]=True
        close[oven_instance,coffee_filter]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def fill_cup_with_water(cup:item, faucet:item):
    # Ensure the cup is filled with water from the faucet
    body:
        achieve_once is_on(faucet)
        achieve has_water(cup)
        achieve_once is_off(faucet)

behavior prepare_coffee(coffee_maker:item, cup:item):
    # Ensure the coffee maker is plugged in, has water, and is turned on with the cup placed inside
    body:
        achieve plugged(coffee_maker)
        achieve has_water(coffee_maker)
        achieve inside(cup, coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup

        if not has_water(cup):
            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet
            fill_cup_with_water(cup, faucet)

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        prepare_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5986, column 9.
Expected one of: 
	* IF
	* LESSTHAN
	* AMPERSAND
	* __ANON_8
	* MORETHAN
	* __ANON_0
	* __ANON_1
	* PERCENT
	* FLOORDIV
	* LESS_EQ
	* STAR
	* VBAR
	* __ANON_4
	* GREATER_EQ
	* AT
	* MINUS
	* __ANON_6
	* __ANON_7
	* DOUBLE_EQUAL
	* RSHIFT
	* EQUAL
	* __ANON_2
	* __ANON_5
	* LSHIFT
	* CIRCUMFLEX
	* OR
	* PLUS
	* SLASH
	* NOT_EQ
	* COMMA
	* SEMICOLON
	* __ANON_3
	* _NEWLINE
	* AND

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_snack_2069_around_stove_2090(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_snack,stove_instance)
        else:
            exp(food_snack,stove_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,stove_instance]=True
        close[stove_instance,food_snack]=True
    

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#goal_representation
 
def fill_cup_with_water(cup:item, faucet:item):
    # Ensure the cup is filled with water from the faucet
    body:
        achieve_once is_on(faucet)
        achieve has_water(cup)
        achieve_once is_off(faucet)

behavior prepare_coffee(coffee_maker:item, cup:item):
    # Ensure the coffee maker is plugged in, has water, and is turned on with the cup placed inside
    body:
        achieve plugged(coffee_maker)
        achieve has_water(coffee_maker)
        achieve inside(cup, coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup

        if not has_water(cup):
            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet
            fill_cup_with_water(cup, faucet)

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        prepare_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5968, column 9.
Expected one of: 
	* IF
	* LESSTHAN
	* AMPERSAND
	* __ANON_8
	* MORETHAN
	* __ANON_0
	* __ANON_1
	* PERCENT
	* FLOORDIV
	* LESS_EQ
	* STAR
	* VBAR
	* __ANON_4
	* GREATER_EQ
	* AT
	* MINUS
	* __ANON_6
	* __ANON_7
	* DOUBLE_EQUAL
	* RSHIFT
	* EQUAL
	* __ANON_2
	* __ANON_5
	* LSHIFT
	* CIRCUMFLEX
	* OR
	* PLUS
	* SLASH
	* NOT_EQ
	* COMMA
	* SEMICOLON
	* __ANON_3
	* _NEWLINE
	* AND

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_banana_2045_around_bowl_2095(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2095
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_banana,bowl_instance)
        else:
            exp(food_banana,bowl_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,bowl_instance]=True
        close[bowl_instance,food_banana]=True
    

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#goal_representation
 
def fill_cup_with_water(cup:item, faucet:item):
    # Ensure the cup is filled with water from the faucet
    body:
        achieve_once is_on(faucet)
        achieve has_water(cup)
        achieve_once is_off(faucet)

behavior prepare_coffee(coffee_maker:item, cup:item):
    # Ensure the coffee maker is plugged in, has water, and is turned on with the cup placed inside
    body:
        achieve plugged(coffee_maker)
        achieve has_water(coffee_maker)
        achieve inside(cup, coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup

        if not has_water(cup):
            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet
            fill_cup_with_water(cup, faucet)

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        prepare_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_sink_307(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior ensure_coffee_maker_ready(coffee_maker:item):
    body:
        if not has_water(coffee_maker):
            achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

        if not plugged(coffee_maker):
            achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

behavior make_coffee(cup:item, coffee_maker:item):
    body:
        achieve inside(cup, coffee_maker)
        # Place the cup inside the coffee maker
        achieve closed(coffee_maker)
        # Ensure the coffee maker is closed
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup with water

        ensure_coffee_maker_ready(coffee_maker)
        make_coffee(cup, coffee_maker)
#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Make a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_sink_133(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_check_2033_around_filing_cabinet_378(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==378
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(check,filing_cabinet_instance)
        else:
            exp(check,filing_cabinet_instance)
    eff:
        unknown[check]=False
        close[check,filing_cabinet_instance]=True
        close[filing_cabinet_instance,check]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_cup_with_water(cup:item, sink:item):
    body:
        achieve inside(cup, sink)
        # Ensure the cup is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to fill the cup with water

        achieve has_water(cup)
        # Ensure the cup is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # If the sink has a faucet, turn it off after filling

behavior prepare_coffee_maker(coffee_maker:item, water_source:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water for brewing

        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

behavior make_coffee(cup:item, coffee_maker:item):
    body:
        achieve inside(cup, coffee_maker)
        # Place the cup inside the coffee maker

        achieve closed(coffee_maker)
        # Ensure the coffee maker is closed

        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on to make coffee

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and not has_water(cup)
        # Select a cup to be used

        bind sink: item where:
            is_sink(sink)
        # Select a sink to fill the cup with water

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        
        fill_cup_with_water(cup, sink)
        prepare_coffee_maker(coffee_maker, sink)
        make_coffee(cup, coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_coffee_filter_2035_around_bathroom_counter_306(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(coffee_filter,bathroom_counter_instance)
        else:
            exp(coffee_filter,bathroom_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,bathroom_counter_instance]=True
        close[bathroom_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def check_coffee_maker_state(coffee_maker:item):
    # Function to check if the coffee maker is filled with water and plugged in
    symbol has_water=has_water(coffee_maker)
    symbol plugged_in=plugged(coffee_maker)
    return has_water and plugged_in

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with water

behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        achieve inside(cup, coffee_maker)
        # Ensure the cup is inside the coffee maker
        if has_switch(coffee_maker):
            achieve is_on(coffee_maker)
            # Turn on the coffee maker to brew coffee

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        if not has_water(cup):
            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet to fill the cup
            fill_cup_with_water(cup, faucet)

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if check_coffee_maker_state(coffee_maker):
            prepare_coffee(cup, coffee_maker)
        else:
            observe(coffee_maker, "Check if the coffee maker is filled with water and plugged in")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def check_coffee_maker_state(coffee_maker:item):
    # Function to check if the coffee maker is filled with water and plugged in
    symbol has_water=has_water(coffee_maker)
    symbol plugged_in=plugged(coffee_maker)
    return has_water and plugged_in

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with water

behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        achieve inside(cup, coffee_maker)
        # Ensure the cup is inside the coffee maker
        if has_switch(coffee_maker):
            achieve is_on(coffee_maker)
            # Turn on the coffee maker to brew coffee

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        if not has_water(cup):
            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet to fill the cup
            fill_cup_with_water(cup, faucet)

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        if check_coffee_maker_state(coffee_maker):
            prepare_coffee(cup, coffee_maker)
        else:
            observe(coffee_maker, "Check if the coffee maker is filled with water and plugged in")

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)obs(coffe_maker_147, Check if the coffee maker is filled with water and plugged in)
##############################
From agent.py
switchoff_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
open_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
obs(coffe_maker_147, Check if the coffee maker is filled with water and plugged in)
Get this information:  coffe_maker_147 is inside dining_room_1. cup_2087 is inside coffe_maker_147. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is close to cup_2087. coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is OPEN. coffe_maker_147 is OFF. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN.
##############################
From agent.py
Human Instruction: Ensure the coffee maker is filled with water before proceeding. After turning on the faucet, verify that the cup was indeed filled with water before placing it inside the coffee maker. Only then should you proceed to brew the coffee using the coffee maker.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for cup_2087 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for cup_2087 around cupboard_130.
Action 6: Walk to wallshelf_301.
Action 7: look for cup_2087 around wallshelf_301.
Action 8: Walk to wallshelf_190.
Action 9: look for cup_2087 around wallshelf_190.
Action 10: Walk to kitchen_counter_128.
Action 11: look for cup_2087 around kitchen_counter_128.
Action 12: Walk to kitchen_counter_132.
Action 13: look for cup_2087 around kitchen_counter_132.
Action 14: Walk to table_123.
Action 15: look for cup_2087 around table_123.
Action 16: Walk to cup_2087.
Action 17: Grab cup_2087.
Action 18: Walk to faucet_134.
Action 19: Switch off faucet_134.
Action 20: Switch on faucet_134.
Action 21: Switch off faucet_134.
Action 22: Walk to coffe_maker_147.
Action 23: Open coffe_maker_147.
Action 24: Put cup_2087 into coffe_maker_147.
Action 25: Close coffe_maker_147.
Action 26: Switch on coffe_maker_147.
Action 27: Switch off coffe_maker_147.
Action 28: Open coffe_maker_147.
Action 29: Observe around coffe_maker_147 with the question of Check if the coffee maker is filled with water and plugged in.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_drawing_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==118
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(cup,drawing_instance)
        else:
            exp(cup,drawing_instance)
    eff:
        unknown[cup]=False
        close[cup,drawing_instance]=True
        close[drawing_instance,cup]=True
    

behavior find_coffee_filter_2035_around_wallshelf_187(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(coffee_filter,wallshelf_instance)
        else:
            exp(coffee_filter,wallshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,wallshelf_instance]=True
        close[wallshelf_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_coffee(cup:item, coffee_maker:item, faucet:item):
    body:
        achieve has_water(cup) # Ensure the cup is filled with water before putting it in the coffee maker
        achieve inside(cup, coffee_maker) # Place the cup inside the coffee maker
        achieve is_on(coffee_maker) # Turn on the coffee maker to brew coffee

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, cup)
        # Select the faucet close to the cup

        prepare_coffee(cup, coffee_maker, faucet)
        # Prepare a cup of coffee using the coffee maker
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_cup_2006(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2006
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_coffee_filter_2035_around_photoframe_102(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==102
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(coffee_filter,photoframe_instance)
        else:
            exp(coffee_filter,photoframe_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,photoframe_instance]=True
        close[photoframe_instance,coffee_filter]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_water_in_coffee_maker(coffee_maker:item):
    # Ensure the coffee maker is filled with water
    symbol water_inside=has_water(coffee_maker)
    return water_inside

behavior make_coffee_using_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve inside(cup, coffee_maker)
        # Place the cup inside the coffee maker
        achieve closed(coffee_maker)
        # Close the coffee maker
        if ensure_water_in_coffee_maker(coffee_maker):
            achieve is_on(coffee_maker)
            # Brew the coffee by turning on the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        make_coffee_using_coffee_maker(cup, coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def ensure_water_in_coffee_maker(coffee_maker:item):
    # Ensure the coffee maker is filled with water
    symbol water_inside=has_water(coffee_maker)
    return water_inside

behavior make_coffee_using_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve inside(cup, coffee_maker)
        # Place the cup inside the coffee maker
        achieve closed(coffee_maker)
        # Close the coffee maker
        if ensure_water_in_coffee_maker(coffee_maker):
            achieve is_on(coffee_maker)
            # Brew the coffee by turning on the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        make_coffee_using_coffee_maker(cup, coffee_maker)

##############################
From agent.py-> find a plan in act()
close_executor(coffe_maker_147)
##############################
From agent.py
close_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
Human Instruction: You need to ensure that the cup was filled with water before placing it inside the coffee maker. The task of making the coffee using the coffee maker cannot be considered complete because it's unclear if the cup was filled with water, as per the human instruction, before putting it into the coffee maker. Ensure the cup is filled before proceeding to brew the coffee.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for cup_2087 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for cup_2087 around cupboard_130.
Action 6: Walk to wallshelf_301.
Action 7: look for cup_2087 around wallshelf_301.
Action 8: Walk to wallshelf_190.
Action 9: look for cup_2087 around wallshelf_190.
Action 10: Walk to kitchen_counter_128.
Action 11: look for cup_2087 around kitchen_counter_128.
Action 12: Walk to kitchen_counter_132.
Action 13: look for cup_2087 around kitchen_counter_132.
Action 14: Walk to table_123.
Action 15: look for cup_2087 around table_123.
Action 16: Walk to cup_2087.
Action 17: Grab cup_2087.
Action 18: Walk to faucet_134.
Action 19: Switch off faucet_134.
Action 20: Switch on faucet_134.
Action 21: Switch off faucet_134.
Action 22: Walk to coffe_maker_147.
Action 23: Open coffe_maker_147.
Action 24: Put cup_2087 into coffe_maker_147.
Action 25: Close coffe_maker_147.
Action 26: Switch on coffe_maker_147.
Action 27: Switch off coffe_maker_147.
Action 28: Open coffe_maker_147.
Action 29: Observe around coffe_maker_147 with the question of Check if the coffee maker is filled with water and plugged in.
Action 30: Close coffe_maker_147.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_snack_2069_around_fridge_140(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_snack,fridge_instance)
        else:
            exp(food_snack,fridge_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,fridge_instance]=True
        close[fridge_instance,food_snack]=True
    

behavior find_cup_2089_around_sink_307(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_inside(x:item):
    # Function to check if an item has water inside
    symbol water_inside=has_water(x)
    return water_inside

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        if not has_water_inside(cup):
            achieve_once is_on(faucet)
            achieve has_water(cup)
            achieve_once is_off(faucet)

behavior make_coffee_with_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve inside(cup, coffee_maker)
        achieve closed(coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the cup with water

        fill_cup_with_water(cup, faucet)
        # Fill the cup with water
        
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        make_coffee_with_coffee_maker(cup, coffee_maker)
        # Make coffee with the coffee maker

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_water_inside(x:item):
    # Function to check if an item has water inside
    symbol water_inside=has_water(x)
    return water_inside

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        if not has_water_inside(cup):
            achieve_once is_on(faucet)
            achieve has_water(cup)
            achieve_once is_off(faucet)

behavior make_coffee_with_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve inside(cup, coffee_maker)
        achieve closed(coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the cup with water

        fill_cup_with_water(cup, faucet)
        # Fill the cup with water
        
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        make_coffee_with_coffee_maker(cup, coffee_maker)
        # Make coffee with the coffee maker

##############################
From agent.py-> find a plan in act()
switchon_executor(coffe_maker_147)
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_tvstand_186(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cup,tvstand_instance)
        else:
            exp(cup,tvstand_instance)
    eff:
        unknown[cup]=False
        close[cup,tvstand_instance]=True
        close[tvstand_instance,cup]=True
    

behavior find_food_sugar_2070_around_bowl_2095(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2095
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_sugar,bowl_instance)
        else:
            exp(food_sugar,bowl_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,bowl_instance]=True
        close[bowl_instance,food_sugar]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior add_milk_and_sugar(cup:item, milk:item, sugar:item):
    body:
        achieve inside(milk, cup) # Ensure the milk is added inside the cup
        achieve inside(sugar, cup) # Ensure the sugar is added inside the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup of coffee which contains coffee

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select the sugar

        add_milk_and_sugar(cup, milk, sugar)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior add_milk_and_sugar(cup:item, milk:item, sugar:item):
    body:
        achieve inside(milk, cup) # Ensure the milk is added inside the cup
        achieve inside(sugar, cup) # Ensure the sugar is added inside the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup of coffee which contains coffee

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select the sugar

        add_milk_and_sugar(cup, milk, sugar)
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(bowl_2095)exp(food_sugar_2070, bowl_2095)walk_executor(food_sugar_2070)grab_executor(food_sugar_2070)walk_executor(cup_2087)putin_executor(food_sugar_2070, cup_2087)
##############################
From agent.py
walk_executor(fridge_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close kitchen_counter_129.Robot is no longer close coffe_maker_147.Robot is no longer close cup_2087.
##############################
From agent.py
switchoff_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(milk_2074, fridge_140)
Find milk_2074. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(food_sugar_2070)grab_executor(food_sugar_2070)walk_executor(cup_2087)putin_executor(food_sugar_2070, cup_2087)
##############################
From agent.py
grab_executor(milk_2074)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close coffe_maker_147. Robot is close cup_2087. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close fridge_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
putin_executor(milk_2074, cup_2087)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close coffe_maker_147. Robot is close cup_2087. milk_2074 released by right hand. 
##############################
From agent.py
walk_executor(food_sugar_2070)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_sugar_2070. Robot is no longer close milk_2074.Robot is no longer close coffe_maker_147.Robot is no longer close cup_2087.
##############################
From agent.py
grab_executor(food_sugar_2070)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_sugar_2070. Grabbing food_sugar_2070 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot is inside dining_room_1. Robot is close food_sugar_2070. Robot is close coffe_maker_147. Robot is close cup_2087. Robot is no longer close fridge_140.
##############################
From agent.py
putin_executor(food_sugar_2070, cup_2087)
Robot is inside dining_room_1. Robot is close food_sugar_2070. Robot is close coffe_maker_147. Robot is close cup_2087. food_sugar_2070 released by right hand. 
##############################
