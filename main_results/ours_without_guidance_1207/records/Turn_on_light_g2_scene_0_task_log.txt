From agent.py
Reset goals: The sub-goals are: 
['Turn on the lights in the bedroom. Then turn on the lights in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_unlit_bedroom_light():
    # Function to check if there is a light off in the bedroom
    symbol unlit_bedroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bedroom)
    return unlit_bedroom_light

def has_unlit_bathroom_light():
    # Function to check if there is a light off in the bathroom
    symbol unlit_bathroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bathroom)
    return unlit_bathroom_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom
        
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        if has_unlit_bedroom_light():
            bind light_bedroom: item where:
                is_light(light_bedroom) and is_off(light_bedroom) and inside(light_bedroom, bedroom)
            turn_on_light(light_bedroom) # Turn on the light in the bedroom

        if has_unlit_bathroom_light():
            bind light_bathroom: item where:
                is_light(light_bathroom) and is_off(light_bathroom) and inside(light_bathroom, bathroom)
            turn_on_light(light_bathroom) # Turn on the light in the bathroom

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: bedroom; available variables: [Variable<light: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_unlit_bedroom_light(bedroom:item):
    # Function to check if there is a light off in the bedroom
    symbol unlit_bedroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bedroom)
    return unlit_bedroom_light

def has_unlit_bathroom_light(bathroom:item):
    # Function to check if there is a light off in the bathroom
    symbol unlit_bathroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bathroom)
    return unlit_bathroom_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom
        
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        if has_unlit_bedroom_light(bedroom):
            bind light_bedroom: item where:
                is_light(light_bedroom) and is_off(light_bedroom) and inside(light_bedroom, bedroom)
            turn_on_light(light_bedroom) # Turn on the light in the bedroom

        if has_unlit_bathroom_light(bathroom):
            bind light_bathroom: item where:
                is_light(light_bathroom) and is_off(light_bathroom) and inside(light_bathroom, bathroom)
            turn_on_light(light_bathroom) # Turn on the light in the bathroom

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_unlit_bedroom_light(bedroom:item):
    # Function to check if there is a light off in the bedroom
    symbol unlit_bedroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bedroom)
    return unlit_bedroom_light

def has_unlit_bathroom_light(bathroom:item):
    # Function to check if there is a light off in the bathroom
    symbol unlit_bathroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bathroom)
    return unlit_bathroom_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom
        
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        if has_unlit_bedroom_light(bedroom):
            bind light_bedroom: item where:
                is_light(light_bedroom) and is_off(light_bedroom) and inside(light_bedroom, bedroom)
            turn_on_light(light_bedroom) # Turn on the light in the bedroom

        if has_unlit_bathroom_light(bathroom):
            bind light_bathroom: item where:
                is_light(light_bathroom) and is_off(light_bathroom) and inside(light_bathroom, bathroom)
            turn_on_light(light_bathroom) # Turn on the light in the bathroom

##############################
From agent.py-> find a plan in act()
walk_executor(light_169)switchon_executor(light_169)walk_executor(light_64)switchon_executor(light_64)
##############################
From agent.py
walk_executor(light_169)
Find keyboard_168. Find chair_103. Find drawing_175. Find drawing_174. Robot is inside bedroom_67. Robot is close light_169. Robot is no longer inside bathroom_1.
##############################
From agent.py
switchon_executor(light_169)
Find phone_247. Robot is inside bedroom_67. Robot is close light_169. 
##############################
From agent.py
walk_executor(light_64)
Find towel_rack_32. Find mat_22. Robot is inside bathroom_1. Robot is close light_64. Robot is no longer inside bedroom_67.Robot is no longer close light_169.
##############################
From agent.py
switchon_executor(light_64)
Robot is inside bathroom_1. Robot is close light_64. 
##############################
