From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the table in the bedroom.', '2. Turn on the light in the bedroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2136_around_bookshelf_275(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_chair_2003_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior find_book_and_put_on_table(book:item, table:item):
    body:
        achieve on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, bedroom)
        # Select a table with a surface in the bedroom

        find_book_and_put_on_table(book, table)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_book_and_put_on_table(book:item, table:item):
    body:
        achieve on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, bedroom)
        # Select a table with a surface in the bedroom

        find_book_and_put_on_table(book, table)
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_275)exp(book_2136, bookshelf_275)walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_199)put_executor(book_2136, table_199)
##############################
From agent.py
walk_executor(bookshelf_275)
Find pencil_2020. Robot is inside home_office_241. Robot is close bookshelf_275. Robot is close floor_262. Robot is no longer inside dining_room_41.
##############################
From agent.py
exp(book_2136, bookshelf_275)
Failed to find book_2136 around bookshelf_275. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_124)open_executor(bookshelf_124)exp(book_2136, bookshelf_124)walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_199)put_executor(book_2136, table_199)
##############################
From agent.py
walk_executor(bookshelf_124)
Find drawing_110. Find book_2136. Find envelope_2055. Find book_2137. Find drawing_111. Robot is inside dining_room_41. Robot is close floor_42. Robot is close floor_43. Robot is close bookshelf_124. Robot is no longer inside home_office_241.Robot is no longer close bookshelf_275.Robot is no longer close floor_262.
##############################
From agent.py
open_executor(bookshelf_124)
Robot is inside dining_room_41. Robot is close floor_42. Robot is close floor_43. Robot is close bookshelf_124. 
##############################
From agent.py
exp(book_2136, bookshelf_124)
Find book_2136. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_199)put_executor(book_2136, table_199)
##############################
From agent.py
walk_executor(book_2136)
Robot is inside dining_room_41. Robot is close bookshelf_124. Robot is close book_2136. Robot is no longer close floor_42.Robot is no longer close floor_43.
##############################
From agent.py
grab_executor(book_2136)
Robot is inside dining_room_41. Robot is close bookshelf_124. Robot is close book_2136. Grabbing book_2136 by right hand. 
##############################
From agent.py
walk_executor(table_199)
Find mat_203. Find wooden_spoon_2000. Find drawing_201. Find drawing_202. Find tea_bag_2023. Robot is inside bedroom_162. Robot is close book_2136. Robot is close table_199. Robot is no longer inside dining_room_41.Robot is no longer close bookshelf_124.
##############################
From agent.py
put_executor(book_2136, table_199)
Robot is inside bedroom_162. Robot is close book_2136. Robot is close table_199. book_2136 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2139_around_dresser_274(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(vacuum_cleaner,dresser_instance)
        else:
            exp(vacuum_cleaner,dresser_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,dresser_instance]=True
        close[dresser_instance,vacuum_cleaner]=True
    

behavior find_detergent_2155_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation

def has_unlit_bedroom_light(bedroom:item):
    # Function to check if there is a light off in the bedroom
    symbol unlit_bedroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bedroom)
    return unlit_bedroom_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        if has_unlit_bedroom_light(bedroom):
            bind light_bedroom: item where:
                is_light(light_bedroom) and is_off(light_bedroom) and inside(light_bedroom, bedroom)
            turn_on_light(light_bedroom) # Turn on the light in the bedroom

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def has_unlit_bedroom_light(bedroom:item):
    # Function to check if there is a light off in the bedroom
    symbol unlit_bedroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bedroom)
    return unlit_bedroom_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        if has_unlit_bedroom_light(bedroom):
            bind light_bedroom: item where:
                is_light(light_bedroom) and is_off(light_bedroom) and inside(light_bedroom, bedroom)
            turn_on_light(light_bedroom) # Turn on the light in the bedroom

##############################
From agent.py-> find a plan in act()
walk_executor(light_212)switchon_executor(light_212)
##############################
From agent.py
walk_executor(light_212)
Robot is inside bedroom_162. Robot is close light_212. Robot is no longer close book_2136.Robot is no longer close table_199.
##############################
From agent.py
switchon_executor(light_212)
Robot is inside bedroom_162. Robot is close light_212. 
##############################
