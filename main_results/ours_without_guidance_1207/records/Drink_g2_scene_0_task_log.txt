From agent.py
Reset goals: The sub-goals are: 
['1. Get a cup and fill it with water.', '2. Place the cup in the freezer.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_cup_2064_around_sink_231(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#exp_behavior_end

#goal_representation

behavior find_cup():
    body:
        foreach cup: item:
            # Check all unvisited cups in the scene
            if is_cup(cup) and not visited(cup):
                observe(cup,"Check if the cup is grabbable and can hold water")
                # Determine if the cup can be used to hold water

behavior find_faucet():
    body:
        foreach sink: item:
            # Look for sinks that have not been visited and may have a faucet
            if is_sink(sink) and not visited(sink):
                observe(sink,"Check if there is a faucet close to the sink")
                # Determine if the sink has an accessible faucet

behavior __goal__():
    body:
        # Step 1: Find a cup
        symbol has_cup=exists cup: item : is_cup(cup) and not visited(cup) and grabbable(cup) and recipient(cup)
        if not has_cup:
            find_cup()
        if has_cup:
            bind cup: item where:
                is_cup(cup) and grabbable(cup) and recipient(cup) and not visited(cup)
            achieve_once inhand(cup)

        # Step 2: Find a faucet to fill the cup
        symbol has_faucet=exists faucet: item : is_faucet(faucet) and close_char(char, faucet) and not visited(faucet)
        if not has_faucet:
            find_faucet()
        if has_faucet:
            bind faucet: item where:
                is_faucet(faucet) and close_char(char, faucet)
            achieve_once is_on(faucet)
            achieve has_water(cup)
            achieve_once is_off(faucet)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cup; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_cd_player_2060_around_closetdrawer_388(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cd_player,closetdrawer_instance)
        else:
            exp(cd_player,closetdrawer_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,closetdrawer_instance]=True
        close[closetdrawer_instance,cd_player]=True
    

behavior find_cup_2064_around_sink_231(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#goal_representation
 
behavior find_cup():
    body:
        foreach cup: item:
            # Check all unvisited cups in the scene
            if is_cup(cup) and not visited(cup):
                observe(cup, "Check if the cup is grabbable and can hold water")
                # Determine if the cup can be used to hold water

behavior find_faucet():
    body:
        foreach sink: item:
            # Look for sinks that have not been visited and may have a faucet
            if is_sink(sink) and not visited(sink):
                observe(sink, "Check if there is a faucet close to the sink")
                # Determine if the sink has an accessible faucet

behavior __goal__():
    body:
        # Step 1: Find a cup
        symbol has_cup=exists cup: item : is_cup(cup) and not visited(cup) and grabbable(cup) and recipient(cup)
        if not has_cup:
            find_cup()
        if has_cup:
            bind cup: item where:
                is_cup(cup) and grabbable(cup) and recipient(cup) and not visited(cup)
            achieve_once inhand(cup)

        # Step 2: Find a faucet to fill the cup
        symbol has_faucet=exists faucet: item : is_faucet(faucet) and close_char(char, faucet) and not visited(faucet)
        if not has_faucet:
            find_faucet()
        if has_faucet:
            bind faucet: item where:
                is_faucet(faucet) and close_char(char, faucet)
            achieve_once is_on(faucet)
            achieve has_water(cup)
            achieve_once is_off(faucet)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cup; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation

behavior find_cup():
    body:
        foreach cup: item:
            # Check all unvisited cups in the scene
            if is_cup(cup) and not visited(cup):
                observe(cup, "Check if the cup is grabbable and can hold water")
                # Determine if the cup can be used to hold water

behavior find_faucet():
    body:
        foreach sink: item:
            # Look for sinks that have not been visited and may have a faucet
            if is_sink(sink) and not visited(sink):
                observe(sink, "Check if there is a faucet close to the sink")
                # Determine if the sink has an accessible faucet

behavior __goal__():
    body:
        # Step 1: Find a cup
        symbol has_cup=exists cup: item : is_cup(cup) and not visited(cup) and grabbable(cup) and recipient(cup)
        if not has_cup:
            find_cup()
        if has_cup:
            bind cup: item where:
                is_cup(cup) and grabbable(cup) and recipient(cup) and not visited(cup)
            achieve_once inhand(cup)

        # Step 2: Find a faucet to fill the cup
        symbol has_faucet=exists faucet: item : is_faucet(faucet) and close_char(char, faucet) and not visited(faucet)
        if not has_faucet:
            find_faucet()
        if has_faucet:
            bind faucet: item where:
                is_faucet(faucet) and close_char(char, faucet)
            achieve_once is_on(faucet)
            achieve has_water(cup)
            achieve_once is_off(faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_cup_2063_around_bathroom_counter_41(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cup,bathroom_counter_instance)
        else:
            exp(cup,bathroom_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_cup(cup:item):
    # Function to check if there is water in the cup
    symbol has_water=has_water(cup)
    return has_water

behavior get_a_cup_with_water(cup:item, faucet:item):
    body:
        achieve close(faucet, cup) # Ensure the cup is placed close to the faucet
        achieve open(faucet) # Open the faucet to fill the cup with water
        if has_water_in_cup(cup):
            achieve closed(faucet) # Close the faucet once the cup is filled

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) # Bind a cup we can use
        bind faucet: item where:
            is_faucet(faucet) # Bind a faucet
        get_a_cup_with_water(cup, faucet)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find a cup and fill it with water.', '2. Place the cup of water in the freezer.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_inside(x:item):
    # Function to check if an item has water
    symbol water_inside=has_water(x)
    return water_inside

behavior find_and_fill_cup(cup:item, sink:item):
    body:
        achieve_once has_water(cup)
        # Ensure the cup is filled with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        if not has_water_inside(cup):
            bind sink: item where:
                is_sink(sink)
            # Select a sink
            find_and_fill_cup(cup, sink)


#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_water_inside(x:item):
    # Function to check if an item has water
    symbol water_inside=has_water(x)
    return water_inside

behavior find_and_fill_cup(cup:item, sink:item):
    body:
        achieve_once has_water(cup)
        # Ensure the cup is filled with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        if not has_water_inside(cup):
            bind sink: item where:
                is_sink(sink)
            # Select a sink
            find_and_fill_cup(cup, sink)


##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(cup_2063, cupboard_229)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cupboard_229)
Find tray_296. Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. Robot is no longer inside bathroom_1.
##############################
From agent.py
open_executor(cupboard_229)
Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. 
##############################
From agent.py
exp(cup_2063, cupboard_229)
Failed to find cup_2063 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(stovefan_288)exp(cup_2063, stovefan_288)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(stovefan_288)
Find drawing_240. Find drawing_238. Find drawing_239. Robot is inside dining_room_201. Robot is close stovefan_288. Robot is no longer close wall_211.Robot is no longer close cupboard_229.
##############################
From agent.py
exp(cup_2063, stovefan_288)
Failed to find cup_2063 around stovefan_288. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer close stovefan_288.
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(cup_2063)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Find basket_for_clothes_2006. Find towel_rack_34. Find towel_rack_32. Find towel_rack_31. Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. Robot is no longer inside dining_room_201.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchon_executor(faucet_43)
Find drawing_176. Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_ice_cream_2025_around_fridge_289(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_freezer(cup:item, freezer:item):
    body:
        achieve inside(cup, freezer)
        # Place the cup of water inside the freezer

behavior close_the_freezer_door(freezer:item):
    body:
        achieve closed(freezer)
        # Close the freezer door

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup that has water in it
        
        bind freezer: item where:
            is_freezer(freezer)
        # Select a freezer
        
        place_in_freezer(cup, freezer)
        close_the_freezer_door(freezer)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_in_freezer(cup:item, freezer:item):
    body:
        achieve inside(cup, freezer)
        # Place the cup of water inside the freezer

behavior close_the_freezer_door(freezer:item):
    body:
        achieve closed(freezer)
        # Close the freezer door

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup that has water in it
        
        bind freezer: item where:
            is_freezer(freezer)
        # Select a freezer
        
        place_in_freezer(cup, freezer)
        close_the_freezer_door(freezer)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)putin_executor(cup_2063, fridge_289)close_executor(fridge_289)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Robot is inside dining_room_201. Robot is close cup_2063. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Robot is inside dining_room_201. Robot is close cup_2063. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
putin_executor(cup_2063, fridge_289)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. cup_2063 released by right hand. 
##############################
From agent.py
close_executor(fridge_289)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
Human Instruction: You need to place the cup of water into the freezer, not just the fridge. Re-evaluate the item's final location to ensure it is inside the freezer as per the task requirements.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for cup_2063 around cupboard_229.
Action 4: Walk to stovefan_288.
Action 5: look for cup_2063 around stovefan_288.
Action 6: Walk to kitchen_counter_230.
Action 7: look for cup_2063 around kitchen_counter_230.
Action 8: Walk to cup_2063.
Action 9: Grab cup_2063.
Action 10: Walk to faucet_43.
Action 11: Switch on faucet_43.
Action 12: Switch off faucet_43.
Action 13: Walk to fridge_289.
Action 14: Switch off fridge_289.
Action 15: Open fridge_289.
Action 16: Put cup_2063 into fridge_289.
Action 17: Close fridge_289.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_wallshelf_35(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

behavior find_bowl_2071_around_wallshelf_35(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior relocate_cup_to_freezer(cup:item, freezer:item):
    body:
        achieve inside(cup, freezer)
        # Ensure the cup is inside the freezer

behavior verify_freezer_storage(cup:item, freezer:item):
    # This behavior verifies the cup is properly stored inside the freezer
    body:
        observe(freezer, "Check if the cup is correctly stored inside the freezer")

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup that has water

        bind freezer: item where:
            is_freezer(freezer)
        # Select the freezer

        relocate_cup_to_freezer(cup, freezer)
        verify_freezer_storage(cup, freezer)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior relocate_cup_to_freezer(cup:item, freezer:item):
    body:
        achieve inside(cup, freezer)
        # Ensure the cup is inside the freezer

behavior verify_freezer_storage(cup:item, freezer:item):
    # This behavior verifies the cup is properly stored inside the freezer
    body:
        observe(freezer, "Check if the cup is correctly stored inside the freezer")

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup that has water

        bind freezer: item where:
            is_freezer(freezer)
        # Select the freezer

        relocate_cup_to_freezer(cup, freezer)
        verify_freezer_storage(cup, freezer)

##############################
From agent.py-> find a plan in act()
open_executor(fridge_289)obs(fridge_289, Check if the cup is correctly stored inside the freezer)
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
obs(fridge_289, Check if the cup is correctly stored inside the freezer)
Get this information:  food_fish_2021 is inside fridge_289. food_onion_2032 is inside fridge_289. milk_2043 is inside fridge_289. food_cake_2013 is inside fridge_289. food_potato_2035 is inside fridge_289. food_hamburger_2024 is inside fridge_289. food_cheese_2016 is inside fridge_289. food_kiwi_2027 is inside fridge_289. food_steak_2008 is inside fridge_289. food_donut_2019 is inside fridge_289. fridge_289 is facing drawing_239. food_snack_2038 is inside fridge_289. food_food_2022 is inside fridge_289. food_banana_2011 is inside fridge_289. food_oatmeal_2030 is inside fridge_289. food_vegetable_2041 is inside fridge_289. food_carrot_2014 is inside fridge_289. food_peanut_butter_2033 is inside fridge_289. cup_2063 is inside fridge_289. food_ice_cream_2025 is inside fridge_289. food_rice_2036 is inside fridge_289. food_chicken_2017 is inside fridge_289. fridge_289 is close to cupboard_229. fridge_289 is close to floor_6. fridge_289 is close to floor_7. fridge_289 is close to kitchen_counter_230. fridge_289 is close to wall_11. fridge_289 is close to wall_14. fridge_289 is close to ceiling_18. fridge_289 is close to mat_22. fridge_289 is close to sauce_2078. fridge_289 is close to shower_36. fridge_289 is close to toilet_37. fridge_289 is close to microwave_297. fridge_289 is close to door_44. fridge_289 is close to doorjamb_45. fridge_289 is close to drawing_174. fridge_289 is close to drawing_239. fridge_289 is close to drawing_240. fridge_289 is close to ceiling_216. fridge_289 is close to floor_202. fridge_289 is close to floor_203. fridge_289 is close to floor_77. fridge_289 is close to wall_211. fridge_289 is close to wall_85. fridge_289 is close to ceiling_95. fridge_289 is close to food_steak_2008. fridge_289 is close to food_apple_2009. fridge_289 is close to food_bacon_2010. fridge_289 is close to food_banana_2011. fridge_289 is close to food_bread_2012. fridge_289 is close to food_cake_2013. fridge_289 is close to food_carrot_2014. fridge_289 is close to food_cereal_2015. fridge_289 is close to food_cheese_2016. fridge_289 is close to food_chicken_2017. fridge_289 is close to food_dessert_2018. fridge_289 is close to food_donut_2019. fridge_289 is close to food_egg_2020. fridge_289 is close to food_fish_2021. fridge_289 is close to food_food_2022. fridge_289 is close to food_fruit_2023. fridge_289 is close to food_hamburger_2024. fridge_289 is close to food_ice_cream_2025. fridge_289 is close to food_jam_2026. fridge_289 is close to food_kiwi_2027. fridge_289 is close to food_lemon_2028. fridge_289 is close to food_noodles_2029. fridge_289 is close to food_oatmeal_2030. fridge_289 is close to food_orange_2031. fridge_289 is close to food_onion_2032. fridge_289 is close to food_peanut_butter_2033. fridge_289 is close to food_pizza_2034. fridge_289 is close to food_potato_2035. fridge_289 is close to food_rice_2036. fridge_289 is close to food_salt_2037. fridge_289 is close to food_snack_2038. fridge_289 is close to food_sugar_2039. fridge_289 is close to food_turkey_2040. fridge_289 is close to food_vegetable_2041. fridge_289 is close to dry_pasta_2042. fridge_289 is close to milk_2043. fridge_289 is close to trashcan_99. fridge_289 is close to character_65. fridge_289 is close to cup_2063. food_lemon_2028 is inside fridge_289. food_sugar_2039 is inside fridge_289. fridge_289 is on floor_202. fridge_289 is on floor_203. food_apple_2009 is inside fridge_289. food_egg_2020 is inside fridge_289. food_orange_2031 is inside fridge_289. food_bread_2012 is inside fridge_289. food_fruit_2023 is inside fridge_289. dry_pasta_2042 is inside fridge_289. food_cereal_2015 is inside fridge_289. food_pizza_2034 is inside fridge_289. food_dessert_2018 is inside fridge_289. food_jam_2026 is inside fridge_289. food_salt_2037 is inside fridge_289. fridge_289 is inside dining_room_201. food_bacon_2010 is inside fridge_289. food_noodles_2029 is inside fridge_289. sauce_2078 is inside fridge_289. food_turkey_2040 is inside fridge_289. fridge_289 is CLEAN. fridge_289 is OFF. fridge_289 is OPEN. fridge_289 is PLUGGED_IN.
##############################
From agent.py
Human Instruction: You need to ensure the cup of water is placed inside the freezer, not just the fridge, as the current records only mention it being in the fridge. Re-evaluate the storage to verify its placement inside the freezer.

The actions you have taken:
Action 1: Walk to cupboard_229.
Action 2: Open cupboard_229.
Action 3: look for cup_2063 around cupboard_229.
Action 4: Walk to stovefan_288.
Action 5: look for cup_2063 around stovefan_288.
Action 6: Walk to kitchen_counter_230.
Action 7: look for cup_2063 around kitchen_counter_230.
Action 8: Walk to cup_2063.
Action 9: Grab cup_2063.
Action 10: Walk to faucet_43.
Action 11: Switch on faucet_43.
Action 12: Switch off faucet_43.
Action 13: Walk to fridge_289.
Action 14: Switch off fridge_289.
Action 15: Open fridge_289.
Action 16: Put cup_2063 into fridge_289.
Action 17: Close fridge_289.
Action 18: Open fridge_289.
Action 19: Observe around fridge_289 with the question of Check if the cup is correctly stored inside the freezer.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_drawing_175_around_drawing_174(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==174
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

behavior find_book_2066_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_mat_22_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_pillow_182_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_towel_2056_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior check_in_freezer(cup:item, fridge:item):
    body:
        observe(fridge, "Check if the cup is correctly stored inside the freezer")
        # Observe to verify that the cup is inside the freezer
        
behavior relocate_to_freezer(cup:item, freezer:item):
    body:
        achieve inside(cup, freezer) 
        # Ensure the cup is inside the freezer

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select a cup that has water
        
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with ID 289
        
        bind freezer: item where:
            is_freezer(freezer) and inside(freezer, fridge)
        # Select the freezer section within the fridge
        
        check_in_freezer(cup, fridge)
        # Ensure that the current cup is checked inside the freezer
        
        relocate_to_freezer(cup, freezer)
        # Ensure the cup is moved to the freezer

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2056_around_towel_rack_31(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_correct_storage(cup:item, freezer:item):
    body:
        achieve inside(cup, freezer) # Ensure the cup is inside the freezer

behavior verify_freezer_storage(cup:item, fridge:item):
    body:
        observe(fridge, "Check if the cup needs to be moved from the fridge to the freezer")
        # Check if the cup is in the fridge but needs to be repositioned in the freezer

behavior close_the_freezer_door(freezer:item):
    body:
        achieve closed(freezer) # Close the freezer door

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup with water
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with ID 289
        bind freezer: item where:
            is_fridge(freezer) and fridge==freezer
        # Assume the fridge ID also refers to the freezer compartment

        verify_freezer_storage(cup, fridge)
        # Verify if the cups storage needs correction
        ensure_correct_storage(cup, freezer)
        # Ensure the cup is placed inside the freezer
        close_the_freezer_door(freezer)
        # Close the freezer door for completion

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior ensure_correct_storage(cup:item, freezer:item):
    body:
        achieve inside(cup, freezer) # Ensure the cup is inside the freezer

behavior verify_freezer_storage(cup:item, fridge:item):
    body:
        observe(fridge, "Check if the cup needs to be moved from the fridge to the freezer")
        # Check if the cup is in the fridge but needs to be repositioned in the freezer

behavior close_the_freezer_door(freezer:item):
    body:
        achieve closed(freezer) # Close the freezer door

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup with water
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with ID 289
        bind freezer: item where:
            is_fridge(freezer) and fridge==freezer
        # Assume the fridge ID also refers to the freezer compartment

        verify_freezer_storage(cup, fridge)
        # Verify if the cups storage needs correction
        ensure_correct_storage(cup, freezer)
        # Ensure the cup is placed inside the freezer
        close_the_freezer_door(freezer)
        # Close the freezer door for completion

##############################
From agent.py-> find a plan in act()
obs(fridge_289, Check if the cup needs to be moved from the fridge to the freezer)close_executor(fridge_289)
##############################
From agent.py
obs(fridge_289, Check if the cup needs to be moved from the fridge to the freezer)
Get this information:  food_fish_2021 is inside fridge_289. food_onion_2032 is inside fridge_289. milk_2043 is inside fridge_289. food_cake_2013 is inside fridge_289. food_potato_2035 is inside fridge_289. food_hamburger_2024 is inside fridge_289. food_cheese_2016 is inside fridge_289. food_kiwi_2027 is inside fridge_289. food_steak_2008 is inside fridge_289. food_donut_2019 is inside fridge_289. fridge_289 is facing drawing_239. food_snack_2038 is inside fridge_289. food_food_2022 is inside fridge_289. food_banana_2011 is inside fridge_289. food_oatmeal_2030 is inside fridge_289. food_vegetable_2041 is inside fridge_289. food_carrot_2014 is inside fridge_289. food_peanut_butter_2033 is inside fridge_289. cup_2063 is inside fridge_289. food_ice_cream_2025 is inside fridge_289. food_rice_2036 is inside fridge_289. food_chicken_2017 is inside fridge_289. fridge_289 is close to cupboard_229. fridge_289 is close to floor_6. fridge_289 is close to floor_7. fridge_289 is close to kitchen_counter_230. fridge_289 is close to wall_11. fridge_289 is close to wall_14. fridge_289 is close to ceiling_18. fridge_289 is close to mat_22. fridge_289 is close to sauce_2078. fridge_289 is close to shower_36. fridge_289 is close to toilet_37. fridge_289 is close to microwave_297. fridge_289 is close to door_44. fridge_289 is close to doorjamb_45. fridge_289 is close to drawing_174. fridge_289 is close to drawing_239. fridge_289 is close to drawing_240. fridge_289 is close to ceiling_216. fridge_289 is close to floor_202. fridge_289 is close to floor_203. fridge_289 is close to floor_77. fridge_289 is close to wall_211. fridge_289 is close to wall_85. fridge_289 is close to ceiling_95. fridge_289 is close to food_steak_2008. fridge_289 is close to food_apple_2009. fridge_289 is close to food_bacon_2010. fridge_289 is close to food_banana_2011. fridge_289 is close to food_bread_2012. fridge_289 is close to food_cake_2013. fridge_289 is close to food_carrot_2014. fridge_289 is close to food_cereal_2015. fridge_289 is close to food_cheese_2016. fridge_289 is close to food_chicken_2017. fridge_289 is close to food_dessert_2018. fridge_289 is close to food_donut_2019. fridge_289 is close to food_egg_2020. fridge_289 is close to food_fish_2021. fridge_289 is close to food_food_2022. fridge_289 is close to food_fruit_2023. fridge_289 is close to food_hamburger_2024. fridge_289 is close to food_ice_cream_2025. fridge_289 is close to food_jam_2026. fridge_289 is close to food_kiwi_2027. fridge_289 is close to food_lemon_2028. fridge_289 is close to food_noodles_2029. fridge_289 is close to food_oatmeal_2030. fridge_289 is close to food_orange_2031. fridge_289 is close to food_onion_2032. fridge_289 is close to food_peanut_butter_2033. fridge_289 is close to food_pizza_2034. fridge_289 is close to food_potato_2035. fridge_289 is close to food_rice_2036. fridge_289 is close to food_salt_2037. fridge_289 is close to food_snack_2038. fridge_289 is close to food_sugar_2039. fridge_289 is close to food_turkey_2040. fridge_289 is close to food_vegetable_2041. fridge_289 is close to dry_pasta_2042. fridge_289 is close to milk_2043. fridge_289 is close to trashcan_99. fridge_289 is close to character_65. fridge_289 is close to cup_2063. food_lemon_2028 is inside fridge_289. food_sugar_2039 is inside fridge_289. fridge_289 is on floor_202. fridge_289 is on floor_203. food_apple_2009 is inside fridge_289. food_egg_2020 is inside fridge_289. food_orange_2031 is inside fridge_289. food_bread_2012 is inside fridge_289. food_fruit_2023 is inside fridge_289. dry_pasta_2042 is inside fridge_289. food_cereal_2015 is inside fridge_289. food_pizza_2034 is inside fridge_289. food_dessert_2018 is inside fridge_289. food_jam_2026 is inside fridge_289. food_salt_2037 is inside fridge_289. fridge_289 is inside dining_room_201. food_bacon_2010 is inside fridge_289. food_noodles_2029 is inside fridge_289. sauce_2078 is inside fridge_289. food_turkey_2040 is inside fridge_289. fridge_289 is CLEAN. fridge_289 is OFF. fridge_289 is OPEN. fridge_289 is PLUGGED_IN.
##############################
From agent.py
close_executor(fridge_289)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
