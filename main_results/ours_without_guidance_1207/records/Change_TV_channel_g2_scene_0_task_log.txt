From agent.py
Reset goals: The sub-goals are: 
['Turn on the TV with the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_tv_with_remote(remote_control:item, tv:item):
    body:
        achieve close_char(char, remote_control)
        # Approach the remote control to ensure you can operate it

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control to operate the TV

        achieve is_on(tv)
        # Ensure the TV is turned on

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        bind tv: item where:
            is_television(tv)
        # Select the TV

        turn_on_tv_with_remote(remote_control, tv)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
def has_unlit_light(room:item):
    # Function to check if there is a light turned off in a room
    symbol unlit_light_exists=exists light: item : is_light(light) and is_off(light) and inside(light, room)
    return unlit_light_exists

behavior turn_on_tv(tv:item, remote:item):
    body:
        achieve is_on(tv) # Turn the TV on

behavior __goal__():
    body:
        bind remote: item where:
            is_remote_control(remote)
        # Select the remote control

        bind tv: item where:
            is_television(tv)
        # Select the television

        achieve close_char(char, remote)
        # Ensure you are close to the remote control

        if not is_on(tv):
            turn_on_tv(tv, remote)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Turn on the TV with the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_tvstand_225(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==225
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_tv(tv:item, remote_control:item):
    body:
        achieve is_on(tv)

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select a television

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select a remote control

        turn_on_tv(tv, remote_control)
        # Use the remote control to turn on the TV

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior turn_on_tv(tv:item, remote_control:item):
    body:
        achieve is_on(tv)

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select a television

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select a remote control

        turn_on_tv(tv, remote_control)
        # Use the remote control to turn on the TV

##############################
From agent.py-> find a plan in act()
walk_executor(television_248)switchon_executor(television_248)
##############################
From agent.py
walk_executor(television_248)
Find mat_236. Find drawing_241. Find drawing_242. Find drawing_243. Find phone_247. Find cd_2075. Find cd_player_2060. Find wall_clock_249. Robot is inside dining_room_201. Robot is close television_248. Robot is close tvstand_225. Robot is no longer inside bathroom_1.
##############################
From agent.py
switchon_executor(television_248)
Robot is inside dining_room_201. Robot is close television_248. Robot is close tvstand_225. 
##############################
