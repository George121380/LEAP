From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2139_around_cupboard_118(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(vacuum_cleaner,cupboard_instance)
        else:
            exp(vacuum_cleaner,cupboard_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,cupboard_instance]=True
        close[cupboard_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
def has_vacuum_cleaner():
    # Determine if a vacuum cleaner is present
    symbol has_vacuum=exists cleaner: item: is_vacuum_cleaner(cleaner)
    return has_vacuum

behavior prepare_and_use_vacuum(cleaner:item):
    body:
        if has_switch(cleaner) and has_plug(cleaner):
            achieve plugged(cleaner)
            achieve is_on(cleaner)
            # Ensure the vacuum is plugged in and turned on before use

        # Assuming direct action for vacuuming as the specific area to vacuum isnt detailed

        achieve clean(x) # This is a placeholder state indicating vacuuming the target area (x)

behavior __goal__():
    body:
        if has_vacuum_cleaner():
            bind cleaner: item where:
                is_vacuum_cleaner(cleaner)
            prepare_and_use_vacuum(cleaner)
        else:
            foreach cleaner: item:
                if is_vacuum_cleaner(cleaner) and not visited(cleaner):
                    observe(cleaner, "Locate and prepare the vacuum cleaner")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: x; available variables: [Variable<cleaner: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_vacuum_cleaner_2139_around_table_199(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(vacuum_cleaner,table_instance)
        else:
            exp(vacuum_cleaner,table_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,table_instance]=True
        close[table_instance,vacuum_cleaner]=True
    

#goal_representation
 
def has_cleaner(cleaner:item):
    # Function to check if the cleaner is a vacuum cleaner
    symbol is_cleaner=is_vacuum_cleaner(cleaner)
    return is_cleaner

def has_target_area(area:item):
    # Function to check if there is a floor to clean
    symbol has_area=is_floor(area)
    return has_area

behavior prepare_and_use_vacuum(cleaner:item, area:item):
    body:
        if has_switch(cleaner) and has_plug(cleaner):
            achieve plugged(cleaner)
            achieve is_on(cleaner)
            # Ensure the vacuum is plugged in and turned on before use

        achieve clean(area) # Indicate vacuuming the target area (floor)

behavior __goal__():
    body:
        if has_vacuum_cleaner():
            bind cleaner: item where:
                is_vacuum_cleaner(cleaner)
            # Bind a vacuum cleaner if one is already determined to exist

            if exists area: item : has_target_area(area):
                # Check if there is a floor to clean
                bind area: item where:
                    is_floor(area)
                # Bind the floor area as the target to clean

                prepare_and_use_vacuum(cleaner, area)
                # Use the vacuum cleaner on the defined floor area

        else:
            foreach cleaner: item:
                if is_vacuum_cleaner(cleaner) and not visited(cleaner):
                    observe(cleaner, "Locate and prepare the vacuum cleaner")
            # Observe to locate and identify potential vacuum cleaners

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function has_vacuum_cleaner not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mat_32_around_table_199(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

behavior find_mat_203_around_table_199(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

behavior find_vacuum_cleaner_2139_around_kitchen_counter_122(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(vacuum_cleaner,kitchen_counter_instance)
        else:
            exp(vacuum_cleaner,kitchen_counter_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,kitchen_counter_instance]=True
        close[kitchen_counter_instance,vacuum_cleaner]=True
    

#goal_representation
 
def has_vacuum_cleaner():
    # Function to check if there exists a vacuum cleaner
    symbol has_cleaner=exists cleaner: item: is_vacuum_cleaner(cleaner)
    return has_cleaner

behavior __goal__():
    body:
        if has_vacuum_cleaner():
            bind cleaner: item where:
                is_vacuum_cleaner(cleaner)
            # Bind a vacuum cleaner if one is already determined to exist

            if exists area: item : has_target_area(area):
                # Check if there is a floor to clean
                bind area: item where:
                    is_floor(area)
                # Bind the floor area as the target to clean

                prepare_and_use_vacuum(cleaner, area)
                # Use the vacuum cleaner on the defined floor area

        else:
            foreach cleaner: item:
                if is_vacuum_cleaner(cleaner) and not visited(cleaner):
                    observe(cleaner, "Locate and prepare the vacuum cleaner")
            # Observe to locate and identify potential vacuum cleaners

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_102_around_table_199(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

behavior find_vacuum_cleaner_2139_around_cupboard_118(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(vacuum_cleaner,cupboard_instance)
        else:
            exp(vacuum_cleaner,cupboard_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,cupboard_instance]=True
        close[cupboard_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
def is_vacuum_cleaner_plugged_in(vacuum_cleaner:item):
    # Check if the vacuum cleaner is plugged in
    symbol plugged_in=plugged(vacuum_cleaner)
    return plugged_in

behavior plug_in_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve plugged(vacuum_cleaner)

behavior turn_on_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve is_on(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        bind floor: item where:
            is_floor(floor)
        
        if not is_vacuum_cleaner_plugged_in(vacuum_cleaner):
            plug_in_vacuum_cleaner(vacuum_cleaner)
        
        turn_on_vacuum_cleaner(vacuum_cleaner)
        vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_vacuum_cleaner_plugged_in(vacuum_cleaner:item):
    # Check if the vacuum cleaner is plugged in
    symbol plugged_in=plugged(vacuum_cleaner)
    return plugged_in

behavior plug_in_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve plugged(vacuum_cleaner)

behavior turn_on_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve is_on(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        bind floor: item where:
            is_floor(floor)
        
        if not is_vacuum_cleaner_plugged_in(vacuum_cleaner):
            plug_in_vacuum_cleaner(vacuum_cleaner)
        
        turn_on_vacuum_cleaner(vacuum_cleaner)
        vacuum_floor(vacuum_cleaner, floor)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(vacuum_cleaner_2139, cupboard_118)walk_executor(vacuum_cleaner_2139)plugin_executor(vacuum_cleaner_2139)switchon_executor(vacuum_cleaner_2139)walk_executor(floor_10)wash_executor(floor_10)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Find tray_128. Find pot_78. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(vacuum_cleaner_2139, cupboard_118)
Failed to find vacuum_cleaner_2139 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(vacuum_cleaner_2139, cupboard_117)walk_executor(vacuum_cleaner_2139)plugin_executor(vacuum_cleaner_2139)switchon_executor(vacuum_cleaner_2139)walk_executor(floor_10)wash_executor(floor_10)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(vacuum_cleaner_2139, cupboard_117)
Failed to find vacuum_cleaner_2139 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_17)open_executor(bathroom_cabinet_17)exp(vacuum_cleaner_2139, bathroom_cabinet_17)walk_executor(vacuum_cleaner_2139)plugin_executor(vacuum_cleaner_2139)switchon_executor(vacuum_cleaner_2139)walk_executor(floor_10)wash_executor(floor_10)
##############################
From agent.py
walk_executor(bathroom_cabinet_17)
Find tooth_paste_2059. Find drawing_33. Robot is inside bathroom_1. Robot is close bathroom_cabinet_17. Robot is close tooth_paste_2059. Robot is no longer inside dining_room_41.Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
open_executor(bathroom_cabinet_17)
Robot is inside bathroom_1. Robot is close bathroom_cabinet_17. Robot is close tooth_paste_2059. 
##############################
From agent.py
exp(vacuum_cleaner_2139, bathroom_cabinet_17)
Failed to find vacuum_cleaner_2139 around bathroom_cabinet_17. 
##############################
From agent.py-> find a plan in act()
walk_executor(washing_machine_2079)open_executor(washing_machine_2079)exp(vacuum_cleaner_2139, washing_machine_2079)walk_executor(vacuum_cleaner_2139)plugin_executor(vacuum_cleaner_2139)switchon_executor(vacuum_cleaner_2139)walk_executor(floor_10)wash_executor(floor_10)
##############################
From agent.py
walk_executor(washing_machine_2079)
Robot is inside dining_room_41. Robot is close washing_machine_2079. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_cabinet_17.Robot is no longer close tooth_paste_2059.
##############################
From agent.py
open_executor(washing_machine_2079)
Robot is inside dining_room_41. Robot is close washing_machine_2079. 
##############################
From agent.py
exp(vacuum_cleaner_2139, washing_machine_2079)
Failed to find vacuum_cleaner_2139 around washing_machine_2079. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_129)open_executor(dishwasher_129)exp(vacuum_cleaner_2139, dishwasher_129)walk_executor(vacuum_cleaner_2139)plugin_executor(vacuum_cleaner_2139)switchon_executor(vacuum_cleaner_2139)walk_executor(floor_10)wash_executor(floor_10)
##############################
From agent.py
walk_executor(dishwasher_129)
Find detergent_2011. Find measuring_cup_2012. Robot is inside dining_room_41. Robot is close dishwasher_129. Robot is close detergent_2011. Robot is close measuring_cup_2012. Robot is no longer close washing_machine_2079.
##############################
From agent.py
open_executor(dishwasher_129)
Robot is inside dining_room_41. Robot is close dishwasher_129. Robot is close detergent_2011. Robot is close measuring_cup_2012. 
##############################
From agent.py
exp(vacuum_cleaner_2139, dishwasher_129)
Failed to find vacuum_cleaner_2139 around dishwasher_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(vacuum_cleaner_2139, kitchen_counter_122)walk_executor(vacuum_cleaner_2139)plugin_executor(vacuum_cleaner_2139)switchon_executor(vacuum_cleaner_2139)walk_executor(floor_10)wash_executor(floor_10)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Find spectacles_2153. Find fryingpan_2154. Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is no longer close dishwasher_129.Robot is no longer close detergent_2011.Robot is no longer close measuring_cup_2012.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find vacuum_cleaner_2139 ?
Answer: The vacuum_cleaner_2139 is located inside dining_room_41. You can find it near trashcan_99, which is placed close to it. Look for these items together to identify and retrieve the vacuum_cleaner_2139 easily.
Re-decompose: None

##############################
From agent.py
Human Instruction: The vacuum_cleaner_2139 is located inside dining_room_41. You can find it near trashcan_99, which is placed close to it. Look for these items together to identify and retrieve the vacuum_cleaner_2139 easily.

The actions you have taken:
Action 1: Walk to cupboard_118.
Action 2: Open cupboard_118.
Action 3: look for vacuum_cleaner_2139 around cupboard_118.
Action 4: Walk to cupboard_117.
Action 5: look for vacuum_cleaner_2139 around cupboard_117.
Action 6: Walk to bathroom_cabinet_17.
Action 7: Open bathroom_cabinet_17.
Action 8: look for vacuum_cleaner_2139 around bathroom_cabinet_17.
Action 9: Walk to washing_machine_2079.
Action 10: Open washing_machine_2079.
Action 11: look for vacuum_cleaner_2139 around washing_machine_2079.
Action 12: Walk to dishwasher_129.
Action 13: Open dishwasher_129.
Action 14: look for vacuum_cleaner_2139 around dishwasher_129.
Action 15: Walk to kitchen_counter_122.

##############################
From agent.py
exp(vacuum_cleaner_2139, kitchen_counter_122)
Failed to find vacuum_cleaner_2139 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(trashcan_99)exp(vacuum_cleaner_2139, trashcan_99)walk_executor(vacuum_cleaner_2139)plugin_executor(vacuum_cleaner_2139)switchon_executor(vacuum_cleaner_2139)walk_executor(floor_10)wash_executor(floor_10)
##############################
From agent.py
walk_executor(trashcan_99)
Find food_orange_2061. Find food_onion_2009. Find glue_2045. Find vacuum_cleaner_2139. Robot is inside dining_room_41. Robot is close trashcan_99. Robot is close food_orange_2061. Robot is close floor_51. Robot is close food_onion_2009. Robot is close glue_2045. Robot is no longer close kitchen_counter_122.
##############################
From agent.py
exp(vacuum_cleaner_2139, trashcan_99)
Find vacuum_cleaner_2139. 
##############################
From agent.py-> find a plan in act()
walk_executor(vacuum_cleaner_2139)plugin_executor(vacuum_cleaner_2139)switchon_executor(vacuum_cleaner_2139)walk_executor(floor_10)wash_executor(floor_10)
##############################
From agent.py
walk_executor(vacuum_cleaner_2139)
Robot is inside dining_room_41. Robot is close vacuum_cleaner_2139. Robot is no longer close trashcan_99.Robot is no longer close food_orange_2061.Robot is no longer close floor_51.Robot is no longer close food_onion_2009.Robot is no longer close glue_2045.
##############################
From agent.py
plugin_executor(vacuum_cleaner_2139)
Robot is inside dining_room_41. Robot is close vacuum_cleaner_2139. 
##############################
From agent.py
switchon_executor(vacuum_cleaner_2139)
Robot is inside dining_room_41. Robot is close vacuum_cleaner_2139. 
##############################
From agent.py
walk_executor(floor_10)
Robot is inside bathroom_1. Robot is close floor_10. Robot is no longer inside dining_room_41.Robot is no longer close vacuum_cleaner_2139.
##############################
From agent.py
wash_executor(floor_10)
Robot is inside bathroom_1. Robot is close floor_10. 
##############################
From agent.py
Human Instruction: You need to vacuum the floor using the vacuum cleaner instead of washing the floor. Move back to the floor that needs to be vacuumed and use the vacuum cleaner to clean it.

The actions you have taken:
Action 1: Walk to cupboard_118.
Action 2: Open cupboard_118.
Action 3: look for vacuum_cleaner_2139 around cupboard_118.
Action 4: Walk to cupboard_117.
Action 5: look for vacuum_cleaner_2139 around cupboard_117.
Action 6: Walk to bathroom_cabinet_17.
Action 7: Open bathroom_cabinet_17.
Action 8: look for vacuum_cleaner_2139 around bathroom_cabinet_17.
Action 9: Walk to washing_machine_2079.
Action 10: Open washing_machine_2079.
Action 11: look for vacuum_cleaner_2139 around washing_machine_2079.
Action 12: Walk to dishwasher_129.
Action 13: Open dishwasher_129.
Action 14: look for vacuum_cleaner_2139 around dishwasher_129.
Action 15: Walk to kitchen_counter_122.
Action 16: look for vacuum_cleaner_2139 around kitchen_counter_122.
Action 17: Walk to trashcan_99.
Action 18: look for vacuum_cleaner_2139 around trashcan_99.
Action 19: Walk to vacuum_cleaner_2139.
Action 20: Plug in vacuum_cleaner_2139.
Action 21: Switch on vacuum_cleaner_2139.
Action 22: Walk to floor_10.
Action 23: Wash floor_10.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_vacuum_on(vacuum:item):
    # Function to check if the vacuum cleaner is on
    symbol vacuum_on=is_on(vacuum)
    return vacuum_on

def is_floor_clean(floor:item):
    # Function to check if the floor is clean
    symbol floor_clean=clean(floor)
    return floor_clean

behavior clean_floor_with_vacuum(vacuum:item, floor:item):
    body:
        achieve plugged(vacuum) # Ensure the vacuum is plugged
        achieve is_on(vacuum) # Ensure the vacuum is turned on
        achieve clean(floor) # Clean the floor

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor) and id[floor] == 10
        # Select the floor with ID 10

        if not is_floor_clean(floor):
            clean_floor_with_vacuum(vacuum_cleaner, floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_mat_284_around_nightstand_192(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(mat,nightstand_instance)
        else:
            exp(mat,nightstand_instance)
    eff:
        unknown[mat]=False
        close[mat,nightstand_instance]=True
        close[nightstand_instance,mat]=True
    

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_the_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)
        # Ensure the floor is cleaned with the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner) and is_on(vacuum_cleaner)
        # Select the vacuum cleaner that is plugged in and turned on
        
        bind floor: item where:
            is_floor(floor) and not clean(floor)
        # Select the dirty floor that needs to be cleaned
        
        vacuum_the_floor(vacuum_cleaner, floor)
        # Clean the floor using the vacuum cleaner

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior vacuum_the_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)
        # Ensure the floor is cleaned with the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner) and is_on(vacuum_cleaner)
        # Select the vacuum cleaner that is plugged in and turned on
        
        bind floor: item where:
            is_floor(floor) and not clean(floor)
        # Select the dirty floor that needs to be cleaned
        
        vacuum_the_floor(vacuum_cleaner, floor)
        # Clean the floor using the vacuum cleaner

##############################
From agent.py-> find a plan in act()
walk_executor(floor_12)wash_executor(floor_12)
##############################
From agent.py
walk_executor(floor_12)
Robot is inside bathroom_1. Robot is close floor_12. Robot is no longer close floor_10.
##############################
From agent.py
wash_executor(floor_12)
Robot is inside bathroom_1. Robot is close floor_12. 
##############################
From agent.py
Human Instruction: You need to use the vacuum cleaner to vacuum the floor. Move back to the floor that needs to be vacuumed with the vacuum cleaner plugged in and turned on, and then vacuum the floor instead of washing it.

The actions you have taken:
Action 1: Walk to cupboard_118.
Action 2: Open cupboard_118.
Action 3: look for vacuum_cleaner_2139 around cupboard_118.
Action 4: Walk to cupboard_117.
Action 5: look for vacuum_cleaner_2139 around cupboard_117.
Action 6: Walk to bathroom_cabinet_17.
Action 7: Open bathroom_cabinet_17.
Action 8: look for vacuum_cleaner_2139 around bathroom_cabinet_17.
Action 9: Walk to washing_machine_2079.
Action 10: Open washing_machine_2079.
Action 11: look for vacuum_cleaner_2139 around washing_machine_2079.
Action 12: Walk to dishwasher_129.
Action 13: Open dishwasher_129.
Action 14: look for vacuum_cleaner_2139 around dishwasher_129.
Action 15: Walk to kitchen_counter_122.
Action 16: look for vacuum_cleaner_2139 around kitchen_counter_122.
Action 17: Walk to trashcan_99.
Action 18: look for vacuum_cleaner_2139 around trashcan_99.
Action 19: Walk to vacuum_cleaner_2139.
Action 20: Plug in vacuum_cleaner_2139.
Action 21: Switch on vacuum_cleaner_2139.
Action 22: Walk to floor_10.
Action 23: Wash floor_10.
Action 24: Walk to floor_12.
Action 25: Wash floor_12.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_mat_32_around_table_199(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

behavior find_brush_2002_around_bathroom_counter_18(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(brush,bathroom_counter_instance)
        else:
            exp(brush,bathroom_counter_instance)
    eff:
        unknown[brush]=False
        close[brush,bathroom_counter_instance]=True
        close[bathroom_counter_instance,brush]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)
        # Ensure the floor is cleaned by vacuuming it

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select the floor to be cleaned

        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in and turned on

        vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_the_floor(vacuum_cleaner:item, floor:item):
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        assert is_floor(floor)
        achieve close_char(char, vacuum_cleaner)
        # Assume that the vacuum cleaner is close, plugged, and turned on
        
        achieve close_char(char, floor) 
        # Move the character close to the floor to vacuum

        achieve close(vacuum_cleaner, floor) 
        # Ensure the vacuum cleaner is close to the floor being vacuumed

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor) and id[floor] == 10
        # Select floor 10

        vacuum_the_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_mat_284_around_nightstand_192(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(mat,nightstand_instance)
        else:
            exp(mat,nightstand_instance)
    eff:
        unknown[mat]=False
        close[mat,nightstand_instance]=True
        close[nightstand_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on
        achieve_clean(floor)
        # Ensure the floor is clean after vacuuming

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
            # Select the vacuum cleaner
        
        bind floor: item where:
            is_floor(floor)
            # Select the floor that needs cleaning
        
        vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_clean not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mat_32_around_table_114(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on
        achieve clean(floor)
        # Ensure the floor is clean after vacuuming

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
            # Select the vacuum cleaner
        
        bind floor: item where:
            is_floor(floor)
            # Select the floor that needs cleaning
        
        vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_rag_2052_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve close_char(char, vacuum_cleaner) # Approach the vacuum cleaner
        achieve plugged(vacuum_cleaner) # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner) # Turn the vacuum cleaner on
        achieve close_char(char, floor) # Approach the floor to be vacuumed
        achieve clean(floor) # Ensure the floor is clean

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor) and dirty(floor)
        # Select the dirty floor

        vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner) and is_on(vacuum_cleaner)
        # Select the vacuum cleaner that is already plugged in and turned on
        
        bind floor: item where:
            is_floor(floor) and dirty(floor)
        # Select a floor that needs to be vacuumed
        
        achieve clean(floor)
        # Vacuum the floor to achieve a clean state

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner) and is_on(vacuum_cleaner)
        # Select the vacuum cleaner that is already plugged in and turned on
        
        bind floor: item where:
            is_floor(floor) and dirty(floor)
        # Select a floor that needs to be vacuumed
        
        achieve clean(floor)
        # Vacuum the floor to achieve a clean state

##############################
From agent.py-> find a plan in act()
walk_executor(floor_13)wash_executor(floor_13)
##############################
From agent.py
walk_executor(floor_13)
Robot is inside bathroom_1. Robot is close floor_13. Robot is no longer close floor_12.
##############################
From agent.py
wash_executor(floor_13)
Robot is inside bathroom_1. Robot is close floor_13. 
##############################
From agent.py
Human Instruction: You need to use the plugged-in and turned-on vacuum cleaner to vacuum the floor instead of washing it. Return to the floor that needs to be vacuumed and perform the vacuuming task to achieve a clean state.

The actions you have taken:
Action 1: Walk to cupboard_118.
Action 2: Open cupboard_118.
Action 3: look for vacuum_cleaner_2139 around cupboard_118.
Action 4: Walk to cupboard_117.
Action 5: look for vacuum_cleaner_2139 around cupboard_117.
Action 6: Walk to bathroom_cabinet_17.
Action 7: Open bathroom_cabinet_17.
Action 8: look for vacuum_cleaner_2139 around bathroom_cabinet_17.
Action 9: Walk to washing_machine_2079.
Action 10: Open washing_machine_2079.
Action 11: look for vacuum_cleaner_2139 around washing_machine_2079.
Action 12: Walk to dishwasher_129.
Action 13: Open dishwasher_129.
Action 14: look for vacuum_cleaner_2139 around dishwasher_129.
Action 15: Walk to kitchen_counter_122.
Action 16: look for vacuum_cleaner_2139 around kitchen_counter_122.
Action 17: Walk to trashcan_99.
Action 18: look for vacuum_cleaner_2139 around trashcan_99.
Action 19: Walk to vacuum_cleaner_2139.
Action 20: Plug in vacuum_cleaner_2139.
Action 21: Switch on vacuum_cleaner_2139.
Action 22: Walk to floor_10.
Action 23: Wash floor_10.
Action 24: Walk to floor_12.
Action 25: Wash floor_12.
Action 26: Walk to floor_13.
Action 27: Wash floor_13.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior use_vacuum_cleaner(vacuum_cleaner:item, floor:item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in

        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on

        achieve clean(floor)
        # Ensure the floor is cleaned by vacuuming

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner]==2139
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor) and id[floor]==10
        # Select floor to be cleaned

        use_vacuum_cleaner(vacuum_cleaner, floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_mat_284_around_nightstand_192(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(mat,nightstand_instance)
        else:
            exp(mat,nightstand_instance)
    eff:
        unknown[mat]=False
        close[mat,nightstand_instance]=True
        close[nightstand_instance,mat]=True
    

behavior find_mat_203_around_bed_197(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==197
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(mat,bed_instance)
        else:
            exp(mat,bed_instance)
    eff:
        unknown[mat]=False
        close[mat,bed_instance]=True
        close[bed_instance,mat]=True
    

behavior find_rag_2025_around_faucet_121(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(rag,faucet_instance)
        else:
            exp(rag,faucet_instance)
    eff:
        unknown[rag]=False
        close[rag,faucet_instance]=True
        close[faucet_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
def has_turned_on_vacuum_cleaner(vacuum_cleaner:item):
    # Function to check if the vacuum cleaner is turned on
    symbol is_turned_on_vacuum=plugged(vacuum_cleaner) and is_on(vacuum_cleaner)
    return is_turned_on_vacuum

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor) # Achieve a clean state for the floor

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and has_turned_on_vacuum_cleaner(vacuum_cleaner)
        # Select the pluggedin and turnedon vacuum cleaner

        foreach floor: item:
            if is_floor(floor) and (dirty(floor) or has_water(floor)):
                vacuum_floor(vacuum_cleaner, floor)
        # Ensure no floor is dirty or has water vacuum the floors


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_turned_on_vacuum_cleaner(vacuum_cleaner:item):
    # Function to check if the vacuum cleaner is turned on
    symbol is_turned_on_vacuum=plugged(vacuum_cleaner) and is_on(vacuum_cleaner)
    return is_turned_on_vacuum

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor) # Achieve a clean state for the floor

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and has_turned_on_vacuum_cleaner(vacuum_cleaner)
        # Select the pluggedin and turnedon vacuum cleaner

        foreach floor: item:
            if is_floor(floor) and (dirty(floor) or has_water(floor)):
                vacuum_floor(vacuum_cleaner, floor)
        # Ensure no floor is dirty or has water vacuum the floors


##############################
From agent.py-> find a plan in act()
walk_executor(floor_14)wash_executor(floor_14)walk_executor(floor_43)wash_executor(floor_43)walk_executor(floor_47)wash_executor(floor_47)walk_executor(floor_49)wash_executor(floor_49)walk_executor(floor_51)wash_executor(floor_51)walk_executor(floor_165)wash_executor(floor_165)walk_executor(floor_168)wash_executor(floor_168)walk_executor(floor_169)wash_executor(floor_169)walk_executor(floor_170)wash_executor(floor_170)walk_executor(floor_171)wash_executor(floor_171)walk_executor(floor_172)wash_executor(floor_172)walk_executor(floor_259)wash_executor(floor_259)walk_executor(floor_260)wash_executor(floor_260)walk_executor(floor_262)wash_executor(floor_262)walk_executor(floor_264)wash_executor(floor_264)walk_executor(floor_265)wash_executor(floor_265)
##############################
From agent.py
walk_executor(floor_14)
Robot is inside bathroom_1. Robot is close floor_14. Robot is no longer close floor_13.
##############################
From agent.py
wash_executor(floor_14)
Robot is inside bathroom_1. Robot is close floor_14. 
##############################
From agent.py
walk_executor(floor_43)
Robot is inside dining_room_41. Robot is close floor_43. Robot is no longer inside bathroom_1.Robot is no longer close floor_14.
##############################
From agent.py
wash_executor(floor_43)
Robot is inside dining_room_41. Robot is close floor_43. 
##############################
From agent.py
walk_executor(floor_47)
Robot is inside dining_room_41. Robot is close floor_47. Robot is no longer close floor_43.
##############################
From agent.py
wash_executor(floor_47)
Robot is inside dining_room_41. Robot is close floor_47. 
##############################
From agent.py
walk_executor(floor_49)
Robot is inside dining_room_41. Robot is close floor_49. Robot is no longer close floor_47.
##############################
From agent.py
wash_executor(floor_49)
Robot is inside dining_room_41. Robot is close floor_49. 
##############################
From agent.py
walk_executor(floor_51)
Robot is inside dining_room_41. Robot is close floor_51. Robot is no longer close floor_49.
##############################
From agent.py
wash_executor(floor_51)
Robot is inside dining_room_41. Robot is close floor_51. 
##############################
From agent.py
walk_executor(floor_165)
Robot is inside bedroom_162. Robot is close floor_165. Robot is no longer inside dining_room_41.Robot is no longer close floor_51.
##############################
From agent.py
wash_executor(floor_165)
Robot is inside bedroom_162. Robot is close floor_165. 
##############################
From agent.py
walk_executor(floor_168)
Robot is inside bedroom_162. Robot is close floor_168. Robot is no longer close floor_165.
##############################
From agent.py
wash_executor(floor_168)
Robot is inside bedroom_162. Robot is close floor_168. 
##############################
From agent.py
walk_executor(floor_169)
Robot is inside bedroom_162. Robot is close floor_169. Robot is no longer close floor_168.
##############################
From agent.py
wash_executor(floor_169)
Robot is inside bedroom_162. Robot is close floor_169. 
##############################
From agent.py
walk_executor(floor_170)
Robot is inside bedroom_162. Robot is close floor_170. Robot is no longer close floor_169.
##############################
From agent.py
wash_executor(floor_170)
Robot is inside bedroom_162. Robot is close floor_170. 
##############################
From agent.py
walk_executor(floor_171)
Robot is inside bedroom_162. Robot is close floor_171. Robot is no longer close floor_170.
##############################
From agent.py
wash_executor(floor_171)
Robot is inside bedroom_162. Robot is close floor_171. 
##############################
From agent.py
walk_executor(floor_172)
Robot is inside bedroom_162. Robot is close floor_172. Robot is no longer close floor_171.
##############################
From agent.py
wash_executor(floor_172)
Robot is inside bedroom_162. Robot is close floor_172. 
##############################
From agent.py
walk_executor(floor_259)
Robot is inside home_office_241. Robot is close floor_259. Robot is no longer inside bedroom_162.Robot is no longer close floor_172.
##############################
From agent.py
wash_executor(floor_259)
Find check_2075. Find keyboard_278. Find blow_dryer_2057. Find brush_2002. Find stamp_2043. Find hanger_292. Find phone_2147. Find headset_2131. Find mat_284. Find pillow_287. Find cd_2145. Find shampoo_2019. Find stamp_2022. Find cat_2069. Find hanger_293. Find chair_271. Find cd_player_2129. Find pencil_2014. Find shoes_2033. Find clothes_pants_2036. Find phone_2017. Find remote_control_2124. Find drawing_288. Find pencil_2020. Find mouse_280. Find headset_2146. Find hanger_294. Find pillow_286. Find dvd_player_2130. Robot is inside home_office_241. Robot is close floor_259. 
##############################
From agent.py
walk_executor(floor_260)
Robot is inside home_office_241. Robot is close floor_260. Robot is no longer close floor_259.
##############################
From agent.py
wash_executor(floor_260)
Robot is inside home_office_241. Robot is close floor_260. 
##############################
From agent.py
walk_executor(floor_262)
Robot is inside home_office_241. Robot is close floor_262. Robot is no longer close floor_260.
##############################
From agent.py
wash_executor(floor_262)
Robot is inside home_office_241. Robot is close floor_262. 
##############################
From agent.py
walk_executor(floor_264)
Robot is inside home_office_241. Robot is close floor_264. Robot is no longer close floor_262.
##############################
From agent.py
wash_executor(floor_264)
Robot is inside home_office_241. Robot is close floor_264. 
##############################
From agent.py
walk_executor(floor_265)
Robot is inside home_office_241. Robot is close floor_265. Robot is no longer close floor_264.
##############################
From agent.py
wash_executor(floor_265)
Robot is inside home_office_241. Robot is close floor_265. 
##############################
From agent.py
Human Instruction: You have found and turned on the vacuum cleaner; however, you incorrectly washed the floors instead of vacuuming them. You need to return to each floor originally washed and use the vacuum cleaner to achieve the clean state by vacuuming.

The actions you have taken:
Action 1: Walk to cupboard_118.
Action 2: Open cupboard_118.
Action 3: look for vacuum_cleaner_2139 around cupboard_118.
Action 4: Walk to cupboard_117.
Action 5: look for vacuum_cleaner_2139 around cupboard_117.
Action 6: Walk to bathroom_cabinet_17.
Action 7: Open bathroom_cabinet_17.
Action 8: look for vacuum_cleaner_2139 around bathroom_cabinet_17.
Action 9: Walk to washing_machine_2079.
Action 10: Open washing_machine_2079.
Action 11: look for vacuum_cleaner_2139 around washing_machine_2079.
Action 12: Walk to dishwasher_129.
Action 13: Open dishwasher_129.
Action 14: look for vacuum_cleaner_2139 around dishwasher_129.
Action 15: Walk to kitchen_counter_122.
Action 16: look for vacuum_cleaner_2139 around kitchen_counter_122.
Action 17: Walk to trashcan_99.
Action 18: look for vacuum_cleaner_2139 around trashcan_99.
Action 19: Walk to vacuum_cleaner_2139.
Action 20: Plug in vacuum_cleaner_2139.
Action 21: Switch on vacuum_cleaner_2139.
Action 22: Walk to floor_10.
Action 23: Wash floor_10.
Action 24: Walk to floor_12.
Action 25: Wash floor_12.
Action 26: Walk to floor_13.
Action 27: Wash floor_13.
Action 28: Walk to floor_14.
Action 29: Wash floor_14.
Action 30: Walk to floor_43.
Action 31: Wash floor_43.
Action 32: Walk to floor_47.
Action 33: Wash floor_47.
Action 34: Walk to floor_49.
Action 35: Wash floor_49.
Action 36: Walk to floor_51.
Action 37: Wash floor_51.
Action 38: Walk to floor_165.
Action 39: Wash floor_165.
Action 40: Walk to floor_168.
Action 41: Wash floor_168.
Action 42: Walk to floor_169.
Action 43: Wash floor_169.
Action 44: Walk to floor_170.
Action 45: Wash floor_170.
Action 46: Walk to floor_171.
Action 47: Wash floor_171.
Action 48: Walk to floor_172.
Action 49: Wash floor_172.
Action 50: Walk to floor_259.
Action 51: Wash floor_259.
Action 52: Walk to floor_260.
Action 53: Wash floor_260.
Action 54: Walk to floor_262.
Action 55: Wash floor_262.
Action 56: Walk to floor_264.
Action 57: Wash floor_264.
Action 58: Walk to floor_265.
Action 59: Wash floor_265.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2125_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_detergent_2155_around_check_2075(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind check_instance:item where:
            is_check(check_instance) and id[check_instance]==2075
        achieve close_char(char,check_instance)
        if can_open(check_instance):
            achieve_once open(check_instance)
            exp(detergent,check_instance)
        else:
            exp(detergent,check_instance)
    eff:
        unknown[detergent]=False
        close[detergent,check_instance]=True
        close[check_instance,detergent]=True
    

behavior find_detergent_2011_around_oven_127(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(detergent,oven_instance)
        else:
            exp(detergent,oven_instance)
    eff:
        unknown[detergent]=False
        close[detergent,oven_instance]=True
        close[oven_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def has_floor_water(floor: item):
    # Function to check if a floor has water on it
    symbol has_water=has_water(floor)
    return has_water

behavior clean_floor_with_vacuum(vacuum_cleaner: item, floor: item):
    body:
        achieve clean(floor)  # Ensure the floor is clean by vacuuming it

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Bind the vacuum cleaner to use it

        foreach floor: item:
            # Iterate through all relevant floors that were washed
            if is_floor(floor) and has_floor_water(floor):
                # Check if the floor has been washed
                clean_floor_with_vacuum(vacuum_cleaner, floor)
                # Vacuum the floor to achieve a clean state

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2125_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_mat_32_around_mat_284(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==284
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def requires_vacuuming(floor:item):
    # Function to check if the floor requires vacuuming, meaning it was previously washed
    symbol needs_vacuuming=dirty(floor) and has_water(floor)
    return needs_vacuuming

behavior vacuum_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor) # Ensure the floor is clean

behavior __goal__():
    body:
        # Select the vacuum cleaner
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner) and is_on(vacuum_cleaner)

        foreach floor: item:
            if is_floor(floor) and requires_vacuuming(floor):
                # Vacuum each floor that was washed
                vacuum_floor(floor, vacuum_cleaner)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_mouse_213_around_computer_276(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_detergent_2011_around_fridge_126(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(detergent,fridge_instance)
        else:
            exp(detergent,fridge_instance)
    eff:
        unknown[detergent]=False
        close[detergent,fridge_instance]=True
        close[fridge_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def has_vacuum_cleaner(around:item):
    # Function to determine if a vacuum cleaner is around a particular item
    symbol found_vacuum_cleaner=exists vc:item: is_vacuum_cleaner(vc) and close(vc, around)
    return found_vacuum_cleaner

behavior use_vacuum_cleaner_on_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor) # Vacuum the floor to make it clean

behavior __goal__():
    body:
        foreach floor: item:
            if is_floor(floor) and has_water(floor):
                # Check for floors that have been washed and are possibly unclean
                bind vacuum_cleaner: item where:
                    is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner) and is_on(vacuum_cleaner)
                # Find the vacuum cleaner that is plugged in and turned on
                use_vacuum_cleaner_on_floor(floor, vacuum_cleaner)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2010_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_detergent_2011_around_bathroom_counter_18(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(detergent,bathroom_counter_instance)
        else:
            exp(detergent,bathroom_counter_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_counter_instance]=True
        close[bathroom_counter_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def is_floor_dirty(floor:item):
    # Function to check if the floor is dirty
    symbol is_dirty=dirty(floor)
    return is_dirty

def was_floor_washed(floor:item):
    # Function to check if the floor is washed
    symbol was_washed=has_water(floor)
    return was_washed

behavior vacuum_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor) # Ensure the floor is clean
      
behavior close_the_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve unplugged(vacuum_cleaner) # Unplug the vacuum cleaner
        achieve is_off(vacuum_cleaner) # Ensure the vacuum cleaner is off

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and is_on(vacuum_cleaner)
        # Bind the vacuum cleaner that is on and ready for use

        foreach floor: item:
            if is_floor(floor) and is_floor_dirty(floor) and was_floor_washed(floor):
                vacuum_floor(floor, vacuum_cleaner)
        # Vacuum all floors that were previously washed to ensure they are clean

        close_the_vacuum_cleaner(vacuum_cleaner)
        # Ensure the vacuum cleaner is properly turned off and unplugged after use

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_floor_dirty(floor:item):
    # Function to check if the floor is dirty
    symbol is_dirty=dirty(floor)
    return is_dirty

def was_floor_washed(floor:item):
    # Function to check if the floor is washed
    symbol was_washed=has_water(floor)
    return was_washed

behavior vacuum_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor) # Ensure the floor is clean
      
behavior close_the_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve unplugged(vacuum_cleaner) # Unplug the vacuum cleaner
        achieve is_off(vacuum_cleaner) # Ensure the vacuum cleaner is off

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and is_on(vacuum_cleaner)
        # Bind the vacuum cleaner that is on and ready for use

        foreach floor: item:
            if is_floor(floor) and is_floor_dirty(floor) and was_floor_washed(floor):
                vacuum_floor(floor, vacuum_cleaner)
        # Vacuum all floors that were previously washed to ensure they are clean

        close_the_vacuum_cleaner(vacuum_cleaner)
        # Ensure the vacuum cleaner is properly turned off and unplugged after use

##############################
From agent.py-> find a plan in act()
walk_executor(vacuum_cleaner_2139)switchoff_executor(vacuum_cleaner_2139)plugout_executor(vacuum_cleaner_2139)
##############################
From agent.py
walk_executor(vacuum_cleaner_2139)
Robot is inside dining_room_41. Robot is close vacuum_cleaner_2139. Robot is no longer inside home_office_241.Robot is no longer close floor_265.
##############################
From agent.py
switchoff_executor(vacuum_cleaner_2139)
Robot is inside dining_room_41. Robot is close vacuum_cleaner_2139. 
##############################
From agent.py
plugout_executor(vacuum_cleaner_2139)
Robot is inside dining_room_41. Robot is close vacuum_cleaner_2139. 
##############################
From agent.py
Human Instruction: You found and plugged in the vacuum cleaner and switched it on, but you washed the floors instead of vacuuming them. You need to return to each floor originally washed and use the vacuum cleaner to achieve the clean state by vacuuming.

The actions you have taken:
Action 1: Walk to cupboard_118.
Action 2: Open cupboard_118.
Action 3: look for vacuum_cleaner_2139 around cupboard_118.
Action 4: Walk to cupboard_117.
Action 5: look for vacuum_cleaner_2139 around cupboard_117.
Action 6: Walk to bathroom_cabinet_17.
Action 7: Open bathroom_cabinet_17.
Action 8: look for vacuum_cleaner_2139 around bathroom_cabinet_17.
Action 9: Walk to washing_machine_2079.
Action 10: Open washing_machine_2079.
Action 11: look for vacuum_cleaner_2139 around washing_machine_2079.
Action 12: Walk to dishwasher_129.
Action 13: Open dishwasher_129.
Action 14: look for vacuum_cleaner_2139 around dishwasher_129.
Action 15: Walk to kitchen_counter_122.
Action 16: look for vacuum_cleaner_2139 around kitchen_counter_122.
Action 17: Walk to trashcan_99.
Action 18: look for vacuum_cleaner_2139 around trashcan_99.
Action 19: Walk to vacuum_cleaner_2139.
Action 20: Plug in vacuum_cleaner_2139.
Action 21: Switch on vacuum_cleaner_2139.
Action 22: Walk to floor_10.
Action 23: Wash floor_10.
Action 24: Walk to floor_12.
Action 25: Wash floor_12.
Action 26: Walk to floor_13.
Action 27: Wash floor_13.
Action 28: Walk to floor_14.
Action 29: Wash floor_14.
Action 30: Walk to floor_43.
Action 31: Wash floor_43.
Action 32: Walk to floor_47.
Action 33: Wash floor_47.
Action 34: Walk to floor_49.
Action 35: Wash floor_49.
Action 36: Walk to floor_51.
Action 37: Wash floor_51.
Action 38: Walk to floor_165.
Action 39: Wash floor_165.
Action 40: Walk to floor_168.
Action 41: Wash floor_168.
Action 42: Walk to floor_169.
Action 43: Wash floor_169.
Action 44: Walk to floor_170.
Action 45: Wash floor_170.
Action 46: Walk to floor_171.
Action 47: Wash floor_171.
Action 48: Walk to floor_172.
Action 49: Wash floor_172.
Action 50: Walk to floor_259.
Action 51: Wash floor_259.
Action 52: Walk to floor_260.
Action 53: Wash floor_260.
Action 54: Walk to floor_262.
Action 55: Wash floor_262.
Action 56: Walk to floor_264.
Action 57: Wash floor_264.
Action 58: Walk to floor_265.
Action 59: Wash floor_265.
Action 60: Walk to vacuum_cleaner_2139.
Action 61: Switch off vacuum_cleaner_2139.
Action 62: Plug out vacuum_cleaner_2139.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor) 

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is selected and plugged in

        bind floor_10: item where:
            is_floor(floor_10) and id[floor_10] == 10
        # Select floor 10 
        vacuum_floor(floor_10, vacuum_cleaner)

        bind floor_12: item where:
            is_floor(floor_12) and id[floor_12] == 12
        # Select floor 12 
        vacuum_floor(floor_12, vacuum_cleaner)

        bind floor_13: item where:
            is_floor(floor_13) and id[floor_13] == 13
        # Select floor 13 
        vacuum_floor(floor_13, vacuum_cleaner)

        bind floor_14: item where:
            is_floor(floor_14) and id[floor_14] == 14
        # Select floor 14 
        vacuum_floor(floor_14, vacuum_cleaner)

        bind floor_43: item where:
            is_floor(floor_43) and id[floor_43] == 43
        # Select floor 43 
        vacuum_floor(floor_43, vacuum_cleaner)

        bind floor_47: item where:
            is_floor(floor_47) and id[floor_47] == 47
        # Select floor 47 
        vacuum_floor(floor_47, vacuum_cleaner)

        bind floor_49: item where:
            is_floor(floor_49) and id[floor_49] == 49
        # Select floor 49 
        vacuum_floor(floor_49, vacuum_cleaner)

        bind floor_51: item where:
            is_floor(floor_51) and id[floor_51] == 51
        # Select floor 51 
        vacuum_floor(floor_51, vacuum_cleaner)

        bind floor_165: item where:
            is_floor(floor_165) and id[floor_165] == 165
        # Select floor 165 
        vacuum_floor(floor_165, vacuum_cleaner)

        bind floor_168: item where:
            is_floor(floor_168) and id[floor_168] == 168
        # Select floor 168 
        vacuum_floor(floor_168, vacuum_cleaner)

        bind floor_169: item where:
            is_floor(floor_169) and id[floor_169] == 169
        # Select floor 169 
        vacuum_floor(floor_169, vacuum_cleaner)

        bind floor_170: item where:
            is_floor(floor_170) and id[floor_170] == 170
        # Select floor 170 
        vacuum_floor(floor_170, vacuum_cleaner)

        bind floor_171: item where:
            is_floor(floor_171) and id[floor_171] == 171
        # Select floor 171 
        vacuum_floor(floor_171, vacuum_cleaner)

        bind floor_172: item where:
            is_floor(floor_172) and id[floor_172] == 172
        # Select floor 172 
        vacuum_floor(floor_172, vacuum_cleaner)

        bind floor_259: item where:
            is_floor(floor_259) and id[floor_259] == 259
        # Select floor 259 
        vacuum_floor(floor_259, vacuum_cleaner)

        bind floor_260: item where:
            is_floor(floor_260) and id[floor_260] == 260
        # Select floor 260 
        vacuum_floor(floor_260, vacuum_cleaner)

        bind floor_262: item where:
            is_floor(floor_262) and id[floor_262] == 262
        # Select floor 262 
        vacuum_floor(floor_262, vacuum_cleaner)

        bind floor_264: item where:
            is_floor(floor_264) and id[floor_264] == 264
        # Select floor 264 
        vacuum_floor(floor_264, vacuum_cleaner)

        bind floor_265: item where:
            is_floor(floor_265) and id[floor_265] == 265
        # Select floor 265 
        vacuum_floor(floor_265, vacuum_cleaner)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_envelope_2055_around_nightstand_192(envelope:item):
    goal: not unknown(envelope)
    body:
        assert is_envelope(envelope)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(envelope,nightstand_instance)
        else:
            exp(envelope,nightstand_instance)
    eff:
        unknown[envelope]=False
        close[envelope,nightstand_instance]=True
        close[nightstand_instance,envelope]=True
    

behavior find_soap_2010_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_toilet_paper_2076_around_toilet_15(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==15
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
def is_vacuum_cleaner_found(vacuum_cleaner:item):
    # Check if the vacuum cleaner has already been found
    symbol found=visited(vacuum_cleaner)
    return found

behavior vacuum_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        if not is_vacuum_cleaner_found(vacuum_cleaner):
            # If the vacuum cleaner hasnt been found, locate it
            observe(vacuum_cleaner, "Locate the vacuum cleaner")

        foreach floor: item:
            if is_floor(floor) and has_water(floor):
                # Vacuum each floor that was washed before
                vacuum_floor(floor, vacuum_cleaner)

        achieve is_off(vacuum_cleaner) # Turn off the vacuum cleaner
        achieve unplugged(vacuum_cleaner) # Unplug the vacuum cleaner

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_vacuum_cleaner_found(vacuum_cleaner:item):
    # Check if the vacuum cleaner has already been found
    symbol found=visited(vacuum_cleaner)
    return found

behavior vacuum_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        if not is_vacuum_cleaner_found(vacuum_cleaner):
            # If the vacuum cleaner hasnt been found, locate it
            observe(vacuum_cleaner, "Locate the vacuum cleaner")

        foreach floor: item:
            if is_floor(floor) and has_water(floor):
                # Vacuum each floor that was washed before
                vacuum_floor(floor, vacuum_cleaner)

        achieve is_off(vacuum_cleaner) # Turn off the vacuum cleaner
        achieve unplugged(vacuum_cleaner) # Unplug the vacuum cleaner

##############################
From agent.py-> find a plan in act()
obs(vacuum_cleaner_2139, Locate the vacuum cleaner)
##############################
From agent.py
obs(vacuum_cleaner_2139, Locate the vacuum cleaner)
Get this information:  vacuum_cleaner_2139 is close to trashcan_99. vacuum_cleaner_2139 is close to character_240. vacuum_cleaner_2139 is inside dining_room_41. vacuum_cleaner_2139 is PLUGGED_OUT. vacuum_cleaner_2139 is OFF. vacuum_cleaner_2139 is CLEAN.
##############################
From agent.py
Human Instruction: You need to return to each floor that was originally washed and use the vacuum cleaner to vacuum them instead. This will achieve the clean state required for completing the task.

The actions you have taken:
Action 1: Walk to cupboard_118.
Action 2: Open cupboard_118.
Action 3: look for vacuum_cleaner_2139 around cupboard_118.
Action 4: Walk to cupboard_117.
Action 5: look for vacuum_cleaner_2139 around cupboard_117.
Action 6: Walk to bathroom_cabinet_17.
Action 7: Open bathroom_cabinet_17.
Action 8: look for vacuum_cleaner_2139 around bathroom_cabinet_17.
Action 9: Walk to washing_machine_2079.
Action 10: Open washing_machine_2079.
Action 11: look for vacuum_cleaner_2139 around washing_machine_2079.
Action 12: Walk to dishwasher_129.
Action 13: Open dishwasher_129.
Action 14: look for vacuum_cleaner_2139 around dishwasher_129.
Action 15: Walk to kitchen_counter_122.
Action 16: look for vacuum_cleaner_2139 around kitchen_counter_122.
Action 17: Walk to trashcan_99.
Action 18: look for vacuum_cleaner_2139 around trashcan_99.
Action 19: Walk to vacuum_cleaner_2139.
Action 20: Plug in vacuum_cleaner_2139.
Action 21: Switch on vacuum_cleaner_2139.
Action 22: Walk to floor_10.
Action 23: Wash floor_10.
Action 24: Walk to floor_12.
Action 25: Wash floor_12.
Action 26: Walk to floor_13.
Action 27: Wash floor_13.
Action 28: Walk to floor_14.
Action 29: Wash floor_14.
Action 30: Walk to floor_43.
Action 31: Wash floor_43.
Action 32: Walk to floor_47.
Action 33: Wash floor_47.
Action 34: Walk to floor_49.
Action 35: Wash floor_49.
Action 36: Walk to floor_51.
Action 37: Wash floor_51.
Action 38: Walk to floor_165.
Action 39: Wash floor_165.
Action 40: Walk to floor_168.
Action 41: Wash floor_168.
Action 42: Walk to floor_169.
Action 43: Wash floor_169.
Action 44: Walk to floor_170.
Action 45: Wash floor_170.
Action 46: Walk to floor_171.
Action 47: Wash floor_171.
Action 48: Walk to floor_172.
Action 49: Wash floor_172.
Action 50: Walk to floor_259.
Action 51: Wash floor_259.
Action 52: Walk to floor_260.
Action 53: Wash floor_260.
Action 54: Walk to floor_262.
Action 55: Wash floor_262.
Action 56: Walk to floor_264.
Action 57: Wash floor_264.
Action 58: Walk to floor_265.
Action 59: Wash floor_265.
Action 60: Walk to vacuum_cleaner_2139.
Action 61: Switch off vacuum_cleaner_2139.
Action 62: Plug out vacuum_cleaner_2139.
Action 63: Observe around vacuum_cleaner_2139 with the question of Locate the vacuum cleaner.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_scrabble_2031_around_bookshelf_275(scrabble:item):
    goal: not unknown(scrabble)
    body:
        assert is_scrabble(scrabble)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(scrabble,bookshelf_instance)
        else:
            exp(scrabble,bookshelf_instance)
    eff:
        unknown[scrabble]=False
        close[scrabble,bookshelf_instance]=True
        close[bookshelf_instance,scrabble]=True
    

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2010_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_mat_284_around_mat_284(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==284
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_food_bread_2084_around_fridge_126(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

behavior find_soap_2125_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior switch_on_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve is_on(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner)
        # Select the vacuum cleaner that is plugged in

        foreach floor: item:
            if is_floor(floor) and not clean(floor):
                # Check for floors that have not yet been vacuumed
                switch_on_vacuum_cleaner(vacuum_cleaner)
                # Ensure the vacuum cleaner is turned on
                vacuum_floor(vacuum_cleaner, floor)
                # Vacuum the floor

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_mat_203_around_mat_284(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==284
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_floor_with_vacuum(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        foreach floor: item:
            if is_floor(floor) and has_water(floor):
                # Iterate over each floor with water that needs to be vacuumed
                clean_floor_with_vacuum(floor, vacuum_cleaner)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2010_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_mat_203_around_mat_284(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==284
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_detergent_2011_around_fridge_126(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(detergent,fridge_instance)
        else:
            exp(detergent,fridge_instance)
    eff:
        unknown[detergent]=False
        close[detergent,fridge_instance]=True
        close[fridge_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def has_washed_and_dirty_floors():
    # Function to check if there are floors that were washed and are still dirty
    symbol has_floor=exists f: item: is_floor(f) and has_water(f) and dirty(f)
    return has_floor

behavior vacuum_floor(floor:item):
    body:
        achieve clean(floor) # Ensure the floor is clean by vacuuming

behavior prepare_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve plugged(vacuum_cleaner) # Ensure vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner) # Ensure vacuum cleaner is turned on

behavior finish_vacuuming(vacuum_cleaner:item):
    body:
        achieve is_off(vacuum_cleaner) # Turn vacuum cleaner off
        achieve unplugged(vacuum_cleaner) # Unplug the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2139
        # Select the vacuum cleaner with the specific ID

        if has_washed_and_dirty_floors():
            # If there are dirty floors that have been washed
            prepare_vacuum_cleaner(vacuum_cleaner)
            
            foreach floor: item:
                if is_floor(floor) and has_water(floor) and dirty(floor):
                    vacuum_floor(floor)
            # Vacuum each eligible floor

            finish_vacuuming(vacuum_cleaner)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2010_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def has_washed_floor(floor:item):
    # Function to check if a floor has already been washed
    symbol washed_floor=visited(floor) and has_water(floor)
    return washed_floor

behavior vacuum_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor) # Ensure the floor is clean after vacuuming

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and is_on(vacuum_cleaner) and plugged(vacuum_cleaner)
        # Bind the vacuum cleaner that is currently plugged in and on

        foreach floor: item:
            if is_floor(floor) and has_washed_floor(floor):
                # Vacuum all washed floors
                vacuum_floor(floor, vacuum_cleaner)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2010_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_soap_2125_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_cup_2049_around_table_199(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_toilet_paper_2076_around_toilet_15(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==15
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

behavior find_rag_2052_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(floor: item, vacuum_cleaner: item):
    body:
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and has_switch(vacuum_cleaner) and has_plug(vacuum_cleaner)
        # Select the vacuum cleaner with a switch and plug

        foreach floor: item:
            if is_floor(floor) and dirty(floor):
                vacuum_floor(floor, vacuum_cleaner)
        # Vacuum all dirty floors

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_scrabble_2031_around_bookshelf_275(scrabble:item):
    goal: not unknown(scrabble)
    body:
        assert is_scrabble(scrabble)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(scrabble,bookshelf_instance)
        else:
            exp(scrabble,bookshelf_instance)
    eff:
        unknown[scrabble]=False
        close[scrabble,bookshelf_instance]=True
        close[bookshelf_instance,scrabble]=True
    

behavior find_food_bacon_2082_around_fridge_126(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

behavior find_soap_2010_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_food_snack_2110_around_fridge_126(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_snack,fridge_instance)
        else:
            exp(food_snack,fridge_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,fridge_instance]=True
        close[fridge_instance,food_snack]=True
    

behavior find_toilet_paper_2076_around_toilet_15(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==15
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

behavior find_rag_2025_around_curtain_206(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==206
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(rag,curtain_instance)
        else:
            exp(rag,curtain_instance)
    eff:
        unknown[rag]=False
        close[rag,curtain_instance]=True
        close[curtain_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior operate_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)

behavior clean_floor_with_vacuum(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor)

behavior turn_off_and_unplug_vacuum(vacuum_cleaner:item):
    body:
        achieve is_off(vacuum_cleaner)
        achieve unplugged(vacuum_cleaner)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and close_char(char, vacuum_cleaner)
        # Select the vacuum cleaner close to the character

        operate_vacuum_cleaner(vacuum_cleaner)

        foreach floor: item:
            if is_floor(floor) and id[floor] in [10, 12, 13, 14, 43, 47, 49, 51, 165, 168, 169, 170, 171, 172, 259, 260, 262, 264, 265]:
                clean_floor_with_vacuum(floor, vacuum_cleaner)
        # Clean each washed floor with the vacuum cleaner

        turn_off_and_unplug_vacuum(vacuum_cleaner)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'in') at line 5716, column 46.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_clothes_hat_2117_around_hanger_293(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==293
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_hat,hanger_instance)
        else:
            exp(clothes_hat,hanger_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,hanger_instance]=True
        close[hanger_instance,clothes_hat]=True
    

#goal_representation
 
behavior operate_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)

behavior clean_floor_with_vacuum(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor)

behavior turn_off_and_unplug_vacuum(vacuum_cleaner:item):
    body:
        achieve is_off(vacuum_cleaner)
        achieve unplugged(vacuum_cleaner)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and close_char(char, vacuum_cleaner)
        # Select the vacuum cleaner close to the character

        operate_vacuum_cleaner(vacuum_cleaner)

        foreach floor: item:
            if is_floor(floor) and (id[floor] == 10 or id[floor] == 12 or id[floor] == 13 or id[floor] == 14 or id[floor] == 43 or id[floor] == 47 or id[floor] == 49 or id[floor] == 51 or id[floor] == 165 or id[floor] == 168 or id[floor] == 169 or id[floor] == 170 or id[floor] == 171 or id[floor] == 172 or id[floor] == 259 or id[floor] == 260 or id[floor] == 262 or id[floor] == 264 or id[floor] == 265):
                clean_floor_with_vacuum(floor, vacuum_cleaner)
        # Clean each washed floor with the vacuum cleaner

        turn_off_and_unplug_vacuum(vacuum_cleaner)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior operate_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)

behavior clean_floor_with_vacuum(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor)

behavior turn_off_and_unplug_vacuum(vacuum_cleaner:item):
    body:
        achieve is_off(vacuum_cleaner)
        achieve unplugged(vacuum_cleaner)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and close_char(char, vacuum_cleaner)
        # Select the vacuum cleaner close to the character

        operate_vacuum_cleaner(vacuum_cleaner)

        foreach floor: item:
            if is_floor(floor) and (id[floor] == 10 or id[floor] == 12 or id[floor] == 13 or id[floor] == 14 or id[floor] == 43 or id[floor] == 47 or id[floor] == 49 or id[floor] == 51 or id[floor] == 165 or id[floor] == 168 or id[floor] == 169 or id[floor] == 170 or id[floor] == 171 or id[floor] == 172 or id[floor] == 259 or id[floor] == 260 or id[floor] == 262 or id[floor] == 264 or id[floor] == 265):
                clean_floor_with_vacuum(floor, vacuum_cleaner)
        # Clean each washed floor with the vacuum cleaner

        turn_off_and_unplug_vacuum(vacuum_cleaner)

##############################
From agent.py-> find a plan in act()
plugin_executor(vacuum_cleaner_2139)switchon_executor(vacuum_cleaner_2139)switchoff_executor(vacuum_cleaner_2139)plugout_executor(vacuum_cleaner_2139)
##############################
From agent.py
plugin_executor(vacuum_cleaner_2139)
Robot is inside dining_room_41. Robot is close vacuum_cleaner_2139. 
##############################
From agent.py
switchon_executor(vacuum_cleaner_2139)
Robot is inside dining_room_41. Robot is close vacuum_cleaner_2139. 
##############################
From agent.py
switchoff_executor(vacuum_cleaner_2139)
Robot is inside dining_room_41. Robot is close vacuum_cleaner_2139. 
##############################
From agent.py
plugout_executor(vacuum_cleaner_2139)
Robot is inside dining_room_41. Robot is close vacuum_cleaner_2139. 
##############################
From agent.py
Human Instruction: You need to return to each floor that was originally washed and use the vacuum cleaner to vacuum them instead. This will achieve the clean state required for completing the task.

The actions you have taken:
Action 1: Walk to cupboard_118.
Action 2: Open cupboard_118.
Action 3: look for vacuum_cleaner_2139 around cupboard_118.
Action 4: Walk to cupboard_117.
Action 5: look for vacuum_cleaner_2139 around cupboard_117.
Action 6: Walk to bathroom_cabinet_17.
Action 7: Open bathroom_cabinet_17.
Action 8: look for vacuum_cleaner_2139 around bathroom_cabinet_17.
Action 9: Walk to washing_machine_2079.
Action 10: Open washing_machine_2079.
Action 11: look for vacuum_cleaner_2139 around washing_machine_2079.
Action 12: Walk to dishwasher_129.
Action 13: Open dishwasher_129.
Action 14: look for vacuum_cleaner_2139 around dishwasher_129.
Action 15: Walk to kitchen_counter_122.
Action 16: look for vacuum_cleaner_2139 around kitchen_counter_122.
Action 17: Walk to trashcan_99.
Action 18: look for vacuum_cleaner_2139 around trashcan_99.
Action 19: Walk to vacuum_cleaner_2139.
Action 20: Plug in vacuum_cleaner_2139.
Action 21: Switch on vacuum_cleaner_2139.
Action 22: Walk to floor_10.
Action 23: Wash floor_10.
Action 24: Walk to floor_12.
Action 25: Wash floor_12.
Action 26: Walk to floor_13.
Action 27: Wash floor_13.
Action 28: Walk to floor_14.
Action 29: Wash floor_14.
Action 30: Walk to floor_43.
Action 31: Wash floor_43.
Action 32: Walk to floor_47.
Action 33: Wash floor_47.
Action 34: Walk to floor_49.
Action 35: Wash floor_49.
Action 36: Walk to floor_51.
Action 37: Wash floor_51.
Action 38: Walk to floor_165.
Action 39: Wash floor_165.
Action 40: Walk to floor_168.
Action 41: Wash floor_168.
Action 42: Walk to floor_169.
Action 43: Wash floor_169.
Action 44: Walk to floor_170.
Action 45: Wash floor_170.
Action 46: Walk to floor_171.
Action 47: Wash floor_171.
Action 48: Walk to floor_172.
Action 49: Wash floor_172.
Action 50: Walk to floor_259.
Action 51: Wash floor_259.
Action 52: Walk to floor_260.
Action 53: Wash floor_260.
Action 54: Walk to floor_262.
Action 55: Wash floor_262.
Action 56: Walk to floor_264.
Action 57: Wash floor_264.
Action 58: Walk to floor_265.
Action 59: Wash floor_265.
Action 60: Walk to vacuum_cleaner_2139.
Action 61: Switch off vacuum_cleaner_2139.
Action 62: Plug out vacuum_cleaner_2139.
Action 63: Observe around vacuum_cleaner_2139 with the question of Locate the vacuum cleaner.
Action 64: Plug in vacuum_cleaner_2139.
Action 65: Switch on vacuum_cleaner_2139.
Action 66: Switch off vacuum_cleaner_2139.
Action 67: Plug out vacuum_cleaner_2139.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_sink_120(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_mat_32_around_mat_284(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==284
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floors(vacuum_cleaner:item, floor:item):
    body:
        achieve close_char(char, floor) # Move close to the floor area to be vacuumed
        achieve plugged(vacuum_cleaner) # Ensure that the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner) # Ensure that the vacuum cleaner is switched on
        achieve clean(floor) # Vacuum the floor to achieve a clean state

behavior unplug_and_turn_off_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve is_off(vacuum_cleaner) # Turn off the vacuum cleaner
        achieve unplugged(vacuum_cleaner) # Unplug the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        # List all floors to be vacuumed
        foreach floor: item:
            if is_floor(floor):
                vacuum_floors(vacuum_cleaner, floor)
        # Vacuum each floor

        unplug_and_turn_off_vacuum_cleaner(vacuum_cleaner)
        # Turn off and unplug the vacuum cleaner

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_floor_visited(floor:item):
    # Function to check if the floor has been visited
    symbol visited_status=visited(floor)
    return visited_status

behavior vacuum_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor) # Ensure the floor is clean using the vacuum cleaner

behavior use_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve plugged(vacuum_cleaner) # Vacuum cleaner should be plugged
        achieve is_on(vacuum_cleaner) # Vacuum cleaner should be on

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner
        
        use_vacuum_cleaner(vacuum_cleaner) # Enable the vacuum cleaner
        
        foreach floor: item:
            if is_floor(floor) and not is_floor_visited(floor):
                achieve close_char(char, floor) # Navigate to the floor location
                vacuum_floor(floor, vacuum_cleaner) # Clean the floor

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2126_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_soap_2010_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
def return_and_vacuum_floor(floor:item):
    # Function to ensure floor is vacuumed for achieving clean state
    achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Bind the vacuum cleaner instance

        bind floor: item where:
            is_floor(floor) and visited(floor)
        # Bind the floors that have been washed previously

        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged

        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on

        foreach floor: item:
            if is_floor(floor) and visited(floor):
                return_and_vacuum_floor(floor)
        
        achieve is_off(vacuum_cleaner)
        # Turn off the vacuum cleaner after vacuuming

        achieve unplugged(vacuum_cleaner)
        # Unplug the vacuum cleaner

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def return_and_vacuum_floor(floor:item):
    # Function to ensure floor is vacuumed for achieving clean state
    achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Bind the vacuum cleaner instance

        bind floor: item where:
            is_floor(floor) and visited(floor)
        # Bind the floors that have been washed previously

        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged

        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on

        foreach floor: item:
            if is_floor(floor) and visited(floor):
                return_and_vacuum_floor(floor)
        
        achieve is_off(vacuum_cleaner)
        # Turn off the vacuum cleaner after vacuuming

        achieve unplugged(vacuum_cleaner)
        # Unplug the vacuum cleaner

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_detergent_2155_around_sink_120(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(detergent,sink_instance)
        else:
            exp(detergent,sink_instance)
    eff:
        unknown[detergent]=False
        close[detergent,sink_instance]=True
        close[sink_instance,detergent]=True
    

#goal_representation
 
def return_and_vacuum_floor(floor:item, vacuum_cleaner:item):
    # Function to ensure floor is vacuumed for achieving clean state
    achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Bind the vacuum cleaner instance

        bind floor: item where:
            is_floor(floor) and visited(floor)
        # Bind the floors that have been washed previously

        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged

        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on

        foreach floor: item:
            if is_floor(floor) and visited(floor):
                return_and_vacuum_floor(floor, vacuum_cleaner)
        
        achieve is_off(vacuum_cleaner)
        # Turn off the vacuum cleaner after vacuuming

        achieve unplugged(vacuum_cleaner)
        # Unplug the vacuum cleaner

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2125_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def originally_washed(floor:item):
    # Function to check if a floor has been originally washed
    symbol washed_floor=exists action: (actionid = 22 and actionid = 59 and inside(action, floor))
    return washed_floor

behavior vacuum_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor) # Ensure the floor is clean

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        foreach floor: item:
            if is_floor(floor) and originally_washed(floor):
                vacuum_floor(floor, vacuum_cleaner)
                # Vacuum each floor that was originally washed

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('LPAR', '(') at line 5623, column 40.
Expected one of: 
	* VECTOR
	* BASIC_TYPENAME
Previous tokens: [Token('COLON', ':')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2010_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

#goal_representation
 
def originally_washed(floor:item):
    # Function to check if a floor has been originally washed
    symbol washed_floor=exists action: (actionid == 22 or actionid == 24 or actionid == 26 or actionid == 28 or actionid == 30 or actionid == 32 or actionid == 34 or actionid == 36 or actionid == 38 or actionid == 40 or actionid == 42 or actionid == 44 or actionid == 46 or actionid == 48 or actionid == 50 or actionid == 52 or actionid == 54 or actionid == 56 or actionid == 58) and inside(action, floor)
    return washed_floor

behavior vacuum_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor) # Ensure the floor is clean

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        foreach floor: item:
            if is_floor(floor) and originally_washed(floor):
                vacuum_floor(floor, vacuum_cleaner)
                # Vacuum each floor that was originally washed

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('LPAR', '(') at line 5623, column 40.
Expected one of: 
	* VECTOR
	* BASIC_TYPENAME
Previous tokens: [Token('COLON', ':')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_mat_284_around_mat_284(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==284
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_rag_2052_around_faucet_121(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(rag,faucet_instance)
        else:
            exp(rag,faucet_instance)
    eff:
        unknown[rag]=False
        close[rag,faucet_instance]=True
        close[faucet_instance,rag]=True
    

#goal_representation
 
def originally_washed(floor:item):
    # Function to check if a floor has been originally washed
    symbol washed_floor=exists action: (action == 22 or action == 24 or action == 26 or action == 28 or action == 30 or action == 32 or action == 34 or action == 36 or action == 38 or action == 40 or action == 42 or action == 44 or action == 46 or action == 48 or action == 50 or action == 52 or action == 54 or action == 56 or action == 58) and inside(action, floor)
    return washed_floor

behavior vacuum_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor) # Ensure the floor is clean

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        foreach floor: item:
            if is_floor(floor) and originally_washed(floor):
                vacuum_floor(floor, vacuum_cleaner)
                # Vacuum each floor that was originally washed

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
