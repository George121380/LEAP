From agent.py
Reset goals: The sub-goals are: 
['1. Turn on the lights in the bedroom.  ', '2. Turn on the lights in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_unlit_bedroom_light(bedroom:item):
    # Function to check if there is a light off in the bedroom
    symbol unlit_bedroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bedroom)
    return unlit_bedroom_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        if has_unlit_bedroom_light(bedroom):
            bind light_bedroom: item where:
                is_light(light_bedroom) and is_off(light_bedroom) and inside(light_bedroom, bedroom)
            turn_on_light(light_bedroom) # Turn on the light in the bedroom

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_unlit_bedroom_light(bedroom:item):
    # Function to check if there is a light off in the bedroom
    symbol unlit_bedroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bedroom)
    return unlit_bedroom_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        if has_unlit_bedroom_light(bedroom):
            bind light_bedroom: item where:
                is_light(light_bedroom) and is_off(light_bedroom) and inside(light_bedroom, bedroom)
            turn_on_light(light_bedroom) # Turn on the light in the bedroom

##############################
From agent.py-> find a plan in act()
walk_executor(light_212)switchon_executor(light_212)
##############################
From agent.py
walk_executor(light_212)
Find drawing_202. Robot is inside bedroom_162. Robot is close light_212. Robot is no longer inside dining_room_41.
##############################
From agent.py
switchon_executor(light_212)
Find drawing_110. Robot is inside bedroom_162. Robot is close light_212. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_shampoo_2019_around_shower_16(shampoo:item):
    goal: not unknown(shampoo)
    body:
        assert is_shampoo(shampoo)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(shampoo,shower_instance)
        else:
            exp(shampoo,shower_instance)
    eff:
        unknown[shampoo]=False
        close[shampoo,shower_instance]=True
        close[shower_instance,shampoo]=True
    

behavior find_soap_2010_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_tooth_paste_2059_around_bathroom_counter_18(tooth_paste:item):
    goal: not unknown(tooth_paste)
    body:
        assert is_tooth_paste(tooth_paste)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(tooth_paste,bathroom_counter_instance)
        else:
            exp(tooth_paste,bathroom_counter_instance)
    eff:
        unknown[tooth_paste]=False
        close[tooth_paste,bathroom_counter_instance]=True
        close[bathroom_counter_instance,tooth_paste]=True
    

#exp_behavior_end

#goal_representation
 
def has_unlit_bathroom_light(bathroom:item):
    # Function to check if there is a light off in the bathroom
    symbol unlit_bathroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bathroom)
    return unlit_bathroom_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        if has_unlit_bathroom_light(bathroom):
            bind light_bathroom: item where:
                is_light(light_bathroom) and is_off(light_bathroom) and inside(light_bathroom, bathroom)
            turn_on_light(light_bathroom) # Turn on the light in the bathroom

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_unlit_bathroom_light(bathroom:item):
    # Function to check if there is a light off in the bathroom
    symbol unlit_bathroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bathroom)
    return unlit_bathroom_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        if has_unlit_bathroom_light(bathroom):
            bind light_bathroom: item where:
                is_light(light_bathroom) and is_off(light_bathroom) and inside(light_bathroom, bathroom)
            turn_on_light(light_bathroom) # Turn on the light in the bathroom

##############################
From agent.py-> find a plan in act()
walk_executor(light_39)switchon_executor(light_39)
##############################
From agent.py
walk_executor(light_39)
Robot is inside bathroom_1. Robot is close light_39. Robot is no longer inside bedroom_162.Robot is no longer close light_212.
##############################
From agent.py
switchon_executor(light_39)
Find pillow_108. Find drawing_111. Robot is inside bathroom_1. Robot is close light_39. 
##############################
