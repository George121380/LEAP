[
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces and put it back in the fridge.",
        "cdl": " \nbehavior cut_chicken(chicken:item, cutting_board:item):\n    body:\n        achieve cut(chicken) # Cut the chicken into pieces\n\nbehavior store_in_fridge(chicken:item, fridge:item):\n    body:\n        achieve inside(chicken, fridge) # Put the chicken pieces inside the fridge\n\nbehavior close_the_fridge_door(fridge:item):\n    body:\n        achieve closed(fridge) # Close the fridge door\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken) # Select the chicken\n        bind fridge: item where:\n            is_fridge(fridge) # Select the fridge\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) # Select the cutting board\n        cut_chicken(chicken, cutting_board)\n        store_in_fridge(chicken, fridge)\n        close_the_fridge_door(fridge)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Clean the bathroom sink directly.",
        "cdl": " \ndef has_faucet(sink:item):\n    # Function to determine whether the sink has a faucet\n    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)\n    return has_faucet\n\nbehavior clean_sink(sink:item):\n    body:\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet,sink)\n            achieve_once is_on(faucet)\n            wash(sink)\n            achieve_once is_off(faucet)\n        else:\n            wash(sink)\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink) and id[sink] == 19\n        clean_sink(sink)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all the rooms in the household.",
        "cdl": " \nbehavior identify_rooms():\n    body:\n        foreach room: item:\n            if is_dining_room(room) or is_bathroom(room) or is_bedroom(room) or is_home_office(room):\n                observe(room, \"Identify room type\")\n            # Add observe behaviors for other specific room types as needed\n\nbehavior __goal__():\n    body:\n        identify_rooms()\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Turn on a light in any room that currently has no lights on.",
        "cdl": " \ndef has_unlit_light(room:item):\n    # Function to check if theres a light that is currently off in the room\n    symbol has_unlit_light=exists light: item : is_light(light) and is_off(light) and inside(light, room)\n    return has_unlit_light\n\nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light) # Turn the light on\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            # Iterate over all rooms to check each one\n            if has_unlit_light(room):\n                # If there is an unlit light in a room\n                bind light: item where:\n                    is_light(light) and is_off(light) and inside(light, room)\n                # Bind the unlit light in the room\n                turn_on_light(light) # Turn on the unlit light\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Clean the bathroom sink directly.",
        "cdl": " \ndef has_faucet(sink:item):\n    # Function to determine whether the sink has a faucet\n    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)\n    return has_faucet\n\nbehavior clean_sink(sink:item):\n    body:\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet,sink)\n            achieve_once is_on(faucet)\n            wash(sink)\n            achieve_once is_off(faucet)\n        else:\n            wash(sink)\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink)\n        clean_sink(sink)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and fill it with water.",
        "cdl": " \ndef has_water_inside(x:item):\n    # Function to check if an item has water\n    symbol water_inside=has_water(x)\n    return water_inside\n\nbehavior find_and_fill_cup(cup:item, sink:item):\n    body:\n        achieve_once has_water(cup)\n        # Ensure the cup is filled with water\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n        \n        if not has_water_inside(cup):\n            bind sink: item where:\n                is_sink(sink)\n            # Select a sink\n            find_and_fill_cup(cup, sink)\n\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):\n    body:\n        achieve on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table)\n        # Select a coffee table with a surface\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(coffee_table, home_office)\n        # Ensure the coffee table is in the home office\n\n        find_book_and_put_on_coffee_table(book, coffee_table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Open the window in the home office.",
        "cdl": " \nbehavior open_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        bind window: item where:\n            is_window(window) and inside(window, home_office)\n        open_window(window)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all the rooms in the environment.",
        "cdl": " \nbehavior identify_rooms():\n    body:\n        foreach room: item:\n            if is_dining_room(room) or is_bathroom(room) or is_bedroom(room) or is_home_office(room):\n                observe(room, \"Identify room type\")\n            # Add observe behaviors for other specific room types as needed\n\nbehavior __goal__():\n    body:\n        identify_rooms()\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Check if there is a light on in each room.",
        "cdl": " \ndef has_light_off_in_room(room:item):\n    # Function to check if theres any light thats turned off in the room\n    symbol light_off=exists light: item : is_light(light) and is_off(light) and inside(light, room)\n    return light_off\n\nbehavior check_light_status(light:item):\n    body:\n        observe(light, \"Check light status\")\n        # Observe to confirm the status of the light\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            # Iterate over all rooms to check each one\n            if has_light_off_in_room(room):\n                bind light: item where:\n                    is_light(light) and is_off(light) and inside(light, room)\n                # Check the status of the light if it is off\n                check_light_status(light)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "3. Turn on a light in any room where none are currently on.",
        "cdl": " \ndef has_unlit_light(room:item):\n    # Function to check if there is a light turned off in a room\n    symbol has_unlit_light=exists light: item : is_light(light) and is_off(light) and inside(light, room)\n    return has_unlit_light\n\nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light) # Turn the light on\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            # Iterate through all rooms\n            if has_unlit_light(room):\n                # Check if there is an unlit light in the room\n                bind light: item where:\n                    is_light(light) and is_off(light) and inside(light, room)\n                # Bind the unlit light in the room\n                turn_on_light(light) # Turn on the unlit light\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket containing clothes.",
        "cdl": " \ndef is_basket_for_clothes_present():\n    # Function to check if there is a basket for clothes\n    symbol basket_existence=exists basket: item: is_basket_for_clothes(basket)\n    return basket_existence\n\nbehavior __goal__():\n    body:\n        if is_basket_for_clothes_present():\n            # If a basket for clothes is already known to exist, find and approach it\n            bind basket: item where:\n                is_basket_for_clothes(basket)\n            achieve close_char(char, basket)\n        else:\n            # If no known basket for clothes exists, explore the environment for one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Locate the basket containing clothes\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Place the clothes in the washing machine and start it.",
        "cdl": " \nbehavior place_clothes_in_washing_machine(clothes:item, washing_machine:item):\n    body:\n        achieve inside(clothes, washing_machine)\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        if has_switch(washing_machine):\n            achieve is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n        \n        bind basket: item where:\n            is_basket_for_clothes(basket) and id[basket] == 2006\n        # Select the basket with clothes\n\n        foreach clothes: item:\n            if is_clothes(clothes) and inside(clothes, basket):\n                place_clothes_in_washing_machine(clothes, washing_machine)\n        # Place all clothes from the basket into the washing machine\n\n        start_washing_machine(washing_machine)\n        # Start the washing machine\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Put cleaning solution in the dishwasher.",
        "cdl": " \nbehavior put_cleaning_solution_in_dishwasher(cleaning_solution:item, dishwasher:item):\n    body:\n        achieve inside(cleaning_solution, dishwasher)\n        # Ensure the cleaning solution is placed inside the dishwasher\n\nbehavior __goal__():\n    body:\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select the cleaning solution\n\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        put_cleaning_solution_in_dishwasher(cleaning_solution, dishwasher)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the bowls and the plates with the dishwasher.",
        "cdl": " \nbehavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher)\n        # Close the dishwasher door\n        achieve is_on(dishwasher)\n        # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        foreach o: item:\n            # Load all plates and bowls into the dishwasher\n            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):\n                load_dishwasher(o, dishwasher)\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \nbehavior open_bathroom_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        bind window: item where:\n            is_window(window) and inside(window, bathroom)\n        open_bathroom_window(window)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find the milk, turkey, egg, fish, and chicken.",
        "cdl": " \ndef is_item_found(item:item):\n    # Function to check if the specified food item is already found\n    symbol item_found=visited(item)\n    return item_found\n\nbehavior find_food_item(food_item:item):\n    body:\n        if not is_item_found(food_item):\n            # If the item is not found yet\n            bind fridge: item where:\n                is_fridge(fridge)\n            observe(fridge, \"Check for the food item inside\")\n            # Observe inside the fridge if the food item is there\n\n            bind kitchen_counter: item where:\n                is_kitchen_counter(kitchen_counter)\n            observe(kitchen_counter, \"Check for the food item around the kitchen counter\")\n            # Observe around the kitchen counter if the food item is there\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select the turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select the fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        find_food_item(milk)\n        find_food_item(turkey)\n        find_food_item(egg)\n        find_food_item(fish)\n        find_food_item(chicken)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Put the milk, turkey, egg, fish, and chicken on the table in the dining room.",
        "cdl": " \nbehavior put_food_on_table(food:item, table:item):\n    body:\n        achieve on(food, table) # Place the food item on the table\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select egg\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select chicken\n\n        bind dining_room_table: item where:\n            is_table(dining_room_table) and surfaces(dining_room_table)\n        # Select a table in the dining room that has a surface\n\n        foreach food: item:\n            if (food == milk or food == turkey or food == egg or food == fish or food == chicken):\n                put_food_on_table(food, dining_room_table)\n        # Place all specified food items on the dining room table\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces and put it back in the fridge.",
        "cdl": " \nbehavior cut_chicken(chicken:item, cutting_board:item):\n    body:\n        achieve cut(chicken) # Cut the chicken into pieces\n\nbehavior store_in_fridge(chicken:item, fridge:item):\n    body:\n        achieve inside(chicken, fridge) # Put the chicken pieces inside the fridge\n\nbehavior close_the_fridge_door(fridge:item):\n    body:\n        achieve closed(fridge) # Close the fridge door\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken) # Select the chicken\n        bind fridge: item where:\n            is_fridge(fridge) # Select the fridge\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) # Select the cutting board\n        cut_chicken(chicken, cutting_board)\n        store_in_fridge(chicken, fridge)\n        close_the_fridge_door(fridge)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bedroom. Then turn on the lights in the bathroom.",
        "cdl": " \ndef has_unlit_bedroom_light(bedroom:item):\n    # Function to check if there is a light off in the bedroom\n    symbol unlit_bedroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bedroom)\n    return unlit_bedroom_light\n\ndef has_unlit_bathroom_light(bathroom:item):\n    # Function to check if there is a light off in the bathroom\n    symbol unlit_bathroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bathroom)\n    return unlit_bathroom_light\n\nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light) # Turn the light on\n\nbehavior __goal__():\n    body:\n        bind bedroom: item where:\n            is_bedroom(bedroom)\n        # Select the bedroom\n        \n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        if has_unlit_bedroom_light(bedroom):\n            bind light_bedroom: item where:\n                is_light(light_bedroom) and is_off(light_bedroom) and inside(light_bedroom, bedroom)\n            turn_on_light(light_bedroom) # Turn on the light in the bedroom\n\n        if has_unlit_bathroom_light(bathroom):\n            bind light_bathroom: item where:\n                is_light(light_bathroom) and is_off(light_bathroom) and inside(light_bathroom, bathroom)\n            turn_on_light(light_bathroom) # Turn on the light in the bathroom\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find your spectacles and put them on the coffee table in the home office.  ",
        "cdl": " \nbehavior find_spectacles_and_put_on_coffee_table(spectacles:item, coffee_table:item):\n    body:\n        achieve on(spectacles, coffee_table) # Place the spectacles on the coffee table\n\nbehavior __goal__():\n    body:\n        bind spectacles: item where:\n            is_spectacles(spectacles)\n        # Select the spectacles\n\n        bind coffee_table: item where:\n            is_coffee_table(coffee_table)\n        # Select the coffee table\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(coffee_table, home_office)\n        # Ensure the coffee table is in the home office\n\n        find_spectacles_and_put_on_coffee_table(spectacles, coffee_table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):\n    body:\n        achieve on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n\n        bind coffee_table: item where:\n            is_coffee_table(coffee_table)\n        # Select a coffee table\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(coffee_table, home_office)\n        # Ensure the coffee table is in the home office\n\n        find_book_and_put_on_coffee_table(book, coffee_table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the book and place it on the coffee table in the home office.",
        "cdl": " \nbehavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):\n    body:\n        achieve on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n\n        bind coffee_table: item where:\n            is_coffee_table(coffee_table)\n        # Select a coffee table\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(coffee_table, home_office)\n        # Ensure the coffee table is in the home office\n\n        find_book_and_put_on_coffee_table(book, coffee_table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Open the window in the home office.",
        "cdl": " \nbehavior open_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        bind window: item where:\n            is_window(window) and inside(window, home_office)\n        open_window(window)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Place the bowl of water on the table in the home office.",
        "cdl": " \nbehavior place_bowl_on_table(bowl:item, table:item):\n    body:\n        achieve on(bowl, table)\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl) and has_water(bowl)\n        # Select bowl with water\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Bind the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table inside the home office\n\n        place_bowl_on_table(bowl, table)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "3. Find the cat and put it on the table in the home office.",
        "cdl": " \ndef is_cat_found(cat:item):\n    # Function to check if the cat has already been found\n    symbol cat_found=visited(cat)\n    return cat_found\n\nbehavior find_cat_and_put_on_table(cat:item, table:item):\n    body:\n        achieve on(cat, table) # Place the cat on the table\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat\n\n        bind table: item where:\n            is_table(table) and surfaces(table)\n        # Select a table with a surface\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(table, home_office)\n        # Ensure the table is in the home office\n\n        if not is_cat_found(cat):\n            # If the cat hasnt been found yet, observe likely locations\n            observe(cat, \"Locate the cat\")\n        \n        find_cat_and_put_on_table(cat, table)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Check each room to identify if any lights are off.  ",
        "cdl": " \ndef has_light_off(room:item):\n    # Function to check if there are any lights off in a specified room\n    symbol light_off=exists light: item : is_light(light) and is_off(light) and inside(light, room)\n    return light_off\n\nbehavior check_light_status(light:item):\n    body:\n        observe(light, \"Check light status\")\n        # Observe to confirm the status of the light\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            # Iterate over all rooms to check each one\n            if has_light_off(room):\n                bind light: item where:\n                    is_light(light) and is_off(light) and inside(light, room)\n                # Check the status of the light if it is off\n                check_light_status(light)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Turn on lights in rooms where none are currently on.",
        "cdl": " \ndef has_unlit_light(room:item):\n    # Function to check if there is a light turned off in a room\n    symbol unlit_light_exists=exists light: item : is_light(light) and is_off(light) and inside(light, room)\n    return unlit_light_exists\n\nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light) # Turn the light on\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            # Iterate through all rooms\n            if has_unlit_light(room):\n                # Check if there is a light turned off in the room\n                bind light: item where:\n                    is_light(light) and is_off(light) and inside(light, room)\n                # Bind the unlit light in the room\n                turn_on_light(light) # Turn on the unlit light\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Identify the basket with clothes in it.  ",
        "cdl": " \ndef is_basket_for_clothes_present():\n    # Function to check if there is a basket for clothes\n    symbol basket_existence=exists basket: item: is_basket_for_clothes(basket)\n    return basket_existence\n\nbehavior __goal__():\n    body:\n        if is_basket_for_clothes_present():\n            # If a basket for clothes is already known to exist, find and approach it\n            bind basket: item where:\n                is_basket_for_clothes(basket)\n            achieve close_char(char, basket)\n        else:\n            # If no known basket for clothes exists, explore the environment for one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Locate the basket containing clothes\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Load the clothes into the washing machine and start the wash cycle.",
        "cdl": " \nbehavior load_clothes_into_washing_machine(clothes:item, washing_machine:item):\n    body:\n        achieve inside(clothes, washing_machine)\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        if has_switch(washing_machine):\n            achieve is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        # Select the basket with clothes\n        \n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n        \n        foreach clothes: item:\n            if is_clothes(clothes) and inside(clothes, basket):\n                load_clothes_into_washing_machine(clothes, washing_machine)\n        # Load all clothes from the basket into the washing machine\n        \n        start_washing_machine(washing_machine)\n        # Start the washing machine\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \nbehavior open_bathroom_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        bind window: item where:\n            is_window(window) and inside(window, bathroom)\n        open_bathroom_window(window)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Load the bowls and plates into the dishwasher and start the wash cycle.",
        "cdl": " \nbehavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher)\n        # Close the dishwasher door\n        achieve is_on(dishwasher)\n        # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        foreach o: item:\n            # Load all bowls and plates into the dishwasher\n            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):\n                load_dishwasher(o, dishwasher)\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the forks by hand in the sink.",
        "cdl": " \nbehavior wash_forks_by_hand(fork:item, sink:item):\n    body:\n        achieve inside(fork, sink)\n        # Ensure each fork is placed inside the sink\n        \n        wash(fork)\n        # Wash each fork\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n        \n        foreach fork: item:\n            if is_fork(fork):\n                wash_forks_by_hand(fork, sink)\n        # Wash all forks by hand\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Slice some chicken and give it to your cat.",
        "cdl": " \nbehavior slice_chicken_and_give_to_cat(chicken:item, cat:item, cutting_board:item):\n    body:\n        achieve cut(chicken) # Slice the chicken\n\nbehavior give_chicken_to_cat(chicken:item, cat:item, table:item):\n    body:\n        achieve close(chicken, cat) # Ensure the chicken is close to the cat to receive it\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken) # Select the chicken\n        bind cat: item where:\n            is_cat(cat) # Select the cat\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) # Select the cutting board\n        bind table: item where:\n            is_table(table) and surfaces(table) # Select a table with surface for serving\n        slice_chicken_and_give_to_cat(chicken, cat, cutting_board)\n        give_chicken_to_cat(chicken, cat, table)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Slice the chicken and give it to your cat.",
        "cdl": " \nbehavior slice_chicken_and_give_to_cat(chicken:item, cat:item, cutting_board:item):\n    body:\n        achieve cut(chicken) # Slice the chicken\n\nbehavior give_chicken_to_cat(chicken:item, cat:item, table:item):\n    body:\n        achieve close(chicken, cat) # Ensure the chicken is close to the cat to receive it\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken) # Select the chicken\n        bind cat: item where:\n            is_cat(cat) # Select the cat\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) # Select the cutting board\n        bind table: item where:\n            is_table(table) and surfaces(table) # Select a table with surface for serving\n        slice_chicken_and_give_to_cat(chicken, cat, cutting_board)\n        give_chicken_to_cat(chicken, cat, table)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "1. Slice the bread.",
        "cdl": " \nbehavior slice_bread(bread:item, cutting_board:item):\n    body:\n        achieve cut(bread) # Slice the bread\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            is_food_bread(bread) # Select the bread\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) # Select the cutting board\n        slice_bread(bread, cutting_board)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "2. Toast the sliced bread.",
        "cdl": " \nbehavior toast_bread(bread:item, toaster:item):\n    body:\n        achieve inside(bread, toaster)\n        # Place the sliced bread inside the toaster\n        achieve is_on(toaster)\n        # Turn on the toaster to toast the bread\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            is_food_bread(bread) and cut(bread)\n        # Select the sliced bread\n        \n        bind toaster: item where:\n            is_toaster(toaster)\n        # Select the toaster\n        \n        toast_bread(bread, toaster)\n        # Toast the sliced bread\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find your spectacles and put them on the coffee table in the home office.",
        "cdl": " \nbehavior find_spectacles_and_put_on_coffee_table(spectacles:item, coffee_table:item):\n    body:\n        achieve on(spectacles, coffee_table) # Place the spectacles on the coffee table\n\nbehavior __goal__():\n    body:\n        bind spectacles: item where:\n            is_spectacles(spectacles)\n        # Select the spectacles\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table)\n        # Select a coffee table with a surface\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(coffee_table, home_office)\n        # Ensure the coffee table is in the home office\n\n        find_spectacles_and_put_on_coffee_table(spectacles, coffee_table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):\n    body:\n        achieve on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table)\n        # Select a coffee table with a surface\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(coffee_table, home_office)\n        # Ensure the coffee table is in the home office\n\n        find_book_and_put_on_coffee_table(book, coffee_table)\n"
    },
    {
        "task_name": "make up bed",
        "source_sub_task": "Prepare a cup of water and place it on the nightstand.",
        "cdl": " \nbehavior prepare_cup_of_water(cup:item, sink:item):\n    body:\n        achieve has_water(cup)\n        # Ensure the cup is filled with water\n\nbehavior place_cup_on_nightstand(cup:item, nightstand:item):\n    body:\n        achieve on(cup, nightstand)\n        # Place the cup on the nightstand\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        if not has_water(cup):\n            bind sink: item where:\n                is_sink(sink)\n            # Select a sink\n            \n            prepare_cup_of_water(cup, sink)\n\n        bind nightstand: item where:\n            is_nightstand(nightstand)\n        # Select the nightstand\n\n        place_cup_on_nightstand(cup, nightstand)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Load the bowls and plates into the dishwasher and start the washing cycle.",
        "cdl": " \nbehavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher)\n        # Close the dishwasher door\n        achieve is_on(dishwasher)\n        # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        foreach o: item:\n            # Load all bowls and plates into the dishwasher\n            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):\n                load_dishwasher(o, dishwasher)\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the forks by hand.",
        "cdl": " \nbehavior wash_fork_by_hand(fork:item, sink:item):\n    body:\n        achieve inside(fork, sink)\n        # Ensure each fork is placed inside the sink\n        \n        wash(fork)\n        # Wash each fork\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n        \n        foreach fork: item:\n            if is_fork(fork):\n                wash_fork_by_hand(fork, sink)\n        # Wash all forks by hand\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "1. Find a sink in the bathroom.",
        "cdl": " \nbehavior find_sink(sink:item):\n    body:\n        achieve close_char(char, sink)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        \n        foreach sink: item:\n            if is_sink(sink) and inside(sink, bathroom) and not visited(sink):\n                observe(sink, \"Locate the sink\")\n\n        bind located_sink: item where:\n            is_sink(located_sink) and inside(located_sink, bathroom) and visited(located_sink)\n        \n        find_sink(located_sink)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "2. Fill the sink with water and add soap to create soapy water.",
        "cdl": " \ndef has_faucet(sink:item):\n    # Determine whether this sink has a faucet\n    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)\n    return has_faucet\n\nbehavior fill_sink_with_water_and_add_soap(sink:item, faucet:item, soap:item):\n    body:\n        if has_faucet(sink):\n            achieve_once is_on(faucet)\n            achieve has_water(sink)\n            achieve inside(soap, sink)\n            achieve_once is_off(faucet)\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink)\n        bind faucet: item where:\n            is_faucet(faucet) and close(faucet, sink)\n        bind soap: item where:\n            is_soap(soap)\n        fill_sink_with_water_and_add_soap(sink, faucet, soap)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Slice some chicken and give it to your cat.",
        "cdl": " \nbehavior slice_chicken(chicken:item, cutting_board:item):\n    body:\n        achieve cut(chicken) # Slice the chicken\n\nbehavior give_chicken_to_cat(chicken:item, cat:item):\n    body:\n        achieve close(chicken, cat) # Ensure the chicken is close to the cat to receive it\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken) # Select the chicken\n        bind cat: item where:\n            is_cat(cat) # Select the cat\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) # Select the cutting board\n        slice_chicken(chicken, cutting_board)\n        give_chicken_to_cat(chicken, cat)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": " \ndef has_unlit_bathroom_light(bathroom:item):\n    # Function to check if there is a light off in the bathroom\n    symbol unlit_bathroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bathroom)\n    return unlit_bathroom_light\n\nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light) # Turn the light on\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        if has_unlit_bathroom_light(bathroom):\n            bind light_bathroom: item where:\n                is_light(light_bathroom) and is_off(light_bathroom) and inside(light_bathroom, bathroom)\n            turn_on_light(light_bathroom) # Turn on the light in the bathroom\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and fill it with milk.",
        "cdl": " \ndef is_cup_filled_with_milk(cup:item):\n    # Determine if the cup has milk inside it\n    symbol filled_with_milk=exists milk: item: is_milk(milk) and inside(milk, cup)\n    return filled_with_milk\n\nbehavior find_cup_and_fill_with_milk(cup:item, milk:item):\n    body:\n        achieve inside(milk, cup)\n        # Ensure the milk is placed inside the cup\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n        \n        if not is_cup_filled_with_milk(cup):\n            bind milk: item where:\n                is_milk(milk)\n            # Select the milk\n            find_cup_and_fill_with_milk(cup, milk)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk in the microwave.",
        "cdl": " \ndef has_milk(cup:item):\n    # Function to check if the cup has milk\n    symbol milk_in_cup=exists item: item : is_milk(item) and inside(item, cup)\n    return milk_in_cup\n\nbehavior heat_milk_in_microwave(cup:item, microwave:item):\n    body:\n        achieve inside(cup, microwave)\n        # Place the cup with milk inside the microwave\n        achieve is_on(microwave)\n        # Turn on the microwave to heat the milk\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and has_milk(cup)\n        # Select the cup with milk\n        \n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select the microwave\n\n        heat_milk_in_microwave(cup, microwave)\n        # Heat the milk in the microwave\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Prepare a sink of soapy water in the bathroom.",
        "cdl": " \ndef has_faucet(sink:item):\n    # Function to check if the sink has a faucet\n    symbol faucet_exists=exists faucet: item: is_faucet(faucet) and close(faucet, sink)\n    return faucet_exists\n\nbehavior prepare_soapy_water(sink:item, faucet:item, soap:item):\n    body:\n        if has_faucet(sink):\n            achieve_once is_on(faucet)\n            # Temporarily turn on the faucet to fill the sink with water\n            achieve has_water(sink)\n            # Ensure the sink is filled with water\n            achieve inside(soap, sink)\n            # Ensure the soap is inside the sink\n            achieve_once is_off(faucet)\n            # Turn off the faucet after filling the sink with water\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink) and id[sink]==307\n        # Select sink with ID 307\n\n        bind faucet: item where:\n            is_faucet(faucet) and close(faucet, sink) and id[faucet]==308\n        # Select the faucet close to sink 307 with ID 308\n\n        bind soap: item where:\n            is_soap(soap) and id[soap]==2037\n        # Select soap with ID 2037\n\n        prepare_soapy_water(sink, faucet, soap)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Turn on the lights in the bedroom.  ",
        "cdl": " \ndef has_unlit_bedroom_light(bedroom:item):\n    # Function to check if there is a light off in the bedroom\n    symbol unlit_bedroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bedroom)\n    return unlit_bedroom_light\n\nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light) # Turn the light on\n\nbehavior __goal__():\n    body:\n        bind bedroom: item where:\n            is_bedroom(bedroom)\n        # Select the bedroom\n\n        if has_unlit_bedroom_light(bedroom):\n            bind light_bedroom: item where:\n                is_light(light_bedroom) and is_off(light_bedroom) and inside(light_bedroom, bedroom)\n            turn_on_light(light_bedroom) # Turn on the light in the bedroom\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Turn on the lights in the bathroom.",
        "cdl": " \ndef has_unlit_bathroom_light(bathroom:item):\n    # Function to check if there is a light off in the bathroom\n    symbol unlit_bathroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bathroom)\n    return unlit_bathroom_light\n\nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light) # Turn the light on\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        if has_unlit_bathroom_light(bathroom):\n            bind light_bathroom: item where:\n                is_light(light_bathroom) and is_off(light_bathroom) and inside(light_bathroom, bathroom)\n            turn_on_light(light_bathroom) # Turn on the light in the bathroom\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Slice the chicken.",
        "cdl": "behavior slice_chicken(chicken:item, cutting_board:item):\n    body:\n        achieve cut(chicken) # Slice the chicken\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken) # Select the chicken\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) # Select the cutting board\n        slice_chicken(chicken, cutting_board)"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Use a pot to boil water.",
        "cdl": " \nbehavior place_pot_on_stove(pot:item, stove:item):\n    body:\n        achieve on(pot, stove)\n        # Place the pot on the stove\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot) and has_water(pot)\n        # Select a pot with water\n\n        bind stove: item where:\n            is_stove(stove) and id[stove] == 2135\n        # Select the stove with ID 2135\n\n        place_pot_on_stove(pot, stove)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "Wash the bowls and the plates with the dishwasher.",
        "cdl": " \nbehavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher)\n        # Close the dishwasher door\n        achieve is_on(dishwasher)\n        # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        foreach o: item:\n            # Load all bowls and plates into the dishwasher\n            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):\n                load_dishwasher(o, dishwasher)\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and pour milk into it.",
        "cdl": " \ndef is_cup_filled_with_milk(cup:item):\n    # Determine if the cup has milk inside it\n    symbol filled_with_milk=exists milk: item: is_milk(milk) and inside(milk, cup)\n    return filled_with_milk\n\nbehavior find_cup_and_fill_with_milk(cup:item, milk:item):\n    body:\n        achieve inside(milk, cup)\n        # Ensure the milk is placed inside the cup\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n        \n        if not is_cup_filled_with_milk(cup):\n            bind milk: item where:\n                is_milk(milk)\n            # Select the milk\n            find_cup_and_fill_with_milk(cup, milk)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk in the microwave.",
        "cdl": " \ndef has_milk(cup:item):\n    # Function to check if the cup has milk\n    symbol milk_in_cup=exists item: item : is_milk(item) and inside(item, cup)\n    return milk_in_cup\n\nbehavior heat_milk_in_microwave(cup:item, microwave:item):\n    body:\n        achieve inside(cup, microwave)\n        # Place the cup with milk inside the microwave\n        achieve is_on(microwave)\n        # Turn on the microwave to heat the milk\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and has_milk(cup)\n        # Select the cup with milk\n        \n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select the microwave\n\n        heat_milk_in_microwave(cup, microwave)\n        # Heat the milk in the microwave\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Identify all the windows in the house.",
        "cdl": " \ndef is_window_found(window:item):\n    # Function to check if a specified window has already been identified\n    symbol window_found=visited(window)\n    return window_found\n\nbehavior identify_windows():\n    body:\n        foreach window: item:\n            if is_window(window) and not visited(window):\n                observe(window, \"Identify the window\")\n\nbehavior __goal__():\n    body:\n        identify_windows()\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Wipe each window with a towel.",
        "cdl": " \nbehavior wipe_window_with_towel(window:item, towel:item):\n    body:\n        achieve_once inhand(towel) # Hold the towel temporarily for wiping\n        wipe(window) # Perform the wiping action on the window\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window(window) and not clean(window):\n                # Loop through each identified window that is not yet clean\n                bind towel: item where:\n                    is_towel(towel)\n                # Select the towel\n                wipe_window_with_towel(window, towel)\n\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the book in the home office.",
        "cdl": " \nbehavior locate_book(book:item):\n    body:\n        achieve visited(book)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n        locate_book(book)\n\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Place the book on the coffee table in the home office.",
        "cdl": " \nbehavior place_book_on_coffee_table(book:item, coffee_table:item):\n    body:\n        achieve on(book, coffee_table) # Place the book on the coffee table\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select the book\n\n        bind coffee_table: item where:\n            is_coffee_table(coffee_table)\n        # Select the coffee table\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(coffee_table, home_office)\n        # Ensure the coffee table is in the home office\n\n        place_book_on_coffee_table(book, coffee_table)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "1. Find a sink in the bathroom.",
        "cdl": " \nbehavior find_sink(sink:item):\n    body:\n        achieve close_char(char, sink)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        \n        foreach sink: item:\n            if is_sink(sink) and inside(sink, bathroom) and not visited(sink):\n                observe(sink, \"Locate the sink\")\n\n        bind located_sink: item where:\n            is_sink(located_sink) and inside(located_sink, bathroom) and visited(located_sink)\n        \n        find_sink(located_sink)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "2. Fill the sink with water and add soap to make it soapy.",
        "cdl": " \ndef has_faucet(sink:item):\n    # Determine whether this sink has a faucet\n    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)\n    return has_faucet\n\nbehavior fill_sink_with_water_and_add_soap(sink:item, faucet:item, soap:item):\n    body:\n        if has_faucet(sink):\n            achieve_once is_on(faucet)\n            achieve has_water(sink)\n            achieve inside(soap, sink)\n            achieve_once is_off(faucet)\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink)\n        bind faucet: item where:\n            is_faucet(faucet) and close(faucet, sink)\n        bind soap: item where:\n            is_soap(soap)\n        fill_sink_with_water_and_add_soap(sink, faucet, soap)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Identify the basket that contains the clothes.",
        "cdl": " \ndef is_basket_for_clothes_present():\n    # Function to check if there is a basket for clothes\n    symbol basket_existence=exists basket: item: is_basket_for_clothes(basket)\n    return basket_existence\n\nbehavior __goal__():\n    body:\n        if is_basket_for_clothes_present():\n            # If a basket for clothes is already known to exist, find and approach it\n            bind basket: item where:\n                is_basket_for_clothes(basket)\n            achieve close_char(char, basket)\n        else:\n            # If no known basket for clothes exists, explore the environment for one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Locate the basket containing clothes\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add soap to the washing machine.",
        "cdl": " \nbehavior add_soap_to_washing_machine(soap:item, washing_machine:item):\n    body:\n        achieve inside(soap, washing_machine)\n\nbehavior __goal__():\n    body:\n        bind soap: item where:\n            is_soap(soap)\n        # Select the soap\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine) and id[washing_machine]==2041\n        # Select the washing machine with ID 2041\n\n        add_soap_to_washing_machine(soap, washing_machine)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Place the clothes from the basket into the washing machine and run it.",
        "cdl": " \nbehavior place_clothes_in_washing_machine(clothes:item, washing_machine:item):\n    body:\n        achieve inside(clothes, washing_machine)\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        if has_switch(washing_machine):\n            achieve is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        # Select the basket with clothes\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n        \n        foreach clothes: item:\n            if is_clothes(clothes) and inside(clothes, basket):\n                place_clothes_in_washing_machine(clothes, washing_machine)\n        # Place all clothes from the basket into the washing machine\n\n        start_washing_machine(washing_machine)\n        # Start the washing machine\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Put cleaning solution in the dishwasher.",
        "cdl": " \nbehavior put_cleaning_solution_in_dishwasher(cleaning_solution:item, dishwasher:item):\n    body:\n        achieve inside(cleaning_solution, dishwasher)\n        # Ensure the cleaning solution is placed inside the dishwasher\n\nbehavior __goal__():\n    body:\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select the cleaning solution\n\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        put_cleaning_solution_in_dishwasher(cleaning_solution, dishwasher)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the bowls and the plates with the dishwasher.",
        "cdl": " \nbehavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher)\n        # Close the dishwasher door\n        achieve is_on(dishwasher)\n        # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        foreach o: item:\n            # Load all bowls and plates into the dishwasher\n            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):\n                load_dishwasher(o, dishwasher)\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find and put milk and eggs on the table in the dining room.",
        "cdl": " \nbehavior put_item_on_table(item:item, table:item):\n    body:\n        achieve on(item, table) # Place the item on the table\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select egg\n\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Select the dining room\n\n        bind dining_table: item where:\n            is_table(dining_table) and surfaces(dining_table) and inside(dining_table, dining_room)\n        # Select a table in the dining room that has a surface\n\n        put_item_on_table(milk, dining_table)\n        # Place milk on the dining room table\n\n        put_item_on_table(egg, dining_table)\n        # Place egg on the dining room table\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Remove all items from the fridge and throw them into the trashcan.",
        "cdl": " \nbehavior throw_in_trash(item:item, trashcan:item):\n    body:\n        achieve inside(item, trashcan)\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select the trashcan\n\n        foreach item: item:\n            if inside(item, fridge):\n                throw_in_trash(item, trashcan)\n                # Throw each item from the fridge into the trashcan\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Return the milk and eggs to the fridge.",
        "cdl": " \nbehavior return_to_fridge(item:item, fridge:item):\n    body:\n        achieve inside(item, fridge)\n        # Ensure the item is placed inside the fridge\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve closed(fridge)\n        # Ensure the fridge door is closed\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n    \n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        return_to_fridge(milk, fridge)\n        return_to_fridge(egg, fridge)\n        close_fridge(fridge)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Identify all the windows in the house.",
        "cdl": " \ndef is_window_found(window:item):\n    # Function to check if a specified window has already been identified\n    symbol window_found=visited(window)\n    return window_found\n\nbehavior identify_windows():\n    body:\n        foreach window: item:\n            if is_window(window) and not visited(window):\n                observe(window, \"Identify the window\")\n\nbehavior __goal__():\n    body:\n        identify_windows()\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Wipe each window using a towel.",
        "cdl": " \nbehavior wipe_window_with_towel(window:item, towel:item):\n    body:\n        achieve_once inhand(towel) # Temporarily hold the towel for wiping\n        wipe(window) # Perform the wiping action on the window\n\nbehavior __goal__():\n    body:\n        foreach window: item:\n            if is_window(window) and not clean(window):\n                # Loop through each identified window that is not yet clean\n                bind towel: item where:\n                    is_towel(towel)\n                # Select the towel\n                wipe_window_with_towel(window, towel)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Put milk and eggs on the table in the dining room.",
        "cdl": "behavior put_item_on_table(item:item, table:item):\n    body:\n        achieve on(item, table) # Place the item on the table\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select egg\n\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Select the dining room\n\n        bind dining_table: item where:\n            is_table(dining_table) and surfaces(dining_table) and inside(dining_table, dining_room)\n        # Select a table in the dining room that has a surface\n\n        put_item_on_table(milk, dining_table)\n        # Place milk on the dining room table\n\n        put_item_on_table(egg, dining_table)\n        # Place egg on the dining room table"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items in the fridge into the trashcan.",
        "cdl": " \nbehavior throw_in_trash(item:item, trashcan:item):\n    body:\n        achieve inside(item, trashcan)\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select the trashcan\n\n        foreach item: item:\n            if inside(item, fridge):\n                throw_in_trash(item, trashcan)\n                # Throw each item from the fridge into the trashcan\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put milk and eggs back in the fridge.",
        "cdl": " \nbehavior return_to_fridge(item:item, fridge:item):\n    body:\n        achieve inside(item, fridge)\n        # Ensure the item is placed inside the fridge\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve closed(fridge)\n        # Ensure the fridge door is closed\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n    \n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        return_to_fridge(milk, fridge)\n        return_to_fridge(egg, fridge)\n        close_fridge(fridge)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Load the bowls and plates into the dishwasher and start it.",
        "cdl": " \nbehavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher)\n        # Close the dishwasher door\n        achieve is_on(dishwasher)\n        # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        foreach o: item:\n            # Load all bowls and plates into the dishwasher\n            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):\n                load_dishwasher(o, dishwasher)\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the forks by hand.",
        "cdl": " \nbehavior wash_fork_by_hand(fork:item, sink:item):\n    body:\n        achieve inside(fork, sink)\n        # Ensure each fork is placed inside the sink\n        \n        wash(fork)\n        # Wash each fork\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n        \n        foreach fork: item:\n            if is_fork(fork):\n                wash_fork_by_hand(fork, sink)\n        # Wash all forks by hand\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find your spectacles and put them on the coffee table in the home office.",
        "cdl": " \nbehavior find_spectacles_and_put_on_coffee_table(spectacles:item, coffee_table:item):\n    body:\n        achieve on(spectacles, coffee_table) # Place the spectacles on the coffee table\n\nbehavior __goal__():\n    body:\n        bind spectacles: item where:\n            is_spectacles(spectacles)\n        # Select the spectacles\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table)\n        # Select a coffee table with a surface\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(coffee_table, home_office)\n        # Ensure the coffee table is in the home office\n\n        find_spectacles_and_put_on_coffee_table(spectacles, coffee_table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):\n    body:\n        achieve on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table)\n        # Select a coffee table with a surface\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(coffee_table, home_office)\n        # Ensure the coffee table is in the home office\n\n        find_book_and_put_on_coffee_table(book, coffee_table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Locate the table in the dining room and place the milk and egg on it.",
        "cdl": "behavior find_and_place_milk_and_egg(milk:item, egg:item, dining_table:item):\n    body:\n        achieve on(milk, dining_table) # Place the milk on the dining table\n        achieve on(egg, dining_table) # Place the egg on the dining table\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Select the dining room\n\n        bind dining_table: item where:\n            is_table(dining_table) and surfaces(dining_table) and inside(dining_table, dining_room)\n        # Select a table in the dining room that has a surface\n\n        find_and_place_milk_and_egg(milk, egg, dining_table)\n        # Find the milk and egg and place them on the dining room table"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Remove all items from the fridge and throw them into the trashcan.",
        "cdl": "\nbehavior throw_in_trash(item:item, trashcan:item):\n    body:\n        achieve inside(item, trashcan)\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Select the trashcan\n\n        foreach item: item:\n            if inside(item, fridge):\n                throw_in_trash(item, trashcan)\n                # Throw each item from the fridge into the trashcan\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put the milk and eggs back into the fridge.",
        "cdl": " \nbehavior return_to_fridge(item:item, fridge:item):\n    body:\n        achieve inside(item, fridge)\n        # Ensure the item is placed inside the fridge\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve closed(fridge)\n        # Ensure the fridge door is closed\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n    \n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge\n\n        return_to_fridge(milk, fridge)\n        return_to_fridge(egg, fridge)\n        close_fridge(fridge)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place them on the table in the dining room.",
        "cdl": " \nbehavior put_food_on_table(food:item, table:item):\n    body:\n        achieve on(food, table) # Place the food item on the table\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select egg\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select chicken\n\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Select the dining room\n\n        bind dining_table: item where:\n            is_table(dining_table) and surfaces(dining_table) and inside(dining_table, dining_room)\n        # Select a table in the dining room that has a surface\n\n        foreach food: item:\n            if (food == milk or food == turkey or food == egg or food == fish or food == chicken):\n                put_food_on_table(food, dining_table)\n        # Place all specified food items on the dining room table\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces, then put it back in the fridge.",
        "cdl": "behavior cut_chicken(chicken:item, cutting_board:item):\n    body:\n        achieve cut(chicken) # Cut the chicken into pieces\n\nbehavior store_in_fridge(chicken:item, fridge:item):\n    body:\n        achieve inside(chicken, fridge) # Put the chicken pieces inside the fridge\n\nbehavior close_the_fridge_door(fridge:item):\n    body:\n        achieve closed(fridge) # Close the fridge door\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken) # Select the chicken\n        bind fridge: item where:\n            is_fridge(fridge) # Select the fridge\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) # Select the cutting board\n        cut_chicken(chicken, cutting_board)\n        store_in_fridge(chicken, fridge)\n        close_the_fridge_door(fridge)"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Fill a bowl with water.",
        "cdl": " \nbehavior fill_bowl_with_water(bowl:item, sink:item):\n    body:\n        achieve has_water(bowl) # Fill the bowl with water\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl)\n        # Select a bowl\n        \n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n        \n        fill_bowl_with_water(bowl, sink)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Place the bowl on the table in the home office.",
        "cdl": "\nbehavior place_bowl_on_table(bowl:item, table:item):\n    body:\n        achieve on(bowl, table)\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl) and has_water(bowl)\n        # Select the bowl with water\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Bind the home office\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select a table inside the home office\n\n        place_bowl_on_table(bowl, table)\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "3. Find the cat and put it on the table in the home office.",
        "cdl": " \ndef is_cat_found(cat:item):\n    # Function to check if the cat has already been found\n    symbol cat_found=visited(cat)\n    return cat_found\n\nbehavior find_cat_and_put_on_table(cat:item, table:item):\n    body:\n        achieve on(cat, table) # Place the cat on the table\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat\n\n        bind table: item where:\n            is_table(table) and surfaces(table)\n        # Select a table with a surface\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(table, home_office)\n        # Ensure the table is in the home office\n\n        if not is_cat_found(cat):\n            # If the cat hasnt been found yet, observe likely locations\n            observe(cat, \"Locate the cat\")\n        \n        find_cat_and_put_on_table(cat, table)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Slice a kiwi and add it to the cup.",
        "cdl": " \nbehavior slice_kiwi_and_add_to_cup(kiwi:item, cutting_board:item, cup:item):\n    body:\n        achieve cut(kiwi) # Slice the kiwi\n        achieve inside(kiwi, cup) # Add the sliced kiwi to the cup\n\nbehavior __goal__():\n    body:\n        bind kiwi: item where:\n            is_food_kiwi(kiwi) # Select the kiwi\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) # Select the cutting board\n            \n        bind cup: item where:\n            is_cup(cup) and has_water(cup) # Select a cup that already contains water\n        \n        slice_kiwi_and_add_to_cup(kiwi, cutting_board, cup)\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": " \ndef has_unlit_bathroom_light(bathroom:item):\n    # Function to check if there is a light off in the bathroom\n    symbol unlit_bathroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bathroom)\n    return unlit_bathroom_light\n\nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light) # Turn the light on\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        if has_unlit_bathroom_light(bathroom):\n            bind light_bathroom: item where:\n                is_light(light_bathroom) and is_off(light_bathroom) and inside(light_bathroom, bathroom)\n            turn_on_light(light_bathroom) # Turn on the light in the bathroom\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and place it on the coffee table in the home office.",
        "cdl": "\nbehavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):\n    body:\n        achieve on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n        \n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table)\n        # Select a coffee table with a surface\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(coffee_table, home_office)\n        # Ensure the coffee table is in the home office\n\n        find_book_and_put_on_coffee_table(book, coffee_table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Prepare a cup of hot milk and put it on the coffee table in the home office.",
        "cdl": "\nbehavior find_and_heat_cup_of_milk(cup:item, milk:item, microwave:item):\n    body:\n        achieve inside(milk, cup) # Ensure milk is in the cup\n        achieve inside(cup, microwave) # Place the cup with milk inside the microwave\n        achieve is_on(microwave) # Turn on the microwave to heat the milk\n\nbehavior place_cup_on_coffee_table(cup:item, coffee_table:item):\n    body:\n        achieve on(cup, coffee_table) # Place the cup on the coffee table\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select the microwave\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table)\n        # Select a coffee table with a surface\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(coffee_table, home_office)\n        # Ensure the coffee table is in the home office\n\n        find_and_heat_cup_of_milk(cup, milk, microwave)\n        place_cup_on_coffee_table(cup, coffee_table)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "Wash the bowls and plates with the dishwasher.",
        "cdl": " \nbehavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher)\n        # Close the dishwasher door\n        achieve is_on(dishwasher)\n        # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        foreach o: item:\n            # Load all bowls and plates into the dishwasher\n            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):\n                load_dishwasher(o, dishwasher)\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": "def has_unlit_bathroom_light(bathroom:item):\n    # Function to check if there is a light off in the bathroom\n    symbol unlit_bathroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bathroom)\n    return unlit_bathroom_light\n\nbehavior turn_on_light(light:item):\n    body:\n        achieve is_on(light) # Turn the light on\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        if has_unlit_bathroom_light(bathroom):\n            bind light_bathroom: item where:\n                is_light(light_bathroom) and is_off(light_bathroom) and inside(light_bathroom, bathroom)\n            turn_on_light(light_bathroom) # Turn on the light in the bathroom"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):\n    body:\n        achieve on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table)\n        # Select a coffee table with a surface\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(coffee_table, home_office)\n        # Ensure the coffee table is in the home office\n\n        find_book_and_put_on_coffee_table(book, coffee_table)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Prepare a cup of hot milk and put it on the table.",
        "cdl": " \ndef is_cup_filled_with_milk(cup:item):\n    # Determine if the cup has milk inside it\n    symbol filled_with_milk=exists milk: item: is_milk(milk) and inside(milk, cup)\n    return filled_with_milk\n\nbehavior find_and_fill_cup_with_milk(cup:item, milk:item):\n    body:\n        achieve inside(milk, cup)\n        # Ensure the milk is placed inside the cup\n\nbehavior heat_milk_in_microwave(cup:item, microwave:item):\n    body:\n        achieve inside(cup, microwave)\n        # Place the cup with milk inside the microwave\n        achieve is_on(microwave)\n        # Turn on the microwave to heat the milk\n\nbehavior place_cup_on_coffee_table(cup:item, coffee_table:item):\n    body:\n        achieve on(cup, coffee_table)\n        # Place the cup on the coffee table\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n\n        if not is_cup_filled_with_milk(cup):\n            bind milk: item where:\n                is_milk(milk)\n            # Select the milk\n            find_and_fill_cup_with_milk(cup, milk)\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select the microwave\n\n        heat_milk_in_microwave(cup, microwave)\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table)\n        # Select a coffee table with a surface\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(coffee_table, home_office)\n        # Ensure the coffee table is in the home office\n\n        place_cup_on_coffee_table(cup, coffee_table)\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "Boil rice in a pot.",
        "cdl": " \nbehavior add_rice_to_pot(rice:item, pot:item):\n    body:\n        achieve inside(rice, pot)\n\nbehavior fill_pot_with_water(pot:item, sink:item):\n    body:\n        achieve has_water(pot)\n\nbehavior place_pot_on_stove(pot:item, stove:item):\n    body:\n        achieve on(pot, stove)\n\nbehavior turn_on_stove(stove:item):\n    body:\n        achieve is_on(stove)\n\nbehavior __goal__():\n    body:\n        bind rice: item where:\n            is_food_rice(rice)\n        # Select the rice\n\n        bind pot: item where:\n            is_pot(pot) and not has_water(pot)\n        # Select a pot that does not have water\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select the stove\n\n        add_rice_to_pot(rice, pot)\n        fill_pot_with_water(pot, sink)\n        place_pot_on_stove(pot, stove)\n        turn_on_stove(stove)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Boil vegetables with a pot on the stove.",
        "cdl": "behavior prepare_vegetables_in_pot(pot:item, vegetables:item, stove:item):\n    body:\n        achieve inside(vegetables, pot)\n        # Place the vegetables inside the pot\n        \nbehavior fill_pot_with_water(pot:item, sink:item):\n    body:\n        achieve has_water(pot)\n        # Fill the pot with water\n        \nbehavior place_pot_on_stove(pot:item, stove:item):\n    body:\n        achieve on(pot, stove)\n        # Place the pot on the stove\n        \nbehavior turn_on_stove(stove:item):\n    body:\n        achieve is_on(stove)\n        # Turn on the stove\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot) and not has_water(pot)  # Ensure the pot does not have water initially\n        # Select a pot\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n        \n        bind stove: item where:\n            is_stove(stove)\n        # Select a stove\n\n        bind vegetables: item where:\n            is_food_vegetable(vegetables)\n        # Select the vegetables\n\n        fill_pot_with_water(pot, sink)\n        prepare_vegetables_in_pot(pot, vegetables, stove)\n        place_pot_on_stove(pot, stove)\n        turn_on_stove(stove)"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the book.",
        "cdl": " \nbehavior locate_book(book:item):\n    body:\n        achieve visited(book)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n        locate_book(book)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Place the book on the coffee table in the home office.",
        "cdl": " \nbehavior place_book_on_coffee_table(book:item, coffee_table:item):\n    body:\n        achieve on(book, coffee_table) # Place the book on the coffee table\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select the book\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table)\n        # Select a coffee table with a surface\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(coffee_table, home_office)\n        # Ensure the coffee table is in the home office\n\n        place_book_on_coffee_table(book, coffee_table)\n"
    },
    {
        "task_name": "Make coffee",
        "source_sub_task": "2. Add milk and sugar to the coffee.",
        "cdl": "behavior add_milk_and_sugar(cup:item, milk:item, sugar:item):\n    body:\n        achieve inside(milk, cup) # Ensure the milk is added inside the cup\n        achieve inside(sugar, cup) # Ensure the sugar is added inside the cup\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and has_water(cup)\n        # Select the cup of coffee which contains coffee\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind sugar: item where:\n            is_food_sugar(sugar)\n        # Select the sugar\n\n        add_milk_and_sugar(cup, milk, sugar)"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "1. Slice the bread.",
        "cdl": "behavior slice_bread(bread:item, cutting_board:item):\n    body:\n        achieve cut(bread) # Slice the bread\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            is_food_bread(bread) # Select the bread\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) # Select the cutting board\n        slice_bread(bread, cutting_board)"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "2. Toast the sliced bread.",
        "cdl": "\nbehavior toast_bread(bread:item, toaster:item):\n    body:\n        achieve inside(bread, toaster)\n        # Place the sliced bread inside the toaster\n        achieve is_on(toaster)\n        # Turn on the toaster to toast the bread\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            is_food_bread(bread) and cut(bread)\n        # Select the sliced bread\n        \n        bind toaster: item where:\n            is_toaster(toaster)\n        # Select the toaster\n        \n        toast_bread(bread, toaster)\n        # Toast the sliced bread\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \nbehavior open_bathroom_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        bind window: item where:\n            is_window(window) and inside(window, bathroom)\n        open_bathroom_window(window)\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "Put the book on the coffee table in the home office.",
        "cdl": " \nbehavior put_book_on_coffee_table(book:item, coffee_table:item):\n    body:\n        achieve on(book, coffee_table)\n\nbehavior __goal__():\n    body:\n        bind book: item where:\n            is_book(book)\n        # Select a book\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and surfaces(coffee_table)\n        # Select a coffee table with a surface\n\n        bind home_office: item where:\n            is_home_office(home_office) and inside(coffee_table, home_office)\n        # Ensure the coffee table is in the home office\n        \n        put_book_on_coffee_table(book, coffee_table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find milk, turkey, egg, fish, and chicken in the household.",
        "cdl": " \ndef is_item_found(item:item):\n    # Function to check if a specified item has already been found\n    symbol item_found=visited(item)\n    return item_found\n\nbehavior find_item(item:item):\n    body:\n        if not is_item_found(item):\n            bind fridge: item where:\n                is_fridge(fridge)\n            observe(fridge, \"Check if the item is inside\")\n\n            bind kitchen_counter: item where:\n                is_kitchen_counter(kitchen_counter)\n            observe(kitchen_counter, \"Check if the item is around the kitchen counter\")\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Bind milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Bind turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Bind egg\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Bind fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Bind chicken\n\n        find_item(milk)\n        find_item(turkey)\n        find_item(egg)\n        find_item(fish)\n        find_item(chicken)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place the found items on the dining room table.",
        "cdl": " \nbehavior put_found_items_on_table(item:item, table:item):\n    body:\n        achieve on(item, table) # Place the specified item on the table\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select egg\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select chicken\n\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Select the dining room\n\n        bind dining_table: item where:\n            is_table(dining_table) and surfaces(dining_table) and inside(dining_table, dining_room)\n        # Select a table in the dining room that has a surface\n\n        foreach item: item:\n            if (item == milk or item == turkey or item == egg or item == fish or item == chicken):\n                put_found_items_on_table(item, dining_table)\n        # Place all specified food items on the dining room table\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Slice the chicken.",
        "cdl": "behavior slice_chicken(chicken:item, cutting_board:item):\n    body:\n        achieve cut(chicken)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        slice_chicken(chicken, cutting_board)"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and fill it with water.  ",
        "cdl": " \ndef has_water_inside(x:item):\n    # Function to check if an item has water\n    symbol water_inside=has_water(x)\n    return water_inside\n\nbehavior find_and_fill_cup(cup:item, sink:item):\n    body:\n        achieve_once has_water(cup)\n        # Ensure the cup is filled with water\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select a cup\n        \n        if not has_water_inside(cup):\n            bind sink: item where:\n                is_sink(sink)\n            # Select a sink\n            find_and_fill_cup(cup, sink)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Slice the kiwi and add it to the cup of water.",
        "cdl": "behavior slice_kiwi_and_add_to_cup(kiwi:item, cutting_board:item, cup:item):\n    body:\n        achieve cut(kiwi) # Slice the kiwi\n        achieve inside(kiwi, cup) # Add the sliced kiwi to the cup\n\nbehavior __goal__():\n    body:\n        bind kiwi: item where:\n            is_food_kiwi(kiwi) # Select the kiwi\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) # Select the cutting board\n            \n        bind cup: item where:\n            is_cup(cup) and has_water(cup) # Select a cup that already contains water\n        \n        slice_kiwi_and_add_to_cup(kiwi, cutting_board, cup)"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup of milk.",
        "cdl": "def is_milk_filled(cup: item):\n    # Determine if the cup has milk inside it\n    symbol milk_present=exists milk: item: is_milk(milk) and inside(milk, cup)\n    return milk_present\n\nbehavior find_and_fill_cup_with_milk(possible_cup:item, milk:item):\n    body:\n        if is_cup(possible_cup) and not is_milk_filled(possible_cup):\n            # Only attempt to fill if it is a cup and not already filled with milk\n            achieve inside(milk, possible_cup)\n\nbehavior __goal__():\n    body:\n        # Attempt to find a cup and confirm it contains milk\n        bind dirty_cup: item where:\n            id[dirty_cup] == 2049\n        \n        observe(dirty_cup, \"Check if there is milk inside the cup\")\n\n        bind possible_cups: item where:\n            is_cup(possible_cups)\n\n        foreach possible_cup: item:\n            if is_cup(possible_cup) and not visited(possible_cup):\n                observe(possible_cup, \"Check if there is milk inside the cup\")\n\n        bind milk: item where:\n            is_milk(milk)\n\n        find_and_fill_cup_with_milk(dirty_cup, milk)\n        \n        foreach possible_cup: item:\n            # Iterate through potential cups to find the one with milk or fill one if needed\n            if is_cup(possible_cup) and not is_milk_filled(possible_cup):\n                find_and_fill_cup_with_milk(possible_cup, milk)"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk in the microwave.",
        "cdl": " \ndef has_milk(cup:item):\n    # Function to check if the cup has milk\n    symbol milk_in_cup=exists item: item : is_milk(item) and inside(item, cup)\n    return milk_in_cup\n\nbehavior heat_milk_in_microwave(cup:item, microwave:item):\n    body:\n        achieve inside(cup, microwave)\n        # Place the cup with milk inside the microwave\n        achieve is_on(microwave)\n        # Turn on the microwave to heat the milk\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and has_milk(cup)\n        # Select the cup with milk\n        \n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select the microwave\n\n        heat_milk_in_microwave(cup, microwave)\n        # Heat the milk in the microwave\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Locate the basket containing clothes.",
        "cdl": " \ndef is_basket_for_clothes_present():\n    # Function to check if there is a basket for clothes\n    symbol basket_existence=exists basket: item: is_basket_for_clothes(basket)\n    return basket_existence\n\nbehavior __goal__():\n    body:\n        if is_basket_for_clothes_present():\n            # If a basket for clothes is already known to exist, find and approach it\n            bind basket: item where:\n                is_basket_for_clothes(basket) and id[basket] == 2078\n            achieve close_char(char, basket)\n        else:\n            # If no known basket for clothes exists, explore the environment for one\n            bind dining_room: item where:\n                is_dining_room(dining_room)\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket) and inside(basket, dining_room):\n                    observe(basket, \"Locate the basket containing clothes\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Put the clothes into the washing machine, add soap, and run the machine.",
        "cdl": " \nbehavior place_clothes_in_washing_machine(clothes:item, washing_machine:item):\n    body:\n        achieve inside(clothes, washing_machine)\n\nbehavior add_soap_to_washing_machine(soap:item, washing_machine:item):\n    body:\n        achieve inside(soap, washing_machine)\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        if has_switch(washing_machine):\n            achieve is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        # Select the basket with clothes\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        bind soap: item where:\n            is_soap(soap)\n        # Select the soap\n\n        foreach clothes: item:\n            if is_clothes(clothes) and inside(clothes, basket):\n                place_clothes_in_washing_machine(clothes, washing_machine)\n        # Place all clothes from the basket into the washing machine\n\n        add_soap_to_washing_machine(soap, washing_machine)\n        # Add soap to the washing machine\n\n        start_washing_machine(washing_machine)\n        # Start the washing machine\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Put cleaning solution in the dishwasher.",
        "cdl": " \nbehavior put_cleaning_solution_in_dishwasher(cleaning_solution:item, dishwasher:item):\n    body:\n        achieve inside(cleaning_solution, dishwasher)\n        # Ensure the cleaning solution is placed inside the dishwasher\n\nbehavior __goal__():\n    body:\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select the cleaning solution\n\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        put_cleaning_solution_in_dishwasher(cleaning_solution, dishwasher)\n "
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the bowls and the plates with the dishwasher.",
        "cdl": " \nbehavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher)\n        # Close the dishwasher door\n        achieve is_on(dishwasher)\n        # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        foreach o: item:\n            # Load all bowls and plates into the dishwasher\n            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):\n                load_dishwasher(o, dishwasher)\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": " \nbehavior hand_wash_jacket(jacket:item, sink:item):\n    body:\n        achieve inside(jacket, sink)\n        # Place the jacket in the sink\n\n        wash(jacket)\n        # Wash the jacket by hand\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        # Select the jacket to hand wash\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n\n        hand_wash_jacket(jacket, sink)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Use the washing machine to wash the jacket.",
        "cdl": " \nbehavior wash_jacket_in_washing_machine(jacket:item, washing_machine:item):\n    body:\n        achieve inside(jacket, washing_machine) # Place jacket inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve plugged(washing_machine) # Ensure washing machine is plugged in\n        achieve is_on(washing_machine) # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        bind jacket: item where:\n            is_clothes_jacket(jacket) and id[jacket] == 2047\n        # Select the jacket with ID 2047\n\n        wash_jacket_in_washing_machine(jacket, washing_machine) # Place the jacket in washing machine\n        start_washing_machine(washing_machine)  # Start the washing machine to wash the jacket\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "1. Wash all the vegetables.",
        "cdl": " \ndef has_faucet(sink:item):\n    # Determine whether the sink has a faucet\n    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)\n    return has_faucet\n\nbehavior wash_vegetables(vegetables:item, sink:item):\n    body:\n        achieve inside(vegetables, sink)\n        # Ensure the vegetables are placed inside the sink\n\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet,sink)\n            achieve_once is_on(faucet)\n            # If the sink has a faucet, turn it on to wash the vegetables\n\n        wash(vegetables) # Wash the vegetables\n        \n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet,sink)\n            achieve_once is_off(faucet)\n            # After washing, turn off the faucet if it was turned on\n        \nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink for washing\n        \n        foreach vegetables: item:\n            if is_food_vegetable(vegetables):\n                wash_vegetables(vegetables, sink)\n        # Wash all vegetables\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "2. Put the washed vegetables in a pot and boil them on the stove.",
        "cdl": " \nbehavior prepare_vegetables_in_pot(vegetables:item, pot:item):\n    body:\n        achieve inside(vegetables, pot)\n        # Place the washed vegetables in the pot\n\nbehavior place_pot_on_stove(pot:item, stove:item):\n    body:\n        achieve on(pot, stove)\n        # Place the pot on the stove\n\nbehavior turn_on_stove(stove:item):\n    body:\n        achieve is_on(stove)\n        # Turn on the stove to boil the vegetables\n\nbehavior __goal__():\n    body:\n        bind vegetables: item where:\n            is_food_vegetable(vegetables)\n        # Select washed vegetables\n\n        bind pot: item where:\n            is_pot(pot)\n        # Select a pot\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select the stove\n\n        prepare_vegetables_in_pot(vegetables, pot)\n        place_pot_on_stove(pot, stove)\n        turn_on_stove(stove)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "3. Store the whole pot in the fridge.",
        "cdl": " \nbehavior store_pot_in_fridge(pot:item, fridge:item):\n    body:\n        achieve inside(pot, fridge)\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve closed(fridge)\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        # Select the pot\n\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 126\n        # Select the fridge with ID 126\n\n        store_pot_in_fridge(pot, fridge)\n        close_fridge(fridge)\n "
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket thoroughly.",
        "cdl": " \nbehavior hand_wash_jacket(jacket:item, sink:item):\n    body:\n        achieve inside(jacket, sink)\n        # Place the jacket in the sink\n\n        wash(jacket)\n        # Wash the jacket by hand\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        # Select the jacket to hand wash\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink\n\n        hand_wash_jacket(jacket, sink)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the jacket using the washing machine.",
        "cdl": " \nbehavior wash_jacket_in_washing_machine(jacket:item, washing_machine:item):\n    body:\n        achieve inside(jacket, washing_machine) # Place the jacket inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve plugged(washing_machine) # Ensure the washing machine is plugged in\n        achieve is_on(washing_machine) # Turn on the washing machine\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        bind jacket: item where:\n            is_clothes_jacket(jacket) and id[jacket] == 2078\n        # Select the jacket with ID 2078\n\n        wash_jacket_in_washing_machine(jacket, washing_machine) # Place the jacket in washing machine\n        start_washing_machine(washing_machine) # Start the washing machine to wash the jacket\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Slice the chicken.",
        "cdl": " \nbehavior slice_chicken(chicken:item, cutting_board:item):\n    body:\n        achieve cut(chicken) # Slice the chicken\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken) # Select the chicken\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) # Select the cutting board\n        slice_chicken(chicken, cutting_board)\n"
    }
]