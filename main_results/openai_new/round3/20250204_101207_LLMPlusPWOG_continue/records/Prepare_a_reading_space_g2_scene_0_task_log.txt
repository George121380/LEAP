From agent.py
Reset goals: The sub-goals are: 
['Find the book and put it on the table in home office. Then turn on the light in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior turn_on_light(light:item):
    body:
        if has_switch(light):
            achieve is_on(light)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Bind the book

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Bind the table inside the home office

        bind light: item where:
            is_light(light) and inside(light, home_office)
        # Bind the light inside the home office with a switch

        place_book_on_table(book, table)
        # Place the book on the table in the home office

        turn_on_light(light)
        # Turn on the light in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_home_office(book:item):
    # Function to check if a book is in the home office
    symbol is_in_home_office=exists room: item : is_home_office(room) and inside(book, room)
    return is_in_home_office

behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table) # Place the book on the table

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn on the light

behavior __goal__():
    body:
        # Find the book and ensure its in the home office
        bind book: item where:
            is_book(book)
        if not is_in_home_office(book):
            # If the book is not in the home office, search for its location
            observe(book, "Check if the book is inside the home office")
        
        # Place the book on a table in the home office
        bind table: item where:
            is_table(table)
            # Assuming the table is in the home office, since no specific location or table is specified
        place_book_on_table(book, table)
        
        # Turn on the light in the home office
        bind light: item where:
            is_light(light)
            # Assuming the light is the one in the home office since no specific light is specified
        turn_on_light(light)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_in_home_office(book:item):
    # Function to check if a book is in the home office
    symbol is_in_home_office=exists room: item : is_home_office(room) and inside(book, room)
    return is_in_home_office

behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table) # Place the book on the table

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn on the light

behavior __goal__():
    body:
        # Find the book and ensure its in the home office
        bind book: item where:
            is_book(book)
        if not is_in_home_office(book):
            # If the book is not in the home office, search for its location
            observe(book, "Check if the book is inside the home office")
        
        # Place the book on a table in the home office
        bind table: item where:
            is_table(table)
            # Assuming the table is in the home office, since no specific location or table is specified
        place_book_on_table(book, table)
        
        # Turn on the light in the home office
        bind light: item where:
            is_light(light)
            # Assuming the light is the one in the home office since no specific light is specified
        turn_on_light(light)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_101)open_executor(bookshelf_101)exp(book_2066, bookshelf_101)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check if the book is inside the home office)grab_executor(book_2066)walk_executor(table_107)put_executor(book_2066, table_107)walk_executor(light_64)switchon_executor(light_64)
##############################
From agent.py
walk_executor(bookshelf_101)
Robot find: drawing_176, drawing_174, Robot is close to the bookshelf_101. 
##############################
From agent.py
open_executor(bookshelf_101)
Robot find: Robot is close to the photoframe_185. Robot is close to the bookshelf_101. bookshelf_101 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_101)
Fail to find book_2066 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_233)open_executor(bookshelf_233)exp(book_2066, bookshelf_233)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check if the book is inside the home office)grab_executor(book_2066)walk_executor(table_107)put_executor(book_2066, table_107)walk_executor(light_64)switchon_executor(light_64)
##############################
From agent.py
walk_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. 
##############################
From agent.py
open_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. bookshelf_233 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_233)
Fail to find book_2066 around bookshelf_233. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check if the book is inside the home office)grab_executor(book_2066)walk_executor(table_107)put_executor(book_2066, table_107)walk_executor(light_64)switchon_executor(light_64)
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: book_2067, drawing_402, drawing_403, drawing_404, book_2066, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Check if the book is inside the home office)grab_executor(book_2066)walk_executor(table_107)put_executor(book_2066, table_107)walk_executor(light_64)switchon_executor(light_64)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
open_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. book_2066 is opened. 
##############################
From agent.py
obs(book_2066, Check if the book is inside the home office)
Get this information:  book_2066 is inside home_office_319. book_2066 is close to bookshelf_354. book_2066 is close to character_65. book_2066 is on bookshelf_354. book_2066 is OPEN.
##############################
From agent.py
grab_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(table_107)
Robot find: clothes_hat_2045, clothes_gloves_2046, mat_173, drawing_175, Robot is close to the book_2066. Robot is close to the table_107. 
##############################
From agent.py
put_executor(book_2066, table_107)
Robot find: Robot is close to the book_2066. Robot is close to the table_107. table_107 is close book_2066. book_2066 is close table_107. book_2066 is on table_107. book_2066 released by right hand. 
##############################
From agent.py
walk_executor(light_64)
Robot find: mat_22, towel_rack_32, Robot is close to the light_64. 
##############################
From agent.py
switchon_executor(light_64)
Robot find: Robot is close to the light_64. light_64 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the table in home office. Then turn on the light in the home office.
Action History:
['walk_executor(bookshelf_101)', 'open_executor(bookshelf_101)', 'walk_executor(bookshelf_233)', 'open_executor(bookshelf_233)', 'walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'open_executor(book_2066)', 'grab_executor(book_2066)', 'walk_executor(table_107)', 'put_executor(book_2066, table_107)', 'walk_executor(light_64)', 'switchon_executor(light_64)']
Time info:
Time consume: 81 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 2
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
