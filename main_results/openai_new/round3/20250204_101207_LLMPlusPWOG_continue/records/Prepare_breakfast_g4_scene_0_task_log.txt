From agent.py
Reset goals: The sub-goals are: 
['Make chicken pasta, put it in a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_dry_pasta_2042_around_cupboard_229(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def cooked(chicken_pasta:item):
    # Function to check if the chicken pasta is cooked
    symbol is_cooked=exists pot: item : inside(chicken_pasta, pot) and is_food(chicken_pasta)
    return is_cooked

behavior cook_chicken_pasta(chicken_pasta:item, pot:item, stove:item):
    body:
        achieve inside(chicken_pasta, pot) # Place chicken pasta inside a pot
        achieve is_on(stove) # Turn on the stove to cook the pasta
        
behavior put_food_on_plate(food:item, plate:item):
    body:
        achieve on(food, plate) # Place the food on the plate

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove) # Turn off the stove

behavior __goal__():
    body:
        bind chicken_pasta: item where:
            is_food_chicken(chicken_pasta) or is_dry_pasta(chicken_pasta) 
        # Select the chicken pasta item
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot to cook pasta

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking

        bind plate: item where:
            is_plate(plate)
        # Select a plate for serving the pasta
        
        cook_chicken_pasta(chicken_pasta, pot, stove)

        if cooked(chicken_pasta):
            put_food_on_plate(chicken_pasta, plate)
            turn_off_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def cooked(chicken_pasta:item):
    # Function to check if the chicken pasta is cooked
    symbol is_cooked=exists pot: item : inside(chicken_pasta, pot) and is_food(chicken_pasta)
    return is_cooked

behavior cook_chicken_pasta(chicken_pasta:item, pot:item, stove:item):
    body:
        achieve inside(chicken_pasta, pot) # Place chicken pasta inside a pot
        achieve is_on(stove) # Turn on the stove to cook the pasta
        
behavior put_food_on_plate(food:item, plate:item):
    body:
        achieve on(food, plate) # Place the food on the plate

behavior turn_off_stove(stove:item):
    body:
        achieve is_off(stove) # Turn off the stove

behavior __goal__():
    body:
        bind chicken_pasta: item where:
            is_food_chicken(chicken_pasta) or is_dry_pasta(chicken_pasta) 
        # Select the chicken pasta item
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot to cook pasta

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking

        bind plate: item where:
            is_plate(plate)
        # Select a plate for serving the pasta
        
        cook_chicken_pasta(chicken_pasta, pot, stove)

        if cooked(chicken_pasta):
            put_food_on_plate(chicken_pasta, plate)
            turn_off_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(cupboard_229)open_executor(cupboard_229)exp(dry_pasta_2042, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: pot_2069, knife_2050, cutting_board_2051, cup_2064, fryingpan_2083, napkin_2005, cup_2063, oil_2079, drawing_239, drawing_238, drawing_240, drawing_241, drawing_242, drawing_243, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(dry_pasta_2042, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(dry_pasta_2042, cupboard_229)
Fail to find dry_pasta_2042 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_158)exp(dry_pasta_2042, closetdrawer_158)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(closetdrawer_158)
Robot find: Robot is close to the dresser_123. 
##############################
From agent.py
exp(dry_pasta_2042, closetdrawer_158)
Fail to find dry_pasta_2042 around closetdrawer_158. 
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(closetdrawer_158)']
Time info:
Time consume: 68 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 1
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 16 steps
Keystate: k2 - Requires: 15 steps
Keystate: k3 - Requires: 11 steps
Keystate: k4 - Requires: 11 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
