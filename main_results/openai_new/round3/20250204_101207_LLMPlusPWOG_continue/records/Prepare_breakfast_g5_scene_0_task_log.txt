From agent.py
Reset goals: The sub-goals are: 
['Prepare a cup of hot milk with cereal inside.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(cup:item, microwave:item):
    body:
        achieve_once inside(cup, microwave)
        # Place the cup of milk inside the microwave
        achieve is_on(microwave)
        # Turn on the microwave to heat the milk
        achieve is_off(microwave)
        # Turn off the microwave after heating

behavior add_cereal_to_milk(cereal:item, milk:item, cup:item):
    body:
        achieve inside(cereal, cup)
        # Add the cereal into the cup with hot milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind milk: item where:
            is_milk(milk) and inside(milk, cup)
        # Select milk inside the cup

        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        
        bind cereal: item where:
            is_food_cereal(cereal) 
        # Select a cereal

        heat_milk(cup, microwave)
        # Heat the milk in the cup using the microwave

        add_cereal_to_milk(cereal, milk, cup)
        # Add cereal to the hot milk in the cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_in_cup(cup:item):
    # Function to check if there is milk in a specified cup
    symbol has_milk=exists o: item : is_milk(o) and inside(o, cup)
    return has_milk

behavior heat_milk(c:item):
    body:
        achieve is_on(c)
        # The item (such as microwave or stove) used to heat the milk should be turned on

behavior pour_milk_in_cup(milk:item, cup:item):
    body:
        achieve inside(milk, cup)
        # Pour the milk into the cup

behavior add_cereal_to_cup(cereal:item, cup:item):
    body:
        achieve inside(cereal, cup)
        # Add the cereal to the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        if not has_milk_in_cup(cup):
            # Check if the cup has no milk
            bind milk: item where:
                is_milk(milk) and grabbable(milk)
            achieve_once inhand(milk)
            heat_milk(milk)
            pour_milk_in_cup(milk, cup)
        # Heat and pour milk if its not already in the cup

        bind cereal: item where:
            is_food_cereal(cereal)
        add_cereal_to_cup(cereal, cup)
        # Add cereal to the cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def contains_milk(cup:item):
    # Function to check if the cup contains milk
    symbol has_milk=exists o: item : is_milk(o) and inside(o, cup)
    return has_milk

def contains_cereal(cup:item):
    # Function to check if the cup contains cereal
    symbol has_cereal=exists o: item : is_food_cereal(o) and inside(o, cup)
    return has_cereal

behavior prepare_hot_milk(cup:item):
    body:
        achieve_once close_char(char, cup)
        if not contains_milk(cup):
            bind milk: item where:
                is_milk(milk)
            achieve_once inhand(milk)
            achieve inside(milk, cup)
        
        if not contains_cereal(cup):
            bind cereal: item where:
                is_food_cereal(cereal)
            achieve_once inhand(cereal)
            achieve inside(cereal, cup)

        if not is_on(cup):
            achieve is_on(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup to prepare the hot milk with cereal
        prepare_hot_milk(cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_food_cereal_2015_around_cupboard_229(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_cereal,cupboard_instance)
        else:
            exp(food_cereal,cupboard_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,cupboard_instance]=True
        close[cupboard_instance,food_cereal]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(item_milk:item, microwave:item):
    body:
        achieve closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave to heat the milk
        achieve has_water(item_milk)
        # Ensure the milk is heated

behavior add_cereal_to_milk(item_cereal:item, item_milk:item):
    body:
        achieve inside(item_cereal, item_milk)
        # Add the cereal to the heated milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select a milk item
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        heat_milk(milk, microwave)
        # Heat the milk
        
        add_cereal_to_milk(cereal, milk)
        # Add cereal to the hot milk

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior heat_milk(item_milk:item, microwave:item):
    body:
        achieve closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave to heat the milk
        achieve has_water(item_milk)
        # Ensure the milk is heated

behavior add_cereal_to_milk(item_cereal:item, item_milk:item):
    body:
        achieve inside(item_cereal, item_milk)
        # Add the cereal to the heated milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select a milk item
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select a cereal item

        heat_milk(milk, microwave)
        # Heat the milk
        
        add_cereal_to_milk(cereal, milk)
        # Add cereal to the hot milk

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)open_executor(milk_2043)grab_executor(milk_2043)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_cereal_2015, cupboard_229)walk_executor(food_cereal_2015)grab_executor(food_cereal_2015)walk_executor(milk_2043)putin_executor(food_cereal_2015, milk_2043)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_239, drawing_240, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
open_executor(milk_2043)grab_executor(milk_2043)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(food_cereal_2015)grab_executor(food_cereal_2015)walk_executor(milk_2043)putin_executor(food_cereal_2015, milk_2043)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_cereal_in_cup(cup:item):
    # Function to check if there is cereal inside a specified cup
    symbol has_cereal=exists o: item : is_food_cereal(o) and inside(o, cup)
    return has_cereal

def is_hot(milk:item):
    # Function to check if the milk is hot
    # Assuming a symbolic checking since directly checking hot is not an available property
    return True # Placeholder return, assuming the function checks the temperature of milk

behavior pour_milk_into_cup(milk:item, cup:item):
    body:
        achieve inside(milk, cup) # Pour milk into the cup

behavior add_cereal_to_cup(cereal:item, cup:item):
    body:
        achieve inside(cereal, cup) # Add cereal into the cup

behavior achieve_hot_milk(milk:item):
    body:
        # You might consider heating the milk if not hot
        # However, directly ensuring the milk is hot
        achieve is_hot(milk)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and open(fridge)
        # Bind any opened fridge (since fridge_289 was opened)

        bind milk: item where:
            is_milk(milk) and close(milk, fridge)
        # Selecting milk that could be visible when the fridge is opened

        bind cup: item where:
            is_cup(cup) and recipient(cup)
        # Select a cup that can receive milk and cereal

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal

        achieve_hot_milk(milk) # Ensure milk is hot for consumption

        pour_milk_into_cup(milk, cup) # Pour hot milk into the cup

        if not has_cereal_in_cup(cup):
            add_cereal_to_cup(cereal, cup) # Add cereal if not already inside


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_cereal_in_cup(cup:item):
    # Function to check if there is cereal inside a specified cup
    symbol has_cereal=exists o: item : is_food_cereal(o) and inside(o, cup)
    return has_cereal

def is_hot(milk:item):
    # Function to check if the milk is hot
    # Assuming a symbolic checking since directly checking hot is not an available property
    return True # Placeholder return, assuming the function checks the temperature of milk

behavior pour_milk_into_cup(milk:item, cup:item):
    body:
        achieve inside(milk, cup) # Pour milk into the cup

behavior add_cereal_to_cup(cereal:item, cup:item):
    body:
        achieve inside(cereal, cup) # Add cereal into the cup

behavior achieve_hot_milk(milk:item):
    body:
        # You might consider heating the milk if not hot
        # However, directly ensuring the milk is hot
        achieve is_hot(milk)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and open(fridge)
        # Bind any opened fridge (since fridge_289 was opened)

        bind milk: item where:
            is_milk(milk) and close(milk, fridge)
        # Selecting milk that could be visible when the fridge is opened

        bind cup: item where:
            is_cup(cup) and recipient(cup)
        # Select a cup that can receive milk and cereal

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal

        achieve_hot_milk(milk) # Ensure milk is hot for consumption

        pour_milk_into_cup(milk, cup) # Pour hot milk into the cup

        if not has_cereal_in_cup(cup):
            add_cereal_to_cup(cereal, cup) # Add cereal if not already inside


##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(cup_2063, cupboard_229)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(food_cereal_2015)grab_executor(food_cereal_2015)walk_executor(cup_2063)putin_executor(food_cereal_2015, cup_2063)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(cup_2063, cupboard_229)
Fail to find cup_2063 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(food_cereal_2015)grab_executor(food_cereal_2015)walk_executor(cup_2063)putin_executor(food_cereal_2015, cup_2063)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: pot_2069, knife_2050, cutting_board_2051, cup_2064, fryingpan_2083, napkin_2005, cup_2063, oil_2079, drawing_238, drawing_241, drawing_242, drawing_243, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(food_cereal_2015)grab_executor(food_cereal_2015)walk_executor(cup_2063)putin_executor(food_cereal_2015, cup_2063)
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the fridge_289. Robot is close to the milk_2043. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the fridge_289. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. milk_2043 is close cup_2063. cup_2063 is close milk_2043. milk_2043 is inside cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. 
##############################
From agent.py
grab_executor(food_cereal_2015)
Robot find: Robot is close to the fridge_289. Robot is close to the food_cereal_2015. Grabbing food_cereal_2015 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
putin_executor(food_cereal_2015, cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. cup_2063 is close food_cereal_2015. food_cereal_2015 is inside cup_2063. food_cereal_2015 is close cup_2063. food_cereal_2015 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the milk is hot. The task of heating the milk has not been addressed or confirmed, which is an essential part of preparing a cup of hot milk with cereal inside.
##############################
From agent.py
Human Instruction: You need to ensure that the milk is hot. The task of heating the milk has not been addressed or confirmed, which is an essential part of preparing a cup of hot milk with cereal inside.

Trial and Error: You can not open milk_2043
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for milk_2043 around fridge_289.
Action 5: Walk to cupboard_229.
Action 6: Open cupboard_229.
Action 7: look for cup_2063 around cupboard_229.
Action 8: Walk to kitchen_counter_230.
Action 9: look for cup_2063 around kitchen_counter_230.
Action 10: Walk to milk_2043.
Action 11: Grab milk_2043.
Action 12: Walk to cup_2063.
Action 13: Put milk_2043 into cup_2063.
Action 14: Walk to food_cereal_2015.
Action 15: Grab food_cereal_2015.
Action 16: Walk to cup_2063.
Action 17: Put food_cereal_2015 into cup_2063.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_cup_filled_with_milk(cup:item, milk:item):
    # Function to check if the cup is filled with milk
    symbol filled=exists item: item : is_milk(item) and inside(item, cup)
    return filled

behavior heat_milk(milk:item, microwave:item):
    body:
        achieve_once inside(milk, microwave)
        # Place milk inside the microwave
        achieve closed(microwave)
        # Close the microwave door
        achieve is_on(microwave)
        # Turn on the microwave to heat the milk
        achieve is_off(microwave)
        # Turn off the microwave after heating

behavior add_cereal(cereal:item, cup:item):
    body:
        achieve inside(cereal, cup) 
        # Add the cereal inside the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and is_cup_filled_with_milk(cup, milk)
        # Select the cup that has milk
        
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal
        
        if not is_cup_filled_with_milk(cup, milk):
            heat_milk(milk, microwave)
        
        add_cereal(cereal, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_toaster_292(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==292
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(bowl,toaster_instance)
        else:
            exp(bowl,toaster_instance)
    eff:
        unknown[bowl]=False
        close[bowl,toaster_instance]=True
        close[toaster_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_hot_milk(milk:item):
    # Function to check if the milk is hot
    symbol is_hot=not is_off(milk) # Assuming the milk not being off implies heat, as no direct hot state is defined
    return is_hot

def contains_cereal(cup:item):
    # Function to check if a cup contains cereal
    symbol has_cereal=exists cereal: item : is_food_cereal(cereal) and inside(cereal, cup)
    return has_cereal

behavior hot_milk_in_cup(milk:item, cup:item):
    body:
        achieve inside(milk, cup)
        # Put the milk inside the cup

behavior add_cereal_to_cup(cereal:item, cup:item):
    body:
        achieve inside(cereal, cup)
        # Add cereal to the cup

behavior ensure_milk_is_hot(milk:item):
    body:
        if not has_hot_milk(milk):
            # If milk is not hot, perform operations to heat the milk
            achieve_once is_on(milk)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind cup: item where:
            is_cup(cup)
        # Select the cup

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        ensure_milk_is_hot(milk)
        # Ensure the milk is hot

        hot_milk_in_cup(milk, cup)
        # Put the hot milk inside the cup

        add_cereal_to_cup(cereal, cup)
        # Add cereal to the cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_wallshelf_35(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(milk:item, microwave:item):
    body:
        achieve inside(milk, microwave)
        # Place the milk inside the microwave
        achieve_once is_on(microwave)
        # Turn on the microwave to heat the milk
        achieve_once is_off(microwave)
        # Turn off the microwave after heating

behavior prepare_hot_milk_with_cereal(cup:item, cereal:item, milk:item, microwave:item):
    body:
        heat_milk(milk, microwave)
        achieve inside(milk, cup)
        # Pour the hot milk into the cup
        achieve inside(cereal, cup)
        # Add cereal into the cup with hot milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        prepare_hot_milk_with_cereal(cup, cereal, milk, microwave)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_bench_228(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==228
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(bowl,bench_instance)
        else:
            exp(bowl,bench_instance)
    eff:
        unknown[bowl]=False
        close[bowl,bench_instance]=True
        close[bench_instance,bowl]=True
    

behavior find_basket_for_clothes_2006_around_washing_machine_2007(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(basket_for_clothes,washing_machine_instance)
        else:
            exp(basket_for_clothes,washing_machine_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,washing_machine_instance]=True
        close[washing_machine_instance,basket_for_clothes]=True
    

#exp_behavior_end

#goal_representation
 
def is_heated_milk(item:item, heat_source:item):
    symbol is_hot=exists heat:item : close(heat, heat_source) and is_on(heat)
    return is_hot

behavior prepare_hot_milk_cereal(milk:item, cereal:item, cup:item, heat_source:item):
    body:
        achieve inside(milk, cup)
        # Pour milk into the cup
        foreach cereal_piece: item:
            if is_food_cereal(cereal_piece) and inside(cereal_piece, cereal):
                achieve inside(cereal_piece, cup)
                # Place cereal into the cup
        if not is_heated_milk(milk, heat_source):
            achieve_once close_char(char, heat_source)
            # Ensure the character is near the heat source
            achieve_once is_on(heat_source)
            # Turn on the heat source
            # Implicit heating action

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup
        bind milk: item where:
            is_milk(milk)
        # Select the milk
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal
        bind heat_source: item where:
            is_microwave(heat_source) or is_stove(heat_source)
        # Select a heat source, either a microwave or stove
        prepare_hot_milk_cereal(milk, cereal, cup, heat_source)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_hot_milk(cup:item):
    # Function to check if the cup has hot milk
    symbol has_hot_milk=exists milk: item : is_milk(milk) and inside(milk, cup) and is_hot(milk)
    return has_hot_milk

def contains_cereal(cup:item):
    # Function to check if the cup contains cereal
    symbol contains_cereal=exists food: item : is_food_cereal(food) and inside(food, cup)
    return contains_cereal

behavior heat_milk(milk:item):
    body:
        achieve is_hot(milk) # Ensure the milk is hot

behavior prepare_hot_milk_with_cereal(cup:item, milk:item, cereal:item):
    body:
        achieve inside(milk, cup) # Pour milk into the cup
        heat_milk(milk) # Heat the milk
        achieve inside(cereal, cup) # Put cereal into the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and is_clean(cup) # Select a clean cup
        
        bind milk: item where:
            is_milk(milk) and not is_hot(milk) # Select milk that is not yet hot

        bind cereal: item where:
            is_food_cereal(cereal) # Select cereal
        
        prepare_hot_milk_with_cereal(cup, milk, cereal)
        # Prepare a cup with hot milk and cereal


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_wallshelf_235(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_basket_for_clothes_2006_around_washing_machine_2007(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(basket_for_clothes,washing_machine_instance)
        else:
            exp(basket_for_clothes,washing_machine_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,washing_machine_instance]=True
        close[washing_machine_instance,basket_for_clothes]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_milk(milk:item, stove:item, container:item):
    body:
        achieve inside(milk, container) # Put the milk inside a container
        achieve on(container, stove) # Place the container with milk on the stove
        achieve is_on(stove) # Turn the stove on to heat the milk

behavior add_cereal_to_milk(container:item, cereal:item):
    body:
        achieve inside(cereal, container) # Add cereal to the container with the hot milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item to be heated

        bind container: item where:
            is_cup(container) and id[container]==2063
        # Select the cup with ID 2063 as the container for the milk

        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal]==2015
        # Select the cereal with ID 2015

        bind stove: item where:
            is_stove(stove)
        # Select a stove to heat the milk

        heat_milk(milk, stove, container)
        add_cereal_to_milk(container, cereal)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior heat_milk(milk:item, stove:item, container:item):
    body:
        achieve inside(milk, container) # Put the milk inside a container
        achieve on(container, stove) # Place the container with milk on the stove
        achieve is_on(stove) # Turn the stove on to heat the milk

behavior add_cereal_to_milk(container:item, cereal:item):
    body:
        achieve inside(cereal, container) # Add cereal to the container with the hot milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk item to be heated

        bind container: item where:
            is_cup(container) and id[container]==2063
        # Select the cup with ID 2063 as the container for the milk

        bind cereal: item where:
            is_food_cereal(cereal) and id[cereal]==2015
        # Select the cereal with ID 2015

        bind stove: item where:
            is_stove(stove)
        # Select a stove to heat the milk

        heat_milk(milk, stove, container)
        add_cereal_to_milk(container, cereal)

##############################
From agent.py-> find a plan in act()
grab_executor(cup_2063)walk_executor(stove_2065)put_executor(cup_2063, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the food_cereal_2015. Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(cup_2063, stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the stove_2065. stove_2065 is close cup_2063. cup_2063 is close stove_2065. cup_2063 is on stove_2065. cup_2063 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the stove_2065. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'open_executor(milk_2043) (Failed)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(kitchen_counter_230)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'putin_executor(milk_2043, cup_2063)', 'walk_executor(food_cereal_2015)', 'grab_executor(food_cereal_2015)', 'walk_executor(cup_2063)', 'putin_executor(food_cereal_2015, cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(stove_2065)', 'put_executor(cup_2063, stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 229 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 11
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 9 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
