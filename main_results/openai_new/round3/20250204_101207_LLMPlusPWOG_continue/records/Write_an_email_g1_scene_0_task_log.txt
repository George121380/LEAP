From agent.py
Reset goals: The sub-goals are: 
['Turn on the computer in home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_166_around_computer_417(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_keyboard_168_around_home_office_319(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(keyboard,home_office_instance)
        else:
            exp(keyboard,home_office_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,home_office_instance]=True
        close[home_office_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
bind home_office: item where:
    is_home_office(home_office)

bind computer: item where:
    is_computer(computer) and inside(computer, home_office)

behavior turn_on_computer(computer:item):
    body:
        achieve is_on(computer)

behavior __goal__():
    body:
        turn_on_computer(computer)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_home_office_319(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(mouse,home_office_instance)
        else:
            exp(mouse,home_office_instance)
    eff:
        unknown[mouse]=False
        close[mouse,home_office_instance]=True
        close[home_office_instance,mouse]=True
    

behavior find_keyboard_168_around_home_office_319(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(keyboard,home_office_instance)
        else:
            exp(keyboard,home_office_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,home_office_instance]=True
        close[home_office_instance,keyboard]=True
    

behavior find_dvd_player_2061_around_television_410(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==410
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(dvd_player,television_instance)
        else:
            exp(dvd_player,television_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,television_instance]=True
        close[television_instance,dvd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_computer(computer:item):
    body:
        if has_switch(computer):
            achieve is_on(computer)
        else:
            observe(computer, "Check is there a switch on the computer")

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and is_home_office(inside_char(char, computer))
        # Find the computer inside the home office
        turn_on_computer(computer)
        # Attempt to turn it on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_computer_417(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_keyboard_415_around_home_office_319(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(keyboard,home_office_instance)
        else:
            exp(keyboard,home_office_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,home_office_instance]=True
        close[home_office_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_computer(computer: item):
    body:
        if has_plug(computer):
            # Check if the computer is plugged in before turning it on
            achieve plugged(computer)

        achieve is_on(computer)
        # Ensure the computer is turned on

behavior __goal__():
    body:
        bind office: item where:
            is_home_office(office)
        # Select the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, office)
        # Select the computer in the home office

        turn_on_computer(computer)
        # Turn on the computer

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior turn_on_computer(computer: item):
    body:
        if has_plug(computer):
            # Check if the computer is plugged in before turning it on
            achieve plugged(computer)

        achieve is_on(computer)
        # Ensure the computer is turned on

behavior __goal__():
    body:
        bind office: item where:
            is_home_office(office)
        # Select the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, office)
        # Select the computer in the home office

        turn_on_computer(computer)
        # Turn on the computer

##############################
From agent.py-> find a plan in act()
walk_executor(computer_417)switchon_executor(computer_417)
##############################
From agent.py
walk_executor(computer_417)
Robot find: chair_356, keyboard_415, mouse_413, Robot is close to the computer_417. 
##############################
From agent.py
switchon_executor(computer_417)
Robot find: Robot is close to the computer_417. computer_417 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Turn on the computer in home office.
Action History:
['walk_executor(computer_417)', 'switchon_executor(computer_417)']
Time info:
Time consume: 48 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 3
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
