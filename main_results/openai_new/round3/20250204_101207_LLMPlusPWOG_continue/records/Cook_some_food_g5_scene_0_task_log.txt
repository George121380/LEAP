From agent.py
Reset goals: The sub-goals are: 
['Make oil fried banana.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_fryingpan_2083_around_cupboard_229(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_ingredients(banana: item, oil: item, fryingpan: item):
    body:
        assert is_food_banana(banana)
        assert is_oil(oil)
        assert is_fryingpan(fryingpan)
        achieve inside(banana, fryingpan)
        achieve inside(oil, fryingpan)

behavior start_cooking(fryingpan: item, stove: item):
    body:
        assert is_fryingpan(fryingpan)
        assert is_stove(stove)
        achieve is_on(stove)
        achieve on(fryingpan, stove)

behavior finish_cooking(stove: item, fryingpan: item, plate: item):
    body:
        assert is_stove(stove)
        assert is_fryingpan(fryingpan)
        assert is_plate(plate)
        achieve is_off(stove)
        achieve inside(fried_banana, fryingpan) # Assuming fried_banana is a known concept
        achieve on(fried_banana, plate)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana)
        bind oil: item where:
            is_oil(oil)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        bind plate: item where:
            is_plate(plate)
        
        prepare_ingredients(banana, oil, fryingpan)
        start_cooking(fryingpan, stove)
        finish_cooking(stove, fryingpan, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_fryingpan_2083_around_cupboard_229(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def has_hot_oil_in_pan(frying_pan:item):
    # Function to check if there is hot oil in the frying pan
    symbol has_hot_oil=exists oil: item : is_oil(oil) and inside(oil, frying_pan)
    return has_hot_oil

behavior peel_banana(banana:item):
    body:
        achieve cut(banana) # Cut the banana to start the peeling process
        
behavior fry_banana(banana:item, frying_pan:item):
    body:
        assert has_hot_oil_in_pan(frying_pan)
        achieve inside(banana, frying_pan)

behavior __goal__():
    body:
        bind banana: item where:
            is_food_banana(banana) and not cut(banana)
        # Select a banana that needs to be peeled and fried
        
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and is_on(frying_pan)
        # Ensure the frying pan is on and ready for frying
        
        exist oil: item where:
            is_oil(oil) and inside(oil, frying_pan)
            # Check if there is oil in the frying pan
            observe(frying_pan,"Check if the oil in the pan is hot for frying") 
            
        if not has_hot_oil_in_pan(frying_pan):
            achieve_once is_on(frying_pan)
        
        peel_banana(banana)
        fry_banana(banana, frying_pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_frying_pan_on_stove(stove:item):
    # Determine whether there is a frying pan on the stove
    symbol has_frying_pan=exists pan: item : is_fryingpan(pan) and on(pan, stove)
    return has_frying_pan

behavior prepare_banana_frying(oil:item, banana:item, fryingpan:item, stove:item):
    body:
        achieve inside(banana, fryingpan)
        # Place banana inside frying pan
        achieve inside(oil, fryingpan)
        # Pour oil into frying pan
        achieve is_on(stove)
        # Turn on stove

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select an oil
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        if is_frying_pan_on_stove(stove):
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and on(fryingpan, stove)
            # Select frying pan on the stove
            prepare_banana_frying(oil, banana, fryingpan, stove)
        else:
            foreach o: item:
                if is_fryingpan(o) and not visited(o):
                    observe(o, "Check if it is on the stove")
                    # Observe to find a frying pan on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_frying_pan_on_stove(stove:item):
    # Determine whether there is a frying pan on the stove
    symbol has_frying_pan=exists pan: item : is_fryingpan(pan) and on(pan, stove)
    return has_frying_pan

behavior prepare_banana_frying(oil:item, banana:item, fryingpan:item, stove:item):
    body:
        achieve inside(banana, fryingpan)
        # Place banana inside frying pan
        achieve inside(oil, fryingpan)
        # Pour oil into frying pan
        achieve is_on(stove)
        # Turn on stove

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select an oil
        bind banana: item where:
            is_food_banana(banana)
        # Select a banana
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        if is_frying_pan_on_stove(stove):
            bind fryingpan: item where:
                is_fryingpan(fryingpan) and on(fryingpan, stove)
            # Select frying pan on the stove
            prepare_banana_frying(oil, banana, fryingpan, stove)
        else:
            foreach o: item:
                if is_fryingpan(o) and not visited(o):
                    observe(o, "Check if it is on the stove")
                    # Observe to find a frying pan on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(fryingpan_2083, kitchen_counter_230)walk_executor(fryingpan_2083)obs(fryingpan_2083, Check if it is on the stove)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: pot_2069, knife_2050, cutting_board_2051, cup_2064, fryingpan_2083, napkin_2005, cup_2063, oil_2079, drawing_239, drawing_238, drawing_240, drawing_241, drawing_242, drawing_243, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(fryingpan_2083, kitchen_counter_230)
Find fryingpan_2083. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)obs(fryingpan_2083, Check if it is on the stove)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. 
##############################
From agent.py
obs(fryingpan_2083, Check if it is on the stove)
Get this information:  fryingpan_2083 is on kitchen_counter_230. fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to kitchen_counter_230. fryingpan_2083 is close to character_65. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the frying pan is on the stove. Following that, you should place the banana in the frying pan, pour oil into it, and turn on the stove to make oil fried banana.
##############################
From agent.py
Human Instruction: You need to ensure the frying pan is on the stove. Following that, you should place the banana in the frying pan, pour oil into it, and turn on the stove to make oil fried banana.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for fryingpan_2083 around kitchen_counter_230.
Action 3: Walk to fryingpan_2083.
Action 4: Observe around fryingpan_2083 with the question of Check if it is on the stove.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2011_around_fridge_289(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_banana,fridge_instance)
        else:
            exp(food_banana,fridge_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,fridge_instance]=True
        close[fridge_instance,food_banana]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_on_stove(fryingpan:item, stove:item):
    # Function to check if the frying pan is on the stove
    symbol is_on_stove=on(fryingpan, stove)
    return is_on_stove

behavior place_banana_in_fryingpan(banana:item, fryingpan:item):
    body:
        achieve inside(banana, fryingpan) # Place the banana inside the frying pan

behavior pour_oil_into_fryingpan(oil:item, fryingpan:item):
    body:
        achieve inside(oil, fryingpan) # Pour oil into the frying pan

behavior start_stove(stove:item):
    body:
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind banana: item where:
            is_food_banana(banana)
        # Select the banana

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        if not is_fryingpan_on_stove(fryingpan, stove):
            achieve on(fryingpan, stove)
            # If the frying pan is not on the stove, place it there

        place_banana_in_fryingpan(banana, fryingpan)
        # Place the banana in the frying pan

        pour_oil_into_fryingpan(oil, fryingpan)
        # Pour oil into the frying pan

        start_stove(stove)
        # Turn on the stove to fry the banana

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_fryingpan_on_stove(fryingpan:item, stove:item):
    # Function to check if the frying pan is on the stove
    symbol is_on_stove=on(fryingpan, stove)
    return is_on_stove

behavior place_banana_in_fryingpan(banana:item, fryingpan:item):
    body:
        achieve inside(banana, fryingpan) # Place the banana inside the frying pan

behavior pour_oil_into_fryingpan(oil:item, fryingpan:item):
    body:
        achieve inside(oil, fryingpan) # Pour oil into the frying pan

behavior start_stove(stove:item):
    body:
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind banana: item where:
            is_food_banana(banana)
        # Select the banana

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        if not is_fryingpan_on_stove(fryingpan, stove):
            achieve on(fryingpan, stove)
            # If the frying pan is not on the stove, place it there

        place_banana_in_fryingpan(banana, fryingpan)
        # Place the banana in the frying pan

        pour_oil_into_fryingpan(oil, fryingpan)
        # Pour oil into the frying pan

        start_stove(stove)
        # Turn on the stove to fry the banana

##############################
From agent.py-> find a plan in act()
grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_banana_2011, fridge_289)walk_executor(food_banana_2011)grab_executor(food_banana_2011)walk_executor(fryingpan_2083)putin_executor(food_banana_2011, fryingpan_2083)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 is close stove_2065. fryingpan_2083 released by right hand. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_banana_2011, fridge_289)
Find food_banana_2011. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_banana_2011)walk_executor(fryingpan_2083)putin_executor(food_banana_2011, fryingpan_2083)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(food_banana_2011)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_banana_2011 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_banana_2011, fryingpan_2083)
Robot find: Robot is close to the food_banana_2011. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_banana_2011 is inside fryingpan_2083. food_banana_2011 is close fryingpan_2083. fryingpan_2083 is close food_banana_2011. food_banana_2011 released by right hand. 
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the oil_2079. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the oil_2079. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. oil_2079 is inside fryingpan_2083. oil_2079 is close fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make oil fried banana.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_banana_2011)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_banana_2011, fryingpan_2083)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 135 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 0

Task complete rate:
1
Scene_id: 0
##############################
