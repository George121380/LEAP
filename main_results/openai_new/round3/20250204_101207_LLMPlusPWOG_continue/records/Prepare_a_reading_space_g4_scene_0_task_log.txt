From agent.py
Reset goals: The sub-goals are: 
['Find the book and put it on the coffe table in home office. Then prepare a cup of hot milk, put it on the table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_book_2066_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book_and_place_on_table(book: item, coffee_table: item, home_office: item):
    body:
        if not visited(book):
            observe(book, "Locate the book")
            achieve_once inhand(book)
        achieve on(book, coffee_table)

behavior prepare_hot_milk_and_place_on_table(cup: item, milk: item, coffee_table: item, kitchen_counter: item):
    body:
        if not visited(cup):
            observe(cup, "Locate an empty cup")
        if not visited(milk):
            observe(milk, "Ensure milk is in the cup")
        achieve_once inside(milk, cup) # Assume the cup is filled with milk
        achieve on(cup, kitchen_counter) # Assume hot milk is prepared on kitchen counter (eg, by using a kettle)
        achieve on(cup, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Find and select a book and ensure its on the coffee table
        bind book: item where:
            is_book(book) and not visited(book)
        find_book_and_place_on_table(book, coffee_table, home_office)
        # Prepare hot milk and place it on the coffee table
        bind cup: item where:
            is_cup(cup) and not visited(cup)
        bind milk: item where:
            is_milk(milk)
        prepare_hot_milk_and_place_on_table(cup, milk, coffee_table, coffee_table)        

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_book_and_place_on_table(book: item, coffee_table: item, home_office: item):
    body:
        if not visited(book):
            observe(book, "Locate the book")
            achieve_once inhand(book)
        achieve on(book, coffee_table)

behavior prepare_hot_milk_and_place_on_table(cup: item, milk: item, coffee_table: item, kitchen_counter: item):
    body:
        if not visited(cup):
            observe(cup, "Locate an empty cup")
        if not visited(milk):
            observe(milk, "Ensure milk is in the cup")
        achieve_once inside(milk, cup) # Assume the cup is filled with milk
        achieve on(cup, kitchen_counter) # Assume hot milk is prepared on kitchen counter (eg, by using a kettle)
        achieve on(cup, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Find and select a book and ensure its on the coffee table
        bind book: item where:
            is_book(book) and not visited(book)
        find_book_and_place_on_table(book, coffee_table, home_office)
        # Prepare hot milk and place it on the coffee table
        bind cup: item where:
            is_cup(cup) and not visited(cup)
        bind milk: item where:
            is_milk(milk)
        prepare_hot_milk_and_place_on_table(cup, milk, coffee_table, coffee_table)        

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_233)open_executor(bookshelf_233)exp(book_2066, bookshelf_233)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Locate the book)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)obs(cup_2063, Locate an empty cup)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)open_executor(milk_2043)obs(milk_2043, Ensure milk is in the cup)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)grab_executor(cup_2063)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. 
##############################
From agent.py
open_executor(bookshelf_233)
Robot find: Robot is close to the bookshelf_233. bookshelf_233 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_233)
Fail to find book_2066 around bookshelf_233. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Locate the book)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)obs(cup_2063, Locate an empty cup)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)open_executor(milk_2043)obs(milk_2043, Ensure milk is in the cup)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)grab_executor(cup_2063)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_354)
Robot find: book_2067, drawing_402, drawing_403, drawing_404, book_2066, Robot is close to the bookshelf_354. 
##############################
From agent.py
open_executor(bookshelf_354)
Robot find: Robot is close to the bookshelf_354. Robot is close to the photoframe_430. bookshelf_354 is opened. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)open_executor(book_2066)obs(book_2066, Locate the book)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)obs(cup_2063, Locate an empty cup)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)open_executor(milk_2043)obs(milk_2043, Ensure milk is in the cup)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)grab_executor(cup_2063)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
walk_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. 
##############################
From agent.py
open_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. book_2066 is opened. 
##############################
From agent.py
obs(book_2066, Locate the book)
Get this information:  book_2066 is inside home_office_319. book_2066 is close to bookshelf_354. book_2066 is close to character_65. book_2066 is on bookshelf_354. book_2066 is OPEN.
##############################
From agent.py
grab_executor(book_2066)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. 
##############################
From agent.py
put_executor(book_2066, coffee_table_2068)
Robot find: Robot is close to the book_2066. Robot is close to the coffee_table_2068. coffee_table_2068 is close book_2066. book_2066 is close coffee_table_2068. book_2066 is on coffee_table_2068. book_2066 released by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: pot_2069, knife_2050, cutting_board_2051, cup_2064, fryingpan_2083, napkin_2005, cup_2063, oil_2079, drawing_239, drawing_238, drawing_240, drawing_241, drawing_242, drawing_243, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2067)open_executor(book_2067)obs(book_2067, Locate the book)grab_executor(book_2067)walk_executor(coffee_table_2068)put_executor(book_2067, coffee_table_2068)walk_executor(cup_2063)obs(cup_2063, Locate an empty cup)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)open_executor(milk_2043)obs(milk_2043, Ensure milk is in the cup)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)grab_executor(cup_2063)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
walk_executor(book_2067)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2067. 
##############################
From agent.py
open_executor(book_2067)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2067. book_2067 is opened. 
##############################
From agent.py
obs(book_2067, Locate the book)
Get this information:  book_2067 is close to bookshelf_354. book_2067 is close to character_65. book_2067 is on bookshelf_354. book_2067 is inside home_office_319. book_2067 is OPEN.
##############################
From agent.py
grab_executor(book_2067)
Robot find: Robot is close to the bookshelf_354. Robot is close to the book_2067. Grabbing book_2067 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot find: Robot is close to the book_2067. Robot is close to the coffee_table_2068. 
##############################
From agent.py
put_executor(book_2067, coffee_table_2068)
Robot find: Robot is close to the book_2067. Robot is close to the coffee_table_2068. book_2067 is close coffee_table_2068. book_2067 is on coffee_table_2068. coffee_table_2068 is close book_2067. book_2067 released by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
obs(cup_2063, Locate an empty cup)
Get this information:  cup_2063 is inside dining_room_201. cup_2063 is close to kitchen_counter_230. cup_2063 is close to character_65. cup_2063 is on kitchen_counter_230.
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(bookshelf_233)', 'open_executor(bookshelf_233)', 'walk_executor(bookshelf_354)', 'open_executor(bookshelf_354)', 'walk_executor(book_2066)', 'open_executor(book_2066)', 'grab_executor(book_2066)', 'walk_executor(coffee_table_2068)', 'put_executor(book_2066, coffee_table_2068)', 'walk_executor(kitchen_counter_230)', 'walk_executor(book_2067)', 'open_executor(book_2067)', 'grab_executor(book_2067)', 'walk_executor(coffee_table_2068)', 'put_executor(book_2067, coffee_table_2068)', 'walk_executor(cup_2063)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)']
Time info:
Time consume: 102 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 1
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 4 steps
Keystate: k2 - Requires: 12 steps
Keystate: k3 - Requires: 6 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
