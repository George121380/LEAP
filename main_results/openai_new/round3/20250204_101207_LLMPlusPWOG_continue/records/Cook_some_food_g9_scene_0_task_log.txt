From agent.py
Reset goals: The sub-goals are: 
['Make some French fries.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_fryingpan_2083_around_cupboard_229(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def in_fridge(potato:item):
    # Determine whether the potato is already in the fridge
    symbol in_fridge = exists fridge: item: is_fridge(fridge) and inside(potato, fridge)
    return in_fridge

def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior prepare_potatoes(potato:item):
    body:
        achieve_once clean(potato)       # Ensure the potato is clean
        achieve cut(potato)              # Cut the potato for fries

behavior fry_potatoes():
    body:
        bind stove: item where:
            is_stove(stove)
        achieve plugged(stove)            # Ensure the stove is plugged in
        achieve is_on(stove)              # Turn on the stove to fry the potatoes
        # Assume that other necessary steps to fry potatoes are handled, such as adding oil

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        if not in_fridge(potato):
            bind fridge: item where:
                is_fridge(fridge)
            bind sink: item where:
                is_sink(sink)
            if has_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet,sink)
                achieve_once is_on(faucet)
                wash(potato)  # Wash the potatoes
                achieve_once is_off(faucet)
            else:
                wash(potato)  # Wash manually if no faucet

            prepare_potatoes(potato)      # Prepare the potatoes

        fry_potatoes()                    # Fry the prepared potatoes

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_fryingpan_2083_around_cupboard_229(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_potato(potato:item):
    body:
        achieve clean(potato)
        # Ensure the potato is clean before cutting or cooking
        achieve cut(potato)
        # Cut the potato into appropriate sizes for French fries

behavior find_frying_pan():
    body:
        foreach frying_pan: item:
            # Check all frying pans until an unvisited one is found
            if is_fryingpan(frying_pan) and not visited(frying_pan):
                observe(frying_pan, "Is this a suitable frying pan for frying")
                # Observe each frying pan to find a suitable one for frying

behavior setup_stove(frying_pan:item):
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove to place the frying pan on
        achieve on(frying_pan, stove)
        # Place the frying pan on the stove
        bind oil: item where:
            is_oil(oil)
        # Select cooking oil
        achieve inside(oil, frying_pan)
        # Add oil into the frying pan for frying

behavior fry_fries(frying_pan:item, potato:item):
    body:
        bind stove: item where:
            is_stove(stove)
        # Ensure the stove is turned on for frying
        achieve is_on(stove)
        # Fry the cut potatoes in the frying pan
        achieve inside(potato, frying_pan)
        # Ensure the cut potatoes are fried until done

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        prepare_potato(potato)
        # Prepare the potato for frying

        find_frying_pan()
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and visited(frying_pan)
        # Select a suitable frying pan that has been marked as visited

        setup_stove(frying_pan)
        fry_fries(frying_pan, potato)
        # Fry the prepared potato in the frying pan

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_potato(potato:item):
    body:
        achieve clean(potato)
        # Ensure the potato is clean before cutting or cooking
        achieve cut(potato)
        # Cut the potato into appropriate sizes for French fries

behavior find_frying_pan():
    body:
        foreach frying_pan: item:
            # Check all frying pans until an unvisited one is found
            if is_fryingpan(frying_pan) and not visited(frying_pan):
                observe(frying_pan, "Is this a suitable frying pan for frying")
                # Observe each frying pan to find a suitable one for frying

behavior setup_stove(frying_pan:item):
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove to place the frying pan on
        achieve on(frying_pan, stove)
        # Place the frying pan on the stove
        bind oil: item where:
            is_oil(oil)
        # Select cooking oil
        achieve inside(oil, frying_pan)
        # Add oil into the frying pan for frying

behavior fry_fries(frying_pan:item, potato:item):
    body:
        bind stove: item where:
            is_stove(stove)
        # Ensure the stove is turned on for frying
        achieve is_on(stove)
        # Fry the cut potatoes in the frying pan
        achieve inside(potato, frying_pan)
        # Ensure the cut potatoes are fried until done

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        prepare_potato(potato)
        # Prepare the potato for frying

        find_frying_pan()
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and visited(frying_pan)
        # Select a suitable frying pan that has been marked as visited

        setup_stove(frying_pan)
        fry_fries(frying_pan, potato)
        # Fry the prepared potato in the frying pan

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_potato_2035, fridge_289)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(sink_231)putin_executor(food_potato_2035, sink_231)wash_executor(food_potato_2035)exp(cutting_board_2051, kitchen_counter_230)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)walk_executor(cupboard_229)open_executor(cupboard_229)exp(fryingpan_2083, cupboard_229)walk_executor(fryingpan_2083)obs(fryingpan_2083, Is this a suitable frying pan for frying)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)walk_executor(kitchen_counter_230)exp(oil_2079, kitchen_counter_230)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(fryingpan_2083)putin_executor(food_potato_2035, fryingpan_2083)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_239, drawing_240, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_potato_2035, fridge_289)
Find food_potato_2035. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cutting_board_2051, kitchen_counter_230)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)walk_executor(cupboard_229)open_executor(cupboard_229)exp(fryingpan_2083, cupboard_229)walk_executor(fryingpan_2083)obs(fryingpan_2083, Is this a suitable frying pan for frying)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)walk_executor(kitchen_counter_230)exp(oil_2079, kitchen_counter_230)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(fryingpan_2083)putin_executor(food_potato_2035, fryingpan_2083)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: pot_2069, knife_2050, cutting_board_2051, cup_2064, fryingpan_2083, napkin_2005, cup_2063, oil_2079, drawing_238, drawing_241, drawing_242, drawing_243, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cutting_board_2051, kitchen_counter_230)
Find cutting_board_2051. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)walk_executor(fryingpan_2083)obs(fryingpan_2083, Is this a suitable frying pan for frying)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(fryingpan_2083)putin_executor(food_potato_2035, fryingpan_2083)
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the fridge_289. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the fridge_289. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_potato_2035, cutting_board_2051)
Robot find: Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_potato_2035. food_potato_2035 is close cutting_board_2051. food_potato_2035 is on cutting_board_2051. food_potato_2035 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
cut_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
obs(fryingpan_2083, Is this a suitable frying pan for frying)
Get this information:  fryingpan_2083 is on kitchen_counter_230. fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to kitchen_counter_230. fryingpan_2083 is close to character_65. fryingpan_2083 is CLEAN.
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Grabbing fryingpan_2083 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the fryingpan_2083. Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 is close stove_2065. fryingpan_2083 released by left hand. 
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the oil_2079. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the oil_2079. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. oil_2079 is inside fryingpan_2083. oil_2079 is close fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_potato_2035, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_potato_2035 is inside fryingpan_2083. food_potato_2035 is close fryingpan_2083. fryingpan_2083 is close food_potato_2035. food_potato_2035 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure the potato is clean before it is cut and cooked, as per the goal representation. Additionally, the frying process has not been completed (i.e., there is no confirmation that the potatoes have been fried until done). Ensure these actions are completed to finish making the French fries.
##############################
From agent.py
Human Instruction: The robot needs to ensure the potato is clean before it is cut and cooked, as per the goal representation. Additionally, the frying process has not been completed (i.e., there is no confirmation that the potatoes have been fried until done). Ensure these actions are completed to finish making the French fries.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_potato_2035 around fridge_289.
Action 5: Walk to kitchen_counter_230.
Action 6: look for cutting_board_2051 around kitchen_counter_230.
Action 7: Walk to food_potato_2035.
Action 8: Grab food_potato_2035.
Action 9: Walk to cutting_board_2051.
Action 10: Put food_potato_2035 on cutting_board_2051.
Action 11: Walk to knife_2050.
Action 12: Grab knife_2050.
Action 13: Walk to food_potato_2035.
Action 14: Cut food_potato_2035.
Action 15: Walk to fryingpan_2083.
Action 16: Observe around fryingpan_2083 with the question of Is this a suitable frying pan for frying.
Action 17: Grab fryingpan_2083.
Action 18: Walk to stove_2065.
Action 19: Put fryingpan_2083 on stove_2065.
Action 20: Walk to oil_2079.
Action 21: Grab oil_2079.
Action 22: Walk to fryingpan_2083.
Action 23: Put oil_2079 into fryingpan_2083.
Action 24: Walk to stove_2065.
Action 25: Switch on stove_2065.
Action 26: Walk to food_potato_2035.
Action 27: Grab food_potato_2035.
Action 28: Walk to fryingpan_2083.
Action 29: Put food_potato_2035 into fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_potato(food:item, water_source:item):
    body:
        achieve clean(food)

behavior fry_potato(frying_pan:item, potato:item):
    body:
        achieve cut(potato)
        achieve inside(potato, frying_pan)

behavior ensure_food_is_fried(frying_pan:item):
    body:
        if not visited(frying_pan):
            observe(frying_pan,"Check if the frying process is complete")

behavior __goal__():
    body:
        bind food_potato: item where:
            is_food_potato(food_potato) and id[food_potato]==2035
        # Select food_potato with ID 2035

        bind faucet: item where:
            is_faucet(faucet)
         # Select a faucet to ensure the potato is clean

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and id[frying_pan]==2083
        # Select frying pan with ID 2083

        clean_potato(food_potato, faucet)
        fry_potato(frying_pan, food_potato)
        ensure_food_is_fried(frying_pan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_potato(potato:item, sink:item):
    body:
        achieve_once inside(potato, sink)
        
        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)

        wash(potato)

        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)

behavior fry_potatoes(potatoes:item, fryingpan:item, stove:item):
    body:
        achieve inside(potatoes, fryingpan)
        assert is_on(stove)
        achieve_once is_food(fried, potatoes)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and dirty(potato)
        
        bind sink: item where:
            is_sink(sink)
        
        clean_potato(potato, sink)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2065)

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065

        fry_potatoes(potato, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_clean_potato(potato: item, sink: item):
    body:
        achieve_once inside(potato, sink)
        # Ensure the potato is placed inside the sink for cleaning

        if exists faucet: item where is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            rinse(potato)
            achieve_once is_off(faucet)

behavior fry_potatoes(potato: item, fryingpan: item, oil: item, stove: item):
    body:
        achieve cut(potato) and has_a_free_hand(char)
        # Ensure the potato is cut and prepare for frying

        achieve inside(oil, fryingpan)
        achieve is_on(stove)
        achieve inside(potato, fryingpan)
        # Ensure the frying process is completed

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        
        bind sink: item where:
            is_sink(sink)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        bind oil: item where:
            is_oil(oil)
        
        bind stove: item where:
            is_stove(stove)

        ensure_clean_potato(potato, sink)
        fry_potatoes(potato, fryingpan, oil, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def suitable_frying_pan(fryingpan:item):
    # Function to check if a frying pan is suitable for frying
    symbol is_suitable=exists oil: item : is_oil(oil) and inside(oil, fryingpan)
    return is_suitable

behavior ensure_food_clean(potato:item):
    body:
        achieve clean(potato)

behavior fry_potato(potato:item, fryingpan:item, stove:item):
    body:
        achieve inside(potato, fryingpan)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind food_potato: item where:
            is_food_potato(food_potato)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and suitable_frying_pan(fryingpan)
        
        bind stove: item where:
            is_stove(stove) and is_on(stove)

        ensure_food_clean(food_potato)
        fry_potato(food_potato, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior clean_food(food:item, sink:item):
    body:
        achieve_once inside(food, sink)
        # Ensure the food is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to clean

        wash(food) # This is the key step of the behavior, used for cleaning food
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # If the sink has a faucet, turn it off after cleaning

behavior fry_potatoes(fryingpan:item, stove:item, food_potato:item):
    body:
        achieve inside(food_potato, fryingpan)
        # Put food_potato into the fryingpan

        achieve is_on(stove)
        # Ensure the stove is on

behavior __goal__():
    body:
        bind food_potato: item where:
            is_food_potato(food_potato)
        
        bind sink: item where:
            is_sink(sink)

        clean_food(food_potato, sink)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        fry_potatoes(fryingpan, stove, food_potato)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior clean_food(food:item, sink:item):
    body:
        achieve_once inside(food, sink)
        # Ensure the food is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to clean

        wash(food) # This is the key step of the behavior, used for cleaning food
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # If the sink has a faucet, turn it off after cleaning

behavior fry_potatoes(fryingpan:item, stove:item, food_potato:item):
    body:
        achieve inside(food_potato, fryingpan)
        # Put food_potato into the fryingpan

        achieve is_on(stove)
        # Ensure the stove is on

behavior __goal__():
    body:
        bind food_potato: item where:
            is_food_potato(food_potato)
        
        bind sink: item where:
            is_sink(sink)

        clean_food(food_potato, sink)

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind stove: item where:
            is_stove(stove)

        fry_potatoes(fryingpan, stove, food_potato)

##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2035)walk_executor(sink_42)putin_executor(food_potato_2035, sink_42)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_potato_2035)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(fryingpan_2083)putin_executor(food_potato_2035, fryingpan_2083)
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot find: soap_2053, towel_rack_32, towel_rack_34, towel_rack_31, cleaning_solution_2073, detergent_2084, basket_for_clothes_2006, Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
putin_executor(food_potato_2035, sink_42)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. food_potato_2035 is inside sink_42. food_potato_2035 is close sink_42. sink_42 is close food_potato_2035. food_potato_2035 released by left hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the knife_2050. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determines whether a sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior clean_potato(potato:item, sink:item):
    # Cleans the potato
    body:
        achieve_once inside(potato, sink)
        # Ensure the potato is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            scrub(potato)
            achieve_once is_off(faucet)
        else:
            scrub(potato)

behavior cut_potato(potato:item, cutting_board:item, knife:item):
    # Cuts the potato into pieces for frying
    body:
        achieve on(potato, cutting_board)
        # Place potato on the cutting board
        
        achieve_once inhand(knife)
        # Hold the knife to cut
        
        achieve cut(potato)
        # Cut the potato

behavior fry_potato(potato:item, fryingpan:item, stove:item, oil:item):
    # Fries the potato in the frying pan
    body:
        if not achieve close(fryingpan, stove):
            achieve plugged(stove)
            # Ensure the frying pan is accessible and near the stove
            
        achieve inside(oil, fryingpan)
        # Pour oil in the frying pan
        
        achieve on(fryingpan, stove)
        # Place the pan on the stove
        
        achieve is_on(stove)
        # Turn on the stove
        
        achieve inside(potato, fryingpan)
        # Place potato pieces in the frying pan

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and dirty(potato)
        # Select a dirty potato
        
        bind sink: item where:
            is_sink(sink) and has_faucet(sink)
        # Select a sink with a faucet
        
        clean_potato(potato, sink)
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        
        cut_potato(potato, cutting_board, knife)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind oil: item where:
            is_oil(oil)
        # Select oil
        
        fry_potato(potato, fryingpan, stove, oil)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_154(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_clean_potato(potato:item):
    # Check if the potato is clean
    symbol clean_potato = clean(potato) and not dirty(potato)
    return clean_potato

behavior clean_food_potato(potato:item):
    # Clean the food potato in the sink
    body:
        if exists sink:item: is_sink(sink) and close(potato, sink):
            achieve_once inside(potato, sink)
            if has_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet, sink)
                achieve_once is_on(faucet)
                wash(potato)
                achieve_once is_off(faucet)
            else:
                wash(potato)
        else:
            scrub(potato)

behavior fry_food_potato(potato:item, fryingpan:item, stove:item):
    # Fry the potato
    body:
        achieve_once inside(potato, fryingpan)
        achieve is_on(stove)
        # Assumption: the frying process is correctly initiated once the stove is on

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        if not is_clean_potato(potato):
            clean_food_potato(potato)
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and inside(fryingpan, stove_2065)
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        fry_food_potato(potato, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_towel_2059_around_towel_rack_32(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==32
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def suitable_frying_pan(pan:item):
    # Check if the pan is a suitable frying pan
    symbol suitable=exists p: item : is_fryingpan(p) and close_char(char, pan)
    return suitable

def has_potatoes_inside(pan:item):
    # Check if there are potatoes inside the frying pan
    symbol has_potatoes=exists o: item : is_food_potato(o) and inside(o, pan)
    return has_potatoes

behavior clean_potato(potato:item, sink:item):
    # Define the behavior to clean the potato in the sink
    body:
        achieve_once inside(potato, sink)
        # Ensure the potato is inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on before washing

        scrub(potato)
        rinse(potato)
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior fry_potato(potato:item, fryingpan:item):
    body:
        achieve inside(potato, fryingpan)
        # Ensure the potato is in the frying pan
        achieve is_on(stove_2065)
        # Ensure the stove is on for frying

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato) and not clean(potato)
        # Bind a dirty potato

        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select a sink known to have the faucet

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and suitable_frying_pan(fryingpan) and not has_potatoes_inside(fryingpan)
        # Find a suitable frying pan for frying potatoes

        clean_potato(potato, sink)
        fry_potato(potato, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_fried(fryingpan: item):
    # Determine whether food is fried in the specified frying pan
    symbol is_fried = exists o: item : is_food_potato(o) and achieved_cut(o) and inside(o, fryingpan)
    return is_fried

def is_frying_process_complete():
    # Determine if the frying process has been completed
    return is_fried(fryingpan_2083)

behavior clean_food(food:item, sink:item):
    body:
        achieve_once inside(food, sink)
        # Ensure the food is placed inside the sink

        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to clean

        wash(food)
        # This is the key step of the behavior, used for cleaning food

        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # If the sink has a faucet, turn it off after cleaning

behavior fry_food(fryingpan:item, stove:item):
    body:
        achieve inside(fryingpan_2083, stove)
        # Ensure the frying pan is on the stove
        achieve is_on(stove)
        # Ensure the stove is on for frying
        if not is_frying_process_complete():
            # Continue frying until done
            achieve is_fried(fryingpan)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Select potato for cleaning
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        if dirty(potato):
            clean_food(potato, sink)
        fry_food(fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_potato_clean(potato:item):
    symbol potato_clean= clean(potato) and not dirty(potato)
    return potato_clean

behavior clean_potato(potato:item, sink:item):
    body:
        if not is_potato_clean(potato):
            achieve_once inside(potato, sink)
            wash(potato)
            achieve clean(potato)

behavior cut_potato(potato:item, cutting_board:item, knife:item):
    body:
        achieve inside(potato, cutting_board)
        achieve clean(cutting_board)
        achieve cut(potato)

behavior fry_potato(potato:item, fryingpan:item, oil:item, stove:item):
    body:
        achieve inside(oil, fryingpan)
        achieve inside(potato, fryingpan)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind food_potato: item where:
            is_food_potato(food_potato)
        bind sink: item where:
            is_sink(sink)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind knife: item where:
            is_knife(knife)
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind oil: item where:
            is_oil(oil)
        bind stove: item where:
            is_stove(stove)
        
        clean_potato(food_potato, sink)
        cut_potato(food_potato, cutting_board, knife)
        fry_potato(food_potato, fryingpan, oil, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_soap_2053(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2053
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(soap,soap_instance)
        else:
            exp(soap,soap_instance)
    eff:
        unknown[soap]=False
        close[soap,soap_instance]=True
        close[soap_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_frying_done(food: item, fryingpan: item):
    # Determine if the fries are done by checking their state
    symbol fries_done=exists f: item : is_food_potato(f) and inside(f, fryingpan) and not dirty(f)
    return fries_done

behavior clean_potato(potato: item, sink: item):
    body:
        achieve_once inside(potato, sink)
        # Place the potato inside the sink
        if exists faucet: item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet for cleaning
        wash(potato) 
        if exists faucet: item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after cleaning

behavior cut_potato(potato: item, cutting_board: item, knife: item):
    body:
        achieve_once inside(potato, cutting_board)
        # Ensure the potato is on the cutting board
        achieve_once inhand(knife)
        # Temporarily hold the knife to cut
        achieve cut(potato)
        # Cut the potato

behavior fry_potatoes(fryingpan: item, stove: item):
    body:
        achieve is_on(stove)
        # Ensure the stove is on for frying
        observe(fryingpan, "Check if the fries are done cooking")
        # Fry until the food (fries) is done

behavior __goal__():
    body:
        bind food_potato: item where:
            is_food_potato(food_potato) and id[food_potato] == 2035
        # Select the specific food potato

        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink

        bind cutting_board: item where:
            is_cutting_board(cutting_board) and id[cutting_board] == 2051
        # Select the cutting board

        bind knife: item where:
            is_knife(knife) and id[knife] == 2050
        # Select the knife

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        # Select the frying pan

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove

        clean_potato(food_potato, sink)
        # Clean the potato

        cut_potato(food_potato, cutting_board, knife)
        # Cut the potato into pieces

        fry_potatoes(fryingpan, stove)
        # Fry the potatoes until done

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(kitchen_counter_230)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(cutting_board_2051)', 'put_executor(food_potato_2035, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_potato_2035)', 'cut_executor(food_potato_2035)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_potato_2035, fryingpan_2083)', 'grab_executor(food_potato_2035)', 'walk_executor(sink_42)', 'putin_executor(food_potato_2035, sink_42)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_potato_2035) (Failed)']
Time info:
Time consume: 286 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 13
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
