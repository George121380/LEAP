From agent.py
Reset goals: The sub-goals are: 
['Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
def can_place_on_plate(food:item, plate:item):
    # Function to check if food can be placed on a plate
    symbol can_place=exists p: item : is_plate(p) and surfaces(p) and grabbable(food)
    return can_place

behavior place_on_plate(food:item, plate:item):
    body:
        achieve on(food, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve inside(plate, microwave)
        achieve closed(microwave)
        achieve is_on(microwave)
        # Assume heating is done shortly after
        achieve is_off(microwave)
        achieve open(microwave)

behavior place_on_table(plate:item, table:item):
    body:
        achieve on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza) and grabbable(pizza)
        # Select a pizza
        
        bind hamburger: item where:
            is_food_hamburger(hamburger) and grabbable(hamburger)
        # Select a hamburger
        
        bind plate: item where:
            is_plate(plate) and surfaces(plate)
        # Select a plate
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave

        bind table: item where:
            is_table(table) and is_dining_room(inside_char(char, table))
        # Select a table in the dining room

        place_on_plate(pizza, plate)
        place_on_plate(hamburger, plate)
        heat_in_microwave(plate, microwave)
        place_on_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_dining_room(item: item):
    # Check if the item is in the dining room
    symbol in_dining_room = exists room: item : is_dining_room(room) and inside(item, room)
    return in_dining_room
  
behavior place_on_table(item: item, table: item):
    body:
        achieve on(item, table)

behavior heat_in_microwave(items: list[item], microwave: item):
    body:
        assert len(items) = 2
        foreach item: item in items:
            achieve inside(item, microwave)
        achieve is_on(microwave)
        achieve is_off(microwave)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
            
        bind hamburger: item where:
            is_food_hamburger(hamburger)

        bind plate: item where:
            is_plate(plate)

        bind table_in_dining_room: item where:
            is_table(table_in_dining_room) and is_in_dining_room(table_in_dining_room)
        
        bind microwave: item where:
            is_microwave(microwave)

        place_on_table(pizza, plate)
        place_on_table(hamburger, plate)
        
        heat_in_microwave([pizza, hamburger], microwave)
        
        place_on_table(pizza, table_in_dining_room)
        place_on_table(hamburger, table_in_dining_room)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve on(pizza, plate) # Place the pizza on the plate
        achieve on(hamburger, plate) # Place the hamburger on the plate

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve inside(plate, microwave) # Place the plate with food inside the microwave
        achieve open(microwave) # Make sure the microwave is open for heating
        achieve is_on(microwave) # Turn on the microwave to heat the food
        achieve is_off(microwave) # Turn off the microwave once heating is done
        achieve closed(microwave) # Close the microwave after use

behavior put_on_table(plate:item, table:item):
    body:
        achieve on(plate, table) # Place the plate on the table

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza) and grabbable(pizza)
        # Select a grabbable pizza
        
        bind hamburger: item where:
            is_food_hamburger(hamburger) and grabbable(hamburger)
        # Select a grabbable hamburger
        
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room

        put_on_plate(pizza, hamburger, plate)
        heat_in_microwave(plate, microwave)
        put_on_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_pizza_and_hamburger_on_plate(pizza:item, hamburger:item, plate:item):
    body:
        achieve on(pizza, plate)
        achieve on(hamburger, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve inside(plate, microwave)
        achieve is_on(microwave)

behavior put_plate_on_table(plate:item, table:item):
    body:
        achieve on(plate, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select an item categorized as pizza

        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select an item categorized as hamburger

        bind plate: item where:
            is_plate(plate)
        # Select an item categorized as plate

        bind microwave: item where:
            is_microwave(microwave)
        # Select an item categorized as microwave

        bind table: item where:
            is_table(table) and exists room: item : is_dining_room(room) and inside(table, room)
        # Select a table inside the dining room
        
        put_pizza_and_hamburger_on_plate(pizza, hamburger, plate)
        heat_in_microwave(plate, microwave)
        put_plate_on_table(plate, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_in_microwave(pizza: item, hamburger: item, microwave: item):
    body:
        achieve inside(pizza, microwave)
        achieve inside(hamburger, microwave)
        achieve closed(microwave)
        achieve is_on(microwave)

behavior put_on_table(pizza: item, hamburger: item, table: item):
    body:
        achieve on(pizza, table)
        achieve on(hamburger, table)

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select the pizza
        
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select the hamburger
        
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select a microwave
        
        bind dining_table: item where:
            is_table(dining_table) and exists room: item : is_dining_room(room) and inside(dining_table, room)
        # Select a table inside the dining room

        achieve on(pizza, plate)
        achieve on(hamburger, plate)
        heat_in_microwave(pizza, hamburger, microwave)
        put_on_table(pizza, hamburger, dining_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_hamburger_2024_around_fridge_289(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_pizza_2034_around_fridge_289(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_pizza,fridge_instance)
        else:
            exp(food_pizza,fridge_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,fridge_instance]=True
        close[fridge_instance,food_pizza]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol is_in_dining = exists room: item : is_dining_room(room) and inside(table, room)
    return is_in_dining

def is_microwave_clean():
    # Check if the microwave is clean
    symbol is_clean_microwave=exists microwave: item : is_microwave(microwave) and clean(microwave)
    return is_clean_microwave
    
behavior put_on_plate(food:item, plate:item):
    body:
        achieve on(food, plate)

behavior heat_in_microwave(plate:item, microwave:item):
    body:
        achieve_once inside(plate, microwave)
        # Place the plate with food inside the microwave
        achieve is_on(microwave)
        # Turn on the microwave to heat the food

behavior put_on_table(food:item, table:item):
    body:
        achieve on(food, table)
        # Place the food on the table

behavior __goal__():
    body:
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select a pizza
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select a hamburger
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        bind microwave: item where:
            is_microwave(microwave)
        assert is_microwave_clean()
        # Confirm microwave is clean
        put_on_plate(pizza, plate)
        # Put pizza on the plate
        put_on_plate(hamburger, plate)
        # Put hamburger on the plate
        heat_in_microwave(plate, microwave)
        # Heat the pizza and hamburger in microwave
        bind table: item where:
            is_table(table) and is_in_dining_room(table)
        # Select a table in the dining room
        put_on_table(pizza, table)
        # Put pizza on the table
        put_on_table(hamburger, table)
        # Put hamburger on the table

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 83 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 20 steps
Keystate: k2 - Requires: 4 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
