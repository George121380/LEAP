From agent.py
Reset goals: The sub-goals are: 
['Put milk and egg on one of the table in dining room. Throw all the items in the fridge to the trashcan. Then put milk and eggs back in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_milk_and_egg_on_table(milk: item, egg: item, table: item):
    body:
        achieve on(milk, table)
        achieve on(egg, table)

behavior throw_items_in_trashcan(fridge: item, trashcan: item):
    body:
        open(fridge)
        foreach item: item:
            if inside(item, fridge):
                achieve inside(item, trashcan)
        closed(fridge)

behavior put_milk_and_egg_back_in_fridge(milk: item, egg: item, fridge: item):
    body:
        achieve inside(milk, fridge)
        achieve inside(egg, fridge)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) 
        # Select the fridge

        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select the trash can

        bind table: item where:
            is_table(table) and surfaces(table) and inside(table, dining_room)
        # Select a table in the dining room with a surface

        bind milk: item where:
            is_milk(milk) and inside(milk, fridge)
        # Select milk from the fridge

        bind egg: item where:
            is_food_egg(egg) and inside(egg, fridge)
        # Select egg from the fridge

        place_milk_and_egg_on_table(milk, egg, table)
        # Place milk and egg on the table
        
        throw_items_in_trashcan(fridge, trashcan)
        # Throw all items in the fridge into the trashcan

        put_milk_and_egg_back_in_fridge(milk, egg, fridge)
        # Put milk and egg back in the fridge

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior move_items_to_table_in_dining_room(milk:item, egg:item, table:item):
    body:
        achieve inside(milk, table)
        achieve inside(egg, table)

behavior discard_items_in_trashcan(trashcan:item, fridge:item):
    body:
        foreach item: item:
            if inside(item, fridge):
                achieve inside(item, trashcan)

behavior store_items_in_fridge(milk:item, egg:item, fridge:item):
    body:
        achieve inside(milk, fridge)
        achieve inside(egg, fridge)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, is_dining_room)
        # Select a table in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Bind the milk

        bind egg: item where:
            is_food_egg(egg)
        # Bind the egg

        bind fridge: item where:
            is_fridge(fridge)
        # Bind the fridge

        bind trashcan: item where:
            is_trashcan(trashcan)
        # Bind the trashcan

        move_items_to_table_in_dining_room(milk, egg, table)
        discard_items_in_trashcan(trashcan, fridge)
        store_items_in_fridge(milk, egg, fridge)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def in_dining_room(table:item):
    # Function to check if a table is in the dining room
    symbol in_dining_room=exists room: item : is_dining_room(room) and inside(table, room)
    return in_dining_room

behavior put_on_table(o:item, table:item):
    body:
        achieve on(o, table) # Place the item on the table

behavior throw_all_items_in_trashcan(fridge:item, trashcan:item):
    body:
        foreach o: item:
            if inside(o, fridge):
                achieve inside(o, trashcan)
        # Throw all items inside the fridge into the trashcan

behavior put_back_in_fridge(food:item, fridge:item):
    body:
        achieve inside(food, fridge) # Place the food item back inside the fridge

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge
        
        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select trashcan

        bind table: item where:
            is_table(table) and in_dining_room(table)
        # Select a table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select milk item

        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs item

        put_on_table(milk, table)
        put_on_table(eggs, table)
        throw_all_items_in_trashcan(fridge, trashcan)
        put_back_in_fridge(milk, fridge)
        put_back_in_fridge(eggs, fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table_and_empty_fridge(milk: item, egg: item, fridge: item, table: item, trashcan: item):
    body:
        # Place milk and egg on the table
        achieve on(milk, table)
        achieve on(egg, table)
        
        # Ensure the fridge is open to access its contents
        achieve open(fridge) 

        # Remove items inside the fridge and throw them into the trashcan
        foreach item: item:
            if inside(item, fridge):
                achieve inside(item, trashcan)

        # Place milk and egg back into the fridge
        achieve inside(milk, fridge)
        achieve inside(egg, fridge)

        # Close the fridge after placing items back
        achieve closed(fridge)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        
        bind egg: item where:
            is_food_egg(egg)

        bind fridge: item where:
            is_fridge(fridge)

        bind table: item where:
            is_table(table) and exists room: item: is_dining_room(room) and inside(table, room)

        bind trashcan: item where:
            is_trashcan(trashcan)

        place_items_on_table_and_empty_fridge(milk, egg, fridge, table, trashcan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def inside_dining_room(item:item):
    # Determines if the item is inside the dining room
    symbol inside_dining_room=exists room: item : is_dining_room(room) and inside(item, room)
    return inside_dining_room

behavior place_on_table(item1:item, item2:item, table:item):
    body:
        achieve inside_char(char, table) # Ensure youre next to the table
        achieve on(item1, table) # Place the item1 on the table
        achieve on(item2, table) # Place the item2 on the table

behavior discard_contents(fridge:item, trashcan:item):
    body:
        achieve open(fridge) # Open the fridge
        foreach o: item:
            if inside(o, fridge):
                achieve once inhand(o) # Grab each item to throw away
                achieve inside(o, trashcan) # Throw each item into the trashcan
        achieve closed(fridge) # Close the fridge after removing items

behavior store_back(milk:item, egg:item, fridge:item):
    body:
        achieve open(fridge) # Open the fridge
        if inhand(milk) and inhand(egg):
            achieve inside(milk, fridge) # Place the milk back into the fridge
            achieve inside(egg, fridge) # Place the egg back into the fridge
        achieve closed(fridge) # Close the fridge door

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind egg: item where:
            is_food_egg(egg)

        bind dining_table: item where:
            is_table(dining_table) and inside_dining_room(dining_table)

        bind fridge: item where:
            is_fridge(fridge)
        
        bind trashcan: item where:
            is_trashcan(trashcan)

        achieve_once inhand(milk)
        achieve_once inhand(egg)
        place_on_table(milk, egg, dining_table)
        discard_contents(fridge, trashcan)
        achieve_once inhand(milk)
        achieve_once inhand(egg)
        store_back(milk, egg, fridge)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_dining_table(item: item):
    # Determine if a table is in the dining room
    symbol in_dining_room=exists room: item : is_dining_room(room) and inside(item, room)
    return is_table(item) and in_dining_room

behavior place_on_table(milk:item, egg:item, table:item):
    body:
        achieve on(milk, table)
        achieve on(egg, table)

behavior throw_all_items_in_trashcan(fridge:item, trashcan:item):
    body:
        foreach item: item:
            if inside(item, fridge):
                achieve inside(item, trashcan)

behavior return_to_fridge(milk:item, egg:item, fridge:item):
    body:
        achieve inside(milk, fridge)
        achieve inside(egg, fridge)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind egg: item where:
            is_food_egg(egg)

        bind table: item where:
            is_dining_table(table)

        bind fridge: item where:
            is_fridge(fridge)

        bind trashcan: item where:
            is_trashcan(trashcan)

        place_on_table(milk, egg, table)
        throw_all_items_in_trashcan(fridge, trashcan)
        return_to_fridge(milk, egg, fridge)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 105 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 11 steps
Keystate: k2 - Requires: 151 steps
Keystate: k3 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
