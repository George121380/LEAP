From agent.py
Reset goals: The sub-goals are: 
['wash all the bowls and the plates with dishwasher']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_bowl_2071_around_dishwasher_1001(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_bowls_or_plates_sink(sink:item):
    # Function to check if there are bowls or plates in a specified sink
    symbol has_bowls_or_plates=exists o: item : (is_bowl(o) or is_plate(o)) and inside(o, sink)
    return has_bowls_or_plates

behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher)
        achieve is_on(dishwasher)

behavior close_the_dishwasher(dishwasher:item):
    body:
        achieve is_off(dishwasher)
        achieve closed(dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher
        
        foreach sink: item:
            if is_sink(sink) and has_bowls_or_plates_sink(sink):
                foreach o: item:
                    if is_bowl(o) or is_plate(o) and inside(o, sink):
                        load_dishwasher(o, dishwasher)

        start_dishwasher(dishwasher)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_bowls_or_plates_sink(sink:item):
    # Function to check if there are bowls or plates in a specified sink
    symbol has_bowls_or_plates=exists o: item : (is_bowl(o) or is_plate(o)) and inside(o, sink)
    return has_bowls_or_plates

behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher)
        achieve is_on(dishwasher)

behavior close_the_dishwasher(dishwasher:item):
    body:
        achieve is_off(dishwasher)
        achieve closed(dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher
        
        foreach sink: item:
            if is_sink(sink) and has_bowls_or_plates_sink(sink):
                foreach o: item:
                    if is_bowl(o) or is_plate(o) and inside(o, sink):
                        load_dishwasher(o, dishwasher)

        start_dishwasher(dishwasher)

##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. 
##############################
From agent.py
switchon_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Load the bowls and plates from the sink into the dishwasher before starting it to wash them.
##############################
From agent.py
Human Instruction: Load the bowls and plates from the sink into the dishwasher before starting it to wash them.

The actions you have taken:
Action 1: Walk to dishwasher_1001.
Action 2: Switch on dishwasher_1001.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_sink_231(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(plate,sink_instance)
        else:
            exp(plate,sink_instance)
    eff:
        unknown[plate]=False
        close[plate,sink_instance]=True
        close[sink_instance,plate]=True
    

behavior find_bowl_2072_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher)
        achieve is_on(dishwasher)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and visited(sink)
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and is_on(dishwasher)
        foreach o: item:
            if (is_plate(o) or is_bowl(o)) and inside(o, sink):
                load_dishwasher(o, dishwasher)
        start_dishwasher(dishwasher)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_sink_231(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(plate,sink_instance)
        else:
            exp(plate,sink_instance)
    eff:
        unknown[plate]=False
        close[plate,sink_instance]=True
        close[sink_instance,plate]=True
    

behavior find_bowl_2072_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_bowl_or_plate(item:item):
    # Function to determine if an item is a bowl or a plate
    return is_bowl(item) or is_plate(item)

behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve inside(item, dishwasher)
        # Load the bowl or plate inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher]==1001
        # Select the dishwasher with ID 1001
        foreach item: item:
        # Load all bowls and plates from the sink into the dishwasher
            if is_bowl_or_plate(item) and inside(item,sink):
                load_dishwasher(item, dishwasher)
        start_dishwasher(dishwasher) # Start the dishwasher

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_sink_231(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(plate,sink_instance)
        else:
            exp(plate,sink_instance)
    eff:
        unknown[plate]=False
        close[plate,sink_instance]=True
        close[sink_instance,plate]=True
    

behavior find_bowl_2072_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher]==1001
        # Select the dishwasher with ID 1001
        foreach o: item:
        # Load all bowls and plates into the dishwasher
            if is_bowl(o) or is_plate(o) and dirty(o):
                load_dishwasher(o, dishwasher)
        start_dishwasher(dishwasher) # Start the dishwasher

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher]==1001
        # Select the dishwasher with ID 1001
        foreach o: item:
        # Load all bowls and plates into the dishwasher
            if is_bowl(o) or is_plate(o) and dirty(o):
                load_dishwasher(o, dishwasher)
        start_dishwasher(dishwasher) # Start the dishwasher

##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(bowl_2071, sink_231)walk_executor(dishwasher_1001)switchoff_executor(dishwasher_1001)open_executor(dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(sink_231)exp(bowl_2072, sink_231)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(sink_231)
Robot find: pot_2069, knife_2050, cutting_board_2051, cup_2064, fryingpan_2083, soap_2054, napkin_2005, cup_2063, oil_2079, drawing_239, plate_1000, drawing_238, drawing_240, drawing_241, drawing_242, drawing_243, Robot is close to the kitchen_counter_230. Robot is close to the sink_231. 
##############################
From agent.py
exp(bowl_2071, sink_231)
Fail to find bowl_2071 around sink_231. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)exp(bowl_2071, sink_42)walk_executor(dishwasher_1001)switchoff_executor(dishwasher_1001)open_executor(dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(sink_42)exp(bowl_2072, sink_42)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(sink_42)
Robot find: soap_2053, towel_rack_32, towel_rack_34, towel_rack_31, cleaning_solution_2073, detergent_2084, basket_for_clothes_2006, Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
exp(bowl_2071, sink_42)
Fail to find bowl_2071 around sink_42. 
##############################
From agent.py-> find a plan in act()
walk_executor(plate_1000)exp(bowl_2071, plate_1000)walk_executor(dishwasher_1001)switchoff_executor(dishwasher_1001)open_executor(dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(plate_1000)exp(bowl_2072, plate_1000)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
exp(bowl_2071, plate_1000)
Fail to find bowl_2071 around plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(trashcan_99)exp(bowl_2071, trashcan_99)walk_executor(dishwasher_1001)switchoff_executor(dishwasher_1001)open_executor(dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(trashcan_99)exp(bowl_2072, trashcan_99)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(trashcan_99)
Robot find: drawing_174, Robot is close to the trashcan_99. 
##############################
From agent.py
exp(bowl_2071, trashcan_99)
Fail to find bowl_2071 around trashcan_99. 
##############################
From agent.py-> find a plan in act()
walk_executor(curtain_24)exp(bowl_2071, curtain_24)walk_executor(dishwasher_1001)switchoff_executor(dishwasher_1001)open_executor(dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(curtain_24)exp(bowl_2072, curtain_24)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(curtain_24)
Robot find: towel_rack_33, Robot is close to the curtain_23. 
##############################
From agent.py
exp(bowl_2071, curtain_24)
Fail to find bowl_2071 around curtain_24. 
##############################
From agent.py-> find a plan in act()
walk_executor(curtain_24)exp(bowl_2071, curtain_24)walk_executor(dishwasher_1001)switchoff_executor(dishwasher_1001)open_executor(dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(curtain_24)exp(bowl_2072, curtain_24)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(curtain_24)
Robot find: Robot is close to the curtain_23. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2071 ?
Answer: Go to the dining_room_201. Once there, locate table_226. The target item, bowl_2071, is on top of table_226.
Re-decompose: None

##############################
From agent.py
Human Instruction: Load the bowls and plates from the sink into the dishwasher before starting it to wash them.
Go to the dining_room_201. Once there, locate table_226. The target item, bowl_2071, is on top of table_226.

The actions you have taken:
Action 1: Walk to dishwasher_1001.
Action 2: Switch on dishwasher_1001.
Action 3: Walk to sink_231.
Action 4: look for bowl_2071 around sink_231.
Action 5: Walk to sink_42.
Action 6: look for bowl_2071 around sink_42.
Action 7: Walk to plate_1000.
Action 8: look for bowl_2071 around plate_1000.
Action 9: Walk to trashcan_99.
Action 10: look for bowl_2071 around trashcan_99.
Action 11: Walk to curtain_24.
Action 12: look for bowl_2071 around curtain_24.
Action 13: Walk to curtain_24.

##############################
From agent.py
exp(bowl_2071, curtain_24)
Fail to find bowl_2071 around curtain_24. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(bowl_2071, table_226)walk_executor(dishwasher_1001)switchoff_executor(dishwasher_1001)open_executor(dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(table_226)exp(bowl_2072, table_226)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2072, fork_2081, fork_2080, coffee_filter_2000, drawing_2003, mat_236, bowl_2071, mat_237, Robot is close to the table_226. 
##############################
From agent.py
exp(bowl_2071, table_226)
Find bowl_2071. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)switchoff_executor(dishwasher_1001)open_executor(dishwasher_1001)walk_executor(bowl_2071)grab_executor(bowl_2071)walk_executor(dishwasher_1001)putin_executor(bowl_2071, dishwasher_1001)walk_executor(bowl_2072)grab_executor(bowl_2072)walk_executor(dishwasher_1001)putin_executor(bowl_2072, dishwasher_1001)walk_executor(plate_1000)grab_executor(plate_1000)walk_executor(dishwasher_1001)putin_executor(plate_1000, dishwasher_1001)close_executor(dishwasher_1001)switchon_executor(dishwasher_1001)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. 
##############################
From agent.py
switchoff_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is turned off. 
##############################
From agent.py
open_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is opened. 
##############################
From agent.py
walk_executor(bowl_2071)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2071. 
##############################
From agent.py
grab_executor(bowl_2071)
Robot find: Robot is close to the table_226. Robot is close to the bowl_2071. Grabbing bowl_2071 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the bowl_2071. Robot is close to the dishwasher_1001. 
##############################
From agent.py
putin_executor(bowl_2071, dishwasher_1001)
Robot find: Robot is close to the bowl_2071. Robot is close to the dishwasher_1001. dishwasher_1001 is close bowl_2071. bowl_2071 is inside dishwasher_1001. bowl_2071 is close dishwasher_1001. bowl_2071 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2072)
Robot find: Robot is close to the bowl_2072. Robot is close to the table_226. 
##############################
From agent.py
grab_executor(bowl_2072)
Robot find: Robot is close to the bowl_2072. Robot is close to the table_226. Grabbing bowl_2072 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the bowl_2072. Robot is close to the dishwasher_1001. Robot is close to the bowl_2071. 
##############################
From agent.py
putin_executor(bowl_2072, dishwasher_1001)
Robot find: Robot is close to the bowl_2072. Robot is close to the dishwasher_1001. Robot is close to the bowl_2071. dishwasher_1001 is close bowl_2072. bowl_2072 is inside dishwasher_1001. bowl_2072 is close dishwasher_1001. bowl_2072 released by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the sink_231. 
##############################
From agent.py
grab_executor(plate_1000)
Robot find: Robot is close to the plate_1000. Robot is close to the sink_231. Grabbing plate_1000 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot find: Robot is close to the plate_1000. Robot is close to the bowl_2072. Robot is close to the dishwasher_1001. Robot is close to the bowl_2071. 
##############################
From agent.py
putin_executor(plate_1000, dishwasher_1001)
Robot find: Robot is close to the plate_1000. Robot is close to the bowl_2072. Robot is close to the dishwasher_1001. Robot is close to the bowl_2071. dishwasher_1001 is close plate_1000. plate_1000 is close dishwasher_1001. plate_1000 is inside dishwasher_1001. plate_1000 released by right hand. 
##############################
From agent.py
close_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is closed. 
##############################
From agent.py
switchon_executor(dishwasher_1001)
Robot find: Robot is close to the dishwasher_1001. dishwasher_1001 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
wash all the bowls and the plates with dishwasher
Action History:
['walk_executor(dishwasher_1001)', 'switchon_executor(dishwasher_1001)', 'walk_executor(sink_231)', 'walk_executor(sink_42)', 'walk_executor(plate_1000)', 'walk_executor(trashcan_99)', 'walk_executor(curtain_24)', 'walk_executor(curtain_24)', 'walk_executor(table_226)', 'walk_executor(dishwasher_1001)', 'switchoff_executor(dishwasher_1001)', 'open_executor(dishwasher_1001)', 'walk_executor(bowl_2071)', 'grab_executor(bowl_2071)', 'walk_executor(dishwasher_1001)', 'putin_executor(bowl_2071, dishwasher_1001)', 'walk_executor(bowl_2072)', 'grab_executor(bowl_2072)', 'walk_executor(dishwasher_1001)', 'putin_executor(bowl_2072, dishwasher_1001)', 'walk_executor(plate_1000)', 'grab_executor(plate_1000)', 'walk_executor(dishwasher_1001)', 'putin_executor(plate_1000, dishwasher_1001)', 'close_executor(dishwasher_1001)', 'switchon_executor(dishwasher_1001)']
Time info:
Time consume: 180 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 0

Task complete rate:
1
Scene_id: 0
##############################
