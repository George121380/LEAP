From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item, power_socket:item):
    body:
        achieve plugged(coffee_maker)

behavior add_water_to_coffee_maker(coffee_maker:item, water_source:item):
    body:
        achieve has_water(coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior serve_coffee(cup:item, coffee_maker:item):
    body:
        achieve inside(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
            
        bind power_socket: item where:
            is_powersocket(power_socket)
            
        plug_in_coffee_maker(coffee_maker, power_socket)
        
        bind water_source: item where:
            is_faucet(water_source) or is_sink(water_source) # Assuming a water source
        
        add_water_to_coffee_maker(coffee_maker, water_source)
        start_coffee_maker(coffee_maker)
        
        bind cup: item where:
            is_cup(cup)
        
        serve_coffee(cup, coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_cup_2064_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

#exp_behavior_end

#goal_representation

behavior ensure_coffeemaker_ready(coffee_maker:item):
    body:
        achieve plugged(coffee_maker) 
        assert_hold is_on(coffee_maker)

behavior fill_water_tank(coffee_maker:item, faucet:item):
    body:
        achieve has_water(coffee_maker)

behavior use_coffe_filter(coffee_filter:item, coffee_maker:item):
    body:
        achieve inside(coffee_filter, coffee_maker)

behavior brew_coffee(coffee_maker:item, cup:item):
    body:
        achieve open(cup)
        achieve on(cup, coffee_maker)
        achieve_closed(cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        
        ensure_coffeemaker_ready(coffee_maker)
        
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, coffee_maker)

        fill_water_tank(coffee_maker, faucet)
        
        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        
        use_coffe_filter(coffee_filter, coffee_maker)

        bind cup: item where:
            is_cup(cup) and drinkable(cup)

        brew_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_cup_2064_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

#exp_behavior_end

#goal_representation

behavior plug_coffee_maker(coffee_maker:item, power_socket:item):
    body:
        achieve plugged(coffee_maker)

behavior prepare_coffee(coffee_maker:item, cup:item):
    body:
        achieve on(cup, coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind power_socket: item where:
            is_powersocket(power_socket)
        # Select a power socket

        plug_coffee_maker(coffee_maker, power_socket)
        # Plug in the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        prepare_coffee(coffee_maker, cup)
        # Prepare coffee using the coffee maker

#goal_representation_end

##############################
From agent.py->reset_goal

behavior plug_coffee_maker(coffee_maker:item, power_socket:item):
    body:
        achieve plugged(coffee_maker)

behavior prepare_coffee(coffee_maker:item, cup:item):
    body:
        achieve on(cup, coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind power_socket: item where:
            is_powersocket(power_socket)
        # Select a power socket

        plug_coffee_maker(coffee_maker, power_socket)
        # Plug in the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        prepare_coffee(coffee_maker, cup)
        # Prepare coffee using the coffee maker

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)open_executor(coffe_maker_290)exp(cup_2063, coffe_maker_290)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: pot_2069, knife_2050, cutting_board_2051, cup_2064, fryingpan_2083, napkin_2005, cup_2063, oil_2079, drawing_239, drawing_238, drawing_240, drawing_241, drawing_242, drawing_243, Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is opened. 
##############################
From agent.py
exp(cup_2063, coffe_maker_290)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. 
##############################
From agent.py
put_executor(cup_2063, coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. coffe_maker_290 is close cup_2063. cup_2063 is close coffe_maker_290. cup_2063 is on coffe_maker_290. cup_2063 released by right hand. 
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the coffee maker is plugged into a power socket as per the goal representation requirements.
##############################
From agent.py
Human Instruction: You need to ensure the coffee maker is plugged into a power socket as per the goal representation requirements.

The actions you have taken:
Action 1: Walk to coffe_maker_290.
Action 2: Open coffe_maker_290.
Action 3: look for cup_2063 around coffe_maker_290.
Action 4: Walk to cup_2063.
Action 5: Grab cup_2063.
Action 6: Walk to coffe_maker_290.
Action 7: Put cup_2063 on coffe_maker_290.
Action 8: Close coffe_maker_290.
Action 9: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_146(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_plug_or_switch(coffee_maker:item):
    # Check whether the coffee maker is plugged in or has a switch to turn it on or off
    symbol has_plug_or_switch=exists o: item : (plugged(o) or has_switch(o)) and o==coffee_maker
    return has_plug_or_switch

behavior prepare_coffee(coffee_maker:item, cup:item):
    body:
        assert is_cup(cup) and close(cup, coffee_maker)
        assert is_coffee_maker(coffee_maker)
        if not plugged(coffee_maker):
            observe(coffee_maker, "Check if coffee maker is plugged")
            assert has_plug(coffee_maker) # ensure coffee maker has a plug

def switch_on_coffee_maker(coffee_maker:item):
    if has_plug_or_switch(coffee_maker):
        achieve_once is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffee_maker(coffee_maker)
        # Select coffee maker
        
        observe(coffee_maker, "Check if coffee maker is ready for operation")
        # Observe if theres any action needed to prepare the coffee maker

        bind cup: item where:
            is_cup(cup) and close(cup, coffee_maker)
        prepare_coffee(coffee_maker, cup)
        
        switch_on_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_146(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

behavior find_food_sugar_2039_around_closetdrawer_146(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(food_sugar,closetdrawer_instance)
        else:
            exp(food_sugar,closetdrawer_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,closetdrawer_instance]=True
        close[closetdrawer_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
def has_plug_and_switch(coffee_maker:item):
    # Function to check if a coffee maker has a plug and a switch
    symbol has_plug_and_switch=has_plug(coffee_maker) and has_switch(coffee_maker)
    return has_plug_and_switch

behavior plug_in_and_switch_on(coffee_maker:item):
    # Behavior to plug in and switch on the coffee maker
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior ensure_cup_is_near_coffee_maker(cup:item, coffee_maker:item):
    # Behavior to ensure the cup is placed near the coffee maker
    body:
        achieve close(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        bind cup: item where:
            is_cup(cup) and on(cup, coffee_maker)
        # Select the cup already on the coffee maker
        
        if not has_plug_and_switch(coffee_maker):
            observe(coffee_maker, "Does it have a plug and a switch")
            # Observe coffee maker for plug and switch details
        
        if has_plug_and_switch(coffee_maker):
            plug_in_and_switch_on(coffee_maker)
            # Plug in and switch on the coffee maker
        
        ensure_cup_is_near_coffee_maker(cup, coffee_maker)
        # Ensure the cup is near the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_coffee_table_2068(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(coffee_filter,coffee_table_instance)
        else:
            exp(coffee_filter,coffee_table_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffee_table_instance]=True
        close[coffee_table_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def plugged_in(coffe_maker: item):
    # Function to check if the coffee maker is plugged in
    return plugged(coffe_maker)

behavior make_coffee(coffe_maker: item):
    body:
        if not plugged_in(coffe_maker):
            # If the coffee maker is not plugged in, plug it in first
            achieve plugged(coffe_maker)

        achieve closed(coffe_maker)
        # Ensure that the coffee maker is closed to start brewing coffee
        
        achieve is_on(coffe_maker)
        # Turn on the coffee maker to start brewing

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker]==290
        # Select the coffee maker with ID 290
        make_coffee(coffe_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_curtain_181(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==181
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(coffee_filter,curtain_instance)
        else:
            exp(coffee_filter,curtain_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,curtain_instance]=True
        close[curtain_instance,coffee_filter]=True
    

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_coffee_maker_plugged(coffee_maker:item, power_socket:item):
    body:
        achieve plugged(coffee_maker)

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve is_on(coffee_maker)
        achieve_on(cup, coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind power_socket: item where:
            is_powersocket(power_socket)
        # Ensure the coffee maker is plugged in
        ensure_coffee_maker_plugged(coffee_maker, power_socket)

        bind cup: item where:
            is_cup(cup)
        # Begin the process of making coffee
        make_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_146(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_plugged_in(coffee_maker:item):
    body:
        if not plugged(coffee_maker):
            achieve plugged(coffee_maker)
        # Ensure that the coffee maker is plugged in

def is_coffee_maker_ready(coffee_maker:item):
    # Function to check if the coffee maker is ready
    return plugged(coffee_maker) and closed(coffee_maker) and is_on(coffee_maker)

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve on(cup, coffee_maker) # Ensure the cup is placed on the coffee maker
        achieve closed(coffee_maker) # Ensure the coffee maker lid is closed
        ensure_plugged_in(coffee_maker)
        if not is_coffee_maker_ready(coffee_maker):
            observe(coffee_maker, "Is the coffee maker ready to make coffee")
        # Make the coffee once conditions are met

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        
        bind cup: item where:
            is_cup(cup)
        # Select the cup

        make_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_closetdrawer_146(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(coffee_filter,closetdrawer_instance)
        else:
            exp(coffee_filter,closetdrawer_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,closetdrawer_instance]=True
        close[closetdrawer_instance,coffee_filter]=True
    

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_coffee_maker_plugged(coffe_maker:item, powersocket:item):
    body:
        achieve plugged(coffe_maker) 
        # Ensure the coffee maker is plugged into a power socket

behavior place_cup_on_coffee_maker(cup:item, coffe_maker:item):
    body:
        achieve on(cup, coffe_maker)
        # Place the cup on the coffee maker

behavior start_coffee_making(coffe_maker:item):
    body:
        achieve is_on(coffe_maker)
        # Switch on the coffee maker to start making coffee

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select coffee maker
        
        bind cup: item where:
            is_cup(cup) and on(cup, coffe_maker)
        # Select cup that is on the coffee maker
        
        bind powersocket: item where:
            is_powersocket(powersocket)
        # Select power socket

        ensure_coffee_maker_plugged(coffe_maker, powersocket)
        start_coffee_making(coffe_maker)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make a cup of coffee using the coffee maker." ?
Answer: Put a suitably sized cup into the coffee machine and start it.
Re-decompose: False

##############################
Error record: 'LLMPlusPWG' object has no attribute 'refineme'
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(coffe_maker_290)', 'put_executor(cup_2063, coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)']
Time info:
Time consume: 167 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 9
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
