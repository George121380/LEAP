From agent.py
Reset goals: The sub-goals are: 
['Cook a pot of fish soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
# Define a function to check if there is fish among the items present
def has_fish_in_items(item:item):
    symbol fish_present=exists o: item: is_food_fish(o) and inside(o, item)
    return fish_present

# Define a function to check if item is a pot
def is_item_pot(pot: item):
    return is_pot(pot)

# Define a function to check if item is a stove
def is_item_stove(stove: item):
    return is_stove(stove)

# Define a function to find a pot that also has fish inside
def find_pot_with_fish():
    foreach pot: item:
        # Check all items if they are pots and have fish inside them
        if is_item_pot(pot) and has_fish_in_items(pot):
            return pot

# Define behavior to put water into the pot
behavior add_water_to_pot(pot: item):
    body:
        achieve has_water(pot) # Put water in the pot

# Define behavior to put the pot on the stove
behavior put_pot_on_stove(pot: item, stove:item):
    body:
        achieve_on hold(pot) # Hold the pot
        achieve on(pot, stove) # Place the pot on the stove

# Define behavior to turn on the stove
behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove) # Turn on the stove

# Main goal behavior to cook fish soup
behavior __goal__():
    body:
        # Find a pot with fish inside
        bind pot: item where:
            is_item_pot(pot) and has_fish_in_items(pot)

        # Identify the stove present
        bind stove: item where:
            is_item_stove(stove)

        # Add water and place it on the stove
        add_water_to_pot(pot)
        put_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

#exp_behavior_end

#goal_representation
 
def has_fish_and_water_in_pot(pot:item):
    # Function to check if there are fish and water in a specified pot
    symbol has_fish_and_water=exists f: item : is_food_fish(f) and inside(f, pot) and has_water(pot)
    return has_fish_and_water

def on_stove(pot:item, stove:item):
    # Function to check if pot is on the stove
    return on(pot, stove)

behavior start_cooking(pot:item, stove:item):
    body:
        achieve is_on(stove)
        # Turn the stove on to start cooking

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)

        bind pot: item where:
            is_pot(pot) and on_stove(pot, stove)

        if exists pot: item : is_pot(pot) and has_fish_and_water_in_pot(pot):
            # If the pot already has fish and water, we can directly start cooking
            start_cooking(pot, stove)

        else:
            # Need to prepare a pot with fish and water
            observe(pot, "Check if the pot has fish and water")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation

def is_in_kitchen(item:item):
    # Function to check if an item is in the kitchen
    symbol is_inside_kitchen=exists kitchen: item : is_kitchen(kitchen) and inside(item, kitchen)
    return is_inside_kitchen

def is_food_in_pot(pot:item):
    # Function to check if food ingredients are in the pot
    symbol has_food=exists f: item : is_food(f) and inside(f, pot)
    return has_food

def has_faucet_close_by(sink:item):
    # Function to determine if a faucet is close to the sink
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior clean_fish(fish:item, sink:item):
    # Behavior to clean fish in the sink
    body:
        achieve_once inside(fish, sink)
        # Ensure the fish is in the sink

        if has_faucet_close_by(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet

        wash(fish)
        # Clean the fish

        if has_faucet_close_by(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet

behavior prepare_soup_ingredients():
    # Behavior to ensure soup ingredients are prepared
    body:
        bind pot: item where:
            is_pot(pot) and is_in_kitchen(pot)
        bind fish: item where:
            is_food_fish(fish)
        # Clean the fish
        bind sink: item where:
            is_sink(sink) and close(sink, pot)
        clean_fish(fish, sink)
        
        # You would generally add more ingredient preparation here for a comprehensive soup recipe
        achieve inside(fish, pot)

behavior cook_soup(pot:item):
    # Behavior to turn on the stove for cooking the soup
    body:
        bind stove: item where:
            is_stove(stove) and close(stove, pot)

        achieve is_on(stove)
        # Turn on the stove to begin cooking the soup

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and is_in_kitchen(pot)

        prepare_soup_ingredients()
        cook_soup(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item, sink:item):
    body:
        achieve_once inside(fish, sink)
        # Ensure the fish is inside the sink

        if exists faucet:item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the fish

        wash(fish)
        # Wash the fish
        
        if exists faucet:item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after the fish is washed

behavior cut_fish(fish:item, cutting_board:item):
    body:
        achieve_once on(fish, cutting_board)
        # Ensure the fish is on the cutting board
        achieve cut(fish)
        # Cut the fish

behavior cook_fish_soup(fish:item, pot:item, stove:item):
    body:
        achieve_once inside(fish, pot)
        # Place the fish inside the pot
        achieve has_water(pot)
        # Ensure the pot has water
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve plugged(stove)
        # Ensure the stove is plugged in
        achieve is_on(stove)
        # Turn on the stove to cook the soup

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select an item that is a fish

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        wash_fish(fish, sink)
        cut_fish(fish, cutting_board)
        cook_fish_soup(fish, pot, stove)

#goal_representation_end

##############################
