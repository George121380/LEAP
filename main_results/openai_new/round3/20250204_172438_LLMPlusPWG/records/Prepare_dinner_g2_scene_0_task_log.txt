From agent.py
Reset goals: The sub-goals are: 
['Roast chicken with onion in the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2032_around_fridge_289(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_oven_295(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_chicken,oven_instance)
        else:
            exp(food_chicken,oven_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,oven_instance]=True
        close[oven_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def is_oven_on_surface(oven:item, surface:item):
    # Function to check if the oven is on a specific surface
    symbol on_surface=on(oven, surface) and surfaces(surface)
    return on_surface

behavior place_chicken_on_surface(chicken:item, surface:item):
    body:
        achieve on(chicken, surface) # Place the chicken on the surface

behavior place_onion_on_surface(onion:item, surface:item):
    body:
        achieve on(onion, surface) # Place the onion on the surface

behavior put_items_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior start_oven(oven:item):
    body:
        achieve is_on(oven) # Turn the oven on

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Bind a chicken item
        bind onion: item where:
            is_food_onion(onion)
        # Bind an onion item
        
        bind oven: item where:
            is_oven(oven)
        # Bind an oven item
        
        bind surface: item where:
            surfaces(surface) and is_oven_on_surface(oven, surface)
        # Bind a surface where the oven is placed
        
        place_chicken_on_surface(chicken, surface)
        # Place chicken on the surface near the oven
        
        place_onion_on_surface(onion, surface)
        # Place onion on the surface near the oven
        
        put_items_in_oven(chicken, onion, oven)
        # Place the chicken and the onion inside the oven
        
        start_oven(oven)
        # Turn on the oven to start roasting

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2032_around_fridge_289(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_onion,fridge_instance)
        else:
            exp(food_onion,fridge_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,fridge_instance]=True
        close[fridge_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_oven_295(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_chicken,oven_instance)
        else:
            exp(food_chicken,oven_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,oven_instance]=True
        close[oven_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def has_food_on_table(table:item):
    # Function to check if there is food on a specified table
    symbol has_food=exists o: item : is_food(o) and on(o, table)
    return has_food

behavior prepare_roast_chicken_with_onion(chicken:item, onion:item, oven:item):
    body:
        assert is_food_chicken(chicken) and is_food_onion(onion) and is_oven(oven)
        # Ensure the chicken is food and theres onion and the appliance is an oven

        achieve inside(chicken, oven)
        achieve inside(onion, oven)
        # Place the chicken and onion inside the oven
        
        achieve is_on(oven)
        # Turn the oven on to start roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an item that is a chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select an item that is an onion
        
        bind oven: item where:
            is_oven(oven)
        # Select an item that is an oven

        prepare_roast_chicken_with_onion(chicken, onion, oven)
        # Invoke the behavior to prepare the roast chicken with onion in the oven

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_food_on_table(table:item):
    # Function to check if there is food on a specified table
    symbol has_food=exists o: item : is_food(o) and on(o, table)
    return has_food

behavior prepare_roast_chicken_with_onion(chicken:item, onion:item, oven:item):
    body:
        assert is_food_chicken(chicken) and is_food_onion(onion) and is_oven(oven)
        # Ensure the chicken is food and theres onion and the appliance is an oven

        achieve inside(chicken, oven)
        achieve inside(onion, oven)
        # Place the chicken and onion inside the oven
        
        achieve is_on(oven)
        # Turn the oven on to start roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an item that is a chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select an item that is an onion
        
        bind oven: item where:
            is_oven(oven)
        # Select an item that is an oven

        prepare_roast_chicken_with_onion(chicken, onion, oven)
        # Invoke the behavior to prepare the roast chicken with onion in the oven

##############################
From agent.py-> find a plan in act()
walk_executor(oven_295)switchoff_executor(oven_295)open_executor(oven_295)exp(food_chicken_2017, oven_295)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(oven_295)putin_executor(food_chicken_2017, oven_295)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_onion_2032, fridge_289)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(oven_295)putin_executor(food_onion_2032, oven_295)close_executor(oven_295)switchon_executor(oven_295)
##############################
From agent.py
walk_executor(oven_295)
Robot find: drawing_240, drawing_238, drawing_239, Robot is close to the oven_295. 
##############################
From agent.py
switchoff_executor(oven_295)
Robot find: Robot is close to the oven_295. oven_295 is turned off. 
##############################
From agent.py
open_executor(oven_295)
Robot find: tray_296, Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is opened. 
##############################
From agent.py
exp(food_chicken_2017, oven_295)
Fail to find food_chicken_2017 around oven_295. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(food_chicken_2017, stove_2065)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(oven_295)putin_executor(food_chicken_2017, oven_295)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_onion_2032, fridge_289)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(oven_295)putin_executor(food_onion_2032, oven_295)close_executor(oven_295)switchon_executor(oven_295)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: pot_2069, knife_2050, cutting_board_2051, cup_2064, fryingpan_2083, napkin_2005, cup_2063, oil_2079, drawing_241, drawing_242, drawing_243, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
exp(food_chicken_2017, stove_2065)
Fail to find food_chicken_2017 around stove_2065. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(oven_295)putin_executor(food_chicken_2017, oven_295)walk_executor(toaster_292)exp(food_onion_2032, toaster_292)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(oven_295)putin_executor(food_onion_2032, oven_295)close_executor(oven_295)switchon_executor(oven_295)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2017)walk_executor(oven_295)putin_executor(food_chicken_2017, oven_295)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(oven_295)putin_executor(food_onion_2032, oven_295)close_executor(oven_295)switchon_executor(oven_295)
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. 
##############################
From agent.py
putin_executor(food_chicken_2017, oven_295)
Robot find: Robot is close to the food_chicken_2017. Robot is close to the tray_296. Robot is close to the oven_295. oven_295 is close food_chicken_2017. food_chicken_2017 is close oven_295. food_chicken_2017 is inside oven_295. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot find: Robot is close to the food_onion_2032. Robot is close to the fridge_289. 
##############################
From agent.py
grab_executor(food_onion_2032)
Robot find: Robot is close to the food_onion_2032. Robot is close to the fridge_289. Grabbing food_onion_2032 by right hand. 
##############################
From agent.py
walk_executor(oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the tray_296. Robot is close to the food_chicken_2017. Robot is close to the oven_295. 
##############################
From agent.py
putin_executor(food_onion_2032, oven_295)
Robot find: Robot is close to the food_onion_2032. Robot is close to the tray_296. Robot is close to the food_chicken_2017. Robot is close to the oven_295. food_onion_2032 is close oven_295. oven_295 is close food_onion_2032. food_onion_2032 is inside oven_295. food_onion_2032 released by right hand. 
##############################
From agent.py
close_executor(oven_295)
Robot find: Robot is close to the oven_295. oven_295 is closed. 
##############################
From agent.py
switchon_executor(oven_295)
Robot find: Robot is close to the oven_295. oven_295 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Roast chicken with onion in the oven.
Action History:
['walk_executor(oven_295)', 'switchoff_executor(oven_295)', 'open_executor(oven_295)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_chicken_2017)', 'walk_executor(oven_295)', 'putin_executor(food_chicken_2017, oven_295)', 'walk_executor(food_onion_2032)', 'grab_executor(food_onion_2032)', 'walk_executor(oven_295)', 'putin_executor(food_onion_2032, oven_295)', 'close_executor(oven_295)', 'switchon_executor(oven_295)']
Time info:
Time consume: 92 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 2
goal correct times: 0

Task complete rate:
1
Scene_id: 0
##############################
