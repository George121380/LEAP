From agent.py
Reset goals: The sub-goals are: 
['Make some French fries.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_oil_2079_around_fridge_289(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(oil,fridge_instance)
        else:
            exp(oil,fridge_instance)
    eff:
        unknown[oil]=False
        close[oil,fridge_instance]=True
        close[fridge_instance,oil]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
def has_oil_or_clean_something(utensil:item):
    # Determine whether this utensil has oil or is clean
    symbol has_oil_or_clean=exists oil:item: is_oil(oil) and inside(oil, utensil) or clean(utensil)
    return has_oil_or_clean

behavior prepare_frying(fryingpan:item, stove:item, potato:item):
    body:
        achieve is_on(stove) # Turn on the stove to start heating up the frying pan
        achieve_once on(fryingpan, stove) # Place the frying pan on the stove
        foreach oil: item:
            if is_oil(oil):
                achieve on(oil, fryingpan) # Add oil to the frying pan

behavior peel_potato(potato:item, sink:item):
    body:
        achieve inside(potato, sink)
        # Place the potato inside the sink
        achieve clean(potato)
        # Clean the potato

behavior chop_potato(potato:item, cutting_board:item):
    body:
        achieve inside(potato, cutting_board)
        # Place the potato on the cutting board
        achieve cut(potato)
        # Cut the potato

behavior fry_potato(fryingpan:item, potato:item):
    body:
        achieve inside(potato, fryingpan)
        # Fry the potato in the frying pan

behavior close_the_stove(stove:item):
    body:
        achieve is_off(stove) # Turn off the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a fryingpan
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind potato: item where:
            is_food_potato(potato)
        # Select a potato
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        prepare_frying(fryingpan, stove, potato)
        peel_potato(potato, sink)
        chop_potato(potato, cutting_board)
        fry_potato(fryingpan, potato)
        close_the_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_potato(potato:item, sink:item):
    body:
        achieve_once inside(potato, sink)
        # Place the potato inside the sink

        if exists faucet:item: is_faucet(faucet) and close(faucet,sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If there is a faucet close to the sink, turn it on to wash the potato

        wash(potato)
        # Wash the potato

        if exists faucet:item: is_faucet(faucet) and close(faucet,sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn the faucet off after washing

behavior cut_potato(potato:item, knife:item, cutting_board:item):
    body:
        achieve_once on(potato, cutting_board)
        achieve_once inhand(knife)
        # Ensure the potato is on the cutting board and knife is in hand to cut

        achieve cut(potato)
        # Achieve the state of the potato being cut, which generally involves using the knife

behavior fry_potato(potato:item, frying_pan:item, stove:item):
    body:
        achieve_once inside(potato, frying_pan)
        # Place the potato inside the frying pan

        if has_switch(stove):
            achieve_once is_on(stove)
            # Turn on the stove if it has a switch

        # Assume frying process will happen here through interaction with the stove and frying pan

        if has_switch(stove):
            achieve_once is_off(stove)
            # Turn off stove once frying is complete

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Bind a potato item
        
        bind sink: item where:
            is_sink(sink)
        # Bind a sink item

        bind knife: item where:
            is_knife(knife)
        # Bind a knife item
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Bind a cutting board item
        
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Bind a frying pan item
        
        bind stove: item where:
            is_stove(stove)
        # Bind a stove item        

        wash_potato(potato, sink)
        cut_potato(potato, knife, cutting_board)
        fry_potato(potato, frying_pan, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wash_potato(potato:item, sink:item):
    body:
        achieve_once inside(potato, sink)
        # Place the potato inside the sink

        if exists faucet:item: is_faucet(faucet) and close(faucet,sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If there is a faucet close to the sink, turn it on to wash the potato

        wash(potato)
        # Wash the potato

        if exists faucet:item: is_faucet(faucet) and close(faucet,sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn the faucet off after washing

behavior cut_potato(potato:item, knife:item, cutting_board:item):
    body:
        achieve_once on(potato, cutting_board)
        achieve_once inhand(knife)
        # Ensure the potato is on the cutting board and knife is in hand to cut

        achieve cut(potato)
        # Achieve the state of the potato being cut, which generally involves using the knife

behavior fry_potato(potato:item, frying_pan:item, stove:item):
    body:
        achieve_once inside(potato, frying_pan)
        # Place the potato inside the frying pan

        if has_switch(stove):
            achieve_once is_on(stove)
            # Turn on the stove if it has a switch

        # Assume frying process will happen here through interaction with the stove and frying pan

        if has_switch(stove):
            achieve_once is_off(stove)
            # Turn off stove once frying is complete

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        # Bind a potato item
        
        bind sink: item where:
            is_sink(sink)
        # Bind a sink item

        bind knife: item where:
            is_knife(knife)
        # Bind a knife item
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Bind a cutting board item
        
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Bind a frying pan item
        
        bind stove: item where:
            is_stove(stove)
        # Bind a stove item        

        wash_potato(potato, sink)
        cut_potato(potato, knife, cutting_board)
        fry_potato(potato, frying_pan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_potato_2035, fridge_289)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(sink_42)putin_executor(food_potato_2035, sink_42)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_potato_2035)walk_executor(kitchen_counter_230)exp(cutting_board_2051, kitchen_counter_230)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)walk_executor(stove_2065)open_executor(stove_2065)exp(fryingpan_2083, stove_2065)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(fryingpan_2083)putin_executor(food_potato_2035, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)switchoff_executor(stove_2065)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_239, drawing_240, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_potato_2035, fridge_289)
Find food_potato_2035. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2035)walk_executor(sink_42)putin_executor(food_potato_2035, sink_42)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_potato_2035)walk_executor(kitchen_counter_230)exp(cutting_board_2051, kitchen_counter_230)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)walk_executor(stove_2065)open_executor(stove_2065)exp(fryingpan_2083, stove_2065)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(fryingpan_2083)putin_executor(food_potato_2035, fryingpan_2083)walk_executor(stove_2065)switchon_executor(stove_2065)switchoff_executor(stove_2065)
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_potato_2035 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot find: soap_2053, towel_rack_32, towel_rack_34, towel_rack_31, cleaning_solution_2073, detergent_2084, basket_for_clothes_2006, Robot is close to the food_potato_2035. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. 
##############################
From agent.py
putin_executor(food_potato_2035, sink_42)
Robot find: Robot is close to the food_potato_2035. Robot is close to the bathroom_counter_41. Robot is close to the sink_42. food_potato_2035 is inside sink_42. food_potato_2035 is close sink_42. sink_42 is close food_potato_2035. food_potato_2035 released by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_cupboard_229(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Function to check whether a sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior clean_food(food:item, sink:item):
    # Define the behavior to clean food in the sink
    body:
        achieve_once inside(food, sink)
        # Put the food inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on

        wash(food)
        # Wash the food

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn the faucet off

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select sink with ID 42

        bind food_potato: item where:
            is_food_potato(food_potato) and inside(food_potato, sink)
        # Select the potato in the sink

        clean_food(food_potato, sink)
        # Clean the potato without washing

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_faucet(sink:item):
    # Function to check whether a sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior clean_food(food:item, sink:item):
    # Define the behavior to clean food in the sink
    body:
        achieve_once inside(food, sink)
        # Put the food inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on

        wash(food)
        # Wash the food

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn the faucet off

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==42
        # Select sink with ID 42

        bind food_potato: item where:
            is_food_potato(food_potato) and inside(food_potato, sink)
        # Select the potato in the sink

        clean_food(food_potato, sink)
        # Clean the potato without washing

##############################
From agent.py-> find a plan in act()
wash_executor(food_potato_2035)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_potato(potato: item):
    body:
        achieve cut(potato)

behavior __goal__():
    body:
        bind food_potato: item where:
            is_food_potato(food_potato) and id[food_potato] == 2035
        # Select the potato with ID 2035

        bind sink: item where:
            is_sink(sink) and close(sink,food_potato)
        # Select the sink where the potato is placed

        cut_potato(food_potato)
        # Cut the potato to make French fries

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cut_potato(potato: item):
    body:
        achieve cut(potato)

behavior __goal__():
    body:
        bind food_potato: item where:
            is_food_potato(food_potato) and id[food_potato] == 2035
        # Select the potato with ID 2035

        bind sink: item where:
            is_sink(sink) and close(sink,food_potato)
        # Select the sink where the potato is placed

        cut_potato(food_potato)
        # Cut the potato to make French fries

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cutting_board_2051, kitchen_counter_230)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: pot_2069, knife_2050, cutting_board_2051, cup_2064, fryingpan_2083, napkin_2005, cup_2063, oil_2079, drawing_238, drawing_241, drawing_242, drawing_243, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cutting_board_2051, kitchen_counter_230)
Find cutting_board_2051. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(cutting_board_2051)put_executor(food_potato_2035, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_potato_2035)cut_executor(food_potato_2035)
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the sink_42. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the sink_42. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot find: Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(food_potato_2035, cutting_board_2051)
Robot find: Robot is close to the food_potato_2035. Robot is close to the cutting_board_2051. Robot is close to the kitchen_counter_230. cutting_board_2051 is close food_potato_2035. food_potato_2035 is close cutting_board_2051. food_potato_2035 is on cutting_board_2051. food_potato_2035 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. 
##############################
From agent.py
grab_executor(knife_2050)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
cut_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fry the cut potatoes to make French fries. Ensure the oil is heated in a frying pan, and then fry the potato pieces until they are golden brown and crispy.
##############################
From agent.py
Human Instruction: You need to fry the cut potatoes to make French fries. Ensure the oil is heated in a frying pan, and then fry the potato pieces until they are golden brown and crispy.

Trial and Error: You can not wash food_potato_2035You can not wash food_potato_2035
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_potato_2035 around fridge_289.
Action 5: Grab food_potato_2035.
Action 6: Walk to sink_42.
Action 7: Put food_potato_2035 into sink_42.
Action 8: Walk to faucet_43.
Action 9: Switch on faucet_43.
Action 10: Walk to kitchen_counter_230.
Action 11: look for cutting_board_2051 around kitchen_counter_230.
Action 12: Walk to food_potato_2035.
Action 13: Grab food_potato_2035.
Action 14: Walk to cutting_board_2051.
Action 15: Put food_potato_2035 on cutting_board_2051.
Action 16: Walk to knife_2050.
Action 17: Grab knife_2050.
Action 18: Walk to food_potato_2035.
Action 19: Cut food_potato_2035.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_146(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation

def is_food_ready(potatoes:item):
    # Determine if the fries are prepared
    return cut(potatoes)

def is_oil_hot(pan:item, oil:item):
    # Determine if the oil is heated in the frying pan
    return is_on(pan) and close(oil, pan)

behavior heat_oil(oil:item, pan:item):
    body:
        achieve inside(oil, pan)
        # Ensure oil is inside the frying pan
        achieve is_on(pan)
        # Turn on the frying pan

behavior fry_potatoes(potatoes:item, pan:item):
    body:
        achieve inside(potatoes, pan) 
        # Placing the cut potatoes inside the frying pan
        achieve is_off(pan) 
        # Turn off the frying pan after frying

behavior __goal__():
    body:
        bind food_potato: item where:
            is_food_potato(food_potato)
        # Select the potato
        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan
        bind oil: item where:
            is_oil(oil)
        # Select the oil

        if not is_food_ready(food_potato):
            achieve cut(food_potato)
            # Ensure the potato is cut if not already

        if not is_oil_hot(pan, oil):
            heat_oil(oil, pan)
            # Heat the oil in the pan if not hot

        fry_potatoes(food_potato, pan)
        # Fry the potatoes in the heated oil

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_pot_2069(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(bowl,pot_instance)
        else:
            exp(bowl,pot_instance)
    eff:
        unknown[bowl]=False
        close[bowl,pot_instance]=True
        close[pot_instance,bowl]=True
    

behavior find_book_2066_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_soap_2053_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def has_fryingpan_with_oil(fryingpan:item):
    # Function to check if a frying pan has oil
    symbol has_oil=exists oil: item : is_oil(oil) and inside(oil, fryingpan)
    return has_oil

behavior heat_oil(fryingpan:item):
    body:
        if has_oil(fryingpan):
            # Ensure the frying pan has oil before heating
            achieve is_on(fryingpan) 

behavior fry_potatoes(potatoes:item, fryingpan:item):
    body:
        achieve cut(potatoes) # Ensure potatoes are cut
        achieve inside(potatoes, fryingpan)
        # Place cut potatoes into the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind a frying pan for use

        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select cut potatoes for frying

        bind oil: item where:
            is_oil(oil)
        # Select some cooking oil

        if not has_fryingpan_with_oil(fryingpan):
            achieve inside(oil, fryingpan)
        # Add oil to the frying pan if not already present

        heat_oil(fryingpan)
        fry_potatoes(potatoes, fryingpan)
        # Fry the potatoes in the heated frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_146(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
def is_ready_food_fry(stove: item, fryingpan: item):
    symbol ready = is_on(stove) and close(fryingpan, stove)
    return ready

behavior fry_potatoes(fryingpan: item, potatoes: item, stove: item):
    body:
        achieve is_on(stove) # Ensure the stove is on
        achieve on(fryingpan, stove) # Place the frying pan on the stove
        achieve cut(potatoes) # Potatoes need to be cut
        achieve inside(potatoes, fryingpan) # Place potatoes in the frying pan

        # If the stove and pan are ready for frying, potatoes can be fried
        if is_ready_food_fry(stove, fryingpan):
            achieve on(fryingpan, stove)  
        
        # Observe to ensure the potatoes turn golden brown and crispy
        observe(fryingpan, "Check if potatoes are golden brown and crispy")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potatoes

        fry_potatoes(fryingpan, potatoes, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_ready_food_fry(stove: item, fryingpan: item):
    symbol ready = is_on(stove) and close(fryingpan, stove)
    return ready

behavior fry_potatoes(fryingpan: item, potatoes: item, stove: item):
    body:
        achieve is_on(stove) # Ensure the stove is on
        achieve on(fryingpan, stove) # Place the frying pan on the stove
        achieve cut(potatoes) # Potatoes need to be cut
        achieve inside(potatoes, fryingpan) # Place potatoes in the frying pan

        # If the stove and pan are ready for frying, potatoes can be fried
        if is_ready_food_fry(stove, fryingpan):
            achieve on(fryingpan, stove)  
        
        # Observe to ensure the potatoes turn golden brown and crispy
        observe(fryingpan, "Check if potatoes are golden brown and crispy")

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potatoes

        fry_potatoes(fryingpan, potatoes, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)switchon_executor(stove_2065)walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)walk_executor(food_potato_2035)grab_executor(food_potato_2035)walk_executor(fryingpan_2083)putin_executor(food_potato_2035, fryingpan_2083)obs(fryingpan_2083, Check if potatoes are golden brown and crispy)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the knife_2050. Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 is close stove_2065. fryingpan_2083 released by left hand. 
##############################
From agent.py
walk_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. 
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the cutting_board_2051. Robot is close to the food_potato_2035. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_potato_2035, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_potato_2035 is inside fryingpan_2083. food_potato_2035 is close fryingpan_2083. fryingpan_2083 is close food_potato_2035. food_potato_2035 released by left hand. 
##############################
From agent.py
obs(fryingpan_2083, Check if potatoes are golden brown and crispy)
Get this information:  food_potato_2035 is inside fryingpan_2083. fryingpan_2083 is on stove_2065. fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to stove_2065. fryingpan_2083 is close to character_65. fryingpan_2083 is close to food_potato_2035. fryingpan_2083 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the potatoes in the frying pan are fried until they are golden brown and crispy. You should confirm that the oil has been added to the frying pan before frying the potatoes.
##############################
From agent.py
Human Instruction: You need to ensure the potatoes in the frying pan are fried until they are golden brown and crispy. You should confirm that the oil has been added to the frying pan before frying the potatoes.

Trial and Error: You can not wash food_potato_2035You can not wash food_potato_2035
The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: look for food_potato_2035 around fridge_289.
Action 5: Grab food_potato_2035.
Action 6: Walk to sink_42.
Action 7: Put food_potato_2035 into sink_42.
Action 8: Walk to faucet_43.
Action 9: Switch on faucet_43.
Action 10: Walk to kitchen_counter_230.
Action 11: look for cutting_board_2051 around kitchen_counter_230.
Action 12: Walk to food_potato_2035.
Action 13: Grab food_potato_2035.
Action 14: Walk to cutting_board_2051.
Action 15: Put food_potato_2035 on cutting_board_2051.
Action 16: Walk to knife_2050.
Action 17: Grab knife_2050.
Action 18: Walk to food_potato_2035.
Action 19: Cut food_potato_2035.
Action 20: Walk to stove_2065.
Action 21: Switch on stove_2065.
Action 22: Walk to fryingpan_2083.
Action 23: Grab fryingpan_2083.
Action 24: Walk to stove_2065.
Action 25: Put fryingpan_2083 on stove_2065.
Action 26: Walk to food_potato_2035.
Action 27: Grab food_potato_2035.
Action 28: Walk to fryingpan_2083.
Action 29: Put food_potato_2035 into fryingpan_2083.
Action 30: Observe around fryingpan_2083 with the question of Check if potatoes are golden brown and crispy.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_soap_2053(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2053
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(soap,soap_instance)
        else:
            exp(soap,soap_instance)
    eff:
        unknown[soap]=False
        close[soap,soap_instance]=True
        close[soap_instance,soap]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_book_2066_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def has_oil_in_fryingpan(fryingpan:item):
    # Determine whether there is oil in the frying pan
    symbol has_oil=exists oil:item: is_oil(oil) and inside(oil, fryingpan)
    return has_oil

def is_gold_and_crispy_potatoes(potatoes:item):
    # Determine if the potatoes are golden brown and crispy
    symbol is_gold_and_crispy=exists potato:item: is_food_potato(potato) and is_food(potato)
    return is_gold_and_crispy

behavior fry_potatoes(fryingpan:item, stove:item, food:item):
    body:
        achieve on(food, fryingpan)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind food_potato: item where:
            is_food_potato(food_potato)
        # Select the potato

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is on

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan that is on the stove

        if not has_oil_in_fryingpan(fryingpan):
            observe(fryingpan, "Check if there is oil in the frying pan")
            # Observe whether the frying pan contains oil
        
        fry_potatoes(fryingpan, stove, food_potato)
        
        if not is_gold_and_crispy_potatoes(food_potato):
            observe(fryingpan, "Check if potatoes are golden brown and crispy")
            # Observe whether the potatoes are golden brown and crispy

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_oil_in_fryingpan(fryingpan:item):
    # Determine whether there is oil in the frying pan
    symbol has_oil=exists oil:item: is_oil(oil) and inside(oil, fryingpan)
    return has_oil

def is_gold_and_crispy_potatoes(potatoes:item):
    # Determine if the potatoes are golden brown and crispy
    symbol is_gold_and_crispy=exists potato:item: is_food_potato(potato) and is_food(potato)
    return is_gold_and_crispy

behavior fry_potatoes(fryingpan:item, stove:item, food:item):
    body:
        achieve on(food, fryingpan)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind food_potato: item where:
            is_food_potato(food_potato)
        # Select the potato

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is on

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan that is on the stove

        if not has_oil_in_fryingpan(fryingpan):
            observe(fryingpan, "Check if there is oil in the frying pan")
            # Observe whether the frying pan contains oil
        
        fry_potatoes(fryingpan, stove, food_potato)
        
        if not is_gold_and_crispy_potatoes(food_potato):
            observe(fryingpan, "Check if potatoes are golden brown and crispy")
            # Observe whether the potatoes are golden brown and crispy

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2083, Check if there is oil in the frying pan)grab_executor(food_potato_2035)put_executor(food_potato_2035, fryingpan_2083)
##############################
From agent.py
obs(fryingpan_2083, Check if there is oil in the frying pan)
Get this information:  food_potato_2035 is inside fryingpan_2083. fryingpan_2083 is on stove_2065. fryingpan_2083 is inside dining_room_201. fryingpan_2083 is close to stove_2065. fryingpan_2083 is close to character_65. fryingpan_2083 is close to food_potato_2035. fryingpan_2083 is CLEAN.
##############################
From agent.py
grab_executor(food_potato_2035)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. Grabbing food_potato_2035 by left hand. 
##############################
From agent.py
put_executor(food_potato_2035, fryingpan_2083)
Robot find: Robot is close to the knife_2050. Robot is close to the food_potato_2035. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_potato_2035 is close fryingpan_2083. food_potato_2035 is on fryingpan_2083. food_potato_2035 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure there is oil in the frying pan before frying the potatoes. After verifying the presence of oil, fry the potatoes until they are golden brown and crispy.
##############################
Task Summary:
Task Goal:
Make some French fries.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_potato_2035)', 'walk_executor(sink_42)', 'putin_executor(food_potato_2035, sink_42)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'wash_executor(food_potato_2035) (Failed)', 'wash_executor(food_potato_2035) (Failed)', 'walk_executor(kitchen_counter_230)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(cutting_board_2051)', 'put_executor(food_potato_2035, cutting_board_2051)', 'walk_executor(knife_2050)', 'grab_executor(knife_2050)', 'walk_executor(food_potato_2035)', 'cut_executor(food_potato_2035)', 'walk_executor(stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'walk_executor(food_potato_2035)', 'grab_executor(food_potato_2035)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_potato_2035, fryingpan_2083)', 'grab_executor(food_potato_2035)', 'put_executor(food_potato_2035, fryingpan_2083)']
Time info:
Time consume: 251 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 8
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 6 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
