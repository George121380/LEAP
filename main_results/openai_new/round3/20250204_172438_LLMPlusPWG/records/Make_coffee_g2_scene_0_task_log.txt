From agent.py
Reset goals: The sub-goals are: 
['make a cup of coffee using the coffee maker, then add milk and sugar.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_sugar(coffee_cup:item):
    # Function to check if milk and sugar are in the coffee cup
    symbol has_milk_sugar=exists item: item : (is_milk(item) or is_food_sugar(item)) and inside(item, coffee_cup)
    return has_milk_sugar

behavior make_coffee(coffee_maker:item, coffee_cup:item):
    body:
        achieve is_on(coffee_maker)
        achieve inside(coffee_cup,coffee_maker)
        # Ensure the coffee maker is turned on and the cup is inside it for coffee brewing

behavior add_milk_sugar(coffee_cup:item, milk:item, sugar:item):
    body:
        achieve inside(milk, coffee_cup)
        achieve inside(sugar, coffee_cup)
        # Ensure milk and sugar are inside the coffee cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind coffee_cup: item where:
            is_cup(coffee_cup)
        # Select a coffee cup

        make_coffee(coffee_maker, coffee_cup)
        # Make coffee using the coffee maker

        if not has_milk_sugar(coffee_cup):
            bind milk: item where:
                is_milk(milk)
            # Select milk

            bind sugar: item where:
                is_food_sugar(sugar)
            # Select sugar

            add_milk_sugar(coffee_cup, milk, sugar)
            # Add milk and sugar to the coffee cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_closetdrawer_146(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cup,closetdrawer_instance)
        else:
            exp(cup,closetdrawer_instance)
    eff:
        unknown[cup]=False
        close[cup,closetdrawer_instance]=True
        close[closetdrawer_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee_with_milk_sugar(coffee_maker:item, cup:item, milk:item, sugar:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on

        achieve inside(cup, coffee_maker)
        # Ensure the cup is inside the coffee maker to receive coffee

        achieve inside(milk, cup)
        # Pour milk into the cup

        achieve inside(sugar, cup)
        # Add sugar into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        make_coffee_with_milk_sugar(coffee_maker, cup, milk, sugar)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
def add_milk_and_sugar(cup: item):
    # Define the behavior to add milk and sugar to the cup
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk item
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar item
        achieve on(milk, cup)
        # Add milk to the cup
        achieve on(sugar, cup)
        # Add sugar to the cup

behavior make_coffee(cup: item, coffee_maker: item):
    body:
        achieve clean(cup)
        # Ensure the cup is clean before making coffee
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on
        if has_switch(coffee_maker):
            # Check if the coffee maker has a switch and turn it on if it does
            achieve_once is_on(coffee_maker)
        achieve on(cup, coffee_maker)
        # Brew the coffee into the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        make_coffee(cup, coffee_maker)
        add_milk_and_sugar(cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee_and_prepare(cup:item, coffee_maker:item, milk:item, sugar:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing coffee

        symbol has_coffee_ready = exists coffee: item : is_coffe_maker(coffee) and inside(coffee, coffee_maker)
        assert has_coffee_ready
        # Assert that the coffee has been made and is inside the coffee maker

        achieve inside(coffee, cup)
        # Pour the coffee into the cup

        achieve close_char(char, milk)
        # Move close to the milk

        achieve_once inhand(milk)
        # Temporarily hold the milk in hand to pour into the coffee

        achieve inside(milk, cup)
        # Pour milk into the cup with coffee

        achieve close_char(char, sugar)
        # Move close to the sugar

        achieve_once inhand(sugar)
        # Temporarily hold the sugar in hand to add to the coffee

        achieve inside(sugar, cup)
        # Add sugar to the coffee

        achieve unplugged(coffee_maker)
        # Unplug the coffee maker once finished

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        make_coffee_and_prepare(cup, coffee_maker, milk, sugar)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior brew_coffee(coffee_maker:item, cup:item):
    body:
        achieve is_on(coffee_maker) # Turn on the coffee maker
        achieve inside(cup, coffee_maker) # Brew coffee into the cup

behavior add_ingredient_to_cup(ingredient:item, cup:item):
    body:
        achieve inside(ingredient, cup) # Add ingredient inside the cup

behavior turn_off_coffee_maker(coffee_maker:item):
    body:
        achieve is_off(coffee_maker) # Turn off the coffee maker to complete the task

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        bind milk: item where:
            is_milk(milk)
        # Select milk
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar
        brew_coffee(coffee_maker, cup)
        # Brew coffee into the cup
        add_ingredient_to_cup(milk, cup)
        # Add milk to the coffee
        add_ingredient_to_cup(sugar, cup)
        # Add sugar to the coffee
        turn_off_coffee_maker(coffee_maker)
        # Turn off the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_coffe_maker_290(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee(coffee_maker: item, water: item, coffee_filter: item, cup: item):
    body:
        achieve plugged(coffee_maker)
        # Plug in the coffee maker

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water Use has_water to check if theres water in water
        
        achieve inside(coffee_filter, coffee_maker)
        # Place the coffee filter inside the coffee maker

        achieve closed(coffee_maker)
        # Close the coffee maker to start brewing

behavior add_milk_and_sugar(cup: item, milk: item, sugar: item):
    body:
        achieve inside(milk, cup)
        # Add milk to the cup

        achieve inside(sugar, cup)
        # Add sugar to the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        # Select a coffee filter

        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar
        
        bind water: item where:
            has_water(water)
        # Ensure there is water

        make_coffee(coffee_maker, water, coffee_filter, cup)
        add_milk_and_sugar(cup, milk, sugar)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make a cup of coffee using the coffee maker, then add milk and sugar." ?
Answer: Put a suitably sized cup into the coffee machine and start it. After the coffee is ready, add milk and sugar into the cup.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_table_355(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_coffee_ready(coffee_maker: item):
    # Function to check if the coffee maker has coffee ready
    symbol coffee_ready=exists coffee: item : is_food(coffee) and on(coffee, coffee_maker)
    return coffee_ready

behavior make_coffee(cup: item, coffee_maker: item):
    body:
        achieve on(cup, coffee_maker)

behavior add_milk_sugar(cup: item):
    body:
        bind milk: item where:
            is_milk(milk) and pourable(milk)
        # Select a milk item that can be poured
        
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select a sugar item

        achieve inside(milk, cup)
        achieve inside(sugar, cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a suitable cup

        make_coffee(cup, coffee_maker)
        
        if has_coffee_ready(coffee_maker):
            add_milk_sugar(cup)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(table_355)exp(cup_2063, table_355)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)
##############################
From agent.py
walk_executor(table_355)
Robot find: mat_401, hairbrush_2002, vacuum_cleaner_2070, remote_control_2052, cat_2055, drawing_400, pillow_405, pillow_406, clothes_jacket_2047, headset_2062, spectacles_2082, drawing_404, Robot is close to the couch_352. Robot is close to the mat_401. Robot is close to the table_355. 
##############################
From agent.py
exp(cup_2063, table_355)
Fail to find cup_2063 around table_355. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_146)exp(cup_2063, closetdrawer_146)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)
##############################
From agent.py
walk_executor(closetdrawer_146)
Robot find: Robot is close to the dresser_123. 
##############################
From agent.py
exp(cup_2063, closetdrawer_146)
Fail to find cup_2063 around closetdrawer_146. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_146)exp(cup_2063, closetdrawer_146)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)
##############################
From agent.py
walk_executor(closetdrawer_146)
Robot find: Robot is close to the dresser_123. 
##############################
From agent.py
exp(cup_2063, closetdrawer_146)
Fail to find cup_2063 around closetdrawer_146. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_146)exp(cup_2063, closetdrawer_146)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)
##############################
From agent.py
walk_executor(closetdrawer_146)
Robot find: Robot is close to the dresser_123. 
##############################
From agent.py
exp(cup_2063, closetdrawer_146)
Fail to find cup_2063 around closetdrawer_146. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_146)exp(cup_2063, closetdrawer_146)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)
##############################
From agent.py
walk_executor(closetdrawer_146)
Robot find: Robot is close to the dresser_123. 
##############################
From agent.py
exp(cup_2063, closetdrawer_146)
Fail to find cup_2063 around closetdrawer_146. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_146)exp(cup_2063, closetdrawer_146)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)
##############################
From agent.py
walk_executor(closetdrawer_146)
Robot find: Robot is close to the dresser_123. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2063 ?
Answer: Go to dining_room_201. Once you are there, locate kitchen_counter_230. Cup_2063 is on kitchen_counter_230. Look for it on the surface of the counter.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_201. Once you are there, locate kitchen_counter_230. Cup_2063 is on kitchen_counter_230. Look for it on the surface of the counter.

Human Guidance: Put a suitably sized cup into the coffee machine and start it. After the coffee is ready, add milk and sugar into the cup.
The actions you have taken:
Action 1: Walk to table_355.
Action 2: look for cup_2063 around table_355.
Action 3: Walk to closetdrawer_146.
Action 4: look for cup_2063 around closetdrawer_146.
Action 5: Walk to closetdrawer_146.
Action 6: look for cup_2063 around closetdrawer_146.
Action 7: Walk to closetdrawer_146.
Action 8: look for cup_2063 around closetdrawer_146.
Action 9: Walk to closetdrawer_146.
Action 10: look for cup_2063 around closetdrawer_146.
Action 11: Walk to closetdrawer_146.

##############################
From agent.py
exp(cup_2063, closetdrawer_146)
Fail to find cup_2063 around closetdrawer_146. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: pot_2069, knife_2050, cutting_board_2051, cup_2064, fryingpan_2083, napkin_2005, cup_2063, oil_2079, drawing_239, drawing_238, drawing_240, drawing_241, drawing_242, drawing_243, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffe_maker_290)put_executor(cup_2063, coffe_maker_290)
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. 
##############################
From agent.py
put_executor(cup_2063, coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. coffe_maker_290 is close cup_2063. cup_2063 is close coffe_maker_290. cup_2063 is on coffe_maker_290. cup_2063 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to start the coffee maker with the cup in place, make sure the coffee is ready, and then add milk and sugar to the cup.
##############################
From agent.py
Human Instruction: You need to start the coffee maker with the cup in place, make sure the coffee is ready, and then add milk and sugar to the cup.

Human Guidance: Put a suitably sized cup into the coffee machine and start it. After the coffee is ready, add milk and sugar into the cup.
The actions you have taken:
Action 1: Walk to table_355.
Action 2: look for cup_2063 around table_355.
Action 3: Walk to closetdrawer_146.
Action 4: look for cup_2063 around closetdrawer_146.
Action 5: Walk to closetdrawer_146.
Action 6: look for cup_2063 around closetdrawer_146.
Action 7: Walk to closetdrawer_146.
Action 8: look for cup_2063 around closetdrawer_146.
Action 9: Walk to closetdrawer_146.
Action 10: look for cup_2063 around closetdrawer_146.
Action 11: Walk to closetdrawer_146.
Action 12: look for cup_2063 around closetdrawer_146.
Action 13: Walk to kitchen_counter_230.
Action 14: look for cup_2063 around kitchen_counter_230.
Action 15: Walk to cup_2063.
Action 16: Grab cup_2063.
Action 17: Walk to coffe_maker_290.
Action 18: Put cup_2063 on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_closetdrawer_146(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(food_sugar,closetdrawer_instance)
        else:
            exp(food_sugar,closetdrawer_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,closetdrawer_instance]=True
        close[closetdrawer_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior start_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve on(cup, coffee_maker)
        achieve is_on(coffee_maker)

behavior add_milk_and_sugar(cup:item, milk:item, sugar:item):
    body:
        achieve inside(milk, cup)
        achieve inside(sugar, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and on(cup, coffe_maker_290)
        # Select cup on the coffee maker

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==290
        # Select coffee maker with ID 290

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        start_coffee_maker(coffee_maker, cup)
        add_milk_and_sugar(cup, milk, sugar)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind the coffee maker
        
        bind cup: item where:
            is_cup(cup) and on(cup, coffee_maker)
        # Bind the cup that is already on the coffee maker

        achieve is_on(coffee_maker)
        # Start the coffee maker to make coffee

        bind milk: item where:
            is_milk(milk)
        # Bind milk item

        bind sugar: item where:
            is_food_sugar(sugar)
        # Bind sugar item

        achieve_once on(milk, cup)
        # Pour milk into the cup

        achieve_once on(sugar, cup)
        # Add sugar into the cup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Bind the coffee maker
        
        bind cup: item where:
            is_cup(cup) and on(cup, coffee_maker)
        # Bind the cup that is already on the coffee maker

        achieve is_on(coffee_maker)
        # Start the coffee maker to make coffee

        bind milk: item where:
            is_milk(milk)
        # Bind milk item

        bind sugar: item where:
            is_food_sugar(sugar)
        # Bind sugar item

        achieve_once on(milk, cup)
        # Pour milk into the cup

        achieve_once on(sugar, cup)
        # Add sugar into the cup

##############################
From agent.py-> find a plan in act()
switchon_executor(coffe_maker_290)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)put_executor(milk_2043, cup_2063)walk_executor(fridge_289)exp(food_sugar_2039, fridge_289)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)put_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2063. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(cup_2063)put_executor(milk_2043, cup_2063)walk_executor(food_sugar_2039)grab_executor(food_sugar_2039)walk_executor(cup_2063)put_executor(food_sugar_2039, cup_2063)
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the coffe_maker_290. Robot is close to the cup_2063. 
##############################
From agent.py
put_executor(milk_2043, cup_2063)
Robot find: Robot is close to the milk_2043. Robot is close to the coffe_maker_290. Robot is close to the cup_2063. milk_2043 is close cup_2063. cup_2063 is close milk_2043. milk_2043 is on cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_sugar_2039)
Robot find: Robot is close to the fridge_289. Robot is close to the food_sugar_2039. 
##############################
From agent.py
grab_executor(food_sugar_2039)
Robot find: Robot is close to the fridge_289. Robot is close to the food_sugar_2039. Grabbing food_sugar_2039 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the coffe_maker_290. Robot is close to the cup_2063. 
##############################
From agent.py
put_executor(food_sugar_2039, cup_2063)
Robot find: Robot is close to the food_sugar_2039. Robot is close to the coffe_maker_290. Robot is close to the cup_2063. cup_2063 is close food_sugar_2039. food_sugar_2039 is close cup_2063. food_sugar_2039 is on cup_2063. food_sugar_2039 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
make a cup of coffee using the coffee maker, then add milk and sugar.
Action History:
['walk_executor(table_355)', 'walk_executor(closetdrawer_146)', 'walk_executor(closetdrawer_146)', 'walk_executor(closetdrawer_146)', 'walk_executor(closetdrawer_146)', 'walk_executor(closetdrawer_146)', 'walk_executor(kitchen_counter_230)', 'walk_executor(cup_2063)', 'grab_executor(cup_2063)', 'walk_executor(coffe_maker_290)', 'put_executor(cup_2063, coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(milk_2043)', 'walk_executor(cup_2063)', 'put_executor(milk_2043, cup_2063)', 'walk_executor(food_sugar_2039)', 'grab_executor(food_sugar_2039)', 'walk_executor(cup_2063)', 'put_executor(food_sugar_2039, cup_2063)']
Time info:
Time consume: 300 seconds
Exp_helper query times: 1
Guidance query times: 1
library scale: 0
goal generate times: 9
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 16 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
