From agent.py
Reset goals: The sub-goals are: 
['Boil some vegetables with pot. Then store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_turkey_2040_around_kitchen_counter_230(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_turkey,kitchen_counter_instance)
        else:
            exp(food_turkey,kitchen_counter_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_turkey]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve inside(pot, stove)
        achieve is_on(stove)
        # Ensure the stove is on to boil the vegetables

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve inside(pot, fridge)
        achieve closed(fridge)
        # Store the pot in the fridge and ensure the fridge is closed

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot from the items
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge
        boil_vegetables(pot, stove)
        # Boil the vegetables using the stove
        store_pot_in_fridge(pot, fridge)
        # Store the pot in the fridge after boiling

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_kitchen_counter_230(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_stove_2065(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_onion,stove_instance)
        else:
            exp(food_onion,stove_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stove_instance]=True
        close[stove_instance,food_onion]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve inside(food_vegetable, pot)
        # Place the vegetables inside the pot
        
        achieve close_char(char, stove)
        # Move character close to the stove
        
        achieve is_on(stove)
        # Turn on the stove to start boiling vegetables

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve inside(pot, fridge)
        # Place the pot inside the fridge

        achieve closed(fridge)
        # Ensure that the fridge door is closed after placing the pot inside

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge
        
        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)
        # Select a vegetable

        boil_vegetables(pot, stove)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_stove_2065(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_carrot,stove_instance)
        else:
            exp(food_carrot,stove_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,stove_instance]=True
        close[stove_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_stove_2065(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_vegetable,stove_instance)
        else:
            exp(food_vegetable,stove_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,stove_instance]=True
        close[stove_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_stove_2065(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_onion,stove_instance)
        else:
            exp(food_onion,stove_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stove_instance]=True
        close[stove_instance,food_onion]=True
    

behavior find_food_potato_2035_around_kitchen_counter_230(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_stove():
    # Check if there is a stove available for cooking the vegetables
    symbol has_stove=exists stove: item : is_stove(stove)
    return has_stove

def has_fridge():
    # Check if there is a fridge available to store the pot
    symbol has_fridge=exists fridge: item : is_fridge(fridge)
    return has_fridge

behavior boil_vegetables(pot:item):
    body:
        if has_stove():
            bind stove: item where:
                is_stove(stove)
            achieve has_water(pot)
            # Ensure the pot has water, essential for boiling
            achieve on(pot, stove)
            # Place the pot on the stove

            achieve is_on(stove)
            # Turn on the stove to start boiling

        else:
            # If no stove is found, exploration is needed to locate one
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Check if this is a working stove")

behavior store_pot_in_fridge(pot:item):
    body:
        if has_fridge():
            bind fridge: item where:
                is_fridge(fridge)
            achieve inside(pot, fridge)
            # Transfer the pot with boiled vegetables into the fridge

            achieve closed(fridge)
            # Ensure the fridge is closed after storing the pot
        else:
            # If no fridge is found, exploration is needed to locate one
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Check if this is a functional fridge")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling vegetables

        foreach vegetable: item:
            if is_food_vegetable(vegetable):
                boil_vegetables(pot)
                # Boil the vegetables using the pot
        
        store_pot_in_fridge(pot)
        # Store the pot with boiled vegetables in the fridge

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_stove_2065(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_carrot,stove_instance)
        else:
            exp(food_carrot,stove_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,stove_instance]=True
        close[stove_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot contains water
        achieve is_on(pot)
        # Turn on the pot to boil

behavior store_in_fridge(pot:item, fridge:item):
    body:
        achieve inside(pot, fridge)
        # Store the whole pot inside the fridge

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        boil_vegetables(pot)
        store_in_fridge(pot, fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_stove_2065(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_carrot,stove_instance)
        else:
            exp(food_carrot,stove_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,stove_instance]=True
        close[stove_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_stove_2065(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_onion,stove_instance)
        else:
            exp(food_onion,stove_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stove_instance]=True
        close[stove_instance,food_onion]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables_with_pot(vegetables:item, pot:item, stove:item):
    body:
        achieve inside(vegetables, pot) # Put vegetables inside the pot
        achieve close(vegetables, stove) # Move the pot close to the stove
        bind burner: item where:
            is_stove(burner) and close(burner, stove) 
        achieve is_on(burner) # Turn on the stove to start boiling
        achieve has_water(pot) # Ensure there is water in the pot for boiling
        # Assuming boiling involves letting the pot sit on the stove for a while 
        # This achieve is for illustrative purposes
        # Rest of boiling process is managed independently

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve inside(pot, fridge) # Place the pot inside the fridge
        achieve closed(fridge) # Close the fridge door after placing the pot inside

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind stove: item where:
            is_stove(stove)
        
        bind fridge: item where:
            is_fridge(fridge)

        boil_vegetables_with_pot(vegetables, pot, stove)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_stove_2065(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_onion,stove_instance)
        else:
            exp(food_onion,stove_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stove_instance]=True
        close[stove_instance,food_onion]=True
    

behavior find_food_potato_2035_around_stove_2065(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_potato,stove_instance)
        else:
            exp(food_potato,stove_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,stove_instance]=True
        close[stove_instance,food_potato]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables_with_pot(vegetables:item, pot:item, stove:item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot
        achieve on(pot, stove)
        # Ensure the pot is on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve inside(pot, fridge)
        # Place the pot inside the fridge

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        boil_vegetables_with_pot(vegetables, pot, stove)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil some vegetables with pot. then store the whole pot in the fridge." ?
Answer: Wash vegetables. Fill a pot with water. Put the pot on the stove. Turn on the stove. Put the vegetables inside the pot. Then turn off the stove. Put the pot in the fridge.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_cupboard_229(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetable:item, sink:item):
    body:
        achieve inside(vegetable, sink)
        # Ensure the vegetable is inside the sink

        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet if its close to the sink

        wash(vegetable)  # Wash the vegetable

        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior boil_vegetables(pot:item, stove:item, vegetable:item):
    body:
        achieve has_water(pot)
        # Ensure there is water in the pot

        achieve on(pot, stove)
        # Ensure the pot is on the stove

        achieve is_on(stove)
        # Turn on the stove

        achieve inside(vegetable, pot)
        # Put the vegetable inside the pot to boil

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve inside(pot, fridge)
        # Store the pot inside the fridge

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)

        bind sink: item where:
            is_sink(sink)
        # Select a sink to wash the vegetables

        bind pot: item where:
            is_pot(pot)
        # Choose the pot to boil the vegetables

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables to boil

        bind fridge: item where:
            is_fridge(fridge)
        # Identify the fridge to store the pot

        wash_vegetables(vegetable, sink)
        boil_vegetables(pot, stove, vegetable)
        achieve is_off(stove) # Ensure the stove is turned off
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_stove_2065(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_carrot,stove_instance)
        else:
            exp(food_carrot,stove_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,stove_instance]=True
        close[stove_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_cupboard_229(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_and_boil_vegetables(vegetable:item, pot:item, stove:item):
    body:
        wash(vegetable)
        achieve has_water(pot)
        achieve inside(vegetable, pot)
        achieve on(pot, stove)
        achieve_once is_on(stove)
        achieve_once is_off(stove)

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve open(fridge)
        achieve inside(pot, fridge)
        achieve closed(fridge)

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind fridge: item where:
            is_fridge(fridge)
        
        clean_and_boil_vegetables(vegetable, pot, stove)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_stove_2065(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_carrot,stove_instance)
        else:
            exp(food_carrot,stove_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,stove_instance]=True
        close[stove_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_drawing_175_around_bookshelf_233(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(drawing,bookshelf_instance)
        else:
            exp(drawing,bookshelf_instance)
    eff:
        unknown[drawing]=False
        close[drawing,bookshelf_instance]=True
        close[bookshelf_instance,drawing]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_vegetables_in_pot(pot:item):
    # Check if there are vegetables in the pot
    symbol has_vegetables=exists o: item : is_food_vegetable(o) and inside(o, pot)
    return has_vegetables

def has_stove(kitchen:item):
    # Determine if a kitchen has a stove
    symbol has_stove=exists stove: item : is_stove(stove) and inside(stove, kitchen)
    return has_stove

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        achieve has_water(pot)
        achieve inside(vegetables, pot)
        achieve on(pot, stove)
        achieve_once is_on(stove)
        # Boiling the vegetables
        achieve is_off(stove)

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve inside(pot, fridge)
        # Store the entire pot in the fridge

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_vegetables_in_pot(pot)
        # Select a pot with vegetables

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        bind kitchen: item where:
            is_kitchen(kitchen)
        # Determine if the current environment is a kitchen

        if has_stove(kitchen):
            bind stove: item where:
                is_stove(stove) and inside(stove, kitchen)
            # Select a stove in the kitchen
            
            bind vegetables: item where:
                is_food_vegetable(vegetables) and inside(vegetables, pot)
            # Ensure vegetables are inside the pot

            boil_vegetables(pot, stove, vegetables)
            store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_on_stove(pot:item):
    # Determine if the pot is on the stove
    symbol on_stove=exists stove:item: is_stove(stove) and on(pot, stove)
    return on_stove

behavior clean_vegetables(vegetables:item, sink:item):
    body:
        achieve inside(vegetables, sink)
        # Place vegetables inside the sink for cleaning
        
        if is_sink(sink):
            # Check if theres a faucet close to the sink
            assert has_faucet(sink)
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
        
        wash(vegetables)  # Wash the vegetables
        
        if is_sink(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior cook_vegetables_in_pot(pot:item, vegetables:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water
        achieve inside(vegetables, pot)
        # Place vegetables inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        if has_switch(stove):
            achieve_once is_on(stove)
            # Turn on the stove to start boiling vegetables
            achieve is_on_stove(pot)
            # Maintain the pot on the stove while boiling
            # The stove should remain on until boiling vegetables is complete

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve inside(pot, fridge)
        # Store the whole pot inside the fridge

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select food categorized as vegetables
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge

        clean_vegetables(vegetables, sink)  # Clean the vegetables in the sink
        cook_vegetables_in_pot(pot, vegetables, stove)  # Cook vegetables in the pot with stove
        store_pot_in_fridge(pot, fridge)  # Store the pot with cooked vegetables in the fridge

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_fridge_289(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_fridge_289(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_onion_2032_around_cupboard_229(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_stove_present():
    # Check if there is a stove present
    symbol has_stove=exists stove: item : is_stove(stove)
    return has_stove

def is_fridge_present():
    # Check if there is a fridge present
    symbol has_fridge=exists fridge: item : is_fridge(fridge)
    return has_fridge

behavior wash_vegetables(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink
        
        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on

        wash(vegetable) # Wash the vegetable

        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_vegetables(vegetable:item, pot:item, stove:item):
    body:
        achieve inside(vegetable, pot)
        # Put vegetables inside the pot
        
        achieve on(pot, stove)
        # Place the pot on the stove
        
        achieve_once is_on(stove)
        # Turn on the stove to boil the vegetables
        
        achieve_once is_off(stove)
        # Turn off the stove after boiling

behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve inside(pot, fridge)
        # Store the pot inside the fridge

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Retrieve a vegetable
        bind pot: item where:
            is_pot(pot)
        # Retrieve a pot
        bind sink: item where:
            is_sink(sink)
        # Retrieve a sink
        bind stove: item where:
            is_stove(stove)
        # Retrieve a stove
        bind fridge: item where:
            is_fridge(fridge)
        # Retrieve a fridge

        assert is_stove_present() # Ensure a stove is present
        assert is_fridge_present() # Ensure a fridge is present

        wash_vegetables(vegetable, sink)
        fill_pot_with_water(pot, sink)
        boil_vegetables(vegetable, pot, stove)
        store_pot_in_fridge(pot, fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2014_around_stove_2065(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_carrot,stove_instance)
        else:
            exp(food_carrot,stove_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,stove_instance]=True
        close[stove_instance,food_carrot]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_drawing_238_around_fridge_289(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(drawing,fridge_instance)
        else:
            exp(drawing,fridge_instance)
    eff:
        unknown[drawing]=False
        close[drawing,fridge_instance]=True
        close[fridge_instance,drawing]=True
    

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_pot_2069_around_fridge_289(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(pot,fridge_instance)
        else:
            exp(pot,fridge_instance)
    eff:
        unknown[pot]=False
        close[pot,fridge_instance]=True
        close[fridge_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_vegetable_unboiled(vegetable:item):
    # Function to check if there is unboiled vegetable
    symbol unboiled = exists o: item : is_food_vegetable(o)
    return unboiled

behavior wash_vegetables(vegetable:item, sink:item):
    # Define the behavior to wash vegetables in the sink
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to clean
        
        wash(vegetable) # Wash the vegetable
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # If the sink has a faucet, turn it off after cleaning

behavior fill_pot_with_water(pot:item):
    # Define the behavior to fill the pot with water
    body:
        achieve has_water(pot) # Add water to the pot

behavior boil_vegetables(pot:item, stove:item):
    # Define the behavior to boil vegetables in the pot
    body:
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove
        achieve_once inside(pot, stove)
        # Ensure the pot remains on the stove while the stove is on

        achieve_once is_off(stove) # Turn off the stove once vegetables are boiled

behavior store_pot_in_fridge(pot:item, fridge:item):
    # Define the behavior to store the pot in the fridge
    body:
        achieve inside(pot, fridge) # Place the pot inside the fridge

behavior __goal__():
    body:
        if is_food_vegetable_unboiled():
            # If unboiled vegetables are detected
            foreach vegetable: item:
                if is_food_vegetable(vegetable):
                    bind sink: item where:
                        is_sink(sink)
                    # Select a sink
                    wash_vegetables(vegetable, sink) # Wash vegetables

            bind pot: item where:
                is_pot(pot)
            # Select a pot

            fill_pot_with_water(pot) # Fill the pot with water

            bind stove: item where:
                is_stove(stove)
            # Select a stove

            boil_vegetables(pot, stove) # Boil the washed vegetables

            bind fridge: item where:
                is_fridge(fridge)
            # Select a fridge

            store_pot_in_fridge(pot, fridge) # Store the pot in the fridge

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: Error during problem transformation
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 285 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 12
goal correct times: 0

Task complete rate:
Keystate: k1 - Requires: 16 steps
Keystate: k2 - Requires: 17 steps
Keystate: k3 - Requires: 12 steps
Action Completion Rate: 0.0
Scene_id: 0
##############################
