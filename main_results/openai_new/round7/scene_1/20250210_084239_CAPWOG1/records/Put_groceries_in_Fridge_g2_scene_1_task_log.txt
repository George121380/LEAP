From agent.py
Reset goals: The sub-goals are: 
['1. Wash the fish.', '2. Find a table in the dining room.', '3. Put the milk, turkey, eggs, fish, and chicken on the table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_sink_120(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_fish,sink_instance)
        else:
            exp(food_fish,sink_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,sink_instance]=True
        close[sink_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_the_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish) # Wash the fish

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select a fish item
        wash_the_fish(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_sink_120(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_fish,sink_instance)
        else:
            exp(food_fish,sink_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,sink_instance]=True
        close[sink_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_the_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish to be washed
        wash_the_fish(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_sink_120(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_fish,sink_instance)
        else:
            exp(food_fish,sink_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,sink_instance]=True
        close[sink_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and dirty(fish)
        wash_fish(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_sink_120(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_fish,sink_instance)
        else:
            exp(food_fish,sink_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,sink_instance]=True
        close[sink_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish)
            # Wash the fish if it is dirty

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        wash_fish(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_sink_120(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_fish,sink_instance)
        else:
            exp(food_fish,sink_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,sink_instance]=True
        close[sink_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation

bind fish: item where:
    is_food_fish(fish)

behavior wash_fish(fish: item):
    body:
        if dirty(fish):
            wash(fish)

behavior __goal__():
    body:
        wash_fish(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_kitchen_counter_122(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item
        if dirty(fish):
            wash(fish)
        # Wash the fish if it is dirty

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Wash the fish.', '2. Put milk, turkey, eggs, fish, and chicken on one of the tables in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_kitchen_counter_122(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish item
        wash_fish(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_kitchen_counter_122(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        clean_fish(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_kitchen_counter_122(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_the_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        wash_the_fish(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_sink_120(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_fish,sink_instance)
        else:
            exp(food_fish,sink_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,sink_instance]=True
        close[sink_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Find any fish item that needs to be washed
        if dirty(fish):
            # If the fish is dirty, proceed to wash it
            wash(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_sink_120(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_fish,sink_instance)
        else:
            exp(food_fish,sink_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,sink_instance]=True
        close[sink_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_the_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        wash_the_fish(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_kitchen_counter_122(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation

behavior wash_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish) # Wash the fish if it is dirty

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        wash_fish(fish)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Wash the fish.', '2. Place milk, turkey, eggs, fish, and chicken on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_sink_120(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_fish,sink_instance)
        else:
            exp(food_fish,sink_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,sink_instance]=True
        close[sink_instance,food_fish]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_plate_2152_around_sink_120(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(plate,sink_instance)
        else:
            exp(plate,sink_instance)
    eff:
        unknown[plate]=False
        close[plate,sink_instance]=True
        close[sink_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        wash_fish(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_kitchen_counter_122(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

behavior find_shampoo_2019_around_bathroom_cabinet_17(shampoo:item):
    goal: not unknown(shampoo)
    body:
        assert is_shampoo(shampoo)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(shampoo,bathroom_cabinet_instance)
        else:
            exp(shampoo,bathroom_cabinet_instance)
    eff:
        unknown[shampoo]=False
        close[shampoo,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,shampoo]=True
    

behavior find_soap_2125_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Identifying the fish that needs to be washed
        if dirty(fish):
            wash(fish) 
            # Wash the fish if its dirty

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_kitchen_counter_122(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Find a fish item to wash
        wash_fish(fish)
        # Execute the washing behavior on the fish

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_kitchen_counter_122(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish to be washed
        wash_fish(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_faucet_121(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(food_fish,faucet_instance)
        else:
            exp(food_fish,faucet_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,faucet_instance]=True
        close[faucet_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and dirty(fish)
        walk_to(fish)
        wash(fish)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fish_2093_around_sink_120(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_fish,sink_instance)
        else:
            exp(food_fish,sink_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,sink_instance]=True
        close[sink_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fish(fish:item):
    body:
        if dirty(fish):
            wash(fish)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        wash_fish(fish)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Wash the fish at first. Then put milk, turkey, eggs, fish and chicken on one of the table in dining room.
Action History:
[]
Time info:
Time consume: 142 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 18
goal correct times: 0
action_num: 0

Task complete rate:
Keystate: k1 - Requires: 7 steps
Keystate: k2 - Requires: 19 steps
Action Completion Rate: 0.0
Scene_id: 1
##############################
