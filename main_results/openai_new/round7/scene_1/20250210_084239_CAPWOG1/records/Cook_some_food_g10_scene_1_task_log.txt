From agent.py
Reset goals: The sub-goals are: 
['1. Find the noodles and chicken in the kitchen.', '2. Boil the noodles and chicken together in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_noodles_2101_around_cupboard_118(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_noodles,cupboard_instance)
        else:
            exp(food_noodles,cupboard_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,cupboard_instance]=True
        close[cupboard_instance,food_noodles]=True
    

behavior find_food_chicken_2089_around_cupboard_118(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_chicken,cupboard_instance)
        else:
            exp(food_chicken,cupboard_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,cupboard_instance]=True
        close[cupboard_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def locate_noodles_and_chicken():
    # Function to find the location of noodles and chicken
    foreach o: item:
        if is_food_noodles(o) or is_food_chicken(o):
            observe(o, "Check if item is noodles or chicken and its location in the kitchen")

behavior __goal__():
    body:
        locate_noodles_and_chicken()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_noodles_2101_around_cupboard_117(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_noodles,cupboard_instance)
        else:
            exp(food_noodles,cupboard_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,cupboard_instance]=True
        close[cupboard_instance,food_noodles]=True
    

behavior find_food_chicken_2089_around_cupboard_118(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_chicken,cupboard_instance)
        else:
            exp(food_chicken,cupboard_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,cupboard_instance]=True
        close[cupboard_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def in_kitchen(o: item):
    # Function to check if an item is located in the kitchen
    symbol in_kitchen=exists room: item : (is_kitchen(room) and inside(o, room))
    return in_kitchen

behavior find_noodles_and_chicken():
    # Find noodles and chicken in the kitchen
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        
        if not visited(kitchen):
            observe(kitchen, "Looking for noodles and chicken on or inside the kitchen counter")
        
        foreach item: item:
            if is_food_noodles(item) and not visited(item):
                observe(item, "Found noodles")
            if is_food_chicken(item) and not visited(item):
                observe(item, "Found chicken")

behavior __goal__():
    body:
        find_noodles_and_chicken()

#goal_representation_end

##############################
From agent.py->reset_goal
 
def in_kitchen(o: item):
    # Function to check if an item is located in the kitchen
    symbol in_kitchen=exists room: item : (is_kitchen(room) and inside(o, room))
    return in_kitchen

behavior find_noodles_and_chicken():
    # Find noodles and chicken in the kitchen
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        
        if not visited(kitchen):
            observe(kitchen, "Looking for noodles and chicken on or inside the kitchen counter")
        
        foreach item: item:
            if is_food_noodles(item) and not visited(item):
                observe(item, "Found noodles")
            if is_food_chicken(item) and not visited(item):
                observe(item, "Found chicken")

behavior __goal__():
    body:
        find_noodles_and_chicken()

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)obs(kitchen_counter_119, Looking for noodles and chicken on or inside the kitchen counter)walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_chicken_2089, cupboard_118)walk_executor(food_chicken_2089)obs(food_chicken_2089, Found chicken)walk_executor(cupboard_117)exp(food_noodles_2101, cupboard_117)walk_executor(food_noodles_2101)obs(food_noodles_2101, Found noodles)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
obs(kitchen_counter_119, Looking for noodles and chicken on or inside the kitchen counter)
Get this information:  kitchen_counter_119 is inside dining_room_41. food_salt_2041 is on kitchen_counter_119. fork_2150 is on kitchen_counter_119. faucet_121 is on kitchen_counter_119. cutting_board_2123 is on kitchen_counter_119. kitchen_counter_119 is close to tray_128. kitchen_counter_119 is close to walllamp_140. kitchen_counter_119 is close to walllamp_141. kitchen_counter_119 is close to food_salt_2041. kitchen_counter_119 is close to floor_45. kitchen_counter_119 is close to floor_46. kitchen_counter_119 is close to wall_64. kitchen_counter_119 is close to desk_193. kitchen_counter_119 is close to wall_67. kitchen_counter_119 is close to cutting_board_2123. kitchen_counter_119 is close to knifeblock_76. kitchen_counter_119 is close to pot_78. kitchen_counter_119 is close to cpuscreen_210. kitchen_counter_119 is close to stove_2135. kitchen_counter_119 is close to pot_2138. kitchen_counter_119 is close to bowl_2140. kitchen_counter_119 is close to bowl_2141. kitchen_counter_119 is close to bowl_2142. kitchen_counter_119 is close to fork_2150. kitchen_counter_119 is close to fork_2151. kitchen_counter_119 is close to plate_2152. kitchen_counter_119 is close to cupboard_117. kitchen_counter_119 is close to sink_120. kitchen_counter_119 is close to faucet_121. kitchen_counter_119 is close to kitchen_counter_123. kitchen_counter_119 is close to stovefan_125. kitchen_counter_119 is close to oven_127. kitchen_counter_119 is close to character_240. bowl_2142 is on kitchen_counter_119. sink_120 is inside kitchen_counter_119. bowl_2140 is on kitchen_counter_119. fork_2151 is on kitchen_counter_119. stove_2135 is on kitchen_counter_119. pot_2138 is on kitchen_counter_119. bowl_2141 is on kitchen_counter_119. plate_2152 is on kitchen_counter_119. kitchen_counter_119 is CLEAN. kitchen_counter_119 is OPEN.
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(food_chicken_2089, cupboard_118)
Fail to find food_chicken_2089 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)obs(food_chicken_2089, Found chicken)walk_executor(cupboard_117)exp(food_noodles_2101, cupboard_117)walk_executor(food_noodles_2101)obs(food_noodles_2101, Found noodles)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_chicken_2089, fridge_126)
Find food_chicken_2089. 
##############################
From agent.py-> find a plan in act()
obs(food_chicken_2089, Found chicken)obs(food_noodles_2101, Found noodles)
##############################
From agent.py
obs(food_chicken_2089, Found chicken)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_chicken_2089 is close to fridge_126. food_chicken_2089 is close to character_240. food_chicken_2089 is CLEAN.
##############################
From agent.py
obs(food_noodles_2101, Found noodles)
Get this information:  food_noodles_2101 is close to fridge_126. food_noodles_2101 is close to character_240. food_noodles_2101 is inside dining_room_41. food_noodles_2101 is inside fridge_126. food_noodles_2101 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_coffee_filter_2065_around_coffe_maker_130(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==130
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(coffee_filter,coffe_maker_instance)
        else:
            exp(coffee_filter,coffe_maker_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffe_maker_instance]=True
        close[coffe_maker_instance,coffee_filter]=True
    

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior get_items_ready_for_boiling(noodles:item, chicken:item, pot:item):
    body:
        if not inhand(noodles) and has_a_free_hand(char):
            grab(noodles)
            put_inside(noodles, pot)
            empty_a_hand() # To ensure a free hand for the next item
        if not inhand(chicken):
            grab(chicken)
            put_inside(chicken, pot)
            empty_a_hand() 

behavior add_water_to_pot(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior prepare_pot_for_boiling(stove:item, pot:item):
    body:
        if is_off(stove):
            switch_on(stove) # Turn on the stove if its off
        put_on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)

        get_items_ready_for_boiling(noodles, chicken, pot)
        add_water_to_pot(pot)
        prepare_pot_for_boiling(stove, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_noodles_and_chicken(noodles:item, chicken:item):
    body:
        if not inhand(noodles):
            grab(noodles)
        if not inhand(chicken):
            grab(chicken)

behavior put_noodles_and_chicken_in_pot(noodles:item, chicken:item, pot:item):
    body:
        if not inside(noodles, pot):
            put_inside(noodles, pot)
        if not inside(chicken, pot):
            put_inside(chicken, pot)

behavior add_water_to_pot(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior boil_noodles_and_chicken(pot:item):
    body:
        if on(pot, stove):
            switch_on(stove) # Assuming there is a predefined stove in the kitchen

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind pot: item where:
            is_pot(pot)

        grab_noodles_and_chicken(noodles, chicken)
        put_noodles_and_chicken_in_pot(noodles, chicken, pot)
        add_water_to_pot(pot)
        boil_noodles_and_chicken(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_noodles_and_chicken(noodles:item, chicken:item):
    body:
        if not inhand(noodles):
            grab(noodles)
        if has_a_free_hand(char) and not inhand(chicken):
            grab(chicken)

behavior boil_noodles_and_chicken(noodles:item, chicken:item, pot:item):
    body:
        if not inside(noodles, pot):
            put_inside(noodles, pot)
        if not inside(chicken, pot):
            put_inside(chicken, pot)
        if not has_water(pot):
            get_water(pot)
        # Assuming theres a stove to heat the pot
        symbol have_stove=exists stove: item: (is_stove(stove))
        if have_stove:
            # Logic to boil the contents of the pot goes here, assuming the pot is heatable on a stove
            mark_pot_boiled(pot)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind pot: item where:
            is_pot(pot)

        grab_noodles_and_chicken(noodles, chicken)
        boil_noodles_and_chicken(noodles, chicken, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_oven_127(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(pot,oven_instance)
        else:
            exp(pot,oven_instance)
    eff:
        unknown[pot]=False
        close[pot,oven_instance]=True
        close[oven_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_items(food_noodles:item, food_chicken:item):
    body:
        if not inhand(food_noodles):
            grab(food_noodles)
        if not inhand(food_chicken) and has_a_free_hand(char):
            grab(food_chicken)

behavior walk_to_stove():
    body:
        bind stove: item where:
            is_stove(stove)
        walk_to(stove)

behavior prepare_pot_on_stove(food_noodles:item, food_chicken:item):
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        put_on(food_noodles, pot)
        put_on(food_chicken, pot)
        get_water(pot)
        put_on(pot, stove)

behavior boil_pot():
    body:
        bind stove: item where:
            is_stove(stove)
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        if is_off(stove):
            switch_on(stove)

behavior empty_hands():
    body:
        if not has_a_free_hand(char):
            empty_a_hand()

behavior __goal__():
    body:
        bind food_noodles: item where:
            is_food_noodles(food_noodles)
        bind food_chicken: item where:
            is_food_chicken(food_chicken)

        empty_hands()
        grab_items(food_noodles, food_chicken)
        walk_to_stove()
        prepare_pot_on_stove(food_noodles, food_chicken)
        boil_pot()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_noodles_and_chicken(pot:item, stove:item):
    body:
        if not has_water(pot):
            get_water(pot) # Fill the pot with water
        if not inside(food_noodles, pot):
            put_inside(food_noodles, pot) # Add noodles to the pot
        if not inside(food_chicken, pot):
            put_inside(food_chicken, pot) # Add chicken to the pot
        if is_off(stove):
            switch_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind food_noodles: item where:
            is_food_noodles(food_noodles)
        # Select noodles

        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select chicken

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_noodles_and_chicken(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_wooden_spoon_2000_around_pot_78(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(wooden_spoon,pot_instance)
        else:
            exp(wooden_spoon,pot_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,pot_instance]=True
        close[pot_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_pot(pot:item):
    # Function to check if a pot has water in it
    return has_water(pot)

def in_kitchen(item:item):
    # Function to check if an item is in the kitchen
    symbol in_kitchen=exists room: item: (is_kitchen(room) and inside(item, room))
    return in_kitchen

behavior boil_noodles_chicken(pot:item, noodles:item, chicken:item):
    body:
        if not has_water_pot(pot):
            get_water(pot) # Add water to the pot
        if open(pot):
            closes(pot) # Close the pot to start boiling
        if not inside(noodles, pot):
            put_inside(noodles, pot) # Add noodles to the pot
        if not inside(chicken, pot):
            put_inside(chicken, pot) # Add chicken to the pot
        if is_off(pot):
            switch_on(pot) # Switch on the heat to start boiling

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        bind pot: item where:
            is_pot(pot) and in_kitchen(pot)
        # Select a pot in the kitchen
        boil_noodles_chicken(pot, noodles, chicken)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_119)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)']
Time info:
Time consume: 126 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 8
goal correct times: 0
action_num: 6

Task complete rate:
Keystate: k1 - Requires: 24 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
