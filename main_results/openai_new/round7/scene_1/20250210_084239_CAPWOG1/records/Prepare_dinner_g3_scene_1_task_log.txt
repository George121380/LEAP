From agent.py
Reset goals: The sub-goals are: 
['Cook the bacon using the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_cupboard_118(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_food_hamburger_2096_around_fridge_126(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_food_bacon_2082_around_fridge_126(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

#exp_behavior_end

#goal_representation
 
def is_frying_pan_on_stove(frying_pan:item, stove:item):
    # Check if the frying pan is on the stove
    symbol on_stove=exists o: item : (is_fryingpan(o) and on(o, stove))
    return on_stove

def has_bacon_in_pan(frying_pan:item):
    # Check if there is bacon in the frying pan
    symbol has_bacon=exists o: item : (is_food_bacon(o) and inside(o, frying_pan))
    return has_bacon

behavior cook_bacon(frying_pan:item, stove:item):
    body:
        if is_off(stove):
            switch_on(stove) # Turn on the stove to start cooking

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan) and surfaces(frying_pan)
        # Select a frying pan that is a surface (can hold things)
        
        bind stove: item where:
            is_stove(stove) and surfaces(stove)
        # Select a stove that is a surface

        if not is_frying_pan_on_stove(frying_pan, stove):
            put_on(frying_pan, stove) # Place the frying pan on the stove if not already there

        if not has_bacon_in_pan(frying_pan):
            bind bacon: item where:
                is_food_bacon(bacon)
            put_inside(bacon, frying_pan) # Place bacon in the frying pan if not already there

        cook_bacon(frying_pan, stove) # Start cooking bacon if all conditions are met

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_cupboard_118(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_food_bacon_2082_around_fridge_126(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

#exp_behavior_end

#goal_representation

def is_bacon(c:item):
    # Function to check if a given item is bacon
    return is_food_bacon(c)

behavior cook_bacon(bacon:item, fryingpan:item):
    body:
        if not inside(bacon, fryingpan):
            put_on(bacon, fryingpan)
            # Place the bacon on the frying pan

behavior heat_fryingpan(fryingpan:item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan)
            # Turn on the frying pan

behavior __goal__():
    body:
        bind bacon: item where:
            is_bacon(bacon)
        # Bind an instance of bacon

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind an instance of a frying pan

        cook_bacon(bacon, fryingpan)
        heat_fryingpan(fryingpan)

#goal_representation_end

##############################
From agent.py->reset_goal

def is_bacon(c:item):
    # Function to check if a given item is bacon
    return is_food_bacon(c)

behavior cook_bacon(bacon:item, fryingpan:item):
    body:
        if not inside(bacon, fryingpan):
            put_on(bacon, fryingpan)
            # Place the bacon on the frying pan

behavior heat_fryingpan(fryingpan:item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan)
            # Turn on the frying pan

behavior __goal__():
    body:
        bind bacon: item where:
            is_bacon(bacon)
        # Bind an instance of bacon

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind an instance of a frying pan

        cook_bacon(bacon, fryingpan)
        heat_fryingpan(fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(fryingpan_2154, cupboard_118)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bacon_2082, fridge_126)walk_executor(food_bacon_2082)grab_executor(food_bacon_2082)walk_executor(fryingpan_2154)put_executor(food_bacon_2082, fryingpan_2154)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: pot_78, Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_118)
Fail to find fryingpan_2154 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(fryingpan_2154, cupboard_117)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bacon_2082, fridge_126)walk_executor(food_bacon_2082)grab_executor(food_bacon_2082)walk_executor(fryingpan_2154)put_executor(food_bacon_2082, fryingpan_2154)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_117)
Fail to find fryingpan_2154 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_127)open_executor(oven_127)exp(fryingpan_2154, oven_127)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bacon_2082, fridge_126)walk_executor(food_bacon_2082)grab_executor(food_bacon_2082)walk_executor(fryingpan_2154)put_executor(food_bacon_2082, fryingpan_2154)
##############################
From agent.py
walk_executor(oven_127)
Robot find: food_food_2064, Robot is close to the oven_127. 
##############################
From agent.py
open_executor(oven_127)
Robot find: tray_128, food_cheese_2072, oil_2013, food_carrot_2015, Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. oven_127 is opened. 
##############################
From agent.py
exp(fryingpan_2154, oven_127)
Fail to find fryingpan_2154 around oven_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(fryingpan_2154, stove_2135)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bacon_2082, fridge_126)walk_executor(food_bacon_2082)grab_executor(food_bacon_2082)walk_executor(fryingpan_2154)put_executor(food_bacon_2082, fryingpan_2154)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
exp(fryingpan_2154, stove_2135)
Fail to find fryingpan_2154 around stove_2135. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bacon_2082, fridge_126)walk_executor(food_bacon_2082)grab_executor(food_bacon_2082)walk_executor(fryingpan_2154)put_executor(food_bacon_2082, fryingpan_2154)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bacon_2082, fridge_126)walk_executor(food_bacon_2082)grab_executor(food_bacon_2082)walk_executor(fryingpan_2154)put_executor(food_bacon_2082, fryingpan_2154)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_bacon_2082, fridge_126)
Find food_bacon_2082. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_bacon_2082)walk_executor(fryingpan_2154)put_executor(food_bacon_2082, fryingpan_2154)
##############################
From agent.py
grab_executor(food_bacon_2082)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_bacon_2082 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_bacon_2082. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
put_executor(food_bacon_2082, fryingpan_2154)
Robot find: Robot is close to the food_bacon_2082. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. fryingpan_2154 is close food_bacon_2082. food_bacon_2082 is close fryingpan_2154. food_bacon_2082 is on fryingpan_2154. food_bacon_2082 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The bacon has been placed on the frying pan, but the frying pan has not been heated yet. You need to switch on the frying pan to cook the bacon.
##############################
From agent.py
Human Instruction: The bacon has been placed on the frying pan, but the frying pan has not been heated yet. You need to switch on the frying pan to cook the bacon.

The actions you have taken:
Action 1: Walk to cupboard_118.
Action 2: Open cupboard_118.
Action 3: look for fryingpan_2154 around cupboard_118.
Action 4: Walk to cupboard_117.
Action 5: look for fryingpan_2154 around cupboard_117.
Action 6: Walk to oven_127.
Action 7: Open oven_127.
Action 8: look for fryingpan_2154 around oven_127.
Action 9: Walk to stove_2135.
Action 10: Open stove_2135.
Action 11: look for fryingpan_2154 around stove_2135.
Action 12: Walk to kitchen_counter_122.
Action 13: look for fryingpan_2154 around kitchen_counter_122.
Action 14: Walk to fridge_126.
Action 15: Switch off fridge_126.
Action 16: Open fridge_126.
Action 17: look for food_bacon_2082 around fridge_126.
Action 18: Grab food_bacon_2082.
Action 19: Walk to fryingpan_2154.
Action 20: Put food_bacon_2082 on fryingpan_2154.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2117_around_dresser_274(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_hat,dresser_instance)
        else:
            exp(clothes_hat,dresser_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,dresser_instance]=True
        close[dresser_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation

behavior cook_bacon(fryingpan:item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        cook_bacon(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior cook_bacon(fryingpan: item):
    body:
        if not is_on(fryingpan):
            switch_on(fryingpan)
            # Turn on the frying pan to cook the bacon

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        cook_bacon(fryingpan)
        # Cook the bacon by turning on the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_bacon(fryingpan:item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan) # Turn on the frying pan to start cooking
    
behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        # Bind the bacon item
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Bind the frying pan item

        if on(bacon, fryingpan):
            cook_bacon(fryingpan)
            # Cook the bacon using the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior cook_bacon(fryingpan:item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan)
            # Turn on the frying pan to cook the bacon

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(food_bacon_2082, fryingpan)
        # Select frying pan with bacon on it
        cook_bacon(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior cook_bacon(fryingpan:item):
    body:
        if is_off(fryingpan):
            switch_on(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        cook_bacon(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_kitchen_counter_123(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_clothes_hat_2117_around_dresser_274(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_hat,dresser_instance)
        else:
            exp(clothes_hat,dresser_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,dresser_instance]=True
        close[dresser_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
def in_dining_room(fryingpan:item):
    # Function to check if the fryingpan is in the dining room
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(fryingpan, room))
    return in_dining_room

behavior start_cooking(fryingpan:item):
    body:
        if not is_on(fryingpan):
            switch_on(fryingpan) # Turn on the frying pan to start cooking

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and not visited(fryingpan)
        # Select the frying pan that hasnt been visited yet

        if not in_dining_room(fryingpan):
            walk_to(fryingpan)
            # Walk to the frying pan if its not in the dining room

        start_cooking(fryingpan)
        # Start the cooking process by turning on the frying pan

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(cupboard_117)', 'walk_executor(oven_127)', 'open_executor(oven_127)', 'walk_executor(stove_2135)', 'open_executor(stove_2135)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_bacon_2082)', 'walk_executor(fryingpan_2154)', 'put_executor(food_bacon_2082, fryingpan_2154)']
Time info:
Time consume: 132 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 8
goal correct times: 0
action_num: 14

Task complete rate:
Keystate: k1 - Requires: 10 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
