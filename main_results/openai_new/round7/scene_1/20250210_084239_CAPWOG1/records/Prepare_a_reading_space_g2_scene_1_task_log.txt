From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the table in the home office.', '2. Turn on the light in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2137_around_bookshelf_275(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book() :
    body:
        foreach book: item:
            if is_book(book) and not visited(book):
                observe(book, "Is this the desired book")

behavior place_book_on_table(book: item, table: item):
    body:
        if not on(book, table):
            put_on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind table: item where:
            is_table(table) and inside(table, home_office)

        find_book()

        bind book: item where:
            is_book(book) and not on(book, table)

        place_book_on_table(book, table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_book() :
    body:
        foreach book: item:
            if is_book(book) and not visited(book):
                observe(book, "Is this the desired book")

behavior place_book_on_table(book: item, table: item):
    body:
        if not on(book, table):
            put_on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind table: item where:
            is_table(table) and inside(table, home_office)

        find_book()

        bind book: item where:
            is_book(book) and not on(book, table)

        place_book_on_table(book, table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_275)exp(book_2136, bookshelf_275)walk_executor(book_2136)open_executor(book_2136)obs(book_2136, Is this the desired book)walk_executor(bookshelf_275)exp(book_2137, bookshelf_275)walk_executor(book_2137)open_executor(book_2137)obs(book_2137, Is this the desired book)grab_executor(book_2137)walk_executor(table_270)put_executor(book_2137, table_270)
##############################
From agent.py
walk_executor(bookshelf_275)
Robot find: pencil_2020, Robot is close to the bookshelf_275. 
##############################
From agent.py
exp(book_2136, bookshelf_275)
Fail to find book_2136 around bookshelf_275. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_124)open_executor(bookshelf_124)exp(book_2136, bookshelf_124)walk_executor(book_2136)open_executor(book_2136)obs(book_2136, Is this the desired book)walk_executor(bookshelf_124)exp(book_2137, bookshelf_124)walk_executor(book_2137)open_executor(book_2137)obs(book_2137, Is this the desired book)grab_executor(book_2137)walk_executor(table_270)put_executor(book_2137, table_270)
##############################
From agent.py
walk_executor(bookshelf_124)
Robot find: book_2136, envelope_2055, book_2137, drawing_110, drawing_111, Robot is close to the bookshelf_124. 
##############################
From agent.py
open_executor(bookshelf_124)
Robot find: Robot is close to the bookshelf_124. bookshelf_124 is opened. 
##############################
From agent.py
exp(book_2136, bookshelf_124)
Find book_2136. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2136)open_executor(book_2136)obs(book_2136, Is this the desired book)walk_executor(book_2137)open_executor(book_2137)obs(book_2137, Is this the desired book)grab_executor(book_2137)walk_executor(table_270)put_executor(book_2137, table_270)
##############################
From agent.py
walk_executor(book_2136)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2136. 
##############################
From agent.py
open_executor(book_2136)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2136. book_2136 is opened. 
##############################
From agent.py
obs(book_2136, Is this the desired book)
Get this information:  book_2136 is on bookshelf_124. book_2136 is inside dining_room_41. book_2136 is close to bookshelf_124. book_2136 is close to character_240. book_2136 is OPEN.
##############################
From agent.py
walk_executor(book_2137)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2137. 
##############################
From agent.py
open_executor(book_2137)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2137. book_2137 is opened. 
##############################
From agent.py
obs(book_2137, Is this the desired book)
Get this information:  book_2137 is inside dining_room_41. book_2137 is close to bookshelf_124. book_2137 is close to character_240. book_2137 is on bookshelf_124. book_2137 is OPEN.
##############################
From agent.py
grab_executor(book_2137)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2137. Grabbing book_2137 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the book_2137. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(book_2137, table_270)
Robot find: Robot is close to the book_2137. Robot is close to the couch_269. Robot is close to the table_270. book_2137 is close table_270. book_2137 is on table_270. table_270 is close book_2137. book_2137 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put book_2136 on the table in the home office, as book_2137 was incorrectly placed on the table instead.
##############################
From agent.py
Human Instruction: You need to put book_2136 on the table in the home office, as book_2137 was incorrectly placed on the table instead.

The actions you have taken:
Action 1: Walk to bookshelf_275.
Action 2: look for book_2136 around bookshelf_275.
Action 3: Walk to bookshelf_124.
Action 4: Open bookshelf_124.
Action 5: look for book_2136 around bookshelf_124.
Action 6: Walk to book_2136.
Action 7: Open book_2136.
Action 8: Observe around book_2136 with the question of Is this the desired book.
Action 9: Walk to book_2137.
Action 10: Open book_2137.
Action 11: Observe around book_2137 with the question of Is this the desired book.
Action 12: Grab book_2137.
Action 13: Walk to table_270.
Action 14: Put book_2137 on table_270.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2025_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior open_and_find_book(book:item, storage:item):
    body:
        if not visited(book):
            walk_to(storage)
            opens(storage)
            observe(book, "Is this the desired book")
            # Open the storage and check if its the desired book

behavior correct_book_on_table(correct_book:item, wrong_book:item, table:item):
    body:
        if not inhand(correct_book):
            grab(correct_book)
        if inhand(wrong_book):
            walk_to(table)
            put_on(wrong_book, table) # Move the wrong book away from the desk
        if inhand(correct_book):
            put_on(correct_book, table) # Place the correct book on the desk

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)

        bind correct_book: item where:
            is_book(correct_book) and id[correct_book] == 2136

        bind wrong_book: item where:
            is_book(wrong_book) and id[wrong_book] == 2137

        bind bookshelf_275: item where:
            is_bookshelf(bookshelf_275)

        bind bookshelf_124: item where:
            is_bookshelf(bookshelf_124)

        if not visited(correct_book):
            open_and_find_book(correct_book, bookshelf_275)

        if not visited(correct_book):
            open_and_find_book(correct_book, bookshelf_124)

        correct_book_on_table(correct_book, wrong_book, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior open_and_find_book(book:item, storage:item):
    body:
        if not visited(book):
            walk_to(storage)
            opens(storage)
            observe(book, "Is this the desired book")
            # Open the storage and check if its the desired book

behavior correct_book_on_table(correct_book:item, wrong_book:item, table:item):
    body:
        if not inhand(correct_book):
            grab(correct_book)
        if inhand(wrong_book):
            walk_to(table)
            put_on(wrong_book, table) # Move the wrong book away from the desk
        if inhand(correct_book):
            put_on(correct_book, table) # Place the correct book on the desk

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)

        bind correct_book: item where:
            is_book(correct_book) and id[correct_book] == 2136

        bind wrong_book: item where:
            is_book(wrong_book) and id[wrong_book] == 2137

        bind bookshelf_275: item where:
            is_bookshelf(bookshelf_275)

        bind bookshelf_124: item where:
            is_bookshelf(bookshelf_124)

        if not visited(correct_book):
            open_and_find_book(correct_book, bookshelf_275)

        if not visited(correct_book):
            open_and_find_book(correct_book, bookshelf_124)

        correct_book_on_table(correct_book, wrong_book, table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_124)open_executor(bookshelf_124)obs(book_2136, Is this the desired book)grab_executor(book_2136)walk_executor(table_270)put_executor(book_2136, table_270)
##############################
From agent.py
walk_executor(bookshelf_124)
Robot find: Robot is close to the bookshelf_124. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2052_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
def desired_book(book:item):
    # Function to check if it is the desired book
    symbol is_desired=exists o: item : (o == book and id[o] == 2136)
    return is_desired

behavior find_desired_book(book:item):
    body:
        if not visited(book):
            observe(book, "Is this the desired book")

behavior move_book_to_table(book:item, table:item):
    body:
        if not on(book, table):
            grab(book)
            walk_to(table)
            put_on(book, table)

behavior __goal__():
    body:
        bind desired_book_instance: item where:
            is_book(desired_book_instance) and desired_book(desired_book_instance)

        bind home_office_table: item where:
            is_table(home_office_table) and inside(home_office_table, home_office)

        foreach bookshelf: item:
            if is_bookshelf(bookshelf) and not visited(bookshelf):
                walk_to(bookshelf)
                foreach b: item:
                    if is_book(b) and close_char(char, b):
                        find_desired_book(b)

        move_book_to_table(desired_book_instance, home_office_table)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2052_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

behavior find_novel_2060_around_bookshelf_196(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation

def is_desired_book(book:item):
    # Function to determine if the book is the desired book
    symbol desired=exists b: item : (is_book(b) and id[b] == id[book] and id[b] == 2136)
    return desired

behavior find_and_place_book(book:item, table:item):
    body:
        if not on(book, table):
            walk_to(book)
            grab(book)
            walk_to(table)
            put_on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and is_desired_book(book)
        bind table: item where:
            is_table(table)
        find_and_place_book(book, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_desired_book(book:item):
    # Function to determine if the book is the desired book
    symbol desired=exists b: item : (is_book(b) and id[b] == id[book] and id[b] == 2136)
    return desired

behavior find_and_place_book(book:item, table:item):
    body:
        if not on(book, table):
            walk_to(book)
            grab(book)
            walk_to(table)
            put_on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and is_desired_book(book)
        bind table: item where:
            is_table(table)
        find_and_place_book(book, table)

##############################
From agent.py-> find a plan in act()
walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_114)put_executor(book_2136, table_114)
##############################
From agent.py
walk_executor(book_2136)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2136. 
##############################
From agent.py
grab_executor(book_2136)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2136. Grabbing book_2136 by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the book_2136. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(book_2136, table_114)
Robot find: Robot is close to the book_2136. Robot is close to the table_114. Robot is close to the mat_102. book_2136 is on table_114. table_114 is close book_2136. book_2136 is close table_114. book_2136 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to put book_2136 on the table in the home office, as it was incorrectly placed on table_114. Book_2136 should be moved to the correct table in the home office to complete the sub-task.
##############################
From agent.py
Human Instruction: You need to put book_2136 on the table in the home office, as it was incorrectly placed on table_114. Book_2136 should be moved to the correct table in the home office to complete the sub-task.

Trial and Error: You can not open bookshelf_124
The actions you have taken:
Action 1: Walk to bookshelf_275.
Action 2: look for book_2136 around bookshelf_275.
Action 3: Walk to bookshelf_124.
Action 4: Open bookshelf_124.
Action 5: look for book_2136 around bookshelf_124.
Action 6: Walk to book_2136.
Action 7: Open book_2136.
Action 8: Observe around book_2136 with the question of Is this the desired book.
Action 9: Walk to book_2137.
Action 10: Open book_2137.
Action 11: Observe around book_2137 with the question of Is this the desired book.
Action 12: Grab book_2137.
Action 13: Walk to table_270.
Action 14: Put book_2137 on table_270.
Action 15: Walk to bookshelf_124.
Action 16: Walk to book_2136.
Action 17: Grab book_2136.
Action 18: Walk to table_114.
Action 19: Put book_2136 on table_114.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2060_around_bookshelf_196(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==196
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior walk_to_book(book:item):
    body:
        if not close_char(char, book):
            walk_to(book)

behavior grab_book(book:item):
    body:
        if not inhand(book):
            grab(book)

behavior put_book_on_home_office_table(book:item, table:item):
    body:
        if not on(book, table):
            put_on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2136
        walk_to_book(book)
        grab_book(book)
        
        bind table: item where:
            is_table(table) and is_home_office(table)
        walk_to(table)
        put_book_on_home_office_table(book, table)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_instrument_guitar_2028_around_home_office_241(instrument_guitar:item):
    goal: not unknown(instrument_guitar)
    body:
        assert is_instrument_guitar(instrument_guitar)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(instrument_guitar,home_office_instance)
        else:
            exp(instrument_guitar,home_office_instance)
    eff:
        unknown[instrument_guitar]=False
        close[instrument_guitar,home_office_instance]=True
        close[home_office_instance,instrument_guitar]=True
    

behavior find_novel_2060_around_home_office_241(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(novel,home_office_instance)
        else:
            exp(novel,home_office_instance)
    eff:
        unknown[novel]=False
        close[novel,home_office_instance]=True
        close[home_office_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def is_correct_table(table: item):
    # Check if table is the correct table in the home office
    symbol correct_table = exists room: item : (is_home_office(room) and inside(table, room))
    return correct_table

def is_inhomeoffice(book: item):
    # Check if book_2136 is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(book, room))
    return in_home_office

behavior move_book(book: item, table: item):
    body:
        if not on(book, table):
            put_on(book, table)  # Put book_2136 on the correct table in the home office
            
behavior __goal__():
    body:
        bind book_2136: item where:
            is_book(book_2136) and id[book_2136] == 2136
        bind table: item where:
            is_table(table) and is_correct_table(table)
            
        if not is_inhomeoffice(book_2136):
            walk_to(book_2136)
            grab(book_2136)
            walk_to(table)
            move_book(book_2136, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_correct_table(table: item):
    # Check if table is the correct table in the home office
    symbol correct_table = exists room: item : (is_home_office(room) and inside(table, room))
    return correct_table

def is_inhomeoffice(book: item):
    # Check if book_2136 is in the home office
    symbol in_home_office = exists room: item : (is_home_office(room) and inside(book, room))
    return in_home_office

behavior move_book(book: item, table: item):
    body:
        if not on(book, table):
            put_on(book, table)  # Put book_2136 on the correct table in the home office
            
behavior __goal__():
    body:
        bind book_2136: item where:
            is_book(book_2136) and id[book_2136] == 2136
        bind table: item where:
            is_table(table) and is_correct_table(table)
            
        if not is_inhomeoffice(book_2136):
            walk_to(book_2136)
            grab(book_2136)
            walk_to(table)
            move_book(book_2136, table)

##############################
From agent.py-> find a plan in act()
walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_270)put_executor(book_2136, table_270)
##############################
From agent.py
walk_executor(book_2136)
Robot find: Robot is close to the book_2136. Robot is close to the table_114. 
##############################
From agent.py
grab_executor(book_2136)
Robot find: Robot is close to the book_2136. Robot is close to the table_114. Grabbing book_2136 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: Robot is close to the book_2136. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(book_2136, table_270)
Robot find: Robot is close to the book_2136. Robot is close to the couch_269. Robot is close to the table_270. book_2136 is on table_270. table_270 is close book_2136. book_2136 is close table_270. book_2136 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_light(light:item):
    body:
        if is_off(light) and has_switch(light):
            switch_on(light)
            # Turn on the light if its off and has a switch

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind office_light: item where:
            is_light(office_light) and inside(office_light, home_office)
        # Select a light inside the home office

        turn_on_light(office_light)
        # Turn on the light in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_on_light(light:item):
    body:
        if is_off(light) and has_switch(light):
            switch_on(light)
            # Turn on the light if its off and has a switch

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind office_light: item where:
            is_light(office_light) and inside(office_light, home_office)
        # Select a light inside the home office

        turn_on_light(office_light)
        # Turn on the light in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(light_283)switchon_executor(light_283)
##############################
From agent.py
walk_executor(light_283)
Robot find: mat_284, Robot is close to the light_283. 
##############################
From agent.py
switchon_executor(light_283)
Robot find: Robot is close to the light_283. light_283 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the table in home office. Then turn on the light in the home office.
Action History:
['walk_executor(bookshelf_275)', 'walk_executor(bookshelf_124)', 'open_executor(bookshelf_124)', 'walk_executor(book_2136)', 'open_executor(book_2136)', 'walk_executor(book_2137)', 'open_executor(book_2137)', 'grab_executor(book_2137)', 'walk_executor(table_270)', 'put_executor(book_2137, table_270)', 'walk_executor(bookshelf_124)', 'open_executor(bookshelf_124) (Failed)', 'walk_executor(book_2136)', 'grab_executor(book_2136)', 'walk_executor(table_114)', 'put_executor(book_2136, table_114)', 'walk_executor(book_2136)', 'grab_executor(book_2136)', 'walk_executor(table_270)', 'put_executor(book_2136, table_270)', 'walk_executor(light_283)', 'switchon_executor(light_283)']
Time info:
Time consume: 131 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 7
goal correct times: 0
action_num: 22

Task complete rate:
1
Scene_id: 1
##############################
