From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.  ', '2. Place the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2104_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior clean_item(obj: item):
    body:
        if dirty(obj):
            wash(obj)  # Wash the item if it is dirty

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken item
        bind onion: item where:
            is_food_onion(onion)
        # Select an onion item
        clean_item(chicken)  # Clean the chicken
        clean_item(onion)  # Clean the onion

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2048_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_chicken(chicken:item):
    body:
        if dirty(chicken):
            wash(chicken)

behavior clean_onion(onion:item):
    body:
        if dirty(onion):
            wash(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion item

        clean_chicken(chicken)
        clean_onion(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2104_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_kitchen_counter_122(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item: item):
    body:
        if dirty(item):
            wash(item)
            # Wash the item to make it clean

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken to clean
        
        bind onion: item where:
            is_food_onion(onion)
        # Select an onion to clean
        
        clean_item(chicken)
        clean_item(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2009_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item: item):
    body:
        if dirty(item):
            wash(item)
            # Ensure the item is clean by washing

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and dirty(chicken)
        # Select a dirty chicken

        bind onion: item where:
            is_food_onion(onion) and dirty(onion)
        # Select a dirty onion

        clean_item(chicken)
        # Clean the chicken

        clean_item(onion)
        # Clean the onion

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_cupboard_117(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

behavior find_food_onion_2104_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item: item):
    body:
        if dirty(item):
            if exists cleaning_solution: item : (is_cleaning_solution(cleaning_solution) and close(item, cleaning_solution)):
                grab(cleaning_solution)
                # If there is a cleaning solution close by, grab it
                scrub(item)
                # Scrub the item to make it clean
                empty_a_hand()
                # Release the cleaning solution
            else:
                wash(item)
                # Wash the item if no cleaning solution is available

behavior clean_items(chicken: item, onion: item):
    body:
        clean_item(chicken)
        clean_item(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)

        clean_items(chicken, onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2104_around_bench_115(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==115
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(food_onion,bench_instance)
        else:
            exp(food_onion,bench_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,bench_instance]=True
        close[bench_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation

behavior clean_item(obj:item):
    body:
        if dirty(obj):
            wash(obj)
        if dirty(obj):
            scrub(obj)
        if dirty(obj):
            rinse(obj)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        clean_item(chicken)
        clean_item(onion)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.', '2. Put the chicken and onion into the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2104_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(obj:item):
    body:
        if dirty(obj):
            wash(obj)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken from the available items
        
        bind onion: item where:
            is_food_onion(onion)
        # Select onion from the available items
        
        clean_item(chicken)
        clean_item(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2009_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item: item):
    body:
        if dirty(item):
            wash(item)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken for cleaning

        bind onion: item where:
            is_food_onion(onion)
        # Select onion for cleaning

        clean_item(chicken)
        clean_item(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2104_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(obj:item):
    body:
        if dirty(obj):
            wash(obj) # Wash the item to make it clean

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken item
        bind onion: item where:
            is_food_onion(onion)
        # Select an onion item
        clean_item(chicken) # Clean the chicken
        clean_item(onion) # Clean the onion

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2009_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def clean_item(obj: item):
    # Function to clean an object by washing and scrubbing
    if dirty(obj):
        wash(obj)
        scrub(obj)
        rinse(obj)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)

        clean_item(chicken)
        # Clean the chicken

        clean_item(onion)
        # Clean the onion

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2048_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_chicken(chicken:item):
    body:
        if dirty(chicken):
            wash(chicken)

behavior clean_onion(onion:item):
    body:
        if dirty(onion):
            wash(onion)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind onion: item where:
            is_food_onion(onion)
        clean_chicken(chicken)
        clean_onion(onion)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2048_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(obj: item):
    body:
        if dirty(obj):
            wash(obj)
            # Wash the item to clean it

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Bind to a chicken item

        bind onion: item where:
            is_food_onion(onion)
        # Bind to an onion item

        clean_item(chicken)
        clean_item(onion)
        # Clean the chicken and onion

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the chicken and onion.', '2. Place the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2104_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_chicken_and_onion():
    body:
        foreach item: item:
            if is_food_chicken(item) or is_food_onion(item):
                observe(item, "Find the chicken and onion")

behavior __goal__():
    body:
        find_chicken_and_onion()

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_chicken_and_onion():
    body:
        foreach item: item:
            if is_food_chicken(item) or is_food_onion(item):
                observe(item, "Find the chicken and onion")

behavior __goal__():
    body:
        find_chicken_and_onion()

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)obs(food_chicken_2089, Find the chicken and onion)walk_executor(cupboard_117)exp(food_onion_2104, cupboard_117)walk_executor(food_onion_2104)obs(food_onion_2104, Find the chicken and onion)walk_executor(cupboard_117)exp(food_onion_2009, cupboard_117)walk_executor(food_onion_2009)obs(food_onion_2009, Find the chicken and onion)walk_executor(cupboard_117)exp(food_onion_2048, cupboard_117)walk_executor(food_onion_2048)obs(food_onion_2048, Find the chicken and onion)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_chicken_2089, fridge_126)
Find food_chicken_2089. 
##############################
From agent.py-> find a plan in act()
obs(food_chicken_2089, Find the chicken and onion)obs(food_onion_2104, Find the chicken and onion)walk_executor(cupboard_117)exp(food_onion_2009, cupboard_117)walk_executor(food_onion_2009)obs(food_onion_2009, Find the chicken and onion)walk_executor(food_onion_2048)obs(food_onion_2048, Find the chicken and onion)
##############################
From agent.py
obs(food_chicken_2089, Find the chicken and onion)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_chicken_2089 is close to fridge_126. food_chicken_2089 is close to character_240. food_chicken_2089 is CLEAN.
##############################
From agent.py
obs(food_onion_2104, Find the chicken and onion)
Get this information:  food_onion_2104 is close to fridge_126. food_onion_2104 is close to character_240. food_onion_2104 is inside dining_room_41. food_onion_2104 is inside fridge_126. food_onion_2104 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(food_onion_2009, cupboard_117)
Fail to find food_onion_2009 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2089)obs(food_chicken_2089, Find the chicken and onion)walk_executor(food_onion_2104)obs(food_onion_2104, Find the chicken and onion)walk_executor(kitchen_counter_119)exp(food_onion_2009, kitchen_counter_119)walk_executor(food_onion_2009)obs(food_onion_2009, Find the chicken and onion)walk_executor(food_onion_2048)obs(food_onion_2048, Find the chicken and onion)
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
obs(food_chicken_2089, Find the chicken and onion)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_chicken_2089 is close to fridge_126. food_chicken_2089 is close to character_240. food_chicken_2089 is CLEAN.
##############################
From agent.py
walk_executor(food_onion_2104)
Robot find: Robot is close to the fridge_126. Robot is close to the food_onion_2104. 
##############################
From agent.py
obs(food_onion_2104, Find the chicken and onion)
Get this information:  food_onion_2104 is close to fridge_126. food_onion_2104 is close to character_240. food_onion_2104 is inside dining_room_41. food_onion_2104 is inside fridge_126. food_onion_2104 is CLEAN.
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_onion_2009, kitchen_counter_119)
Fail to find food_onion_2009 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2089)obs(food_chicken_2089, Find the chicken and onion)walk_executor(food_onion_2104)obs(food_onion_2104, Find the chicken and onion)walk_executor(orchid_285)exp(food_onion_2009, orchid_285)walk_executor(food_onion_2009)obs(food_onion_2009, Find the chicken and onion)walk_executor(food_onion_2048)obs(food_onion_2048, Find the chicken and onion)
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
obs(food_chicken_2089, Find the chicken and onion)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_chicken_2089 is close to fridge_126. food_chicken_2089 is close to character_240. food_chicken_2089 is CLEAN.
##############################
From agent.py
walk_executor(food_onion_2104)
Robot find: Robot is close to the fridge_126. Robot is close to the food_onion_2104. 
##############################
From agent.py
obs(food_onion_2104, Find the chicken and onion)
Get this information:  food_onion_2104 is close to fridge_126. food_onion_2104 is close to character_240. food_onion_2104 is inside dining_room_41. food_onion_2104 is inside fridge_126. food_onion_2104 is CLEAN.
##############################
From agent.py
walk_executor(orchid_285)
Robot find: shoes_2033, pillow_287, shampoo_2019, pillow_286, pencil_2014, phone_2017, drawing_288, brush_2002, Robot is close to the orchid_285. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
exp(food_onion_2009, orchid_285)
Fail to find food_onion_2009 around orchid_285. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2089)obs(food_chicken_2089, Find the chicken and onion)walk_executor(food_onion_2104)obs(food_onion_2104, Find the chicken and onion)walk_executor(kitchen_counter_123)exp(food_onion_2009, kitchen_counter_123)walk_executor(food_onion_2009)obs(food_onion_2009, Find the chicken and onion)walk_executor(food_onion_2048)obs(food_onion_2048, Find the chicken and onion)
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
obs(food_chicken_2089, Find the chicken and onion)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_chicken_2089 is close to fridge_126. food_chicken_2089 is close to character_240. food_chicken_2089 is CLEAN.
##############################
From agent.py
walk_executor(food_onion_2104)
Robot find: Robot is close to the fridge_126. Robot is close to the food_onion_2104. 
##############################
From agent.py
obs(food_onion_2104, Find the chicken and onion)
Get this information:  food_onion_2104 is close to fridge_126. food_onion_2104 is close to character_240. food_onion_2104 is inside dining_room_41. food_onion_2104 is inside fridge_126. food_onion_2104 is CLEAN.
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(food_onion_2009, kitchen_counter_123)
Fail to find food_onion_2009 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2089)obs(food_chicken_2089, Find the chicken and onion)walk_executor(food_onion_2104)obs(food_onion_2104, Find the chicken and onion)walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_onion_2009, cupboard_118)walk_executor(food_onion_2009)obs(food_onion_2009, Find the chicken and onion)walk_executor(food_onion_2048)obs(food_onion_2048, Find the chicken and onion)
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
obs(food_chicken_2089, Find the chicken and onion)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_chicken_2089 is close to fridge_126. food_chicken_2089 is close to character_240. food_chicken_2089 is CLEAN.
##############################
From agent.py
walk_executor(food_onion_2104)
Robot find: Robot is close to the fridge_126. Robot is close to the food_onion_2104. 
##############################
From agent.py
obs(food_onion_2104, Find the chicken and onion)
Get this information:  food_onion_2104 is close to fridge_126. food_onion_2104 is close to character_240. food_onion_2104 is inside dining_room_41. food_onion_2104 is inside fridge_126. food_onion_2104 is CLEAN.
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(food_onion_2009, cupboard_118)
Fail to find food_onion_2009 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2089)obs(food_chicken_2089, Find the chicken and onion)walk_executor(food_onion_2104)obs(food_onion_2104, Find the chicken and onion)walk_executor(kitchen_counter_122)exp(food_onion_2009, kitchen_counter_122)walk_executor(food_onion_2009)obs(food_onion_2009, Find the chicken and onion)walk_executor(food_onion_2048)obs(food_onion_2048, Find the chicken and onion)
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
obs(food_chicken_2089, Find the chicken and onion)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_chicken_2089 is close to fridge_126. food_chicken_2089 is close to character_240. food_chicken_2089 is CLEAN.
##############################
From agent.py
walk_executor(food_onion_2104)
Robot find: Robot is close to the fridge_126. Robot is close to the food_onion_2104. 
##############################
From agent.py
obs(food_onion_2104, Find the chicken and onion)
Get this information:  food_onion_2104 is close to fridge_126. food_onion_2104 is close to character_240. food_onion_2104 is inside dining_room_41. food_onion_2104 is inside fridge_126. food_onion_2104 is CLEAN.
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find food_onion_2009 ?
Answer: The item you are looking for, food_onion_2009, is located inside trashcan_99, which is situated within dining_room_41. Please proceed to the dining room and locate trashcan_99, as food_onion_2009 is inside it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The item you are looking for, food_onion_2009, is located inside trashcan_99, which is situated within dining_room_41. Please proceed to the dining room and locate trashcan_99, as food_onion_2009 is inside it.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_chicken_2089 around fridge_126.
Action 5: Observe around food_chicken_2089 with the question of Find the chicken and onion.
Action 6: Observe around food_onion_2104 with the question of Find the chicken and onion.
Action 7: Walk to cupboard_117.
Action 8: look for food_onion_2009 around cupboard_117.
Action 9: Walk to food_chicken_2089.
Action 10: Observe around food_chicken_2089 with the question of Find the chicken and onion.
Action 11: Walk to food_onion_2104.
Action 12: Observe around food_onion_2104 with the question of Find the chicken and onion.
Action 13: Walk to kitchen_counter_119.
Action 14: look for food_onion_2009 around kitchen_counter_119.
Action 15: Walk to food_chicken_2089.
Action 16: Observe around food_chicken_2089 with the question of Find the chicken and onion.
Action 17: Walk to food_onion_2104.
Action 18: Observe around food_onion_2104 with the question of Find the chicken and onion.
Action 19: Walk to orchid_285.
Action 20: look for food_onion_2009 around orchid_285.
Action 21: Walk to food_chicken_2089.
Action 22: Observe around food_chicken_2089 with the question of Find the chicken and onion.
Action 23: Walk to food_onion_2104.
Action 24: Observe around food_onion_2104 with the question of Find the chicken and onion.
Action 25: Walk to kitchen_counter_123.
Action 26: look for food_onion_2009 around kitchen_counter_123.
Action 27: Walk to food_chicken_2089.
Action 28: Observe around food_chicken_2089 with the question of Find the chicken and onion.
Action 29: Walk to food_onion_2104.
Action 30: Observe around food_onion_2104 with the question of Find the chicken and onion.
Action 31: Walk to cupboard_118.
Action 32: Open cupboard_118.
Action 33: look for food_onion_2009 around cupboard_118.
Action 34: Walk to food_chicken_2089.
Action 35: Observe around food_chicken_2089 with the question of Find the chicken and onion.
Action 36: Walk to food_onion_2104.
Action 37: Observe around food_onion_2104 with the question of Find the chicken and onion.
Action 38: Walk to kitchen_counter_122.

##############################
From agent.py
exp(food_onion_2009, kitchen_counter_122)
Fail to find food_onion_2009 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2089)obs(food_chicken_2089, Find the chicken and onion)walk_executor(food_onion_2104)obs(food_onion_2104, Find the chicken and onion)walk_executor(trashcan_99)exp(food_onion_2009, trashcan_99)walk_executor(food_onion_2009)obs(food_onion_2009, Find the chicken and onion)walk_executor(food_onion_2048)obs(food_onion_2048, Find the chicken and onion)
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
obs(food_chicken_2089, Find the chicken and onion)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_chicken_2089 is close to fridge_126. food_chicken_2089 is close to character_240. food_chicken_2089 is CLEAN.
##############################
From agent.py
walk_executor(food_onion_2104)
Robot find: Robot is close to the fridge_126. Robot is close to the food_onion_2104. 
##############################
From agent.py
obs(food_onion_2104, Find the chicken and onion)
Get this information:  food_onion_2104 is close to fridge_126. food_onion_2104 is close to character_240. food_onion_2104 is inside dining_room_41. food_onion_2104 is inside fridge_126. food_onion_2104 is CLEAN.
##############################
From agent.py
walk_executor(trashcan_99)
Robot find: food_orange_2061, food_onion_2009, glue_2045, vacuum_cleaner_2139, Robot is close to the trashcan_99. Robot is close to the food_orange_2061. Robot is close to the food_onion_2009. Robot is close to the glue_2045. 
##############################
From agent.py
exp(food_onion_2009, trashcan_99)
Find food_onion_2009. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2089)obs(food_chicken_2089, Find the chicken and onion)walk_executor(food_onion_2104)obs(food_onion_2104, Find the chicken and onion)walk_executor(food_onion_2009)obs(food_onion_2009, Find the chicken and onion)walk_executor(food_onion_2048)obs(food_onion_2048, Find the chicken and onion)
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
obs(food_chicken_2089, Find the chicken and onion)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_chicken_2089 is close to fridge_126. food_chicken_2089 is close to character_240. food_chicken_2089 is CLEAN.
##############################
From agent.py
walk_executor(food_onion_2104)
Robot find: Robot is close to the fridge_126. Robot is close to the food_onion_2104. 
##############################
From agent.py
obs(food_onion_2104, Find the chicken and onion)
Get this information:  food_onion_2104 is close to fridge_126. food_onion_2104 is close to character_240. food_onion_2104 is inside dining_room_41. food_onion_2104 is inside fridge_126. food_onion_2104 is CLEAN.
##############################
From agent.py
walk_executor(food_onion_2009)
Robot find: Robot is close to the food_onion_2009. Robot is close to the trashcan_99. 
##############################
From agent.py
obs(food_onion_2009, Find the chicken and onion)
Get this information:  food_onion_2009 is close to trashcan_99. food_onion_2009 is close to character_240. food_onion_2009 is inside dining_room_41. food_onion_2009 is inside trashcan_99. food_onion_2009 is CLEAN.
##############################
From agent.py
walk_executor(food_onion_2048)
Robot find: Robot is close to the food_onion_2048. Robot is close to the fridge_126. 
##############################
From agent.py
obs(food_onion_2048, Find the chicken and onion)
Get this information:  food_onion_2048 is inside dining_room_41. food_onion_2048 is inside fridge_126. food_onion_2048 is close to fridge_126. food_onion_2048 is close to character_240. food_onion_2048 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        if not inside(chicken, oven):
            put_inside(chicken, oven)

        if not inside(onion, oven):
            put_inside(onion, oven) 

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and close_char(char, chicken)

        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2009

        bind oven: item where:
            is_oven(oven) and close_char(char, oven)
        
        place_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_tray_2068(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==2068
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(food_carrot,tray_instance)
        else:
            exp(food_carrot,tray_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,tray_instance]=True
        close[tray_instance,food_carrot]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def in_dining_room(trashcan:item):
    # Check if the trashcan is inside the dining room
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(trashcan, room))
    return in_dining_room

behavior pick_up_chicken_and_onion(chicken:item, onion:item):
    body:
        if not inhand(chicken) and has_a_free_hand(char):
            grab(chicken)
        if not inhand(onion) and has_a_free_hand(char):
            grab(onion)

behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        if not inside(chicken, oven):
            put_inside(chicken, oven)
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        
        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2009

        bind trashcan: item where:
            is_trashcan(trashcan) and in_dining_room(trashcan)
        
        bind oven: item where:
            is_oven(oven)

        walk_to(trashcan)
        observe(trashcan, "Check is there any food onion inside the trashcan")

        walk_to(chicken)
        observe(chicken, "Check is there any food chicken")

        pick_up_chicken_and_onion(chicken, onion)
        walk_to(oven)
        place_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def in_dining_room(trashcan:item):
    # Check if the trashcan is inside the dining room
    symbol in_dining_room=exists room: item : (is_dining_room(room) and inside(trashcan, room))
    return in_dining_room

behavior pick_up_chicken_and_onion(chicken:item, onion:item):
    body:
        if not inhand(chicken) and has_a_free_hand(char):
            grab(chicken)
        if not inhand(onion) and has_a_free_hand(char):
            grab(onion)

behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        if not inside(chicken, oven):
            put_inside(chicken, oven)
        if not inside(onion, oven):
            put_inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        
        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2009

        bind trashcan: item where:
            is_trashcan(trashcan) and in_dining_room(trashcan)
        
        bind oven: item where:
            is_oven(oven)

        walk_to(trashcan)
        observe(trashcan, "Check is there any food onion inside the trashcan")

        walk_to(chicken)
        observe(chicken, "Check is there any food chicken")

        pick_up_chicken_and_onion(chicken, onion)
        walk_to(oven)
        place_in_oven(chicken, onion, oven)

##############################
From agent.py-> find a plan in act()
walk_executor(trashcan_99)obs(trashcan_99, Check is there any food onion inside the trashcan)walk_executor(food_chicken_2089)obs(food_chicken_2089, Check is there any food chicken)grab_executor(food_chicken_2089)walk_executor(food_onion_2009)grab_executor(food_onion_2009)walk_executor(oven_127)walk_executor(kitchen_counter_119)put_executor(food_chicken_2089, kitchen_counter_119)walk_executor(oven_127)open_executor(oven_127)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(oven_127)putin_executor(food_chicken_2089, oven_127)putin_executor(food_onion_2009, oven_127)
##############################
From agent.py
walk_executor(trashcan_99)
Robot find: Robot is close to the trashcan_99. Robot is close to the food_orange_2061. Robot is close to the food_onion_2009. Robot is close to the glue_2045. 
##############################
From agent.py
obs(trashcan_99, Check is there any food onion inside the trashcan)
Get this information:  food_orange_2061 is inside trashcan_99. trashcan_99 is on floor_51. glue_2045 is inside trashcan_99. trashcan_99 is inside dining_room_41. trashcan_99 is close to wall_65. trashcan_99 is close to dishwasher_129. trashcan_99 is close to coffe_maker_130. trashcan_99 is close to wall_68. trashcan_99 is close to floor_262. trashcan_99 is close to food_orange_2061. trashcan_99 is close to floor_50. trashcan_99 is close to bookshelf_275. trashcan_99 is close to floor_51. trashcan_99 is close to wall_246. trashcan_99 is close to food_onion_2009. trashcan_99 is close to kitchen_counter_122. trashcan_99 is close to vacuum_cleaner_2139. trashcan_99 is close to glue_2045. trashcan_99 is close to character_240. food_onion_2009 is inside trashcan_99. trashcan_99 is CLEAN. trashcan_99 is OPEN.
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
obs(food_chicken_2089, Check is there any food chicken)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_chicken_2089 is close to fridge_126. food_chicken_2089 is close to character_240. food_chicken_2089 is CLEAN.
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(food_onion_2009)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the food_onion_2009. Robot is close to the trashcan_99. 
##############################
From agent.py
grab_executor(food_onion_2009)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the food_onion_2009. Robot is close to the trashcan_99. Grabbing food_onion_2009 by left hand. 
##############################
From agent.py
walk_executor(oven_127)
Robot find: food_food_2064, Robot is close to the food_chicken_2089. Robot is close to the food_onion_2009. Robot is close to the oven_127. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the food_onion_2009. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_chicken_2089, kitchen_counter_119)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the food_onion_2009. Robot is close to the kitchen_counter_119. kitchen_counter_119 is close food_chicken_2089. food_chicken_2089 is close kitchen_counter_119. food_chicken_2089 is on kitchen_counter_119. food_chicken_2089 released by right hand. 
##############################
From agent.py
walk_executor(oven_127)
Robot find: Robot is close to the food_onion_2009. Robot is close to the oven_127. 
##############################
From agent.py
open_executor(oven_127)
Robot find: tray_128, food_cheese_2072, oil_2013, food_carrot_2015, Robot is close to the food_onion_2009. Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. oven_127 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_onion_2009. Robot is close to the food_chicken_2089. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_onion_2009. Robot is close to the food_chicken_2089. Robot is close to the kitchen_counter_119. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(oven_127)
Robot find: Robot is close to the food_onion_2009. Robot is close to the food_chicken_2089. Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. 
##############################
From agent.py
putin_executor(food_chicken_2089, oven_127)
Robot find: Robot is close to the food_onion_2009. Robot is close to the food_chicken_2089. Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. oven_127 is close food_chicken_2089. food_chicken_2089 is inside oven_127. food_chicken_2089 is close oven_127. food_chicken_2089 released by right hand. 
##############################
From agent.py
putin_executor(food_onion_2009, oven_127)
Robot find: Robot is close to the food_onion_2009. Robot is close to the food_chicken_2089. Robot is close to the tray_128. Robot is close to the food_cheese_2072. Robot is close to the oven_127. Robot is close to the oil_2013. Robot is close to the food_carrot_2015. food_onion_2009 is close oven_127. oven_127 is close food_onion_2009. food_onion_2009 is inside oven_127. food_onion_2009 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Roast chicken with onion in the oven.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'walk_executor(cupboard_117)', 'walk_executor(food_chicken_2089)', 'walk_executor(food_onion_2104)', 'walk_executor(kitchen_counter_119)', 'walk_executor(food_chicken_2089)', 'walk_executor(food_onion_2104)', 'walk_executor(orchid_285)', 'walk_executor(food_chicken_2089)', 'walk_executor(food_onion_2104)', 'walk_executor(kitchen_counter_123)', 'walk_executor(food_chicken_2089)', 'walk_executor(food_onion_2104)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(food_chicken_2089)', 'walk_executor(food_onion_2104)', 'walk_executor(kitchen_counter_122)', 'walk_executor(food_chicken_2089)', 'walk_executor(food_onion_2104)', 'walk_executor(trashcan_99)', 'walk_executor(food_chicken_2089)', 'walk_executor(food_onion_2104)', 'walk_executor(food_onion_2009)', 'walk_executor(food_onion_2048)', 'walk_executor(trashcan_99)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(food_onion_2009)', 'grab_executor(food_onion_2009)', 'walk_executor(oven_127)', 'walk_executor(kitchen_counter_119)', 'put_executor(food_chicken_2089, kitchen_counter_119)', 'walk_executor(oven_127)', 'open_executor(oven_127)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(oven_127)', 'putin_executor(food_chicken_2089, oven_127)', 'putin_executor(food_onion_2009, oven_127)']
Time info:
Time consume: 299 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 15
goal correct times: 0
action_num: 42

Task complete rate:
Keystate: k1 - Requires: 2 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
