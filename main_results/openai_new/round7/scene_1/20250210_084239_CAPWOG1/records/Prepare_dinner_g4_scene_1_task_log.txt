From agent.py
Reset goals: The sub-goals are: 
['1. Crack and beat the eggs.', "2. Cook the rice if it's not already cooked.", '3. Fry the eggs and the rice together, ensuring they are mixed well and evenly cooked.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_bowl_2141_around_kitchen_counter_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_egg(egg:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl) # Put the egg inside the bowl

behavior beat_egg(bowl:item):
    body:
        # Assume that once the egg is in the bowl, it can be beaten
        if not dirty(bowl):
            # Implement a behavior to beat the egg, as detailed behaviors for this are not explicitly given
            touch(bowl) # Simulate the action of beating by touching the item (a placeholder)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        crack_egg(egg, bowl)
        beat_egg(bowl)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior crack_egg(egg:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl) # Put the egg inside the bowl

behavior beat_egg(bowl:item):
    body:
        # Assume that once the egg is in the bowl, it can be beaten
        if not dirty(bowl):
            # Implement a behavior to beat the egg, as detailed behaviors for this are not explicitly given
            touch(bowl) # Simulate the action of beating by touching the item (a placeholder)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        crack_egg(egg, bowl)
        beat_egg(bowl)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(bowl_2140, kitchen_counter_123)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2140)putin_executor(food_egg_2092, bowl_2140)touch_executor(bowl_2140)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_123)
Fail to find bowl_2140 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(bowl_2140, cupboard_117)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2140)putin_executor(food_egg_2092, bowl_2140)touch_executor(bowl_2140)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(bowl_2140, cupboard_117)
Fail to find bowl_2140 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(bowl_2140, cupboard_118)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2140)putin_executor(food_egg_2092, bowl_2140)touch_executor(bowl_2140)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(bowl_2140, cupboard_118)
Fail to find bowl_2140 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_275)exp(bowl_2140, bookshelf_275)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2140)putin_executor(food_egg_2092, bowl_2140)touch_executor(bowl_2140)
##############################
From agent.py
walk_executor(bookshelf_275)
Robot find: pencil_2020, Robot is close to the bookshelf_275. 
##############################
From agent.py
exp(bowl_2140, bookshelf_275)
Fail to find bowl_2140 around bookshelf_275. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_129)open_executor(dishwasher_129)exp(bowl_2140, dishwasher_129)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2140)putin_executor(food_egg_2092, bowl_2140)touch_executor(bowl_2140)
##############################
From agent.py
walk_executor(dishwasher_129)
Robot find: Robot is close to the dishwasher_129. 
##############################
From agent.py
open_executor(dishwasher_129)
Robot find: detergent_2011, measuring_cup_2012, Robot is close to the dishwasher_129. Robot is close to the detergent_2011. Robot is close to the measuring_cup_2012. dishwasher_129 is opened. 
##############################
From agent.py
exp(bowl_2140, dishwasher_129)
Fail to find bowl_2140 around dishwasher_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(bowl_2140, kitchen_counter_119)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2140)putin_executor(food_egg_2092, bowl_2140)touch_executor(bowl_2140)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_119)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(bowl_2140)putin_executor(food_egg_2092, bowl_2140)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_egg_2092, fridge_126)
Find food_egg_2092. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)walk_executor(bowl_2140)putin_executor(food_egg_2092, bowl_2140)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(bowl_2140)
Robot find: Robot is close to the food_egg_2092. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
putin_executor(food_egg_2092, bowl_2140)
Robot find: Robot is close to the food_egg_2092. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. bowl_2140 is close food_egg_2092. food_egg_2092 is inside bowl_2140. food_egg_2092 is close bowl_2140. food_egg_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The egg has been placed inside the bowl, but you need to beat the egg in the bowl. Use an action such as 'touch' to simulate beating the egg.
##############################
From agent.py
Human Instruction: The egg has been placed inside the bowl, but you need to beat the egg in the bowl. Use an action such as 'touch' to simulate beating the egg.

The actions you have taken:
Action 1: Walk to kitchen_counter_123.
Action 2: look for bowl_2140 around kitchen_counter_123.
Action 3: Walk to cupboard_117.
Action 4: look for bowl_2140 around cupboard_117.
Action 5: Walk to cupboard_118.
Action 6: Open cupboard_118.
Action 7: look for bowl_2140 around cupboard_118.
Action 8: Walk to bookshelf_275.
Action 9: look for bowl_2140 around bookshelf_275.
Action 10: Walk to dishwasher_129.
Action 11: Open dishwasher_129.
Action 12: look for bowl_2140 around dishwasher_129.
Action 13: Walk to kitchen_counter_119.
Action 14: look for bowl_2140 around kitchen_counter_119.
Action 15: Walk to fridge_126.
Action 16: Switch off fridge_126.
Action 17: Open fridge_126.
Action 18: look for food_egg_2092 around fridge_126.
Action 19: Grab food_egg_2092.
Action 20: Walk to bowl_2140.
Action 21: Put food_egg_2092 into bowl_2140.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_kitchen_counter_122(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_and_beat_egg(egg: item, bowl: item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl) # Place the egg inside the bowl if its not already there
        touch(bowl) # Simulate beating the egg in the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        
        bind bowl: item where:
            is_bowl(bowl) and visited(bowl)
        # Select the bowl that has been visited and where the egg is placed

        crack_and_beat_egg(egg, bowl) # Execute the crack and beat behavior

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_window_191(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind window_instance:item where:
            is_window(window_instance) and id[window_instance]==191
        achieve close_char(char,window_instance)
        if can_open(window_instance):
            achieve_once open(window_instance)
            exp(wooden_spoon,window_instance)
        else:
            exp(wooden_spoon,window_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,window_instance]=True
        close[window_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation
 
def has_egg_in_bowl(bowl:item):
    # Function to check if there is an egg in the bowl
    symbol has_egg=exists egg: item : (is_food_egg(egg) and inside(egg, bowl))
    return has_egg

behavior beat_egg_in_bowl(bowl:item):
    body:
        if has_egg_in_bowl(bowl):
            touch(bowl)
            # Simulate beating the egg placed inside the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and visited(bowl)
        # Select the bowl after confirming its been visited
        beat_egg_in_bowl(bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_stove_2135(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(wooden_spoon,stove_instance)
        else:
            exp(wooden_spoon,stove_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,stove_instance]=True
        close[stove_instance,wooden_spoon]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_and_beat_egg(egg:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl) # Ensure the egg is inside the bowl
        touch(bowl) # Simulate beating the egg in the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl
        crack_and_beat_egg(egg, bowl)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior crack_and_beat_egg(egg:item, bowl:item):
    body:
        if not inside(egg, bowl):
            put_inside(egg, bowl) # Ensure the egg is inside the bowl
        touch(bowl) # Simulate beating the egg in the bowl

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl
        crack_and_beat_egg(egg, bowl)

##############################
From agent.py-> find a plan in act()
touch_executor(bowl_2140)
##############################
From agent.py
touch_executor(bowl_2140)
Robot find: Robot is close to the food_egg_2092. Robot is close to the bowl_2140. Robot is close to the kitchen_counter_119. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_gloves_2118_around_basket_for_clothes_2078(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_uncooked_rice():
    # Function to check if theres any uncooked rice available
    symbol has_uncooked=exists rice: item : (is_food_rice(rice) and not inside(rice, fridge_126))
    return has_uncooked

behavior cook_rice(rice:item, stove:item):
    body:
        if not inside(rice, stove):
            put_inside(rice, stove)
            # Place the rice on the stove for cooking
        if stove and is_off(stove):
            # Switch on stove if its off to start cooking
            switch_on(stove)

behavior __goal__():
    body:
        if has_uncooked_rice():
            bind rice: item where:
                is_food_rice(rice) and not inside(rice, fridge_126)
            # Find uncooked rice that isnt inside the fridge
            bind stove: item where:
                is_stove(stove)
            # Locate the stove
            cook_rice(rice, stove)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2094_around_pot_78(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(food_food,pot_instance)
        else:
            exp(food_food,pot_instance)
    eff:
        unknown[food_food]=False
        close[food_food,pot_instance]=True
        close[pot_instance,food_food]=True
    

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_clothes_gloves_2118_around_basket_for_clothes_2078(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_gloves,basket_for_clothes_instance)
        else:
            exp(clothes_gloves,basket_for_clothes_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation

def is_rice_cooked(rice:item):
    # Function to check if rice is already cooked 
    # Assuming cooked rice is inside a pot or a bowl
    symbol cooked=exists container: item : (is_pot(container) or is_bowl(container)) and inside(rice, container)
    return cooked

behavior cook_rice(rice:item, pot:item, stove:item):
    body:
        if not is_rice_cooked(rice):
            if not inside(rice, pot):
                put_inside(rice, pot) # Place the rice inside the pot
            if not on(pot, stove):
                put_on(pot, stove) # Place the pot on the stove
            if is_off(stove):
                switch_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        cook_rice(rice, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def is_rice_cooked(rice:item):
    # Function to check if rice is already cooked 
    # Assuming cooked rice is inside a pot or a bowl
    symbol cooked=exists container: item : (is_pot(container) or is_bowl(container)) and inside(rice, container)
    return cooked

behavior cook_rice(rice:item, pot:item, stove:item):
    body:
        if not is_rice_cooked(rice):
            if not inside(rice, pot):
                put_inside(rice, pot) # Place the rice inside the pot
            if not on(pot, stove):
                put_on(pot, stove) # Place the pot on the stove
            if is_off(stove):
                switch_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        cook_rice(rice, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(pot_78)putin_executor(food_rice_2108, pot_78)grab_executor(pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(food_rice_2108)
Robot find: Robot is close to the food_rice_2108. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_rice_2108)
Robot find: Robot is close to the food_rice_2108. Robot is close to the fridge_126. Grabbing food_rice_2108 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the food_rice_2108. Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
putin_executor(food_rice_2108, pot_78)
Robot find: Robot is close to the food_rice_2108. Robot is close to the pot_78. Robot is close to the oven_127. pot_78 is close food_rice_2108. food_rice_2108 is inside pot_78. food_rice_2108 is close pot_78. food_rice_2108 released by right hand. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the food_rice_2108. Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_microwave_135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(fryingpan,microwave_instance)
        else:
            exp(fryingpan,microwave_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,microwave_instance]=True
        close[microwave_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def fry_eggs_rice(fryingpan:item, egg:item, rice:item, stove:item):
    body:
        if not inside(egg, fryingpan) and not inside(rice, fryingpan):
            put_inside(rice, fryingpan)
            put_inside(egg, fryingpan)
            # Add both rice and eggs to the frying pan
            if not on(fryingpan, stove):
                put_on(fryingpan, stove)
                # Ensure the frying pan is on the stove
            if is_off(stove):
                switch_on(stove)
                # Turn on the stove if it is off

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and surfaces(fryingpan)
        # Select a frying pan that can contain the ingredients
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        fry_eggs_rice(fryingpan, egg, rice, stove)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_microwave_135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(fryingpan,microwave_instance)
        else:
            exp(fryingpan,microwave_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,microwave_instance]=True
        close[microwave_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def egg_and_rice_fried(pan:item):
    # Function to fry eggs and rice, ensuring they are mixed well and cooked evenly
    if is_on(stove_2135) and on(pan, stove_2135):
        touch(pan)
        # Simulate stirring the eggs and rice to ensure they are mixed well and evenly cooked

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan since a frying pan is the appropriate utensil to fry eggs and rice
        egg_and_rice_fried(fryingpan)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_knifeblock_76(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(wooden_spoon,knifeblock_instance)
        else:
            exp(wooden_spoon,knifeblock_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,knifeblock_instance]=True
        close[knifeblock_instance,wooden_spoon]=True
    

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_fryingpan_2154_around_microwave_135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(fryingpan,microwave_instance)
        else:
            exp(fryingpan,microwave_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,microwave_instance]=True
        close[microwave_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_and_fry_eggs_and_rice(eggs: item, rice: item, stove: item, pot: item):
    body:
        if not inside(rice, pot):
            put_inside(rice, pot) # Ensure rice is in pot
        if not inside(eggs, pot):
            put_inside(eggs, pot) # Ensure eggs are in pot
        if is_off(stove):
            switch_on(stove) # Turn on the stove
        if on(pot, stove):
            touch(pot) # Simulate stirring and mixing

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)
        # Eggs are the food item
        bind rice: item where:
            is_food_rice(rice)
        # Rice is the food item
        bind stove: item where:
            is_stove(stove)
        # Stove is the cooking appliance
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Pot is already on the stove and will be used for cooking
        
        mix_and_fry_eggs_and_rice(eggs, rice, stove, pot) # Combine and cook the eggs and rice

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior mix_and_fry_eggs_and_rice(eggs: item, rice: item, stove: item, pot: item):
    body:
        if not inside(rice, pot):
            put_inside(rice, pot) # Ensure rice is in pot
        if not inside(eggs, pot):
            put_inside(eggs, pot) # Ensure eggs are in pot
        if is_off(stove):
            switch_on(stove) # Turn on the stove
        if on(pot, stove):
            touch(pot) # Simulate stirring and mixing

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)
        # Eggs are the food item
        bind rice: item where:
            is_food_rice(rice)
        # Rice is the food item
        bind stove: item where:
            is_stove(stove)
        # Stove is the cooking appliance
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Pot is already on the stove and will be used for cooking
        
        mix_and_fry_eggs_and_rice(eggs, rice, stove, pot) # Combine and cook the eggs and rice

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_78)putin_executor(food_egg_2092, pot_78)touch_executor(pot_78)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the bowl_2140. Robot is close to the food_egg_2092. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the bowl_2140. Robot is close to the food_egg_2092. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_egg_2092. Robot is close to the food_rice_2108. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_egg_2092, pot_78)
Robot find: Robot is close to the food_egg_2092. Robot is close to the food_rice_2108. Robot is close to the pot_78. Robot is close to the stove_2135. pot_78 is close food_egg_2092. food_egg_2092 is inside pot_78. food_egg_2092 is close pot_78. food_egg_2092 released by right hand. 
##############################
From agent.py
touch_executor(pot_78)
Robot find: Robot is close to the food_egg_2092. Robot is close to the food_rice_2108. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(kitchen_counter_123)', 'walk_executor(cupboard_117)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(bookshelf_275)', 'walk_executor(dishwasher_129)', 'open_executor(dishwasher_129)', 'walk_executor(kitchen_counter_119)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_egg_2092)', 'walk_executor(bowl_2140)', 'putin_executor(food_egg_2092, bowl_2140)', 'touch_executor(bowl_2140)', 'walk_executor(food_rice_2108)', 'grab_executor(food_rice_2108)', 'walk_executor(pot_78)', 'putin_executor(food_rice_2108, pot_78)', 'grab_executor(pot_78)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(pot_78)', 'putin_executor(food_egg_2092, pot_78)', 'touch_executor(pot_78)']
Time info:
Time consume: 228 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 9
goal correct times: 0
action_num: 28

Task complete rate:
Keystate: k1 - Requires: 6 steps
Keystate: k2 - Requires: 16 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
