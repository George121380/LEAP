From agent.py
Reset goals: The sub-goals are: 
['Clean the bathroom sink directly.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_cupboard_117(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

#exp_behavior_end

#goal_representation

behavior clean_sink(sink:item):
    body:
        if dirty(sink):
            wipe(sink) # Wipe the sink surface if it is dirty

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        clean_sink(sink)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior clean_sink(sink:item):
    body:
        if dirty(sink):
            wipe(sink) # Wipe the sink surface if it is dirty

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        clean_sink(sink)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)wipe_executor(sink_19)
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, mat_32, phone_2029, cleaning_solution_2143, drawing_33, Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_detergent_2155_around_detergent_2155(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2155
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(detergent,detergent_instance)
        else:
            exp(detergent,detergent_instance)
    eff:
        unknown[detergent]=False
        close[detergent,detergent_instance]=True
        close[detergent_instance,detergent]=True
    

behavior find_brush_2002_around_bathroom_cabinet_17(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(brush,bathroom_cabinet_instance)
        else:
            exp(brush,bathroom_cabinet_instance)
    eff:
        unknown[brush]=False
        close[brush,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,brush]=True
    

behavior find_towel_2128_around_bathroom_cabinet_17(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel,bathroom_cabinet_instance)
        else:
            exp(towel,bathroom_cabinet_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def is_bathroom_sink(sink:item):
    # Check if a sink is in the bathroom
    symbol is_bathroom_sink=exists room: item : (is_bathroom(room) and inside(sink, room))
    return is_bathroom_sink

behavior clean_sink(sink:item):
    body:
        if dirty(sink):
            scrub(sink) # Scrub the sink to clean it

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and is_bathroom_sink(sink) 
        # Select the bathroom sink
        clean_sink(sink) # Clean the bathroom sink

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_bathroom_sink(sink:item):
    # Check if a sink is in the bathroom
    symbol is_bathroom_sink=exists room: item : (is_bathroom(room) and inside(sink, room))
    return is_bathroom_sink

behavior clean_sink(sink:item):
    body:
        if dirty(sink):
            scrub(sink) # Scrub the sink to clean it

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and is_bathroom_sink(sink) 
        # Select the bathroom sink
        clean_sink(sink) # Clean the bathroom sink

##############################
From agent.py-> find a plan in act()
scrub_executor(sink_19)
##############################
From agent.py
scrub_executor(sink_19)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the sink_19. sink_19 is cleaned. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Clean the bathroom sink directly.
Action History:
['walk_executor(sink_19)', 'wipe_executor(sink_19) (Failed)', 'scrub_executor(sink_19)']
Time info:
Time consume: 37 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 2
goal correct times: 0
action_num: 3

Task complete rate:
1
Scene_id: 1
##############################
