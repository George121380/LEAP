From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables.', '2. Cool the boiled vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_stamp_2043_around_cupboard_118(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(stamp,cupboard_instance)
        else:
            exp(stamp,cupboard_instance)
    eff:
        unknown[stamp]=False
        close[stamp,cupboard_instance]=True
        close[cupboard_instance,stamp]=True
    

behavior find_cleaning_solution_2143_around_kitchen_counter_122(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cleaning_solution,kitchen_counter_instance)
        else:
            exp(cleaning_solution,kitchen_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cleaning_solution]=True
    

behavior find_food_vegetable_2113_around_cupboard_118(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_pot(pot:item):
    # Function to check if the pot has water
    symbol has_water=has_water(pot)
    return has_water

behavior fill_pot(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet) # Approach the faucet to get water
            get_water(pot) # Fill the pot with water

behavior switch_on_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove) # Turn on the stove

behavior boil_vegetables(pot:item, stove:item, vegetables:item):
    body:
        if not inside(vegetables, pot):
            put_inside(vegetables, pot) # Put vegetables into the pot
        if inside(vegetables, pot) and not is_on(stove):
            switch_on_stove(stove) # Ensure the stove is on to start boiling

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to boil

        bind pot: item where:
            is_pot(pot)
        # Select a pot to use for boiling

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot with water

        fill_pot(pot, faucet) # Ensure the pot is filled with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove to use for boiling

        boil_vegetables(pot, stove, vegetables) # Start boiling the vegetables

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_sink_120(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_vegetable_2113_around_cupboard_118(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot: item):
    # Function to check if there is water in the pot
    symbol has_water=has_water(pot)
    return has_water

behavior boil_vegetables(vegetables: item, pot: item, stove: item):
    body:
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)
            # Put the vegetables inside the pot
        
        if has_water_in_pot(pot):
            if not is_on(stove):
                switch_on(stove)
                # Switch on the stove to boil the vegetables
        else:
            get_water(pot)
            # Fill pot with water

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to boil

        bind pot: item where:
            is_pot(pot)
        # Select a pot to use

        bind stove: item where:
            is_stove(stove)
        # Select a stove to use

        boil_vegetables(vegetables, pot, stove)
        # Initiate the boiling process for the vegetables

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_vegetable_2113_around_cupboard_118(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_cleaning_solution_2143_around_sink_120(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_with_water(pot: item, faucet: item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            water(pot)

behavior turn_on_stove(stove: item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior boil_vegetables(pot: item, stove: item, vegetables: item):
    body:
        if not inside(vegetables, pot):
            put_inside(vegetables, pot)
        if not has_water(pot):
            bind faucet: item where:
                is_faucet(faucet)
            fill_with_water(pot, faucet)
        put_on(pot, stove)
        turn_on_stove(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        bind pot: item where:
            is_pot(pot)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        boil_vegetables(pot, stove, vegetables)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_food_vegetable_2113_around_cupboard_118(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def is_boiling_pot(pot:item):
    # Function to check if a pot is on the stove and actively boiling
    symbol on_stove_and_boiling=exists stove: item : (is_stove(stove) and on(pot, stove) and is_on(stove) and has_water(pot))
    return on_stove_and_boiling

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove) # Place the pot on the stove

behavior fill_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            water(pot) # Fill the pot with water

behavior switch_on_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot)
        put_pot_on_stove(pot, stove)
        switch_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_cupboard_118(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_vegetable_2113_around_cupboard_118(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def water_boiling_conditions(pot:item):
    # Function to check if pot is on the stove and has water
    symbol conditions_met=exists stove: item : (is_stove(stove) and on(pot, stove) and is_on(stove) and has_water(pot))
    return conditions_met

behavior boil_vegetables(pot:item):
    body:
        if open(pot):
            closes(pot) # Close the pot lid if its open
        # Boil the pot by heating the stove
        if not water_boiling_conditions(pot):
            bind stove: item where:
                is_stove(stove)
            if is_off(stove):
                switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        if not has_water(pot):
            get_water(pot) # Fill pot with water if it doesnt have any
        
        boil_vegetables(pot) # Boil the vegetables by boiling the pot


#goal_representation_end

##############################
From agent.py->reset_goal
 
def water_boiling_conditions(pot:item):
    # Function to check if pot is on the stove and has water
    symbol conditions_met=exists stove: item : (is_stove(stove) and on(pot, stove) and is_on(stove) and has_water(pot))
    return conditions_met

behavior boil_vegetables(pot:item):
    body:
        if open(pot):
            closes(pot) # Close the pot lid if its open
        # Boil the pot by heating the stove
        if not water_boiling_conditions(pot):
            bind stove: item where:
                is_stove(stove)
            if is_off(stove):
                switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        if not has_water(pot):
            get_water(pot) # Fill pot with water if it doesnt have any
        
        boil_vegetables(pot) # Boil the vegetables by boiling the pot


##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(pot_2138, cupboard_118)walk_executor(pot_2138)open_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(pot_2138)close_executor(pot_2138)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: pot_78, Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(pot_2138, cupboard_118)
Fail to find pot_2138 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(pot_78)close_executor(pot_78)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the pot_78. 
##############################
From agent.py
close_executor(pot_78)
Robot find: Robot is close to the pot_78. pot_78 is closed. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_bowl(vegetables:item, bowl:item):
    body:
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior observe_for_vegetables(bowl:item):
    body:
        observe(bowl, "Check if the bowl contains the boiled vegetables for cooling")

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and hot(vegetables)
        # Select the boiled vegetables that are hot
        
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl

        put_in_bowl(vegetables, bowl)
        observe_for_vegetables(bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def cool_vegetables_in_bowl(boiled_vegetables:item, bowl:item):
    body:
        if not inside(boiled_vegetables, bowl):
            put_inside(boiled_vegetables, bowl)

behavior __goal__():
    body:
        bind boiled_vegetables: item where:
            is_food_vegetable(boiled_vegetables) and hot(boiled_vegetables)
        bind bowl: item where:
            is_bowl(bowl)
        # Cool boiled vegetables by putting them in a bowl
        cool_vegetables_in_bowl(boiled_vegetables, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior cool_the_boiled_vegetables(bowl:item):
    body:
        bind pot_78: item where:
            is_pot(pot_78)
        # Grab the pot with boiled vegetables
        if close_char(char, pot_78):
            grab(pot_78)
            # Ensure you have a free hand and grab the pot with boiled vegetables
        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, pot_78)
        # Identify boiled vegetables inside the pot
        empty_a_hand()
        # Empty a hand to ensure free hand available
        put_inside(vegetables, bowl) 
        # Transfer the boiled vegetables into the bowl for cooling
        empty_a_hand()
        # Empty the hand holding the pot after transferring the vegetables

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to cool the boiled vegetables
        walk_to(bowl)
        # Approach the bowl
        cool_the_boiled_vegetables(bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_boiled(food:item):
    # Function to check if the food is boiled
    symbol is_boiled=exists pot: item : (is_pot(pot) and inside(food, pot) and closed(pot))
    return is_boiled

behavior cool_in_bowl(food:item, bowl:item):
    body:
        if not inside(food, bowl):
            put_inside(food, bowl)
            # Place the boiled vegetables inside the bowl for cooling

behavior find_and_cool_boiled_food():
    body:
        bind bowl: item where:
            is_bowl(bowl)

        foreach food: item:
            if is_food_vegetable(food) and is_food_boiled(food):
                walk_to(food)
                cool_in_bowl(food, bowl)
                # Cool each boiled vegetable in the bowl

behavior __goal__():
    body:
        find_and_cool_boiled_food()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def in_bowl(vegetables:item, bowl:item):
    # Function to check if boiled vegetables are in the bowl
    symbol in_bowl=exists o: item : (is_food_vegetable(o) and inside(o, bowl) and cut(o))
    return in_bowl

behavior cool_in_bowl(vegetables:item, bowl:item):
    body:
        if not in_bowl(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables) and cut(vegetables)
        # Select boiled and cut vegetables
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        cool_in_bowl(vegetables, bowl)
        # Cool the boiled vegetables by placing them in a bowl

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior cool_vegetables(bowl: item, vegetables: item):
    body:
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        cool_vegetables(bowl, vegetables)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_vegetable_2113, fridge_126)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(bowl_2141)putin_executor(food_vegetable_2113, bowl_2141)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the pot_78. Robot is close to the fridge_126. 
##############################
Error record: write() argument must be str, not None
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(pot_78)', 'close_executor(pot_78)', 'walk_executor(stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(fridge_126)']
Time info:
Time consume: 191 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 11
goal correct times: 0
action_num: 12

Task complete rate:
Keystate: k1 - Requires: 9 steps
Keystate: k2 - Requires: 12 steps
Keystate: k3 - Requires: 8 steps
Action Completion Rate: 1.0
Scene_id: 1
##############################
