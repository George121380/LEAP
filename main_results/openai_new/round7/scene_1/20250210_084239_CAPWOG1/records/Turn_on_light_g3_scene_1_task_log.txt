From agent.py
Reset goals: The sub-goals are: 
['1. Go to each room and check if there is a light on.', '2. Turn on a light in the rooms where no lights are on.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def check_light_in_room(room:item):
    # Function to check whether there is a light on in a specified room
    symbol light_on=exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return light_on

behavior __goal__():
    body:
        foreach room: item:
            if not visited(room):
                # Visit each room and check for lights
                observe(room, "Check if there is a light on in this room")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior check_light_in_room(room:item):
    body:
        observe(room, "Check if there is a light on in the room")

behavior __goal__():
    body:
        foreach room: item:
            if not visited(room):
                check_light_in_room(room)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2139_around_washing_machine_2079(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

behavior find_blow_dryer_2057_around_bathroom_cabinet_17(blow_dryer:item):
    goal: not unknown(blow_dryer)
    body:
        assert is_blow_dryer(blow_dryer)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(blow_dryer,bathroom_cabinet_instance)
        else:
            exp(blow_dryer,bathroom_cabinet_instance)
    eff:
        unknown[blow_dryer]=False
        close[blow_dryer,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,blow_dryer]=True
    

behavior find_stereo_2050_around_home_office_241(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(stereo,home_office_instance)
        else:
            exp(stereo,home_office_instance)
    eff:
        unknown[stereo]=False
        close[stereo,home_office_instance]=True
        close[home_office_instance,stereo]=True
    

behavior find_food_orange_2103_around_fridge_126(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_orange,fridge_instance)
        else:
            exp(food_orange,fridge_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,fridge_instance]=True
        close[fridge_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
 
def light_is_on(room:item):
    # Function to check if there is a light on in the specified room
    symbol has_light_on=exists l: item : (is_light(l) and is_on(l) and inside(l, room))
    return has_light_on

behavior check_room_light(room:item):
    body:
        if not visited(room):
            observe(room, "Check if there is a light on in the room")
        if not light_is_on(room):
            foreach l: item:
                if is_light(l) and inside(l, room) and is_off(l):
                    switch_on(l)

behavior __goal__():
    body:
        foreach room: item:
            if (not visited(room)):
                check_room_light(room)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def check_light_on(room:item):
    # Function to check if there is a light on in a specified room
    symbol light_on=exists x: item : (is_light(x) and is_on(x) and inside(x, room))
    return light_on

behavior __goal__():
    body:
        foreach room: item:
            if not visited(room):
                walk_to(room)
                # Walk to each room to check if there is light on
                observe(room, "Check if there is a light on in the room")
                symbol light=exists x: item : (is_light(x) and inside(x, room))
                if light:
                    if not check_light_on(room):
                        bind light_source: item where:
                            is_light(light_source) and inside(light_source, room)
                        if has_switch(light_source):
                            switch_on(light_source)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def light_is_on_in_room(room:item):
    # Function to check if there is a light on in a room
    symbol light_on=exists l: item : (is_light(l) and is_on(l) and inside(l, room))
    return light_on

behavior check_light_in_room(room:item):
    body:
        if not visited(room):
            observe(room, "Check if there is a light on in the room")

behavior __goal__():
    body:
        foreach room: item:
            if not light_is_on_in_room(room):
                walk_to(room)
                check_light_in_room(room)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_light_on(room: item):
    # Function to check if there is a light on in a specified room
    symbol light_on=exists light: item : (is_light(light) and is_on(light) and inside(light, room))
    return light_on

behavior check_room_for_light(room: item):
    body:
        if not is_light_on(room):
            observe(room, "Check if there is a light on in the room")

behavior __goal__():
    body:
        foreach room: item:
            if not visited(room):
                check_room_for_light(room)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
[]
Time info:
Time consume: 49 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0
action_num: 0

Task complete rate:
Keystate: k1 - Requires: 8 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
