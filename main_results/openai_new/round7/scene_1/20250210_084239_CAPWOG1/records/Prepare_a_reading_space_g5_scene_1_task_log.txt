From agent.py
Reset goals: The sub-goals are: 
['1. Find your spectacles and put them on the coffee table in the home office.', '2. Find the book and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2153_around_tvstand_273(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==273
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(spectacles,tvstand_instance)
        else:
            exp(spectacles,tvstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,tvstand_instance]=True
        close[tvstand_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_spectacles_on_table(spectacles:item, table:item):
    body:
        if not on(spectacles, table):
            put_on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles
        
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table in the home office
        
        put_spectacles_on_table(spectacles, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2153_around_table_270(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(spectacles,table_instance)
        else:
            exp(spectacles,table_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,table_instance]=True
        close[table_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation

behavior find_and_place_spectacles_on_coffee_table(spectacles: item, coffee_table: item, home_office: item):
    body:
        if not visited(spectacles):
            observe(spectacles, "Locate the spectacles in the environment")
        if not close_char(char, spectacles):
            walk_to(spectacles)
        if not inhand(spectacles) and close_char(char, spectacles) and has_a_free_hand(char):
            grab(spectacles)
        if not close_char(char, coffee_table):
            walk_to(coffee_table)
        if inhand(spectacles):
            put_on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)

        find_and_place_spectacles_on_coffee_table(spectacles, coffee_table, home_office)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2153_around_desk_272(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(spectacles,desk_instance)
        else:
            exp(spectacles,desk_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,desk_instance]=True
        close[desk_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office(table:item):
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior put_on_table(o:item, table:item):
    body:
        if not on(o, table):
            put_on(o, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and not visited(spectacles)
        bind coffee_table: item where:
            is_table(coffee_table) and is_home_office(coffee_table)
        observe(spectacles,"Check location of spectacles")
        walk_to(spectacles)
        grab(spectacles)
        walk_to(coffee_table)
        put_on_table(spectacles, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2153_around_mousepad_214(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==214
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(spectacles,mousepad_instance)
        else:
            exp(spectacles,mousepad_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,mousepad_instance]=True
        close[mousepad_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_place_spectacles(spectacles:item, coffee_table:item, home_office:item):
    body:
        if not on(spectacles, coffee_table):
            grab(spectacles)
            walk_to(coffee_table)
            put_on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)

        bind spectacles: item where:
            is_spectacles(spectacles)

        find_and_place_spectacles(spectacles, coffee_table, home_office)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_place_spectacles(spectacles:item, coffee_table:item, home_office:item):
    body:
        if not on(spectacles, coffee_table):
            grab(spectacles)
            walk_to(coffee_table)
            put_on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table) and inside(coffee_table, home_office)

        bind spectacles: item where:
            is_spectacles(spectacles)

        find_and_place_spectacles(spectacles, coffee_table, home_office)

##############################
From agent.py-> find a plan in act()
walk_executor(mousepad_214)exp(spectacles_2153, mousepad_214)walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_270)put_executor(spectacles_2153, table_270)
##############################
From agent.py
walk_executor(mousepad_214)
Robot find: mouse_213, keyboard_211, chair_194, check_2026, laser_pointer_2034, Robot is close to the desk_193. Robot is close to the mousepad_214. 
##############################
From agent.py
exp(spectacles_2153, mousepad_214)
Fail to find spectacles_2153 around mousepad_214. 
##############################
From agent.py-> find a plan in act()
walk_executor(computer_209)exp(spectacles_2153, computer_209)walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_270)put_executor(spectacles_2153, table_270)
##############################
From agent.py
walk_executor(computer_209)
Robot find: Robot is close to the computer_209. 
##############################
From agent.py
exp(spectacles_2153, computer_209)
Fail to find spectacles_2153 around computer_209. 
##############################
From agent.py-> find a plan in act()
walk_executor(keyboard_211)exp(spectacles_2153, keyboard_211)walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_270)put_executor(spectacles_2153, table_270)
##############################
From agent.py
walk_executor(keyboard_211)
Robot find: drawing_201, Robot is close to the desk_193. Robot is close to the keyboard_211. 
##############################
From agent.py
exp(spectacles_2153, keyboard_211)
Fail to find spectacles_2153 around keyboard_211. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_272)exp(spectacles_2153, desk_272)walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_270)put_executor(spectacles_2153, table_270)
##############################
From agent.py
walk_executor(desk_272)
Robot find: stamp_2022, phone_2147, mouse_280, keyboard_278, headset_2146, chair_271, stamp_2043, Robot is close to the desk_272. 
##############################
From agent.py
exp(spectacles_2153, desk_272)
Fail to find spectacles_2153 around desk_272. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_196)open_executor(bookshelf_196)exp(spectacles_2153, bookshelf_196)walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_270)put_executor(spectacles_2153, table_270)
##############################
From agent.py
walk_executor(bookshelf_196)
Robot find: novel_2060, drawing_202, Robot is close to the bookshelf_196. 
##############################
From agent.py
open_executor(bookshelf_196)
Robot find: Robot is close to the photoframe_219. Robot is close to the bookshelf_196. bookshelf_196 is opened. 
##############################
From agent.py
exp(spectacles_2153, bookshelf_196)
Fail to find spectacles_2153 around bookshelf_196. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_124)open_executor(bookshelf_124)exp(spectacles_2153, bookshelf_124)walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_270)put_executor(spectacles_2153, table_270)
##############################
From agent.py
walk_executor(bookshelf_124)
Robot find: book_2136, envelope_2055, book_2137, drawing_110, drawing_111, Robot is close to the bookshelf_124. 
##############################
From agent.py
open_executor(bookshelf_124)
Robot find: Robot is close to the bookshelf_124. bookshelf_124 is opened. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find spectacles_2153 ?
Answer: The spectacles_2153 can be found inside dining_room_41, on top of kitchen_counter_122. Look for them on the surface, ensuring you identify the correct counter and surrounding area to find the spectacles.
Re-decompose: None

##############################
From agent.py
Human Instruction: The spectacles_2153 can be found inside dining_room_41, on top of kitchen_counter_122. Look for them on the surface, ensuring you identify the correct counter and surrounding area to find the spectacles.

The actions you have taken:
Action 1: Walk to mousepad_214.
Action 2: look for spectacles_2153 around mousepad_214.
Action 3: Walk to computer_209.
Action 4: look for spectacles_2153 around computer_209.
Action 5: Walk to keyboard_211.
Action 6: look for spectacles_2153 around keyboard_211.
Action 7: Walk to desk_272.
Action 8: look for spectacles_2153 around desk_272.
Action 9: Walk to bookshelf_196.
Action 10: Open bookshelf_196.
Action 11: look for spectacles_2153 around bookshelf_196.
Action 12: Walk to bookshelf_124.
Action 13: Open bookshelf_124.

##############################
From agent.py
exp(spectacles_2153, bookshelf_124)
Fail to find spectacles_2153 around bookshelf_124. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(spectacles_2153, kitchen_counter_122)walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_270)put_executor(spectacles_2153, table_270)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(spectacles_2153, kitchen_counter_122)
Find spectacles_2153. 
##############################
From agent.py-> find a plan in act()
walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_270)put_executor(spectacles_2153, table_270)
##############################
From agent.py
walk_executor(spectacles_2153)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the spectacles_2153. 
##############################
From agent.py
grab_executor(spectacles_2153)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the spectacles_2153. Grabbing spectacles_2153 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the spectacles_2153. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(spectacles_2153, table_270)
Robot find: Robot is close to the spectacles_2153. Robot is close to the couch_269. Robot is close to the table_270. spectacles_2153 is close table_270. spectacles_2153 is on table_270. table_270 is close spectacles_2153. spectacles_2153 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place the spectacles on the coffee table in the home office. Currently, they are on table_270, which does not appear to be the coffee table in the home office as required.
##############################
From agent.py
Human Instruction: You need to place the spectacles on the coffee table in the home office. Currently, they are on table_270, which does not appear to be the coffee table in the home office as required.

The actions you have taken:
Action 1: Walk to mousepad_214.
Action 2: look for spectacles_2153 around mousepad_214.
Action 3: Walk to computer_209.
Action 4: look for spectacles_2153 around computer_209.
Action 5: Walk to keyboard_211.
Action 6: look for spectacles_2153 around keyboard_211.
Action 7: Walk to desk_272.
Action 8: look for spectacles_2153 around desk_272.
Action 9: Walk to bookshelf_196.
Action 10: Open bookshelf_196.
Action 11: look for spectacles_2153 around bookshelf_196.
Action 12: Walk to bookshelf_124.
Action 13: Open bookshelf_124.
Action 14: look for spectacles_2153 around bookshelf_124.
Action 15: Walk to kitchen_counter_122.
Action 16: look for spectacles_2153 around kitchen_counter_122.
Action 17: Walk to spectacles_2153.
Action 18: Grab spectacles_2153.
Action 19: Walk to table_270.
Action 20: Put spectacles_2153 on table_270.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior find_spectacles(spectacles:item):
    body:
        if not inhand(spectacles):
            walk_to(spectacles)
            grab(spectacles)

behavior place_spectacles(spectacles:item, table:item):
    body:
        if inhand(spectacles):
            put_on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        bind table: item where:
            is_table(table) and id[table]==270
        find_spectacles(spectacles)
        place_spectacles(spectacles, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_spectacles(spectacles:item):
    body:
        if not inhand(spectacles):
            walk_to(spectacles)
            grab(spectacles)

behavior place_spectacles(spectacles:item, table:item):
    body:
        if inhand(spectacles):
            put_on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        bind table: item where:
            is_table(table) and id[table]==270
        find_spectacles(spectacles)
        place_spectacles(spectacles, table)

##############################
From agent.py-> find a plan in act()
walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_270)put_executor(spectacles_2153, table_270)
##############################
From agent.py
walk_executor(spectacles_2153)
Robot find: Robot is close to the spectacles_2153. Robot is close to the table_270. 
##############################
From agent.py
grab_executor(spectacles_2153)
Robot find: Robot is close to the spectacles_2153. Robot is close to the table_270. Grabbing spectacles_2153 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: Robot is close to the spectacles_2153. Robot is close to the table_270. Robot is close to the couch_269. 
##############################
From agent.py
put_executor(spectacles_2153, table_270)
Robot find: Robot is close to the spectacles_2153. Robot is close to the table_270. Robot is close to the couch_269. spectacles_2153 is close table_270. spectacles_2153 is on table_270. spectacles_2153 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to place the spectacles on the correct coffee table in the home office, as currently, they are placed on table_270, which is not specified as the coffee table in the home office.
##############################
From agent.py
Human Instruction: You need to place the spectacles on the correct coffee table in the home office, as currently, they are placed on table_270, which is not specified as the coffee table in the home office.

The actions you have taken:
Action 1: Walk to mousepad_214.
Action 2: look for spectacles_2153 around mousepad_214.
Action 3: Walk to computer_209.
Action 4: look for spectacles_2153 around computer_209.
Action 5: Walk to keyboard_211.
Action 6: look for spectacles_2153 around keyboard_211.
Action 7: Walk to desk_272.
Action 8: look for spectacles_2153 around desk_272.
Action 9: Walk to bookshelf_196.
Action 10: Open bookshelf_196.
Action 11: look for spectacles_2153 around bookshelf_196.
Action 12: Walk to bookshelf_124.
Action 13: Open bookshelf_124.
Action 14: look for spectacles_2153 around bookshelf_124.
Action 15: Walk to kitchen_counter_122.
Action 16: look for spectacles_2153 around kitchen_counter_122.
Action 17: Walk to spectacles_2153.
Action 18: Grab spectacles_2153.
Action 19: Walk to table_270.
Action 20: Put spectacles_2153 on table_270.
Action 21: Walk to spectacles_2153.
Action 22: Grab spectacles_2153.
Action 23: Walk to table_270.
Action 24: Put spectacles_2153 on table_270.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_in_home_office(table:item):
    # Function to check if a table is in the home office
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(table, room))
    return in_home_office

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles) and not close_char(char, spectacles)
        # Bind to the spectacles that are not close to the character

        bind coffee_table: item where:
            is_table(coffee_table) and is_in_home_office(coffee_table)
        # Bind to the table that is the coffee table in the home office

        walk_to(spectacles)
        # Move the character to where the spectacles are located

        grab(spectacles)
        # Pick up the spectacles

        walk_to(coffee_table)
        # Move the character to the coffee table in the home office

        put_on(spectacles, coffee_table)
        # Place the spectacles on the coffee table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_32_around_table_199(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

behavior find_chessboard_2070_around_tvstand_273(chessboard:item):
    goal: not unknown(chessboard)
    body:
        assert is_chessboard(chessboard)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==273
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(chessboard,tvstand_instance)
        else:
            exp(chessboard,tvstand_instance)
    eff:
        unknown[chessboard]=False
        close[chessboard,tvstand_instance]=True
        close[tvstand_instance,chessboard]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_table(table:item):
    # Function to determine if a table is a coffee table in the home office
    symbol is_coffee_table = exists room: item : (is_home_office(room) and inside(table, room) and is_table(table))
    return is_coffee_table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles
        
        bind coffee_table: item where:
            is_table(coffee_table) and is_coffee_table(coffee_table)
        # Select the coffee table in the home office
        
        if not inhand(spectacles):
            grab(spectacles)
            # If the spectacles are not already in hand, grab them

        if not on(spectacles, coffee_table):
            put_on(spectacles, coffee_table)
            # Put the spectacles on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_correct_coffee_table(table: item, home_office: item):
    # Check if the table is the correct coffee table inside the home office
    symbol correct_table = exists room: item : (is_table(table) and inside(table, home_office))
    return correct_table

behavior move_spectacles_to_coffee_table(spectacles: item, coffee_table: item):
    body:
        if not on(spectacles, coffee_table):
            grab(spectacles)
            put_on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        foreach table: item:
            if is_correct_coffee_table(table, home_office) and not visited(table):
                observe(table, "Check if this is the correct coffee table in the home office")
                bind coffee_table: item where:
                    is_correct_coffee_table(coffee_table, home_office)
                move_spectacles_to_coffee_table(spectacles, coffee_table)
                break

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_coffee_table(table:item):
    # Determine if a table is the coffee table in the home office
    symbol is_coffee=exists room: item : (is_home_office(room) and inside(table, room))
    return is_coffee

behavior move_spectacles_to_coffee_table(spectacles: item, coffee_table: item):
    body:
        if not on(spectacles, coffee_table):
            walk_to(spectacles)
            grab(spectacles)
            walk_to(coffee_table)
            put_on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles
        
        bind coffee_table: item where:
            is_table(coffee_table) and is_coffee_table(coffee_table)
        # Select coffee table in the home office
        
        move_spectacles_to_coffee_table(spectacles, coffee_table)
        # Move spectacles to the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_piano_bench_2062_around_bench_115(piano_bench:item):
    goal: not unknown(piano_bench)
    body:
        assert is_piano_bench(piano_bench)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==115
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(piano_bench,bench_instance)
        else:
            exp(piano_bench,bench_instance)
    eff:
        unknown[piano_bench]=False
        close[piano_bench,bench_instance]=True
        close[bench_instance,piano_bench]=True
    

behavior find_mat_203_around_kitchen_counter_119(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(mat,kitchen_counter_instance)
        else:
            exp(mat,kitchen_counter_instance)
    eff:
        unknown[mat]=False
        close[mat,kitchen_counter_instance]=True
        close[kitchen_counter_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_spectacles(spectacles:item, coffee_table:item):
    body:
        if inhand(spectacles):
            put_on(spectacles, coffee_table)
        else:
            grab(spectacles)
            put_on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles

        bind home_office: item where:
            is_home_office(home_office)
        # Select home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select coffee table in the home office

        walk_to(spectacles)
        grab(spectacles)
        walk_to(coffee_table)
        put_on(spectacles, coffee_table)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior move_spectacles(spectacles:item, coffee_table:item):
    body:
        if inhand(spectacles):
            put_on(spectacles, coffee_table)
        else:
            grab(spectacles)
            put_on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select spectacles

        bind home_office: item where:
            is_home_office(home_office)
        # Select home office

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select coffee table in the home office

        walk_to(spectacles)
        grab(spectacles)
        walk_to(coffee_table)
        put_on(spectacles, coffee_table)


##############################
From agent.py-> find a plan in act()
walk_executor(spectacles_2153)grab_executor(spectacles_2153)walk_executor(table_270)put_executor(spectacles_2153, table_270)
##############################
From agent.py
walk_executor(spectacles_2153)
Robot find: Robot is close to the spectacles_2153. Robot is close to the table_270. 
##############################
From agent.py
grab_executor(spectacles_2153)
Robot find: Robot is close to the spectacles_2153. Robot is close to the table_270. Grabbing spectacles_2153 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: Robot is close to the spectacles_2153. Robot is close to the table_270. Robot is close to the couch_269. 
##############################
From agent.py
put_executor(spectacles_2153, table_270)
Robot find: Robot is close to the spectacles_2153. Robot is close to the table_270. Robot is close to the couch_269. spectacles_2153 is close table_270. spectacles_2153 is on table_270. spectacles_2153 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to move the spectacles to the correct coffee table in the home office, as they are currently placed on a different table identified as table_270.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_book_on_table(table: item):
    # Function to check if there is a book on a specified table
    symbol has_book = exists o: item : (is_book(o) and on(o, table))
    return has_book

behavior put_book_on_table(book: item, table: item):
    body:
        if not on(book, table):
            put_on(book, table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and exists room: item: (is_home_office(room) and inside(coffee_table, room))
            # Select the coffee table in the home office

        if not exists book: item: (is_book(book) and on(book, coffee_table)):
            # Check if the book is already on the coffee table in the home office
            bind book: item where:
                is_book(book)
            walk_to(book)
            grab(book)
            walk_to(coffee_table)
            put_book_on_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2121_around_basket_for_clothes_2078(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
def is_correct_table(table:item):
    # Function to check if a table is the coffee table in the home office
    symbol is_in_home_office=exists room: item : is_home_office(room) and inside(table, room)
    return is_in_home_office and is_table(table) and surfaces(table)

def book_location_known(book: item):
    # Function to check if the location of the book is known
    symbol is_known=visited(book)
    return is_known

behavior find_and_place_book(table:item):
    body:
        bind book: item where:
            is_book(book)

        if not book_location_known(book):
            # If the location of the book is not known, explore to find it
            foreach location: item:
                if not visited(location):
                    observe(location, "Check is there any book here")
                    if visited(book):
                        break
                
        if not inhand(book):
            grab(book)
        put_on(book, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_correct_table(table)
        # Find the correct coffee table inside the home office

        find_and_place_book(table)
        # Find the book and place it on the correct coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_bookshelf_275(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

behavior find_clothes_underwear_2121_around_basket_for_clothes_2078(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        if not on(book, table):
            put_on(book, table)
            
behavior find_and_place_book(book_id:int, home_office:item):
    body:
        foreach book: item:
            if is_book(book) and id[book] == book_id:
                observe(book, "Check if book is in hand")
                if not inhand(book):
                    walk_to(book)
                    grab(book)
                walk_to(home_office)
                bind coffee_table: item where:
                    is_table(coffee_table) and inside(coffee_table, home_office)
                put_book_on_table(book, coffee_table)
        
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Assuming book_id is known from prior knowledge or observation
        find_and_place_book(1234, home_office)  # Replace 1234 with the actual book ID

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_book_2136(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind book_instance:item where:
            is_book(book_instance) and id[book_instance]==2136
        achieve close_char(char,book_instance)
        if can_open(book_instance):
            achieve_once open(book_instance)
            exp(diary,book_instance)
        else:
            exp(diary,book_instance)
    eff:
        unknown[diary]=False
        close[diary,book_instance]=True
        close[book_instance,diary]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_home_office(item: item):
    # Check if the item is inside the home office
    symbol inside_office=exists room: item : (is_home_office(room) and inside(item, room))
    return inside_office

behavior move_spectacles_to_home_office_table(spectacles: item, coffee_table: item):
    body:
        if not on(spectacles, coffee_table):
            if not inside_char(char, coffee_table):
                walk_to(coffee_table)
            if not inhand(spectacles):
                grab(spectacles)
            put_on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind coffee_table: item where:
            is_table(coffee_table) and is_in_home_office(coffee_table)
        
        if not inside_char(char, book):
            walk_to(book)
        if not inhand(book):
            grab(book)
        walk_to(coffee_table)
        put_on(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_in_home_office(item: item):
    # Check if the item is inside the home office
    symbol inside_office=exists room: item : (is_home_office(room) and inside(item, room))
    return inside_office

behavior move_spectacles_to_home_office_table(spectacles: item, coffee_table: item):
    body:
        if not on(spectacles, coffee_table):
            if not inside_char(char, coffee_table):
                walk_to(coffee_table)
            if not inhand(spectacles):
                grab(spectacles)
            put_on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind coffee_table: item where:
            is_table(coffee_table) and is_in_home_office(coffee_table)
        
        if not inside_char(char, book):
            walk_to(book)
        if not inhand(book):
            grab(book)
        walk_to(coffee_table)
        put_on(book, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_270)put_executor(book_2136, table_270)
##############################
From agent.py
walk_executor(book_2136)
Robot find: Robot is close to the book_2136. Robot is close to the bookshelf_124. 
##############################
From agent.py
grab_executor(book_2136)
Robot find: Robot is close to the book_2136. Robot is close to the bookshelf_124. Grabbing book_2136 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: Robot is close to the book_2136. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(book_2136, table_270)
Robot find: Robot is close to the book_2136. Robot is close to the couch_269. Robot is close to the table_270. book_2136 is on table_270. table_270 is close book_2136. book_2136 is close table_270. book_2136 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to locate the designated coffee table in the home office and place the book on it. Currently, the book was placed on table_270, which is not specified as the coffee table in the home office.
##############################
From agent.py
Human Instruction: You need to locate the designated coffee table in the home office and place the book on it. Currently, the book was placed on table_270, which is not specified as the coffee table in the home office.

The actions you have taken:
Action 1: Walk to mousepad_214.
Action 2: look for spectacles_2153 around mousepad_214.
Action 3: Walk to computer_209.
Action 4: look for spectacles_2153 around computer_209.
Action 5: Walk to keyboard_211.
Action 6: look for spectacles_2153 around keyboard_211.
Action 7: Walk to desk_272.
Action 8: look for spectacles_2153 around desk_272.
Action 9: Walk to bookshelf_196.
Action 10: Open bookshelf_196.
Action 11: look for spectacles_2153 around bookshelf_196.
Action 12: Walk to bookshelf_124.
Action 13: Open bookshelf_124.
Action 14: look for spectacles_2153 around bookshelf_124.
Action 15: Walk to kitchen_counter_122.
Action 16: look for spectacles_2153 around kitchen_counter_122.
Action 17: Walk to spectacles_2153.
Action 18: Grab spectacles_2153.
Action 19: Walk to table_270.
Action 20: Put spectacles_2153 on table_270.
Action 21: Walk to spectacles_2153.
Action 22: Grab spectacles_2153.
Action 23: Walk to table_270.
Action 24: Put spectacles_2153 on table_270.
Action 25: Walk to spectacles_2153.
Action 26: Grab spectacles_2153.
Action 27: Walk to table_270.
Action 28: Put spectacles_2153 on table_270.
Action 29: Walk to book_2136.
Action 30: Grab book_2136.
Action 31: Walk to table_270.
Action 32: Put book_2136 on table_270.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2121_around_basket_for_clothes_2078(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        if not on(book, table):
            put_on(book, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table)
        # Select any table (presumably coffee table in the home office)
        
        bind book: item where:
            is_book(book)
        # Select the book to be placed on the table
        
        place_book_on_table(book, table)
        # Place the book on the selected table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_book_on_table(book:item, table:item):
    body:
        if not on(book, table):
            put_on(book, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table)
        # Select any table (presumably coffee table in the home office)
        
        bind book: item where:
            is_book(book)
        # Select the book to be placed on the table
        
        place_book_on_table(book, table)
        # Place the book on the selected table

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2121_around_basket_for_clothes_2078(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

#exp_behavior_end

#goal_representation

behavior move_book_to_coffee_table(book:item, coffee_table:item):
    body:
        if not on(book, coffee_table):
            put_on(book, coffee_table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_table(coffee_table) and is_home_office(coffee_table)
        bind book: item where:
            is_book(book)
        move_book_to_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_designated_coffee_table(table:item):
    # Function to check if a table is the designated coffee table in the home office
    symbol is_office_coffee_table=exists room: item : (is_home_office(room) and inside(table, room))
    return is_office_coffee_table

behavior move_book_to_coffee_table(book:item, table:item):
    body:
        if not on(book, table):
            put_on(book, table) # Place the book on the designated coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind designated_coffee_table: item where:
            is_table(designated_coffee_table) and is_designated_coffee_table(designated_coffee_table)
        # Select the designated coffee table in the home office

        walk_to(book)
        grab(book) # Pick up the book

        walk_to(designated_coffee_table)
        move_book_to_coffee_table(book, designated_coffee_table)
        # Move the book to the designated coffee table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_designated_coffee_table(table:item):
    # Function to check if a table is the designated coffee table in the home office
    symbol is_office_coffee_table=exists room: item : (is_home_office(room) and inside(table, room))
    return is_office_coffee_table

behavior move_book_to_coffee_table(book:item, table:item):
    body:
        if not on(book, table):
            put_on(book, table) # Place the book on the designated coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind designated_coffee_table: item where:
            is_table(designated_coffee_table) and is_designated_coffee_table(designated_coffee_table)
        # Select the designated coffee table in the home office

        walk_to(book)
        grab(book) # Pick up the book

        walk_to(designated_coffee_table)
        move_book_to_coffee_table(book, designated_coffee_table)
        # Move the book to the designated coffee table in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_270)put_executor(book_2136, table_270)
##############################
From agent.py
walk_executor(book_2136)
Robot find: Robot is close to the book_2136. Robot is close to the table_270. 
##############################
From agent.py
grab_executor(book_2136)
Robot find: Robot is close to the book_2136. Robot is close to the table_270. Grabbing book_2136 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: Robot is close to the book_2136. Robot is close to the table_270. Robot is close to the couch_269. 
##############################
From agent.py
put_executor(book_2136, table_270)
Robot find: Robot is close to the book_2136. Robot is close to the table_270. Robot is close to the couch_269. book_2136 is on table_270. book_2136 is close table_270. book_2136 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to locate the designated coffee table in the home office and place the book on it. Currently, the book was placed on table_270, which is not specified as the coffee table in the home office.
##############################
From agent.py
Human Instruction: You need to locate the designated coffee table in the home office and place the book on it. Currently, the book was placed on table_270, which is not specified as the coffee table in the home office.

The actions you have taken:
Action 1: Walk to mousepad_214.
Action 2: look for spectacles_2153 around mousepad_214.
Action 3: Walk to computer_209.
Action 4: look for spectacles_2153 around computer_209.
Action 5: Walk to keyboard_211.
Action 6: look for spectacles_2153 around keyboard_211.
Action 7: Walk to desk_272.
Action 8: look for spectacles_2153 around desk_272.
Action 9: Walk to bookshelf_196.
Action 10: Open bookshelf_196.
Action 11: look for spectacles_2153 around bookshelf_196.
Action 12: Walk to bookshelf_124.
Action 13: Open bookshelf_124.
Action 14: look for spectacles_2153 around bookshelf_124.
Action 15: Walk to kitchen_counter_122.
Action 16: look for spectacles_2153 around kitchen_counter_122.
Action 17: Walk to spectacles_2153.
Action 18: Grab spectacles_2153.
Action 19: Walk to table_270.
Action 20: Put spectacles_2153 on table_270.
Action 21: Walk to spectacles_2153.
Action 22: Grab spectacles_2153.
Action 23: Walk to table_270.
Action 24: Put spectacles_2153 on table_270.
Action 25: Walk to spectacles_2153.
Action 26: Grab spectacles_2153.
Action 27: Walk to table_270.
Action 28: Put spectacles_2153 on table_270.
Action 29: Walk to book_2136.
Action 30: Grab book_2136.
Action 31: Walk to table_270.
Action 32: Put book_2136 on table_270.
Action 33: Walk to book_2136.
Action 34: Grab book_2136.
Action 35: Walk to table_270.
Action 36: Put book_2136 on table_270.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_underwear_2121_around_basket_for_clothes_2078(clothes_underwear:item):
    goal: not unknown(clothes_underwear)
    body:
        assert is_clothes_underwear(clothes_underwear)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_underwear,basket_for_clothes_instance)
        else:
            exp(clothes_underwear,basket_for_clothes_instance)
    eff:
        unknown[clothes_underwear]=False
        close[clothes_underwear,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_underwear]=True
    

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_move_book(coffee_table:item, book:item):
    body:
        if not on(book, coffee_table):
            walk_to(book)
            grab(book)
            walk_to(coffee_table)
            put_on(book, coffee_table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_table(coffee_table)
        # Assume the correct table to place items as coffee table

        bind book: item where:
            is_book(book)

        if not on(book, coffee_table):
            find_and_move_book(coffee_table, book)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_and_move_book(coffee_table:item, book:item):
    body:
        if not on(book, coffee_table):
            walk_to(book)
            grab(book)
            walk_to(coffee_table)
            put_on(book, coffee_table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_table(coffee_table)
        # Assume the correct table to place items as coffee table

        bind book: item where:
            is_book(book)

        if not on(book, coffee_table):
            find_and_move_book(coffee_table, book)

##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_bookshelf_275(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book to move
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office room
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table in the home office
        if not close_char(char, book):
            walk_to(book)
        grab(book)
        if not close_char(char, coffee_table):
            walk_to(coffee_table)
        put_on(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book to move
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office room
        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table in the home office
        if not close_char(char, book):
            walk_to(book)
        grab(book)
        if not close_char(char, coffee_table):
            walk_to(coffee_table)
        put_on(book, coffee_table)

##############################
From agent.py-> find a plan in act()
grab_executor(book_2136)put_executor(book_2136, table_270)
##############################
From agent.py
grab_executor(book_2136)
Robot find: Robot is close to the book_2136. Robot is close to the table_270. Robot is close to the couch_269. Grabbing book_2136 by right hand. 
##############################
From agent.py
put_executor(book_2136, table_270)
Robot find: Robot is close to the book_2136. Robot is close to the table_270. Robot is close to the couch_269. book_2136 is on table_270. book_2136 is close table_270. book_2136 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to locate the designated coffee table in the home office and place the book on it. Currently, the book was placed on table_270, which is not specified as the coffee table in the home office.
##############################
Task Summary:
Task Goal:
Find my spectacles and put it on the coffe table in home office. Then find the book and put it on the coffe table in home office.
Action History:
['walk_executor(mousepad_214)', 'walk_executor(computer_209)', 'walk_executor(keyboard_211)', 'walk_executor(desk_272)', 'walk_executor(bookshelf_196)', 'open_executor(bookshelf_196)', 'walk_executor(bookshelf_124)', 'open_executor(bookshelf_124)', 'walk_executor(kitchen_counter_122)', 'walk_executor(spectacles_2153)', 'grab_executor(spectacles_2153)', 'walk_executor(table_270)', 'put_executor(spectacles_2153, table_270)', 'walk_executor(spectacles_2153)', 'grab_executor(spectacles_2153)', 'walk_executor(table_270)', 'put_executor(spectacles_2153, table_270)', 'walk_executor(spectacles_2153)', 'grab_executor(spectacles_2153)', 'walk_executor(table_270)', 'put_executor(spectacles_2153, table_270)', 'walk_executor(book_2136)', 'grab_executor(book_2136)', 'walk_executor(table_270)', 'put_executor(book_2136, table_270)', 'walk_executor(book_2136)', 'grab_executor(book_2136)', 'walk_executor(table_270)', 'put_executor(book_2136, table_270)', 'grab_executor(book_2136)', 'put_executor(book_2136, table_270)']
Time info:
Time consume: 370 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 19
goal correct times: 0
action_num: 31

Task complete rate:
1
Scene_id: 1
##############################
