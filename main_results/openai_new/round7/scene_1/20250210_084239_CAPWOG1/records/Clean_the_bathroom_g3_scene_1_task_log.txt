From agent.py
Reset goals: The sub-goals are: 
['Wipe the toilet with toilet paper, then throw the paper into the toilet.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet(toilet:item, toilet_paper:item):
    body:
        if not clean(toilet):
            wipe(toilet)

behavior discard_toilet_paper(toilet_paper:item, toilet:item):
    body:
        if not inside(toilet_paper, toilet):
            put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select a toilet
        
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select toilet paper

        wipe_toilet(toilet, toilet_paper)
        discard_toilet_paper(toilet_paper, toilet)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior wipe_toilet(toilet:item, toilet_paper:item):
    body:
        if not clean(toilet):
            wipe(toilet)

behavior discard_toilet_paper(toilet_paper:item, toilet:item):
    body:
        if not inside(toilet_paper, toilet):
            put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select a toilet
        
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select toilet paper

        wipe_toilet(toilet, toilet_paper)
        discard_toilet_paper(toilet_paper, toilet)

##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_17)open_executor(bathroom_cabinet_17)exp(toilet_paper_2076, bathroom_cabinet_17)walk_executor(toilet_15)open_executor(toilet_15)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
walk_executor(bathroom_cabinet_17)
Robot find: drawing_33, Robot is close to the bathroom_cabinet_17. 
##############################
From agent.py
open_executor(bathroom_cabinet_17)
Robot find: tooth_paste_2059, Robot is close to the bathroom_cabinet_17. Robot is close to the tooth_paste_2059. bathroom_cabinet_17 is opened. 
##############################
From agent.py
exp(toilet_paper_2076, bathroom_cabinet_17)
Fail to find toilet_paper_2076 around bathroom_cabinet_17. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(toilet_paper_2076, cupboard_118)walk_executor(toilet_15)open_executor(toilet_15)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: pot_78, Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(toilet_paper_2076, cupboard_118)
Fail to find toilet_paper_2076 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_15)open_executor(toilet_15)exp(toilet_paper_2076, toilet_15)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
walk_executor(toilet_15)
Robot find: toilet_paper_2076, Robot is close to the toilet_15. 
##############################
From agent.py
open_executor(toilet_15)
Robot find: Robot is close to the toilet_15. toilet_15 is opened. 
##############################
From agent.py
exp(toilet_paper_2076, toilet_15)
Find toilet_paper_2076. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)walk_executor(toilet_15)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
walk_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. 
##############################
From agent.py
grab_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. Grabbing toilet_paper_2076 by right hand. 
##############################
From agent.py
walk_executor(toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. 
##############################
From agent.py
putin_executor(toilet_paper_2076, toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. toilet_paper_2076 is inside toilet_15. toilet_paper_2076 is close toilet_15. toilet_paper_2076 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wipe the toilet with the toilet paper before putting it into the toilet.
##############################
From agent.py
Human Instruction: You need to wipe the toilet with the toilet paper before putting it into the toilet.

The actions you have taken:
Action 1: Walk to bathroom_cabinet_17.
Action 2: Open bathroom_cabinet_17.
Action 3: look for toilet_paper_2076 around bathroom_cabinet_17.
Action 4: Walk to cupboard_118.
Action 5: Open cupboard_118.
Action 6: look for toilet_paper_2076 around cupboard_118.
Action 7: Walk to toilet_15.
Action 8: Open toilet_15.
Action 9: look for toilet_paper_2076 around toilet_15.
Action 10: Walk to toilet_paper_2076.
Action 11: Grab toilet_paper_2076.
Action 12: Walk to toilet_15.
Action 13: Put toilet_paper_2076 into toilet_15.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_paper(toilet_paper: item, toilet: item):
    body:
        if inhand(toilet_paper):
            wipe(toilet)
            put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and inhand(toilet_paper)
        bind toilet: item where:
            is_toilet(toilet)
            # Assume the toilet is the correct target here, as no id is provided
        wipe_toilet_with_paper(toilet_paper, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_bathroom_item_clean(item: item):
    # Function to check if the bathroom item is clean
    return clean(item)

def is_toilet_paper_grabbable(toilet_paper: item):
    # Function to check if the toilet paper is grabbable
    return grabbable(toilet_paper)

behavior grab_toilet_paper(toilet_paper: item):
    body:
        if not inhand(toilet_paper) and is_toilet_paper_grabbable(toilet_paper):
            grab(toilet_paper)
            # Grab the toilet paper if it is not in hand and is grabbable

behavior throw_paper_in_toilet(toilet_paper: item, toilet: item):
    body:
        if inhand(toilet_paper) and is_toilet(toilet):
            put_inside(toilet_paper, toilet)
            empty_a_hand()
            # Throw the paper into the toilet and empty the hand

behavior wipe_toilet(toilet: item, toilet_paper: item):
    body:
        if dirty(toilet) and inhand(toilet_paper):
            wipe(toilet)
            # Wipe the toilet if it is dirty and toilet paper is in hand

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and not dirty(toilet_paper)
        # Find the toilet and clean toilet paper
        
        walk_to(toilet_paper)
        grab_toilet_paper(toilet_paper)
        walk_to(toilet)
        wipe_toilet(toilet, toilet_paper)
        throw_paper_in_toilet(toilet_paper, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2052_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

behavior find_soap_2125_around_faucet_121(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==121
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(soap,faucet_instance)
        else:
            exp(soap,faucet_instance)
    eff:
        unknown[soap]=False
        close[soap,faucet_instance]=True
        close[faucet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_paper(toilet:item, toilet_paper:item):
    body:
        if not clean(toilet) and inhand(toilet_paper):
            wipe(toilet)
            # Use the toilet paper to wipe the toilet

behavior throw_paper_into_toilet(toilet:item, toilet_paper:item):
    body:
        if inhand(toilet_paper):
            put_inside(toilet_paper, toilet)
            # Dispose of the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet]==15
        # Select the toilet with ID 15

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper]==2076
        # Select the toilet paper with ID 2076

        walk_to(toilet)
        # Get close to the toilet

        if not open(toilet):
            opens(toilet)
            # Ensure the toilet is open for disposal

        grab(toilet_paper)
        # Take the toilet paper in hand

        wipe_toilet_with_paper(toilet, toilet_paper)
        # Wipe the toilet with the paper

        throw_paper_into_toilet(toilet, toilet_paper)
        # Throw the wiped paper into the toilet

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wipe_toilet_with_paper(toilet:item, toilet_paper:item):
    body:
        if not clean(toilet) and inhand(toilet_paper):
            wipe(toilet)
            # Use the toilet paper to wipe the toilet

behavior throw_paper_into_toilet(toilet:item, toilet_paper:item):
    body:
        if inhand(toilet_paper):
            put_inside(toilet_paper, toilet)
            # Dispose of the toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet]==15
        # Select the toilet with ID 15

        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper]==2076
        # Select the toilet paper with ID 2076

        walk_to(toilet)
        # Get close to the toilet

        if not open(toilet):
            opens(toilet)
            # Ensure the toilet is open for disposal

        grab(toilet_paper)
        # Take the toilet paper in hand

        wipe_toilet_with_paper(toilet, toilet_paper)
        # Wipe the toilet with the paper

        throw_paper_into_toilet(toilet, toilet_paper)
        # Throw the wiped paper into the toilet

##############################
From agent.py-> find a plan in act()
walk_executor(toilet_15)walk_executor(toilet_paper_2076)grab_executor(toilet_paper_2076)putin_executor(toilet_paper_2076, toilet_15)
##############################
From agent.py
walk_executor(toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. 
##############################
From agent.py
walk_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. 
##############################
From agent.py
grab_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. Grabbing toilet_paper_2076 by right hand. 
##############################
From agent.py
putin_executor(toilet_paper_2076, toilet_15)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. toilet_paper_2076 is inside toilet_15. toilet_paper_2076 is close toilet_15. toilet_paper_2076 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to wipe the toilet with the toilet paper before putting it into the toilet.
##############################
From agent.py
Human Instruction: You need to wipe the toilet with the toilet paper before putting it into the toilet.

The actions you have taken:
Action 1: Walk to bathroom_cabinet_17.
Action 2: Open bathroom_cabinet_17.
Action 3: look for toilet_paper_2076 around bathroom_cabinet_17.
Action 4: Walk to cupboard_118.
Action 5: Open cupboard_118.
Action 6: look for toilet_paper_2076 around cupboard_118.
Action 7: Walk to toilet_15.
Action 8: Open toilet_15.
Action 9: look for toilet_paper_2076 around toilet_15.
Action 10: Walk to toilet_paper_2076.
Action 11: Grab toilet_paper_2076.
Action 12: Walk to toilet_15.
Action 13: Put toilet_paper_2076 into toilet_15.
Action 14: Walk to toilet_15.
Action 15: Walk to toilet_paper_2076.
Action 16: Grab toilet_paper_2076.
Action 17: Put toilet_paper_2076 into toilet_15.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2126_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior wipe_toilet_with_toilet_paper(toilet_paper:item, toilet:item):
    body:
        if not clean(toilet):
            wipe(toilet)

behavior throw_toilet_paper(toilet_paper:item, toilet:item):
    body:
        if not inside(toilet_paper, toilet):
            put_inside(toilet_paper, toilet)

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet) and id[toilet]==15
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper) and id[toilet_paper]==2076
        wipe_toilet_with_toilet_paper(toilet_paper, toilet)
        throw_toilet_paper(toilet_paper, toilet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_rag_2025_around_bathroom_counter_18(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(rag,bathroom_counter_instance)
        else:
            exp(rag,bathroom_counter_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_counter_instance]=True
        close[bathroom_counter_instance,rag]=True
    

behavior find_soap_2126_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def is_dirty(toilet:item):
    # Function to check if the toilet is dirty
    symbol dirty_toilet=exists o: item : (is_toilet(o) and dirty(o))
    return dirty_toilet

behavior wipe_toilet_with_paper(toilet:item, toilet_paper:item):
    body:
        if dirty(toilet) and inhand(toilet_paper):
            wipe(toilet)  # Wipe the toilet to clean it

behavior discard_toilet_paper(toilet:item, toilet_paper:item):
    body:
        if dirty(toilet_paper):
            put_inside(toilet_paper, toilet)  # Discard the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select a toilet
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select toilet paper
        
        if not inhand(toilet_paper):
            grab(toilet_paper)  # Grab the toilet paper
        
        wipe_toilet_with_paper(toilet, toilet_paper)
        discard_toilet_paper(toilet, toilet_paper)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_dirty(toilet:item):
    # Function to check if the toilet is dirty
    symbol dirty_toilet=exists o: item : (is_toilet(o) and dirty(o))
    return dirty_toilet

behavior wipe_toilet_with_paper(toilet:item, toilet_paper:item):
    body:
        if dirty(toilet) and inhand(toilet_paper):
            wipe(toilet)  # Wipe the toilet to clean it

behavior discard_toilet_paper(toilet:item, toilet_paper:item):
    body:
        if dirty(toilet_paper):
            put_inside(toilet_paper, toilet)  # Discard the used toilet paper into the toilet

behavior __goal__():
    body:
        bind toilet: item where:
            is_toilet(toilet)
        # Select a toilet
        bind toilet_paper: item where:
            is_toilet_paper(toilet_paper)
        # Select toilet paper
        
        if not inhand(toilet_paper):
            grab(toilet_paper)  # Grab the toilet paper
        
        wipe_toilet_with_paper(toilet, toilet_paper)
        discard_toilet_paper(toilet, toilet_paper)

##############################
From agent.py-> find a plan in act()
grab_executor(toilet_paper_2076)
##############################
From agent.py
grab_executor(toilet_paper_2076)
Robot find: Robot is close to the toilet_paper_2076. Robot is close to the toilet_15. Grabbing toilet_paper_2076 by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to wipe the toilet with the toilet paper before putting it into the toilet. So far, the robot only grabbed the toilet paper and has put it into the toilet without wiping.
##############################
Task Summary:
Task Goal:
Wipe the toilet with toilet paper. Then throw it into the toilet.
Action History:
['walk_executor(bathroom_cabinet_17)', 'open_executor(bathroom_cabinet_17)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(toilet_15)', 'open_executor(toilet_15)', 'walk_executor(toilet_paper_2076)', 'grab_executor(toilet_paper_2076)', 'walk_executor(toilet_15)', 'putin_executor(toilet_paper_2076, toilet_15)', 'walk_executor(toilet_15)', 'walk_executor(toilet_paper_2076)', 'grab_executor(toilet_paper_2076)', 'putin_executor(toilet_paper_2076, toilet_15)', 'grab_executor(toilet_paper_2076)']
Time info:
Time consume: 117 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0
action_num: 15

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 0 steps
Action Completion Rate: 0.0
Scene_id: 1
##############################
