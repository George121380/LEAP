From agent.py
Reset goals: The sub-goals are: 
['Make sure there is at least one light on in every room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_laser_pointer_2034_around_home_office_241(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(laser_pointer,home_office_instance)
        else:
            exp(laser_pointer,home_office_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,home_office_instance]=True
        close[home_office_instance,laser_pointer]=True
    

behavior find_stereo_2050_around_home_office_241(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(stereo,home_office_instance)
        else:
            exp(stereo,home_office_instance)
    eff:
        unknown[stereo]=False
        close[stereo,home_office_instance]=True
        close[home_office_instance,stereo]=True
    

behavior find_remote_control_2124_around_home_office_241(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(remote_control,home_office_instance)
        else:
            exp(remote_control,home_office_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,home_office_instance]=True
        close[home_office_instance,remote_control]=True
    

behavior find_dvd_player_2130_around_television_281(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==281
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(dvd_player,television_instance)
        else:
            exp(dvd_player,television_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,television_instance]=True
        close[television_instance,dvd_player]=True
    

#exp_behavior_end

#goal_representation
def has_light_in_room(room:item):
    # Function to check if there is a light on in a given room
    symbol has_light=exists l: item : (is_light(l) and inside(l, room) and is_on(l))
    return has_light

behavior ensure_light_on(l:item, room:item):
    body:
        if not is_on(l):
            achieve_once is_on(l)
        # Turn on the light if its not already on
        
behavior __goal__():
    body:
        foreach room: item:
            if not has_light_in_room(room):
                foreach light: item:
                    if is_light(light) and inside(light, room):
                        ensure_light_on(light, room)
                # Ensure theres at least one light on in every room
#goal_representation_end

##############################
From agent.py->reset_goal
def has_light_in_room(room:item):
    # Function to check if there is a light on in a given room
    symbol has_light=exists l: item : (is_light(l) and inside(l, room) and is_on(l))
    return has_light

behavior ensure_light_on(l:item, room:item):
    body:
        if not is_on(l):
            achieve_once is_on(l)
        # Turn on the light if its not already on
        
behavior __goal__():
    body:
        foreach room: item:
            if not has_light_in_room(room):
                foreach light: item:
                    if is_light(light) and inside(light, room):
                        ensure_light_on(light, room)
                # Ensure theres at least one light on in every room
##############################
From agent.py-> find a plan in act()
walk_executor(light_39)switchon_executor(light_39)walk_executor(light_73)switchon_executor(light_73)walk_executor(light_212)switchon_executor(light_212)walk_executor(light_283)switchon_executor(light_283)
##############################
From agent.py
walk_executor(light_39)
Robot find: Robot is close to the light_39. 
##############################
From agent.py
switchon_executor(light_39)
Robot find: Robot is close to the light_39. light_39 is turned on. 
##############################
From agent.py
walk_executor(light_73)
Robot find: Robot is close to the light_73. 
##############################
From agent.py
switchon_executor(light_73)
Robot find: Robot is close to the light_73. light_73 is turned on. 
##############################
From agent.py
walk_executor(light_212)
Robot find: drawing_202, Robot is close to the light_212. 
##############################
From agent.py
switchon_executor(light_212)
Robot find: Robot is close to the light_212. light_212 is turned on. 
##############################
From agent.py
walk_executor(light_283)
Robot find: mat_284, Robot is close to the light_283. 
##############################
From agent.py
switchon_executor(light_283)
Robot find: Robot is close to the light_283. light_283 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make sure there is at least one light on in every room.
Action History:
['walk_executor(light_39)', 'switchon_executor(light_39)', 'walk_executor(light_73)', 'switchon_executor(light_73)', 'walk_executor(light_212)', 'switchon_executor(light_212)', 'walk_executor(light_283)', 'switchon_executor(light_283)']
Time info:
Time consume: 73 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 1
goal correct times: 0
action_num: 8

Task complete rate:
1
Scene_id: 1
##############################
