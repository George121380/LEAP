From agent.py
Reset goals: The sub-goals are: 
['Find the book and put it on the table in home office. Then turn on the light in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2137_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_item_on_table(item:item, table:item):
    body:
        achieve_once on(item, table)

behavior turn_on_light(light:item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind table: item where:
            is_table(table) and is_home_office(target_room) and inside(table, target_room)
        # Select a table in the home office

        bind light: item where:
            is_light(light) and is_home_office(target_room) and inside(light, target_room)
        # Select a light in the home office

        place_item_on_table(book, table) # Place the book on the table in the home office
        turn_on_light(light) # Turn on the light in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2137_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def inside_home_office(item: item):
    # Function to check if an item is inside the home office
    symbol inside_office = exists room: item : (is_home_office(room) and inside(item, room))
    return inside_office

behavior find_and_place_book(book: item, home_office: item, table: item):
    body:
        achieve_once inside(book, home_office) # Ensure the book is inside the home office
        achieve_once on(book, table) # Place the book on the table

behavior turn_on_light(light: item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        
        bind table: item where:
            is_table(table) and inside_home_office(table)
        # Select a table in the home office

        bind home_office: item where:
            is_home_office(home_office)

        bind light: item where:
            is_light(light) and inside_home_office(light)
        # Select a light in the home office
        
        find_and_place_book(book, home_office, table)
        turn_on_light(light)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2137_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve_once on(book, table) # Place the book on the table

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn on the light

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table in the home office

        bind book: item where:
            is_book(book) and inside(book, home_office)
        # Select a book in the home office

        bind light: item where:
            is_light(light) and inside(light, home_office)
        # Select a light in the home office

        place_book_on_table(book, table)
        turn_on_light(light)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2137_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_iron_2161_around_ironing_board_2144(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_chair_271_around_couch_198(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(chair,couch_instance)
        else:
            exp(chair,couch_instance)
    eff:
        unknown[chair]=False
        close[chair,couch_instance]=True
        close[couch_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_home_office(obj:item):
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(obj, room))
    return in_home_office

behavior put_on_table(obj:item, table:item):
    body:
        achieve_once on(obj, table)

behavior turn_on_light(light:item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Bind any item that is a book
        
        bind table: item where:
            is_table(table) and is_in_home_office(table)
        # Bind a table in the home office

        bind light: item where:
            is_light(light) and is_in_home_office(light)
        # Bind a light in the home office

        put_on_table(book, table)
        turn_on_light(light)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_in_home_office(obj:item):
    symbol in_home_office=exists room: item : (is_home_office(room) and inside(obj, room))
    return in_home_office

behavior put_on_table(obj:item, table:item):
    body:
        achieve_once on(obj, table)

behavior turn_on_light(light:item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Bind any item that is a book
        
        bind table: item where:
            is_table(table) and is_in_home_office(table)
        # Bind a table in the home office

        bind light: item where:
            is_light(light) and is_in_home_office(light)
        # Bind a light in the home office

        put_on_table(book, table)
        turn_on_light(light)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_124)open_executor(bookshelf_124)exp(book_2136, bookshelf_124)walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_270)put_executor(book_2136, table_270)walk_executor(light_283)switchon_executor(light_283)
##############################
From agent.py
walk_executor(bookshelf_124)
Robot find: book_2136, envelope_2055, book_2137, drawing_110, drawing_111, Robot is close to the bookshelf_124. 
##############################
From agent.py
open_executor(bookshelf_124)
Robot find: Robot is close to the bookshelf_124. bookshelf_124 is opened. 
##############################
From agent.py
exp(book_2136, bookshelf_124)
Find book_2136. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_270)put_executor(book_2136, table_270)walk_executor(light_283)switchon_executor(light_283)
##############################
From agent.py
walk_executor(book_2136)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2136. 
##############################
From agent.py
grab_executor(book_2136)
Robot find: Robot is close to the bookshelf_124. Robot is close to the book_2136. Grabbing book_2136 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot find: shoes_2033, shampoo_2019, pillow_286, pencil_2014, phone_2017, pillow_287, drawing_288, brush_2002, Robot is close to the book_2136. Robot is close to the couch_269. Robot is close to the table_270. 
##############################
From agent.py
put_executor(book_2136, table_270)
Robot find: Robot is close to the book_2136. Robot is close to the couch_269. Robot is close to the table_270. book_2136 is on table_270. table_270 is close book_2136. book_2136 is close table_270. book_2136 released by right hand. 
##############################
From agent.py
walk_executor(light_283)
Robot find: mat_284, Robot is close to the light_283. 
##############################
From agent.py
switchon_executor(light_283)
Robot find: Robot is close to the light_283. light_283 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Find the book and put it on the table in home office. Then turn on the light in the home office.
Action History:
['walk_executor(bookshelf_124)', 'open_executor(bookshelf_124)', 'walk_executor(book_2136)', 'grab_executor(book_2136)', 'walk_executor(table_270)', 'put_executor(book_2136, table_270)', 'walk_executor(light_283)', 'switchon_executor(light_283)']
Time info:
Time consume: 80 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 0
action_num: 8

Task complete rate:
1
Scene_id: 1
##############################
