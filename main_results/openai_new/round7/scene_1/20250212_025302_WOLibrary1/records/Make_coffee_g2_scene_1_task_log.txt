From agent.py
Reset goals: The sub-goals are: 
['1. Brew a cup of coffee using the coffee maker.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2065_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior brew_coffee(coffe_maker:item):
    body:
        achieve plugged(coffe_maker) # Ensure the coffee maker is plugged in
        achieve is_on(coffe_maker) # Turn on the coffee maker
        achieve clean(coffe_maker) # Ensure the coffee maker is clean
        achieve closed(coffe_maker) # Ensure the coffee maker is closed
        achieve has_water(coffe_maker) # Ensure the coffee maker has water
        achieve_once inside(coffee, coffe_maker) # Brew coffee inside the coffee maker

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select a coffee maker
        brew_coffee(coffe_maker) # Brew a cup of coffee using the coffee maker

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffee; available variables: [Variable<coffe_maker: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2053_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation

behavior brew_coffee(coffee_maker:item, coffee:item):
    body:
        achieve plugged(coffee_maker) # Ensure the coffee maker is plugged in
        achieve is_on(coffee_maker) # Turn on the coffee maker
        achieve clean(coffee_maker) # Ensure the coffee maker is clean
        achieve closed(coffee_maker) # Ensure the coffee maker is closed
        achieve has_water(coffee_maker) # Ensure the coffee maker has water
        achieve_once inside(coffee, coffee_maker) # Brew coffee inside the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        bind coffee: item where:
            is_coffee_filter(coffee)
        # Select a coffee filter
        brew_coffee(coffee_maker, coffee) # Brew a cup of coffee using the coffee maker

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2049_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker: item):
    body:
        achieve plugged(coffee_maker) 
        # Ensure the coffee maker is plugged in

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker) 
        # Turn on the coffee maker

behavior brew_coffee(coffee_maker: item, cup: item):
    body:
        achieve has_water(cup) 
        # Brew coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        plug_in_coffee_maker(coffee_maker)
        turn_on_coffee_maker(coffee_maker)
        brew_coffee(coffee_maker, cup)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior plug_in_coffee_maker(coffee_maker: item):
    body:
        achieve plugged(coffee_maker) 
        # Ensure the coffee maker is plugged in

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker) 
        # Turn on the coffee maker

behavior brew_coffee(coffee_maker: item, cup: item):
    body:
        achieve has_water(cup) 
        # Brew coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        plug_in_coffee_maker(coffee_maker)
        turn_on_coffee_maker(coffee_maker)
        brew_coffee(coffee_maker, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)switchon_executor(coffe_maker_130)walk_executor(cupboard_118)open_executor(cupboard_118)exp(cup_2132, cupboard_118)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
switchon_executor(coffe_maker_130)
Robot find: Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is turned on. 
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(cup_2132, cupboard_118)
Fail to find cup_2132 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(walllamp_139)exp(cup_2132, walllamp_139)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(walllamp_139)
Robot find: Robot is close to the walllamp_139. 
##############################
From agent.py
exp(cup_2132, walllamp_139)
Fail to find cup_2132 around walllamp_139. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(cup_2132, kitchen_counter_119)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_119)
Fail to find cup_2132 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(cup_2132, kitchen_counter_123)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_123)
Fail to find cup_2132 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_120)exp(cup_2132, sink_120)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(sink_120)
Robot find: soap_2126, soap_2010, ice_2024, Robot is close to the sink_120. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(cup_2132, sink_120)
Fail to find cup_2132 around sink_120. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(cup_2132, cupboard_117)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2132 ?
Answer: Go to dining_room_41. Once there, locate table_114. Cup_2132 is on table_114. Look carefully on the table to find and retrieve cup_2132.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to dining_room_41. Once there, locate table_114. Cup_2132 is on table_114. Look carefully on the table to find and retrieve cup_2132.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for cup_2132 around cupboard_118.
Action 6: Walk to walllamp_139.
Action 7: look for cup_2132 around walllamp_139.
Action 8: Walk to kitchen_counter_119.
Action 9: look for cup_2132 around kitchen_counter_119.
Action 10: Walk to kitchen_counter_123.
Action 11: look for cup_2132 around kitchen_counter_123.
Action 12: Walk to sink_120.
Action 13: look for cup_2132 around sink_120.
Action 14: Walk to cupboard_117.

##############################
From agent.py
exp(cup_2132, cupboard_117)
Fail to find cup_2132 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2132, table_114)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(cup_2132, table_114)
Find cup_2132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
grab_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. Grabbing cup_2132 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: While you have switched on the coffee maker and found the cup, you need to ensure that water is added to the cup to brew the coffee. This step is indicated in the goal representation under the `brew_coffee` behavior that requires the cup to have water.
##############################
From agent.py
Human Instruction: While you have switched on the coffee maker and found the cup, you need to ensure that water is added to the cup to brew the coffee. This step is indicated in the goal representation under the `brew_coffee` behavior that requires the cup to have water.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for cup_2132 around cupboard_118.
Action 6: Walk to walllamp_139.
Action 7: look for cup_2132 around walllamp_139.
Action 8: Walk to kitchen_counter_119.
Action 9: look for cup_2132 around kitchen_counter_119.
Action 10: Walk to kitchen_counter_123.
Action 11: look for cup_2132 around kitchen_counter_123.
Action 12: Walk to sink_120.
Action 13: look for cup_2132 around sink_120.
Action 14: Walk to cupboard_117.
Action 15: look for cup_2132 around cupboard_117.
Action 16: Walk to table_114.
Action 17: look for cup_2132 around table_114.
Action 18: Walk to cup_2132.
Action 19: Grab cup_2132.
Action 20: Walk to faucet_20.
Action 21: Switch on faucet_20.
Action 22: Switch off faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2065_around_mousepad_214(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==214
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(coffee_filter,mousepad_instance)
        else:
            exp(coffee_filter,mousepad_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,mousepad_instance]=True
        close[mousepad_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior brew_coffee(coffee_maker:item, cup:item):
    body:
        achieve has_water(cup)
        # Ensure the cup has water before brewing
        achieve_once close_char(char, coffee_maker)
        # Move close to the coffee maker
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        bind cup: item where:
            is_cup(cup)
        # Select the cup
        brew_coffee(coffee_maker, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior brew_coffee(coffee_maker:item, cup:item):
    body:
        achieve has_water(cup)
        # Ensure the cup has water before brewing
        achieve_once close_char(char, coffee_maker)
        # Move close to the coffee maker
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker
        bind cup: item where:
            is_cup(cup)
        # Select the cup
        brew_coffee(coffee_maker, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the cup contains water, a requirement for brewing coffee. Currently, the robot has switched on the coffee maker and found the cup, but has not added water to it. You should perform this step next.
##############################
From agent.py
Human Instruction: You need to ensure that the cup contains water, a requirement for brewing coffee. Currently, the robot has switched on the coffee maker and found the cup, but has not added water to it. You should perform this step next.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for cup_2132 around cupboard_118.
Action 6: Walk to walllamp_139.
Action 7: look for cup_2132 around walllamp_139.
Action 8: Walk to kitchen_counter_119.
Action 9: look for cup_2132 around kitchen_counter_119.
Action 10: Walk to kitchen_counter_123.
Action 11: look for cup_2132 around kitchen_counter_123.
Action 12: Walk to sink_120.
Action 13: look for cup_2132 around sink_120.
Action 14: Walk to cupboard_117.
Action 15: look for cup_2132 around cupboard_117.
Action 16: Walk to table_114.
Action 17: look for cup_2132 around table_114.
Action 18: Walk to cup_2132.
Action 19: Grab cup_2132.
Action 20: Walk to faucet_20.
Action 21: Switch on faucet_20.
Action 22: Switch off faucet_20.
Action 23: Walk to coffe_maker_130.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2065_around_bookshelf_124(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(coffee_filter,bookshelf_instance)
        else:
            exp(coffee_filter,bookshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,bookshelf_instance]=True
        close[bookshelf_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve close_char(char, faucet) # Move close to the faucet
        achieve is_on(faucet) # Ensure the faucet is turned on
        achieve has_water(cup) # Fill the cup with water

behavior place_cup_in_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve inside(cup, coffee_maker) # Place the cup in the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2132 # Select the cup identified
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20 # Select the faucet identified
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==130 # Select the coffee maker identified
        fill_cup_with_water(cup, faucet) # Fill the cup with water
        place_cup_in_coffee_maker(cup, coffee_maker) # Place the cup in the coffee maker

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_bowl_2141(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(coffee_filter,bowl_instance)
        else:
            exp(coffee_filter,bowl_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,bowl_instance]=True
        close[bowl_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        # Fill the cup with water

behavior close_faucet(faucet:item):
    body:
        achieve_once is_off(faucet)
        # Ensure the faucet is turned off

behavior place_cup_under_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve_once close(cup, coffee_maker)
        # Place the cup close to the coffee maker

behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is on to brew coffee

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup found earlier
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Identify the faucet with ID 20 where the cup is filled
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        # Identify the coffee maker with ID 130

        fill_cup_with_water(cup, faucet)
        close_faucet(faucet)
        place_cup_under_coffee_maker(cup, coffee_maker)
        brew_coffee(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        # Fill the cup with water

behavior close_faucet(faucet:item):
    body:
        achieve_once is_off(faucet)
        # Ensure the faucet is turned off

behavior place_cup_under_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve_once close(cup, coffee_maker)
        # Place the cup close to the coffee maker

behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is on to brew coffee

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select the cup found earlier
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        # Identify the faucet with ID 20 where the cup is filled
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        # Identify the coffee maker with ID 130

        fill_cup_with_water(cup, faucet)
        close_faucet(faucet)
        place_cup_under_coffee_maker(cup, coffee_maker)
        brew_coffee(coffee_maker)

##############################
From agent.py-> find a plan in act()
put_executor(cup_2132, coffe_maker_130)
##############################
From agent.py
put_executor(cup_2132, coffe_maker_130)
Robot find: Robot is close to the cup_2132. Robot is close to the coffe_maker_130. Robot is close to the kitchen_counter_122. coffe_maker_130 is close cup_2132. cup_2132 is close coffe_maker_130. cup_2132 is on coffe_maker_130. cup_2132 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_bookshelf_124(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

behavior find_food_sugar_2111_around_bowl_2141(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_sugar,bowl_instance)
        else:
            exp(food_sugar,bowl_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,bowl_instance]=True
        close[bowl_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
behavior pour_milk_or_sugar(cup:item, ingredient:item):
    body:
        achieve_once inside(ingredient, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and on(cup, coffe_maker_130)
        # Select the cup on the coffee maker
        
        bind milk: item where:
            is_milk(milk)
        # Select milk from the available items
        
        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar from the available items

        pour_milk_or_sugar(cup, milk) # Pour milk into the coffee cup
        pour_milk_or_sugar(cup, sugar) # Pour sugar into the coffee cup

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffe_maker_130; available variables: [Variable<cup: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_diary_2008_around_bookshelf_124(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

behavior find_shoe_rack_2044_around_filing_cabinet_200(shoe_rack:item):
    goal: not unknown(shoe_rack)
    body:
        assert is_shoe_rack(shoe_rack)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==200
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(shoe_rack,filing_cabinet_instance)
        else:
            exp(shoe_rack,filing_cabinet_instance)
    eff:
        unknown[shoe_rack]=False
        close[shoe_rack,filing_cabinet_instance]=True
        close[filing_cabinet_instance,shoe_rack]=True
    

behavior find_food_sugar_2111_around_bowl_2141(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2141
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_sugar,bowl_instance)
        else:
            exp(food_sugar,bowl_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,bowl_instance]=True
        close[bowl_instance,food_sugar]=True
    

#goal_representation
 
behavior pour_milk_or_sugar(cup:item, ingredient:item):
    body:
        achieve_once inside(ingredient, cup)

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 130
        # Select the coffee maker with ID 130

        bind cup: item where:
            is_cup(cup) and on(cup, coffe_maker)
        # Select the cup on the coffee maker

        bind milk: item where:
            is_milk(milk)
        # Select milk from the available items

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar from the available items

        pour_milk_or_sugar(cup, milk) # Pour milk into the coffee cup
        pour_milk_or_sugar(cup, sugar) # Pour sugar into the coffee cup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior pour_milk_or_sugar(cup:item, ingredient:item):
    body:
        achieve_once inside(ingredient, cup)

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 130
        # Select the coffee maker with ID 130

        bind cup: item where:
            is_cup(cup) and on(cup, coffe_maker)
        # Select the cup on the coffee maker

        bind milk: item where:
            is_milk(milk)
        # Select milk from the available items

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar from the available items

        pour_milk_or_sugar(cup, milk) # Pour milk into the coffee cup
        pour_milk_or_sugar(cup, sugar) # Pour sugar into the coffee cup

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2115)grab_executor(milk_2115)walk_executor(cup_2132)putin_executor(milk_2115, cup_2132)walk_executor(bowl_2141)exp(food_sugar_2111, bowl_2141)walk_executor(food_sugar_2111)grab_executor(food_sugar_2111)walk_executor(cup_2132)putin_executor(food_sugar_2111, cup_2132)
##############################
From agent.py
walk_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. 
##############################
From agent.py
grab_executor(milk_2115)
Robot find: Robot is close to the table_114. Robot is close to the milk_2115. Grabbing milk_2115 by right hand. 
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the milk_2115. Robot is close to the coffe_maker_130. Robot is close to the cup_2132. 
##############################
From agent.py
putin_executor(milk_2115, cup_2132)
Robot find: Robot is close to the milk_2115. Robot is close to the coffe_maker_130. Robot is close to the cup_2132. milk_2115 is close cup_2132. cup_2132 is close milk_2115. milk_2115 is inside cup_2132. milk_2115 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2141)
Robot find: Robot is close to the bowl_2141. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_sugar_2111, bowl_2141)
Fail to find food_sugar_2111 around bowl_2141. 
##############################
From agent.py-> find a plan in act()
walk_executor(microwave_135)open_executor(microwave_135)exp(food_sugar_2111, microwave_135)walk_executor(food_sugar_2111)grab_executor(food_sugar_2111)walk_executor(cup_2132)putin_executor(food_sugar_2111, cup_2132)
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
exp(food_sugar_2111, microwave_135)
Fail to find food_sugar_2111 around microwave_135. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_sugar_2111, fridge_126)walk_executor(food_sugar_2111)grab_executor(food_sugar_2111)walk_executor(cup_2132)putin_executor(food_sugar_2111, cup_2132)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_sugar_2111, fridge_126)
Find food_sugar_2111. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_sugar_2111)walk_executor(cup_2132)putin_executor(food_sugar_2111, cup_2132)
##############################
From agent.py
grab_executor(food_sugar_2111)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_sugar_2111 by right hand. 
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the food_sugar_2111. Robot is close to the coffe_maker_130. Robot is close to the cup_2132. 
##############################
From agent.py
putin_executor(food_sugar_2111, cup_2132)
Robot find: Robot is close to the food_sugar_2111. Robot is close to the coffe_maker_130. Robot is close to the cup_2132. cup_2132 is close food_sugar_2111. food_sugar_2111 is inside cup_2132. food_sugar_2111 is close cup_2132. food_sugar_2111 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
make a cup of coffee using the coffee maker, then add milk and sugar.
Action History:
['walk_executor(coffe_maker_130)', 'switchon_executor(coffe_maker_130)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(walllamp_139)', 'walk_executor(kitchen_counter_119)', 'walk_executor(kitchen_counter_123)', 'walk_executor(sink_120)', 'walk_executor(cupboard_117)', 'walk_executor(table_114)', 'walk_executor(cup_2132)', 'grab_executor(cup_2132)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(coffe_maker_130)', 'put_executor(cup_2132, coffe_maker_130)', 'walk_executor(milk_2115)', 'grab_executor(milk_2115)', 'walk_executor(cup_2132)', 'putin_executor(milk_2115, cup_2132)', 'walk_executor(bowl_2141)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_sugar_2111)', 'walk_executor(cup_2132)', 'putin_executor(food_sugar_2111, cup_2132)']
Time info:
Time consume: 226 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 1
action_num: 30

Task complete rate:
Keystate: k1 - Requires: 16 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
