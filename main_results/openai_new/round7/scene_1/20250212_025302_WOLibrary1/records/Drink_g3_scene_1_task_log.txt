From agent.py
Reset goals: The sub-goals are: 
['1. Find a cup and fill it with water.', '2. Slice a kiwi and add it to the cup of water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2142_around_cupboard_118(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_shoe_rack_2044_around_bench_113(shoe_rack:item):
    goal: not unknown(shoe_rack)
    body:
        assert is_shoe_rack(shoe_rack)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==113
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoe_rack,bench_instance)
        else:
            exp(shoe_rack,bench_instance)
    eff:
        unknown[shoe_rack]=False
        close[shoe_rack,bench_instance]=True
        close[bench_instance,shoe_rack]=True
    

behavior find_cup_2132_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet, as it is a source of water for the cup

        achieve close_char(char, cup)
        # Move close to the cup

        achieve close_char(char, faucet)
        # Move close to the faucet

        achieve has_a_free_hand(char)
        # Ensure the character has a free hand to use the faucet and manage the cup

        achieve has_water(cup)
        # Fill the cup with water


#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2049_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_bowl_2142_around_cupboard_118(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, sink:item):
    body:
        achieve has_water(cup)
        # Fill the cup with water from the sink

def can_holding_cup(handle:item):
    # Function to check if character can hold the cup
    symbol has_free_hand = has_a_free_hand(char)
    if has_free_hand:
        achieve_once inhand(handle)
        return True
    else:
        return False

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and grabbable(cup)
        # Select a grabbable cup

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        if can_holding_cup(cup):
            fill_cup_with_water(cup, sink)
            # Using only one hand to fill the cup with water is permissible

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2132_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation

def can_holding_cup(handle:item):
    # Function to check if character can hold the cup
    symbol has_free_hand = has_a_free_hand(char)
    if has_free_hand:
        achieve_once inhand(handle)
        return True
    else:
        return False

behavior fill_cup_with_water(cup:item, sink:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and grabbable(cup)
        bind sink: item where:
            is_sink(sink)

        if can_holding_cup(cup):
            fill_cup_with_water(cup, sink)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2132_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_bowl_2141_around_cupboard_118(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
def can_holding_cup(handle:item):
    # Function to check if character can hold the cup
    symbol has_free_hand = has_a_free_hand(char)
    if has_free_hand:
        achieve_once inhand(handle)
        return True
    else:
        return False

behavior fill_cup_with_water(cup:item, sink:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and grabbable(cup)
        bind sink: item where:
            is_sink(sink)

        if can_holding_cup(cup):
            fill_cup_with_water(cup, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2140_around_cupboard_118(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_cup_2132_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, source:item):
    body:
        achieve has_water(cup) # Ensure the cup has water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup to use
        bind water_source: item where:
            is_sink(water_source) or is_faucet(water_source)
        # Select a water source, could be a sink or a faucet
        fill_cup_with_water(cup, water_source)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_cup_with_water(cup:item, source:item):
    body:
        achieve has_water(cup) # Ensure the cup has water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup to use
        bind water_source: item where:
            is_sink(water_source) or is_faucet(water_source)
        # Select a water source, could be a sink or a faucet
        fill_cup_with_water(cup, water_source)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(cup_2132, cupboard_118)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: pot_78, Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(cup_2132, cupboard_118)
Fail to find cup_2132 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(cup_2132, cupboard_117)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(cup_2132, cupboard_117)
Fail to find cup_2132 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(cup_2132, kitchen_counter_119)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_119)
Fail to find cup_2132 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(cup_2132, kitchen_counter_123)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(cup_2132, kitchen_counter_123)
Fail to find cup_2132 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_120)exp(cup_2132, sink_120)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(sink_120)
Robot find: soap_2126, soap_2010, ice_2024, Robot is close to the sink_120. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(cup_2132, sink_120)
Fail to find cup_2132 around sink_120. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(cup_2132, kitchen_counter_122)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2132 ?
Answer: Locate the dining room labeled dining_room_41. Inside this room, there is a table identified as table_114. You will find cup_2132 placed directly on top of table_114. Ensure to check the surface of the table for accurate retrieval.
Re-decompose: None

##############################
From agent.py
Human Instruction: Locate the dining room labeled dining_room_41. Inside this room, there is a table identified as table_114. You will find cup_2132 placed directly on top of table_114. Ensure to check the surface of the table for accurate retrieval.

The actions you have taken:
Action 1: Walk to cupboard_118.
Action 2: Open cupboard_118.
Action 3: look for cup_2132 around cupboard_118.
Action 4: Walk to cupboard_117.
Action 5: look for cup_2132 around cupboard_117.
Action 6: Walk to kitchen_counter_119.
Action 7: look for cup_2132 around kitchen_counter_119.
Action 8: Walk to kitchen_counter_123.
Action 9: look for cup_2132 around kitchen_counter_123.
Action 10: Walk to sink_120.
Action 11: look for cup_2132 around sink_120.
Action 12: Walk to kitchen_counter_122.

##############################
From agent.py
exp(cup_2132, kitchen_counter_122)
Fail to find cup_2132 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2132, table_114)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
exp(cup_2132, table_114)
Find cup_2132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. 
##############################
From agent.py
grab_executor(cup_2132)
Robot find: Robot is close to the table_114. Robot is close to the cup_2132. Grabbing cup_2132 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the cup_2132. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2095_around_fridge_126(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fruit,fridge_instance)
        else:
            exp(food_fruit,fridge_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,fridge_instance]=True
        close[fridge_instance,food_fruit]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_kiwi(kiwi:item):
    body:
        achieve_once cut(kiwi)

behavior add_to_cup(kiwi:item, cup:item):
    body:
        achieve_once inside(kiwi, cup)

behavior __goal__():
    body:
        # Select a kiwi that is identified as food
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select the cup with ID 2132
        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Slice the kiwi
        slice_kiwi(kiwi)
        # Add the sliced kiwi to the cup of water
        add_to_cup(kiwi, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior slice_kiwi(kiwi:item):
    body:
        achieve_once cut(kiwi)

behavior add_to_cup(kiwi:item, cup:item):
    body:
        achieve_once inside(kiwi, cup)

behavior __goal__():
    body:
        # Select a kiwi that is identified as food
        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select the cup with ID 2132
        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Slice the kiwi
        slice_kiwi(kiwi)
        # Add the sliced kiwi to the cup of water
        add_to_cup(kiwi, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(food_kiwi_2054)grab_executor(food_kiwi_2054)walk_executor(cutting_board_2123)put_executor(food_kiwi_2054, cutting_board_2123)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_kiwi_2054)cut_executor(food_kiwi_2054)grab_executor(food_kiwi_2054)walk_executor(cup_2132)putin_executor(food_kiwi_2054, cup_2132)
##############################
From agent.py
walk_executor(food_kiwi_2054)
Robot find: Robot is close to the cup_2132. Robot is close to the kitchen_counter_123. Robot is close to the food_kiwi_2054. 
##############################
From agent.py
grab_executor(food_kiwi_2054)
Robot find: Robot is close to the cup_2132. Robot is close to the kitchen_counter_123. Robot is close to the food_kiwi_2054. Grabbing food_kiwi_2054 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: Robot is close to the cup_2132. Robot is close to the food_kiwi_2054. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_kiwi_2054, cutting_board_2123)
Robot find: Robot is close to the cup_2132. Robot is close to the food_kiwi_2054. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_kiwi_2054. food_kiwi_2054 is close cutting_board_2123. food_kiwi_2054 is on cutting_board_2123. food_kiwi_2054 released by left hand. 
##############################
From agent.py
walk_executor(knife_2122)
Robot find: Robot is close to the cup_2132. Robot is close to the knife_2122. Robot is close to the table_114. 
##############################
From agent.py
grab_executor(knife_2122)
Robot find: Robot is close to the cup_2132. Robot is close to the knife_2122. Robot is close to the table_114. Grabbing knife_2122 by left hand. 
##############################
From agent.py
walk_executor(food_kiwi_2054)
Robot find: Robot is close to the cup_2132. Robot is close to the knife_2122. Robot is close to the cutting_board_2123. Robot is close to the food_kiwi_2054. 
##############################
From agent.py
cut_executor(food_kiwi_2054)
Robot find: Robot is close to the cup_2132. Robot is close to the knife_2122. Robot is close to the cutting_board_2123. Robot is close to the food_kiwi_2054. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2095_around_fridge_126(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fruit,fridge_instance)
        else:
            exp(food_fruit,fridge_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,fridge_instance]=True
        close[fridge_instance,food_fruit]=True
    

behavior find_food_hamburger_2096_around_fridge_126(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_kiwi_to_cup(food_kiwi:item, cup:item):
    body:
        achieve_once inside(food_kiwi, cup)

behavior __goal__():
    body:
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi) and cut(food_kiwi)
        # Select the cut kiwi
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup that has water
        add_kiwi_to_cup(food_kiwi, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_kiwi_to_cup(food_kiwi:item, cup:item):
    body:
        achieve_once inside(food_kiwi, cup)

behavior __goal__():
    body:
        bind food_kiwi: item where:
            is_food_kiwi(food_kiwi) and cut(food_kiwi)
        # Select the cut kiwi
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup that has water
        add_kiwi_to_cup(food_kiwi, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)put_executor(knife_2122, kitchen_counter_119)walk_executor(food_kiwi_2054)grab_executor(food_kiwi_2054)walk_executor(cup_2132)putin_executor(food_kiwi_2054, cup_2132)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the cup_2132. Robot is close to the knife_2122. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(knife_2122, kitchen_counter_119)
Robot find: Robot is close to the cup_2132. Robot is close to the knife_2122. Robot is close to the kitchen_counter_119. kitchen_counter_119 is close knife_2122. knife_2122 is close kitchen_counter_119. knife_2122 is on kitchen_counter_119. knife_2122 released by left hand. 
##############################
From agent.py
walk_executor(food_kiwi_2054)
Robot find: Robot is close to the cup_2132. Robot is close to the cutting_board_2123. Robot is close to the food_kiwi_2054. 
##############################
From agent.py
grab_executor(food_kiwi_2054)
Robot find: Robot is close to the cup_2132. Robot is close to the cutting_board_2123. Robot is close to the food_kiwi_2054. Grabbing food_kiwi_2054 by left hand. 
##############################
From agent.py
walk_executor(cup_2132)
Robot find: Robot is close to the cup_2132. Robot is close to the food_kiwi_2054. 
##############################
From agent.py
putin_executor(food_kiwi_2054, cup_2132)
Robot find: Robot is close to the cup_2132. Robot is close to the food_kiwi_2054. cup_2132 is close food_kiwi_2054. food_kiwi_2054 is inside cup_2132. food_kiwi_2054 is close cup_2132. food_kiwi_2054 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Get a cup of water and add some sliced kiwi inside.
Action History:
['walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(cupboard_117)', 'walk_executor(kitchen_counter_119)', 'walk_executor(kitchen_counter_123)', 'walk_executor(sink_120)', 'walk_executor(kitchen_counter_122)', 'walk_executor(table_114)', 'walk_executor(cup_2132)', 'grab_executor(cup_2132)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(food_kiwi_2054)', 'grab_executor(food_kiwi_2054)', 'walk_executor(cutting_board_2123)', 'put_executor(food_kiwi_2054, cutting_board_2123)', 'walk_executor(knife_2122)', 'grab_executor(knife_2122)', 'walk_executor(food_kiwi_2054)', 'cut_executor(food_kiwi_2054)', 'grab_executor(food_kiwi_2054) (Failed)', 'walk_executor(kitchen_counter_119)', 'put_executor(knife_2122, kitchen_counter_119)', 'walk_executor(food_kiwi_2054)', 'grab_executor(food_kiwi_2054)', 'walk_executor(cup_2132)', 'putin_executor(food_kiwi_2054, cup_2132)']
Time info:
Time consume: 191 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 5
goal correct times: 0
action_num: 28

Task complete rate:
1
Scene_id: 1
##############################
