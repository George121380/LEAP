From agent.py
Reset goals: The sub-goals are: 
['1. Find the pot and fill it with water.', '2. Boil the chicken in the pot until it is cooked.', '3. Add the noodles to the pot and boil until they are ready.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2141_around_cupboard_118(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior find_pot_and_fill_with_water(pot:item, water_source:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot has water in it

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind water_source: item where:
            is_faucet(water_source)
        # Select a water source such as a faucet

        find_pot_and_fill_with_water(pot, water_source)
        # Execute the behavior to find the pot and fill it with water

#goal_representation_end

##############################
From agent.py->reset_goal

behavior find_pot_and_fill_with_water(pot:item, water_source:item):
    body:
        achieve_once has_water(pot)
        # Ensure the pot has water in it

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind water_source: item where:
            is_faucet(water_source)
        # Select a water source such as a faucet

        find_pot_and_fill_with_water(pot, water_source)
        # Execute the behavior to find the pot and fill it with water

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(pot_2138, kitchen_counter_122)walk_executor(pot_2138)open_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(pot_2138, kitchen_counter_122)
Fail to find pot_2138 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2150_around_cupboard_118(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_with_water(pot:item):
    # Function to check if the pot has water
    symbol water_in_pot = has_water(pot)
    return water_in_pot

def is_stove_on(stove:item):
    # Function to check if the stove is on
    symbol stove_is_on = is_on(stove)
    return stove_is_on

behavior boil_chicken(chicken:item, pot:item, stove:item):
    body:
        if not is_stove_on(stove):
            achieve is_on(stove) # Turn on the stove
        achieve_once inside(chicken, pot) # Place the chicken in the pot
        # The chicken is cooked when the stove is on and the chicken is inside a pot with water
        # Assume boiling is achieved through time passing, so wait until chicken is cooked

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and is_pot_with_water(pot)
        # Select a pot with water in it
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken

        boil_chicken(chicken, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_pot_with_water(pot:item):
    # Function to check if the pot has water
    symbol water_in_pot = has_water(pot)
    return water_in_pot

def is_stove_on(stove:item):
    # Function to check if the stove is on
    symbol stove_is_on = is_on(stove)
    return stove_is_on

behavior boil_chicken(chicken:item, pot:item, stove:item):
    body:
        if not is_stove_on(stove):
            achieve is_on(stove) # Turn on the stove
        achieve_once inside(chicken, pot) # Place the chicken in the pot
        # The chicken is cooked when the stove is on and the chicken is inside a pot with water
        # Assume boiling is achieved through time passing, so wait until chicken is cooked

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and is_pot_with_water(pot)
        # Select a pot with water in it
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken

        boil_chicken(chicken, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(pot_78)putin_executor(food_chicken_2089, pot_78)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the pot_78. Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the pot_78. Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_chicken_2089, fridge_126)
Find food_chicken_2089. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2089)putin_executor(food_chicken_2089, pot_78)
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_chicken_2089 by left hand. 
##############################
From agent.py
putin_executor(food_chicken_2089, pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. pot_78 is close food_chicken_2089. food_chicken_2089 is inside pot_78. food_chicken_2089 is close pot_78. food_chicken_2089 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_noodles(pot:item, noodles:item):
    body:
        achieve_once inside(noodles, pot)
        # Add noodles to the pot

behavior boil_noodles(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve is_on(stove)
        # Ensure the stove is on for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select a stove that is on
        add_noodles(pot, noodles)
        boil_noodles(pot)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#goal_representation
 
behavior add_noodles(pot:item, noodles:item):
    body:
        achieve_once inside(noodles, pot)
        # Add noodles to the pot

behavior boil_noodles(pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve is_on(stove)
        # Ensure the stove is on for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select a stove that is on
        add_noodles(pot, noodles)
        boil_noodles(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_noodles(pot:item, noodles:item):
    body:
        achieve_once inside(noodles, pot)
        # Add noodles to the pot

behavior boil_noodles(pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve is_on(stove)
        # Ensure the stove is on for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select a stove that is on
        add_noodles(pot, noodles)
        boil_noodles(pot, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(food_noodles_2101)putin_executor(food_noodles_2101, pot_78)
##############################
From agent.py
grab_executor(food_noodles_2101)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_noodles_2101 by left hand. 
##############################
From agent.py
putin_executor(food_noodles_2101, pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. food_noodles_2101 is close pot_78. pot_78 is close food_noodles_2101. food_noodles_2101 is inside pot_78. food_noodles_2101 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot has water before boiling. Add water to the pot and then confirm that the stove is on to boil the noodles.
##############################
From agent.py
Human Instruction: You need to ensure that the pot has water before boiling. Add water to the pot and then confirm that the stove is on to boil the noodles.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for pot_2138 around kitchen_counter_122.
Action 3: Walk to pot_78.
Action 4: Grab pot_78.
Action 5: Walk to faucet_20.
Action 6: Switch on faucet_20.
Action 7: Switch off faucet_20.
Action 8: Walk to stove_2135.
Action 9: Switch on stove_2135.
Action 10: Walk to fridge_126.
Action 11: Switch off fridge_126.
Action 12: Open fridge_126.
Action 13: look for food_chicken_2089 around fridge_126.
Action 14: Grab food_chicken_2089.
Action 15: Put food_chicken_2089 into pot_78.
Action 16: Grab food_noodles_2101.
Action 17: Put food_noodles_2101 into pot_78.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def has_noodles_in_pot(pot:item):
    # Check if there are noodles inside the pot
    symbol has_noodles=exists noodle: item : (is_food_noodles(noodle) and inside(noodle, pot))
    return has_noodles

behavior boil_noodles(pot:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water for boiling noodles
        achieve is_on(stove_2135)
        # Ensure the stove is turned on to boil the noodles
        achieve_once inside(food_noodles_2101, pot)
        # Add noodles to the pot
        # The noodles should already be inside the pot based on the previous action
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_noodles_in_pot(pot)
        # Ensure the pot with noodles is selected
        boil_noodles(pot)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#goal_representation
 
def has_noodles_in_pot(pot:item):
    # Check if there are noodles inside the pot
    symbol has_noodles=exists noodle: item : (is_food_noodles(noodle) and inside(noodle, pot))
    return has_noodles

behavior boil_noodles(pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water for boiling noodles
        achieve is_on(stove)
        # Ensure the stove is turned on to boil the noodles
        achieve_once inside(food_noodles_2101, pot)
        # Add noodles to the pot
        # The noodles should already be inside the pot based on the previous action
        
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_noodles_in_pot(pot)
        # Ensure the pot with noodles is selected
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Ensure the correct stove is selected
        boil_noodles(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_noodles_2101; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#goal_representation
 
def has_noodles_in_pot(pot:item):
    # Check if there are noodles inside the pot
    symbol has_noodles=exists noodle: item : (is_food_noodles(noodle) and inside(noodle, pot))
    return has_noodles

behavior boil_noodles(pot:item, stove:item, noodles:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water for boiling noodles
        achieve is_on(stove)
        # Ensure the stove is turned on to boil the noodles
        achieve_once inside(noodles, pot)
        # Add noodles to the pot
        # The noodles should already be inside the pot based on the previous action

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_noodles_in_pot(pot)
        # Ensure the pot with noodles is selected
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Ensure the correct stove is selected
        bind noodles: item where:
            is_food_noodles(noodles) and inside(noodles, pot)
        boil_noodles(pot, stove, noodles)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_noodles_and_boil(pot:item, noodles:item):
    body:
        achieve_once inside(noodles, pot)
        # Put the noodles into the pot
        achieve has_water(pot)
        # Ensure the pot has water inside
        achieve is_on(stove)
        # Ensure the stove is on for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        add_noodles_and_boil(pot, noodles)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>, Variable<noodles: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_78_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_food_carrot_2015_around_cupboard_118(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#goal_representation
 
behavior add_noodles_and_boil(pot:item, noodles:item, stove:item):
    body:
        achieve_once inside(noodles, pot)
        # Put the noodles into the pot
        achieve has_water(pot)
        # Ensure the pot has water inside
        achieve is_on(stove)
        # Ensure the stove is on for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        add_noodles_and_boil(pot, noodles, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_sink_19(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation

behavior check_pot_water(pot:item):
    body:
        if not has_water(pot):
            achieve has_water(pot)

behavior boil_noodles(pot:item, stove:item):
    body:
        achieve_once inside(food_noodles_2101, pot)
        achieve has_water(pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inside(food_chicken_2089, pot)
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        check_pot_water(pot)
        boil_noodles(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_noodles_2101; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#goal_representation
 
behavior check_pot_water(pot:item):
    body:
        if not has_water(pot):
            achieve has_water(pot)

behavior boil_noodles(pot:item, stove:item, food_noodles:item):
    body:
        achieve_once inside(food_noodles, pot)
        achieve has_water(pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and inside(food_chicken_2089, pot)
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        bind food_noodles: item where:
            is_food_noodles(food_noodles)
        check_pot_water(pot)
        boil_noodles(pot, stove, food_noodles)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_chicken_2089; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#goal_representation

behavior check_pot_water(pot:item):
    body:
        if not has_water(pot):
            achieve has_water(pot)

behavior boil_noodles(pot:item, stove:item, food_noodles:item):
    body:
        achieve_once inside(food_noodles, pot)
        achieve has_water(pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and exists _: item : (is_food_chicken(_) and inside(_, pot))
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        bind food_noodles: item where:
            is_food_noodles(food_noodles)
        check_pot_water(pot)
        boil_noodles(pot, stove, food_noodles)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. add the noodles to the pot and boil until they are ready." ?
Answer: Before adding the noodles, ensure that both the chicken and noodles are already placed in the pot.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Add the noodles to the pot with the chicken and ensure they are both in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_carrot_2086_around_cupboard_118(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot with water
        
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, pot)
        # Select a chicken inside the pot
        
        bind noodles: item where:
            is_food_noodles(noodles) and inside(noodles, pot)
        # Select noodles inside the pot
        
        achieve has_water(pot)
        # Ensure pot has water for boiling


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_noodles_and_chicken_in_pot(noodles: item, chicken: item, pot: item):
    body:
        achieve inside(noodles, pot)
        achieve inside(chicken, pot)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water inside

        ensure_noodles_and_chicken_in_pot(noodles, chicken, pot)
        # Ensure that the noodles and chicken are inside the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_water_in_pot(pot:item):
    # Function to ensure the pot has water
    return has_water(pot)

behavior add_ingredients_to_pot(noodles:item, chicken:item, pot:item):
    body:
        achieve_once inside(noodles, pot) # Add noodles to the pot
        achieve_once inside(chicken, pot) # Ensure chicken is in the pot

behavior confirm_stove_operation(stove:item):
    body:
        achieve is_on(stove) # Confirm the stove is on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        if not ensure_water_in_pot(pot):
            achieve has_water(pot)
        # Ensure pot has water
        
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select noodles

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        add_ingredients_to_pot(noodles, chicken, pot)

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        confirm_stove_operation(stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Add the noodles to the pot with the chicken and boil until the noodles are cooked.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_noodles(pot:item):
    body:
        # Ensure noodles are added and cooked in the pot
        achieve has_water(pot)
        # Ensure the stove is on for boiling
        achieve is_on(stove_2135)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78 # Select pot with ID 78
        boil_noodles(pot)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#goal_representation
 
behavior boil_noodles(pot:item, stove:item):
    body:
        # Ensure noodles are added and cooked in the pot
        achieve has_water(pot)
        # Ensure the stove is on for boiling
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78 # Select pot with ID 78
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135 # Select stove with ID 2135
        boil_noodles(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select pot that already has water

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Select the stove that is on

        bind food_noodles: item where:
            is_food_noodles(food_noodles)
        # Select the noodles

        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select chicken

        achieve inside(food_noodles, pot)
        # Place noodles inside the pot with water

        achieve inside(food_chicken, pot)
        # Ensure chicken is inside the pot with noodles

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_noodles_and_boil(pot:item, stove:item):
    body:
        achieve_once has_water(pot)
        # Check that the pot has water inside
        achieve_once inside(food_chicken_2089, pot)
        # Ensure the chicken is already in the pot
        achieve_once inside(food_noodles_2101, pot)
        # Ensure the noodles are already in the pot
        achieve is_on(stove)
        # Ensure the stove is on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select the pot with ID 78
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove with ID 2135
        
        add_noodles_and_boil(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_chicken_2089; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#goal_representation
 
behavior add_noodles_and_boil(pot:item, stove:item, chicken:item, noodles:item):
    body:
        achieve_once has_water(pot)
        # Check that the pot has water inside
        achieve_once inside(chicken, pot)
        # Ensure the chicken is already in the pot
        achieve_once inside(noodles, pot)
        # Ensure the noodles are already in the pot
        achieve is_on(stove)
        # Ensure the stove is on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select the pot with ID 78
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove with ID 2135
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken]==2089
        # Select the chicken with ID 2089
        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles]==2101
        # Select the noodles with ID 2101

        add_noodles_and_boil(pot, stove, chicken, noodles)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "add the noodles to the pot with the chicken and boil until the noodles are cooked." ?
Answer: Put the chicken and noodles in the pot.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Add noodles to the pot and boil until cooked.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_noodles_to_pot(noodles:item, pot:item):
    body:
        achieve_once inside(noodles, pot)
        # Place the noodles inside the pot

behavior boil_noodles(pot:item, stove:item):
    body:
        achieve is_on(stove)  # Ensure the stove remains on
        achieve has_water(pot)  # Ensure the pot has water for boiling

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)
        # Select the noodles to be added to the pot

        bind pot: item where:
            is_pot(pot) and has_water(pot) 
        # Select a pot that has water

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Ensure the stove is on for boiling

        add_noodles_to_pot(noodles, pot)  # Add noodles to the pot
        boil_noodles(pot, stove)  # Boil the noodles until cooked

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_clothes_skirt_2160_around_basket_for_clothes_2078(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_skirt,basket_for_clothes_instance)
        else:
            exp(clothes_skirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_skirt]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water for boiling noodles

behavior boil_noodles(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Ensure the stove is on to boil the noodles

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        fill_pot_with_water(pot, faucet)
        boil_noodles(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2015_around_cupboard_118(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_noodles_and_boil(pot:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once inside(food_noodles_2101, pot)
        # Add noodles to the pot
        achieve_once is_on(stove)
        # Ensure the stove is on for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select the pot with ID 78

        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove with ID 2135

        add_noodles_and_boil(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_noodles_2101; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#goal_representation
 
behavior add_noodles_and_boil(pot:item, stove:item, noodles:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once inside(noodles, pot)
        # Add noodles to the pot
        achieve_once is_on(stove)
        # Ensure the stove is on for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select the pot with ID 78

        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove with ID 2135

        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles]==2101
        # Select the noodles with ID 2101

        add_noodles_and_boil(pot, stove, noodles)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil the noodles with the already cooked chicken in the pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select the pot with ID 78
        
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, pot)
        # Select the chicken inside the pot
        
        bind noodles: item where:
            is_food_noodles(noodles) and inside(noodles, pot)
        # Select the noodles inside the pot

        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove with ID 2135

        if not has_water(pot):
            bind faucet: item where:
                is_faucet(faucet) and id[faucet]==20
            # Select the faucet with ID 20

            achieve has_water(pot)
            # Ensure the pot has water

        achieve is_on(stove)
        # Make sure the stove is on to start boiling

        achieve_once inside(noodles, pot)
        # Ensure noodles are inside the pot with chicken for boiling

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_carrot_2086_around_cupboard_118(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_noodles_with_cooked_chicken(pot:item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve_once inside(food_chicken_2089, pot) # Ensure chicken is in the pot
        achieve_once inside(food_noodles_2101, pot) # Ensure noodles are in the pot

behavior ensure_stove_on(stove:item):
    body:
        achieve is_on(stove) # Make sure the stove is on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        boil_noodles_with_cooked_chicken(pot)
        ensure_stove_on(stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_chicken_2089; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#goal_representation
 
behavior boil_noodles_with_cooked_chicken(pot:item, chicken:item, noodles:item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve_once inside(chicken, pot) # Ensure chicken is in the pot
        achieve_once inside(noodles, pot) # Ensure noodles are in the pot

behavior ensure_stove_on(stove:item):
    body:
        achieve is_on(stove) # Make sure the stove is on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select the pot with ID 78

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2089
        # Select the chicken with ID 2089

        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles] == 2101
        # Select the noodles with ID 2101

        boil_noodles_with_cooked_chicken(pot, chicken, noodles)
        ensure_stove_on(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_noodles_with_chicken(chicken:item, noodles:item, pot:item, stove:item):
    body:
        achieve is_on(stove)
        achieve has_water(pot)
        achieve inside(noodles, pot)
        achieve inside(chicken, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind noodles: item where:
            is_food_noodles(noodles)
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        boil_noodles_with_chicken(chicken, noodles, pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil the noodles with the already cooked chicken in the pot." ?
Answer: Put the chicken and noodles in the pot.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the noodles in the pot with the chicken and boil until the noodles are cooked.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_pot(noodles:item, chicken:item, pot:item):
    body:
        achieve_once inside(noodles, pot) # Place noodles in the pot
        achieve_once inside(chicken, pot) # Place chicken in the pot

behavior boil_pot(pot:item):
    body:
        achieve is_on(stove_2135) # Ensure the stove is on
        achieve has_water(pot) # Ensure the pot has water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select pot with ID 78
        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles] == 2101
        # Select noodles with ID 2101
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2089
        # Select chicken with ID 2089
        put_in_pot(noodles, chicken, pot)
        boil_pot(pot)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2135; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_oil_2149_around_cupboard_118(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#goal_representation
 
behavior boil_pot(pot:item, stove:item):
    body:
        achieve is_on(stove) # Ensure the stove is on
        achieve has_water(pot) # Ensure the pot has water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select pot with ID 78
        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles] == 2101
        # Select noodles with ID 2101
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2089
        # Select chicken with ID 2089
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove with ID 2135
        put_in_pot(noodles, chicken, pot)
        boil_pot(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function put_in_pot not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_78_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

#goal_representation
 
behavior put_noodles_and_chicken_in_pot(noodles:item, chicken:item, pot:item):
    body:
        achieve_once inside(noodles, pot)
        achieve_once inside(chicken, pot)

behavior boil_pot(pot:item, stove:item):
    body:
        achieve is_on(stove) # Ensure the stove is on
        achieve has_water(pot) # Ensure the pot has water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select pot with ID 78
        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles] == 2101
        # Select noodles with ID 2101
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2089
        # Select chicken with ID 2089
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove with ID 2135
        put_noodles_and_chicken_in_pot(noodles, chicken, pot)
        boil_pot(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_carrot_2086_around_cupboard_118(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_noodles_with_chicken(pot:item, stove:item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve_once is_on(stove) # Ensure the stove is on
        achieve_once inside(pot, stove) # Ensure the pot is on the stove
        achieve inside(food_chicken,pot) # Ensure the chicken is inside the pot
        achieve inside(food_noodles, pot) # Ensure the noodles are inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select the pot with ID 78
        bind food_chicken: item where:
            is_food_chicken(food_chicken) and inside(food_chicken, pot)
        # Select the chicken that is inside the pot
        bind food_noodles: item where:
            is_food_noodles(food_noodles) and inside(food_noodles, pot)
        # Select the noodles that are inside the pot
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove with ID 2135
        
        boil_noodles_with_chicken(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_chicken; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_carrot_2015_around_cupboard_118(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#goal_representation
 
behavior boil_noodles_with_chicken(pot:item, stove:item, food_chicken:item, food_noodles:item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve_once is_on(stove) # Ensure the stove is on
        achieve_once inside(pot, stove) # Ensure the pot is on the stove
        achieve inside(food_chicken, pot) # Ensure the chicken is inside the pot
        achieve inside(food_noodles, pot) # Ensure the noodles are inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select the pot with ID 78
        bind food_chicken: item where:
            is_food_chicken(food_chicken) and inside(food_chicken, pot)
        # Select the chicken that is inside the pot
        bind food_noodles: item where:
            is_food_noodles(food_noodles) and inside(food_noodles, pot)
        # Select the noodles that are inside the pot
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove with ID 2135
        
        boil_noodles_with_chicken(pot, stove, food_chicken, food_noodles)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)switchoff_executor(stove_2135)open_executor(stove_2135)putin_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchoff_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned off. 
##############################
From agent.py
open_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is opened. 
##############################
From agent.py
putin_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. stove_2135 is close pot_78. pot_78 is inside stove_2135. pot_78 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot has water before boiling. The actions have not explicitly mentioned adding water to pot_78. Please confirm that water has been added to the pot and that the stove is turned on to boil the noodles.
##############################
From agent.py
Human Instruction: You need to ensure that the pot has water before boiling. The actions have not explicitly mentioned adding water to pot_78. Please confirm that water has been added to the pot and that the stove is turned on to boil the noodles.

Human Guidance: Put the chicken and noodles in the pot.
The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for pot_2138 around kitchen_counter_122.
Action 3: Walk to pot_78.
Action 4: Grab pot_78.
Action 5: Walk to faucet_20.
Action 6: Switch on faucet_20.
Action 7: Switch off faucet_20.
Action 8: Walk to stove_2135.
Action 9: Switch on stove_2135.
Action 10: Walk to fridge_126.
Action 11: Switch off fridge_126.
Action 12: Open fridge_126.
Action 13: look for food_chicken_2089 around fridge_126.
Action 14: Grab food_chicken_2089.
Action 15: Put food_chicken_2089 into pot_78.
Action 16: Grab food_noodles_2101.
Action 17: Put food_noodles_2101 into pot_78.
Action 18: Walk to stove_2135.
Action 19: Switch off stove_2135.
Action 20: Open stove_2135.
Action 21: Put pot_78 into stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_detergent_2155_around_cupboard_117(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(detergent,cupboard_instance)
        else:
            exp(detergent,cupboard_instance)
    eff:
        unknown[detergent]=False
        close[detergent,cupboard_instance]=True
        close[cupboard_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior ensure_water_in_pot(pot:item):
    body:
        achieve has_water(pot)

behavior boil_noodles_with_chicken(pot: item, stove: item, noodles: item, chicken: item):
    body:
        achieve_once inside(noodles, pot)
        achieve_once inside(chicken, pot)
        achieve is_on(stove)
        achieve inside(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select pot with ID 78
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove with ID 2135
        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles] == 2101
        # Select noodles with ID 2101
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2089
        # Select chicken with ID 2089
        ensure_water_in_pot(pot)
        boil_noodles_with_chicken(pot, stove, noodles, chicken)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior ensure_water_in_pot(pot:item):
    body:
        achieve has_water(pot)

behavior boil_noodles_with_chicken(pot: item, stove: item, noodles: item, chicken: item):
    body:
        achieve_once inside(noodles, pot)
        achieve_once inside(chicken, pot)
        achieve is_on(stove)
        achieve inside(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        # Select pot with ID 78
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove with ID 2135
        bind noodles: item where:
            is_food_noodles(noodles) and id[noodles] == 2101
        # Select noodles with ID 2101
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2089
        # Select chicken with ID 2089
        ensure_water_in_pot(pot)
        boil_noodles_with_chicken(pot, stove, noodles, chicken)
##############################
From agent.py-> find a plan in act()
switchon_executor(stove_2135)
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some noodles with chicken.
Action History:
['walk_executor(kitchen_counter_122)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_chicken_2089)', 'putin_executor(food_chicken_2089, pot_78)', 'grab_executor(food_noodles_2101)', 'putin_executor(food_noodles_2101, pot_78)', 'walk_executor(stove_2135)', 'switchoff_executor(stove_2135)', 'open_executor(stove_2135)', 'putin_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)']
Time info:
Time consume: 766 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 0
goal generate times: 21
goal correct times: 6
action_num: 20

Task complete rate:
Keystate: k1 - Requires: 15 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
