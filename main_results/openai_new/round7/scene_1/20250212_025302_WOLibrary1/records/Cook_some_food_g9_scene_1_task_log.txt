From agent.py
Reset goals: The sub-goals are: 
['1. Peel and cut the potatoes into strips.', '2. Fry the potato strips until they are golden brown.', '3. Place the French fries on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2107_around_kitchen_counter_122(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior peel_and_cut_potatoes(potato: item, cutting_board: item, knife: item):
    body:
        achieve_once inhand(knife)
        achieve_once cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind knife: item where:
            is_knife(knife)

        achieve_once on(potato, cutting_board)
        peel_and_cut_potatoes(potato, cutting_board, knife)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior peel_and_cut_potatoes(potato: item, cutting_board: item, knife: item):
    body:
        achieve_once inhand(knife)
        achieve_once cut(potato)

behavior __goal__():
    body:
        bind potato: item where:
            is_food_potato(potato)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        bind knife: item where:
            is_knife(knife)

        achieve_once on(potato, cutting_board)
        peel_and_cut_potatoes(potato, cutting_board, knife)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(food_potato_2107, kitchen_counter_122)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(food_potato_2107, kitchen_counter_122)
Fail to find food_potato_2107 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_potato_2107, fridge_126)walk_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_potato_2107, fridge_126)
Find food_potato_2107. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2107)walk_executor(cutting_board_2123)put_executor(food_potato_2107, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_potato_2107 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_potato_2107, cutting_board_2123)
Robot find: Robot is close to the food_potato_2107. Robot is close to the cutting_board_2123. Robot is close to the kitchen_counter_119. cutting_board_2123 is close food_potato_2107. food_potato_2107 is close cutting_board_2123. food_potato_2107 is on cutting_board_2123. food_potato_2107 released by right hand. 
##############################
From agent.py
walk_executor(knifeblock_76)
Robot find: Robot is close to the knifeblock_76. 
##############################
From agent.py
exp(knife_2122, knifeblock_76)
Fail to find knife_2122 around knifeblock_76. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(knife_2122, cupboard_118)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(knife_2122, cupboard_118)
Fail to find knife_2122 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
grab_executor(knife_2037)walk_executor(food_potato_2107)cut_executor(food_potato_2107)
##############################
From agent.py
grab_executor(knife_2037)
Robot find: Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. Grabbing knife_2037 by right hand. 
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
cut_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_clothes_dress_2116_around_basket_for_clothes_2078(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potatoes(potato_strips:item, frying_pan:item, stove:item):
    body:
        achieve inside(potato_strips, frying_pan) # Place the potato strips inside the frying pan for frying
        achieve is_on(stove) # Ensure the stove is on for cooking

behavior __goal__():
    body:
        bind potato_strips: item where:
            is_food_potato(potato_strips) and cut(potato_strips)
        # Select the cut potato strips

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_potatoes(potato_strips, frying_pan, stove)
        # Fry the potato strips until golden brown

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

behavior find_clothes_dress_2116_around_basket_for_clothes_2078(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potato_strips(oil:item, pan:item, stove:item, potatoes:item):
    body:
        achieve_once inside(oil, pan)
        # Add oil to the pan for frying
        achieve_once is_on(stove)
        # Turn on the stove for heating
        achieve inside(potatoes, pan)
        # Keep potato strips inside the pan for frying

def golden_brown(potatoes: item):
    # Function to check if the potato strips are golden brown
    # This example does not provide an available state for checking color, 
    # so assume observations will be handled programmatically
    # Therefore, return True as a placeholder
    return True

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind oil: item where:
            is_oil(oil)
        # Select oil for frying

        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select cut potatoes
        
        fry_potato_strips(oil, pan, stove, potatoes)

        if golden_brown(potatoes): 
            achieve inside(potatoes, pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_clothes_dress_2116_around_basket_for_clothes_2078(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

behavior find_oil_2149_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_golden_brown(fryingpan:item):
    # Function to check if the potato strips in the pan are golden brown
    symbol is_golden= exists o: item : (is_food_potato(o) and inside(o, fryingpan) and achieve(on(o, golden_brown)))
    return is_golden

def has_potato_in_pan(fryingpan:item):
    # Function to check if there are potato strips in the frying pan
    symbol has_potato= exists o: item : (is_food_potato(o) and inside(o, fryingpan))
    return has_potato

behavior fry_potatoes(fryingpan:item, stove:item):
    body:
        achieve is_on(stove) # Turn on the stove
        # Fry the potatoes until they are golden brown
        while not is_golden_brown(fryingpan):
            # Wait until the potatoes turn golden brown
            pass
        achieve is_off(stove) # Turn off the stove after frying

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        if has_potato_in_pan(fryingpan):
            # If the potato strips are already in the pan, start frying
            fry_potatoes(fryingpan, stove)
        else:
            # If no potato strips are in the pan, proceed by referring to prior steps to place them in the pan
            observe(fryingpan, "Check if there are potato strips in the frying pan")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: golden_brown; available variables: [Variable<fryingpan: item>, Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_clothes_dress_2116_around_basket_for_clothes_2078(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#goal_representation
 
def is_golden_brown(o: item):
    # Function to check if the item is golden brown
    return on(o, golden_brown)

def is_food_potato_in_pan(fryingpan: item):
    # Function to check if a food potato is in the frying pan
    symbol has_potato=exists o: item: (is_food_potato(o) and inside(o, fryingpan))
    return has_potato

behavior fry_potatoes(fryingpan: item, stove: item):
    body:
        achieve is_on(stove) # Turn on the stove
        # Fry the potatoes until they are golden brown
        symbol is_golden_brown_potato=exists o: item: (is_food_potato(o) and inside(o, fryingpan) and is_golden_brown(o))
        while not is_golden_brown_potato:
            pass
        achieve is_off(stove) # Turn off the stove after frying

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        if is_food_potato_in_pan(fryingpan):
            fry_potatoes(fryingpan, stove)
        else:
            observe(fryingpan, "Check if there are potato strips in the frying pan")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: golden_brown; available variables: [Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_oil_2149_around_stove_2135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

#goal_representation
 
def is_golden_brown(o: item, golden_brown: item):
    # Function to check if the item is golden brown
    return on(o, golden_brown)

def is_food_potato_in_pan(fryingpan: item):
    # Function to check if a food potato is in the frying pan
    symbol has_potato=exists o: item: (is_food_potato(o) and inside(o, fryingpan))
    return has_potato

behavior fry_potatoes(fryingpan: item, stove: item):
    body:
        achieve is_on(stove) # Turn on the stove
        # Fry the potatoes until they are golden brown
        bind golden_brown: item where:
            # Assuming theres a predefined item that represents the golden brown state
            is_food_sugar(golden_brown) # Placeholder condition replace with actual condition if known
        symbol is_golden_brown_potato=exists o: item: (is_food_potato(o) and inside(o, fryingpan) and is_golden_brown(o, golden_brown))
        while not is_golden_brown_potato:
            pass
        achieve is_off(stove) # Turn off the stove after frying

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        if is_food_potato_in_pan(fryingpan):
            fry_potatoes(fryingpan, stove)
        else:
            observe(fryingpan, "Check if there are potato strips in the frying pan")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_golden_brown(o: item, golden_brown: item):
    # Function to check if the item is golden brown
    return on(o, golden_brown)

def is_food_potato_in_pan(fryingpan: item):
    # Function to check if a food potato is in the frying pan
    symbol has_potato=exists o: item: (is_food_potato(o) and inside(o, fryingpan))
    return has_potato

behavior fry_potatoes(fryingpan: item, stove: item):
    body:
        achieve is_on(stove) # Turn on the stove
        # Fry the potatoes until they are golden brown
        bind golden_brown: item where:
            # Assuming theres a predefined item that represents the golden brown state
            is_food_sugar(golden_brown) # Placeholder condition replace with actual condition if known
        symbol is_golden_brown_potato=exists o: item: (is_food_potato(o) and inside(o, fryingpan) and is_golden_brown(o, golden_brown))
        while not is_golden_brown_potato:
            pass
        achieve is_off(stove) # Turn off the stove after frying

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind stove: item where:
            is_stove(stove)
        if is_food_potato_in_pan(fryingpan):
            fry_potatoes(fryingpan, stove)
        else:
            observe(fryingpan, "Check if there are potato strips in the frying pan")

##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2154)obs(fryingpan_2154, Check if there are potato strips in the frying pan)
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
obs(fryingpan_2154, Check if there are potato strips in the frying pan)
Get this information:  fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to character_240. fryingpan_2154 is on kitchen_counter_122. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to place the potato strips into the frying pan and then proceed to fry them until they are golden brown.
##############################
From agent.py
Human Instruction: The robot needs to place the potato strips into the frying pan and then proceed to fry them until they are golden brown.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for food_potato_2107 around kitchen_counter_122.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_potato_2107 around fridge_126.
Action 7: Grab food_potato_2107.
Action 8: Walk to cutting_board_2123.
Action 9: Put food_potato_2107 on cutting_board_2123.
Action 10: Walk to knifeblock_76.
Action 11: look for knife_2122 around knifeblock_76.
Action 12: Walk to cupboard_118.
Action 13: Open cupboard_118.
Action 14: look for knife_2122 around cupboard_118.
Action 15: Grab knife_2037.
Action 16: Walk to food_potato_2107.
Action 17: Cut food_potato_2107.
Action 18: Walk to fryingpan_2154.
Action 19: Observe around fryingpan_2154 with the question of Check if there are potato strips in the frying pan.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potato_strips(potatoes: item, fryingpan: item):
    body:
        achieve_once inside(potatoes, fryingpan)
        # Ensure the potato strips are inside the frying pan
        achieve golden_brown(potatoes)
        # Fry the potato strips until they are golden brown

def golden_brown(potatoes: item):
    # Function to check if the potato strips are golden brown
    symbol is_golden_brown= exists o: item : (is_food_potato(o) and cut(o) and inside(o, fryingpan) and golden_brown_state(o))
    return is_golden_brown

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potato strips
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        
        fry_potato_strips(potatoes, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function golden_brown not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_onion_2048_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#goal_representation
 
behavior fry_potato_strips(potatoes: item, fryingpan: item):
    body:
        achieve_once inside(potatoes, fryingpan)
        # Ensure the potato strips are inside the frying pan
        achieve golden_brown_state(potatoes)
        # Fry the potato strips until they are golden brown

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potato strips
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        
        fry_potato_strips(potatoes, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function golden_brown_state not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2035_around_cupboard_117(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

behavior find_oil_2149_around_photoframe_219(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==219
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(oil,photoframe_instance)
        else:
            exp(oil,photoframe_instance)
    eff:
        unknown[oil]=False
        close[oil,photoframe_instance]=True
        close[photoframe_instance,oil]=True
    

#goal_representation
 
behavior fry_potato_strips(potatoes: item, fryingpan: item):
    body:
        achieve_once inside(potatoes, fryingpan)
        # Ensure the potato strips are inside the frying pan
        achieve is_on(fryingpan)
        # Ensure the frying pan is on
        achieve golden_brown_sate(potatoes)
        # Fry the potato strips until they are in a golden brown state

behavior __goal__():
    body:
        bind potatoes: item where:
            is_food_potato(potatoes) and cut(potatoes)
        # Select the cut potato strips
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        
        fry_potato_strips(potatoes, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2061_around_microwave_135(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_orange,microwave_instance)
        else:
            exp(food_orange,microwave_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,microwave_instance]=True
        close[microwave_instance,food_orange]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2013_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def is_potato_inside_pan(pan:item):
    # Check if there are potato strips inside the frying pan
    symbol potato_strips_inside=exists o: item : (is_food_potato(o) and inside(o, pan))
    return potato_strips_inside

behavior fry_potatoes(pan:item):
    body:
        achieve has_a_free_hand(char)
        # Ensure the character has a free hand to handle the task of frying

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        if not is_potato_inside_pan(pan):
            # If there are no potato strips inside the frying pan, observe to check it
            observe(pan, "Check if there are potato strips in the pan")

        # Start frying the potato strips
        fry_potatoes(pan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_potato_inside_pan(pan:item):
    # Check if there are potato strips inside the frying pan
    symbol potato_strips_inside=exists o: item : (is_food_potato(o) and inside(o, pan))
    return potato_strips_inside

behavior fry_potatoes(pan:item):
    body:
        achieve has_a_free_hand(char)
        # Ensure the character has a free hand to handle the task of frying

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        if not is_potato_inside_pan(pan):
            # If there are no potato strips inside the frying pan, observe to check it
            observe(pan, "Check if there are potato strips in the pan")

        # Start frying the potato strips
        fry_potatoes(pan)

##############################
From agent.py-> find a plan in act()
obs(fryingpan_2154, Check if there are potato strips in the pan)
##############################
From agent.py
obs(fryingpan_2154, Check if there are potato strips in the pan)
Get this information:  fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to character_240. fryingpan_2154 is on kitchen_counter_122. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to place the potato strips into the frying pan before proceeding to fry them until they are golden brown.
##############################
From agent.py
Human Instruction: The robot needs to place the potato strips into the frying pan before proceeding to fry them until they are golden brown.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for food_potato_2107 around kitchen_counter_122.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_potato_2107 around fridge_126.
Action 7: Grab food_potato_2107.
Action 8: Walk to cutting_board_2123.
Action 9: Put food_potato_2107 on cutting_board_2123.
Action 10: Walk to knifeblock_76.
Action 11: look for knife_2122 around knifeblock_76.
Action 12: Walk to cupboard_118.
Action 13: Open cupboard_118.
Action 14: look for knife_2122 around cupboard_118.
Action 15: Grab knife_2037.
Action 16: Walk to food_potato_2107.
Action 17: Cut food_potato_2107.
Action 18: Walk to fryingpan_2154.
Action 19: Observe around fryingpan_2154 with the question of Check if there are potato strips in the frying pan.
Action 20: Observe around fryingpan_2154 with the question of Check if there are potato strips in the pan.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_cupboard_117(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

behavior find_oil_2149_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_potato_strips(potato_strips:item, fryingpan:item):
    body:
        achieve cut(potato_strips)
        # Ensure potato strips are cut
        achieve_once inside(potato_strips, fryingpan)
        # Place the potato strips into the frying pan
        observe(fryingpan, "Check if the potato strips are golden brown")
        # Observe and check if the potato strips are golden brown

behavior __goal__():
    body:
        bind potato_strips: item where:
            is_food_potato(potato_strips)
        # Select the potato strips
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        fry_potato_strips(potato_strips, fryingpan)
        # Fry the potato strips until they are golden brown

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_potato_strips(potato_strips:item, fryingpan:item):
    body:
        achieve cut(potato_strips)
        # Ensure potato strips are cut
        achieve_once inside(potato_strips, fryingpan)
        # Place the potato strips into the frying pan
        observe(fryingpan, "Check if the potato strips are golden brown")
        # Observe and check if the potato strips are golden brown

behavior __goal__():
    body:
        bind potato_strips: item where:
            is_food_potato(potato_strips)
        # Select the potato strips
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        fry_potato_strips(potato_strips, fryingpan)
        # Fry the potato strips until they are golden brown

##############################
From agent.py-> find a plan in act()
walk_executor(food_potato_2107)cut_executor(food_potato_2107)grab_executor(food_potato_2107)walk_executor(fryingpan_2154)putin_executor(food_potato_2107, fryingpan_2154)obs(fryingpan_2154, Check if the potato strips are golden brown)
##############################
From agent.py
walk_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
cut_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. 
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the cutting_board_2123. Robot is close to the food_potato_2107. Grabbing food_potato_2107 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the food_potato_2107. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(food_potato_2107, fryingpan_2154)
Robot find: Robot is close to the knife_2037. Robot is close to the food_potato_2107. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. food_potato_2107 is close fryingpan_2154. fryingpan_2154 is close food_potato_2107. food_potato_2107 is inside fryingpan_2154. food_potato_2107 released by left hand. 
##############################
From agent.py
obs(fryingpan_2154, Check if the potato strips are golden brown)
Get this information:  fryingpan_2154 is close to kitchen_counter_122. fryingpan_2154 is close to character_240. fryingpan_2154 is close to food_potato_2107. fryingpan_2154 is on kitchen_counter_122. food_potato_2107 is inside fryingpan_2154. fryingpan_2154 is inside dining_room_41. fryingpan_2154 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fry the potato strips until they are golden brown. The observation around the frying pan indicates that the potato strips are not yet golden brown.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2086_around_oven_127(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_carrot,oven_instance)
        else:
            exp(food_carrot,oven_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,oven_instance]=True
        close[oven_instance,food_carrot]=True
    

behavior find_tray_2068_around_plate_2152(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(tray,plate_instance)
        else:
            exp(tray,plate_instance)
    eff:
        unknown[tray]=False
        close[tray,plate_instance]=True
        close[plate_instance,tray]=True
    

#exp_behavior_end

#goal_representation

behavior put_fries_on_plate(fries:item, plate:item):
    body:
        achieve_once on(fries, plate)

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) and cut(fries)
        # Select the fries that have been cut
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        put_fries_on_plate(fries, plate)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_128_around_dishwasher_129(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

behavior find_cup_2134_around_plate_2152(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(cup,plate_instance)
        else:
            exp(cup,plate_instance)
    eff:
        unknown[cup]=False
        close[cup,plate_instance]=True
        close[plate_instance,cup]=True
    

#exp_behavior_end

#goal_representation
plain
behavior place_fries_on_plate(fries:item, plate:item):
    body:
        achieve_once on(fries, plate)

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) # Assuming fries are classified as food_potato
        bind plate: item where:
            is_plate(plate)
        place_fries_on_plate(fries, plate)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'plain') at line 5371, column 1.
Expected one of: 
	* TYPEDEF
	* GOAL
	* $END
	* UNDIRECTED_GENERATOR
	* OBJECTS
	* INIT
	* INCLUDE
	* CONTROLLER
	* FEATURE
	* _NEWLINE
	* BEHAVIOR
	* _PRAGMA_KEYWORD
	* IMPORT
	* DEF
	* DOMAIN
	* GENERATOR
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2134_around_plate_2152(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(cup,plate_instance)
        else:
            exp(cup,plate_instance)
    eff:
        unknown[cup]=False
        close[cup,plate_instance]=True
        close[plate_instance,cup]=True
    

behavior find_tray_2068_around_plate_2152(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(tray,plate_instance)
        else:
            exp(tray,plate_instance)
    eff:
        unknown[tray]=False
        close[tray,plate_instance]=True
        close[plate_instance,tray]=True
    

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#goal_representation
plain
behavior place_fries_on_plate(fries:item, plate:item):
    body:
        achieve_once on(fries, plate)

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries)
        bind plate: item where:
            is_plate(plate)
        place_fries_on_plate(fries, plate)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'plain') at line 5389, column 1.
Expected one of: 
	* TYPEDEF
	* GOAL
	* $END
	* UNDIRECTED_GENERATOR
	* OBJECTS
	* INIT
	* INCLUDE
	* CONTROLLER
	* FEATURE
	* _NEWLINE
	* BEHAVIOR
	* _PRAGMA_KEYWORD
	* IMPORT
	* DEF
	* DOMAIN
	* GENERATOR
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2122_around_cupboard_117(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(knife,cupboard_instance)
        else:
            exp(knife,cupboard_instance)
    eff:
        unknown[knife]=False
        close[knife,cupboard_instance]=True
        close[cupboard_instance,knife]=True
    

#goal_representation
plain
behavior place_fries_on_plate(fries:item, plate:item):
    body:
        achieve_once on(fries, plate)

behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries)
        bind plate: item where:
            is_plate(plate)
        place_fries_on_plate(fries, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_check_2058_around_plate_2152(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(check,plate_instance)
        else:
            exp(check,plate_instance)
    eff:
        unknown[check]=False
        close[check,plate_instance]=True
        close[plate_instance,check]=True
    

behavior find_tray_128_around_sink_120(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(tray,sink_instance)
        else:
            exp(tray,sink_instance)
    eff:
        unknown[tray]=False
        close[tray,sink_instance]=True
        close[sink_instance,tray]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind fries: item where:
            is_food_potato(fries) and cut(fries) and clean(fries)
        
        bind plate: item where:
            is_plate(plate) and clean(plate)
        
        achieve_once on(fries, plate)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. place the french fries on a plate." ?
Answer: After frying the potato strips, use a suitable utensil to carefully lift the French fries from the frying pan and place them on a plate.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_wooden_spoon_2000_around_pot_78(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(wooden_spoon,pot_instance)
        else:
            exp(wooden_spoon,pot_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,pot_instance]=True
        close[pot_instance,wooden_spoon]=True
    

behavior find_tray_2068_around_plate_2152(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind plate_instance:item where:
            is_plate(plate_instance) and id[plate_instance]==2152
        achieve close_char(char,plate_instance)
        if can_open(plate_instance):
            achieve_once open(plate_instance)
            exp(tray,plate_instance)
        else:
            exp(tray,plate_instance)
    eff:
        unknown[tray]=False
        close[tray,plate_instance]=True
        close[plate_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
def has_french_fries(pan: item):
    # Function to check if there are French fries in the specified pan
    symbol has_fries = exists o: item : (is_food_potato(o) and inside(o, pan))
    return has_fries

behavior transfer_fries_to_plate(pan: item, plate: item):
    body:
        foreach fry: item:
            if is_food_potato(fry) and inside(fry, pan):
                achieve_once on(fry, plate)
                # Place the French fries on the plate

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and has_french_fries(fryingpan)
        # Select the frying pan that has French fries in it
        
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        transfer_fries_to_plate(fryingpan, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_french_fries(pan: item):
    # Function to check if there are French fries in the specified pan
    symbol has_fries = exists o: item : (is_food_potato(o) and inside(o, pan))
    return has_fries

behavior transfer_fries_to_plate(pan: item, plate: item):
    body:
        foreach fry: item:
            if is_food_potato(fry) and inside(fry, pan):
                achieve_once on(fry, plate)
                # Place the French fries on the plate

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and has_french_fries(fryingpan)
        # Select the frying pan that has French fries in it
        
        bind plate: item where:
            is_plate(plate)
        # Select a plate
        
        transfer_fries_to_plate(fryingpan, plate)

##############################
From agent.py-> find a plan in act()
grab_executor(food_potato_2107)walk_executor(plate_2152)put_executor(food_potato_2107, plate_2152)
##############################
From agent.py
grab_executor(food_potato_2107)
Robot find: Robot is close to the knife_2037. Robot is close to the food_potato_2107. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. Grabbing food_potato_2107 by left hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the knife_2037. Robot is close to the food_potato_2107. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_potato_2107, plate_2152)
Robot find: Robot is close to the knife_2037. Robot is close to the food_potato_2107. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. food_potato_2107 is close plate_2152. plate_2152 is close food_potato_2107. food_potato_2107 is on plate_2152. food_potato_2107 released by left hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Make some French fries.
Action History:
['walk_executor(kitchen_counter_122)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_potato_2107)', 'walk_executor(cutting_board_2123)', 'put_executor(food_potato_2107, cutting_board_2123)', 'walk_executor(knifeblock_76)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'grab_executor(knife_2037)', 'walk_executor(food_potato_2107)', 'cut_executor(food_potato_2107)', 'walk_executor(fryingpan_2154)', 'walk_executor(food_potato_2107)', 'cut_executor(food_potato_2107)', 'grab_executor(food_potato_2107)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_potato_2107, fryingpan_2154)', 'grab_executor(food_potato_2107)', 'walk_executor(plate_2152)', 'put_executor(food_potato_2107, plate_2152)']
Time info:
Time consume: 308 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 11
goal correct times: 2
action_num: 22

Task complete rate:
Keystate: k1 - Requires: 18 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
