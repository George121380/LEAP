From agent.py
Reset goals: The sub-goals are: 
['1. Locate the bathroom sink.', '2. Fill the sink with water and add soap.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_shower_16(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(toilet_paper,shower_instance)
        else:
            exp(toilet_paper,shower_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,shower_instance]=True
        close[shower_instance,toilet_paper]=True
    

behavior find_soap_2126_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior locate_bathroom_sink(bathroom:item):
    body:
        achieve_once close_char(char, bathroom)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select an item that is a bathroom
        locate_bathroom_sink(bathroom)
        # Move the character close to the bathroom
#goal_representation_end

##############################
From agent.py->reset_goal
behavior locate_bathroom_sink(bathroom:item):
    body:
        achieve_once close_char(char, bathroom)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select an item that is a bathroom
        locate_bathroom_sink(bathroom)
        # Move the character close to the bathroom
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_1)
##############################
From agent.py
walk_executor(bathroom_1)

##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2141_around_cupboard_118(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_detergent_2011_around_bathroom_cabinet_17(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_soap_2126_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve_once open(faucet)
        achieve_once has_water(sink)
        # Open the faucet and fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink)
        # Add soap to the sink

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        bind soap: item where:
            is_soap(soap)
        # Select soap
        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2141_around_cupboard_118(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_soap_2126_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def find_faucet_near_sink(sink:item):
    # Function to check if there is a faucet close to the sink
    symbol has_faucet=exists faucet: item : (is_faucet(faucet) and close(faucet, sink))
    return has_faucet

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Achieve the state of filling the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Achieve placing soap inside the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        if find_faucet_near_sink(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            # Bind the faucet near the sink
        else:
            foreach faucet: item:
                if is_faucet(faucet) and not visited(faucet):
                    observe(faucet, "Determine if this faucet is near the sink")

        bind soap: item where:
            is_soap(soap)
        # Select soap
        
        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: faucet; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2141_around_cupboard_118(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_detergent_2155_around_washing_machine_2079(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2079
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_soap_2126_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#goal_representation
 
def find_faucet_near_sink(sink:item):
    # Function to check if there is a faucet close to the sink
    symbol has_faucet=exists faucet: item : (is_faucet(faucet) and close(faucet, sink))
    return has_faucet

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Achieve the state of filling the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Achieve placing soap inside the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        if find_faucet_near_sink(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            # Bind the faucet near the sink

            bind soap: item where:
                is_soap(soap)
            # Select soap
            
            fill_sink_with_water(sink, faucet)
            add_soap_to_sink(sink, soap)

        else:
            foreach faucet: item:
                if is_faucet(faucet) and not visited(faucet):
                    observe(faucet, "Determine if this faucet is near the sink")


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_faucet_near_sink(sink:item):
    # Function to check if there is a faucet close to the sink
    symbol has_faucet=exists faucet: item : (is_faucet(faucet) and close(faucet, sink))
    return has_faucet

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Achieve the state of filling the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Achieve placing soap inside the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        if find_faucet_near_sink(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            # Bind the faucet near the sink

            bind soap: item where:
                is_soap(soap)
            # Select soap
            
            fill_sink_with_water(sink, faucet)
            add_soap_to_sink(sink, soap)

        else:
            foreach faucet: item:
                if is_faucet(faucet) and not visited(faucet):
                    observe(faucet, "Determine if this faucet is near the sink")


##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(bathroom_cabinet_17)open_executor(bathroom_cabinet_17)exp(soap_2125, bathroom_cabinet_17)walk_executor(soap_2125)grab_executor(soap_2125)walk_executor(sink_19)putin_executor(soap_2125, sink_19)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(bathroom_cabinet_17)
Robot find: Robot is close to the bathroom_cabinet_17. 
##############################
From agent.py
open_executor(bathroom_cabinet_17)
Robot find: tooth_paste_2059, Robot is close to the bathroom_cabinet_17. Robot is close to the tooth_paste_2059. bathroom_cabinet_17 is opened. 
##############################
From agent.py
exp(soap_2125, bathroom_cabinet_17)
Fail to find soap_2125 around bathroom_cabinet_17. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(soap_2125, cupboard_117)walk_executor(soap_2125)grab_executor(soap_2125)walk_executor(sink_19)putin_executor(soap_2125, sink_19)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, pot_78, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(soap_2125, cupboard_117)
Fail to find soap_2125 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)exp(soap_2125, sink_19)walk_executor(soap_2125)grab_executor(soap_2125)walk_executor(sink_19)putin_executor(soap_2125, sink_19)
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, cleaning_solution_2143, Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
exp(soap_2125, sink_19)
Find soap_2125. 
##############################
From agent.py-> find a plan in act()
walk_executor(soap_2125)grab_executor(soap_2125)walk_executor(sink_19)putin_executor(soap_2125, sink_19)
##############################
From agent.py
walk_executor(soap_2125)
Robot find: Robot is close to the sink_19. Robot is close to the soap_2125. 
##############################
From agent.py
grab_executor(soap_2125)
Robot find: Robot is close to the sink_19. Robot is close to the soap_2125. Grabbing soap_2125 by right hand. 
##############################
From agent.py
walk_executor(sink_19)
Robot find: Robot is close to the sink_19. Robot is close to the soap_2125. Robot is close to the bathroom_counter_18. 
##############################
From agent.py
putin_executor(soap_2125, sink_19)
Robot find: Robot is close to the sink_19. Robot is close to the soap_2125. Robot is close to the bathroom_counter_18. soap_2125 is inside sink_19. soap_2125 is close sink_19. soap_2125 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Prepare a sink of soapy water in the bathroom.
Action History:
['walk_executor(bathroom_1)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(bathroom_cabinet_17)', 'open_executor(bathroom_cabinet_17)', 'walk_executor(cupboard_117)', 'walk_executor(sink_19)', 'walk_executor(soap_2125)', 'grab_executor(soap_2125)', 'walk_executor(sink_19)', 'putin_executor(soap_2125, sink_19)']
Time info:
Time consume: 102 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 3
goal correct times: 1
action_num: 12

Task complete rate:
1
Scene_id: 1
##############################
