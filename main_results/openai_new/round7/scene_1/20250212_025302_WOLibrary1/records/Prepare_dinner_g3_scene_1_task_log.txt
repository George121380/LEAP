From agent.py
Reset goals: The sub-goals are: 
['Cook the bacon in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2151_around_cupboard_118(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_food_bacon_2082_around_fridge_126(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

behavior find_fryingpan_2154_around_cupboard_118(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_bacon(fryingpan:item, stove:item, bacon:item):
    body:
        achieve plugged(stove)
        # Ensure the stove is plugged in
        achieve is_on(stove)
        # Turn on the stove
        achieve on(bacon, fryingpan)
        # Place the bacon in the frying pan
        achieve_once on(fryingpan, stove)
        # Place the frying pan on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select an appropriate frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove to use

        bind bacon: item where:
            is_food_bacon(bacon)
        # Select the bacon

        cook_bacon(fryingpan, stove, bacon)
        # Execute the behavior to cook the bacon in the frying pan

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_check_2075_around_kitchen_counter_122(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(check,kitchen_counter_instance)
        else:
            exp(check,kitchen_counter_instance)
    eff:
        unknown[check]=False
        close[check,kitchen_counter_instance]=True
        close[kitchen_counter_instance,check]=True
    

behavior find_fork_2150_around_cupboard_118(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_fryingpan_2154_around_cupboard_118(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_bacon_in_fryingpan(bacon:item, fryingpan:item, stove:item):
    body:
        achieve inside(bacon, fryingpan)
        # Ensure the bacon is inside the frying pan
        achieve on(fryingpan, stove)
        # Ensure the frying pan is on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        # Select a bacon item

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        cook_bacon_in_fryingpan(bacon, fryingpan, stove)
        # Call the behavior to cook bacon in the frying pan placed on the stove

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bacon_2082_around_fridge_126(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

behavior find_fryingpan_2154_around_cupboard_118(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_fork_2151_around_cupboard_118(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_bacon_in_pan(bacon:item, pan:item, stove:item):
    body:
        achieve is_on(stove) # Ensure the stove is on
        achieve_once inside(bacon, pan) # Place the bacon inside the frying pan

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        # Select bacon as the food item
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        cook_bacon_in_pan(bacon, pan, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior cook_bacon_in_pan(bacon:item, pan:item, stove:item):
    body:
        achieve is_on(stove) # Ensure the stove is on
        achieve_once inside(bacon, pan) # Place the bacon inside the frying pan

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        # Select bacon as the food item
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        cook_bacon_in_pan(bacon, pan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(cupboard_118)open_executor(cupboard_118)exp(fryingpan_2154, cupboard_118)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bacon_2082, fridge_126)walk_executor(food_bacon_2082)grab_executor(food_bacon_2082)walk_executor(fryingpan_2154)putin_executor(food_bacon_2082, fryingpan_2154)
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_118)
Fail to find fryingpan_2154 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bacon_2082, fridge_126)walk_executor(food_bacon_2082)grab_executor(food_bacon_2082)walk_executor(fryingpan_2154)putin_executor(food_bacon_2082, fryingpan_2154)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bacon_2082, fridge_126)walk_executor(food_bacon_2082)grab_executor(food_bacon_2082)walk_executor(fryingpan_2154)putin_executor(food_bacon_2082, fryingpan_2154)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_bacon_2082, fridge_126)
Find food_bacon_2082. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_bacon_2082)walk_executor(fryingpan_2154)putin_executor(food_bacon_2082, fryingpan_2154)
##############################
From agent.py
grab_executor(food_bacon_2082)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_bacon_2082 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot find: Robot is close to the food_bacon_2082. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. 
##############################
From agent.py
putin_executor(food_bacon_2082, fryingpan_2154)
Robot find: Robot is close to the food_bacon_2082. Robot is close to the fryingpan_2154. Robot is close to the kitchen_counter_122. fryingpan_2154 is close food_bacon_2082. food_bacon_2082 is inside fryingpan_2154. food_bacon_2082 is close fryingpan_2154. food_bacon_2082 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Cook bacon with the frying pan.
Action History:
['walk_executor(stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(kitchen_counter_122)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_bacon_2082)', 'walk_executor(fryingpan_2154)', 'putin_executor(food_bacon_2082, fryingpan_2154)']
Time info:
Time consume: 78 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 3
goal correct times: 0
action_num: 11

Task complete rate:
Keystate: k1 - Requires: 7 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
