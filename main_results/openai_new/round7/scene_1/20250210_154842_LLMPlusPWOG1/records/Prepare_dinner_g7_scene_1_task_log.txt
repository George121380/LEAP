From agent.py
Reset goals: The sub-goals are: 
['Cook a pot of fish soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_envelope_2055_around_cupboard_117(envelope:item):
    goal: not unknown(envelope)
    body:
        assert is_envelope(envelope)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(envelope,cupboard_instance)
        else:
            exp(envelope,cupboard_instance)
    eff:
        unknown[envelope]=False
        close[envelope,cupboard_instance]=True
        close[cupboard_instance,envelope]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_scrabble_2031_around_cupboard_117(scrabble:item):
    goal: not unknown(scrabble)
    body:
        assert is_scrabble(scrabble)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(scrabble,cupboard_instance)
        else:
            exp(scrabble,cupboard_instance)
    eff:
        unknown[scrabble]=False
        close[scrabble,cupboard_instance]=True
        close[cupboard_instance,scrabble]=True
    

behavior find_food_onion_2048_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2015_around_cupboard_117(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation

behavior prepare_dish(pot: item, stove: item, fish: item, water: item, onion: item, carrot: item):
    body:
        achieve_once inside(fish, pot)
        achieve_once inside(water, pot)
        achieve_once inside(onion, pot)
        achieve_once inside(carrot, pot)
        achieve_once inside(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind fish: item where:
            is_food_fish(fish)
        bind water: item where:
            has_water(water) and pourable(water)
        bind onion: item where:
            is_food_onion(onion)
        bind carrot: item where:
            is_food_carrot(carrot)
        prepare_dish(pot, stove, fish, water, onion, carrot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2048_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2015_around_cupboard_117(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_food_vegetable_2113_around_cupboard_117(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2138_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_ingredients(fish:item, vegetable:item, pot:item):
    body:
        achieve_once cut(fish)
        # Cut the fish
        achieve_once cut(vegetable)
        # Cut the vegetables
        achieve_once inside(fish, pot)
        # Put the fish inside the pot
        achieve_once inside(vegetable, pot)
        # Put the vegetables inside the pot

behavior add_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        # Approach the faucet
        achieve has_water(pot)
        # Fill the pot with water

behavior start_cooking(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select fish for the soup

        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select vegetables for the soup

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        prepare_ingredients(fish, vegetable, pot)
        add_water(pot, faucet)
        start_cooking(pot, stove)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2009_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2086_around_cupboard_117(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_salt_2109_around_cupboard_117(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_salt,cupboard_instance)
        else:
            exp(food_salt,cupboard_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,cupboard_instance]=True
        close[cupboard_instance,food_salt]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_fish(fish:item, cutting_board:item):
    body:
        achieve_once on(fish, cutting_board)
        # Place the fish on the cutting board

behavior add_water_to_pot(pot:item, water:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior add_ingredients_to_pot(pot:item, ingredient:item):
    body:
        achieve_once inside(ingredient, pot)
        # Add ingredient to the pot

behavior cook_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Place the pot on the stove and turn the stove on

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select a fish

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        prepare_fish(fish, cutting_board)

        observe(pot, "Check if pot already has water")
        # Check if the pot needs water added
        if not has_water(pot):
            bind water: item where:
                is_food_water(water) # Assuming water is marked as a food item for conveyance
            add_water_to_pot(pot, water)
        
        foreach ingredient: item:
            if is_food_vegetable(ingredient) or is_food_salt(ingredient):
                add_ingredients_to_pot(pot, ingredient)
                # Add vegetables and salt to the soup

        add_ingredients_to_pot(pot, fish) # Add fish to the pot

        cook_on_stove(pot, stove) # Cook the soup on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2048_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2086_around_cupboard_117(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2138_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_fish_for_soup(fish:item, cutting_board:item, knife:item):
    body:
        achieve_once on(fish, cutting_board)
        # Place fish on the cutting board for preparation
        achieve_once cut(fish)
        # Cut the fish into pieces

behavior add_ingredients_to_pot(fish:item, pot:item, onion:item, carrot:item, water:item, stove:item):
    body:
        achieve_once inside(fish, pot)
        achieve_once inside(onion, pot)
        achieve_once inside(carrot, pot)
        achieve_once has_water(pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)
        # Cook the ingredients in the pot on the stove

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select fish to use in the soup
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board
        bind knife: item where:
            is_knife(knife)
        # Select a knife
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind onion: item where:
            is_food_onion(onion)
        # Select an onion as an ingredient
        bind carrot: item where:
            is_food_carrot(carrot)
        # Select a carrot as an ingredient
        bind water: item where:
            is_pourable(water)
        # Select water to add to the pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking
        prepare_fish_for_soup(fish, cutting_board, knife)
        add_ingredients_to_pot(fish, pot, onion, carrot, water, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2108_around_cupboard_117(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_onion_2009_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2086_around_kitchen_counter_119(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_vegetable_2113_around_cupboard_117(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_pot_2138_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_fish_2093_around_cupboard_117(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_fish,cupboard_instance)
        else:
            exp(food_fish,cupboard_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,cupboard_instance]=True
        close[cupboard_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot: item):
    # Function to check if there is water in the pot
    symbol contains_water = has_water(pot)
    return contains_water

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior add_ingredients_to_pot(pot: item, ingredients: list):
    body:
        foreach ingredient: item in ingredients:
            achieve_once inside(ingredient, pot)
        # Place each ingredient inside the pot

behavior cook_fish_soup(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove
        achieve is_on(pot)
        # Ensure the pot is on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        if not has_water_in_pot(pot):
            fill_pot_with_water(pot, faucet)
        # If pot doesnt have water, fill the pot with water

        symbol ingredients = []
        # Define list of ingredients for fish soup

        bind fish: item where:
            is_food_fish(fish) and grabbable(fish)
        # Select fish to be added to the pot
        ingredientsappend(fish)

        # Further ingredients can be selected similarly:
        # eg, add some vegetables to ingredients list
        foreach veg: item:
            if is_food_vegetable(veg) and grabbable(veg):
                ingredientsappend(veg)

        add_ingredients_to_pot(pot, ingredients)
        # Add the gathered ingredients to the pot

        cook_fish_soup(pot, stove)
        # Start cooking the fish soup on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2009_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_carrot_2015_around_cupboard_117(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_pot_2138_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_envelope_2055_around_cupboard_117(envelope:item):
    goal: not unknown(envelope)
    body:
        assert is_envelope(envelope)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(envelope,cupboard_instance)
        else:
            exp(envelope,cupboard_instance)
    eff:
        unknown[envelope]=False
        close[envelope,cupboard_instance]=True
        close[cupboard_instance,envelope]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def in_kitchen_counter(surface:item):
    # Function to check if a surface is in the kitchen
    symbol in_kitchen_counter = exists kitchen: item : (is_kitchen_counter(kitchen) and inside(surface, kitchen))
    return in_kitchen_counter

behavior prepare_ingredients(surface:item):
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select fish as it is needed for the soup
        bind onion: item where:
            is_food_onion(onion)
        # Select onion as it is needed for the soup
        bind carrot: item where:
            is_food_carrot(carrot)
        # Select carrot as it is needed for the soup

        achieve_once inside(fish, surface)
        # Place fish on the surface to prepare
        achieve_once inside(onion, surface)
        # Place onion on the surface to prepare
        achieve_once inside(carrot, surface)
        # Place carrot on the surface to prepare

behavior cook_soup(pot:item, stove:item, surface:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and inside(vegetable, surface):
                achieve_once inside(vegetable, pot)
                # Add each vegetable to the pot

        bind fish: item where:
            is_food_fish(fish) and inside(fish, surface)
        achieve_once inside(fish, pot)
        # Add fish to the pot

        achieve_once has_water(pot)
        # Fill the pot with water

        achieve is_on(stove)
        # Turn on the stove to cook the soup

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            in_kitchen_counter(kitchen_counter)
        # Select a kitchen counter surface

        prepare_ingredients(kitchen_counter) # Prepare the ingredients for the soup
        bind pot: item where:
            is_pot(pot)
        # Select a pot for the soup

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_soup(pot, stove, kitchen_counter) # Cook the soup in the pot
        achieve is_on(stove)


#goal_representation_end

##############################
From agent.py->reset_goal
 
def in_kitchen_counter(surface:item):
    # Function to check if a surface is in the kitchen
    symbol in_kitchen_counter = exists kitchen: item : (is_kitchen_counter(kitchen) and inside(surface, kitchen))
    return in_kitchen_counter

behavior prepare_ingredients(surface:item):
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select fish as it is needed for the soup
        bind onion: item where:
            is_food_onion(onion)
        # Select onion as it is needed for the soup
        bind carrot: item where:
            is_food_carrot(carrot)
        # Select carrot as it is needed for the soup

        achieve_once inside(fish, surface)
        # Place fish on the surface to prepare
        achieve_once inside(onion, surface)
        # Place onion on the surface to prepare
        achieve_once inside(carrot, surface)
        # Place carrot on the surface to prepare

behavior cook_soup(pot:item, stove:item, surface:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and inside(vegetable, surface):
                achieve_once inside(vegetable, pot)
                # Add each vegetable to the pot

        bind fish: item where:
            is_food_fish(fish) and inside(fish, surface)
        achieve_once inside(fish, pot)
        # Add fish to the pot

        achieve_once has_water(pot)
        # Fill the pot with water

        achieve is_on(stove)
        # Turn on the stove to cook the soup

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            in_kitchen_counter(kitchen_counter)
        # Select a kitchen counter surface

        prepare_ingredients(kitchen_counter) # Prepare the ingredients for the soup
        bind pot: item where:
            is_pot(pot)
        # Select a pot for the soup

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_soup(pot, stove, kitchen_counter) # Cook the soup in the pot
        achieve is_on(stove)


##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_fish_2093, fridge_126)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(sink_120)putin_executor(food_fish_2093, sink_120)walk_executor(cupboard_117)exp(food_onion_2104, cupboard_117)walk_executor(food_onion_2104)grab_executor(food_onion_2104)walk_executor(sink_120)putin_executor(food_onion_2104, sink_120)walk_executor(cupboard_117)exp(food_carrot_2086, cupboard_117)walk_executor(food_carrot_2086)grab_executor(food_carrot_2086)walk_executor(sink_120)putin_executor(food_carrot_2086, sink_120)walk_executor(cupboard_117)exp(pot_78, cupboard_117)walk_executor(pot_78)grab_executor(pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)walk_executor(pot_78)open_executor(pot_78)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(pot_78)putin_executor(food_fish_2093, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_fish_2093, fridge_126)
Find food_fish_2093. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_fish_2093)walk_executor(sink_120)putin_executor(food_fish_2093, sink_120)walk_executor(food_onion_2104)grab_executor(food_onion_2104)walk_executor(sink_120)putin_executor(food_onion_2104, sink_120)walk_executor(food_carrot_2086)grab_executor(food_carrot_2086)walk_executor(sink_120)putin_executor(food_carrot_2086, sink_120)walk_executor(cupboard_117)exp(pot_78, cupboard_117)walk_executor(pot_78)grab_executor(pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)walk_executor(pot_78)open_executor(pot_78)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(pot_78)putin_executor(food_fish_2093, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(sink_120)
Robot find: fork_2150, bowl_2142, food_salt_2041, soap_2126, pot_78, soap_2010, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, ice_2024, Robot is close to the food_fish_2093. Robot is close to the sink_120. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
putin_executor(food_fish_2093, sink_120)
Robot find: Robot is close to the food_fish_2093. Robot is close to the sink_120. Robot is close to the kitchen_counter_119. sink_120 is close food_fish_2093. food_fish_2093 is inside sink_120. food_fish_2093 is close sink_120. food_fish_2093 released by right hand. 
##############################
From agent.py
walk_executor(food_onion_2104)
Robot find: Robot is close to the food_onion_2104. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_onion_2104)
Robot find: Robot is close to the food_onion_2104. Robot is close to the fridge_126. Grabbing food_onion_2104 by right hand. 
##############################
From agent.py
walk_executor(sink_120)
Robot find: Robot is close to the food_onion_2104. Robot is close to the sink_120. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
putin_executor(food_onion_2104, sink_120)
Robot find: Robot is close to the food_onion_2104. Robot is close to the sink_120. Robot is close to the kitchen_counter_119. food_onion_2104 is close sink_120. sink_120 is close food_onion_2104. food_onion_2104 is inside sink_120. food_onion_2104 released by right hand. 
##############################
From agent.py
walk_executor(food_carrot_2086)
Robot find: Robot is close to the food_carrot_2086. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_carrot_2086)
Robot find: Robot is close to the food_carrot_2086. Robot is close to the fridge_126. Grabbing food_carrot_2086 by right hand. 
##############################
From agent.py
walk_executor(sink_120)
Robot find: Robot is close to the food_carrot_2086. Robot is close to the sink_120. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
putin_executor(food_carrot_2086, sink_120)
Robot find: Robot is close to the food_carrot_2086. Robot is close to the sink_120. Robot is close to the kitchen_counter_119. food_carrot_2086 is inside sink_120. food_carrot_2086 is close sink_120. sink_120 is close food_carrot_2086. food_carrot_2086 released by right hand. 
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(pot_78, cupboard_117)
Find pot_78. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)walk_executor(food_fish_2093)grab_executor(food_fish_2093)walk_executor(pot_78)putin_executor(food_fish_2093, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
walk_executor(food_fish_2093)
Robot find: Robot is close to the sink_120. Robot is close to the food_fish_2093. 
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the sink_120. Robot is close to the food_fish_2093. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_fish_2093. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_fish_2093, pot_78)
Robot find: Robot is close to the food_fish_2093. Robot is close to the pot_78. Robot is close to the stove_2135. pot_78 is close food_fish_2093. food_fish_2093 is inside pot_78. food_fish_2093 is close pot_78. food_fish_2093 released by right hand. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the food_fish_2093. Robot is close to the pot_78. Robot is close to the stove_2135. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Cook a pot of fish soup.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_fish_2093)', 'walk_executor(sink_120)', 'putin_executor(food_fish_2093, sink_120)', 'walk_executor(food_onion_2104)', 'grab_executor(food_onion_2104)', 'walk_executor(sink_120)', 'putin_executor(food_onion_2104, sink_120)', 'walk_executor(food_carrot_2086)', 'grab_executor(food_carrot_2086)', 'walk_executor(sink_120)', 'putin_executor(food_carrot_2086, sink_120)', 'walk_executor(cupboard_117)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'walk_executor(food_fish_2093)', 'grab_executor(food_fish_2093)', 'walk_executor(pot_78)', 'putin_executor(food_fish_2093, pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(stove_2135)', 'switchon_executor(stove_2135)']
Time info:
Time consume: 220 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0
action_num: 29

Task complete rate:
Keystate: k1 - Requires: 18 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
