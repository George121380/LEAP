From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_food_bread_2084_around_cupboard_117(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve_once is_on(faucet)
        achieve has_water(sink)

behavior add_soap_to_water(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and inside(sink, is_bathroom)
        # Select the sink in the bathroom
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet close to the sink
        bind soap: item where:
            is_soap(soap)
        # Select a soap
        fill_sink_with_water(sink, faucet)
        add_soap_to_water(sink, soap)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_soap_2010_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_soapy_water(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink)
        # Make sure the soap is in the sink
        achieve has_water(sink)
        # Fill the sink with water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and inside_char(char, sink)
        # Select the bathroom sink
        bind soap: item where:
            is_soap(soap)
        # Select a soap
        fill_sink_with_soapy_water(sink, soap)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_cupboard_117(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_detergent_2011_around_bathroom_cabinet_17(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_soap_2125_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink

        bind soap: item where:
            is_soap(soap)
        # Select soap

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        achieve_once has_water(sink)
        # Fill the sink with water

        achieve_once inside(soap, sink)
        # Add soap to the sink to create soapy water

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink

        bind soap: item where:
            is_soap(soap)
        # Select soap

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        achieve_once has_water(sink)
        # Fill the sink with water

        achieve_once inside(soap, sink)
        # Add soap to the sink to create soapy water

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(bathroom_cabinet_17)open_executor(bathroom_cabinet_17)exp(soap_2125, bathroom_cabinet_17)walk_executor(soap_2125)grab_executor(soap_2125)walk_executor(sink_19)putin_executor(soap_2125, sink_19)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(bathroom_cabinet_17)
Robot find: Robot is close to the bathroom_cabinet_17. 
##############################
From agent.py
open_executor(bathroom_cabinet_17)
Robot find: tooth_paste_2059, Robot is close to the bathroom_cabinet_17. Robot is close to the tooth_paste_2059. bathroom_cabinet_17 is opened. 
##############################
From agent.py
exp(soap_2125, bathroom_cabinet_17)
Fail to find soap_2125 around bathroom_cabinet_17. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)exp(soap_2125, sink_19)walk_executor(soap_2125)grab_executor(soap_2125)walk_executor(sink_19)putin_executor(soap_2125, sink_19)
##############################
From agent.py
walk_executor(sink_19)
Robot find: after_shave_2063, soap_2125, detergent_2155, cleaning_solution_2143, Robot is close to the bathroom_counter_18. Robot is close to the sink_19. 
##############################
From agent.py
exp(soap_2125, sink_19)
Find soap_2125. 
##############################
From agent.py-> find a plan in act()
walk_executor(soap_2125)grab_executor(soap_2125)walk_executor(sink_19)putin_executor(soap_2125, sink_19)
##############################
From agent.py
walk_executor(soap_2125)
Robot find: Robot is close to the sink_19. Robot is close to the soap_2125. 
##############################
From agent.py
grab_executor(soap_2125)
Robot find: Robot is close to the sink_19. Robot is close to the soap_2125. Grabbing soap_2125 by right hand. 
##############################
From agent.py
walk_executor(sink_19)
Robot find: Robot is close to the sink_19. Robot is close to the soap_2125. Robot is close to the bathroom_counter_18. 
##############################
From agent.py
putin_executor(soap_2125, sink_19)
Robot find: Robot is close to the sink_19. Robot is close to the soap_2125. Robot is close to the bathroom_counter_18. soap_2125 is inside sink_19. soap_2125 is close sink_19. soap_2125 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill the sink with water by turning on the faucet while ensuring that the sink is plugged to retain the water.
##############################
From agent.py
Human Instruction: You need to fill the sink with water by turning on the faucet while ensuring that the sink is plugged to retain the water.

The actions you have taken:
Action 1: Walk to faucet_20.
Action 2: Switch on faucet_20.
Action 3: Switch off faucet_20.
Action 4: Walk to bathroom_cabinet_17.
Action 5: Open bathroom_cabinet_17.
Action 6: look for soap_2125 around bathroom_cabinet_17.
Action 7: Walk to sink_19.
Action 8: look for soap_2125 around sink_19.
Action 9: Walk to soap_2125.
Action 10: Grab soap_2125.
Action 11: Walk to sink_19.
Action 12: Put soap_2125 into sink_19.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_toilet_15(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==15
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

behavior find_soap_2125_around_light_283(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==283
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(soap,light_instance)
        else:
            exp(soap,light_instance)
    eff:
        unknown[soap]=False
        close[soap,light_instance]=True
        close[light_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve plugged(sink)
        achieve_once is_on(faucet)
        achieve has_water(sink)
        achieve_once is_off(faucet)

behavior add_soap_to_water(soap:item, sink:item):
    body:
        achieve_once inside(soap, sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and inside_char(char, sink)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and is_sink(sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap) and close_char(char, soap)
        # Select the soap nearby

        fill_sink_with_water(sink, faucet)
        add_soap_to_water(soap, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_ironing_board_2144(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(soap,ironing_board_instance)
        else:
            exp(soap,ironing_board_instance)
    eff:
        unknown[soap]=False
        close[soap,ironing_board_instance]=True
        close[ironing_board_instance,soap]=True
    

behavior find_detergent_2155_around_detergent_2155(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2155
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(detergent,detergent_instance)
        else:
            exp(detergent,detergent_instance)
    eff:
        unknown[detergent]=False
        close[detergent,detergent_instance]=True
        close[detergent_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior create_soapy_water(sink:item, soap:item):
    body:
        achieve plugged(sink)
        achieve has_water(sink)
        achieve_once inside(soap, sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and is_bathroom(sink)
        # Select the sink in the bathroom

        bind soap: item where:
            is_soap(soap)
        # Select the soap

        create_soapy_water(sink, soap)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_ironing_board_2144(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2144
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(soap,ironing_board_instance)
        else:
            exp(soap,ironing_board_instance)
    eff:
        unknown[soap]=False
        close[soap,ironing_board_instance]=True
        close[ironing_board_instance,soap]=True
    

behavior find_towel_2128_around_shower_21(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==21
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_sink(sink:item):
    body:
        achieve plugged(sink)

behavior turn_on_faucet(faucet:item):
    body:
        achieve_once is_on(faucet)

behavior turn_off_faucet(faucet:item):
    body:
        achieve_once is_off(faucet)

behavior add_soap_to_sink(soap:item, sink:item):
    body:
        achieve_once inside(soap, sink)

behavior fill_with_water(sink:item):
    body:
        achieve has_water(sink)
        
behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20
        bind soap: item where:
            is_soap(soap) and id[soap] == 2125

        plug_sink(sink)
        turn_on_faucet(faucet)
        fill_with_water(sink)
        add_soap_to_sink(soap, sink)
        turn_off_faucet(faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2126_around_cupboard_117(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(soap,cupboard_instance)
        else:
            exp(soap,cupboard_instance)
    eff:
        unknown[soap]=False
        close[soap,cupboard_instance]=True
        close[cupboard_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(faucet:item, sink:item):
    body:
        achieve_once plugged(sink)
        # Plug the sink to retain water
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the sink with water

behavior add_soap_to_water(sink:item, soap:item):
    body:
        achieve_once inside(soap, sink)
        # Place soap in the sink to create soapy water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and is_bathroom(sink)
        # Select the bathroom sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet close to the sink

        bind soap: item where:
            is_soap(soap) and close(soap, sink)
        # Select the soap close to the sink

        fill_sink_with_water(faucet, sink) 
        # Fill the sink with water

        add_soap_to_water(sink, soap)
        # Add soap to the sink

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_cupboard_117(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(soap,cupboard_instance)
        else:
            exp(soap,cupboard_instance)
    eff:
        unknown[soap]=False
        close[soap,cupboard_instance]=True
        close[cupboard_instance,soap]=True
    

behavior find_tea_bag_2023_around_kitchen_counter_122(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(tea_bag,kitchen_counter_instance)
        else:
            exp(tea_bag,kitchen_counter_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,kitchen_counter_instance]=True
        close[kitchen_counter_instance,tea_bag]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item, soap:item):
    body:
        achieve plugged(sink)
        achieve_once is_on(faucet)
        achieve has_water(sink)
        achieve_once inside(soap, sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and is_bathroom(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        bind soap: item where:
            is_soap(soap)
            close(soap, sink)
        fill_sink_with_water(sink, faucet, soap)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toilet_paper_2076_around_toilet_15(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==15
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

behavior find_soap_2125_around_tablelamp_238(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind tablelamp_instance:item where:
            is_tablelamp(tablelamp_instance) and id[tablelamp_instance]==238
        achieve close_char(char,tablelamp_instance)
        if can_open(tablelamp_instance):
            achieve_once open(tablelamp_instance)
            exp(soap,tablelamp_instance)
        else:
            exp(soap,tablelamp_instance)
    eff:
        unknown[soap]=False
        close[soap,tablelamp_instance]=True
        close[tablelamp_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom
        
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind soap: item where:
            is_soap(soap)
        # Select soap

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet close to the sink

        achieve plugged(sink)
        # Ensure the sink is plugged

        achieve_once is_on(faucet)
        # Turn on the faucet to fill the sink with water

        achieve_once has_water(sink)
        # Fill the sink with water

        achieve_once is_off(faucet)
        # Turn off the faucet

        achieve_once inside(soap, sink)
        # Put the soap into the sink

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(bathroom_cabinet_17)', 'open_executor(bathroom_cabinet_17)', 'walk_executor(sink_19)', 'walk_executor(soap_2125)', 'grab_executor(soap_2125)', 'walk_executor(sink_19)', 'putin_executor(soap_2125, sink_19)']
Time info:
Time consume: 127 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 9
goal correct times: 0
action_num: 10

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: 1.0
Scene_id: 1
##############################
