From agent.py
Reset goals: The sub-goals are: 
['Open the windows in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

bind bathroom: item where:
    is_bathroom(bathroom)

bind window: item where:
    is_window(window) and inside(window, bathroom)

behavior open_window(window: item):
    body:
        achieve_once open(window)

behavior __goal__():
    body:
        open_window(window)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

bind bathroom: item where:
    is_bathroom(bathroom)

bind window: item where:
    is_window(window) and inside(window, bathroom)

behavior open_window(window: item):
    body:
        achieve_once open(window)

behavior __goal__():
    body:
        open_window(window)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior open_window(window: item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        
        foreach window: item:
            if is_window(window) and inside(window, bathroom):
                open_window(window)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior open_window(window: item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        
        foreach window: item:
            if is_window(window) and inside(window, bathroom):
                open_window(window)

##############################
From agent.py-> find a plan in act()
walk_executor(window_2156)open_executor(window_2156)
##############################
From agent.py
walk_executor(window_2156)
Robot find: Robot is close to the window_2156. 
##############################
From agent.py
open_executor(window_2156)
Robot find: Robot is close to the window_2156. window_2156 is opened. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to open any remaining windows in the bathroom. Currently, only window_2156 has been opened.
##############################
From agent.py
Human Instruction: You need to open any remaining windows in the bathroom. Currently, only window_2156 has been opened.

The actions you have taken:
Action 1: Walk to window_2156.
Action 2: Open window_2156.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior open_windows_in_bathroom(window:item, bathroom:item):
    body:
        achieve_once open(window)
        # Open the specific window in the bathroom

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        foreach window: item:
            if is_window(window) and inside(window, bathroom) and not visited(window):
                observe(window, "Check if the window in the bathroom is closed")
                if not open(window):
                    open_windows_in_bathroom(window, bathroom)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior open_windows_in_bathroom(window:item, bathroom:item):
    body:
        achieve_once open(window)
        # Open the specific window in the bathroom

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        foreach window: item:
            if is_window(window) and inside(window, bathroom) and not visited(window):
                observe(window, "Check if the window in the bathroom is closed")
                if not open(window):
                    open_windows_in_bathroom(window, bathroom)

##############################
From agent.py-> find a plan in act()
obs(window_2156, Check if the window in the bathroom is closed)
##############################
From agent.py
obs(window_2156, Check if the window in the bathroom is closed)
Get this information:  window_2156 is close to bathroom_1. window_2156 is close to character_240. window_2156 is inside bathroom_1. window_2156 is DIRTY. window_2156 is OPEN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Open the windows in the bathroom.
Action History:
['walk_executor(window_2156)', 'open_executor(window_2156)']
Time info:
Time consume: 41 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 0
action_num: 2

Task complete rate:
1
Scene_id: 1
##############################
