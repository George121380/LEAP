From agent.py
Reset goals: The sub-goals are: 
['1. Find a plate and place the pizza and hamburger on it.', '2. Heat the pizza and hamburger in the microwave.', '3. Put the plate on a table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2152_around_kitchen_counter_119(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_pizza_2106_around_kitchen_counter_119(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_pizza,kitchen_counter_instance)
        else:
            exp(food_pizza,kitchen_counter_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_pizza]=True
    

behavior find_food_hamburger_2096_around_kitchen_counter_119(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_plate_with_food():
    body:
        bind plate: item where:
            is_plate(plate)
        bind pizza: item where:
            is_food_pizza(pizza)
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        if not (on(pizza, plate) and on(hamburger, plate)):
            walk_to(plate)
            grab(pizza)
            put_on(pizza, plate)
            empty_a_hand()
            grab(hamburger)
            put_on(hamburger, plate)

behavior __goal__():
    body:
        find_plate_with_food()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2096_around_kitchen_counter_119(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

behavior find_food_pizza_2106_around_kitchen_counter_119(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_pizza,kitchen_counter_instance)
        else:
            exp(food_pizza,kitchen_counter_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_pizza]=True
    

behavior find_plate_2152_around_kitchen_counter_123(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def obtain_grabbable_plate():
    # Function to check if there is a grabbable plate and return it
    foreach p: item:
        if is_plate(p) and grabbable(p):
            return p

behavior place_food_on_plate(food:item, plate:item):
    body:
        if not on(food, plate):
            put_on(food, plate) # Place the food item on the plate

behavior retrieve_and_place_on_plate(food_classification, plate:item):
    body:
        bind food: item where:
            food_classification(food)
        place_food_on_plate(food, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and grabbable(plate)
        # Select a grabbable plate

        retrieve_and_place_on_plate(is_food_pizza, plate)
        retrieve_and_place_on_plate(is_food_hamburger, plate)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2096_around_kitchen_counter_119(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

behavior find_food_pizza_2106_around_kitchen_counter_123(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_pizza,kitchen_counter_instance)
        else:
            exp(food_pizza,kitchen_counter_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_pizza]=True
    

behavior find_plate_2152_around_kitchen_counter_123(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def find_and_place_food_on_plate(pizza:item, hamburger:item, plate:item):
    # Function to find and place pizza and hamburger on the plate
    if not on(pizza, plate):
        put_on(pizza, plate)
    if not on(hamburger, plate):
        put_on(hamburger, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        # Select a plate to place food
        bind pizza: item where:
            is_food_pizza(pizza)
        # Select pizza
        bind hamburger: item where:
            is_food_hamburger(hamburger)
        # Select hamburger
        find_and_place_food_on_plate(pizza, hamburger, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2096_around_kitchen_counter_119(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_hamburger,kitchen_counter_instance)
        else:
            exp(food_hamburger,kitchen_counter_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_hamburger]=True
    

behavior find_food_pizza_2106_around_kitchen_counter_119(food_pizza:item):
    goal: not unknown(food_pizza)
    body:
        assert is_food_pizza(food_pizza)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_pizza,kitchen_counter_instance)
        else:
            exp(food_pizza,kitchen_counter_instance)
    eff:
        unknown[food_pizza]=False
        close[food_pizza,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_pizza]=True
    

behavior find_plate_2152_around_kitchen_counter_119(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_on_plate(plate:item, food:item):
    body:
        if not on(food, plate):
            put_on(food, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        bind pizza: item where:
            is_food_pizza(pizza)
        bind hamburger: item where:
            is_food_hamburger(hamburger)

        place_food_on_plate(plate, pizza)
        place_food_on_plate(plate, hamburger)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior place_food_on_plate(plate:item, food:item):
    body:
        if not on(food, plate):
            put_on(food, plate)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate)
        bind pizza: item where:
            is_food_pizza(pizza)
        bind hamburger: item where:
            is_food_hamburger(hamburger)

        place_food_on_plate(plate, pizza)
        place_food_on_plate(plate, hamburger)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(plate_2152, kitchen_counter_119)exp(food_pizza_2106, kitchen_counter_119)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)walk_executor(kitchen_counter_119)exp(food_hamburger_2096, kitchen_counter_119)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(plate_2152, kitchen_counter_119)
Find plate_2152. 
##############################
From agent.py-> find a plan in act()
exp(food_pizza_2106, kitchen_counter_119)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)walk_executor(kitchen_counter_119)exp(food_hamburger_2096, kitchen_counter_119)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)
##############################
From agent.py
exp(food_pizza_2106, kitchen_counter_119)
Fail to find food_pizza_2106 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(food_pizza_2106, kitchen_counter_122)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_hamburger_2096, fridge_126)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(food_pizza_2106, kitchen_counter_122)
Fail to find food_pizza_2106 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(food_pizza_2106, kitchen_counter_123)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_hamburger_2096, fridge_126)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot find: tray_2068, oil_2149, knife_2035, food_kiwi_2054, food_orange_2027, Robot is close to the kitchen_counter_123. 
##############################
From agent.py
exp(food_pizza_2106, kitchen_counter_123)
Fail to find food_pizza_2106 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_pizza_2106, cupboard_118)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_hamburger_2096, fridge_126)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(food_pizza_2106, cupboard_118)
Fail to find food_pizza_2106 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_pizza_2106, fridge_126)walk_executor(food_pizza_2106)grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)walk_executor(fridge_126)exp(food_hamburger_2096, fridge_126)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_pizza_2106, fridge_126)
Find food_pizza_2106. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_pizza_2106)walk_executor(plate_2152)put_executor(food_pizza_2106, plate_2152)walk_executor(food_hamburger_2096)grab_executor(food_hamburger_2096)walk_executor(plate_2152)put_executor(food_hamburger_2096, plate_2152)
##############################
From agent.py
grab_executor(food_pizza_2106)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_pizza_2106 by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the food_pizza_2106. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_pizza_2106, plate_2152)
Robot find: Robot is close to the food_pizza_2106. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. plate_2152 is close food_pizza_2106. food_pizza_2106 is close plate_2152. food_pizza_2106 is on plate_2152. food_pizza_2106 released by right hand. 
##############################
From agent.py
walk_executor(food_hamburger_2096)
Robot find: Robot is close to the food_hamburger_2096. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_hamburger_2096)
Robot find: Robot is close to the food_hamburger_2096. Robot is close to the fridge_126. Grabbing food_hamburger_2096 by right hand. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the food_hamburger_2096. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_hamburger_2096, plate_2152)
Robot find: Robot is close to the food_hamburger_2096. Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. food_hamburger_2096 is close plate_2152. plate_2152 is close food_hamburger_2096. food_hamburger_2096 is on plate_2152. food_hamburger_2096 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior heat_food_in_microwave(food:item, microwave:item):
    body:
        if not inside(food, microwave):
            put_inside(food, microwave)
            # Ensure the food is placed inside the microwave before heating
        if is_off(microwave):
            switch_on(microwave)
            # Switch on the microwave to heat the food

def is_inside_microwave_food_combination(food_combination:list, microwave:item):
    # Check if all the items in the food_combination list are inside the microwave
    foreach food: item in food_combination:
        if not inside(food, microwave):
            return False
    return True

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_pizza_2106, plate) and on(food_hamburger_2096, plate)
        # Bind a plate with food_pizza_2106 and food_hamburger_2096 on it

        bind microwave: item where:
            is_microwave(microwave) and has_switch(microwave)
        # Bind a microwave with a switch

        bind food_combination: list where:
            food_combination = [food_pizza_2106, food_hamburger_2096]
        # Define a combination of foods to be heated

        if not is_inside_microwave_food_combination(food_combination, microwave):
            foreach food: item in food_combination:
                grab(food)
                # Grab each food item to place it in the microwave
                heat_food_in_microwave(food, microwave)
                empty_a_hand()
                # Release the food item after placing it inside

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2115_around_couch_198(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==198
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(milk,couch_instance)
        else:
            exp(milk,couch_instance)
    eff:
        unknown[milk]=False
        close[milk,couch_instance]=True
        close[couch_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_in_microwave(item: item, microwave: item):
    body:
        if is_off(microwave):
            switch_on(microwave)
            # Switch on the microwave
        if not inside(item, microwave):
            put_inside(item, microwave)
            # Put the item inside the microwave

behavior close_microwave(microwave:item):
    body:
        if open(microwave):
            closes(microwave)
            # Close the microwave door

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_pizza_2106, plate) and on(food_hamburger_2096, plate)
        # Select the plate with pizza and hamburger on it
        
        bind microwave: item where:
            is_microwave(microwave) and close_char(char, microwave)
        # Select a microwave that is close to the character
        
        heat_in_microwave(plate, microwave)
        # Heat the plate with food in the microwave
        
        close_microwave(microwave)
        # Close the microwave door after heating

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2049_around_cupboard_117(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_microwave(plate:item, microwave:item):
    body:
        if not inside(plate, microwave):
            put_inside(plate, microwave) # Place the plate with pizza and hamburger inside the microwave

behavior start_microwave(microwave:item):
    body:
        if open(microwave):
            closes(microwave) # Close the microwave door
        if is_off(microwave):
            switch_on(microwave) # Turn on the microwave

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_pizza_2106, plate) and on(food_hamburger_2096, plate)
        # Find the plate with pizza and hamburger

        bind microwave: item where:
            is_microwave(microwave)
        # Find the microwave

        place_in_microwave(plate, microwave)
        # Put the plate inside the microwave
        
        start_microwave(microwave)
        # Start heating the food in the microwave

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior load_microwave(item: item, microwave: item):
    body:
        if not inside(item, microwave):
            put_inside(item, microwave)

behavior heat_food_in_microwave(microwave: item):
    body:
        if open(microwave):
            closes(microwave)
        if is_off(microwave):
            switch_on(microwave)

def is_microwave_ready(microwave: item):
    symbol ready = exists food: item : (is_food(f(hamburger) or is_food_pizza(food)) and inside(food, microwave))
    return ready

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
       
        bind plate: item where:
            is_plate(plate)
        
        if exists food_pizza: item : is_food_pizza(food_pizza) and on(food_pizza, plate):
            load_microwave(food_pizza, microwave)
        
        if exists food_hamburger: item : is_food_hamburger(food_hamburger) and on(food_hamburger, plate):
            load_microwave(food_hamburger, microwave)
        
        if is_microwave_ready(microwave):
            heat_food_in_microwave(microwave)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_pants_2157_around_basket_for_clothes_2078(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_pants,basket_for_clothes_instance)
        else:
            exp(clothes_pants,basket_for_clothes_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
behavior heat_food_in_microwave(plate:item, microwave:item):
    body:
        if not inside(plate, microwave):
            put_inside(plate, microwave)
        if open(microwave):
            closes(microwave)
        if is_off(microwave):
            switch_on(microwave)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and on(food_pizza_2106, plate) and on(food_hamburger_2096, plate)
        bind microwave: item where:
            is_microwave(microwave)
        heat_food_in_microwave(plate, microwave)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior open_microwave(microwave:item):
    body:
        if not open(microwave):
            opens(microwave)

behavior close_microwave(microwave:item):
    body:
        if open(microwave):
            closes(microwave)

behavior heat_food_in_microwave(microwave:item, plate:item):
    body:
        if not inside(plate, microwave):
            open_microwave(microwave)
            put_inside(plate, microwave)
        if is_off(microwave):
            switch_on(microwave)

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
        bind plate: item where:
            is_plate(plate)
        heat_food_in_microwave(microwave, plate)
        close_microwave(microwave)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior open_microwave(microwave:item):
    body:
        if not open(microwave):
            opens(microwave)

behavior close_microwave(microwave:item):
    body:
        if open(microwave):
            closes(microwave)

behavior heat_food_in_microwave(microwave:item, plate:item):
    body:
        if not inside(plate, microwave):
            open_microwave(microwave)
            put_inside(plate, microwave)
        if is_off(microwave):
            switch_on(microwave)

behavior __goal__():
    body:
        bind microwave: item where:
            is_microwave(microwave)
        bind plate: item where:
            is_plate(plate)
        heat_food_in_microwave(microwave, plate)
        close_microwave(microwave)

##############################
From agent.py-> find a plan in act()
walk_executor(microwave_135)open_executor(microwave_135)walk_executor(plate_2152)grab_executor(plate_2152)walk_executor(microwave_135)putin_executor(plate_2152, microwave_135)close_executor(microwave_135)switchon_executor(microwave_135)
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: pot_2040, Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the kitchen_counter_119. Grabbing plate_2152 by right hand. 
##############################
From agent.py
walk_executor(microwave_135)
Robot find: Robot is close to the plate_2152. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. 
##############################
From agent.py
putin_executor(plate_2152, microwave_135)
Robot find: Robot is close to the plate_2152. Robot is close to the pot_2040. Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is close plate_2152. plate_2152 is inside microwave_135. plate_2152 is close microwave_135. plate_2152 released by right hand. 
##############################
From agent.py
close_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is closed. 
##############################
From agent.py
switchon_executor(microwave_135)
Robot find: Robot is close to the kitchen_counter_122. Robot is close to the microwave_135. microwave_135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_table(plate:item, table:item):
    body:
        if not on(plate, table):
            put_on(plate, table)

behavior __goal__():
    body:
        bind plate: item where:
            is_plate(plate) and id[plate] == 2152
        # Select the specific plate with ID 2152
        
        bind table: item where:
            is_table(table) and is_dining_room(table)
        # Select the table in the dining room

        place_on_table(plate, table)
        # Place the plate on the table in the dining room

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_table_cloth_2005_around_table_114(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

behavior find_chair_2003_around_table_270(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_on_table(inhand_obj: item, table: item):
    body:
        if not on(inhand_obj, table):
            put_on(inhand_obj, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind plate: item where:
            is_plate(plate)

        walk_to(plate)
        grab(plate)
        walk_to(table)
        put_on_table(plate, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_on_table(inhand_obj: item, table: item):
    body:
        if not on(inhand_obj, table):
            put_on(inhand_obj, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind plate: item where:
            is_plate(plate)

        walk_to(plate)
        grab(plate)
        walk_to(table)
        put_on_table(plate, table)

##############################
From agent.py-> find a plan in act()
walk_executor(plate_2152)switchoff_executor(microwave_135)open_executor(microwave_135)grab_executor(plate_2152)walk_executor(table_114)put_executor(plate_2152, table_114)
##############################
From agent.py
walk_executor(plate_2152)
Robot find: Robot is close to the microwave_135. 
##############################
From agent.py
switchoff_executor(microwave_135)
Robot find: Robot is close to the microwave_135. microwave_135 is turned off. 
##############################
From agent.py
open_executor(microwave_135)
Robot find: Robot is close to the plate_2152. Robot is close to the microwave_135. microwave_135 is opened. 
##############################
From agent.py
grab_executor(plate_2152)
Robot find: Robot is close to the plate_2152. Robot is close to the microwave_135. Grabbing plate_2152 by right hand. 
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the plate_2152. Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
put_executor(plate_2152, table_114)
Robot find: Robot is close to the plate_2152. Robot is close to the table_114. Robot is close to the mat_102. table_114 is close plate_2152. plate_2152 is close table_114. plate_2152 is on table_114. plate_2152 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Put pizza and hamburger on a plate. Then hot them in the microwave. Then put them on a table in dinning room.
Action History:
['walk_executor(kitchen_counter_119)', 'walk_executor(kitchen_counter_122)', 'walk_executor(kitchen_counter_123)', 'walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_pizza_2106)', 'walk_executor(plate_2152)', 'put_executor(food_pizza_2106, plate_2152)', 'walk_executor(food_hamburger_2096)', 'grab_executor(food_hamburger_2096)', 'walk_executor(plate_2152)', 'put_executor(food_hamburger_2096, plate_2152)', 'walk_executor(microwave_135)', 'open_executor(microwave_135)', 'walk_executor(plate_2152)', 'grab_executor(plate_2152)', 'walk_executor(microwave_135)', 'putin_executor(plate_2152, microwave_135)', 'close_executor(microwave_135)', 'switchon_executor(microwave_135)', 'walk_executor(plate_2152)', 'switchoff_executor(microwave_135)', 'open_executor(microwave_135)', 'grab_executor(plate_2152)', 'walk_executor(table_114)', 'put_executor(plate_2152, table_114)']
Time info:
Time consume: 265 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 12
goal correct times: 0
action_num: 29

Task complete rate:
1
Scene_id: 1
##############################
