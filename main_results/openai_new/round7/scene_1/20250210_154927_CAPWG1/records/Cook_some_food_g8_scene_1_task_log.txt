From agent.py
Reset goals: The sub-goals are: 
['1. Boil the egg.', '2. Wash and prepare the vegetables and lemon.', '3. Combine the boiled egg, vegetables, and lemon in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_kitchen_counter_119(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_pot_2138_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_banana_2083_around_kitchen_counter_119(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_banana,kitchen_counter_instance)
        else:
            exp(food_banana,kitchen_counter_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_banana]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_egg():
    body:
        bind egg: item where:
            is_food_egg(egg)        
        grab(egg)

behavior fill_and_heat_pot():
    body:
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        if not has_water(pot):
            get_water(pot)
        put_on(pot, stove)
        switch_on(stove)

behavior boil_egg():
    body:
        fill_and_heat_pot()
        bind pot: item where:
            is_pot(pot)
        if has_water(pot):
            put_inside(egg, pot)

behavior __goal__():
    body:
        grab_egg()
        boil_egg()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_kitchen_counter_122(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_banana_2083_around_kitchen_counter_123(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_banana,kitchen_counter_instance)
        else:
            exp(food_banana,kitchen_counter_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_banana]=True
    

#exp_behavior_end

#goal_representation
 
def get_pot_to_boil_egg(pot:item, stove:item):
    # Function to place pot on the stove and get it ready for boiling
    if is_off(stove):
        switch_on(stove)
    if not on(pot, stove):
        put_on(pot, stove)

behavior boil_egg(egg:item, pot:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)
        if is_on(pot):
            watch(egg)
            # Assume the egg is boiled after watching 

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        get_pot_to_boil_egg(pot, stove)
        boil_egg(egg, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_kitchen_counter_123(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation

behavior boil_egg(egg:item, pot:item):
    body:
        if not has_water(pot):
            get_water(pot) # Fill the pot with water
        if not inside(egg, pot):
            put_inside(egg, pot) # Place the egg inside the pot

behavior heat_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Bind the item that is categorized as an egg
        bind pot: item where:
            is_pot(pot)
        # Bind the item that is categorized as a pot
        bind stove: item where:
            is_stove(stove)
        # Bind the item that is categorized as a stove
        boil_egg(egg, pot)
        put_on(pot, stove) # Place the pot on the stove
        heat_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior boil_egg(egg:item, pot:item):
    body:
        if not has_water(pot):
            get_water(pot) # Fill the pot with water
        if not inside(egg, pot):
            put_inside(egg, pot) # Place the egg inside the pot

behavior heat_stove(stove:item):
    body:
        if is_off(stove):
            switch_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Bind the item that is categorized as an egg
        bind pot: item where:
            is_pot(pot)
        # Bind the item that is categorized as a pot
        bind stove: item where:
            is_stove(stove)
        # Bind the item that is categorized as a stove
        boil_egg(egg, pot)
        put_on(pot, stove) # Place the pot on the stove
        heat_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(pot_2138, kitchen_counter_122)walk_executor(pot_2138)open_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(kitchen_counter_123)exp(food_egg_2092, kitchen_counter_123)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_2138)putin_executor(food_egg_2092, pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot find: spectacles_2153, pot_78, fryingpan_2154, Robot is close to the kitchen_counter_122. 
##############################
From agent.py
exp(pot_2138, kitchen_counter_122)
Fail to find pot_2138 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_78)putin_executor(food_egg_2092, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the pot_78. Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the pot_78. Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_egg_2092, fridge_126)
Find food_egg_2092. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)putin_executor(food_egg_2092, pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
putin_executor(food_egg_2092, pot_78)
Robot find: Robot is close to the pot_78. Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. pot_78 is close food_egg_2092. food_egg_2092 is inside pot_78. food_egg_2092 is close pot_78. food_egg_2092 released by left hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_cutting_board_2123(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_food_carrot_2086_around_kitchen_counter_123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_prepare(item:item):
    body:
        if dirty(item):
            wash(item)
        if not cut(item):
            cuts(item)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        
        wash_and_prepare(lemon)
        wash_and_prepare(vegetable)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

behavior find_food_orange_2103_around_kitchen_counter_123(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

behavior find_food_carrot_2015_around_cupboard_118(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
behavior wash_and_prepare_vegetables(vegetable:item, faucet:item):
    body:
        if dirty(vegetable) and not inhand(vegetable):
            grab(vegetable)
            walk_to(faucet)
            switch_on(faucet)
            rinse(vegetable)
            empty_a_hand()
            switch_off(faucet)

behavior wash_and_prepare_lemon(lemon:item, faucet:item):
    body:
        if dirty(lemon) and not inhand(lemon):
            grab(lemon)
            walk_to(faucet)
            switch_on(faucet)
            rinse(lemon)
            empty_a_hand()
            switch_off(faucet)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind lemon: item where:
            is_food_lemon(lemon)
        
        wash_and_prepare_vegetables(vegetable, faucet)
        wash_and_prepare_lemon(lemon, faucet)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_orange_2061_around_kitchen_counter_123(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

behavior find_food_carrot_2086_around_kitchen_counter_123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_onion_2048_around_cupboard_118(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_item(item: item):
    body:
        if dirty(item):
            wash(item)

behavior prepare_vegetable_or_lemon(item: item):
    body:
        if cuttable(item) and not cut(item):
            cuts(item)

behavior store_items_on_counter(item: item, counter: item):
    body:
        if not on(item, counter):
            put_on(item, counter)

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)

        foreach item: item:
            if (is_food_vegetable(item) or is_food_lemon(item)) and not visited(item):
                wash_item(item)
                prepare_vegetable_or_lemon(item)
                store_items_on_counter(item, kitchen_counter)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_orange_2103_around_kitchen_counter_123(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

behavior find_food_carrot_2015_around_kitchen_counter_123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_and_prepare_vegetables(lemon: item, vegetable: item):
    body:
        if dirty(lemon):
            wash(lemon)
        if dirty(vegetable):
            wash(vegetable)
        if not cut(lemon):
            cuts(lemon)
        if not cut(vegetable):
            cuts(vegetable)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        walk_to(lemon)
        grab(lemon)
        if has_a_free_hand(char):
            walk_to(vegetable)
            grab(vegetable)
        wash_and_prepare_vegetables(lemon, vegetable)
        empty_a_hand() # Free hands after washing and preparing

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2027_around_kitchen_counter_123(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

behavior find_food_carrot_2015_around_mat_32(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==32
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(food_carrot,mat_instance)
        else:
            exp(food_carrot,mat_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,mat_instance]=True
        close[mat_instance,food_carrot]=True
    

behavior find_food_onion_2104_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetable(vegetable: item):
    body:
        if not clean(vegetable):
            wash(vegetable)

behavior prepare_vegetables():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and dirty(vegetable):
                wash_vegetable(vegetable)

behavior prepare_lemon(lemon: item):
    body:
        if is_food_lemon(lemon) and dirty(lemon):
            wash(lemon)

behavior __goal__():
    body:
        prepare_vegetables()
        bind lemon: item where:
            is_food_lemon(lemon)
        prepare_lemon(lemon)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_vegetable(vegetable: item):
    body:
        if not clean(vegetable):
            wash(vegetable)

behavior prepare_vegetables():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and dirty(vegetable):
                wash_vegetable(vegetable)

behavior prepare_lemon(lemon: item):
    body:
        if is_food_lemon(lemon) and dirty(lemon):
            wash(lemon)

behavior __goal__():
    body:
        prepare_vegetables()
        bind lemon: item where:
            is_food_lemon(lemon)
        prepare_lemon(lemon)

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_vegetable_2113)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2113)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_vegetable_2113 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot has washed the vegetable, but it still needs to find and wash the lemon to prepare it for use.
##############################
From agent.py
Human Instruction: The robot has washed the vegetable, but it still needs to find and wash the lemon to prepare it for use.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for pot_2138 around kitchen_counter_122.
Action 3: Walk to pot_78.
Action 4: Grab pot_78.
Action 5: Walk to faucet_20.
Action 6: Switch on faucet_20.
Action 7: Switch off faucet_20.
Action 8: Walk to fridge_126.
Action 9: Switch off fridge_126.
Action 10: Open fridge_126.
Action 11: look for food_egg_2092 around fridge_126.
Action 12: Grab food_egg_2092.
Action 13: Put food_egg_2092 into pot_78.
Action 14: Walk to stove_2135.
Action 15: Put pot_78 on stove_2135.
Action 16: Switch on stove_2135.
Action 17: Walk to food_vegetable_2113.
Action 18: Grab food_vegetable_2113.
Action 19: Walk to faucet_20.
Action 20: Switch on faucet_20.
Action 21: Wash food_vegetable_2113.
Action 22: Switch off faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior find_and_wash_lemon():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        if dirty(lemon):
            wash(lemon)

behavior prepare_vegetables_and_lemon():
    body:
        if not exists item: item : (is_food_lemon(item) and clean(item)):
            find_and_wash_lemon()
        if not cut(food_vegetable_2113):
            cuts(food_vegetable_2113)

behavior __goal__():
    body:
        prepare_vegetables_and_lemon()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_headset_2131_around_computer_209(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==209
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

behavior find_stereo_2050_around_tvstand_116(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==116
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

#exp_behavior_end

#goal_representation
 
def has_clean_lemon(lemon:item):
    # Function to check if the lemon is clean
    symbol is_clean_lemon = clean(lemon)
    return is_clean_lemon

behavior find_and_wash_lemon():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon
        if not visited(lemon) or not has_clean_lemon(lemon):
            observe(lemon, "Check if the lemon is available and clean")
            # Investigate the condition of the lemon
            if not clean(lemon):
                if has_a_free_hand(char):
                    walk_to(lemon)
                    grab(lemon)
                    walk_to(faucet_20)
                    switch_on(faucet_20)
                    wash(lemon)
                    switch_off(faucet_20)
                    empty_a_hand()

behavior wash_all_vegetables():
    body:
        foreach vegetable: item:
            if is_food_vegetable(vegetable):
                if not clean(vegetable):
                    walk_to(faucet_20)
                    switch_on(faucet_20)
                    wash(vegetable)
                    switch_off(faucet_20)

behavior __goal__():
    body:
        wash_all_vegetables()
        find_and_wash_lemon()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2027_around_kitchen_counter_123(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_wash_lemon():
    body:
        if exists lemon: item : (is_food_lemon(lemon) and dirty(lemon)):
            # If we know a dirty lemon exists, move and wash it
            bind lemon: item where:
                is_food_lemon(lemon) and dirty(lemon)
            walk_to(lemon)
            grab(lemon)
            walk_to(faucet)
            wash(lemon)
            empty_a_hand()
        
        else:
            # If no known dirty lemon, check all unvisited items to find one
            foreach item: item:
                if is_food_lemon(item) and not visited(item):
                    observe(item, "Check if the lemon is dirty")
                    if dirty(item):
                        grab(item)
                        walk_to(faucet)
                        wash(item)
                        empty_a_hand()

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        
        find_and_wash_lemon()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2126_around_sink_19(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_food_kiwi_2054_around_kitchen_counter_123(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_kiwi,kitchen_counter_instance)
        else:
            exp(food_kiwi,kitchen_counter_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_kiwi]=True
    

#exp_behavior_end

#goal_representation
 
def find_and_wash_lemon(lemon:item):
    body:
        if dirty(lemon):
            wash(lemon)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Select a lemon
        if not visited(lemon):
            observe(lemon,"Locate the lemon and check if its dirty")
        find_and_wash_lemon(lemon)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior find_and_wash_lemon():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Binding to find a lemon in the scene
        if dirty(lemon):
            wash(lemon)
            # Wash the lemon if it is dirty

behavior __goal__():
    body:
        find_and_wash_lemon()
        # Invoke finding and washing the lemon

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

behavior find_food_onion_2009_around_cupboard_118(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_lemon():
    body:
        foreach o: item:
            if is_food_lemon(o) and not visited(o):
                observe(o, "Check if the lemon can be found")

behavior grab_and_wash_lemon(lemon:item, faucet:item):
    body:
        if not inhand(lemon):
            grab(lemon)
        if is_off(faucet):
            switch_on(faucet)
        wash(lemon)
        if is_on(faucet):
            switch_off(faucet)
        empty_a_hand()

behavior __goal__():
    body:
        find_lemon()
        bind lemon: item where:
            is_food_lemon(lemon)
        bind faucet: item where:
            is_faucet(faucet)
        grab_and_wash_lemon(lemon, faucet)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. wash and prepare the vegetables and lemon." ?
Answer: Clean a lemon and cut it into pieces. Put the lemon in the bowl. Then wash vegetables and cut them into pieces. Put the vegetables in the bowl.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_wash_lemon(lemon:item, faucet:item):
    body:
        if dirty(lemon):
            walk_to(lemon)
            grab(lemon)
            walk_to(faucet)
            switch_on(faucet)
            wash(lemon)
            switch_off(faucet)
            empty_a_hand()

behavior prepare_vegetables(vegetable:item, faucet:item):
    body:
        if dirty(vegetable):
            walk_to(vegetable)
            grab(vegetable)
            walk_to(faucet)
            switch_on(faucet)
            wash(vegetable)
            switch_off(faucet)
            empty_a_hand()

behavior cut_and_place(lemon:item, vegetable:item, bowl:item):
    body:
        if not cut(lemon):
            grab(lemon)
            cuts(lemon)
            put_inside(lemon, bowl)
            empty_a_hand()

        if not cut(vegetable):
            grab(vegetable)
            cuts(vegetable)
            put_inside(vegetable, bowl)
            empty_a_hand()

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        
        bind vegetable: item where:
            is_food_vegetable(vegetable)

        bind faucet: item where:
            is_faucet(faucet)

        bind bowl: item where:
            is_bowl(bowl)

        find_and_wash_lemon(lemon, faucet)
        prepare_vegetables(vegetable, faucet)
        cut_and_place(lemon, vegetable, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_orange_2027_around_kitchen_counter_123(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
 
def clean_and_cut_vegetables(vegetable:item, bowl:item):
    body:
        if dirty(vegetable):
            wash(vegetable)
        if not cut(vegetable):
            cuts(vegetable)
        if not inside(vegetable, bowl):
            put_inside(vegetable, bowl)

def clean_and_cut_lemon(lemon:item, bowl:item):
    body:
        if dirty(lemon):
            wash(lemon)
        if not cut(lemon):
            cuts(lemon)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        
        bind vegetable: item where:
            is_food_vegetable(vegetable)

        bind lemon: item where:
            is_food_lemon(lemon)

        clean_and_cut_vegetables(vegetable, bowl)
        clean_and_cut_lemon(lemon, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_orange_2103_around_kitchen_counter_123(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_wash_lemon():
    body:
        bind lemon: item where:
            is_food_lemon(lemon)
        # Locate the lemon
        if not clean(lemon):
            wash(lemon)
            # Wash the lemon if it is not already clean

behavior prepare_vegetables(vegetables:item):
    body:
        if not clean(vegetables):
            wash(vegetables) 
            # Wash the vegetables if they are not already clean
        if not cut(vegetables):
            cuts(vegetables)
            # Cut the vegetables into pieces if they are not already cut

behavior prepare_lemon(lemon:item):
    body:
        if not cut(lemon):
            cuts(lemon)
            # Cut the lemon into pieces if it is not already cut

behavior put_ingredients_in_bowl(lemon:item, vegetables:item, bowl:item):
    body:
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
            # Put the lemon inside the bowl
        if not inside(vegetables, bowl):
            put_inside(vegetables, bowl)
            # Put the vegetables inside the bowl

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select washed vegetables
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl where the ingredients will be placed
        find_and_wash_lemon()
        prepare_lemon(lemon)
        prepare_vegetables(vegetables)
        put_ingredients_in_bowl(lemon, vegetables, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_and_cut_vegetables(vegetable:item, bowl:item):
    body:
        if not clean(vegetable):
            wash(vegetable)
        if not cut(vegetable):
            cuts(vegetable)
        put_inside(vegetable, bowl)

behavior clean_and_cut_lemon(lemon:item, bowl:item):
    body:
        if not clean(lemon):
            wash(lemon)
        if not cut(lemon):
            cuts(lemon)
        put_inside(lemon, bowl)

behavior __goal__():
    body:
        bind lemon: item where:
            is_food_lemon(lemon) and dirty(lemon)
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind bowl: item where:
            is_bowl(bowl)
        clean_and_cut_lemon(lemon, bowl)
        clean_and_cut_vegetables(vegetable, bowl)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_orange_2027_around_kitchen_counter_123(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

behavior find_food_carrot_2086_around_kitchen_counter_123(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation

def found_lemon(lemon:item):
    symbol lemon_found=exists l: item : (is_food_lemon(l) and close(l, char))
    return lemon_found

def clean_vegetables(vegetables: item):
    symbol vegetables_clean=exists v: item : (is_food_vegetable(v) and clean(v))
    return vegetables_clean

behavior find_and_clean_lemon_and_vegetables():
    body:
        bind faucet: item where:
            is_faucet(faucet)
        # Find the faucet to wash items

        if not exists lemon: item : (is_food_lemon(lemon) and clean(lemon)):
            foreach l: item:
                if is_food_lemon(l) and dirty(l):
                    walk_to(l)
                    grab(l)
                    walk_to(faucet)
                    switch_on(faucet)
                    wash(l)
                    switch_off(faucet)
                    empty_a_hand()
        
        foreach v: item:
        # If vegetables are not already cleaned, wash them
            if is_food_vegetable(v) and dirty(v):
                grab(v)
                walk_to(faucet)
                switch_on(faucet)
                wash(v)
                switch_off(faucet)
                empty_a_hand()

behavior __goal__():
    body:
        if not found_lemon(lemon):
            foreach l: item:
                if is_food_lemon(l) and not visited(l):
                    observe(l, "Check if its a lemon and if its washed")
        find_and_clean_lemon_and_vegetables()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_orange_2061_around_kitchen_counter_123(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_orange,kitchen_counter_instance)
        else:
            exp(food_orange,kitchen_counter_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_orange]=True
    

behavior find_food_carrot_2015_around_cupboard_117(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_vegetables_and_lemon(vegetable:item, lemon:item, bowl:item):
    body:
        if not clean(lemon):
            wash(lemon)
            grab(lemon)
        if not cut(lemon):
            cuts(lemon)
        if not inside(lemon, bowl):
            put_inside(lemon, bowl)
            empty_a_hand()
        
        grab(vegetable)
        if not clean(vegetable):
            wash(vegetable)
        if not cut(vegetable):
            cuts(vegetable)
        if not inside(vegetable, bowl):
            put_inside(vegetable, bowl)
            empty_a_hand()

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        bind lemon: item where:
            is_food_lemon(lemon)
        bind bowl: item where:
            is_bowl(bowl)
        
        prepare_vegetables_and_lemon(vegetable, lemon, bowl)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(kitchen_counter_122)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_egg_2092)', 'putin_executor(food_egg_2092, pot_78)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_vegetable_2113)', 'switchoff_executor(faucet_20)']
Time info:
Time consume: 403 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 20
goal correct times: 0
action_num: 20

Task complete rate:
Keystate: k1 - Requires: 0 steps
Keystate: k2 - Requires: 24 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
