From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_kitchen_counter_119(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_banana_2083_around_kitchen_counter_123(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_banana,kitchen_counter_instance)
        else:
            exp(food_banana,kitchen_counter_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_banana]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_egg(egg:item):
    body:
        if not inhand(egg):
            grab(egg)

behavior fill_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior start_stove(stove:item):
    body:
        if has_switch(stove) and is_off(stove):
            switch_on(stove)

behavior boil_egg(egg:item, pot:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        
        grab_egg(egg)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        start_stove(stove)
        boil_egg(egg, pot)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior grab_egg(egg:item):
    body:
        if not inhand(egg):
            grab(egg)

behavior fill_pot_with_water(pot:item):
    body:
        if not has_water(pot):
            get_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior start_stove(stove:item):
    body:
        if has_switch(stove) and is_off(stove):
            switch_on(stove)

behavior boil_egg(egg:item, pot:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        
        grab_egg(egg)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        start_stove(stove)
        boil_egg(egg, pot)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_egg_2092, kitchen_counter_119)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(cupboard_118)open_executor(cupboard_118)exp(pot_2138, cupboard_118)walk_executor(pot_2138)open_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_121)walk_executor(kitchen_counter_119)put_executor(food_egg_2092, kitchen_counter_119)switchon_executor(faucet_121)switchoff_executor(faucet_121)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_2138)putin_executor(food_egg_2092, pot_2138)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the kitchen_counter_119. 
##############################
From agent.py
exp(food_egg_2092, kitchen_counter_119)
Fail to find food_egg_2092 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_121)walk_executor(kitchen_counter_119)put_executor(food_egg_2092, kitchen_counter_119)switchon_executor(faucet_121)switchoff_executor(faucet_121)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_78)putin_executor(food_egg_2092, pot_78)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_egg_2092, fridge_126)
Find food_egg_2092. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_121)walk_executor(kitchen_counter_119)put_executor(food_egg_2092, kitchen_counter_119)switchon_executor(faucet_121)switchoff_executor(faucet_121)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(pot_78)putin_executor(food_egg_2092, pot_78)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by left hand. 
##############################
From agent.py
walk_executor(faucet_121)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the faucet_121. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_egg_2092, kitchen_counter_119)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. kitchen_counter_119 is close food_egg_2092. food_egg_2092 is close kitchen_counter_119. food_egg_2092 is on kitchen_counter_119. food_egg_2092 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_121)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. faucet_121 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_121)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. faucet_121 is turned off. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by left hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the kitchen_counter_119. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
putin_executor(food_egg_2092, pot_78)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the stove_2135. pot_78 is close food_egg_2092. food_egg_2092 is inside pot_78. food_egg_2092 is close pot_78. food_egg_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot should fill the pot with water. Then ensure the stove is switched on if not already done, place the pot on the stove, and proceed to boil the egg.
##############################
From agent.py
Human Instruction: The robot should fill the pot with water. Then ensure the stove is switched on if not already done, place the pot on the stove, and proceed to boil the egg.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_egg_2092 around kitchen_counter_119.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_egg_2092 around fridge_126.
Action 7: Grab food_egg_2092.
Action 8: Walk to pot_78.
Action 9: Grab pot_78.
Action 10: Walk to faucet_121.
Action 11: Walk to kitchen_counter_119.
Action 12: Put food_egg_2092 on kitchen_counter_119.
Action 13: Switch on faucet_121.
Action 14: Switch off faucet_121.
Action 15: Put pot_78 on stove_2135.
Action 16: Switch on stove_2135.
Action 17: Walk to food_egg_2092.
Action 18: Grab food_egg_2092.
Action 19: Walk to pot_78.
Action 20: Put food_egg_2092 into pot_78.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_water_in_pot(pot:item, faucet:item):
    body:
        if not has_water(pot):
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)

behavior boil_egg_on_stove(egg:item, pot:item, stove:item):
    body:
        ensure_water_in_pot(pot, faucet_121)
        if not inside(egg, pot):
            put_inside(egg, pot)
        if not on(pot, stove):
            put_on(pot, stove)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and id[egg]==2092
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        boil_egg_on_stove(egg, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_with_water(obj:item):
    body:
        if not has_water(obj):
            get_water(obj)
            # Fill the item with water

behavior place_on_stove(obj:item, stove:item):
    body:
        if not on(obj, stove):
            put_on(obj, stove)
            # Place the item on the stove

behavior start_boiling(stove:item, obj:item):
    body:
        if is_off(stove):
            switch_on(stove)
            # Ensure the stove is turned on
        if on(obj, stove) and has_water(obj):
            # Confirm the pot is on the stove and has water
            # Begin boiling the egg, assuming automatic processgrid outcome

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
            # Bind a pot instance
        bind stove: item where:
            is_stove(stove)
            # Bind a stove instance
        bind egg: item where:
            is_food_egg(egg)
            # Bind an egg instance
        if not inside(egg, pot):
            walk_to(egg)
            grab(egg)
            # Approach and grab the egg
            walk_to(pot)
            put_inside(egg, pot)
            # Walk to the pot and put the egg inside
        walk_to(faucet_121)
        grab(pot)
        # Grab the pot to fill with water
        fill_with_water(pot)
        # Fill the pot with water
        walk_to(stove)
        place_on_stove(pot, stove)
        # Put the pot on the stove
        start_boiling(stove, pot)
        # Start boiling the egg in the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_bread_2084_around_cupboard_118(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_the_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            grab(pot)
            walk_to(faucet)
            get_water(pot)
            # Fill the pot with water

behavior boil_the_egg(pot:item, stove:item, egg:item):
    body:
        if not inside(egg, pot):
            grab(egg)
            put_inside(egg, pot)
            # Put the egg inside the pot
        
        if not on(pot, stove):
            put_on(pot, stove)
            # Place the pot on the stove

        if is_off(stove):
            switch_on(stove)
            # Turn on the stove to start boiling the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)
        
        fill_the_pot_with_water(pot, faucet)
        
        bind stove: item where:
            is_stove(stove)
        
        boil_the_egg(pot, stove, egg)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_the_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            grab(pot)
            walk_to(faucet)
            get_water(pot)
            # Fill the pot with water

behavior boil_the_egg(pot:item, stove:item, egg:item):
    body:
        if not inside(egg, pot):
            grab(egg)
            put_inside(egg, pot)
            # Put the egg inside the pot
        
        if not on(pot, stove):
            put_on(pot, stove)
            # Place the pot on the stove

        if is_off(stove):
            switch_on(stove)
            # Turn on the stove to start boiling the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind pot: item where:
            is_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)
        
        fill_the_pot_with_water(pot, faucet)
        
        bind stove: item where:
            is_stove(stove)
        
        boil_the_egg(pot, stove, egg)

##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

behavior find_food_bread_2084_around_kitchen_counter_123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def is_boiling(pot: item):
    # Function to check if the pot is on the stove and stove is on
    symbol is_on_stove_and_on=on(pot, stove) and is_on(stove)
    return is_on_stove_and_on

behavior switch_on_stove(stove: item):
    body:
        if is_off(stove):
            switch_on(stove)

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if not has_water(pot):
            grab(pot)
            walk_to(faucet)
            get_water(pot)
            walk_to(stove)

behavior boil_egg_in_pot(egg: item, pot: item):
    body:
        if not inside(egg, pot):
            grab(egg)
            put_inside(egg, pot)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind stove: item where:
            is_stove(stove)
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)
        put_on(pot, stove)
        switch_on_stove(stove)
        boil_egg_in_pot(egg, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_recipient_filled(pot:item):
    # Function to check if the pot has water inside
    symbol filled=has_water(pot)
    return filled

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)

        if not is_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        
        bind stove: item where:
            is_stove(stove)
        # Select stove

        if not is_recipient_filled(pot):
            get_water(pot)
        
        put_on(pot, stove)
        
        boil_egg(egg, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_recipient_filled(pot:item):
    # Function to check if the pot has water inside
    symbol filled=has_water(pot)
    return filled

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)

        if not is_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        
        bind stove: item where:
            is_stove(stove)
        # Select stove

        if not is_recipient_filled(pot):
            get_water(pot)
        
        put_on(pot, stove)
        
        boil_egg(egg, pot, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_78)put_executor(pot_78, stove_2135)
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the stove_2135. Grabbing pot_78 by right hand. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. pot_78 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to ensure that the pot is filled with water before boiling the egg as the task requires the pot to have water in it, which hasn't been confirmed in the actions taken.
##############################
From agent.py
Human Instruction: The robot needs to ensure that the pot is filled with water before boiling the egg as the task requires the pot to have water in it, which hasn't been confirmed in the actions taken.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_egg_2092 around kitchen_counter_119.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_egg_2092 around fridge_126.
Action 7: Grab food_egg_2092.
Action 8: Walk to pot_78.
Action 9: Grab pot_78.
Action 10: Walk to faucet_121.
Action 11: Walk to kitchen_counter_119.
Action 12: Put food_egg_2092 on kitchen_counter_119.
Action 13: Switch on faucet_121.
Action 14: Switch off faucet_121.
Action 15: Put pot_78 on stove_2135.
Action 16: Switch on stove_2135.
Action 17: Walk to food_egg_2092.
Action 18: Grab food_egg_2092.
Action 19: Walk to pot_78.
Action 20: Put food_egg_2092 into pot_78.
Action 21: Grab pot_78.
Action 22: Put pot_78 on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_boiling(pot:item):
    # Function to check if pot is boiling with stove on and with water
    symbol boiling=exists stove: item : (is_stove(stove) and on(pot, stove) and is_on(stove) and has_water(pot))
    return boiling

behavior ensure_water_in_pot(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            get_water(pot)

behavior boil_the_egg(pot:item, egg:item, stove:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)
            
        ensure_water_in_pot(pot, faucet)
        
        if not is_boiling(pot):
            boil_the_egg(pot, egg, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_boiling(pot:item):
    # Function to check if pot is boiling with stove on and with water
    symbol boiling=exists stove: item : (is_stove(stove) and on(pot, stove) and is_on(stove) and has_water(pot))
    return boiling

behavior ensure_water_in_pot(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            get_water(pot)

behavior boil_the_egg(pot:item, egg:item, stove:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)
            
        ensure_water_in_pot(pot, faucet)
        
        if not is_boiling(pot):
            boil_the_egg(pot, egg, stove)

##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            get_water(pot)
            # Ensure the pot has water by getting water from the faucet

behavior boil_pot(pot:item, stove:item):
    body:
        if not is_on(stove):
            walk_to(stove)
            switch_on(stove)
            # Turn on the stove to boil the pot

def in_pot(food:item, pot:item):
    symbol food_in_pot=exists f: item : (is_food(f) and inside(f, pot))
    return food_in_pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==78
        # Select pot with ID 78
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==121
        # Select faucet with ID 121
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select stove with ID 2135
        fill_pot_with_water(pot, faucet)
        boil_pot(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

behavior find_food_bread_2084_around_cupboard_118(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_pot_has_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            get_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        
        walk_to(pot)
        ensure_pot_has_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_egg(egg, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior ensure_pot_has_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            get_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior boil_egg(egg:item, pot:item, stove:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind stove: item where:
            is_stove(stove)
        bind faucet: item where:
            is_faucet(faucet)
        
        walk_to(pot)
        ensure_pot_has_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_egg(egg, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_78)
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill the pot with water. The actions do not confirm that the pot has been filled with water before placing the egg inside and attempting to boil it. You should ensure that the pot has water by switching on the faucet and putting water in the pot.
##############################
From agent.py
Human Instruction: The robot needs to fill the pot with water. The actions do not confirm that the pot has been filled with water before placing the egg inside and attempting to boil it. You should ensure that the pot has water by switching on the faucet and putting water in the pot.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_egg_2092 around kitchen_counter_119.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_egg_2092 around fridge_126.
Action 7: Grab food_egg_2092.
Action 8: Walk to pot_78.
Action 9: Grab pot_78.
Action 10: Walk to faucet_121.
Action 11: Walk to kitchen_counter_119.
Action 12: Put food_egg_2092 on kitchen_counter_119.
Action 13: Switch on faucet_121.
Action 14: Switch off faucet_121.
Action 15: Put pot_78 on stove_2135.
Action 16: Switch on stove_2135.
Action 17: Walk to food_egg_2092.
Action 18: Grab food_egg_2092.
Action 19: Walk to pot_78.
Action 20: Put food_egg_2092 into pot_78.
Action 21: Grab pot_78.
Action 22: Put pot_78 on stove_2135.
Action 23: Walk to pot_78.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_bread_2084_around_kitchen_counter_123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_pot_has_water(pot: item, faucet: item):
    body:
        if not has_water(pot):
            get_water(pot)
            # Fill the pot with water from the faucet

behavior boil_egg_on_stove(egg: item, pot: item, stove: item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)
            # Put the egg into the pot
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        ensure_pot_has_water(pot, faucet)
        boil_egg_on_stove(egg, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior ensure_pot_has_water(pot: item, faucet: item):
    body:
        if not has_water(pot):
            get_water(pot)
            # Fill the pot with water from the faucet

behavior boil_egg_on_stove(egg: item, pot: item, stove: item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)
            # Put the egg into the pot
        if is_off(stove):
            switch_on(stove)
            # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        ensure_pot_has_water(pot, faucet)
        boil_egg_on_stove(egg, pot, stove)

##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil the egg." ?
Answer: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_light_39(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==39
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(pot,light_instance)
        else:
            exp(pot,light_instance)
    eff:
        unknown[pot]=False
        close[pot,light_instance]=True
        close[light_instance,pot]=True
    

behavior find_food_bread_2084_around_cupboard_118(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            grab(pot)
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)
            empty_a_hand()

behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        if not on(egg, pot):
            put_on(egg, pot)
        if not is_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 121
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
            
        fill_pot_with_water(pot, faucet)
        boil_egg(pot, stove, egg)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            walk_to(faucet)
            grab(pot)
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)
            empty_a_hand()

behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        if not on(egg, pot):
            put_on(egg, pot)
        if not is_on(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 121
        bind pot: item where:
            is_pot(pot) and id[pot] == 78
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
            
        fill_pot_with_water(pot, faucet)
        boil_egg(pot, stove, egg)

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)put_executor(food_egg_2092, pot_78)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the stove_2135. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
put_executor(food_egg_2092, pot_78)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the stove_2135. pot_78 is close food_egg_2092. food_egg_2092 is close pot_78. food_egg_2092 is on pot_78. food_egg_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot must be filled with water before placing the egg inside and switching on the stove. You need to perform the action of filling the pot with water by positioning the pot under the faucet and turning it on.
##############################
From agent.py
Human Instruction: The pot must be filled with water before placing the egg inside and switching on the stove. You need to perform the action of filling the pot with water by positioning the pot under the faucet and turning it on.

Human Guidance: Fill the pot with water. Put the pot on the stove. Turn on the stove. Put the egg in the pot.
The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_egg_2092 around kitchen_counter_119.
Action 3: Walk to fridge_126.
Action 4: Switch off fridge_126.
Action 5: Open fridge_126.
Action 6: look for food_egg_2092 around fridge_126.
Action 7: Grab food_egg_2092.
Action 8: Walk to pot_78.
Action 9: Grab pot_78.
Action 10: Walk to faucet_121.
Action 11: Walk to kitchen_counter_119.
Action 12: Put food_egg_2092 on kitchen_counter_119.
Action 13: Switch on faucet_121.
Action 14: Switch off faucet_121.
Action 15: Put pot_78 on stove_2135.
Action 16: Switch on stove_2135.
Action 17: Walk to food_egg_2092.
Action 18: Grab food_egg_2092.
Action 19: Walk to pot_78.
Action 20: Put food_egg_2092 into pot_78.
Action 21: Grab pot_78.
Action 22: Put pot_78 on stove_2135.
Action 23: Walk to pot_78.
Action 24: Grab food_egg_2092.
Action 25: Put food_egg_2092 on pot_78.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_bread_2084_around_cupboard_118(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not has_water(pot):
            grab(pot)
            walk_to(faucet)
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)
            empty_a_hand()

behavior boil_egg(pot:item, stove:item, egg:item):
    body:
        if not inside(egg, pot):
            walk_to(egg)
            grab(egg)
            walk_to(pot)
            put_inside(egg, pot)
        if is_off(stove):
            switch_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        bind egg: item where:
            is_food_egg(egg)

        fill_pot_with_water(pot, faucet)
        boil_egg(pot, stove, egg)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2129_around_home_office_241(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

behavior find_food_bread_2084_around_cupboard_118(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(faucet:item, pot:item):
    body:
        if not has_water(pot):
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)

behavior heat_pot(stove:item, pot:item):
    body:
        if not is_on(stove):
            switch_on(stove)

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(faucet, pot)
        place_egg_in_pot(egg, pot)
        put_pot_on_stove(pot, stove)
        heat_pot(stove, pot)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(faucet:item, pot:item):
    body:
        if not has_water(pot):
            switch_on(faucet)
            get_water(pot)
            switch_off(faucet)

behavior place_egg_in_pot(egg:item, pot:item):
    body:
        if not inside(egg, pot):
            put_inside(egg, pot)

behavior heat_pot(stove:item, pot:item):
    body:
        if not is_on(stove):
            switch_on(stove)

behavior put_pot_on_stove(pot:item, stove:item):
    body:
        if not on(pot, stove):
            put_on(pot, stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        bind pot: item where:
            is_pot(pot)
        bind faucet: item where:
            is_faucet(faucet)
        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(faucet, pot)
        place_egg_in_pot(egg, pot)
        put_pot_on_stove(pot, stove)
        heat_pot(stove, pot)

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)putin_executor(food_egg_2092, pot_78)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the stove_2135. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
putin_executor(food_egg_2092, pot_78)
Robot find: Robot is close to the food_egg_2092. Robot is close to the pot_78. Robot is close to the stove_2135. food_egg_2092 is inside pot_78. food_egg_2092 is close pot_78. food_egg_2092 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that the pot is filled with water. Although the faucet was turned on and off, there is no information to confirm that the pot was placed under the faucet for filling. Place the pot under the faucet, turn on the faucet to fill the pot, then turn off the faucet.
##############################
Task Summary:
Task Goal:
Boil egg.
Action History:
['walk_executor(kitchen_counter_119)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_egg_2092)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_121)', 'walk_executor(kitchen_counter_119)', 'put_executor(food_egg_2092, kitchen_counter_119)', 'switchon_executor(faucet_121)', 'switchoff_executor(faucet_121)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(food_egg_2092)', 'grab_executor(food_egg_2092)', 'walk_executor(pot_78)', 'putin_executor(food_egg_2092, pot_78)', 'grab_executor(pot_78)', 'put_executor(pot_78, stove_2135)', 'walk_executor(pot_78)', 'grab_executor(food_egg_2092)', 'put_executor(food_egg_2092, pot_78)', 'grab_executor(food_egg_2092)', 'putin_executor(food_egg_2092, pot_78)']
Time info:
Time consume: 268 seconds
Exp_helper query times: 0
Guidance query times: 1
library scale: 0
goal generate times: 13
goal correct times: 0
action_num: 25

Task complete rate:
1
Scene_id: 1
##############################
