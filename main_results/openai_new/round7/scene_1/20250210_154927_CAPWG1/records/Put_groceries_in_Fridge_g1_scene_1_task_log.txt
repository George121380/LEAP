From agent.py
Reset goals: The sub-goals are: 
['1. Find the table in the dining room.', '2. Place the milk, turkey, egg, fish, and chicken on the table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_table_199(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_in_dining_room_table(x:item):
    symbol is_in_dining_room=exists room: item: (is_dining_room(room) and inside(x, room))
    return is_in_dining_room

behavior __goal__():
    body:
        foreach t: item:
            if is_table(t) and not visited(t) and is_in_dining_room_table(t):
                observe(t, "Find the table in the dining room") 

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_in_dining_room_table(x:item):
    symbol is_in_dining_room=exists room: item: (is_dining_room(room) and inside(x, room))
    return is_in_dining_room

behavior __goal__():
    body:
        foreach t: item:
            if is_table(t) and not visited(t) and is_in_dining_room_table(t):
                observe(t, "Find the table in the dining room") 

##############################
From agent.py-> find a plan in act()
walk_executor(table_114)obs(table_114, Find the table in the dining room)
##############################
From agent.py
walk_executor(table_114)
Robot find: mat_102, cup_2049, pillow_103, pillow_104, pillow_105, pillow_106, lighter_2004, lighter_2039, box_2038, clothes_hat_2117, milk_2115, cup_2134, check_2058, drawing_110, drawing_111, clothes_gloves_2118, cup_2132, food_bread_2084, dry_pasta_2114, knife_2122, cup_2133, table_cloth_2005, food_food_2021, Robot is close to the table_114. Robot is close to the mat_102. 
##############################
From agent.py
obs(table_114, Find the table in the dining room)
Get this information:  cup_2049 is on table_114. box_2038 is on table_114. clothes_hat_2117 is on table_114. table_114 is inside dining_room_41. milk_2115 is on table_114. cup_2134 is on table_114. table_114 is facing drawing_110. table_114 is facing drawing_111. check_2058 is on table_114. clothes_gloves_2118 is on table_114. table_114 is close to cup_2049. table_114 is close to check_2058. table_114 is close to food_bread_2084. table_114 is close to floor_44. table_114 is close to floor_47. table_114 is close to floor_48. table_114 is close to floor_50. table_114 is close to dry_pasta_2114. table_114 is close to milk_2115. table_114 is close to clothes_hat_2117. table_114 is close to clothes_gloves_2118. table_114 is close to knife_2122. table_114 is close to cup_2132. table_114 is close to cup_2133. table_114 is close to cup_2134. table_114 is close to table_cloth_2005. table_114 is close to food_food_2021. table_114 is close to mat_102. table_114 is close to pillow_103. table_114 is close to pillow_104. table_114 is close to pillow_105. table_114 is close to pillow_106. table_114 is close to bench_113. table_114 is close to bench_115. table_114 is close to box_2038. table_114 is close to character_240. cup_2132 is on table_114. table_114 is on mat_102. table_114 is on floor_47. food_food_2021 is on table_114. knife_2122 is on table_114. cup_2133 is on table_114. table_cloth_2005 is on table_114. food_bread_2084 is on table_114. dry_pasta_2114 is on table_114. table_114 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_bookshelf_275(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

behavior find_food_turkey_2112_around_fridge_126(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior grab_and_place(item1:item, item2:item, surface:item):
    body:
        if not inhand(item1) and has_a_free_hand(char):
            grab(item1)
        if not inhand(item2) and has_a_free_hand(char):
            grab(item2)
        if inhand(item1):
            put_on(item1, surface)
            empty_a_hand()
        if inhand(item2):
            put_on(item2, surface)
            empty_a_hand()

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind egg: item where:
            is_food_egg(egg)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind table: item where:
            is_table(table)

        grab_and_place(milk, turkey, table)
        grab_and_place(egg, fish, table)
        
        if not inhand(chicken) and has_a_free_hand(char):
            grab(chicken)
        if inhand(chicken):
            put_on(chicken, table)
            empty_a_hand()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_turkey_2112_around_fridge_126(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_fish_2093_around_cupboard_118(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_fish,cupboard_instance)
        else:
            exp(food_fish,cupboard_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,cupboard_instance]=True
        close[cupboard_instance,food_fish]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_item_on_table(item: item, table: item):
    body:
        if not on(item, table):
            put_on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and is_dining_room(table)

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        place_item_on_table(milk, table)
        place_item_on_table(turkey, table)
        place_item_on_table(egg, table)
        place_item_on_table(fish, table)
        place_item_on_table(chicken, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_diary_2008_around_bookshelf_275(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_turkey_2112_around_fridge_126(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_item_on_table(item: item, table: item):
    body:
        if not on(item, table):
            put_on(item, table)

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table) and visited(dining_table)

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        place_item_on_table(milk, dining_table)
        place_item_on_table(turkey, dining_table)
        place_item_on_table(egg, dining_table)
        place_item_on_table(fish, dining_table)
        place_item_on_table(chicken, dining_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_item_on_table(item: item, table: item):
    body:
        if not on(item, table):
            put_on(item, table)

behavior __goal__():
    body:
        bind dining_table: item where:
            is_table(dining_table) and visited(dining_table)

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        place_item_on_table(milk, dining_table)
        place_item_on_table(turkey, dining_table)
        place_item_on_table(egg, dining_table)
        place_item_on_table(fish, dining_table)
        place_item_on_table(chicken, dining_table)

##############################
Error record: object of type 'NoneType' has no len()
##############################
Task Summary:
Task Goal:
Syntax Error
Action History:
['walk_executor(table_114)']
Time info:
Time consume: 186 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 0
goal generate times: 4
goal correct times: 0
action_num: 1

Task complete rate:
Keystate: k1 - Requires: 19 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
